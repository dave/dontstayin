using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using System.Runtime.Serialization;
using Bobs.CachedDataAccess;
namespace Bobs
{

	public class Tables
	{
		public static string GetTableName(TablesEnum tableEnum)
		{
			switch (tableEnum)
			{
				case TablesEnum.Abuse: return "Abuse";
				case TablesEnum.Admin: return "Admin";
				case TablesEnum.Article: return "Article";
				case TablesEnum.BacardiEmail: return "BacardiEmail";
				case TablesEnum.BankExport: return "BankExport";
				case TablesEnum.Banner: return "Banner";
				case TablesEnum.BannerFolder: return "BannerFolder";
				case TablesEnum.BannerMusicType: return "BannerMusicType";
				case TablesEnum.BannerPlace: return "BannerPlace";
				case TablesEnum.BannerStat: return "BannerStat";
				case TablesEnum.BinRange: return "BinRange";
				case TablesEnum.Brand: return "Brand";
				case TablesEnum.Buddy: return "Buddy";
				case TablesEnum.CampaignCredit: return "CampaignCredit";
				case TablesEnum.Chat: return "Chat";
				case TablesEnum.ChatMessage: return "ChatMessage";
				case TablesEnum.ClubDetails: return "ClubDetails";
				case TablesEnum.Comment: return "Comment";
				case TablesEnum.CommentAlert: return "CommentAlert";
				case TablesEnum.Comp: return "Comp";
				case TablesEnum.CompEntry: return "CompEntry";
				case TablesEnum.Country: return "Country";
				case TablesEnum.Demographics: return "Demographics";
				case TablesEnum.Domain: return "Domain";
				case TablesEnum.DomainStats: return "DomainStats";
				case TablesEnum.DonationIcon: return "DonationIcon";
				case TablesEnum.Event: return "Event";
				case TablesEnum.EventBrand: return "EventBrand";
				case TablesEnum.EventMusicType: return "EventMusicType";
				case TablesEnum.FacebookPost: return "FacebookPost";
				case TablesEnum.Fiat500Entry: return "Fiat500Entry";
				case TablesEnum.Flyer: return "Flyer";
				case TablesEnum.Gallery: return "Gallery";
				case TablesEnum.GalleryUsr: return "GalleryUsr";
				case TablesEnum.Global: return "Global";
				case TablesEnum.Group: return "Group";
				case TablesEnum.GroupEvent: return "GroupEvent";
				case TablesEnum.GroupPhoto: return "GroupPhoto";
				case TablesEnum.GroupUsr: return "GroupUsr";
				case TablesEnum.GuestlistCredit: return "GuestlistCredit";
				case TablesEnum.Hit: return "Hit";
				case TablesEnum.IncomingSms: return "IncomingSms";
				case TablesEnum.InsertionOrder: return "InsertionOrder";
				case TablesEnum.InsertionOrderItem: return "InsertionOrderItem";
				case TablesEnum.Invoice: return "Invoice";
				case TablesEnum.InvoiceCredit: return "InvoiceCredit";
				case TablesEnum.InvoiceItem: return "InvoiceItem";
				case TablesEnum.InvoiceTransfer: return "InvoiceTransfer";
				case TablesEnum.IpCountry: return "IpCountry";
				case TablesEnum.Log: return "Log";
				case TablesEnum.LogPageTime: return "LogPageTime";
				case TablesEnum.Lol: return "Lol";
				case TablesEnum.Misc: return "Misc";
				case TablesEnum.MixmagEntry: return "MixmagEntry";
				case TablesEnum.MixmagGreatestDj: return "MixmagGreatestDj";
				case TablesEnum.MixmagGreatestVote: return "MixmagGreatestVote";
				case TablesEnum.MixmagIssue: return "MixmagIssue";
				case TablesEnum.MixmagRead: return "MixmagRead";
				case TablesEnum.MixmagSubscription: return "MixmagSubscription";
				case TablesEnum.MixmagVote: return "MixmagVote";
				case TablesEnum.Mobile: return "Mobile";
				case TablesEnum.MusicType: return "MusicType";
				case TablesEnum.OutgoingSms: return "OutgoingSms";
				case TablesEnum.PageTime: return "PageTime";
				case TablesEnum.Para: return "Para";
				case TablesEnum.Phone: return "Phone";
				case TablesEnum.Photo: return "Photo";
				case TablesEnum.PhotoReview: return "PhotoReview";
				case TablesEnum.Place: return "Place";
				case TablesEnum.Prefs: return "Prefs";
				case TablesEnum.Promoter: return "Promoter";
				case TablesEnum.PromoterUsr: return "PromoterUsr";
				case TablesEnum.Region: return "Region";
				case TablesEnum.RoomPin: return "RoomPin";
				case TablesEnum.SalesCall: return "SalesCall";
				case TablesEnum.SalesCampaign: return "SalesCampaign";
				case TablesEnum.SalesStatusChange: return "SalesStatusChange";
				case TablesEnum.Setting: return "Setting";
				case TablesEnum.SpottedException: return "SpottedException";
				case TablesEnum.Tag: return "Tag";
				case TablesEnum.TagPhoto: return "TagPhoto";
				case TablesEnum.TagPhotoHistory: return "TagPhotoHistory";
				case TablesEnum.TeamTarget: return "TeamTarget";
				case TablesEnum.Theme: return "Theme";
				case TablesEnum.Thread: return "Thread";
				case TablesEnum.ThreadUsr: return "ThreadUsr";
				case TablesEnum.Ticket: return "Ticket";
				case TablesEnum.TicketPromoterEvent: return "TicketPromoterEvent";
				case TablesEnum.TicketRun: return "TicketRun";
				case TablesEnum.TrafficExceptionDay: return "TrafficExceptionDay";
				case TablesEnum.TrafficLevelRelativeToMinuteOfDay: return "TrafficLevelRelativeToMinuteOfDay";
				case TablesEnum.Transfer: return "Transfer";
				case TablesEnum.Usr: return "Usr";
				case TablesEnum.UsrDate: return "UsrDate";
				case TablesEnum.UsrDonationIcon: return "UsrDonationIcon";
				case TablesEnum.UsrEventAttended: return "UsrEventAttended";
				case TablesEnum.UsrEventGuestlist: return "UsrEventGuestlist";
				case TablesEnum.UsrMusicTypeFavourite: return "UsrMusicTypeFavourite";
				case TablesEnum.UsrPhotoFavourite: return "UsrPhotoFavourite";
				case TablesEnum.UsrPhotoMe: return "UsrPhotoMe";
				case TablesEnum.UsrPlaceVisit: return "UsrPlaceVisit";
				case TablesEnum.Venue: return "Venue";
				case TablesEnum.Visit: return "Visit";
				default: throw new Exception("Table not found in Tables.GetTableName()");
			}
		}
		public static string GetColumnName(object columnEnum)
		{
			switch (GetTableEnum(columnEnum))
			{
				case TablesEnum.Abuse: return Abuse.GetColumnName((Abuse.Columns)columnEnum);
				case TablesEnum.Admin: return Admin.GetColumnName((Admin.Columns)columnEnum);
				case TablesEnum.Article: return Article.GetColumnName((Article.Columns)columnEnum);
				case TablesEnum.BacardiEmail: return BacardiEmail.GetColumnName((BacardiEmail.Columns)columnEnum);
				case TablesEnum.BankExport: return BankExport.GetColumnName((BankExport.Columns)columnEnum);
				case TablesEnum.Banner: return Banner.GetColumnName((Banner.Columns)columnEnum);
				case TablesEnum.BannerFolder: return BannerFolder.GetColumnName((BannerFolder.Columns)columnEnum);
				case TablesEnum.BannerMusicType: return BannerMusicType.GetColumnName((BannerMusicType.Columns)columnEnum);
				case TablesEnum.BannerPlace: return BannerPlace.GetColumnName((BannerPlace.Columns)columnEnum);
				case TablesEnum.BannerStat: return BannerStat.GetColumnName((BannerStat.Columns)columnEnum);
				case TablesEnum.BinRange: return BinRange.GetColumnName((BinRange.Columns)columnEnum);
				case TablesEnum.Brand: return Brand.GetColumnName((Brand.Columns)columnEnum);
				case TablesEnum.Buddy: return Buddy.GetColumnName((Buddy.Columns)columnEnum);
				case TablesEnum.CampaignCredit: return CampaignCredit.GetColumnName((CampaignCredit.Columns)columnEnum);
				case TablesEnum.Chat: return Chat.GetColumnName((Chat.Columns)columnEnum);
				case TablesEnum.ChatMessage: return ChatMessage.GetColumnName((ChatMessage.Columns)columnEnum);
				case TablesEnum.ClubDetails: return ClubDetails.GetColumnName((ClubDetails.Columns)columnEnum);
				case TablesEnum.Comment: return Comment.GetColumnName((Comment.Columns)columnEnum);
				case TablesEnum.CommentAlert: return CommentAlert.GetColumnName((CommentAlert.Columns)columnEnum);
				case TablesEnum.Comp: return Comp.GetColumnName((Comp.Columns)columnEnum);
				case TablesEnum.CompEntry: return CompEntry.GetColumnName((CompEntry.Columns)columnEnum);
				case TablesEnum.Country: return Country.GetColumnName((Country.Columns)columnEnum);
				case TablesEnum.Demographics: return Demographics.GetColumnName((Demographics.Columns)columnEnum);
				case TablesEnum.Domain: return Domain.GetColumnName((Domain.Columns)columnEnum);
				case TablesEnum.DomainStats: return DomainStats.GetColumnName((DomainStats.Columns)columnEnum);
				case TablesEnum.DonationIcon: return DonationIcon.GetColumnName((DonationIcon.Columns)columnEnum);
				case TablesEnum.Event: return Event.GetColumnName((Event.Columns)columnEnum);
				case TablesEnum.EventBrand: return EventBrand.GetColumnName((EventBrand.Columns)columnEnum);
				case TablesEnum.EventMusicType: return EventMusicType.GetColumnName((EventMusicType.Columns)columnEnum);
				case TablesEnum.FacebookPost: return FacebookPost.GetColumnName((FacebookPost.Columns)columnEnum);
				case TablesEnum.Fiat500Entry: return Fiat500Entry.GetColumnName((Fiat500Entry.Columns)columnEnum);
				case TablesEnum.Flyer: return Flyer.GetColumnName((Flyer.Columns)columnEnum);
				case TablesEnum.Gallery: return Gallery.GetColumnName((Gallery.Columns)columnEnum);
				case TablesEnum.GalleryUsr: return GalleryUsr.GetColumnName((GalleryUsr.Columns)columnEnum);
				case TablesEnum.Global: return Global.GetColumnName((Global.Columns)columnEnum);
				case TablesEnum.Group: return Group.GetColumnName((Group.Columns)columnEnum);
				case TablesEnum.GroupEvent: return GroupEvent.GetColumnName((GroupEvent.Columns)columnEnum);
				case TablesEnum.GroupPhoto: return GroupPhoto.GetColumnName((GroupPhoto.Columns)columnEnum);
				case TablesEnum.GroupUsr: return GroupUsr.GetColumnName((GroupUsr.Columns)columnEnum);
				case TablesEnum.GuestlistCredit: return GuestlistCredit.GetColumnName((GuestlistCredit.Columns)columnEnum);
				case TablesEnum.Hit: return Hit.GetColumnName((Hit.Columns)columnEnum);
				case TablesEnum.IncomingSms: return IncomingSms.GetColumnName((IncomingSms.Columns)columnEnum);
				case TablesEnum.InsertionOrder: return InsertionOrder.GetColumnName((InsertionOrder.Columns)columnEnum);
				case TablesEnum.InsertionOrderItem: return InsertionOrderItem.GetColumnName((InsertionOrderItem.Columns)columnEnum);
				case TablesEnum.Invoice: return Invoice.GetColumnName((Invoice.Columns)columnEnum);
				case TablesEnum.InvoiceCredit: return InvoiceCredit.GetColumnName((InvoiceCredit.Columns)columnEnum);
				case TablesEnum.InvoiceItem: return InvoiceItem.GetColumnName((InvoiceItem.Columns)columnEnum);
				case TablesEnum.InvoiceTransfer: return InvoiceTransfer.GetColumnName((InvoiceTransfer.Columns)columnEnum);
				case TablesEnum.IpCountry: return IpCountry.GetColumnName((IpCountry.Columns)columnEnum);
				case TablesEnum.Log: return Log.GetColumnName((Log.Columns)columnEnum);
				case TablesEnum.LogPageTime: return LogPageTime.GetColumnName((LogPageTime.Columns)columnEnum);
				case TablesEnum.Lol: return Lol.GetColumnName((Lol.Columns)columnEnum);
				case TablesEnum.Misc: return Misc.GetColumnName((Misc.Columns)columnEnum);
				case TablesEnum.MixmagEntry: return MixmagEntry.GetColumnName((MixmagEntry.Columns)columnEnum);
				case TablesEnum.MixmagGreatestDj: return MixmagGreatestDj.GetColumnName((MixmagGreatestDj.Columns)columnEnum);
				case TablesEnum.MixmagGreatestVote: return MixmagGreatestVote.GetColumnName((MixmagGreatestVote.Columns)columnEnum);
				case TablesEnum.MixmagIssue: return MixmagIssue.GetColumnName((MixmagIssue.Columns)columnEnum);
				case TablesEnum.MixmagRead: return MixmagRead.GetColumnName((MixmagRead.Columns)columnEnum);
				case TablesEnum.MixmagSubscription: return MixmagSubscription.GetColumnName((MixmagSubscription.Columns)columnEnum);
				case TablesEnum.MixmagVote: return MixmagVote.GetColumnName((MixmagVote.Columns)columnEnum);
				case TablesEnum.Mobile: return Mobile.GetColumnName((Mobile.Columns)columnEnum);
				case TablesEnum.MusicType: return MusicType.GetColumnName((MusicType.Columns)columnEnum);
				case TablesEnum.OutgoingSms: return OutgoingSms.GetColumnName((OutgoingSms.Columns)columnEnum);
				case TablesEnum.PageTime: return PageTime.GetColumnName((PageTime.Columns)columnEnum);
				case TablesEnum.Para: return Para.GetColumnName((Para.Columns)columnEnum);
				case TablesEnum.Phone: return Phone.GetColumnName((Phone.Columns)columnEnum);
				case TablesEnum.Photo: return Photo.GetColumnName((Photo.Columns)columnEnum);
				case TablesEnum.PhotoReview: return PhotoReview.GetColumnName((PhotoReview.Columns)columnEnum);
				case TablesEnum.Place: return Place.GetColumnName((Place.Columns)columnEnum);
				case TablesEnum.Prefs: return Prefs.GetColumnName((Prefs.Columns)columnEnum);
				case TablesEnum.Promoter: return Promoter.GetColumnName((Promoter.Columns)columnEnum);
				case TablesEnum.PromoterUsr: return PromoterUsr.GetColumnName((PromoterUsr.Columns)columnEnum);
				case TablesEnum.Region: return Region.GetColumnName((Region.Columns)columnEnum);
				case TablesEnum.RoomPin: return RoomPin.GetColumnName((RoomPin.Columns)columnEnum);
				case TablesEnum.SalesCall: return SalesCall.GetColumnName((SalesCall.Columns)columnEnum);
				case TablesEnum.SalesCampaign: return SalesCampaign.GetColumnName((SalesCampaign.Columns)columnEnum);
				case TablesEnum.SalesStatusChange: return SalesStatusChange.GetColumnName((SalesStatusChange.Columns)columnEnum);
				case TablesEnum.Setting: return Setting.GetColumnName((Setting.Columns)columnEnum);
				case TablesEnum.SpottedException: return SpottedException.GetColumnName((SpottedException.Columns)columnEnum);
				case TablesEnum.Tag: return Tag.GetColumnName((Tag.Columns)columnEnum);
				case TablesEnum.TagPhoto: return TagPhoto.GetColumnName((TagPhoto.Columns)columnEnum);
				case TablesEnum.TagPhotoHistory: return TagPhotoHistory.GetColumnName((TagPhotoHistory.Columns)columnEnum);
				case TablesEnum.TeamTarget: return TeamTarget.GetColumnName((TeamTarget.Columns)columnEnum);
				case TablesEnum.Theme: return Theme.GetColumnName((Theme.Columns)columnEnum);
				case TablesEnum.Thread: return Thread.GetColumnName((Thread.Columns)columnEnum);
				case TablesEnum.ThreadUsr: return ThreadUsr.GetColumnName((ThreadUsr.Columns)columnEnum);
				case TablesEnum.Ticket: return Ticket.GetColumnName((Ticket.Columns)columnEnum);
				case TablesEnum.TicketPromoterEvent: return TicketPromoterEvent.GetColumnName((TicketPromoterEvent.Columns)columnEnum);
				case TablesEnum.TicketRun: return TicketRun.GetColumnName((TicketRun.Columns)columnEnum);
				case TablesEnum.TrafficExceptionDay: return TrafficExceptionDay.GetColumnName((TrafficExceptionDay.Columns)columnEnum);
				case TablesEnum.TrafficLevelRelativeToMinuteOfDay: return TrafficLevelRelativeToMinuteOfDay.GetColumnName((TrafficLevelRelativeToMinuteOfDay.Columns)columnEnum);
				case TablesEnum.Transfer: return Transfer.GetColumnName((Transfer.Columns)columnEnum);
				case TablesEnum.Usr: return Usr.GetColumnName((Usr.Columns)columnEnum);
				case TablesEnum.UsrDate: return UsrDate.GetColumnName((UsrDate.Columns)columnEnum);
				case TablesEnum.UsrDonationIcon: return UsrDonationIcon.GetColumnName((UsrDonationIcon.Columns)columnEnum);
				case TablesEnum.UsrEventAttended: return UsrEventAttended.GetColumnName((UsrEventAttended.Columns)columnEnum);
				case TablesEnum.UsrEventGuestlist: return UsrEventGuestlist.GetColumnName((UsrEventGuestlist.Columns)columnEnum);
				case TablesEnum.UsrMusicTypeFavourite: return UsrMusicTypeFavourite.GetColumnName((UsrMusicTypeFavourite.Columns)columnEnum);
				case TablesEnum.UsrPhotoFavourite: return UsrPhotoFavourite.GetColumnName((UsrPhotoFavourite.Columns)columnEnum);
				case TablesEnum.UsrPhotoMe: return UsrPhotoMe.GetColumnName((UsrPhotoMe.Columns)columnEnum);
				case TablesEnum.UsrPlaceVisit: return UsrPlaceVisit.GetColumnName((UsrPlaceVisit.Columns)columnEnum);
				case TablesEnum.Venue: return Venue.GetColumnName((Venue.Columns)columnEnum);
				case TablesEnum.Visit: return Visit.GetColumnName((Visit.Columns)columnEnum);
				default: return "";
			}
		}
		public static bool DoesColumnCauseInvalidation(object columnEnum)
		{
			switch(GetTableEnum(columnEnum))
			{
				case TablesEnum.Abuse: return Abuse.DoesColumnCauseInvalidation((Abuse.Columns)columnEnum);
				case TablesEnum.Admin: return Admin.DoesColumnCauseInvalidation((Admin.Columns)columnEnum);
				case TablesEnum.Article: return Article.DoesColumnCauseInvalidation((Article.Columns)columnEnum);
				case TablesEnum.BacardiEmail: return BacardiEmail.DoesColumnCauseInvalidation((BacardiEmail.Columns)columnEnum);
				case TablesEnum.BankExport: return BankExport.DoesColumnCauseInvalidation((BankExport.Columns)columnEnum);
				case TablesEnum.Banner: return Banner.DoesColumnCauseInvalidation((Banner.Columns)columnEnum);
				case TablesEnum.BannerFolder: return BannerFolder.DoesColumnCauseInvalidation((BannerFolder.Columns)columnEnum);
				case TablesEnum.BannerMusicType: return BannerMusicType.DoesColumnCauseInvalidation((BannerMusicType.Columns)columnEnum);
				case TablesEnum.BannerPlace: return BannerPlace.DoesColumnCauseInvalidation((BannerPlace.Columns)columnEnum);
				case TablesEnum.BannerStat: return BannerStat.DoesColumnCauseInvalidation((BannerStat.Columns)columnEnum);
				case TablesEnum.BinRange: return BinRange.DoesColumnCauseInvalidation((BinRange.Columns)columnEnum);
				case TablesEnum.Brand: return Brand.DoesColumnCauseInvalidation((Brand.Columns)columnEnum);
				case TablesEnum.Buddy: return Buddy.DoesColumnCauseInvalidation((Buddy.Columns)columnEnum);
				case TablesEnum.CampaignCredit: return CampaignCredit.DoesColumnCauseInvalidation((CampaignCredit.Columns)columnEnum);
				case TablesEnum.Chat: return Chat.DoesColumnCauseInvalidation((Chat.Columns)columnEnum);
				case TablesEnum.ChatMessage: return ChatMessage.DoesColumnCauseInvalidation((ChatMessage.Columns)columnEnum);
				case TablesEnum.ClubDetails: return ClubDetails.DoesColumnCauseInvalidation((ClubDetails.Columns)columnEnum);
				case TablesEnum.Comment: return Comment.DoesColumnCauseInvalidation((Comment.Columns)columnEnum);
				case TablesEnum.CommentAlert: return CommentAlert.DoesColumnCauseInvalidation((CommentAlert.Columns)columnEnum);
				case TablesEnum.Comp: return Comp.DoesColumnCauseInvalidation((Comp.Columns)columnEnum);
				case TablesEnum.CompEntry: return CompEntry.DoesColumnCauseInvalidation((CompEntry.Columns)columnEnum);
				case TablesEnum.Country: return Country.DoesColumnCauseInvalidation((Country.Columns)columnEnum);
				case TablesEnum.Demographics: return Demographics.DoesColumnCauseInvalidation((Demographics.Columns)columnEnum);
				case TablesEnum.Domain: return Domain.DoesColumnCauseInvalidation((Domain.Columns)columnEnum);
				case TablesEnum.DomainStats: return DomainStats.DoesColumnCauseInvalidation((DomainStats.Columns)columnEnum);
				case TablesEnum.DonationIcon: return DonationIcon.DoesColumnCauseInvalidation((DonationIcon.Columns)columnEnum);
				case TablesEnum.Event: return Event.DoesColumnCauseInvalidation((Event.Columns)columnEnum);
				case TablesEnum.EventBrand: return EventBrand.DoesColumnCauseInvalidation((EventBrand.Columns)columnEnum);
				case TablesEnum.EventMusicType: return EventMusicType.DoesColumnCauseInvalidation((EventMusicType.Columns)columnEnum);
				case TablesEnum.FacebookPost: return FacebookPost.DoesColumnCauseInvalidation((FacebookPost.Columns)columnEnum);
				case TablesEnum.Fiat500Entry: return Fiat500Entry.DoesColumnCauseInvalidation((Fiat500Entry.Columns)columnEnum);
				case TablesEnum.Flyer: return Flyer.DoesColumnCauseInvalidation((Flyer.Columns)columnEnum);
				case TablesEnum.Gallery: return Gallery.DoesColumnCauseInvalidation((Gallery.Columns)columnEnum);
				case TablesEnum.GalleryUsr: return GalleryUsr.DoesColumnCauseInvalidation((GalleryUsr.Columns)columnEnum);
				case TablesEnum.Global: return Global.DoesColumnCauseInvalidation((Global.Columns)columnEnum);
				case TablesEnum.Group: return Group.DoesColumnCauseInvalidation((Group.Columns)columnEnum);
				case TablesEnum.GroupEvent: return GroupEvent.DoesColumnCauseInvalidation((GroupEvent.Columns)columnEnum);
				case TablesEnum.GroupPhoto: return GroupPhoto.DoesColumnCauseInvalidation((GroupPhoto.Columns)columnEnum);
				case TablesEnum.GroupUsr: return GroupUsr.DoesColumnCauseInvalidation((GroupUsr.Columns)columnEnum);
				case TablesEnum.GuestlistCredit: return GuestlistCredit.DoesColumnCauseInvalidation((GuestlistCredit.Columns)columnEnum);
				case TablesEnum.Hit: return Hit.DoesColumnCauseInvalidation((Hit.Columns)columnEnum);
				case TablesEnum.IncomingSms: return IncomingSms.DoesColumnCauseInvalidation((IncomingSms.Columns)columnEnum);
				case TablesEnum.InsertionOrder: return InsertionOrder.DoesColumnCauseInvalidation((InsertionOrder.Columns)columnEnum);
				case TablesEnum.InsertionOrderItem: return InsertionOrderItem.DoesColumnCauseInvalidation((InsertionOrderItem.Columns)columnEnum);
				case TablesEnum.Invoice: return Invoice.DoesColumnCauseInvalidation((Invoice.Columns)columnEnum);
				case TablesEnum.InvoiceCredit: return InvoiceCredit.DoesColumnCauseInvalidation((InvoiceCredit.Columns)columnEnum);
				case TablesEnum.InvoiceItem: return InvoiceItem.DoesColumnCauseInvalidation((InvoiceItem.Columns)columnEnum);
				case TablesEnum.InvoiceTransfer: return InvoiceTransfer.DoesColumnCauseInvalidation((InvoiceTransfer.Columns)columnEnum);
				case TablesEnum.IpCountry: return IpCountry.DoesColumnCauseInvalidation((IpCountry.Columns)columnEnum);
				case TablesEnum.Log: return Log.DoesColumnCauseInvalidation((Log.Columns)columnEnum);
				case TablesEnum.LogPageTime: return LogPageTime.DoesColumnCauseInvalidation((LogPageTime.Columns)columnEnum);
				case TablesEnum.Lol: return Lol.DoesColumnCauseInvalidation((Lol.Columns)columnEnum);
				case TablesEnum.Misc: return Misc.DoesColumnCauseInvalidation((Misc.Columns)columnEnum);
				case TablesEnum.MixmagEntry: return MixmagEntry.DoesColumnCauseInvalidation((MixmagEntry.Columns)columnEnum);
				case TablesEnum.MixmagGreatestDj: return MixmagGreatestDj.DoesColumnCauseInvalidation((MixmagGreatestDj.Columns)columnEnum);
				case TablesEnum.MixmagGreatestVote: return MixmagGreatestVote.DoesColumnCauseInvalidation((MixmagGreatestVote.Columns)columnEnum);
				case TablesEnum.MixmagIssue: return MixmagIssue.DoesColumnCauseInvalidation((MixmagIssue.Columns)columnEnum);
				case TablesEnum.MixmagRead: return MixmagRead.DoesColumnCauseInvalidation((MixmagRead.Columns)columnEnum);
				case TablesEnum.MixmagSubscription: return MixmagSubscription.DoesColumnCauseInvalidation((MixmagSubscription.Columns)columnEnum);
				case TablesEnum.MixmagVote: return MixmagVote.DoesColumnCauseInvalidation((MixmagVote.Columns)columnEnum);
				case TablesEnum.Mobile: return Mobile.DoesColumnCauseInvalidation((Mobile.Columns)columnEnum);
				case TablesEnum.MusicType: return MusicType.DoesColumnCauseInvalidation((MusicType.Columns)columnEnum);
				case TablesEnum.OutgoingSms: return OutgoingSms.DoesColumnCauseInvalidation((OutgoingSms.Columns)columnEnum);
				case TablesEnum.PageTime: return PageTime.DoesColumnCauseInvalidation((PageTime.Columns)columnEnum);
				case TablesEnum.Para: return Para.DoesColumnCauseInvalidation((Para.Columns)columnEnum);
				case TablesEnum.Phone: return Phone.DoesColumnCauseInvalidation((Phone.Columns)columnEnum);
				case TablesEnum.Photo: return Photo.DoesColumnCauseInvalidation((Photo.Columns)columnEnum);
				case TablesEnum.PhotoReview: return PhotoReview.DoesColumnCauseInvalidation((PhotoReview.Columns)columnEnum);
				case TablesEnum.Place: return Place.DoesColumnCauseInvalidation((Place.Columns)columnEnum);
				case TablesEnum.Prefs: return Prefs.DoesColumnCauseInvalidation((Prefs.Columns)columnEnum);
				case TablesEnum.Promoter: return Promoter.DoesColumnCauseInvalidation((Promoter.Columns)columnEnum);
				case TablesEnum.PromoterUsr: return PromoterUsr.DoesColumnCauseInvalidation((PromoterUsr.Columns)columnEnum);
				case TablesEnum.Region: return Region.DoesColumnCauseInvalidation((Region.Columns)columnEnum);
				case TablesEnum.RoomPin: return RoomPin.DoesColumnCauseInvalidation((RoomPin.Columns)columnEnum);
				case TablesEnum.SalesCall: return SalesCall.DoesColumnCauseInvalidation((SalesCall.Columns)columnEnum);
				case TablesEnum.SalesCampaign: return SalesCampaign.DoesColumnCauseInvalidation((SalesCampaign.Columns)columnEnum);
				case TablesEnum.SalesStatusChange: return SalesStatusChange.DoesColumnCauseInvalidation((SalesStatusChange.Columns)columnEnum);
				case TablesEnum.Setting: return Setting.DoesColumnCauseInvalidation((Setting.Columns)columnEnum);
				case TablesEnum.SpottedException: return SpottedException.DoesColumnCauseInvalidation((SpottedException.Columns)columnEnum);
				case TablesEnum.Tag: return Tag.DoesColumnCauseInvalidation((Tag.Columns)columnEnum);
				case TablesEnum.TagPhoto: return TagPhoto.DoesColumnCauseInvalidation((TagPhoto.Columns)columnEnum);
				case TablesEnum.TagPhotoHistory: return TagPhotoHistory.DoesColumnCauseInvalidation((TagPhotoHistory.Columns)columnEnum);
				case TablesEnum.TeamTarget: return TeamTarget.DoesColumnCauseInvalidation((TeamTarget.Columns)columnEnum);
				case TablesEnum.Theme: return Theme.DoesColumnCauseInvalidation((Theme.Columns)columnEnum);
				case TablesEnum.Thread: return Thread.DoesColumnCauseInvalidation((Thread.Columns)columnEnum);
				case TablesEnum.ThreadUsr: return ThreadUsr.DoesColumnCauseInvalidation((ThreadUsr.Columns)columnEnum);
				case TablesEnum.Ticket: return Ticket.DoesColumnCauseInvalidation((Ticket.Columns)columnEnum);
				case TablesEnum.TicketPromoterEvent: return TicketPromoterEvent.DoesColumnCauseInvalidation((TicketPromoterEvent.Columns)columnEnum);
				case TablesEnum.TicketRun: return TicketRun.DoesColumnCauseInvalidation((TicketRun.Columns)columnEnum);
				case TablesEnum.TrafficExceptionDay: return TrafficExceptionDay.DoesColumnCauseInvalidation((TrafficExceptionDay.Columns)columnEnum);
				case TablesEnum.TrafficLevelRelativeToMinuteOfDay: return TrafficLevelRelativeToMinuteOfDay.DoesColumnCauseInvalidation((TrafficLevelRelativeToMinuteOfDay.Columns)columnEnum);
				case TablesEnum.Transfer: return Transfer.DoesColumnCauseInvalidation((Transfer.Columns)columnEnum);
				case TablesEnum.Usr: return Usr.DoesColumnCauseInvalidation((Usr.Columns)columnEnum);
				case TablesEnum.UsrDate: return UsrDate.DoesColumnCauseInvalidation((UsrDate.Columns)columnEnum);
				case TablesEnum.UsrDonationIcon: return UsrDonationIcon.DoesColumnCauseInvalidation((UsrDonationIcon.Columns)columnEnum);
				case TablesEnum.UsrEventAttended: return UsrEventAttended.DoesColumnCauseInvalidation((UsrEventAttended.Columns)columnEnum);
				case TablesEnum.UsrEventGuestlist: return UsrEventGuestlist.DoesColumnCauseInvalidation((UsrEventGuestlist.Columns)columnEnum);
				case TablesEnum.UsrMusicTypeFavourite: return UsrMusicTypeFavourite.DoesColumnCauseInvalidation((UsrMusicTypeFavourite.Columns)columnEnum);
				case TablesEnum.UsrPhotoFavourite: return UsrPhotoFavourite.DoesColumnCauseInvalidation((UsrPhotoFavourite.Columns)columnEnum);
				case TablesEnum.UsrPhotoMe: return UsrPhotoMe.DoesColumnCauseInvalidation((UsrPhotoMe.Columns)columnEnum);
				case TablesEnum.UsrPlaceVisit: return UsrPlaceVisit.DoesColumnCauseInvalidation((UsrPlaceVisit.Columns)columnEnum);
				case TablesEnum.Venue: return Venue.DoesColumnCauseInvalidation((Venue.Columns)columnEnum);
				case TablesEnum.Visit: return Visit.DoesColumnCauseInvalidation((Visit.Columns)columnEnum);
				default: return false;
			}
		}
		public static TablesEnum GetTableEnum(object columnEnum)
		{
			return (TablesEnum)((int)columnEnum >> 16);
		}
		public static TableDef GetTableDef(TablesEnum tableEnum)
		{
			switch (tableEnum)
			{
							case TablesEnum.Abuse: return Defs.Abuse;
							case TablesEnum.Admin: return Defs.Admin;
							case TablesEnum.Article: return Defs.Article;
							case TablesEnum.BacardiEmail: return Defs.BacardiEmail;
							case TablesEnum.BankExport: return Defs.BankExport;
							case TablesEnum.Banner: return Defs.Banner;
							case TablesEnum.BannerFolder: return Defs.BannerFolder;
							case TablesEnum.BannerMusicType: return Defs.BannerMusicType;
							case TablesEnum.BannerPlace: return Defs.BannerPlace;
							case TablesEnum.BannerStat: return Defs.BannerStat;
							case TablesEnum.BinRange: return Defs.BinRange;
							case TablesEnum.Brand: return Defs.Brand;
							case TablesEnum.Buddy: return Defs.Buddy;
							case TablesEnum.CampaignCredit: return Defs.CampaignCredit;
							case TablesEnum.Chat: return Defs.Chat;
							case TablesEnum.ChatMessage: return Defs.ChatMessage;
							case TablesEnum.ClubDetails: return Defs.ClubDetails;
							case TablesEnum.Comment: return Defs.Comment;
							case TablesEnum.CommentAlert: return Defs.CommentAlert;
							case TablesEnum.Comp: return Defs.Comp;
							case TablesEnum.CompEntry: return Defs.CompEntry;
							case TablesEnum.Country: return Defs.Country;
							case TablesEnum.Demographics: return Defs.Demographics;
							case TablesEnum.Domain: return Defs.Domain;
							case TablesEnum.DomainStats: return Defs.DomainStats;
							case TablesEnum.DonationIcon: return Defs.DonationIcon;
							case TablesEnum.Event: return Defs.Event;
							case TablesEnum.EventBrand: return Defs.EventBrand;
							case TablesEnum.EventMusicType: return Defs.EventMusicType;
							case TablesEnum.FacebookPost: return Defs.FacebookPost;
							case TablesEnum.Fiat500Entry: return Defs.Fiat500Entry;
							case TablesEnum.Flyer: return Defs.Flyer;
							case TablesEnum.Gallery: return Defs.Gallery;
							case TablesEnum.GalleryUsr: return Defs.GalleryUsr;
							case TablesEnum.Global: return Defs.Global;
							case TablesEnum.Group: return Defs.Group;
							case TablesEnum.GroupEvent: return Defs.GroupEvent;
							case TablesEnum.GroupPhoto: return Defs.GroupPhoto;
							case TablesEnum.GroupUsr: return Defs.GroupUsr;
							case TablesEnum.GuestlistCredit: return Defs.GuestlistCredit;
							case TablesEnum.Hit: return Defs.Hit;
							case TablesEnum.IncomingSms: return Defs.IncomingSms;
							case TablesEnum.InsertionOrder: return Defs.InsertionOrder;
							case TablesEnum.InsertionOrderItem: return Defs.InsertionOrderItem;
							case TablesEnum.Invoice: return Defs.Invoice;
							case TablesEnum.InvoiceCredit: return Defs.InvoiceCredit;
							case TablesEnum.InvoiceItem: return Defs.InvoiceItem;
							case TablesEnum.InvoiceTransfer: return Defs.InvoiceTransfer;
							case TablesEnum.IpCountry: return Defs.IpCountry;
							case TablesEnum.Log: return Defs.Log;
							case TablesEnum.LogPageTime: return Defs.LogPageTime;
							case TablesEnum.Lol: return Defs.Lol;
							case TablesEnum.Misc: return Defs.Misc;
							case TablesEnum.MixmagEntry: return Defs.MixmagEntry;
							case TablesEnum.MixmagGreatestDj: return Defs.MixmagGreatestDj;
							case TablesEnum.MixmagGreatestVote: return Defs.MixmagGreatestVote;
							case TablesEnum.MixmagIssue: return Defs.MixmagIssue;
							case TablesEnum.MixmagRead: return Defs.MixmagRead;
							case TablesEnum.MixmagSubscription: return Defs.MixmagSubscription;
							case TablesEnum.MixmagVote: return Defs.MixmagVote;
							case TablesEnum.Mobile: return Defs.Mobile;
							case TablesEnum.MusicType: return Defs.MusicType;
							case TablesEnum.OutgoingSms: return Defs.OutgoingSms;
							case TablesEnum.PageTime: return Defs.PageTime;
							case TablesEnum.Para: return Defs.Para;
							case TablesEnum.Phone: return Defs.Phone;
							case TablesEnum.Photo: return Defs.Photo;
							case TablesEnum.PhotoReview: return Defs.PhotoReview;
							case TablesEnum.Place: return Defs.Place;
							case TablesEnum.Prefs: return Defs.Prefs;
							case TablesEnum.Promoter: return Defs.Promoter;
							case TablesEnum.PromoterUsr: return Defs.PromoterUsr;
							case TablesEnum.Region: return Defs.Region;
							case TablesEnum.RoomPin: return Defs.RoomPin;
							case TablesEnum.SalesCall: return Defs.SalesCall;
							case TablesEnum.SalesCampaign: return Defs.SalesCampaign;
							case TablesEnum.SalesStatusChange: return Defs.SalesStatusChange;
							case TablesEnum.Setting: return Defs.Setting;
							case TablesEnum.SpottedException: return Defs.SpottedException;
							case TablesEnum.Tag: return Defs.Tag;
							case TablesEnum.TagPhoto: return Defs.TagPhoto;
							case TablesEnum.TagPhotoHistory: return Defs.TagPhotoHistory;
							case TablesEnum.TeamTarget: return Defs.TeamTarget;
							case TablesEnum.Theme: return Defs.Theme;
							case TablesEnum.Thread: return Defs.Thread;
							case TablesEnum.ThreadUsr: return Defs.ThreadUsr;
							case TablesEnum.Ticket: return Defs.Ticket;
							case TablesEnum.TicketPromoterEvent: return Defs.TicketPromoterEvent;
							case TablesEnum.TicketRun: return Defs.TicketRun;
							case TablesEnum.TrafficExceptionDay: return Defs.TrafficExceptionDay;
							case TablesEnum.TrafficLevelRelativeToMinuteOfDay: return Defs.TrafficLevelRelativeToMinuteOfDay;
							case TablesEnum.Transfer: return Defs.Transfer;
							case TablesEnum.Usr: return Defs.Usr;
							case TablesEnum.UsrDate: return Defs.UsrDate;
							case TablesEnum.UsrDonationIcon: return Defs.UsrDonationIcon;
							case TablesEnum.UsrEventAttended: return Defs.UsrEventAttended;
							case TablesEnum.UsrEventGuestlist: return Defs.UsrEventGuestlist;
							case TablesEnum.UsrMusicTypeFavourite: return Defs.UsrMusicTypeFavourite;
							case TablesEnum.UsrPhotoFavourite: return Defs.UsrPhotoFavourite;
							case TablesEnum.UsrPhotoMe: return Defs.UsrPhotoMe;
							case TablesEnum.UsrPlaceVisit: return Defs.UsrPlaceVisit;
							case TablesEnum.Venue: return Defs.Venue;
							case TablesEnum.Visit: return Defs.Visit;
							default: throw new Exception("Table not found in Tables.GetTableDef()");
			}
		}
		public static class Defs
		{
			public static AbuseTableDef Abuse = new AbuseTableDef();
			public static AdminTableDef Admin = new AdminTableDef();
			public static ArticleTableDef Article = new ArticleTableDef();
			public static BacardiEmailTableDef BacardiEmail = new BacardiEmailTableDef();
			public static BankExportTableDef BankExport = new BankExportTableDef();
			public static BannerTableDef Banner = new BannerTableDef();
			public static BannerFolderTableDef BannerFolder = new BannerFolderTableDef();
			public static BannerMusicTypeTableDef BannerMusicType = new BannerMusicTypeTableDef();
			public static BannerPlaceTableDef BannerPlace = new BannerPlaceTableDef();
			public static BannerStatTableDef BannerStat = new BannerStatTableDef();
			public static BinRangeTableDef BinRange = new BinRangeTableDef();
			public static BrandTableDef Brand = new BrandTableDef();
			public static BuddyTableDef Buddy = new BuddyTableDef();
			public static CampaignCreditTableDef CampaignCredit = new CampaignCreditTableDef();
			public static ChatTableDef Chat = new ChatTableDef();
			public static ChatMessageTableDef ChatMessage = new ChatMessageTableDef();
			public static ClubDetailsTableDef ClubDetails = new ClubDetailsTableDef();
			public static CommentTableDef Comment = new CommentTableDef();
			public static CommentAlertTableDef CommentAlert = new CommentAlertTableDef();
			public static CompTableDef Comp = new CompTableDef();
			public static CompEntryTableDef CompEntry = new CompEntryTableDef();
			public static CountryTableDef Country = new CountryTableDef();
			public static DemographicsTableDef Demographics = new DemographicsTableDef();
			public static DomainTableDef Domain = new DomainTableDef();
			public static DomainStatsTableDef DomainStats = new DomainStatsTableDef();
			public static DonationIconTableDef DonationIcon = new DonationIconTableDef();
			public static EventTableDef Event = new EventTableDef();
			public static EventBrandTableDef EventBrand = new EventBrandTableDef();
			public static EventMusicTypeTableDef EventMusicType = new EventMusicTypeTableDef();
			public static FacebookPostTableDef FacebookPost = new FacebookPostTableDef();
			public static Fiat500EntryTableDef Fiat500Entry = new Fiat500EntryTableDef();
			public static FlyerTableDef Flyer = new FlyerTableDef();
			public static GalleryTableDef Gallery = new GalleryTableDef();
			public static GalleryUsrTableDef GalleryUsr = new GalleryUsrTableDef();
			public static GlobalTableDef Global = new GlobalTableDef();
			public static GroupTableDef Group = new GroupTableDef();
			public static GroupEventTableDef GroupEvent = new GroupEventTableDef();
			public static GroupPhotoTableDef GroupPhoto = new GroupPhotoTableDef();
			public static GroupUsrTableDef GroupUsr = new GroupUsrTableDef();
			public static GuestlistCreditTableDef GuestlistCredit = new GuestlistCreditTableDef();
			public static HitTableDef Hit = new HitTableDef();
			public static IncomingSmsTableDef IncomingSms = new IncomingSmsTableDef();
			public static InsertionOrderTableDef InsertionOrder = new InsertionOrderTableDef();
			public static InsertionOrderItemTableDef InsertionOrderItem = new InsertionOrderItemTableDef();
			public static InvoiceTableDef Invoice = new InvoiceTableDef();
			public static InvoiceCreditTableDef InvoiceCredit = new InvoiceCreditTableDef();
			public static InvoiceItemTableDef InvoiceItem = new InvoiceItemTableDef();
			public static InvoiceTransferTableDef InvoiceTransfer = new InvoiceTransferTableDef();
			public static IpCountryTableDef IpCountry = new IpCountryTableDef();
			public static LogTableDef Log = new LogTableDef();
			public static LogPageTimeTableDef LogPageTime = new LogPageTimeTableDef();
			public static LolTableDef Lol = new LolTableDef();
			public static MiscTableDef Misc = new MiscTableDef();
			public static MixmagEntryTableDef MixmagEntry = new MixmagEntryTableDef();
			public static MixmagGreatestDjTableDef MixmagGreatestDj = new MixmagGreatestDjTableDef();
			public static MixmagGreatestVoteTableDef MixmagGreatestVote = new MixmagGreatestVoteTableDef();
			public static MixmagIssueTableDef MixmagIssue = new MixmagIssueTableDef();
			public static MixmagReadTableDef MixmagRead = new MixmagReadTableDef();
			public static MixmagSubscriptionTableDef MixmagSubscription = new MixmagSubscriptionTableDef();
			public static MixmagVoteTableDef MixmagVote = new MixmagVoteTableDef();
			public static MobileTableDef Mobile = new MobileTableDef();
			public static MusicTypeTableDef MusicType = new MusicTypeTableDef();
			public static OutgoingSmsTableDef OutgoingSms = new OutgoingSmsTableDef();
			public static PageTimeTableDef PageTime = new PageTimeTableDef();
			public static ParaTableDef Para = new ParaTableDef();
			public static PhoneTableDef Phone = new PhoneTableDef();
			public static PhotoTableDef Photo = new PhotoTableDef();
			public static PhotoReviewTableDef PhotoReview = new PhotoReviewTableDef();
			public static PlaceTableDef Place = new PlaceTableDef();
			public static PrefsTableDef Prefs = new PrefsTableDef();
			public static PromoterTableDef Promoter = new PromoterTableDef();
			public static PromoterUsrTableDef PromoterUsr = new PromoterUsrTableDef();
			public static RegionTableDef Region = new RegionTableDef();
			public static RoomPinTableDef RoomPin = new RoomPinTableDef();
			public static SalesCallTableDef SalesCall = new SalesCallTableDef();
			public static SalesCampaignTableDef SalesCampaign = new SalesCampaignTableDef();
			public static SalesStatusChangeTableDef SalesStatusChange = new SalesStatusChangeTableDef();
			public static SettingTableDef Setting = new SettingTableDef();
			public static SpottedExceptionTableDef SpottedException = new SpottedExceptionTableDef();
			public static TagTableDef Tag = new TagTableDef();
			public static TagPhotoTableDef TagPhoto = new TagPhotoTableDef();
			public static TagPhotoHistoryTableDef TagPhotoHistory = new TagPhotoHistoryTableDef();
			public static TeamTargetTableDef TeamTarget = new TeamTargetTableDef();
			public static ThemeTableDef Theme = new ThemeTableDef();
			public static ThreadTableDef Thread = new ThreadTableDef();
			public static ThreadUsrTableDef ThreadUsr = new ThreadUsrTableDef();
			public static TicketTableDef Ticket = new TicketTableDef();
			public static TicketPromoterEventTableDef TicketPromoterEvent = new TicketPromoterEventTableDef();
			public static TicketRunTableDef TicketRun = new TicketRunTableDef();
			public static TrafficExceptionDayTableDef TrafficExceptionDay = new TrafficExceptionDayTableDef();
			public static TrafficLevelRelativeToMinuteOfDayTableDef TrafficLevelRelativeToMinuteOfDay = new TrafficLevelRelativeToMinuteOfDayTableDef();
			public static TransferTableDef Transfer = new TransferTableDef();
			public static UsrTableDef Usr = new UsrTableDef();
			public static UsrDateTableDef UsrDate = new UsrDateTableDef();
			public static UsrDonationIconTableDef UsrDonationIcon = new UsrDonationIconTableDef();
			public static UsrEventAttendedTableDef UsrEventAttended = new UsrEventAttendedTableDef();
			public static UsrEventGuestlistTableDef UsrEventGuestlist = new UsrEventGuestlistTableDef();
			public static UsrMusicTypeFavouriteTableDef UsrMusicTypeFavourite = new UsrMusicTypeFavouriteTableDef();
			public static UsrPhotoFavouriteTableDef UsrPhotoFavourite = new UsrPhotoFavouriteTableDef();
			public static UsrPhotoMeTableDef UsrPhotoMe = new UsrPhotoMeTableDef();
			public static UsrPlaceVisitTableDef UsrPlaceVisit = new UsrPlaceVisitTableDef();
			public static VenueTableDef Venue = new VenueTableDef();
			public static VisitTableDef Visit = new VisitTableDef();
		}
	}


	#region TablesEnum
	public enum TablesEnum
	{
		/// <summary>
		/// Reports of abuse
		/// </summary>
		Abuse = 0x0001,
		/// <summary>
		/// Specifies admin privilages for users
		/// </summary>
		Admin = 0x0002,
		/// <summary>
		/// An article
		/// </summary>
		Article = 0x0003,
		/// <summary>
		/// Emails gathered for Bacardi
		/// </summary>
		BacardiEmail = 0x0004,
		/// <summary>
		/// Exports to bank for transferring funds
		/// </summary>
		BankExport = 0x0005,
		/// <summary>
		/// Advertising - includes banners, hotboxes etc.
		/// </summary>
		Banner = 0x0006,
		/// <summary>
		/// A BannerFolder object used for grouping banners
		/// </summary>
		BannerFolder = 0x0007,
		/// <summary>
		/// Links banners to relevant music types
		/// </summary>
		BannerMusicType = 0x0008,
		/// <summary>
		/// Links banners to relevant places
		/// </summary>
		BannerPlace = 0x0009,
		/// <summary>
		/// This tracks the hits / clicks each benner gets for each day it's online
		/// </summary>
		BannerStat = 0x000a,
		/// <summary>
		/// Database to help guess the credit card type from bank identification number (BIN - the first 6 numbe
		/// </summary>
		BinRange = 0x000b,
		/// <summary>
		/// e.g. Event brand
		/// </summary>
		Brand = 0x000c,
		/// <summary>
		/// Links one user to another
		/// </summary>
		Buddy = 0x000d,
		/// <summary>
		/// Used to track how many campaign credits each promoter has bought / spent
		/// </summary>
		CampaignCredit = 0x000e,
		/// <summary>
		/// New optimised chat items table
		/// </summary>
		Chat = 0x000f,
		/// <summary>
		/// Chat messages
		/// </summary>
		ChatMessage = 0x0010,
		/// <summary>
		/// Club details harvested from Yellow pages
		/// </summary>
		ClubDetails = 0x0011,
		/// <summary>
		/// Comment - discussion comment either under a photo or a thread
		/// </summary>
		Comment = 0x0012,
		/// <summary>
		/// Alerts to send emails when comments are posted
		/// </summary>
		CommentAlert = 0x0013,
		/// <summary>
		/// A competition
		/// </summary>
		Comp = 0x0014,
		/// <summary>
		/// Competition entry
		/// </summary>
		CompEntry = 0x0015,
		/// <summary>
		/// Country
		/// </summary>
		Country = 0x0016,
		/// <summary>
		/// Demographics questionairre results
		/// </summary>
		Demographics = 0x0017,
		/// <summary>
		/// Domains that redirect to DSI
		/// </summary>
		Domain = 0x0018,
		/// <summary>
		/// Hits per day stats for the domain table
		/// </summary>
		DomainStats = 0x0019,
		/// <summary>
		/// Donation icons
		/// </summary>
		DonationIcon = 0x001a,
		/// <summary>
		/// One single event
		/// </summary>
		Event = 0x001b,
		/// <summary>
		/// Links an event to one or many brands
		/// </summary>
		EventBrand = 0x001c,
		/// <summary>
		/// Links an event to many MusicTypes - the Music types that will be played
		/// </summary>
		EventMusicType = 0x001d,
		/// <summary>
		/// Facebook posts
		/// </summary>
		FacebookPost = 0x001e,
		/// <summary>
		/// Entries for the Fiat 500 competition
		/// </summary>
		Fiat500Entry = 0x001f,
		/// <summary>
		/// eFlyers sent out by Promoters
		/// </summary>
		Flyer = 0x0020,
		/// <summary>
		/// A gallery contains photos
		/// </summary>
		Gallery = 0x0021,
		/// <summary>
		/// Stores information about when users view galleries
		/// </summary>
		GalleryUsr = 0x0022,
		/// <summary>
		/// Global variables
		/// </summary>
		Global = 0x0023,
		/// <summary>
		/// Discussion / news groups
		/// </summary>
		Group = 0x0024,
		/// <summary>
		/// Recommended events
		/// </summary>
		GroupEvent = 0x0025,
		/// <summary>
		/// Top photos on the group front-pages
		/// </summary>
		GroupPhoto = 0x0026,
		/// <summary>
		/// Membership of a group
		/// </summary>
		GroupUsr = 0x0027,
		/// <summary>
		/// Guestlist credit top-up items
		/// </summary>
		GuestlistCredit = 0x0028,
		/// <summary>
		/// Each page impression is logged here - deleted when it completes successfully
		/// </summary>
		Hit = 0x0029,
		/// <summary>
		/// Table where all incoming sms's are logged
		/// </summary>
		IncomingSms = 0x002a,
		/// <summary>
		/// Track campaign credits and outstanding corporate IOs and Insertion Order Credits "IOCs"
		/// </summary>
		InsertionOrder = 0x002b,
		/// <summary>
		/// Corporate IOs are split up into items
		/// </summary>
		InsertionOrderItem = 0x002c,
		/// <summary>
		/// Invoice or credit note
		/// </summary>
		Invoice = 0x002d,
		/// <summary>
		/// Invoice to Credit relational table
		/// </summary>
		InvoiceCredit = 0x002e,
		/// <summary>
		/// Invoice / credit note line
		/// </summary>
		InvoiceItem = 0x002f,
		/// <summary>
		/// Invoice to Transfer relational table
		/// </summary>
		InvoiceTransfer = 0x0030,
		/// <summary>
		/// links ip addresses to counrties
		/// </summary>
		IpCountry = 0x0031,
		/// <summary>
		/// Logs simple counts by day
		/// </summary>
		Log = 0x0032,
		/// <summary>
		/// Log of each page load time and page reference
		/// </summary>
		LogPageTime = 0x0033,
		/// <summary>
		/// When someone laughs on the forum
		/// </summary>
		Lol = 0x0034,
		/// <summary>
		/// Misc files
		/// </summary>
		Misc = 0x0035,
		/// <summary>
		/// Each entry into the Mixmag Vote competition has a record in here
		/// </summary>
		MixmagEntry = 0x0036,
		/// <summary>
		/// DJs in the Greatest DJ poll
		/// </summary>
		MixmagGreatestDj = 0x0037,
		/// <summary>
		/// Vote for the mixmag greatest DJ competition
		/// </summary>
		MixmagGreatestVote = 0x0038,
		/// <summary>
		/// Each Mixmag issue has a record in here
		/// </summary>
		MixmagIssue = 0x0039,
		/// <summary>
		/// Each read of an issue
		/// </summary>
		MixmagRead = 0x003a,
		/// <summary>
		/// Subscribers to the Mixmag-by-email service
		/// </summary>
		MixmagSubscription = 0x003b,
		/// <summary>
		/// Votes in the Mixmag Vote system
		/// </summary>
		MixmagVote = 0x003c,
		/// <summary>
		/// A mobile number (tracks vaious stats)
		/// </summary>
		Mobile = 0x003d,
		/// <summary>
		/// Music types (heirachy)
		/// </summary>
		MusicType = 0x003e,
		/// <summary>
		/// Table where all outgoing sms's are logged
		/// </summary>
		OutgoingSms = 0x003f,
		/// <summary>
		/// Used to log the performance of the indevidual pages on the site.
		/// </summary>
		PageTime = 0x0040,
		/// <summary>
		/// Each article contains many paragraphs.
		/// </summary>
		Para = 0x0041,
		/// <summary>
		/// Phone handset settings helper
		/// </summary>
		Phone = 0x0042,
		/// <summary>
		/// Photo taken at an event
		/// </summary>
		Photo = 0x0043,
		/// <summary>
		/// Rating of a photo
		/// </summary>
		PhotoReview = 0x0044,
		/// <summary>
		/// e.g. Southampton, London
		/// </summary>
		Place = 0x0045,
		/// <summary>
		/// Prefs settings for browser guid
		/// </summary>
		Prefs = 0x0046,
		/// <summary>
		/// A client who either operates clubbing brands or places adverts on dsi
		/// </summary>
		Promoter = 0x0047,
		/// <summary>
		/// Lines promoter accounts to users
		/// </summary>
		PromoterUsr = 0x0048,
		/// <summary>
		/// A region is a sub-country - e.g. England/Scotland in the UK, or the States in the US.
		/// </summary>
		Region = 0x0049,
		/// <summary>
		/// Chat rooms pinned by users
		/// </summary>
		RoomPin = 0x004a,
		/// <summary>
		/// Sales phone call made / received by a sales person
		/// </summary>
		SalesCall = 0x004b,
		/// <summary>
		/// Sales efforts in a particular demographic
		/// </summary>
		SalesCampaign = 0x004c,
		/// <summary>
		/// Logs changes in sales status, required for reports
		/// </summary>
		SalesStatusChange = 0x004d,
		/// <summary>
		/// Configuration settings
		/// </summary>
		Setting = 0x004e,
		/// <summary>
		/// Log of Exceptions thrown from the Spotted website
		/// </summary>
		SpottedException = 0x004f,
		/// <summary>
		/// Tag definitions
		/// </summary>
		Tag = 0x0050,
		/// <summary>
		/// a table that links tags to photos
		/// </summary>
		TagPhoto = 0x0051,
		/// <summary>
		/// History of actions on a tag photo
		/// </summary>
		TagPhotoHistory = 0x0052,
		/// <summary>
		/// Monthly team targets used to calculate team bonus
		/// </summary>
		TeamTarget = 0x0053,
		/// <summary>
		/// Themes of discussion used for groups
		/// </summary>
		Theme = 0x0054,
		/// <summary>
		/// Contains many Comments
		/// </summary>
		Thread = 0x0055,
		/// <summary>
		/// Links a private thread to many users
		/// </summary>
		ThreadUsr = 0x0056,
		/// <summary>
		/// One ticket created each time someone buys a ticket
		/// </summary>
		Ticket = 0x0057,
		/// <summary>
		/// TicketPromoter to Event relational table
		/// </summary>
		TicketPromoterEvent = 0x0058,
		/// <summary>
		/// Run of tickets for sale
		/// </summary>
		TicketRun = 0x0059,
		/// <summary>
		/// Days which we do not expect to follow usual traffic patterns, and the day to use instead
		/// </summary>
		TrafficExceptionDay = 0x005a,
		/// <summary>
		/// Store of current analysed data calculating traffic levels at each minute of the day
		/// </summary>
		TrafficLevelRelativeToMinuteOfDay = 0x005b,
		/// <summary>
		/// Customer pays us using a credit card / card is refunded / customer transfers money into our bank acc
		/// </summary>
		Transfer = 0x005c,
		/// <summary>
		/// Each registered user of the system gets a record in this table.
		/// </summary>
		Usr = 0x005d,
		/// <summary>
		/// Ratings in the dating system
		/// </summary>
		UsrDate = 0x005e,
		/// <summary>
		/// Usrs having bought DonationIcons
		/// </summary>
		UsrDonationIcon = 0x005f,
		/// <summary>
		/// Links a user to many events (I went to this event)
		/// </summary>
		UsrEventAttended = 0x0060,
		/// <summary>
		/// Guestlist usr-event linking table
		/// </summary>
		UsrEventGuestlist = 0x0061,
		/// <summary>
		/// Links a user to many music types (music I listen to)
		/// </summary>
		UsrMusicTypeFavourite = 0x0062,
		/// <summary>
		/// Links a user to many photos (my favorite photos)
		/// </summary>
		UsrPhotoFavourite = 0x0063,
		/// <summary>
		/// Links a user to many photos (photos of me)
		/// </summary>
		UsrPhotoMe = 0x0064,
		/// <summary>
		/// Links to many places that the user may like to visit.
		/// </summary>
		UsrPlaceVisit = 0x0065,
		/// <summary>
		/// A club or location
		/// </summary>
		Venue = 0x0066,
		/// <summary>
		/// Stores information about a visit - guid from the cookie etc.
		/// </summary>
		Visit = 0x0067,
	}
	#endregion

	#region Abuse
	/// <summary>
	/// Reports of abuse
	/// </summary>
	public partial class Abuse : Model.Entities.Abuse, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// The primary key
			/// </summary>
			K = 0x00010001,
			/// <summary>
			/// The usr reporting the abuse
			/// </summary>
			ReportUsrK = 0x00010002,
			/// <summary>
			/// The user doing the abuse
			/// </summary>
			AbuseUsrK = 0x00010003,
			/// <summary>
			/// The type of the target object
			/// </summary>
			ObjectType = 0x00010004,
			/// <summary>
			/// The K of the target object
			/// </summary>
			ObjectK = 0x00010005,
			/// <summary>
			/// String reprasentation of the taget object - for use after the target has been deleted.
			/// </summary>
			ObjectString = 0x00010006,
			/// <summary>
			/// The text of the abuse
			/// </summary>
			ReportDescription = 0x00010007,
			/// <summary>
			/// DateTime that the report was made
			/// </summary>
			ReportDateTime = 0x00010008,
			/// <summary>
			/// Abuse was found = 1, NoAbuse = 2, Overturned = 3
			/// </summary>
			Status = 0x00010009,
			/// <summary>
			/// When was this report resolved?
			/// </summary>
			ResolveDateTime = 0x0001000a,
			/// <summary>
			/// What was the decision of the moderator?
			/// </summary>
			ResolveStatus = 0x0001000b,
			/// <summary>
			/// Description of the resolution (if needed)
			/// </summary>
			ResolveDescription = 0x0001000c,
			/// <summary>
			/// The moderator that resolved the report
			/// </summary>
			ResolveUsrK = 0x0001000d,
		}
		#endregion
		public static string GetColumnName(Abuse.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case Abuse.Columns.K: return "K";
						case Abuse.Columns.ReportUsrK: return "ReportUsrK";
						case Abuse.Columns.AbuseUsrK: return "AbuseUsrK";
						case Abuse.Columns.ObjectType: return "ObjectType";
						case Abuse.Columns.ObjectK: return "ObjectK";
						case Abuse.Columns.ObjectString: return "ObjectString";
						case Abuse.Columns.ReportDescription: return "ReportDescription";
						case Abuse.Columns.ReportDateTime: return "ReportDateTime";
						case Abuse.Columns.Status: return "Status";
						case Abuse.Columns.ResolveDateTime: return "ResolveDateTime";
						case Abuse.Columns.ResolveStatus: return "ResolveStatus";
						case Abuse.Columns.ResolveDescription: return "ResolveDescription";
						case Abuse.Columns.ResolveUsrK: return "ResolveUsrK";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(Abuse.Columns columnEnum)
		{
			switch (columnEnum)
			{
																	default: return false;
			}
		}


		#region Common
 
		public Abuse(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);  }
		public Abuse()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.Abuse);
		}
		public Abuse(BobSet bs)
		{
			this.Bob = new Bob(bs.Table, bs);
		}
		public Abuse(int AbuseK, IBob Parent, object Column)
			: this()
		{
			Bob.GetBobFromParent(AbuseK, Parent.Bob, Column, TablesEnum.Abuse);
		}
		public Abuse(int AbuseK)
			: this()
		{
			Bob.GetBobFromPrimaryKey(AbuseK);
		}
		#endregion

	}
	#endregion
	#region AbuseTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region Abuse
	/// <summary>
	/// Reports of abuse
	/// </summary>
	[Serializable]
	public partial class Abuse 
	{
		
		#region Simple members
		/// <summary>
		/// The primary key
		/// </summary>
		public override int K
		{
			get { return (int)this[Abuse.Columns.K] as int? ?? 0 ; }
			set { this[Abuse.Columns.K] = value; }
		}
		/// <summary>
		/// The usr reporting the abuse
		/// </summary>
		public override int ReportUsrK
		{
			get { return (int)this[Abuse.Columns.ReportUsrK]; }
			set { this[Abuse.Columns.ReportUsrK] = value; }
		}
		/// <summary>
		/// The user doing the abuse
		/// </summary>
		public override int AbuseUsrK
		{
			get { return (int)this[Abuse.Columns.AbuseUsrK]; }
			set { this[Abuse.Columns.AbuseUsrK] = value; }
		}
		/// <summary>
		/// The type of the target object
		/// </summary>
		public override int ObjectType
		{
			get { return (int)this[Abuse.Columns.ObjectType]; }
			set { this[Abuse.Columns.ObjectType] = value; }
		}
		/// <summary>
		/// The K of the target object
		/// </summary>
		public override int ObjectK
		{
			get { return (int)this[Abuse.Columns.ObjectK]; }
			set { this[Abuse.Columns.ObjectK] = value; }
		}
		/// <summary>
		/// String reprasentation of the taget object - for use after the target has been deleted.
		/// </summary>
		public override string ObjectString
		{
			get { return (string)this[Abuse.Columns.ObjectString]; }
			set { this[Abuse.Columns.ObjectString] = value; }
		}
		/// <summary>
		/// The text of the abuse
		/// </summary>
		public override string ReportDescription
		{
			get { return (string)this[Abuse.Columns.ReportDescription]; }
			set { this[Abuse.Columns.ReportDescription] = value; }
		}
		/// <summary>
		/// DateTime that the report was made
		/// </summary>
		public override DateTime ReportDateTime
		{
			get { return (DateTime)this[Abuse.Columns.ReportDateTime]; }
			set { this[Abuse.Columns.ReportDateTime] = value; }
		}
		/// <summary>
		/// Abuse was found = 1, NoAbuse = 2, Overturned = 3
		/// </summary>
		public override int Status
		{
			get { return (int)this[Abuse.Columns.Status]; }
			set { this[Abuse.Columns.Status] = value; }
		}
		/// <summary>
		/// When was this report resolved?
		/// </summary>
		public override DateTime ResolveDateTime
		{
			get { return (DateTime)this[Abuse.Columns.ResolveDateTime]; }
			set { this[Abuse.Columns.ResolveDateTime] = value; }
		}
		/// <summary>
		/// What was the decision of the moderator?
		/// </summary>
		public override int ResolveStatus
		{
			get { return (int)this[Abuse.Columns.ResolveStatus]; }
			set { this[Abuse.Columns.ResolveStatus] = value; }
		}
		/// <summary>
		/// Description of the resolution (if needed)
		/// </summary>
		public override string ResolveDescription
		{
			get { return (string)this[Abuse.Columns.ResolveDescription]; }
			set { this[Abuse.Columns.ResolveDescription] = value; }
		}
		/// <summary>
		/// The moderator that resolved the report
		/// </summary>
		public override int ResolveUsrK
		{
			get { return (int)this[Abuse.Columns.ResolveUsrK]; }
			set { this[Abuse.Columns.ResolveUsrK] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildAbuses
	{
		CachedSqlSelect<Abuse> ChildAbuses();
		CachedSqlSelect<Abuse> ChildAbuses(Q where);
		CachedSqlSelect<Abuse> ChildAbuses(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<Abuse> ChildAbuses(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class Abuse 
		{
		}

	#region AbuseDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region AbuseDataHolder
	/// <summary>
	/// Reports of abuseDataHolder
	/// </summary>
	[Serializable]
	public partial class AbuseDataHolder : DataHolder<Abuse>
	{
		Abuse dataHolder;
		[NonSerializedAttribute] Abuse bob;

		public AbuseDataHolder()
		{
			this.dataHolder = new Abuse();
		}
		
		void CopyValues(Abuse source, Abuse destination)
		{
			destination[Bobs.Abuse.Columns.K] = source[Bobs.Abuse.Columns.K];
			destination[Bobs.Abuse.Columns.ReportUsrK] = source[Bobs.Abuse.Columns.ReportUsrK];
			destination[Bobs.Abuse.Columns.AbuseUsrK] = source[Bobs.Abuse.Columns.AbuseUsrK];
			destination[Bobs.Abuse.Columns.ObjectType] = source[Bobs.Abuse.Columns.ObjectType];
			destination[Bobs.Abuse.Columns.ObjectK] = source[Bobs.Abuse.Columns.ObjectK];
			destination[Bobs.Abuse.Columns.ObjectString] = source[Bobs.Abuse.Columns.ObjectString];
			destination[Bobs.Abuse.Columns.ReportDescription] = source[Bobs.Abuse.Columns.ReportDescription];
			destination[Bobs.Abuse.Columns.ReportDateTime] = source[Bobs.Abuse.Columns.ReportDateTime];
			destination[Bobs.Abuse.Columns.Status] = source[Bobs.Abuse.Columns.Status];
			destination[Bobs.Abuse.Columns.ResolveDateTime] = source[Bobs.Abuse.Columns.ResolveDateTime];
			destination[Bobs.Abuse.Columns.ResolveStatus] = source[Bobs.Abuse.Columns.ResolveStatus];
			destination[Bobs.Abuse.Columns.ResolveDescription] = source[Bobs.Abuse.Columns.ResolveDescription];
			destination[Bobs.Abuse.Columns.ResolveUsrK] = source[Bobs.Abuse.Columns.ResolveUsrK];
		}
		
		public AbuseDataHolder(Abuse bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// The primary key
		/// </summary>
		public int K
		{
			get { return dataHolder.K; }
			set { this.dataHolder.K = value; }
		}
		/// <summary>
		/// The usr reporting the abuse
		/// </summary>
		public int ReportUsrK
		{
			get { return dataHolder.ReportUsrK; }
			set { this.dataHolder.ReportUsrK = value; }
		}
		/// <summary>
		/// The user doing the abuse
		/// </summary>
		public int AbuseUsrK
		{
			get { return dataHolder.AbuseUsrK; }
			set { this.dataHolder.AbuseUsrK = value; }
		}
		/// <summary>
		/// The type of the target object
		/// </summary>
		public int ObjectType
		{
			get { return dataHolder.ObjectType; }
			set { this.dataHolder.ObjectType = value; }
		}
		/// <summary>
		/// The K of the target object
		/// </summary>
		public int ObjectK
		{
			get { return dataHolder.ObjectK; }
			set { this.dataHolder.ObjectK = value; }
		}
		/// <summary>
		/// String reprasentation of the taget object - for use after the target has been deleted.
		/// </summary>
		public string ObjectString
		{
			get { return dataHolder.ObjectString; }
			set { this.dataHolder.ObjectString = value; }
		}
		/// <summary>
		/// The text of the abuse
		/// </summary>
		public string ReportDescription
		{
			get { return dataHolder.ReportDescription; }
			set { this.dataHolder.ReportDescription = value; }
		}
		/// <summary>
		/// DateTime that the report was made
		/// </summary>
		public DateTime ReportDateTime
		{
			get { return dataHolder.ReportDateTime; }
			set { this.dataHolder.ReportDateTime = value; }
		}
		/// <summary>
		/// Abuse was found = 1, NoAbuse = 2, Overturned = 3
		/// </summary>
		public int Status
		{
			get { return dataHolder.Status; }
			set { this.dataHolder.Status = value; }
		}
		/// <summary>
		/// When was this report resolved?
		/// </summary>
		public DateTime ResolveDateTime
		{
			get { return dataHolder.ResolveDateTime; }
			set { this.dataHolder.ResolveDateTime = value; }
		}
		/// <summary>
		/// What was the decision of the moderator?
		/// </summary>
		public int ResolveStatus
		{
			get { return dataHolder.ResolveStatus; }
			set { this.dataHolder.ResolveStatus = value; }
		}
		/// <summary>
		/// Description of the resolution (if needed)
		/// </summary>
		public string ResolveDescription
		{
			get { return dataHolder.ResolveDescription; }
			set { this.dataHolder.ResolveDescription = value; }
		}
		/// <summary>
		/// The moderator that resolved the report
		/// </summary>
		public int ResolveUsrK
		{
			get { return dataHolder.ResolveUsrK; }
			set { this.dataHolder.ResolveUsrK = value; }
		}
		#endregion
		public Abuse Abuse
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new Abuse(K);
					}
					else
					{
						bob = new Abuse();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region AbuseSet
	public partial class AbuseSet : BobSet, IEnumerable<Abuse>
	{
		public AbuseSet(Query query) : base(query) { }

		public Abuse this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new Abuse(this);
					((Abuse)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (Abuse)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new AbuseTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<Abuse> ToList()
		{
			List<Abuse> list = new List<Abuse>();
			foreach (Abuse item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<Abuse> Members

		public new IEnumerator<Abuse> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region AbuseTableDef
	public class AbuseTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "Abuse";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "C8CB24BE";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return Abuse.GetColumnName((Abuse.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.Abuse;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return true;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return Abuse.Columns.K;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			Abuse.Columns c = (Abuse.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case Abuse.Columns.K: ColumnStore[i] = new ColumnDef(c, "K", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey | SqlColumnFlag.AutoNumber, null); break;
					case Abuse.Columns.ReportUsrK: ColumnStore[i] = new ColumnDef(c, "ReportUsrK", SqlDbType.Int, 0); break;
					case Abuse.Columns.AbuseUsrK: ColumnStore[i] = new ColumnDef(c, "AbuseUsrK", SqlDbType.Int, 0); break;
					case Abuse.Columns.ObjectType: ColumnStore[i] = new ColumnDef(c, "ObjectType", SqlDbType.Int, 0); break;
					case Abuse.Columns.ObjectK: ColumnStore[i] = new ColumnDef(c, "ObjectK", SqlDbType.Int, 0); break;
					case Abuse.Columns.ObjectString: ColumnStore[i] = new ColumnDef(c, "ObjectString", SqlDbType.VarChar, 500, ""); break;
					case Abuse.Columns.ReportDescription: ColumnStore[i] = new ColumnDef(c, "ReportDescription", SqlDbType.VarChar, 500, ""); break;
					case Abuse.Columns.ReportDateTime: ColumnStore[i] = new ColumnDef(c, "ReportDateTime", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case Abuse.Columns.Status: ColumnStore[i] = new ColumnDef(c, "Status", SqlDbType.Int, 0); break;
					case Abuse.Columns.ResolveDateTime: ColumnStore[i] = new ColumnDef(c, "ResolveDateTime", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case Abuse.Columns.ResolveStatus: ColumnStore[i] = new ColumnDef(c, "ResolveStatus", SqlDbType.Int, 0); break;
					case Abuse.Columns.ResolveDescription: ColumnStore[i] = new ColumnDef(c, "ResolveDescription", SqlDbType.VarChar, 500, ""); break;
					case Abuse.Columns.ResolveUsrK: ColumnStore[i] = new ColumnDef(c, "ResolveUsrK", SqlDbType.Int, 0); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(Abuse.Columns.K);
						InitColumn(Abuse.Columns.ReportUsrK);
						InitColumn(Abuse.Columns.AbuseUsrK);
						InitColumn(Abuse.Columns.ObjectType);
						InitColumn(Abuse.Columns.ObjectK);
						InitColumn(Abuse.Columns.ObjectString);
						InitColumn(Abuse.Columns.ReportDescription);
						InitColumn(Abuse.Columns.ReportDateTime);
						InitColumn(Abuse.Columns.Status);
						InitColumn(Abuse.Columns.ResolveDateTime);
						InitColumn(Abuse.Columns.ResolveStatus);
						InitColumn(Abuse.Columns.ResolveDescription);
						InitColumn(Abuse.Columns.ResolveUsrK);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region Admin
	/// <summary>
	/// Specifies admin privilages for users
	/// </summary>
	public partial class Admin : Model.Entities.Admin, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// Primary key
			/// </summary>
			K = 0x00020001,
			/// <summary>
			/// Link to the user table
			/// </summary>
			UsrK = 0x00020002,
			/// <summary>
			/// Object type - 1=Country, 2=Place
			/// </summary>
			ObjectType = 0x00020003,
			/// <summary>
			/// Key in object table
			/// </summary>
			ObjectK = 0x00020004,
		}
		#endregion
		public static string GetColumnName(Admin.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case Admin.Columns.K: return "K";
						case Admin.Columns.UsrK: return "UsrK";
						case Admin.Columns.ObjectType: return "ObjectType";
						case Admin.Columns.ObjectK: return "ObjectK";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(Admin.Columns columnEnum)
		{
			switch (columnEnum)
			{
								default: return false;
			}
		}


		#region Common
 
		public Admin(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);  }
		public Admin()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.Admin);
		}
		public Admin(BobSet bs)
		{
			this.Bob = new Bob(bs.Table, bs);
		}
		public Admin(int AdminK, IBob Parent, object Column)
			: this()
		{
			Bob.GetBobFromParent(AdminK, Parent.Bob, Column, TablesEnum.Admin);
		}
		public Admin(int AdminK)
			: this()
		{
			Bob.GetBobFromPrimaryKey(AdminK);
		}
		#endregion

	}
	#endregion
	#region AdminTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region Admin
	/// <summary>
	/// Specifies admin privilages for users
	/// </summary>
	[Serializable]
	public partial class Admin 
	{
		
		#region Simple members
		/// <summary>
		/// Primary key
		/// </summary>
		public override int K
		{
			get { return (int)this[Admin.Columns.K] as int? ?? 0 ; }
			set { this[Admin.Columns.K] = value; }
		}
		/// <summary>
		/// Link to the user table
		/// </summary>
		public override int UsrK
		{
			get { return (int)this[Admin.Columns.UsrK]; }
			set { this[Admin.Columns.UsrK] = value; }
		}
		/// <summary>
		/// Object type - 1=Country, 2=Place
		/// </summary>
		public override int ObjectType
		{
			get { return (int)this[Admin.Columns.ObjectType]; }
			set { this[Admin.Columns.ObjectType] = value; }
		}
		/// <summary>
		/// Key in object table
		/// </summary>
		public override int ObjectK
		{
			get { return (int)this[Admin.Columns.ObjectK]; }
			set { this[Admin.Columns.ObjectK] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildAdmins
	{
		CachedSqlSelect<Admin> ChildAdmins();
		CachedSqlSelect<Admin> ChildAdmins(Q where);
		CachedSqlSelect<Admin> ChildAdmins(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<Admin> ChildAdmins(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class Admin 
		{
		}

	#region AdminDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region AdminDataHolder
	/// <summary>
	/// Specifies admin privilages for usersDataHolder
	/// </summary>
	[Serializable]
	public partial class AdminDataHolder : DataHolder<Admin>
	{
		Admin dataHolder;
		[NonSerializedAttribute] Admin bob;

		public AdminDataHolder()
		{
			this.dataHolder = new Admin();
		}
		
		void CopyValues(Admin source, Admin destination)
		{
			destination[Bobs.Admin.Columns.K] = source[Bobs.Admin.Columns.K];
			destination[Bobs.Admin.Columns.UsrK] = source[Bobs.Admin.Columns.UsrK];
			destination[Bobs.Admin.Columns.ObjectType] = source[Bobs.Admin.Columns.ObjectType];
			destination[Bobs.Admin.Columns.ObjectK] = source[Bobs.Admin.Columns.ObjectK];
		}
		
		public AdminDataHolder(Admin bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// Primary key
		/// </summary>
		public int K
		{
			get { return dataHolder.K; }
			set { this.dataHolder.K = value; }
		}
		/// <summary>
		/// Link to the user table
		/// </summary>
		public int UsrK
		{
			get { return dataHolder.UsrK; }
			set { this.dataHolder.UsrK = value; }
		}
		/// <summary>
		/// Object type - 1=Country, 2=Place
		/// </summary>
		public int ObjectType
		{
			get { return dataHolder.ObjectType; }
			set { this.dataHolder.ObjectType = value; }
		}
		/// <summary>
		/// Key in object table
		/// </summary>
		public int ObjectK
		{
			get { return dataHolder.ObjectK; }
			set { this.dataHolder.ObjectK = value; }
		}
		#endregion
		public Admin Admin
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new Admin(K);
					}
					else
					{
						bob = new Admin();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region AdminSet
	public partial class AdminSet : BobSet, IEnumerable<Admin>
	{
		public AdminSet(Query query) : base(query) { }

		public Admin this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new Admin(this);
					((Admin)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (Admin)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new AdminTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<Admin> ToList()
		{
			List<Admin> list = new List<Admin>();
			foreach (Admin item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<Admin> Members

		public new IEnumerator<Admin> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region AdminTableDef
	public class AdminTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "Admin";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "FD30E1A8";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return Admin.GetColumnName((Admin.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.Admin;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return true;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return Admin.Columns.K;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			Admin.Columns c = (Admin.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case Admin.Columns.K: ColumnStore[i] = new ColumnDef(c, "K", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey | SqlColumnFlag.AutoNumber, null); break;
					case Admin.Columns.UsrK: ColumnStore[i] = new ColumnDef(c, "UsrK", SqlDbType.Int, 0); break;
					case Admin.Columns.ObjectType: ColumnStore[i] = new ColumnDef(c, "ObjectType", SqlDbType.Int, 0); break;
					case Admin.Columns.ObjectK: ColumnStore[i] = new ColumnDef(c, "ObjectK", SqlDbType.Int, 0); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(Admin.Columns.K);
						InitColumn(Admin.Columns.UsrK);
						InitColumn(Admin.Columns.ObjectType);
						InitColumn(Admin.Columns.ObjectK);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region Article
	/// <summary>
	/// An article
	/// </summary>
	public partial class Article : Model.Entities.Article, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// The primary key
			/// </summary>
			K = 0x00030001,
			/// <summary>
			/// The title of the article. Less that 100 characters.
			/// </summary>
			Title = 0x00030002,
			/// <summary>
			/// Summary - couple of sentances about the article. Less than 30 words.
			/// </summary>
			Summary = 0x00030003,
			/// <summary>
			/// Cropped image 100*100
			/// </summary>
			Pic = 0x00030004,
			/// <summary>
			/// Owner
			/// </summary>
			OwnerUsrK = 0x00030005,
			/// <summary>
			/// When the artical was originally added
			/// </summary>
			AddedDateTime = 0x00030006,
			/// <summary>
			/// Status - New, Edit, Enabled, Disabled
			/// </summary>
			Status = 0x00030007,
			/// <summary>
			/// When the article was marked as enabled
			/// </summary>
			EnabledDateTime = 0x00030008,
			/// <summary>
			/// Who marked the article as enabled?
			/// </summary>
			EnabledUsrK = 0x00030009,
			/// <summary>
			/// What's the geographic relevance? 0=All, 1=Country, 2=Region, 3=Place, 4=Venue, 5=Event
			/// </summary>
			Relevance = 0x0003000a,
			/// <summary>
			/// What's the type of the parent object?
			/// </summary>
			ParentObjectType = 0x0003000b,
			/// <summary>
			/// What's the key of the parent object?
			/// </summary>
			ParentObjectK = 0x0003000c,
			/// <summary>
			/// Event that this article is relevant to
			/// </summary>
			EventK = 0x0003000d,
			/// <summary>
			/// Venue that this article is relevant to
			/// </summary>
			VenueK = 0x0003000e,
			/// <summary>
			/// Place that this article is relevant to
			/// </summary>
			PlaceK = 0x0003000f,
			/// <summary>
			/// Place that this article is relevant to
			/// </summary>
			CountryK = 0x00030010,
			/// <summary>
			/// Does the article have a single discussion thread, or does each paragraph have it's own thread?
			/// </summary>
			HasSingleThread = 0x00030011,
			/// <summary>
			/// Admin note, to be edited by admins at Edit stage, and visible to the author
			/// </summary>
			AdminNote = 0x00030012,
			/// <summary>
			/// Total number of views the article has had
			/// </summary>
			Views = 0x00030013,
			/// <summary>
			/// Does the artical have worldwide relevance?
			/// </summary>
			IsWorldwide = 0x00030014,
			/// <summary>
			/// Total number of comments in all threads in this article
			/// </summary>
			TotalComments = 0x00030015,
			/// <summary>
			/// DateTime of thge last comments posted in this article
			/// </summary>
			LastPost = 0x00030016,
			/// <summary>
			/// The average date/time of all the comments posted ion this article
			/// </summary>
			AverageCommentDateTime = 0x00030017,
			/// <summary>
			/// Filename of the user control that will be displayed instead of the paragraphs.
			/// </summary>
			OverrideContents = 0x00030018,
			/// <summary>
			/// Shall we hide the owner image?
			/// </summary>
			HideOwner = 0x00030019,
			/// <summary>
			/// The Misc that was used to create the Pic.
			/// </summary>
			PicMiscK = 0x0003001a,
			/// <summary>
			/// State var used to reconstruct cropper when re-cropping
			/// </summary>
			PicState = 0x0003001b,
			/// <summary>
			/// The Photo that was used to create the Pic.
			/// </summary>
			PicPhotoK = 0x0003001c,
			/// <summary>
			/// The url fragment - so that the url can be generated without accessing parent database records
			/// </summary>
			UrlFragment = 0x0003001d,
			/// <summary>
			/// Main public thread (first one started)
			/// </summary>
			ThreadK = 0x0003001e,
			/// <summary>
			/// Headline of the article for sending to Twitter
			/// </summary>
			TwitterHeadline = 0x0003001f,
			/// <summary>
			/// Is this article displayed in the Mixmag news section?
			/// </summary>
			IsMixmagNews = 0x00030020,
			/// <summary>
			/// Is this article displayed using the first para content on the front page?
			/// </summary>
			IsExtendedDisplay = 0x00030021,
			/// <summary>
			/// Which Mixmag sections is this article in?
			/// </summary>
			MixmagSections = 0x00030022,
			/// <summary>
			/// Do we show this article above the fold on the front page?
			/// </summary>
			ShowAboveFoldOnFrontPage = 0x00030023,
		}
		#endregion
		public static string GetColumnName(Article.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case Article.Columns.K: return "K";
						case Article.Columns.Title: return "Title";
						case Article.Columns.Summary: return "Summary";
						case Article.Columns.Pic: return "Pic";
						case Article.Columns.OwnerUsrK: return "OwnerUsrK";
						case Article.Columns.AddedDateTime: return "AddedDateTime";
						case Article.Columns.Status: return "Status";
						case Article.Columns.EnabledDateTime: return "EnabledDateTime";
						case Article.Columns.EnabledUsrK: return "EnabledUsrK";
						case Article.Columns.Relevance: return "Relevance";
						case Article.Columns.ParentObjectType: return "ParentObjectType";
						case Article.Columns.ParentObjectK: return "ParentObjectK";
						case Article.Columns.EventK: return "EventK";
						case Article.Columns.VenueK: return "VenueK";
						case Article.Columns.PlaceK: return "PlaceK";
						case Article.Columns.CountryK: return "CountryK";
						case Article.Columns.HasSingleThread: return "HasSingleThread";
						case Article.Columns.AdminNote: return "AdminNote";
						case Article.Columns.Views: return "Views";
						case Article.Columns.IsWorldwide: return "IsWorldwide";
						case Article.Columns.TotalComments: return "TotalComments";
						case Article.Columns.LastPost: return "LastPost";
						case Article.Columns.AverageCommentDateTime: return "AverageCommentDateTime";
						case Article.Columns.OverrideContents: return "OverrideContents";
						case Article.Columns.HideOwner: return "HideOwner";
						case Article.Columns.PicMiscK: return "PicMiscK";
						case Article.Columns.PicState: return "PicState";
						case Article.Columns.PicPhotoK: return "PicPhotoK";
						case Article.Columns.UrlFragment: return "UrlFragment";
						case Article.Columns.ThreadK: return "ThreadK";
						case Article.Columns.TwitterHeadline: return "TwitterHeadline";
						case Article.Columns.IsMixmagNews: return "IsMixmagNews";
						case Article.Columns.IsExtendedDisplay: return "IsExtendedDisplay";
						case Article.Columns.MixmagSections: return "MixmagSections";
						case Article.Columns.ShowAboveFoldOnFrontPage: return "ShowAboveFoldOnFrontPage";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(Article.Columns columnEnum)
		{
			switch (columnEnum)
			{
																																							default: return false;
			}
		}


		#region Common
 
		public Article(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);  }
		public Article()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.Article);
		}
		public Article(BobSet bs)
		{
			this.Bob = new Bob(bs.Table, bs);
		}
		public Article(int ArticleK, IBob Parent, object Column)
			: this()
		{
			Bob.GetBobFromParent(ArticleK, Parent.Bob, Column, TablesEnum.Article);
		}
		public Article(int ArticleK)
			: this()
		{
			Bob.GetBobFromPrimaryKey(ArticleK);
		}
		#endregion

	}
	#endregion
	#region ArticleTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region Article
	/// <summary>
	/// An article
	/// </summary>
	[Serializable]
	public partial class Article 
	{
		
		#region Simple members
		/// <summary>
		/// The primary key
		/// </summary>
		public override int K
		{
			get { return (int)this[Article.Columns.K] as int? ?? 0 ; }
			set { this[Article.Columns.K] = value; }
		}
		/// <summary>
		/// The title of the article. Less that 100 characters.
		/// </summary>
		public override string Title
		{
			get { return (string)this[Article.Columns.Title]; }
			set { this[Article.Columns.Title] = value; }
		}
		/// <summary>
		/// Summary - couple of sentances about the article. Less than 30 words.
		/// </summary>
		public override string Summary
		{
			get { return (string)this[Article.Columns.Summary]; }
			set { this[Article.Columns.Summary] = value; }
		}
		/// <summary>
		/// Cropped image 100*100
		/// </summary>
		public Guid	Pic
		{
			get{ return Cambro.Misc.Db.GuidConvertor(this[Article.Columns.Pic]);}		
			set{ this[Article.Columns.Pic] = new System.Data.SqlTypes.SqlGuid(value);}
		}
		/// <summary>
		/// Owner
		/// </summary>
		public override int OwnerUsrK
		{
			get { return (int)this[Article.Columns.OwnerUsrK]; }
			set { this[Article.Columns.OwnerUsrK] = value; }
		}
		/// <summary>
		/// When the artical was originally added
		/// </summary>
		public override DateTime AddedDateTime
		{
			get { return (DateTime)this[Article.Columns.AddedDateTime]; }
			set { this[Article.Columns.AddedDateTime] = value; }
		}
		/// <summary>
		/// Status - New, Edit, Enabled, Disabled
		/// </summary>
		public override int Status
		{
			get { return (int)this[Article.Columns.Status]; }
			set { this[Article.Columns.Status] = value; }
		}
		/// <summary>
		/// When the article was marked as enabled
		/// </summary>
		public override DateTime EnabledDateTime
		{
			get { return (DateTime)this[Article.Columns.EnabledDateTime]; }
			set { this[Article.Columns.EnabledDateTime] = value; }
		}
		/// <summary>
		/// Who marked the article as enabled?
		/// </summary>
		public override int EnabledUsrK
		{
			get { return (int)this[Article.Columns.EnabledUsrK]; }
			set { this[Article.Columns.EnabledUsrK] = value; }
		}
		/// <summary>
		/// What's the geographic relevance? 0=All, 1=Country, 2=Region, 3=Place, 4=Venue, 5=Event
		/// </summary>
		public override int Relevance
		{
			get { return (int)this[Article.Columns.Relevance]; }
			set { this[Article.Columns.Relevance] = value; }
		}
		/// <summary>
		/// What's the type of the parent object?
		/// </summary>
		public override int ParentObjectType
		{
			get { return (int)this[Article.Columns.ParentObjectType]; }
			set { this[Article.Columns.ParentObjectType] = value; }
		}
		/// <summary>
		/// What's the key of the parent object?
		/// </summary>
		public override int ParentObjectK
		{
			get { return (int)this[Article.Columns.ParentObjectK]; }
			set { this[Article.Columns.ParentObjectK] = value; }
		}
		/// <summary>
		/// Event that this article is relevant to
		/// </summary>
		public override int EventK
		{
			get { return (int)this[Article.Columns.EventK]; }
			set { this[Article.Columns.EventK] = value; }
		}
		/// <summary>
		/// Venue that this article is relevant to
		/// </summary>
		public override int VenueK
		{
			get { return (int)this[Article.Columns.VenueK]; }
			set { this[Article.Columns.VenueK] = value; }
		}
		/// <summary>
		/// Place that this article is relevant to
		/// </summary>
		public override int PlaceK
		{
			get { return (int)this[Article.Columns.PlaceK]; }
			set { this[Article.Columns.PlaceK] = value; }
		}
		/// <summary>
		/// Place that this article is relevant to
		/// </summary>
		public override int CountryK
		{
			get { return (int)this[Article.Columns.CountryK]; }
			set { this[Article.Columns.CountryK] = value; }
		}
		/// <summary>
		/// Does the article have a single discussion thread, or does each paragraph have it's own thread?
		/// </summary>
		public override bool HasSingleThread
		{
			get { return (bool)this[Article.Columns.HasSingleThread]; }
			set { this[Article.Columns.HasSingleThread] = value; }
		}
		/// <summary>
		/// Admin note, to be edited by admins at Edit stage, and visible to the author
		/// </summary>
		public override string AdminNote
		{
			get { return (string)this[Article.Columns.AdminNote]; }
			set { this[Article.Columns.AdminNote] = value; }
		}
		/// <summary>
		/// Total number of views the article has had
		/// </summary>
		public override int Views
		{
			get { return (int)this[Article.Columns.Views]; }
			set { this[Article.Columns.Views] = value; }
		}
		/// <summary>
		/// Does the artical have worldwide relevance?
		/// </summary>
		public override bool IsWorldwide
		{
			get { return (bool)this[Article.Columns.IsWorldwide]; }
			set { this[Article.Columns.IsWorldwide] = value; }
		}
		/// <summary>
		/// Total number of comments in all threads in this article
		/// </summary>
		public override int TotalComments
		{
			get { return (int)this[Article.Columns.TotalComments]; }
			set { this[Article.Columns.TotalComments] = value; }
		}
		/// <summary>
		/// DateTime of thge last comments posted in this article
		/// </summary>
		public override DateTime LastPost
		{
			get { return (DateTime)this[Article.Columns.LastPost]; }
			set { this[Article.Columns.LastPost] = value; }
		}
		/// <summary>
		/// The average date/time of all the comments posted ion this article
		/// </summary>
		public override DateTime AverageCommentDateTime
		{
			get { return (DateTime)this[Article.Columns.AverageCommentDateTime]; }
			set { this[Article.Columns.AverageCommentDateTime] = value; }
		}
		/// <summary>
		/// Filename of the user control that will be displayed instead of the paragraphs.
		/// </summary>
		public override string OverrideContents
		{
			get { return (string)this[Article.Columns.OverrideContents]; }
			set { this[Article.Columns.OverrideContents] = value; }
		}
		/// <summary>
		/// Shall we hide the owner image?
		/// </summary>
		public override bool HideOwner
		{
			get { return (bool)this[Article.Columns.HideOwner]; }
			set { this[Article.Columns.HideOwner] = value; }
		}
		/// <summary>
		/// The Misc that was used to create the Pic.
		/// </summary>
		public override int PicMiscK
		{
			get { return (int)this[Article.Columns.PicMiscK]; }
			set { this[Article.Columns.PicMiscK] = value; }
		}
		/// <summary>
		/// State var used to reconstruct cropper when re-cropping
		/// </summary>
		public override string PicState
		{
			get { return (string)this[Article.Columns.PicState]; }
			set { this[Article.Columns.PicState] = value; }
		}
		/// <summary>
		/// The Photo that was used to create the Pic.
		/// </summary>
		public override int PicPhotoK
		{
			get { return (int)this[Article.Columns.PicPhotoK]; }
			set { this[Article.Columns.PicPhotoK] = value; }
		}
		/// <summary>
		/// The url fragment - so that the url can be generated without accessing parent database records
		/// </summary>
		public override string UrlFragment
		{
			get { return (string)this[Article.Columns.UrlFragment]; }
			set { this[Article.Columns.UrlFragment] = value; }
		}
		/// <summary>
		/// Main public thread (first one started)
		/// </summary>
		public override int? ThreadK
		{
			get { return (int?)this[Article.Columns.ThreadK]; }
			set { this[Article.Columns.ThreadK] = value; }
		}
		/// <summary>
		/// Headline of the article for sending to Twitter
		/// </summary>
		public override string TwitterHeadline
		{
			get { return (string)this[Article.Columns.TwitterHeadline]; }
			set { this[Article.Columns.TwitterHeadline] = value; }
		}
		/// <summary>
		/// Is this article displayed in the Mixmag news section?
		/// </summary>
		public override bool IsMixmagNews
		{
			get { return (bool)this[Article.Columns.IsMixmagNews]; }
			set { this[Article.Columns.IsMixmagNews] = value; }
		}
		/// <summary>
		/// Is this article displayed using the first para content on the front page?
		/// </summary>
		public override bool IsExtendedDisplay
		{
			get { return (bool)this[Article.Columns.IsExtendedDisplay]; }
			set { this[Article.Columns.IsExtendedDisplay] = value; }
		}
		/// <summary>
		/// Which Mixmag sections is this article in?
		/// </summary>
		public override int MixmagSections
		{
			get { return (int)this[Article.Columns.MixmagSections]; }
			set { this[Article.Columns.MixmagSections] = value; }
		}
		/// <summary>
		/// Do we show this article above the fold on the front page?
		/// </summary>
		public override bool ShowAboveFoldOnFrontPage
		{
			get { return (bool)this[Article.Columns.ShowAboveFoldOnFrontPage]; }
			set { this[Article.Columns.ShowAboveFoldOnFrontPage] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildArticles
	{
		CachedSqlSelect<Article> ChildArticles();
		CachedSqlSelect<Article> ChildArticles(Q where);
		CachedSqlSelect<Article> ChildArticles(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<Article> ChildArticles(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class Article 
	 : 
	Bobs.ChildInterfaces.IHasChildGallerys
	,
	Bobs.ChildInterfaces.IHasChildParas
	,
	Bobs.ChildInterfaces.IHasChildPhotos
	,
	Bobs.ChildInterfaces.IHasChildThreads
		{
			public CachedSqlSelect<Gallery> ChildGallerys()
		{
			return this.ChildGallerys(null, null);
		}
		public CachedSqlSelect<Gallery> ChildGallerys(Q where)
		{
			return this.ChildGallerys(where, null);
		}
		public CachedSqlSelect<Gallery> ChildGallerys(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildGallerys(null, orderBy);
		}
		public CachedSqlSelect<Gallery> ChildGallerys(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<Gallery>
			(
				new Children<Gallery>
				(
					TablesEnum.Article, 
					this.K, 
					TablesEnum.Gallery, 
					dr => 
					{ 
						Gallery newGallery = new Gallery(); 
						newGallery.Initialise(dr); 
						return newGallery;
					},
					"A1E9A35D",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<Para> ChildParas()
		{
			return this.ChildParas(null, null);
		}
		public CachedSqlSelect<Para> ChildParas(Q where)
		{
			return this.ChildParas(where, null);
		}
		public CachedSqlSelect<Para> ChildParas(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildParas(null, orderBy);
		}
		public CachedSqlSelect<Para> ChildParas(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<Para>
			(
				new Children<Para>
				(
					TablesEnum.Article, 
					this.K, 
					TablesEnum.Para, 
					dr => 
					{ 
						Para newPara = new Para(); 
						newPara.Initialise(dr); 
						return newPara;
					},
					"325990B0",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<Photo> ChildPhotos()
		{
			return this.ChildPhotos(null, null);
		}
		public CachedSqlSelect<Photo> ChildPhotos(Q where)
		{
			return this.ChildPhotos(where, null);
		}
		public CachedSqlSelect<Photo> ChildPhotos(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildPhotos(null, orderBy);
		}
		public CachedSqlSelect<Photo> ChildPhotos(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<Photo>
			(
				new Children<Photo>
				(
					TablesEnum.Article, 
					this.K, 
					TablesEnum.Photo, 
					dr => 
					{ 
						Photo newPhoto = new Photo(); 
						newPhoto.Initialise(dr); 
						return newPhoto;
					},
					"71653456",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<Thread> ChildThreads()
		{
			return this.ChildThreads(null, null);
		}
		public CachedSqlSelect<Thread> ChildThreads(Q where)
		{
			return this.ChildThreads(where, null);
		}
		public CachedSqlSelect<Thread> ChildThreads(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildThreads(null, orderBy);
		}
		public CachedSqlSelect<Thread> ChildThreads(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<Thread>
			(
				new Children<Thread>
				(
					TablesEnum.Article, 
					this.K, 
					TablesEnum.Thread, 
					dr => 
					{ 
						Thread newThread = new Thread(); 
						newThread.Initialise(dr); 
						return newThread;
					},
					"4576C3F1",
					where,
					orderBy
				)
			);
		}
		}

	#region ArticleDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region ArticleDataHolder
	/// <summary>
	/// An articleDataHolder
	/// </summary>
	[Serializable]
	public partial class ArticleDataHolder : DataHolder<Article>
	{
		Article dataHolder;
		[NonSerializedAttribute] Article bob;

		public ArticleDataHolder()
		{
			this.dataHolder = new Article();
		}
		
		void CopyValues(Article source, Article destination)
		{
			destination[Bobs.Article.Columns.K] = source[Bobs.Article.Columns.K];
			destination[Bobs.Article.Columns.Title] = source[Bobs.Article.Columns.Title];
			destination[Bobs.Article.Columns.Summary] = source[Bobs.Article.Columns.Summary];
			destination[Bobs.Article.Columns.Pic] = source[Bobs.Article.Columns.Pic];
			destination[Bobs.Article.Columns.OwnerUsrK] = source[Bobs.Article.Columns.OwnerUsrK];
			destination[Bobs.Article.Columns.AddedDateTime] = source[Bobs.Article.Columns.AddedDateTime];
			destination[Bobs.Article.Columns.Status] = source[Bobs.Article.Columns.Status];
			destination[Bobs.Article.Columns.EnabledDateTime] = source[Bobs.Article.Columns.EnabledDateTime];
			destination[Bobs.Article.Columns.EnabledUsrK] = source[Bobs.Article.Columns.EnabledUsrK];
			destination[Bobs.Article.Columns.Relevance] = source[Bobs.Article.Columns.Relevance];
			destination[Bobs.Article.Columns.ParentObjectType] = source[Bobs.Article.Columns.ParentObjectType];
			destination[Bobs.Article.Columns.ParentObjectK] = source[Bobs.Article.Columns.ParentObjectK];
			destination[Bobs.Article.Columns.EventK] = source[Bobs.Article.Columns.EventK];
			destination[Bobs.Article.Columns.VenueK] = source[Bobs.Article.Columns.VenueK];
			destination[Bobs.Article.Columns.PlaceK] = source[Bobs.Article.Columns.PlaceK];
			destination[Bobs.Article.Columns.CountryK] = source[Bobs.Article.Columns.CountryK];
			destination[Bobs.Article.Columns.HasSingleThread] = source[Bobs.Article.Columns.HasSingleThread];
			destination[Bobs.Article.Columns.AdminNote] = source[Bobs.Article.Columns.AdminNote];
			destination[Bobs.Article.Columns.Views] = source[Bobs.Article.Columns.Views];
			destination[Bobs.Article.Columns.IsWorldwide] = source[Bobs.Article.Columns.IsWorldwide];
			destination[Bobs.Article.Columns.TotalComments] = source[Bobs.Article.Columns.TotalComments];
			destination[Bobs.Article.Columns.LastPost] = source[Bobs.Article.Columns.LastPost];
			destination[Bobs.Article.Columns.AverageCommentDateTime] = source[Bobs.Article.Columns.AverageCommentDateTime];
			destination[Bobs.Article.Columns.OverrideContents] = source[Bobs.Article.Columns.OverrideContents];
			destination[Bobs.Article.Columns.HideOwner] = source[Bobs.Article.Columns.HideOwner];
			destination[Bobs.Article.Columns.PicMiscK] = source[Bobs.Article.Columns.PicMiscK];
			destination[Bobs.Article.Columns.PicState] = source[Bobs.Article.Columns.PicState];
			destination[Bobs.Article.Columns.PicPhotoK] = source[Bobs.Article.Columns.PicPhotoK];
			destination[Bobs.Article.Columns.UrlFragment] = source[Bobs.Article.Columns.UrlFragment];
			destination[Bobs.Article.Columns.ThreadK] = source[Bobs.Article.Columns.ThreadK];
			destination[Bobs.Article.Columns.TwitterHeadline] = source[Bobs.Article.Columns.TwitterHeadline];
			destination[Bobs.Article.Columns.IsMixmagNews] = source[Bobs.Article.Columns.IsMixmagNews];
			destination[Bobs.Article.Columns.IsExtendedDisplay] = source[Bobs.Article.Columns.IsExtendedDisplay];
			destination[Bobs.Article.Columns.MixmagSections] = source[Bobs.Article.Columns.MixmagSections];
			destination[Bobs.Article.Columns.ShowAboveFoldOnFrontPage] = source[Bobs.Article.Columns.ShowAboveFoldOnFrontPage];
		}
		
		public ArticleDataHolder(Article bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// The primary key
		/// </summary>
		public int K
		{
			get { return dataHolder.K; }
			set { this.dataHolder.K = value; }
		}
		/// <summary>
		/// The title of the article. Less that 100 characters.
		/// </summary>
		public string Title
		{
			get { return dataHolder.Title; }
			set { this.dataHolder.Title = value; }
		}
		/// <summary>
		/// Summary - couple of sentances about the article. Less than 30 words.
		/// </summary>
		public string Summary
		{
			get { return dataHolder.Summary; }
			set { this.dataHolder.Summary = value; }
		}
		/// <summary>
		/// Cropped image 100*100
		/// </summary>
		public Guid Pic
		{
			get { return dataHolder.Pic; }
			set { this.dataHolder.Pic = value; }
		}
		/// <summary>
		/// Owner
		/// </summary>
		public int OwnerUsrK
		{
			get { return dataHolder.OwnerUsrK; }
			set { this.dataHolder.OwnerUsrK = value; }
		}
		/// <summary>
		/// When the artical was originally added
		/// </summary>
		public DateTime AddedDateTime
		{
			get { return dataHolder.AddedDateTime; }
			set { this.dataHolder.AddedDateTime = value; }
		}
		/// <summary>
		/// Status - New, Edit, Enabled, Disabled
		/// </summary>
		public int Status
		{
			get { return dataHolder.Status; }
			set { this.dataHolder.Status = value; }
		}
		/// <summary>
		/// When the article was marked as enabled
		/// </summary>
		public DateTime EnabledDateTime
		{
			get { return dataHolder.EnabledDateTime; }
			set { this.dataHolder.EnabledDateTime = value; }
		}
		/// <summary>
		/// Who marked the article as enabled?
		/// </summary>
		public int EnabledUsrK
		{
			get { return dataHolder.EnabledUsrK; }
			set { this.dataHolder.EnabledUsrK = value; }
		}
		/// <summary>
		/// What's the geographic relevance? 0=All, 1=Country, 2=Region, 3=Place, 4=Venue, 5=Event
		/// </summary>
		public int Relevance
		{
			get { return dataHolder.Relevance; }
			set { this.dataHolder.Relevance = value; }
		}
		/// <summary>
		/// What's the type of the parent object?
		/// </summary>
		public int ParentObjectType
		{
			get { return dataHolder.ParentObjectType; }
			set { this.dataHolder.ParentObjectType = value; }
		}
		/// <summary>
		/// What's the key of the parent object?
		/// </summary>
		public int ParentObjectK
		{
			get { return dataHolder.ParentObjectK; }
			set { this.dataHolder.ParentObjectK = value; }
		}
		/// <summary>
		/// Event that this article is relevant to
		/// </summary>
		public int EventK
		{
			get { return dataHolder.EventK; }
			set { this.dataHolder.EventK = value; }
		}
		/// <summary>
		/// Venue that this article is relevant to
		/// </summary>
		public int VenueK
		{
			get { return dataHolder.VenueK; }
			set { this.dataHolder.VenueK = value; }
		}
		/// <summary>
		/// Place that this article is relevant to
		/// </summary>
		public int PlaceK
		{
			get { return dataHolder.PlaceK; }
			set { this.dataHolder.PlaceK = value; }
		}
		/// <summary>
		/// Place that this article is relevant to
		/// </summary>
		public int CountryK
		{
			get { return dataHolder.CountryK; }
			set { this.dataHolder.CountryK = value; }
		}
		/// <summary>
		/// Does the article have a single discussion thread, or does each paragraph have it's own thread?
		/// </summary>
		public bool HasSingleThread
		{
			get { return dataHolder.HasSingleThread; }
			set { this.dataHolder.HasSingleThread = value; }
		}
		/// <summary>
		/// Admin note, to be edited by admins at Edit stage, and visible to the author
		/// </summary>
		public string AdminNote
		{
			get { return dataHolder.AdminNote; }
			set { this.dataHolder.AdminNote = value; }
		}
		/// <summary>
		/// Total number of views the article has had
		/// </summary>
		public int Views
		{
			get { return dataHolder.Views; }
			set { this.dataHolder.Views = value; }
		}
		/// <summary>
		/// Does the artical have worldwide relevance?
		/// </summary>
		public bool IsWorldwide
		{
			get { return dataHolder.IsWorldwide; }
			set { this.dataHolder.IsWorldwide = value; }
		}
		/// <summary>
		/// Total number of comments in all threads in this article
		/// </summary>
		public int TotalComments
		{
			get { return dataHolder.TotalComments; }
			set { this.dataHolder.TotalComments = value; }
		}
		/// <summary>
		/// DateTime of thge last comments posted in this article
		/// </summary>
		public DateTime LastPost
		{
			get { return dataHolder.LastPost; }
			set { this.dataHolder.LastPost = value; }
		}
		/// <summary>
		/// The average date/time of all the comments posted ion this article
		/// </summary>
		public DateTime AverageCommentDateTime
		{
			get { return dataHolder.AverageCommentDateTime; }
			set { this.dataHolder.AverageCommentDateTime = value; }
		}
		/// <summary>
		/// Filename of the user control that will be displayed instead of the paragraphs.
		/// </summary>
		public string OverrideContents
		{
			get { return dataHolder.OverrideContents; }
			set { this.dataHolder.OverrideContents = value; }
		}
		/// <summary>
		/// Shall we hide the owner image?
		/// </summary>
		public bool HideOwner
		{
			get { return dataHolder.HideOwner; }
			set { this.dataHolder.HideOwner = value; }
		}
		/// <summary>
		/// The Misc that was used to create the Pic.
		/// </summary>
		public int PicMiscK
		{
			get { return dataHolder.PicMiscK; }
			set { this.dataHolder.PicMiscK = value; }
		}
		/// <summary>
		/// State var used to reconstruct cropper when re-cropping
		/// </summary>
		public string PicState
		{
			get { return dataHolder.PicState; }
			set { this.dataHolder.PicState = value; }
		}
		/// <summary>
		/// The Photo that was used to create the Pic.
		/// </summary>
		public int PicPhotoK
		{
			get { return dataHolder.PicPhotoK; }
			set { this.dataHolder.PicPhotoK = value; }
		}
		/// <summary>
		/// The url fragment - so that the url can be generated without accessing parent database records
		/// </summary>
		public string UrlFragment
		{
			get { return dataHolder.UrlFragment; }
			set { this.dataHolder.UrlFragment = value; }
		}
		/// <summary>
		/// Main public thread (first one started)
		/// </summary>
		public int? ThreadK
		{
			get { return dataHolder.ThreadK; }
			set { this.dataHolder.ThreadK = value; }
		}
		/// <summary>
		/// Headline of the article for sending to Twitter
		/// </summary>
		public string TwitterHeadline
		{
			get { return dataHolder.TwitterHeadline; }
			set { this.dataHolder.TwitterHeadline = value; }
		}
		/// <summary>
		/// Is this article displayed in the Mixmag news section?
		/// </summary>
		public bool IsMixmagNews
		{
			get { return dataHolder.IsMixmagNews; }
			set { this.dataHolder.IsMixmagNews = value; }
		}
		/// <summary>
		/// Is this article displayed using the first para content on the front page?
		/// </summary>
		public bool IsExtendedDisplay
		{
			get { return dataHolder.IsExtendedDisplay; }
			set { this.dataHolder.IsExtendedDisplay = value; }
		}
		/// <summary>
		/// Which Mixmag sections is this article in?
		/// </summary>
		public int MixmagSections
		{
			get { return dataHolder.MixmagSections; }
			set { this.dataHolder.MixmagSections = value; }
		}
		/// <summary>
		/// Do we show this article above the fold on the front page?
		/// </summary>
		public bool ShowAboveFoldOnFrontPage
		{
			get { return dataHolder.ShowAboveFoldOnFrontPage; }
			set { this.dataHolder.ShowAboveFoldOnFrontPage = value; }
		}
		#endregion
		public Article Article
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new Article(K);
					}
					else
					{
						bob = new Article();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region ArticleSet
	public partial class ArticleSet : BobSet, IEnumerable<Article>
	{
		public ArticleSet(Query query) : base(query) { }

		public Article this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new Article(this);
					((Article)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (Article)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new ArticleTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<Article> ToList()
		{
			List<Article> list = new List<Article>();
			foreach (Article item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<Article> Members

		public new IEnumerator<Article> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region ArticleTableDef
	public class ArticleTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "Article";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "D389F153";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return Article.GetColumnName((Article.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.Article;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return true;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return Article.Columns.K;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			Article.Columns c = (Article.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case Article.Columns.K: ColumnStore[i] = new ColumnDef(c, "K", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey | SqlColumnFlag.AutoNumber, null); break;
					case Article.Columns.Title: ColumnStore[i] = new ColumnDef(c, "Title", SqlDbType.VarChar, 100, ""); break;
					case Article.Columns.Summary: ColumnStore[i] = new ColumnDef(c, "Summary", SqlDbType.Text, ""); break;
					case Article.Columns.Pic: ColumnStore[i] = new ColumnDef(c, "Pic", SqlDbType.UniqueIdentifier, Guid.Empty); break;
					case Article.Columns.OwnerUsrK: ColumnStore[i] = new ColumnDef(c, "OwnerUsrK", SqlDbType.Int, 0); break;
					case Article.Columns.AddedDateTime: ColumnStore[i] = new ColumnDef(c, "AddedDateTime", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case Article.Columns.Status: ColumnStore[i] = new ColumnDef(c, "Status", SqlDbType.Int, 0); break;
					case Article.Columns.EnabledDateTime: ColumnStore[i] = new ColumnDef(c, "EnabledDateTime", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case Article.Columns.EnabledUsrK: ColumnStore[i] = new ColumnDef(c, "EnabledUsrK", SqlDbType.Int, 0); break;
					case Article.Columns.Relevance: ColumnStore[i] = new ColumnDef(c, "Relevance", SqlDbType.Int, 0); break;
					case Article.Columns.ParentObjectType: ColumnStore[i] = new ColumnDef(c, "ParentObjectType", SqlDbType.Int, 0); break;
					case Article.Columns.ParentObjectK: ColumnStore[i] = new ColumnDef(c, "ParentObjectK", SqlDbType.Int, 0); break;
					case Article.Columns.EventK: ColumnStore[i] = new ColumnDef(c, "EventK", SqlDbType.Int, 0); break;
					case Article.Columns.VenueK: ColumnStore[i] = new ColumnDef(c, "VenueK", SqlDbType.Int, 0); break;
					case Article.Columns.PlaceK: ColumnStore[i] = new ColumnDef(c, "PlaceK", SqlDbType.Int, 0); break;
					case Article.Columns.CountryK: ColumnStore[i] = new ColumnDef(c, "CountryK", SqlDbType.Int, 0); break;
					case Article.Columns.HasSingleThread: ColumnStore[i] = new ColumnDef(c, "HasSingleThread", SqlDbType.Bit, false); break;
					case Article.Columns.AdminNote: ColumnStore[i] = new ColumnDef(c, "AdminNote", SqlDbType.Text, ""); break;
					case Article.Columns.Views: ColumnStore[i] = new ColumnDef(c, "Views", SqlDbType.Int, 0); break;
					case Article.Columns.IsWorldwide: ColumnStore[i] = new ColumnDef(c, "IsWorldwide", SqlDbType.Bit, false); break;
					case Article.Columns.TotalComments: ColumnStore[i] = new ColumnDef(c, "TotalComments", SqlDbType.Int, 0); break;
					case Article.Columns.LastPost: ColumnStore[i] = new ColumnDef(c, "LastPost", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case Article.Columns.AverageCommentDateTime: ColumnStore[i] = new ColumnDef(c, "AverageCommentDateTime", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case Article.Columns.OverrideContents: ColumnStore[i] = new ColumnDef(c, "OverrideContents", SqlDbType.VarChar, 200, ""); break;
					case Article.Columns.HideOwner: ColumnStore[i] = new ColumnDef(c, "HideOwner", SqlDbType.Bit, false); break;
					case Article.Columns.PicMiscK: ColumnStore[i] = new ColumnDef(c, "PicMiscK", SqlDbType.Int, 0); break;
					case Article.Columns.PicState: ColumnStore[i] = new ColumnDef(c, "PicState", SqlDbType.VarChar, 100, ""); break;
					case Article.Columns.PicPhotoK: ColumnStore[i] = new ColumnDef(c, "PicPhotoK", SqlDbType.Int, 0); break;
					case Article.Columns.UrlFragment: ColumnStore[i] = new ColumnDef(c, "UrlFragment", SqlDbType.VarChar, 255, ""); break;
					case Article.Columns.ThreadK: ColumnStore[i] = new ColumnDef(c, "ThreadK", SqlDbType.Int, null); break;
					case Article.Columns.TwitterHeadline: ColumnStore[i] = new ColumnDef(c, "TwitterHeadline", SqlDbType.VarChar, 140, null); break;
					case Article.Columns.IsMixmagNews: ColumnStore[i] = new ColumnDef(c, "IsMixmagNews", SqlDbType.Bit, false); break;
					case Article.Columns.IsExtendedDisplay: ColumnStore[i] = new ColumnDef(c, "IsExtendedDisplay", SqlDbType.Bit, false); break;
					case Article.Columns.MixmagSections: ColumnStore[i] = new ColumnDef(c, "MixmagSections", SqlDbType.Int, 0); break;
					case Article.Columns.ShowAboveFoldOnFrontPage: ColumnStore[i] = new ColumnDef(c, "ShowAboveFoldOnFrontPage", SqlDbType.Bit, false); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(Article.Columns.K);
						InitColumn(Article.Columns.Title);
						InitColumn(Article.Columns.Summary);
						InitColumn(Article.Columns.Pic);
						InitColumn(Article.Columns.OwnerUsrK);
						InitColumn(Article.Columns.AddedDateTime);
						InitColumn(Article.Columns.Status);
						InitColumn(Article.Columns.EnabledDateTime);
						InitColumn(Article.Columns.EnabledUsrK);
						InitColumn(Article.Columns.Relevance);
						InitColumn(Article.Columns.ParentObjectType);
						InitColumn(Article.Columns.ParentObjectK);
						InitColumn(Article.Columns.EventK);
						InitColumn(Article.Columns.VenueK);
						InitColumn(Article.Columns.PlaceK);
						InitColumn(Article.Columns.CountryK);
						InitColumn(Article.Columns.HasSingleThread);
						InitColumn(Article.Columns.AdminNote);
						InitColumn(Article.Columns.Views);
						InitColumn(Article.Columns.IsWorldwide);
						InitColumn(Article.Columns.TotalComments);
						InitColumn(Article.Columns.LastPost);
						InitColumn(Article.Columns.AverageCommentDateTime);
						InitColumn(Article.Columns.OverrideContents);
						InitColumn(Article.Columns.HideOwner);
						InitColumn(Article.Columns.PicMiscK);
						InitColumn(Article.Columns.PicState);
						InitColumn(Article.Columns.PicPhotoK);
						InitColumn(Article.Columns.UrlFragment);
						InitColumn(Article.Columns.ThreadK);
						InitColumn(Article.Columns.TwitterHeadline);
						InitColumn(Article.Columns.IsMixmagNews);
						InitColumn(Article.Columns.IsExtendedDisplay);
						InitColumn(Article.Columns.MixmagSections);
						InitColumn(Article.Columns.ShowAboveFoldOnFrontPage);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region BacardiEmail
	/// <summary>
	/// Emails gathered for Bacardi
	/// </summary>
	public partial class BacardiEmail : Model.Entities.BacardiEmail, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// Primary K
			/// </summary>
			K = 0x00040001,
			/// <summary>
			/// Email
			/// </summary>
			Email = 0x00040002,
		}
		#endregion
		public static string GetColumnName(BacardiEmail.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case BacardiEmail.Columns.K: return "K";
						case BacardiEmail.Columns.Email: return "Email";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(BacardiEmail.Columns columnEnum)
		{
			switch (columnEnum)
			{
						default: return false;
			}
		}


		#region Common
 
		public BacardiEmail(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);  }
		public BacardiEmail()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.BacardiEmail);
		}
		public BacardiEmail(BobSet bs)
		{
			this.Bob = new Bob(bs.Table, bs);
		}
		public BacardiEmail(int BacardiEmailK, IBob Parent, object Column)
			: this()
		{
			Bob.GetBobFromParent(BacardiEmailK, Parent.Bob, Column, TablesEnum.BacardiEmail);
		}
		public BacardiEmail(int BacardiEmailK)
			: this()
		{
			Bob.GetBobFromPrimaryKey(BacardiEmailK);
		}
		#endregion

	}
	#endregion
	#region BacardiEmailTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region BacardiEmail
	/// <summary>
	/// Emails gathered for Bacardi
	/// </summary>
	[Serializable]
	public partial class BacardiEmail 
	{
		
		#region Simple members
		/// <summary>
		/// Primary K
		/// </summary>
		public override int K
		{
			get { return (int)this[BacardiEmail.Columns.K] as int? ?? 0 ; }
			set { this[BacardiEmail.Columns.K] = value; }
		}
		/// <summary>
		/// Email
		/// </summary>
		public override string Email
		{
			get { return (string)this[BacardiEmail.Columns.Email]; }
			set { this[BacardiEmail.Columns.Email] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildBacardiEmails
	{
		CachedSqlSelect<BacardiEmail> ChildBacardiEmails();
		CachedSqlSelect<BacardiEmail> ChildBacardiEmails(Q where);
		CachedSqlSelect<BacardiEmail> ChildBacardiEmails(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<BacardiEmail> ChildBacardiEmails(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class BacardiEmail 
		{
		}

	#region BacardiEmailDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region BacardiEmailDataHolder
	/// <summary>
	/// Emails gathered for BacardiDataHolder
	/// </summary>
	[Serializable]
	public partial class BacardiEmailDataHolder : DataHolder<BacardiEmail>
	{
		BacardiEmail dataHolder;
		[NonSerializedAttribute] BacardiEmail bob;

		public BacardiEmailDataHolder()
		{
			this.dataHolder = new BacardiEmail();
		}
		
		void CopyValues(BacardiEmail source, BacardiEmail destination)
		{
			destination[Bobs.BacardiEmail.Columns.K] = source[Bobs.BacardiEmail.Columns.K];
			destination[Bobs.BacardiEmail.Columns.Email] = source[Bobs.BacardiEmail.Columns.Email];
		}
		
		public BacardiEmailDataHolder(BacardiEmail bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// Primary K
		/// </summary>
		public int K
		{
			get { return dataHolder.K; }
			set { this.dataHolder.K = value; }
		}
		/// <summary>
		/// Email
		/// </summary>
		public string Email
		{
			get { return dataHolder.Email; }
			set { this.dataHolder.Email = value; }
		}
		#endregion
		public BacardiEmail BacardiEmail
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new BacardiEmail(K);
					}
					else
					{
						bob = new BacardiEmail();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region BacardiEmailSet
	public partial class BacardiEmailSet : BobSet, IEnumerable<BacardiEmail>
	{
		public BacardiEmailSet(Query query) : base(query) { }

		public BacardiEmail this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new BacardiEmail(this);
					((BacardiEmail)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (BacardiEmail)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new BacardiEmailTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<BacardiEmail> ToList()
		{
			List<BacardiEmail> list = new List<BacardiEmail>();
			foreach (BacardiEmail item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<BacardiEmail> Members

		public new IEnumerator<BacardiEmail> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region BacardiEmailTableDef
	public class BacardiEmailTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "BacardiEmail";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "6407625D";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return BacardiEmail.GetColumnName((BacardiEmail.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.BacardiEmail;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return true;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return BacardiEmail.Columns.K;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			BacardiEmail.Columns c = (BacardiEmail.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case BacardiEmail.Columns.K: ColumnStore[i] = new ColumnDef(c, "K", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey | SqlColumnFlag.AutoNumber, null); break;
					case BacardiEmail.Columns.Email: ColumnStore[i] = new ColumnDef(c, "Email", SqlDbType.VarChar, 100, ""); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(BacardiEmail.Columns.K);
						InitColumn(BacardiEmail.Columns.Email);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region BankExport
	/// <summary>
	/// Exports to bank for transferring funds
	/// </summary>
	public partial class BankExport : Model.Entities.BankExport, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// Primary Key
			/// </summary>
			K = 0x00050001,
			/// <summary>
			/// Date when it was added
			/// </summary>
			AddedDateTime = 0x00050002,
			/// <summary>
			/// Date when it was output was exported
			/// </summary>
			OutputDateTime = 0x00050003,
			/// <summary>
			/// Date when it will be processed
			/// </summary>
			ProcessingDateTime = 0x00050004,
			/// <summary>
			/// Transfer key reference
			/// </summary>
			TransferK = 0x00050005,
			/// <summary>
			/// Promoter key reference
			/// </summary>
			PromoterK = 0x00050006,
			/// <summary>
			/// Type enum: BACS = 1, Internal = 2
			/// </summary>
			Type = 0x00050007,
			/// <summary>
			/// Amount of transaction
			/// </summary>
			Amount = 0x00050008,
			/// <summary>
			/// Unique batch reference #
			/// </summary>
			BatchRef = 0x00050009,
			/// <summary>
			/// Status enum: Added, AwaitingConfirmation, Successful, Failed, Cancelled.
			/// </summary>
			Status = 0x0005000a,
			/// <summary>
			/// Beneficiary's bank name
			/// </summary>
			BankName = 0x0005000b,
			/// <summary>
			/// Beneficiary's bank account sort code
			/// </summary>
			BankAccountSortCode = 0x0005000c,
			/// <summary>
			/// Beneficiary's bank account number
			/// </summary>
			BankAccountNumber = 0x0005000d,
			/// <summary>
			/// Details of bank export for reference
			/// </summary>
			Details = 0x0005000e,
			/// <summary>
			/// Date of transaction that it is referencing
			/// </summary>
			ReferenceDateTime = 0x0005000f,
		}
		#endregion
		public static string GetColumnName(BankExport.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case BankExport.Columns.K: return "K";
						case BankExport.Columns.AddedDateTime: return "AddedDateTime";
						case BankExport.Columns.OutputDateTime: return "OutputDateTime";
						case BankExport.Columns.ProcessingDateTime: return "ProcessingDateTime";
						case BankExport.Columns.TransferK: return "TransferK";
						case BankExport.Columns.PromoterK: return "PromoterK";
						case BankExport.Columns.Type: return "Type";
						case BankExport.Columns.Amount: return "Amount";
						case BankExport.Columns.BatchRef: return "BatchRef";
						case BankExport.Columns.Status: return "Status";
						case BankExport.Columns.BankName: return "BankName";
						case BankExport.Columns.BankAccountSortCode: return "BankAccountSortCode";
						case BankExport.Columns.BankAccountNumber: return "BankAccountNumber";
						case BankExport.Columns.Details: return "Details";
						case BankExport.Columns.ReferenceDateTime: return "ReferenceDateTime";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(BankExport.Columns columnEnum)
		{
			switch (columnEnum)
			{
																			default: return false;
			}
		}


		#region Common
 
		public BankExport(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);  }
		public BankExport()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.BankExport);
		}
		public BankExport(BobSet bs)
		{
			this.Bob = new Bob(bs.Table, bs);
		}
		public BankExport(int BankExportK, IBob Parent, object Column)
			: this()
		{
			Bob.GetBobFromParent(BankExportK, Parent.Bob, Column, TablesEnum.BankExport);
		}
		public BankExport(int BankExportK)
			: this()
		{
			Bob.GetBobFromPrimaryKey(BankExportK);
		}
		#endregion

	}
	#endregion
	#region BankExportTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region BankExport
	/// <summary>
	/// Exports to bank for transferring funds
	/// </summary>
	[Serializable]
	public partial class BankExport 
	{
		
		#region Simple members
		/// <summary>
		/// Primary Key
		/// </summary>
		public override int K
		{
			get { return (int)this[BankExport.Columns.K] as int? ?? 0 ; }
			set { this[BankExport.Columns.K] = value; }
		}
		/// <summary>
		/// Date when it was added
		/// </summary>
		public override DateTime AddedDateTime
		{
			get { return (DateTime)this[BankExport.Columns.AddedDateTime]; }
			set { this[BankExport.Columns.AddedDateTime] = value; }
		}
		/// <summary>
		/// Date when it was output was exported
		/// </summary>
		public override DateTime OutputDateTime
		{
			get { return (DateTime)this[BankExport.Columns.OutputDateTime]; }
			set { this[BankExport.Columns.OutputDateTime] = value; }
		}
		/// <summary>
		/// Date when it will be processed
		/// </summary>
		public override DateTime ProcessingDateTime
		{
			get { return (DateTime)this[BankExport.Columns.ProcessingDateTime]; }
			set { this[BankExport.Columns.ProcessingDateTime] = value; }
		}
		/// <summary>
		/// Transfer key reference
		/// </summary>
		public override int TransferK
		{
			get { return (int)this[BankExport.Columns.TransferK]; }
			set { this[BankExport.Columns.TransferK] = value; }
		}
		/// <summary>
		/// Promoter key reference
		/// </summary>
		public override int PromoterK
		{
			get { return (int)this[BankExport.Columns.PromoterK]; }
			set { this[BankExport.Columns.PromoterK] = value; }
		}
		/// <summary>
		/// Type enum: BACS = 1, Internal = 2
		/// </summary>
		public override int Type
		{
			get { return (int)this[BankExport.Columns.Type]; }
			set { this[BankExport.Columns.Type] = value; }
		}
		/// <summary>
		/// Amount of transaction
		/// </summary>
		public override decimal Amount
		{
			get { return (decimal)this[BankExport.Columns.Amount]; }
			set { this[BankExport.Columns.Amount] = value; }
		}
		/// <summary>
		/// Unique batch reference #
		/// </summary>
		public override string BatchRef
		{
			get { return (string)this[BankExport.Columns.BatchRef]; }
			set { this[BankExport.Columns.BatchRef] = value; }
		}
		/// <summary>
		/// Status enum: Added, AwaitingConfirmation, Successful, Failed, Cancelled.
		/// </summary>
		public override int Status
		{
			get { return (int)this[BankExport.Columns.Status]; }
			set { this[BankExport.Columns.Status] = value; }
		}
		/// <summary>
		/// Beneficiary's bank name
		/// </summary>
		public override string BankName
		{
			get { return (string)this[BankExport.Columns.BankName]; }
			set { this[BankExport.Columns.BankName] = value; }
		}
		/// <summary>
		/// Beneficiary's bank account sort code
		/// </summary>
		public override string BankAccountSortCode
		{
			get { return (string)this[BankExport.Columns.BankAccountSortCode]; }
			set { this[BankExport.Columns.BankAccountSortCode] = value; }
		}
		/// <summary>
		/// Beneficiary's bank account number
		/// </summary>
		public override string BankAccountNumber
		{
			get { return (string)this[BankExport.Columns.BankAccountNumber]; }
			set { this[BankExport.Columns.BankAccountNumber] = value; }
		}
		/// <summary>
		/// Details of bank export for reference
		/// </summary>
		public override string Details
		{
			get { return (string)this[BankExport.Columns.Details]; }
			set { this[BankExport.Columns.Details] = value; }
		}
		/// <summary>
		/// Date of transaction that it is referencing
		/// </summary>
		public override DateTime ReferenceDateTime
		{
			get { return (DateTime)this[BankExport.Columns.ReferenceDateTime]; }
			set { this[BankExport.Columns.ReferenceDateTime] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildBankExports
	{
		CachedSqlSelect<BankExport> ChildBankExports();
		CachedSqlSelect<BankExport> ChildBankExports(Q where);
		CachedSqlSelect<BankExport> ChildBankExports(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<BankExport> ChildBankExports(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class BankExport 
		{
		}

	#region BankExportDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region BankExportDataHolder
	/// <summary>
	/// Exports to bank for transferring fundsDataHolder
	/// </summary>
	[Serializable]
	public partial class BankExportDataHolder : DataHolder<BankExport>
	{
		BankExport dataHolder;
		[NonSerializedAttribute] BankExport bob;

		public BankExportDataHolder()
		{
			this.dataHolder = new BankExport();
		}
		
		void CopyValues(BankExport source, BankExport destination)
		{
			destination[Bobs.BankExport.Columns.K] = source[Bobs.BankExport.Columns.K];
			destination[Bobs.BankExport.Columns.AddedDateTime] = source[Bobs.BankExport.Columns.AddedDateTime];
			destination[Bobs.BankExport.Columns.OutputDateTime] = source[Bobs.BankExport.Columns.OutputDateTime];
			destination[Bobs.BankExport.Columns.ProcessingDateTime] = source[Bobs.BankExport.Columns.ProcessingDateTime];
			destination[Bobs.BankExport.Columns.TransferK] = source[Bobs.BankExport.Columns.TransferK];
			destination[Bobs.BankExport.Columns.PromoterK] = source[Bobs.BankExport.Columns.PromoterK];
			destination[Bobs.BankExport.Columns.Type] = source[Bobs.BankExport.Columns.Type];
			destination[Bobs.BankExport.Columns.Amount] = source[Bobs.BankExport.Columns.Amount];
			destination[Bobs.BankExport.Columns.BatchRef] = source[Bobs.BankExport.Columns.BatchRef];
			destination[Bobs.BankExport.Columns.Status] = source[Bobs.BankExport.Columns.Status];
			destination[Bobs.BankExport.Columns.BankName] = source[Bobs.BankExport.Columns.BankName];
			destination[Bobs.BankExport.Columns.BankAccountSortCode] = source[Bobs.BankExport.Columns.BankAccountSortCode];
			destination[Bobs.BankExport.Columns.BankAccountNumber] = source[Bobs.BankExport.Columns.BankAccountNumber];
			destination[Bobs.BankExport.Columns.Details] = source[Bobs.BankExport.Columns.Details];
			destination[Bobs.BankExport.Columns.ReferenceDateTime] = source[Bobs.BankExport.Columns.ReferenceDateTime];
		}
		
		public BankExportDataHolder(BankExport bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// Primary Key
		/// </summary>
		public int K
		{
			get { return dataHolder.K; }
			set { this.dataHolder.K = value; }
		}
		/// <summary>
		/// Date when it was added
		/// </summary>
		public DateTime AddedDateTime
		{
			get { return dataHolder.AddedDateTime; }
			set { this.dataHolder.AddedDateTime = value; }
		}
		/// <summary>
		/// Date when it was output was exported
		/// </summary>
		public DateTime OutputDateTime
		{
			get { return dataHolder.OutputDateTime; }
			set { this.dataHolder.OutputDateTime = value; }
		}
		/// <summary>
		/// Date when it will be processed
		/// </summary>
		public DateTime ProcessingDateTime
		{
			get { return dataHolder.ProcessingDateTime; }
			set { this.dataHolder.ProcessingDateTime = value; }
		}
		/// <summary>
		/// Transfer key reference
		/// </summary>
		public int TransferK
		{
			get { return dataHolder.TransferK; }
			set { this.dataHolder.TransferK = value; }
		}
		/// <summary>
		/// Promoter key reference
		/// </summary>
		public int PromoterK
		{
			get { return dataHolder.PromoterK; }
			set { this.dataHolder.PromoterK = value; }
		}
		/// <summary>
		/// Type enum: BACS = 1, Internal = 2
		/// </summary>
		public int Type
		{
			get { return dataHolder.Type; }
			set { this.dataHolder.Type = value; }
		}
		/// <summary>
		/// Amount of transaction
		/// </summary>
		public decimal Amount
		{
			get { return dataHolder.Amount; }
			set { this.dataHolder.Amount = value; }
		}
		/// <summary>
		/// Unique batch reference #
		/// </summary>
		public string BatchRef
		{
			get { return dataHolder.BatchRef; }
			set { this.dataHolder.BatchRef = value; }
		}
		/// <summary>
		/// Status enum: Added, AwaitingConfirmation, Successful, Failed, Cancelled.
		/// </summary>
		public int Status
		{
			get { return dataHolder.Status; }
			set { this.dataHolder.Status = value; }
		}
		/// <summary>
		/// Beneficiary's bank name
		/// </summary>
		public string BankName
		{
			get { return dataHolder.BankName; }
			set { this.dataHolder.BankName = value; }
		}
		/// <summary>
		/// Beneficiary's bank account sort code
		/// </summary>
		public string BankAccountSortCode
		{
			get { return dataHolder.BankAccountSortCode; }
			set { this.dataHolder.BankAccountSortCode = value; }
		}
		/// <summary>
		/// Beneficiary's bank account number
		/// </summary>
		public string BankAccountNumber
		{
			get { return dataHolder.BankAccountNumber; }
			set { this.dataHolder.BankAccountNumber = value; }
		}
		/// <summary>
		/// Details of bank export for reference
		/// </summary>
		public string Details
		{
			get { return dataHolder.Details; }
			set { this.dataHolder.Details = value; }
		}
		/// <summary>
		/// Date of transaction that it is referencing
		/// </summary>
		public DateTime ReferenceDateTime
		{
			get { return dataHolder.ReferenceDateTime; }
			set { this.dataHolder.ReferenceDateTime = value; }
		}
		#endregion
		public BankExport BankExport
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new BankExport(K);
					}
					else
					{
						bob = new BankExport();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region BankExportSet
	public partial class BankExportSet : BobSet, IEnumerable<BankExport>
	{
		public BankExportSet(Query query) : base(query) { }

		public BankExport this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new BankExport(this);
					((BankExport)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (BankExport)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new BankExportTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<BankExport> ToList()
		{
			List<BankExport> list = new List<BankExport>();
			foreach (BankExport item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<BankExport> Members

		public new IEnumerator<BankExport> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region BankExportTableDef
	public class BankExportTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "BankExport";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "9471DF4D";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return BankExport.GetColumnName((BankExport.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.BankExport;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return true;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return BankExport.Columns.K;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			BankExport.Columns c = (BankExport.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case BankExport.Columns.K: ColumnStore[i] = new ColumnDef(c, "K", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey | SqlColumnFlag.AutoNumber, null); break;
					case BankExport.Columns.AddedDateTime: ColumnStore[i] = new ColumnDef(c, "AddedDateTime", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case BankExport.Columns.OutputDateTime: ColumnStore[i] = new ColumnDef(c, "OutputDateTime", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case BankExport.Columns.ProcessingDateTime: ColumnStore[i] = new ColumnDef(c, "ProcessingDateTime", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case BankExport.Columns.TransferK: ColumnStore[i] = new ColumnDef(c, "TransferK", SqlDbType.Int, 0); break;
					case BankExport.Columns.PromoterK: ColumnStore[i] = new ColumnDef(c, "PromoterK", SqlDbType.Int, 0); break;
					case BankExport.Columns.Type: ColumnStore[i] = new ColumnDef(c, "Type", SqlDbType.Int, 0); break;
					case BankExport.Columns.Amount: ColumnStore[i] = new ColumnDef(c, "Amount", SqlDbType.Decimal, 20, 0m); break;
					case BankExport.Columns.BatchRef: ColumnStore[i] = new ColumnDef(c, "BatchRef", SqlDbType.VarChar, 18, ""); break;
					case BankExport.Columns.Status: ColumnStore[i] = new ColumnDef(c, "Status", SqlDbType.Int, 0); break;
					case BankExport.Columns.BankName: ColumnStore[i] = new ColumnDef(c, "BankName", SqlDbType.VarChar, 35, ""); break;
					case BankExport.Columns.BankAccountSortCode: ColumnStore[i] = new ColumnDef(c, "BankAccountSortCode", SqlDbType.VarChar, 20, ""); break;
					case BankExport.Columns.BankAccountNumber: ColumnStore[i] = new ColumnDef(c, "BankAccountNumber", SqlDbType.VarChar, 25, ""); break;
					case BankExport.Columns.Details: ColumnStore[i] = new ColumnDef(c, "Details", SqlDbType.VarChar, 4000, ""); break;
					case BankExport.Columns.ReferenceDateTime: ColumnStore[i] = new ColumnDef(c, "ReferenceDateTime", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(BankExport.Columns.K);
						InitColumn(BankExport.Columns.AddedDateTime);
						InitColumn(BankExport.Columns.OutputDateTime);
						InitColumn(BankExport.Columns.ProcessingDateTime);
						InitColumn(BankExport.Columns.TransferK);
						InitColumn(BankExport.Columns.PromoterK);
						InitColumn(BankExport.Columns.Type);
						InitColumn(BankExport.Columns.Amount);
						InitColumn(BankExport.Columns.BatchRef);
						InitColumn(BankExport.Columns.Status);
						InitColumn(BankExport.Columns.BankName);
						InitColumn(BankExport.Columns.BankAccountSortCode);
						InitColumn(BankExport.Columns.BankAccountNumber);
						InitColumn(BankExport.Columns.Details);
						InitColumn(BankExport.Columns.ReferenceDateTime);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region Banner
	/// <summary>
	/// Advertising - includes banners, hotboxes etc.
	/// </summary>
	public partial class Banner : Model.Entities.Banner, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// The primary key
			/// </summary>
			K = 0x00060001,
			/// <summary>
			/// Description of the banner for admin etc.
			/// </summary>
			Name = 0x00060002,
			/// <summary>
			/// Date that the banners start to be displayed
			/// </summary>
			FirstDay = 0x00060003,
			/// <summary>
			/// Last day that the banners are displayed
			/// </summary>
			LastDay = 0x00060004,
			/// <summary>
			/// Links to an event if the advert is advertising an event
			/// </summary>
			EventK = 0x00060005,
			/// <summary>
			/// How the banner is rendered - 1=Auto event banner, 2=Custom auto event banner, 3=Animated gif, 4=Jpg, 5=Flash movie, 6=Custom HTML
			/// </summary>
			DisplayType = 0x00060006,
			/// <summary>
			/// The misc of the animated gif / jpg / flash movie
			/// </summary>
			MiscK = 0x00060007,
			/// <summary>
			/// The guid of the animated gif / jpg / flash movie
			/// </summary>
			MiscGuid = 0x00060008,
			/// <summary>
			/// Html to render if DisplayType = CustomHtml
			/// </summary>
			CustomHtml = 0x00060009,
			/// <summary>
			/// Xml used to customise the text of the auto event banners
			/// </summary>
			CustomXml = 0x0006000a,
			/// <summary>
			/// Position - TopBanner=1, Hotbox=2
			/// </summary>
			Position = 0x0006000b,
			/// <summary>
			/// Status of the banner: New (awaiting payment etc.) = 1, Enabled (booked, live on the site, or finished) = 2, Disabled = 3
			/// </summary>
			Status = 0x0006000c,
			/// <summary>
			/// Note visible only to admins
			/// </summary>
			AdminNote = 0x0006000d,
			/// <summary>
			/// The user that added this banner
			/// </summary>
			UsrK = 0x0006000e,
			/// <summary>
			/// The promoter that added this banner (if it's a promoter banner)
			/// </summary>
			PromoterK = 0x0006000f,
			/// <summary>
			/// The brand that this banner advertises
			/// </summary>
			BrandK = 0x00060010,
			/// <summary>
			/// The URL to link to if it's a custom URL
			/// </summary>
			LinkUrl = 0x00060011,
			/// <summary>
			/// Does this banner have target MusicTypes selected?
			/// </summary>
			IsMusicTargetted = 0x00060012,
			/// <summary>
			/// Does this banner have target Places selected?
			/// </summary>
			IsPlaceTargetted = 0x00060013,
			/// <summary>
			/// Where does the banner link to?
			/// </summary>
			LinkTarget = 0x00060014,
			/// <summary>
			/// Has admin fixed a special price on this banner?
			/// </summary>
			IsPriceFixed = 0x00060015,
			/// <summary>
			/// If IsPriceFixed=true, this is the price that will be charged. If IsBooked=true, this the price that was paid.
			/// </summary>
			PriceStored = 0x00060016,
			/// <summary>
			/// File waiting for authorisation. When it's authorised, it'll be swapped in.
			/// </summary>
			NewMiscK = 0x00060017,
			/// <summary>
			/// Customised banner - first line
			/// </summary>
			CustomiseFirstLine = 0x00060018,
			/// <summary>
			/// Customised banner - font size of first line
			/// </summary>
			CustomiseFirstLineSize = 0x00060019,
			/// <summary>
			/// Customised banner - second line
			/// </summary>
			CustomiseSecondLine = 0x0006001a,
			/// <summary>
			/// Customised banner - third line
			/// </summary>
			CustomiseThirdLine = 0x0006001b,
			/// <summary>
			/// When uploading a file for a banner - this is the K of the misc if it FAILS.
			/// </summary>
			FailedMiscK = 0x0006001c,
			/// <summary>
			/// How will the artwork be created?
			/// </summary>
			DesignType = 0x0006001d,
			/// <summary>
			/// Time stamp to record when someone is trying to purchase an IBuyable item that is linked to this Bob. No lock = DateTime.MinValue
			/// </summary>
			BuyableLockDateTime = 0x0006001e,
			/// <summary>
			/// Has the design been processed (for the invoice system)
			/// </summary>
			DesignProcessed = 0x0006001f,
			/// <summary>
			/// The maximum number of times this banner should be served to a particular website user per day. -1 means uncapped
			/// </summary>
			FrequencyCapPerIdentifierPerDay = 0x00060020,
			/// <summary>
			/// A total of all the targetting bit 0 = no targetting, otherwise is a bitwise total from BannerServer.Info.Types.TargettingBits range 0-62
			/// </summary>
			TargettingProperties0 = 0x00060021,
			/// <summary>
			/// A total of all the targetting bit 0 = no targetting, otherwise is a bitwise total from BannerServer.Info.Types.TargettingBits range 63-125
			/// </summary>
			TargettingProperties1 = 0x00060022,
			/// <summary>
			/// Last updated timestamp for cache testing
			/// </summary>
			LastTimestamp = 0x00060023,
			/// <summary>
			/// Total impressions required for this banner campaign
			/// </summary>
			TotalRequiredImpressions = 0x00060024,
			/// <summary>
			/// The K of the BannerFolder to which the banner belongs
			/// </summary>
			BannerFolderK = 0x00060025,
			/// <summary>
			/// The venue to link to
			/// </summary>
			VenueK = 0x00060026,
			/// <summary>
			/// Are automatic dates selected in the banner wizard?
			/// </summary>
			AutomaticDates = 0x00060027,
			/// <summary>
			/// The number of weeks selected in the automatic dates section of the banner wizard
			/// </summary>
			AutomaticDatesWeeks = 0x00060028,
			/// <summary>
			/// Is automatic targetting selected in the banner wizard?
			/// </summary>
			AutomaticTargetting = 0x00060029,
			/// <summary>
			/// Is one of the automatic exposure levels selected in the banner wizard?
			/// </summary>
			AutomaticExposure = 0x0006002a,
			/// <summary>
			/// The automatic exposure level that is selected in the banner wizard
			/// </summary>
			AutomaticExposureLevel = 0x0006002b,
			/// <summary>
			/// Usually true, only false if the banner has been paused or cancelled (cancelled when IsRefunded = true)
			/// </summary>
			StatusEnabled = 0x0006002c,
			/// <summary>
			/// false if the banner is new, true if it has been paid for
			/// </summary>
			StatusBooked = 0x0006002d,
			/// <summary>
			/// true if the artwork is ready, false if not
			/// </summary>
			StatusArtwork = 0x0006002e,
			/// <summary>
			/// true if campaign credits have been successfully refunded to the promoter account
			/// </summary>
			Refunded = 0x0006002f,
			/// <summary>
			/// How many credits were refunded?
			/// </summary>
			RefundedCredits = 0x00060030,
			/// <summary>
			/// Link to the CampaignCredit table for the refund
			/// </summary>
			RefundCampaignCreditK = 0x00060031,
			/// <summary>
			/// Duplicate guid used to prevent duplicates while adding
			/// </summary>
			DuplicateGuid = 0x00060032,
			/// <summary>
			/// Price in credits (either for fixed price banners, or for after banner is booked)
			/// </summary>
			PriceCreditsStored = 0x00060033,
			/// <summary>
			/// Admin override to fix discount level for price of credits for this banner
			/// </summary>
			FixedDiscount = 0x00060034,
			/// <summary>
			/// Higher priority banners will always be shown before those with lower priorities
			/// </summary>
			Priority = 0x00060035,
			/// <summary>
			/// Setting this bit ensures that this banner will be shown if suitable for request
			/// </summary>
			AlwaysShow = 0x00060036,
			/// <summary>
			/// Has this banner been cancelled?
			/// </summary>
			IsCancelled = 0x00060037,
			/// <summary>
			/// Number of seconds to display banner for when rotating banners. null indicates that the default should be used
			/// </summary>
			DisplayDuration = 0x00060038,
		}
		#endregion
		public static string GetColumnName(Banner.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case Banner.Columns.K: return "K";
						case Banner.Columns.Name: return "Name";
						case Banner.Columns.FirstDay: return "FirstDay";
						case Banner.Columns.LastDay: return "LastDay";
						case Banner.Columns.EventK: return "EventK";
						case Banner.Columns.DisplayType: return "DisplayType";
						case Banner.Columns.MiscK: return "MiscK";
						case Banner.Columns.MiscGuid: return "MiscGuid";
						case Banner.Columns.CustomHtml: return "CustomHtml";
						case Banner.Columns.CustomXml: return "CustomXml";
						case Banner.Columns.Position: return "Position";
						case Banner.Columns.Status: return "Status";
						case Banner.Columns.AdminNote: return "AdminNote";
						case Banner.Columns.UsrK: return "UsrK";
						case Banner.Columns.PromoterK: return "PromoterK";
						case Banner.Columns.BrandK: return "BrandK";
						case Banner.Columns.LinkUrl: return "LinkUrl";
						case Banner.Columns.IsMusicTargetted: return "IsMusicTargetted";
						case Banner.Columns.IsPlaceTargetted: return "IsPlaceTargetted";
						case Banner.Columns.LinkTarget: return "LinkTarget";
						case Banner.Columns.IsPriceFixed: return "IsPriceFixed";
						case Banner.Columns.PriceStored: return "PriceStored";
						case Banner.Columns.NewMiscK: return "NewMiscK";
						case Banner.Columns.CustomiseFirstLine: return "CustomiseFirstLine";
						case Banner.Columns.CustomiseFirstLineSize: return "CustomiseFirstLineSize";
						case Banner.Columns.CustomiseSecondLine: return "CustomiseSecondLine";
						case Banner.Columns.CustomiseThirdLine: return "CustomiseThirdLine";
						case Banner.Columns.FailedMiscK: return "FailedMiscK";
						case Banner.Columns.DesignType: return "DesignType";
						case Banner.Columns.BuyableLockDateTime: return "BuyableLockDateTime";
						case Banner.Columns.DesignProcessed: return "DesignProcessed";
						case Banner.Columns.FrequencyCapPerIdentifierPerDay: return "FrequencyCapPerIdentifierPerDay";
						case Banner.Columns.TargettingProperties0: return "TargettingProperties0";
						case Banner.Columns.TargettingProperties1: return "TargettingProperties1";
						case Banner.Columns.LastTimestamp: return "LastTimestamp";
						case Banner.Columns.TotalRequiredImpressions: return "TotalRequiredImpressions";
						case Banner.Columns.BannerFolderK: return "BannerFolderK";
						case Banner.Columns.VenueK: return "VenueK";
						case Banner.Columns.AutomaticDates: return "AutomaticDates";
						case Banner.Columns.AutomaticDatesWeeks: return "AutomaticDatesWeeks";
						case Banner.Columns.AutomaticTargetting: return "AutomaticTargetting";
						case Banner.Columns.AutomaticExposure: return "AutomaticExposure";
						case Banner.Columns.AutomaticExposureLevel: return "AutomaticExposureLevel";
						case Banner.Columns.StatusEnabled: return "StatusEnabled";
						case Banner.Columns.StatusBooked: return "StatusBooked";
						case Banner.Columns.StatusArtwork: return "StatusArtwork";
						case Banner.Columns.Refunded: return "Refunded";
						case Banner.Columns.RefundedCredits: return "RefundedCredits";
						case Banner.Columns.RefundCampaignCreditK: return "RefundCampaignCreditK";
						case Banner.Columns.DuplicateGuid: return "DuplicateGuid";
						case Banner.Columns.PriceCreditsStored: return "PriceCreditsStored";
						case Banner.Columns.FixedDiscount: return "FixedDiscount";
						case Banner.Columns.Priority: return "Priority";
						case Banner.Columns.AlwaysShow: return "AlwaysShow";
						case Banner.Columns.IsCancelled: return "IsCancelled";
						case Banner.Columns.DisplayDuration: return "DisplayDuration";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(Banner.Columns columnEnum)
		{
			switch (columnEnum)
			{
																																																												default: return false;
			}
		}


		#region Common
 
		public Banner(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);  }
		public Banner()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.Banner);
		}
		public Banner(BobSet bs)
		{
			this.Bob = new Bob(bs.Table, bs);
		}
		public Banner(int BannerK, IBob Parent, object Column)
			: this()
		{
			Bob.GetBobFromParent(BannerK, Parent.Bob, Column, TablesEnum.Banner);
		}
		public Banner(int BannerK)
			: this()
		{
			Bob.GetBobFromPrimaryKey(BannerK);
		}
		#endregion

	}
	#endregion
	#region BannerTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region Banner
	/// <summary>
	/// Advertising - includes banners, hotboxes etc.
	/// </summary>
	[Serializable]
	public partial class Banner 
	{
		
		#region Simple members
		/// <summary>
		/// The primary key
		/// </summary>
		public override int K
		{
			get { return (int)this[Banner.Columns.K] as int? ?? 0 ; }
			set { this[Banner.Columns.K] = value; }
		}
		/// <summary>
		/// Description of the banner for admin etc.
		/// </summary>
		public override string Name
		{
			get { return (string)this[Banner.Columns.Name]; }
			set { this[Banner.Columns.Name] = value; }
		}
		/// <summary>
		/// Date that the banners start to be displayed
		/// </summary>
		public override DateTime FirstDay
		{
			get { return (DateTime)this[Banner.Columns.FirstDay]; }
			set { this[Banner.Columns.FirstDay] = value; }
		}
		/// <summary>
		/// Last day that the banners are displayed
		/// </summary>
		public override DateTime LastDay
		{
			get { return (DateTime)this[Banner.Columns.LastDay]; }
			set { this[Banner.Columns.LastDay] = value; }
		}
		/// <summary>
		/// Links to an event if the advert is advertising an event
		/// </summary>
		public override int EventK
		{
			get { return (int)this[Banner.Columns.EventK]; }
			set { this[Banner.Columns.EventK] = value; }
		}
		/// <summary>
		/// How the banner is rendered - 1=Auto event banner, 2=Custom auto event banner, 3=Animated gif, 4=Jpg, 5=Flash movie, 6=Custom HTML
		/// </summary>
		public override int DisplayType
		{
			get { return (int)this[Banner.Columns.DisplayType]; }
			set { this[Banner.Columns.DisplayType] = value; }
		}
		/// <summary>
		/// The misc of the animated gif / jpg / flash movie
		/// </summary>
		public override int MiscK
		{
			get { return (int)this[Banner.Columns.MiscK]; }
			set { this[Banner.Columns.MiscK] = value; }
		}
		/// <summary>
		/// The guid of the animated gif / jpg / flash movie
		/// </summary>
		public Guid	MiscGuid
		{
			get{ return Cambro.Misc.Db.GuidConvertor(this[Banner.Columns.MiscGuid]);}		
			set{ this[Banner.Columns.MiscGuid] = new System.Data.SqlTypes.SqlGuid(value);}
		}
		/// <summary>
		/// Html to render if DisplayType = CustomHtml
		/// </summary>
		public override string CustomHtml
		{
			get { return (string)this[Banner.Columns.CustomHtml]; }
			set { this[Banner.Columns.CustomHtml] = value; }
		}
		/// <summary>
		/// Xml used to customise the text of the auto event banners
		/// </summary>
		public override string CustomXml
		{
			get { return (string)this[Banner.Columns.CustomXml]; }
			set { this[Banner.Columns.CustomXml] = value; }
		}
		/// <summary>
		/// Position - TopBanner=1, Hotbox=2
		/// </summary>
		public override int Position
		{
			get { return (int)this[Banner.Columns.Position]; }
			set { this[Banner.Columns.Position] = value; }
		}
		/// <summary>
		/// Status of the banner: New (awaiting payment etc.) = 1, Enabled (booked, live on the site, or finished) = 2, Disabled = 3
		/// </summary>
		public override int Status
		{
			get { return (int)this[Banner.Columns.Status]; }
			set { this[Banner.Columns.Status] = value; }
		}
		/// <summary>
		/// Note visible only to admins
		/// </summary>
		public override string AdminNote
		{
			get { return (string)this[Banner.Columns.AdminNote]; }
			set { this[Banner.Columns.AdminNote] = value; }
		}
		/// <summary>
		/// The user that added this banner
		/// </summary>
		public override int UsrK
		{
			get { return (int)this[Banner.Columns.UsrK]; }
			set { this[Banner.Columns.UsrK] = value; }
		}
		/// <summary>
		/// The promoter that added this banner (if it's a promoter banner)
		/// </summary>
		public override int PromoterK
		{
			get { return (int)this[Banner.Columns.PromoterK]; }
			set { this[Banner.Columns.PromoterK] = value; }
		}
		/// <summary>
		/// The brand that this banner advertises
		/// </summary>
		public override int BrandK
		{
			get { return (int)this[Banner.Columns.BrandK]; }
			set { this[Banner.Columns.BrandK] = value; }
		}
		/// <summary>
		/// The URL to link to if it's a custom URL
		/// </summary>
		public override string LinkUrl
		{
			get { return (string)this[Banner.Columns.LinkUrl]; }
			set { this[Banner.Columns.LinkUrl] = value; }
		}
		/// <summary>
		/// Does this banner have target MusicTypes selected?
		/// </summary>
		public override bool IsMusicTargetted
		{
			get { return (bool)this[Banner.Columns.IsMusicTargetted]; }
			set { this[Banner.Columns.IsMusicTargetted] = value; }
		}
		/// <summary>
		/// Does this banner have target Places selected?
		/// </summary>
		public override bool IsPlaceTargetted
		{
			get { return (bool)this[Banner.Columns.IsPlaceTargetted]; }
			set { this[Banner.Columns.IsPlaceTargetted] = value; }
		}
		/// <summary>
		/// Where does the banner link to?
		/// </summary>
		public override int LinkTarget
		{
			get { return (int)this[Banner.Columns.LinkTarget]; }
			set { this[Banner.Columns.LinkTarget] = value; }
		}
		/// <summary>
		/// Has admin fixed a special price on this banner?
		/// </summary>
		public override bool IsPriceFixed
		{
			get { return (bool)this[Banner.Columns.IsPriceFixed]; }
			set { this[Banner.Columns.IsPriceFixed] = value; }
		}
		/// <summary>
		/// If IsPriceFixed=true, this is the price that will be charged. If IsBooked=true, this the price that was paid.
		/// </summary>
		public override double PriceStored
		{
			get { return (double)this[Banner.Columns.PriceStored]; }
			set { this[Banner.Columns.PriceStored] = value; }
		}
		/// <summary>
		/// File waiting for authorisation. When it's authorised, it'll be swapped in.
		/// </summary>
		public override int NewMiscK
		{
			get { return (int)this[Banner.Columns.NewMiscK]; }
			set { this[Banner.Columns.NewMiscK] = value; }
		}
		/// <summary>
		/// Customised banner - first line
		/// </summary>
		public override string CustomiseFirstLine
		{
			get { return (string)this[Banner.Columns.CustomiseFirstLine]; }
			set { this[Banner.Columns.CustomiseFirstLine] = value; }
		}
		/// <summary>
		/// Customised banner - font size of first line
		/// </summary>
		public override int CustomiseFirstLineSize
		{
			get { return (int)this[Banner.Columns.CustomiseFirstLineSize]; }
			set { this[Banner.Columns.CustomiseFirstLineSize] = value; }
		}
		/// <summary>
		/// Customised banner - second line
		/// </summary>
		public override string CustomiseSecondLine
		{
			get { return (string)this[Banner.Columns.CustomiseSecondLine]; }
			set { this[Banner.Columns.CustomiseSecondLine] = value; }
		}
		/// <summary>
		/// Customised banner - third line
		/// </summary>
		public override string CustomiseThirdLine
		{
			get { return (string)this[Banner.Columns.CustomiseThirdLine]; }
			set { this[Banner.Columns.CustomiseThirdLine] = value; }
		}
		/// <summary>
		/// When uploading a file for a banner - this is the K of the misc if it FAILS.
		/// </summary>
		public override int FailedMiscK
		{
			get { return (int)this[Banner.Columns.FailedMiscK]; }
			set { this[Banner.Columns.FailedMiscK] = value; }
		}
		/// <summary>
		/// How will the artwork be created?
		/// </summary>
		public override int DesignType
		{
			get { return (int)this[Banner.Columns.DesignType]; }
			set { this[Banner.Columns.DesignType] = value; }
		}
		/// <summary>
		/// Time stamp to record when someone is trying to purchase an IBuyable item that is linked to this Bob. No lock = DateTime.MinValue
		/// </summary>
		public override DateTime BuyableLockDateTime
		{
			get { return (DateTime)this[Banner.Columns.BuyableLockDateTime]; }
			set { this[Banner.Columns.BuyableLockDateTime] = value; }
		}
		/// <summary>
		/// Has the design been processed (for the invoice system)
		/// </summary>
		public override bool DesignProcessed
		{
			get { return (bool)this[Banner.Columns.DesignProcessed]; }
			set { this[Banner.Columns.DesignProcessed] = value; }
		}
		/// <summary>
		/// The maximum number of times this banner should be served to a particular website user per day. -1 means uncapped
		/// </summary>
		public override int FrequencyCapPerIdentifierPerDay
		{
			get { return (int)this[Banner.Columns.FrequencyCapPerIdentifierPerDay]; }
			set { this[Banner.Columns.FrequencyCapPerIdentifierPerDay] = value; }
		}
		/// <summary>
		/// A total of all the targetting bit 0 = no targetting, otherwise is a bitwise total from BannerServer.Info.Types.TargettingBits range 0-62
		/// </summary>
		public override long TargettingProperties0
		{
			get { return (long)this[Banner.Columns.TargettingProperties0]; }
			set { this[Banner.Columns.TargettingProperties0] = value; }
		}
		/// <summary>
		/// A total of all the targetting bit 0 = no targetting, otherwise is a bitwise total from BannerServer.Info.Types.TargettingBits range 63-125
		/// </summary>
		public override long TargettingProperties1
		{
			get { return (long)this[Banner.Columns.TargettingProperties1]; }
			set { this[Banner.Columns.TargettingProperties1] = value; }
		}
		/// <summary>
		/// Last updated timestamp for cache testing
		/// </summary>
		public byte[] LastTimestamp
		{
			get { return (byte[])this[Banner.Columns.LastTimestamp]; }
		}
		/// <summary>
		/// Total impressions required for this banner campaign
		/// </summary>
		public override int TotalRequiredImpressions
		{
			get { return (int)this[Banner.Columns.TotalRequiredImpressions]; }
			set { this[Banner.Columns.TotalRequiredImpressions] = value; }
		}
		/// <summary>
		/// The K of the BannerFolder to which the banner belongs
		/// </summary>
		public override int BannerFolderK
		{
			get { return (int)this[Banner.Columns.BannerFolderK]; }
			set { this[Banner.Columns.BannerFolderK] = value; }
		}
		/// <summary>
		/// The venue to link to
		/// </summary>
		public override int VenueK
		{
			get { return (int)this[Banner.Columns.VenueK]; }
			set { this[Banner.Columns.VenueK] = value; }
		}
		/// <summary>
		/// Are automatic dates selected in the banner wizard?
		/// </summary>
		public override bool AutomaticDates
		{
			get { return (bool)this[Banner.Columns.AutomaticDates]; }
			set { this[Banner.Columns.AutomaticDates] = value; }
		}
		/// <summary>
		/// The number of weeks selected in the automatic dates section of the banner wizard
		/// </summary>
		public override int AutomaticDatesWeeks
		{
			get { return (int)this[Banner.Columns.AutomaticDatesWeeks]; }
			set { this[Banner.Columns.AutomaticDatesWeeks] = value; }
		}
		/// <summary>
		/// Is automatic targetting selected in the banner wizard?
		/// </summary>
		public override bool AutomaticTargetting
		{
			get { return (bool)this[Banner.Columns.AutomaticTargetting]; }
			set { this[Banner.Columns.AutomaticTargetting] = value; }
		}
		/// <summary>
		/// Is one of the automatic exposure levels selected in the banner wizard?
		/// </summary>
		public override bool AutomaticExposure
		{
			get { return (bool)this[Banner.Columns.AutomaticExposure]; }
			set { this[Banner.Columns.AutomaticExposure] = value; }
		}
		/// <summary>
		/// The automatic exposure level that is selected in the banner wizard
		/// </summary>
		public override int AutomaticExposureLevel
		{
			get { return (int)this[Banner.Columns.AutomaticExposureLevel]; }
			set { this[Banner.Columns.AutomaticExposureLevel] = value; }
		}
		/// <summary>
		/// Usually true, only false if the banner has been paused or cancelled (cancelled when IsRefunded = true)
		/// </summary>
		public override bool StatusEnabled
		{
			get { return (bool)this[Banner.Columns.StatusEnabled]; }
			set { this[Banner.Columns.StatusEnabled] = value; }
		}
		/// <summary>
		/// false if the banner is new, true if it has been paid for
		/// </summary>
		public override bool StatusBooked
		{
			get { return (bool)this[Banner.Columns.StatusBooked]; }
			set { this[Banner.Columns.StatusBooked] = value; }
		}
		/// <summary>
		/// true if the artwork is ready, false if not
		/// </summary>
		public override bool StatusArtwork
		{
			get { return (bool)this[Banner.Columns.StatusArtwork]; }
			set { this[Banner.Columns.StatusArtwork] = value; }
		}
		/// <summary>
		/// true if campaign credits have been successfully refunded to the promoter account
		/// </summary>
		public override bool Refunded
		{
			get { return (bool)this[Banner.Columns.Refunded]; }
			set { this[Banner.Columns.Refunded] = value; }
		}
		/// <summary>
		/// How many credits were refunded?
		/// </summary>
		public override int RefundedCredits
		{
			get { return (int)this[Banner.Columns.RefundedCredits]; }
			set { this[Banner.Columns.RefundedCredits] = value; }
		}
		/// <summary>
		/// Link to the CampaignCredit table for the refund
		/// </summary>
		public override int RefundCampaignCreditK
		{
			get { return (int)this[Banner.Columns.RefundCampaignCreditK]; }
			set { this[Banner.Columns.RefundCampaignCreditK] = value; }
		}
		/// <summary>
		/// Duplicate guid used to prevent duplicates while adding
		/// </summary>
		public Guid	DuplicateGuid
		{
			get{ return Cambro.Misc.Db.GuidConvertor(this[Banner.Columns.DuplicateGuid]);}		
			set{ this[Banner.Columns.DuplicateGuid] = new System.Data.SqlTypes.SqlGuid(value);}
		}
		/// <summary>
		/// Price in credits (either for fixed price banners, or for after banner is booked)
		/// </summary>
		public override int PriceCreditsStored
		{
			get { return (int)this[Banner.Columns.PriceCreditsStored]; }
			set { this[Banner.Columns.PriceCreditsStored] = value; }
		}
		/// <summary>
		/// Admin override to fix discount level for price of credits for this banner
		/// </summary>
		public override double FixedDiscount
		{
			get { return (double)this[Banner.Columns.FixedDiscount]; }
			set { this[Banner.Columns.FixedDiscount] = value; }
		}
		/// <summary>
		/// Higher priority banners will always be shown before those with lower priorities
		/// </summary>
		public override int Priority
		{
			get { return (int)this[Banner.Columns.Priority]; }
			set { this[Banner.Columns.Priority] = value; }
		}
		/// <summary>
		/// Setting this bit ensures that this banner will be shown if suitable for request
		/// </summary>
		public override bool AlwaysShow
		{
			get { return (bool)this[Banner.Columns.AlwaysShow]; }
			set { this[Banner.Columns.AlwaysShow] = value; }
		}
		/// <summary>
		/// Has this banner been cancelled?
		/// </summary>
		public override bool IsCancelled
		{
			get { return (bool)this[Banner.Columns.IsCancelled]; }
			set { this[Banner.Columns.IsCancelled] = value; }
		}
		/// <summary>
		/// Number of seconds to display banner for when rotating banners. null indicates that the default should be used
		/// </summary>
		public override int? DisplayDuration
		{
			get { return (int?)this[Banner.Columns.DisplayDuration]; }
			set { this[Banner.Columns.DisplayDuration] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildBanners
	{
		CachedSqlSelect<Banner> ChildBanners();
		CachedSqlSelect<Banner> ChildBanners(Q where);
		CachedSqlSelect<Banner> ChildBanners(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<Banner> ChildBanners(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class Banner 
	 : 
	Bobs.ChildInterfaces.IHasChildBannerMusicTypes
	,
	Bobs.ChildInterfaces.IHasChildBannerPlaces
	,
	Bobs.ChildInterfaces.IHasChildBannerStats
		{
			public CachedSqlSelect<BannerMusicType> ChildBannerMusicTypes()
		{
			return this.ChildBannerMusicTypes(null, null);
		}
		public CachedSqlSelect<BannerMusicType> ChildBannerMusicTypes(Q where)
		{
			return this.ChildBannerMusicTypes(where, null);
		}
		public CachedSqlSelect<BannerMusicType> ChildBannerMusicTypes(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildBannerMusicTypes(null, orderBy);
		}
		public CachedSqlSelect<BannerMusicType> ChildBannerMusicTypes(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<BannerMusicType>
			(
				new Children<BannerMusicType>
				(
					TablesEnum.Banner, 
					this.K, 
					TablesEnum.BannerMusicType, 
					dr => 
					{ 
						BannerMusicType newBannerMusicType = new BannerMusicType(); 
						newBannerMusicType.Initialise(dr); 
						return newBannerMusicType;
					},
					"11F97371",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<BannerPlace> ChildBannerPlaces()
		{
			return this.ChildBannerPlaces(null, null);
		}
		public CachedSqlSelect<BannerPlace> ChildBannerPlaces(Q where)
		{
			return this.ChildBannerPlaces(where, null);
		}
		public CachedSqlSelect<BannerPlace> ChildBannerPlaces(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildBannerPlaces(null, orderBy);
		}
		public CachedSqlSelect<BannerPlace> ChildBannerPlaces(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<BannerPlace>
			(
				new Children<BannerPlace>
				(
					TablesEnum.Banner, 
					this.K, 
					TablesEnum.BannerPlace, 
					dr => 
					{ 
						BannerPlace newBannerPlace = new BannerPlace(); 
						newBannerPlace.Initialise(dr); 
						return newBannerPlace;
					},
					"D5DF14E0",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<BannerStat> ChildBannerStats()
		{
			return this.ChildBannerStats(null, null);
		}
		public CachedSqlSelect<BannerStat> ChildBannerStats(Q where)
		{
			return this.ChildBannerStats(where, null);
		}
		public CachedSqlSelect<BannerStat> ChildBannerStats(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildBannerStats(null, orderBy);
		}
		public CachedSqlSelect<BannerStat> ChildBannerStats(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<BannerStat>
			(
				new Children<BannerStat>
				(
					TablesEnum.Banner, 
					this.K, 
					TablesEnum.BannerStat, 
					dr => 
					{ 
						BannerStat newBannerStat = new BannerStat(); 
						newBannerStat.Initialise(dr); 
						return newBannerStat;
					},
					"5928621F",
					where,
					orderBy
				)
			);
		}
		}

	#region BannerDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region BannerDataHolder
	/// <summary>
	/// Advertising - includes banners, hotboxes etc.DataHolder
	/// </summary>
	[Serializable]
	public partial class BannerDataHolder : DataHolder<Banner>
	{
		Banner dataHolder;
		[NonSerializedAttribute] Banner bob;

		public BannerDataHolder()
		{
			this.dataHolder = new Banner();
		}
		
		void CopyValues(Banner source, Banner destination)
		{
			destination[Bobs.Banner.Columns.K] = source[Bobs.Banner.Columns.K];
			destination[Bobs.Banner.Columns.Name] = source[Bobs.Banner.Columns.Name];
			destination[Bobs.Banner.Columns.FirstDay] = source[Bobs.Banner.Columns.FirstDay];
			destination[Bobs.Banner.Columns.LastDay] = source[Bobs.Banner.Columns.LastDay];
			destination[Bobs.Banner.Columns.EventK] = source[Bobs.Banner.Columns.EventK];
			destination[Bobs.Banner.Columns.DisplayType] = source[Bobs.Banner.Columns.DisplayType];
			destination[Bobs.Banner.Columns.MiscK] = source[Bobs.Banner.Columns.MiscK];
			destination[Bobs.Banner.Columns.MiscGuid] = source[Bobs.Banner.Columns.MiscGuid];
			destination[Bobs.Banner.Columns.CustomHtml] = source[Bobs.Banner.Columns.CustomHtml];
			destination[Bobs.Banner.Columns.CustomXml] = source[Bobs.Banner.Columns.CustomXml];
			destination[Bobs.Banner.Columns.Position] = source[Bobs.Banner.Columns.Position];
			destination[Bobs.Banner.Columns.Status] = source[Bobs.Banner.Columns.Status];
			destination[Bobs.Banner.Columns.AdminNote] = source[Bobs.Banner.Columns.AdminNote];
			destination[Bobs.Banner.Columns.UsrK] = source[Bobs.Banner.Columns.UsrK];
			destination[Bobs.Banner.Columns.PromoterK] = source[Bobs.Banner.Columns.PromoterK];
			destination[Bobs.Banner.Columns.BrandK] = source[Bobs.Banner.Columns.BrandK];
			destination[Bobs.Banner.Columns.LinkUrl] = source[Bobs.Banner.Columns.LinkUrl];
			destination[Bobs.Banner.Columns.IsMusicTargetted] = source[Bobs.Banner.Columns.IsMusicTargetted];
			destination[Bobs.Banner.Columns.IsPlaceTargetted] = source[Bobs.Banner.Columns.IsPlaceTargetted];
			destination[Bobs.Banner.Columns.LinkTarget] = source[Bobs.Banner.Columns.LinkTarget];
			destination[Bobs.Banner.Columns.IsPriceFixed] = source[Bobs.Banner.Columns.IsPriceFixed];
			destination[Bobs.Banner.Columns.PriceStored] = source[Bobs.Banner.Columns.PriceStored];
			destination[Bobs.Banner.Columns.NewMiscK] = source[Bobs.Banner.Columns.NewMiscK];
			destination[Bobs.Banner.Columns.CustomiseFirstLine] = source[Bobs.Banner.Columns.CustomiseFirstLine];
			destination[Bobs.Banner.Columns.CustomiseFirstLineSize] = source[Bobs.Banner.Columns.CustomiseFirstLineSize];
			destination[Bobs.Banner.Columns.CustomiseSecondLine] = source[Bobs.Banner.Columns.CustomiseSecondLine];
			destination[Bobs.Banner.Columns.CustomiseThirdLine] = source[Bobs.Banner.Columns.CustomiseThirdLine];
			destination[Bobs.Banner.Columns.FailedMiscK] = source[Bobs.Banner.Columns.FailedMiscK];
			destination[Bobs.Banner.Columns.DesignType] = source[Bobs.Banner.Columns.DesignType];
			destination[Bobs.Banner.Columns.BuyableLockDateTime] = source[Bobs.Banner.Columns.BuyableLockDateTime];
			destination[Bobs.Banner.Columns.DesignProcessed] = source[Bobs.Banner.Columns.DesignProcessed];
			destination[Bobs.Banner.Columns.FrequencyCapPerIdentifierPerDay] = source[Bobs.Banner.Columns.FrequencyCapPerIdentifierPerDay];
			destination[Bobs.Banner.Columns.TargettingProperties0] = source[Bobs.Banner.Columns.TargettingProperties0];
			destination[Bobs.Banner.Columns.TargettingProperties1] = source[Bobs.Banner.Columns.TargettingProperties1];
			destination[Bobs.Banner.Columns.LastTimestamp] = source[Bobs.Banner.Columns.LastTimestamp];
			destination[Bobs.Banner.Columns.TotalRequiredImpressions] = source[Bobs.Banner.Columns.TotalRequiredImpressions];
			destination[Bobs.Banner.Columns.BannerFolderK] = source[Bobs.Banner.Columns.BannerFolderK];
			destination[Bobs.Banner.Columns.VenueK] = source[Bobs.Banner.Columns.VenueK];
			destination[Bobs.Banner.Columns.AutomaticDates] = source[Bobs.Banner.Columns.AutomaticDates];
			destination[Bobs.Banner.Columns.AutomaticDatesWeeks] = source[Bobs.Banner.Columns.AutomaticDatesWeeks];
			destination[Bobs.Banner.Columns.AutomaticTargetting] = source[Bobs.Banner.Columns.AutomaticTargetting];
			destination[Bobs.Banner.Columns.AutomaticExposure] = source[Bobs.Banner.Columns.AutomaticExposure];
			destination[Bobs.Banner.Columns.AutomaticExposureLevel] = source[Bobs.Banner.Columns.AutomaticExposureLevel];
			destination[Bobs.Banner.Columns.StatusEnabled] = source[Bobs.Banner.Columns.StatusEnabled];
			destination[Bobs.Banner.Columns.StatusBooked] = source[Bobs.Banner.Columns.StatusBooked];
			destination[Bobs.Banner.Columns.StatusArtwork] = source[Bobs.Banner.Columns.StatusArtwork];
			destination[Bobs.Banner.Columns.Refunded] = source[Bobs.Banner.Columns.Refunded];
			destination[Bobs.Banner.Columns.RefundedCredits] = source[Bobs.Banner.Columns.RefundedCredits];
			destination[Bobs.Banner.Columns.RefundCampaignCreditK] = source[Bobs.Banner.Columns.RefundCampaignCreditK];
			destination[Bobs.Banner.Columns.DuplicateGuid] = source[Bobs.Banner.Columns.DuplicateGuid];
			destination[Bobs.Banner.Columns.PriceCreditsStored] = source[Bobs.Banner.Columns.PriceCreditsStored];
			destination[Bobs.Banner.Columns.FixedDiscount] = source[Bobs.Banner.Columns.FixedDiscount];
			destination[Bobs.Banner.Columns.Priority] = source[Bobs.Banner.Columns.Priority];
			destination[Bobs.Banner.Columns.AlwaysShow] = source[Bobs.Banner.Columns.AlwaysShow];
			destination[Bobs.Banner.Columns.IsCancelled] = source[Bobs.Banner.Columns.IsCancelled];
			destination[Bobs.Banner.Columns.DisplayDuration] = source[Bobs.Banner.Columns.DisplayDuration];
		}
		
		public BannerDataHolder(Banner bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// The primary key
		/// </summary>
		public int K
		{
			get { return dataHolder.K; }
			set { this.dataHolder.K = value; }
		}
		/// <summary>
		/// Description of the banner for admin etc.
		/// </summary>
		public string Name
		{
			get { return dataHolder.Name; }
			set { this.dataHolder.Name = value; }
		}
		/// <summary>
		/// Date that the banners start to be displayed
		/// </summary>
		public DateTime FirstDay
		{
			get { return dataHolder.FirstDay; }
			set { this.dataHolder.FirstDay = value; }
		}
		/// <summary>
		/// Last day that the banners are displayed
		/// </summary>
		public DateTime LastDay
		{
			get { return dataHolder.LastDay; }
			set { this.dataHolder.LastDay = value; }
		}
		/// <summary>
		/// Links to an event if the advert is advertising an event
		/// </summary>
		public int EventK
		{
			get { return dataHolder.EventK; }
			set { this.dataHolder.EventK = value; }
		}
		/// <summary>
		/// How the banner is rendered - 1=Auto event banner, 2=Custom auto event banner, 3=Animated gif, 4=Jpg, 5=Flash movie, 6=Custom HTML
		/// </summary>
		public int DisplayType
		{
			get { return dataHolder.DisplayType; }
			set { this.dataHolder.DisplayType = value; }
		}
		/// <summary>
		/// The misc of the animated gif / jpg / flash movie
		/// </summary>
		public int MiscK
		{
			get { return dataHolder.MiscK; }
			set { this.dataHolder.MiscK = value; }
		}
		/// <summary>
		/// The guid of the animated gif / jpg / flash movie
		/// </summary>
		public Guid MiscGuid
		{
			get { return dataHolder.MiscGuid; }
			set { this.dataHolder.MiscGuid = value; }
		}
		/// <summary>
		/// Html to render if DisplayType = CustomHtml
		/// </summary>
		public string CustomHtml
		{
			get { return dataHolder.CustomHtml; }
			set { this.dataHolder.CustomHtml = value; }
		}
		/// <summary>
		/// Xml used to customise the text of the auto event banners
		/// </summary>
		public string CustomXml
		{
			get { return dataHolder.CustomXml; }
			set { this.dataHolder.CustomXml = value; }
		}
		/// <summary>
		/// Position - TopBanner=1, Hotbox=2
		/// </summary>
		public int Position
		{
			get { return dataHolder.Position; }
			set { this.dataHolder.Position = value; }
		}
		/// <summary>
		/// Status of the banner: New (awaiting payment etc.) = 1, Enabled (booked, live on the site, or finished) = 2, Disabled = 3
		/// </summary>
		public int Status
		{
			get { return dataHolder.Status; }
			set { this.dataHolder.Status = value; }
		}
		/// <summary>
		/// Note visible only to admins
		/// </summary>
		public string AdminNote
		{
			get { return dataHolder.AdminNote; }
			set { this.dataHolder.AdminNote = value; }
		}
		/// <summary>
		/// The user that added this banner
		/// </summary>
		public int UsrK
		{
			get { return dataHolder.UsrK; }
			set { this.dataHolder.UsrK = value; }
		}
		/// <summary>
		/// The promoter that added this banner (if it's a promoter banner)
		/// </summary>
		public int PromoterK
		{
			get { return dataHolder.PromoterK; }
			set { this.dataHolder.PromoterK = value; }
		}
		/// <summary>
		/// The brand that this banner advertises
		/// </summary>
		public int BrandK
		{
			get { return dataHolder.BrandK; }
			set { this.dataHolder.BrandK = value; }
		}
		/// <summary>
		/// The URL to link to if it's a custom URL
		/// </summary>
		public string LinkUrl
		{
			get { return dataHolder.LinkUrl; }
			set { this.dataHolder.LinkUrl = value; }
		}
		/// <summary>
		/// Does this banner have target MusicTypes selected?
		/// </summary>
		public bool IsMusicTargetted
		{
			get { return dataHolder.IsMusicTargetted; }
			set { this.dataHolder.IsMusicTargetted = value; }
		}
		/// <summary>
		/// Does this banner have target Places selected?
		/// </summary>
		public bool IsPlaceTargetted
		{
			get { return dataHolder.IsPlaceTargetted; }
			set { this.dataHolder.IsPlaceTargetted = value; }
		}
		/// <summary>
		/// Where does the banner link to?
		/// </summary>
		public int LinkTarget
		{
			get { return dataHolder.LinkTarget; }
			set { this.dataHolder.LinkTarget = value; }
		}
		/// <summary>
		/// Has admin fixed a special price on this banner?
		/// </summary>
		public bool IsPriceFixed
		{
			get { return dataHolder.IsPriceFixed; }
			set { this.dataHolder.IsPriceFixed = value; }
		}
		/// <summary>
		/// If IsPriceFixed=true, this is the price that will be charged. If IsBooked=true, this the price that was paid.
		/// </summary>
		public double PriceStored
		{
			get { return dataHolder.PriceStored; }
			set { this.dataHolder.PriceStored = value; }
		}
		/// <summary>
		/// File waiting for authorisation. When it's authorised, it'll be swapped in.
		/// </summary>
		public int NewMiscK
		{
			get { return dataHolder.NewMiscK; }
			set { this.dataHolder.NewMiscK = value; }
		}
		/// <summary>
		/// Customised banner - first line
		/// </summary>
		public string CustomiseFirstLine
		{
			get { return dataHolder.CustomiseFirstLine; }
			set { this.dataHolder.CustomiseFirstLine = value; }
		}
		/// <summary>
		/// Customised banner - font size of first line
		/// </summary>
		public int CustomiseFirstLineSize
		{
			get { return dataHolder.CustomiseFirstLineSize; }
			set { this.dataHolder.CustomiseFirstLineSize = value; }
		}
		/// <summary>
		/// Customised banner - second line
		/// </summary>
		public string CustomiseSecondLine
		{
			get { return dataHolder.CustomiseSecondLine; }
			set { this.dataHolder.CustomiseSecondLine = value; }
		}
		/// <summary>
		/// Customised banner - third line
		/// </summary>
		public string CustomiseThirdLine
		{
			get { return dataHolder.CustomiseThirdLine; }
			set { this.dataHolder.CustomiseThirdLine = value; }
		}
		/// <summary>
		/// When uploading a file for a banner - this is the K of the misc if it FAILS.
		/// </summary>
		public int FailedMiscK
		{
			get { return dataHolder.FailedMiscK; }
			set { this.dataHolder.FailedMiscK = value; }
		}
		/// <summary>
		/// How will the artwork be created?
		/// </summary>
		public int DesignType
		{
			get { return dataHolder.DesignType; }
			set { this.dataHolder.DesignType = value; }
		}
		/// <summary>
		/// Time stamp to record when someone is trying to purchase an IBuyable item that is linked to this Bob. No lock = DateTime.MinValue
		/// </summary>
		public DateTime BuyableLockDateTime
		{
			get { return dataHolder.BuyableLockDateTime; }
			set { this.dataHolder.BuyableLockDateTime = value; }
		}
		/// <summary>
		/// Has the design been processed (for the invoice system)
		/// </summary>
		public bool DesignProcessed
		{
			get { return dataHolder.DesignProcessed; }
			set { this.dataHolder.DesignProcessed = value; }
		}
		/// <summary>
		/// The maximum number of times this banner should be served to a particular website user per day. -1 means uncapped
		/// </summary>
		public int FrequencyCapPerIdentifierPerDay
		{
			get { return dataHolder.FrequencyCapPerIdentifierPerDay; }
			set { this.dataHolder.FrequencyCapPerIdentifierPerDay = value; }
		}
		/// <summary>
		/// A total of all the targetting bit 0 = no targetting, otherwise is a bitwise total from BannerServer.Info.Types.TargettingBits range 0-62
		/// </summary>
		public long TargettingProperties0
		{
			get { return dataHolder.TargettingProperties0; }
			set { this.dataHolder.TargettingProperties0 = value; }
		}
		/// <summary>
		/// A total of all the targetting bit 0 = no targetting, otherwise is a bitwise total from BannerServer.Info.Types.TargettingBits range 63-125
		/// </summary>
		public long TargettingProperties1
		{
			get { return dataHolder.TargettingProperties1; }
			set { this.dataHolder.TargettingProperties1 = value; }
		}
		/// <summary>
		/// Last updated timestamp for cache testing
		/// </summary>
		public byte[] LastTimestamp
		{
			get { return dataHolder.LastTimestamp; }
			set { this.dataHolder.LastTimestamp = value; }
		}
		/// <summary>
		/// Total impressions required for this banner campaign
		/// </summary>
		public int TotalRequiredImpressions
		{
			get { return dataHolder.TotalRequiredImpressions; }
			set { this.dataHolder.TotalRequiredImpressions = value; }
		}
		/// <summary>
		/// The K of the BannerFolder to which the banner belongs
		/// </summary>
		public int BannerFolderK
		{
			get { return dataHolder.BannerFolderK; }
			set { this.dataHolder.BannerFolderK = value; }
		}
		/// <summary>
		/// The venue to link to
		/// </summary>
		public int VenueK
		{
			get { return dataHolder.VenueK; }
			set { this.dataHolder.VenueK = value; }
		}
		/// <summary>
		/// Are automatic dates selected in the banner wizard?
		/// </summary>
		public bool AutomaticDates
		{
			get { return dataHolder.AutomaticDates; }
			set { this.dataHolder.AutomaticDates = value; }
		}
		/// <summary>
		/// The number of weeks selected in the automatic dates section of the banner wizard
		/// </summary>
		public int AutomaticDatesWeeks
		{
			get { return dataHolder.AutomaticDatesWeeks; }
			set { this.dataHolder.AutomaticDatesWeeks = value; }
		}
		/// <summary>
		/// Is automatic targetting selected in the banner wizard?
		/// </summary>
		public bool AutomaticTargetting
		{
			get { return dataHolder.AutomaticTargetting; }
			set { this.dataHolder.AutomaticTargetting = value; }
		}
		/// <summary>
		/// Is one of the automatic exposure levels selected in the banner wizard?
		/// </summary>
		public bool AutomaticExposure
		{
			get { return dataHolder.AutomaticExposure; }
			set { this.dataHolder.AutomaticExposure = value; }
		}
		/// <summary>
		/// The automatic exposure level that is selected in the banner wizard
		/// </summary>
		public int AutomaticExposureLevel
		{
			get { return dataHolder.AutomaticExposureLevel; }
			set { this.dataHolder.AutomaticExposureLevel = value; }
		}
		/// <summary>
		/// Usually true, only false if the banner has been paused or cancelled (cancelled when IsRefunded = true)
		/// </summary>
		public bool StatusEnabled
		{
			get { return dataHolder.StatusEnabled; }
			set { this.dataHolder.StatusEnabled = value; }
		}
		/// <summary>
		/// false if the banner is new, true if it has been paid for
		/// </summary>
		public bool StatusBooked
		{
			get { return dataHolder.StatusBooked; }
			set { this.dataHolder.StatusBooked = value; }
		}
		/// <summary>
		/// true if the artwork is ready, false if not
		/// </summary>
		public bool StatusArtwork
		{
			get { return dataHolder.StatusArtwork; }
			set { this.dataHolder.StatusArtwork = value; }
		}
		/// <summary>
		/// true if campaign credits have been successfully refunded to the promoter account
		/// </summary>
		public bool Refunded
		{
			get { return dataHolder.Refunded; }
			set { this.dataHolder.Refunded = value; }
		}
		/// <summary>
		/// How many credits were refunded?
		/// </summary>
		public int RefundedCredits
		{
			get { return dataHolder.RefundedCredits; }
			set { this.dataHolder.RefundedCredits = value; }
		}
		/// <summary>
		/// Link to the CampaignCredit table for the refund
		/// </summary>
		public int RefundCampaignCreditK
		{
			get { return dataHolder.RefundCampaignCreditK; }
			set { this.dataHolder.RefundCampaignCreditK = value; }
		}
		/// <summary>
		/// Duplicate guid used to prevent duplicates while adding
		/// </summary>
		public Guid DuplicateGuid
		{
			get { return dataHolder.DuplicateGuid; }
			set { this.dataHolder.DuplicateGuid = value; }
		}
		/// <summary>
		/// Price in credits (either for fixed price banners, or for after banner is booked)
		/// </summary>
		public int PriceCreditsStored
		{
			get { return dataHolder.PriceCreditsStored; }
			set { this.dataHolder.PriceCreditsStored = value; }
		}
		/// <summary>
		/// Admin override to fix discount level for price of credits for this banner
		/// </summary>
		public double FixedDiscount
		{
			get { return dataHolder.FixedDiscount; }
			set { this.dataHolder.FixedDiscount = value; }
		}
		/// <summary>
		/// Higher priority banners will always be shown before those with lower priorities
		/// </summary>
		public int Priority
		{
			get { return dataHolder.Priority; }
			set { this.dataHolder.Priority = value; }
		}
		/// <summary>
		/// Setting this bit ensures that this banner will be shown if suitable for request
		/// </summary>
		public bool AlwaysShow
		{
			get { return dataHolder.AlwaysShow; }
			set { this.dataHolder.AlwaysShow = value; }
		}
		/// <summary>
		/// Has this banner been cancelled?
		/// </summary>
		public bool IsCancelled
		{
			get { return dataHolder.IsCancelled; }
			set { this.dataHolder.IsCancelled = value; }
		}
		/// <summary>
		/// Number of seconds to display banner for when rotating banners. null indicates that the default should be used
		/// </summary>
		public int? DisplayDuration
		{
			get { return dataHolder.DisplayDuration; }
			set { this.dataHolder.DisplayDuration = value; }
		}
		#endregion
		public Banner Banner
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new Banner(K);
					}
					else
					{
						bob = new Banner();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region BannerSet
	public partial class BannerSet : BobSet, IEnumerable<Banner>
	{
		public BannerSet(Query query) : base(query) { }

		public Banner this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new Banner(this);
					((Banner)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (Banner)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new BannerTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<Banner> ToList()
		{
			List<Banner> list = new List<Banner>();
			foreach (Banner item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<Banner> Members

		public new IEnumerator<Banner> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region BannerTableDef
	public class BannerTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "Banner";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "73D8C33D";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return Banner.GetColumnName((Banner.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.Banner;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return true;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return Banner.Columns.K;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			Banner.Columns c = (Banner.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case Banner.Columns.K: ColumnStore[i] = new ColumnDef(c, "K", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey | SqlColumnFlag.AutoNumber, null); break;
					case Banner.Columns.Name: ColumnStore[i] = new ColumnDef(c, "Name", SqlDbType.VarChar, 250, ""); break;
					case Banner.Columns.FirstDay: ColumnStore[i] = new ColumnDef(c, "FirstDay", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case Banner.Columns.LastDay: ColumnStore[i] = new ColumnDef(c, "LastDay", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case Banner.Columns.EventK: ColumnStore[i] = new ColumnDef(c, "EventK", SqlDbType.Int, 0); break;
					case Banner.Columns.DisplayType: ColumnStore[i] = new ColumnDef(c, "DisplayType", SqlDbType.Int, 0); break;
					case Banner.Columns.MiscK: ColumnStore[i] = new ColumnDef(c, "MiscK", SqlDbType.Int, 0); break;
					case Banner.Columns.MiscGuid: ColumnStore[i] = new ColumnDef(c, "MiscGuid", SqlDbType.UniqueIdentifier, Guid.Empty); break;
					case Banner.Columns.CustomHtml: ColumnStore[i] = new ColumnDef(c, "CustomHtml", SqlDbType.Text, ""); break;
					case Banner.Columns.CustomXml: ColumnStore[i] = new ColumnDef(c, "CustomXml", SqlDbType.Text, ""); break;
					case Banner.Columns.Position: ColumnStore[i] = new ColumnDef(c, "Position", SqlDbType.Int, 0); break;
					case Banner.Columns.Status: ColumnStore[i] = new ColumnDef(c, "Status", SqlDbType.Int, 0); break;
					case Banner.Columns.AdminNote: ColumnStore[i] = new ColumnDef(c, "AdminNote", SqlDbType.Text, ""); break;
					case Banner.Columns.UsrK: ColumnStore[i] = new ColumnDef(c, "UsrK", SqlDbType.Int, 0); break;
					case Banner.Columns.PromoterK: ColumnStore[i] = new ColumnDef(c, "PromoterK", SqlDbType.Int, 0); break;
					case Banner.Columns.BrandK: ColumnStore[i] = new ColumnDef(c, "BrandK", SqlDbType.Int, 0); break;
					case Banner.Columns.LinkUrl: ColumnStore[i] = new ColumnDef(c, "LinkUrl", SqlDbType.VarChar, 250, ""); break;
					case Banner.Columns.IsMusicTargetted: ColumnStore[i] = new ColumnDef(c, "IsMusicTargetted", SqlDbType.Bit, false); break;
					case Banner.Columns.IsPlaceTargetted: ColumnStore[i] = new ColumnDef(c, "IsPlaceTargetted", SqlDbType.Bit, false); break;
					case Banner.Columns.LinkTarget: ColumnStore[i] = new ColumnDef(c, "LinkTarget", SqlDbType.Int, 0); break;
					case Banner.Columns.IsPriceFixed: ColumnStore[i] = new ColumnDef(c, "IsPriceFixed", SqlDbType.Bit, false); break;
					case Banner.Columns.PriceStored: ColumnStore[i] = new ColumnDef(c, "PriceStored", SqlDbType.Float, 0.0); break;
					case Banner.Columns.NewMiscK: ColumnStore[i] = new ColumnDef(c, "NewMiscK", SqlDbType.Int, 0); break;
					case Banner.Columns.CustomiseFirstLine: ColumnStore[i] = new ColumnDef(c, "CustomiseFirstLine", SqlDbType.VarChar, 255, ""); break;
					case Banner.Columns.CustomiseFirstLineSize: ColumnStore[i] = new ColumnDef(c, "CustomiseFirstLineSize", SqlDbType.Int, 0); break;
					case Banner.Columns.CustomiseSecondLine: ColumnStore[i] = new ColumnDef(c, "CustomiseSecondLine", SqlDbType.VarChar, 255, ""); break;
					case Banner.Columns.CustomiseThirdLine: ColumnStore[i] = new ColumnDef(c, "CustomiseThirdLine", SqlDbType.VarChar, 255, ""); break;
					case Banner.Columns.FailedMiscK: ColumnStore[i] = new ColumnDef(c, "FailedMiscK", SqlDbType.Int, 0); break;
					case Banner.Columns.DesignType: ColumnStore[i] = new ColumnDef(c, "DesignType", SqlDbType.Int, 0); break;
					case Banner.Columns.BuyableLockDateTime: ColumnStore[i] = new ColumnDef(c, "BuyableLockDateTime", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case Banner.Columns.DesignProcessed: ColumnStore[i] = new ColumnDef(c, "DesignProcessed", SqlDbType.Bit, false); break;
					case Banner.Columns.FrequencyCapPerIdentifierPerDay: ColumnStore[i] = new ColumnDef(c, "FrequencyCapPerIdentifierPerDay", SqlDbType.Int, -1); break;
					case Banner.Columns.TargettingProperties0: ColumnStore[i] = new ColumnDef(c, "TargettingProperties0", SqlDbType.BigInt, 0L); break;
					case Banner.Columns.TargettingProperties1: ColumnStore[i] = new ColumnDef(c, "TargettingProperties1", SqlDbType.BigInt, 0L); break;
					case Banner.Columns.LastTimestamp: ColumnStore[i] = new ColumnDef(c, "LastTimestamp", SqlDbType.Timestamp, null); break;
					case Banner.Columns.TotalRequiredImpressions: ColumnStore[i] = new ColumnDef(c, "TotalRequiredImpressions", SqlDbType.Int, 0); break;
					case Banner.Columns.BannerFolderK: ColumnStore[i] = new ColumnDef(c, "BannerFolderK", SqlDbType.Int, 0); break;
					case Banner.Columns.VenueK: ColumnStore[i] = new ColumnDef(c, "VenueK", SqlDbType.Int, 0); break;
					case Banner.Columns.AutomaticDates: ColumnStore[i] = new ColumnDef(c, "AutomaticDates", SqlDbType.Bit, false); break;
					case Banner.Columns.AutomaticDatesWeeks: ColumnStore[i] = new ColumnDef(c, "AutomaticDatesWeeks", SqlDbType.Int, 0); break;
					case Banner.Columns.AutomaticTargetting: ColumnStore[i] = new ColumnDef(c, "AutomaticTargetting", SqlDbType.Bit, false); break;
					case Banner.Columns.AutomaticExposure: ColumnStore[i] = new ColumnDef(c, "AutomaticExposure", SqlDbType.Bit, false); break;
					case Banner.Columns.AutomaticExposureLevel: ColumnStore[i] = new ColumnDef(c, "AutomaticExposureLevel", SqlDbType.Int, 0); break;
					case Banner.Columns.StatusEnabled: ColumnStore[i] = new ColumnDef(c, "StatusEnabled", SqlDbType.Bit, false); break;
					case Banner.Columns.StatusBooked: ColumnStore[i] = new ColumnDef(c, "StatusBooked", SqlDbType.Bit, false); break;
					case Banner.Columns.StatusArtwork: ColumnStore[i] = new ColumnDef(c, "StatusArtwork", SqlDbType.Bit, false); break;
					case Banner.Columns.Refunded: ColumnStore[i] = new ColumnDef(c, "Refunded", SqlDbType.Bit, false); break;
					case Banner.Columns.RefundedCredits: ColumnStore[i] = new ColumnDef(c, "RefundedCredits", SqlDbType.Int, 0); break;
					case Banner.Columns.RefundCampaignCreditK: ColumnStore[i] = new ColumnDef(c, "RefundCampaignCreditK", SqlDbType.Int, 0); break;
					case Banner.Columns.DuplicateGuid: ColumnStore[i] = new ColumnDef(c, "DuplicateGuid", SqlDbType.UniqueIdentifier, Guid.Empty); break;
					case Banner.Columns.PriceCreditsStored: ColumnStore[i] = new ColumnDef(c, "PriceCreditsStored", SqlDbType.Int, 0); break;
					case Banner.Columns.FixedDiscount: ColumnStore[i] = new ColumnDef(c, "FixedDiscount", SqlDbType.Float, 0.0); break;
					case Banner.Columns.Priority: ColumnStore[i] = new ColumnDef(c, "Priority", SqlDbType.Int, 0); break;
					case Banner.Columns.AlwaysShow: ColumnStore[i] = new ColumnDef(c, "AlwaysShow", SqlDbType.Bit, false); break;
					case Banner.Columns.IsCancelled: ColumnStore[i] = new ColumnDef(c, "IsCancelled", SqlDbType.Bit, false); break;
					case Banner.Columns.DisplayDuration: ColumnStore[i] = new ColumnDef(c, "DisplayDuration", SqlDbType.Int, null); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(Banner.Columns.K);
						InitColumn(Banner.Columns.Name);
						InitColumn(Banner.Columns.FirstDay);
						InitColumn(Banner.Columns.LastDay);
						InitColumn(Banner.Columns.EventK);
						InitColumn(Banner.Columns.DisplayType);
						InitColumn(Banner.Columns.MiscK);
						InitColumn(Banner.Columns.MiscGuid);
						InitColumn(Banner.Columns.CustomHtml);
						InitColumn(Banner.Columns.CustomXml);
						InitColumn(Banner.Columns.Position);
						InitColumn(Banner.Columns.Status);
						InitColumn(Banner.Columns.AdminNote);
						InitColumn(Banner.Columns.UsrK);
						InitColumn(Banner.Columns.PromoterK);
						InitColumn(Banner.Columns.BrandK);
						InitColumn(Banner.Columns.LinkUrl);
						InitColumn(Banner.Columns.IsMusicTargetted);
						InitColumn(Banner.Columns.IsPlaceTargetted);
						InitColumn(Banner.Columns.LinkTarget);
						InitColumn(Banner.Columns.IsPriceFixed);
						InitColumn(Banner.Columns.PriceStored);
						InitColumn(Banner.Columns.NewMiscK);
						InitColumn(Banner.Columns.CustomiseFirstLine);
						InitColumn(Banner.Columns.CustomiseFirstLineSize);
						InitColumn(Banner.Columns.CustomiseSecondLine);
						InitColumn(Banner.Columns.CustomiseThirdLine);
						InitColumn(Banner.Columns.FailedMiscK);
						InitColumn(Banner.Columns.DesignType);
						InitColumn(Banner.Columns.BuyableLockDateTime);
						InitColumn(Banner.Columns.DesignProcessed);
						InitColumn(Banner.Columns.FrequencyCapPerIdentifierPerDay);
						InitColumn(Banner.Columns.TargettingProperties0);
						InitColumn(Banner.Columns.TargettingProperties1);
						InitColumn(Banner.Columns.LastTimestamp);
						InitColumn(Banner.Columns.TotalRequiredImpressions);
						InitColumn(Banner.Columns.BannerFolderK);
						InitColumn(Banner.Columns.VenueK);
						InitColumn(Banner.Columns.AutomaticDates);
						InitColumn(Banner.Columns.AutomaticDatesWeeks);
						InitColumn(Banner.Columns.AutomaticTargetting);
						InitColumn(Banner.Columns.AutomaticExposure);
						InitColumn(Banner.Columns.AutomaticExposureLevel);
						InitColumn(Banner.Columns.StatusEnabled);
						InitColumn(Banner.Columns.StatusBooked);
						InitColumn(Banner.Columns.StatusArtwork);
						InitColumn(Banner.Columns.Refunded);
						InitColumn(Banner.Columns.RefundedCredits);
						InitColumn(Banner.Columns.RefundCampaignCreditK);
						InitColumn(Banner.Columns.DuplicateGuid);
						InitColumn(Banner.Columns.PriceCreditsStored);
						InitColumn(Banner.Columns.FixedDiscount);
						InitColumn(Banner.Columns.Priority);
						InitColumn(Banner.Columns.AlwaysShow);
						InitColumn(Banner.Columns.IsCancelled);
						InitColumn(Banner.Columns.DisplayDuration);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region BannerFolder
	/// <summary>
	/// A BannerFolder object used for grouping banners
	/// </summary>
	public partial class BannerFolder : Model.Entities.BannerFolder, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// The auto incrementing primary key
			/// </summary>
			K = 0x00070001,
			/// <summary>
			/// The name of the BannerFolder
			/// </summary>
			Name = 0x00070002,
			/// <summary>
			/// The primary key of the promoter which owns the BannerFolder
			/// </summary>
			PromoterK = 0x00070003,
			/// <summary>
			/// When the BannerFolder object was first created
			/// </summary>
			DateTimeCreated = 0x00070004,
			/// <summary>
			/// The evnet the folder corresponds to, if any
			/// </summary>
			EventK = 0x00070005,
			/// <summary>
			/// Duplicate guid used to prevent duplicates while adding
			/// </summary>
			DuplicateGuid = 0x00070006,
		}
		#endregion
		public static string GetColumnName(BannerFolder.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case BannerFolder.Columns.K: return "K";
						case BannerFolder.Columns.Name: return "Name";
						case BannerFolder.Columns.PromoterK: return "PromoterK";
						case BannerFolder.Columns.DateTimeCreated: return "DateTimeCreated";
						case BannerFolder.Columns.EventK: return "EventK";
						case BannerFolder.Columns.DuplicateGuid: return "DuplicateGuid";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(BannerFolder.Columns columnEnum)
		{
			switch (columnEnum)
			{
										default: return false;
			}
		}


		#region Common
 
		public BannerFolder(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);  }
		public BannerFolder()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.BannerFolder);
		}
		public BannerFolder(BobSet bs)
		{
			this.Bob = new Bob(bs.Table, bs);
		}
		public BannerFolder(int BannerFolderK, IBob Parent, object Column)
			: this()
		{
			Bob.GetBobFromParent(BannerFolderK, Parent.Bob, Column, TablesEnum.BannerFolder);
		}
		public BannerFolder(int BannerFolderK)
			: this()
		{
			Bob.GetBobFromPrimaryKey(BannerFolderK);
		}
		#endregion

	}
	#endregion
	#region BannerFolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region BannerFolder
	/// <summary>
	/// A BannerFolder object used for grouping banners
	/// </summary>
	[Serializable]
	public partial class BannerFolder 
	{
		
		#region Simple members
		/// <summary>
		/// The auto incrementing primary key
		/// </summary>
		public override int K
		{
			get { return (int)this[BannerFolder.Columns.K] as int? ?? 0 ; }
			set { this[BannerFolder.Columns.K] = value; }
		}
		/// <summary>
		/// The name of the BannerFolder
		/// </summary>
		public override string Name
		{
			get { return (string)this[BannerFolder.Columns.Name]; }
			set { this[BannerFolder.Columns.Name] = value; }
		}
		/// <summary>
		/// The primary key of the promoter which owns the BannerFolder
		/// </summary>
		public override int PromoterK
		{
			get { return (int)this[BannerFolder.Columns.PromoterK]; }
			set { this[BannerFolder.Columns.PromoterK] = value; }
		}
		/// <summary>
		/// When the BannerFolder object was first created
		/// </summary>
		public override DateTime DateTimeCreated
		{
			get { return (DateTime)this[BannerFolder.Columns.DateTimeCreated]; }
			set { this[BannerFolder.Columns.DateTimeCreated] = value; }
		}
		/// <summary>
		/// The evnet the folder corresponds to, if any
		/// </summary>
		public override int EventK
		{
			get { return (int)this[BannerFolder.Columns.EventK]; }
			set { this[BannerFolder.Columns.EventK] = value; }
		}
		/// <summary>
		/// Duplicate guid used to prevent duplicates while adding
		/// </summary>
		public Guid	DuplicateGuid
		{
			get{ return Cambro.Misc.Db.GuidConvertor(this[BannerFolder.Columns.DuplicateGuid]);}		
			set{ this[BannerFolder.Columns.DuplicateGuid] = new System.Data.SqlTypes.SqlGuid(value);}
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildBannerFolders
	{
		CachedSqlSelect<BannerFolder> ChildBannerFolders();
		CachedSqlSelect<BannerFolder> ChildBannerFolders(Q where);
		CachedSqlSelect<BannerFolder> ChildBannerFolders(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<BannerFolder> ChildBannerFolders(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class BannerFolder 
	 : 
	Bobs.ChildInterfaces.IHasChildBanners
		{
			public CachedSqlSelect<Banner> ChildBanners()
		{
			return this.ChildBanners(null, null);
		}
		public CachedSqlSelect<Banner> ChildBanners(Q where)
		{
			return this.ChildBanners(where, null);
		}
		public CachedSqlSelect<Banner> ChildBanners(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildBanners(null, orderBy);
		}
		public CachedSqlSelect<Banner> ChildBanners(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<Banner>
			(
				new Children<Banner>
				(
					TablesEnum.BannerFolder, 
					this.K, 
					TablesEnum.Banner, 
					dr => 
					{ 
						Banner newBanner = new Banner(); 
						newBanner.Initialise(dr); 
						return newBanner;
					},
					"73D8C33D",
					where,
					orderBy
				)
			);
		}
		}

	#region BannerFolderDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region BannerFolderDataHolder
	/// <summary>
	/// A BannerFolder object used for grouping bannersDataHolder
	/// </summary>
	[Serializable]
	public partial class BannerFolderDataHolder : DataHolder<BannerFolder>
	{
		BannerFolder dataHolder;
		[NonSerializedAttribute] BannerFolder bob;

		public BannerFolderDataHolder()
		{
			this.dataHolder = new BannerFolder();
		}
		
		void CopyValues(BannerFolder source, BannerFolder destination)
		{
			destination[Bobs.BannerFolder.Columns.K] = source[Bobs.BannerFolder.Columns.K];
			destination[Bobs.BannerFolder.Columns.Name] = source[Bobs.BannerFolder.Columns.Name];
			destination[Bobs.BannerFolder.Columns.PromoterK] = source[Bobs.BannerFolder.Columns.PromoterK];
			destination[Bobs.BannerFolder.Columns.DateTimeCreated] = source[Bobs.BannerFolder.Columns.DateTimeCreated];
			destination[Bobs.BannerFolder.Columns.EventK] = source[Bobs.BannerFolder.Columns.EventK];
			destination[Bobs.BannerFolder.Columns.DuplicateGuid] = source[Bobs.BannerFolder.Columns.DuplicateGuid];
		}
		
		public BannerFolderDataHolder(BannerFolder bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// The auto incrementing primary key
		/// </summary>
		public int K
		{
			get { return dataHolder.K; }
			set { this.dataHolder.K = value; }
		}
		/// <summary>
		/// The name of the BannerFolder
		/// </summary>
		public string Name
		{
			get { return dataHolder.Name; }
			set { this.dataHolder.Name = value; }
		}
		/// <summary>
		/// The primary key of the promoter which owns the BannerFolder
		/// </summary>
		public int PromoterK
		{
			get { return dataHolder.PromoterK; }
			set { this.dataHolder.PromoterK = value; }
		}
		/// <summary>
		/// When the BannerFolder object was first created
		/// </summary>
		public DateTime DateTimeCreated
		{
			get { return dataHolder.DateTimeCreated; }
			set { this.dataHolder.DateTimeCreated = value; }
		}
		/// <summary>
		/// The evnet the folder corresponds to, if any
		/// </summary>
		public int EventK
		{
			get { return dataHolder.EventK; }
			set { this.dataHolder.EventK = value; }
		}
		/// <summary>
		/// Duplicate guid used to prevent duplicates while adding
		/// </summary>
		public Guid DuplicateGuid
		{
			get { return dataHolder.DuplicateGuid; }
			set { this.dataHolder.DuplicateGuid = value; }
		}
		#endregion
		public BannerFolder BannerFolder
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new BannerFolder(K);
					}
					else
					{
						bob = new BannerFolder();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region BannerFolderSet
	public partial class BannerFolderSet : BobSet, IEnumerable<BannerFolder>
	{
		public BannerFolderSet(Query query) : base(query) { }

		public BannerFolder this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new BannerFolder(this);
					((BannerFolder)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (BannerFolder)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new BannerFolderTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<BannerFolder> ToList()
		{
			List<BannerFolder> list = new List<BannerFolder>();
			foreach (BannerFolder item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<BannerFolder> Members

		public new IEnumerator<BannerFolder> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region BannerFolderTableDef
	public class BannerFolderTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "BannerFolder";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "F4A4B2D6";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return BannerFolder.GetColumnName((BannerFolder.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.BannerFolder;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return true;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return BannerFolder.Columns.K;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			BannerFolder.Columns c = (BannerFolder.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case BannerFolder.Columns.K: ColumnStore[i] = new ColumnDef(c, "K", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey | SqlColumnFlag.AutoNumber, null); break;
					case BannerFolder.Columns.Name: ColumnStore[i] = new ColumnDef(c, "Name", SqlDbType.VarChar, 250, ""); break;
					case BannerFolder.Columns.PromoterK: ColumnStore[i] = new ColumnDef(c, "PromoterK", SqlDbType.Int, 0); break;
					case BannerFolder.Columns.DateTimeCreated: ColumnStore[i] = new ColumnDef(c, "DateTimeCreated", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case BannerFolder.Columns.EventK: ColumnStore[i] = new ColumnDef(c, "EventK", SqlDbType.Int, 0); break;
					case BannerFolder.Columns.DuplicateGuid: ColumnStore[i] = new ColumnDef(c, "DuplicateGuid", SqlDbType.UniqueIdentifier, Guid.Empty); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(BannerFolder.Columns.K);
						InitColumn(BannerFolder.Columns.Name);
						InitColumn(BannerFolder.Columns.PromoterK);
						InitColumn(BannerFolder.Columns.DateTimeCreated);
						InitColumn(BannerFolder.Columns.EventK);
						InitColumn(BannerFolder.Columns.DuplicateGuid);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region BannerMusicType
	/// <summary>
	/// Links banners to relevant music types
	/// </summary>
	public partial class BannerMusicType : Model.Entities.BannerMusicType, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// Link to Banner table
			/// </summary>
			BannerK = 0x00080001,
			/// <summary>
			/// Link to the MusicType table
			/// </summary>
			MusicTypeK = 0x00080002,
			/// <summary>
			/// If the musicType was actually chosen by the promoter
			/// </summary>
			Chosen = 0x00080003,
		}
		#endregion
		public static string GetColumnName(BannerMusicType.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case BannerMusicType.Columns.BannerK: return "BannerK";
						case BannerMusicType.Columns.MusicTypeK: return "MusicTypeK";
						case BannerMusicType.Columns.Chosen: return "Chosen";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(BannerMusicType.Columns columnEnum)
		{
			switch (columnEnum)
			{
							default: return false;
			}
		}


		#region Common
	 
		public BannerMusicType(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);}
		public BannerMusicType()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.BannerMusicType);
		}
		public BannerMusicType(BobSet bs)
		{
			this.Bob = new Bob(Bobs.Tables.Defs.BannerMusicType, bs);
		}
		public BannerMusicType(IBob Parent, object Column) : this()
		{
			this.Bob.GetBobFromParentSimple(Parent, Column, TablesEnum.BannerMusicType);
		}
		public BannerMusicType(int BannerK, int MusicTypeK) : this()
		{
			this.Bob.GetBobFromPrimaryKeyArray(new Q[] {new Q(BannerMusicType.Columns.BannerK,BannerK), new Q(BannerMusicType.Columns.MusicTypeK,MusicTypeK)});
		} 
		#endregion

	}
	#endregion
	#region BannerMusicTypeTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region BannerMusicType
	/// <summary>
	/// Links banners to relevant music types
	/// </summary>
	[Serializable]
	public partial class BannerMusicType 
	{
		
		#region Simple members
		/// <summary>
		/// Link to Banner table
		/// </summary>
		public override int BannerK
		{
			get { return (int)this[BannerMusicType.Columns.BannerK]; }
			set { this[BannerMusicType.Columns.BannerK] = value; }
		}
		/// <summary>
		/// Link to the MusicType table
		/// </summary>
		public override int MusicTypeK
		{
			get { return (int)this[BannerMusicType.Columns.MusicTypeK]; }
			set { this[BannerMusicType.Columns.MusicTypeK] = value; }
		}
		/// <summary>
		/// If the musicType was actually chosen by the promoter
		/// </summary>
		public override bool Chosen
		{
			get { return (bool)this[BannerMusicType.Columns.Chosen]; }
			set { this[BannerMusicType.Columns.Chosen] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildBannerMusicTypes
	{
		CachedSqlSelect<BannerMusicType> ChildBannerMusicTypes();
		CachedSqlSelect<BannerMusicType> ChildBannerMusicTypes(Q where);
		CachedSqlSelect<BannerMusicType> ChildBannerMusicTypes(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<BannerMusicType> ChildBannerMusicTypes(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class BannerMusicType 
		{
		}

	#region BannerMusicTypeDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region BannerMusicTypeDataHolder
	/// <summary>
	/// Links banners to relevant music typesDataHolder
	/// </summary>
	[Serializable]
	public partial class BannerMusicTypeDataHolder : DataHolder<BannerMusicType>
	{
		BannerMusicType dataHolder;
		[NonSerializedAttribute] BannerMusicType bob;

		public BannerMusicTypeDataHolder()
		{
			this.dataHolder = new BannerMusicType();
		}
		
		void CopyValues(BannerMusicType source, BannerMusicType destination)
		{
			destination[Bobs.BannerMusicType.Columns.BannerK] = source[Bobs.BannerMusicType.Columns.BannerK];
			destination[Bobs.BannerMusicType.Columns.MusicTypeK] = source[Bobs.BannerMusicType.Columns.MusicTypeK];
			destination[Bobs.BannerMusicType.Columns.Chosen] = source[Bobs.BannerMusicType.Columns.Chosen];
		}
		
		public BannerMusicTypeDataHolder(BannerMusicType bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// Link to Banner table
		/// </summary>
		public int BannerK
		{
			get { return dataHolder.BannerK; }
			set { this.dataHolder.BannerK = value; }
		}
		/// <summary>
		/// Link to the MusicType table
		/// </summary>
		public int MusicTypeK
		{
			get { return dataHolder.MusicTypeK; }
			set { this.dataHolder.MusicTypeK = value; }
		}
		/// <summary>
		/// If the musicType was actually chosen by the promoter
		/// </summary>
		public bool Chosen
		{
			get { return dataHolder.Chosen; }
			set { this.dataHolder.Chosen = value; }
		}
		#endregion
		public BannerMusicType BannerMusicType
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new BannerMusicType(K);
					}
					else
					{
						bob = new BannerMusicType();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region BannerMusicTypeSet
	public partial class BannerMusicTypeSet : BobSet, IEnumerable<BannerMusicType>
	{
		public BannerMusicTypeSet(Query query) : base(query) { }

		public BannerMusicType this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new BannerMusicType(this);
					((BannerMusicType)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (BannerMusicType)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new BannerMusicTypeTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<BannerMusicType> ToList()
		{
			List<BannerMusicType> list = new List<BannerMusicType>();
			foreach (BannerMusicType item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<BannerMusicType> Members

		public new IEnumerator<BannerMusicType> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region BannerMusicTypeTableDef
	public class BannerMusicTypeTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "BannerMusicType";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "11F97371";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return BannerMusicType.GetColumnName((BannerMusicType.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.BannerMusicType;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return false;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return null;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			BannerMusicType.Columns c = (BannerMusicType.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case BannerMusicType.Columns.BannerK: ColumnStore[i] = new ColumnDef(c, "BannerK", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey, 0); break;
					case BannerMusicType.Columns.MusicTypeK: ColumnStore[i] = new ColumnDef(c, "MusicTypeK", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey, 0); break;
					case BannerMusicType.Columns.Chosen: ColumnStore[i] = new ColumnDef(c, "Chosen", SqlDbType.Bit, false); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(BannerMusicType.Columns.BannerK);
						InitColumn(BannerMusicType.Columns.MusicTypeK);
						InitColumn(BannerMusicType.Columns.Chosen);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region BannerPlace
	/// <summary>
	/// Links banners to relevant places
	/// </summary>
	public partial class BannerPlace : Model.Entities.BannerPlace, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// Link to Banner table
			/// </summary>
			BannerK = 0x00090001,
			/// <summary>
			/// Link to the Place table
			/// </summary>
			PlaceK = 0x00090002,
		}
		#endregion
		public static string GetColumnName(BannerPlace.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case BannerPlace.Columns.BannerK: return "BannerK";
						case BannerPlace.Columns.PlaceK: return "PlaceK";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(BannerPlace.Columns columnEnum)
		{
			switch (columnEnum)
			{
						default: return false;
			}
		}


		#region Common
	 
		public BannerPlace(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);}
		public BannerPlace()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.BannerPlace);
		}
		public BannerPlace(BobSet bs)
		{
			this.Bob = new Bob(Bobs.Tables.Defs.BannerPlace, bs);
		}
		public BannerPlace(IBob Parent, object Column) : this()
		{
			this.Bob.GetBobFromParentSimple(Parent, Column, TablesEnum.BannerPlace);
		}
		public BannerPlace(int BannerK, int PlaceK) : this()
		{
			this.Bob.GetBobFromPrimaryKeyArray(new Q[] {new Q(BannerPlace.Columns.BannerK,BannerK), new Q(BannerPlace.Columns.PlaceK,PlaceK)});
		} 
		#endregion

	}
	#endregion
	#region BannerPlaceTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region BannerPlace
	/// <summary>
	/// Links banners to relevant places
	/// </summary>
	[Serializable]
	public partial class BannerPlace 
	{
		
		#region Simple members
		/// <summary>
		/// Link to Banner table
		/// </summary>
		public override int BannerK
		{
			get { return (int)this[BannerPlace.Columns.BannerK]; }
			set { this[BannerPlace.Columns.BannerK] = value; }
		}
		/// <summary>
		/// Link to the Place table
		/// </summary>
		public override int PlaceK
		{
			get { return (int)this[BannerPlace.Columns.PlaceK]; }
			set { this[BannerPlace.Columns.PlaceK] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildBannerPlaces
	{
		CachedSqlSelect<BannerPlace> ChildBannerPlaces();
		CachedSqlSelect<BannerPlace> ChildBannerPlaces(Q where);
		CachedSqlSelect<BannerPlace> ChildBannerPlaces(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<BannerPlace> ChildBannerPlaces(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class BannerPlace 
		{
		}

	#region BannerPlaceDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region BannerPlaceDataHolder
	/// <summary>
	/// Links banners to relevant placesDataHolder
	/// </summary>
	[Serializable]
	public partial class BannerPlaceDataHolder : DataHolder<BannerPlace>
	{
		BannerPlace dataHolder;
		[NonSerializedAttribute] BannerPlace bob;

		public BannerPlaceDataHolder()
		{
			this.dataHolder = new BannerPlace();
		}
		
		void CopyValues(BannerPlace source, BannerPlace destination)
		{
			destination[Bobs.BannerPlace.Columns.BannerK] = source[Bobs.BannerPlace.Columns.BannerK];
			destination[Bobs.BannerPlace.Columns.PlaceK] = source[Bobs.BannerPlace.Columns.PlaceK];
		}
		
		public BannerPlaceDataHolder(BannerPlace bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// Link to Banner table
		/// </summary>
		public int BannerK
		{
			get { return dataHolder.BannerK; }
			set { this.dataHolder.BannerK = value; }
		}
		/// <summary>
		/// Link to the Place table
		/// </summary>
		public int PlaceK
		{
			get { return dataHolder.PlaceK; }
			set { this.dataHolder.PlaceK = value; }
		}
		#endregion
		public BannerPlace BannerPlace
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new BannerPlace(K);
					}
					else
					{
						bob = new BannerPlace();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region BannerPlaceSet
	public partial class BannerPlaceSet : BobSet, IEnumerable<BannerPlace>
	{
		public BannerPlaceSet(Query query) : base(query) { }

		public BannerPlace this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new BannerPlace(this);
					((BannerPlace)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (BannerPlace)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new BannerPlaceTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<BannerPlace> ToList()
		{
			List<BannerPlace> list = new List<BannerPlace>();
			foreach (BannerPlace item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<BannerPlace> Members

		public new IEnumerator<BannerPlace> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region BannerPlaceTableDef
	public class BannerPlaceTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "BannerPlace";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "D5DF14E0";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return BannerPlace.GetColumnName((BannerPlace.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.BannerPlace;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return false;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return null;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			BannerPlace.Columns c = (BannerPlace.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case BannerPlace.Columns.BannerK: ColumnStore[i] = new ColumnDef(c, "BannerK", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey, 0); break;
					case BannerPlace.Columns.PlaceK: ColumnStore[i] = new ColumnDef(c, "PlaceK", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey, 0); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(BannerPlace.Columns.BannerK);
						InitColumn(BannerPlace.Columns.PlaceK);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region BannerStat
	/// <summary>
	/// This tracks the hits / clicks each benner gets for each day it's online
	/// </summary>
	public partial class BannerStat : Model.Entities.BannerStat, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// Tha banner that this stat is recording
			/// </summary>
			BannerK = 0x000a0001,
			/// <summary>
			/// The date that these stats were recorded in
			/// </summary>
			Date = 0x000a0002,
			/// <summary>
			/// Number of times that the banner was displayed
			/// </summary>
			Hits = 0x000a0003,
			/// <summary>
			/// Number of times that the banner was clicked on - must remind user that this may not be recorded if they don't link to the required url.
			/// </summary>
			Clicks = 0x000a0004,
			/// <summary>
			/// Number of times that the banner was displayed on a relevant page
			/// </summary>
			HitsTargetted = 0x000a0005,
			/// <summary>
			/// Number of times that the banner was displayed on a place-relevant page
			/// </summary>
			HitsPlaceTargetted = 0x000a0006,
			/// <summary>
			/// Number of times that the banner was displayed on a music-relevant page
			/// </summary>
			HitsMusicTargetted = 0x000a0007,
			/// <summary>
			/// Number of times that the banner was clicked after being displayed on a place-relevant page
			/// </summary>
			ClicksPlaceTargetted = 0x000a0008,
			/// <summary>
			/// Number of times that the banner was clicked after being displayed on a music-relevant page
			/// </summary>
			ClicksMusicTargetted = 0x000a0009,
		}
		#endregion
		public static string GetColumnName(BannerStat.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case BannerStat.Columns.BannerK: return "BannerK";
						case BannerStat.Columns.Date: return "Date";
						case BannerStat.Columns.Hits: return "Hits";
						case BannerStat.Columns.Clicks: return "Clicks";
						case BannerStat.Columns.HitsTargetted: return "HitsTargetted";
						case BannerStat.Columns.HitsPlaceTargetted: return "HitsPlaceTargetted";
						case BannerStat.Columns.HitsMusicTargetted: return "HitsMusicTargetted";
						case BannerStat.Columns.ClicksPlaceTargetted: return "ClicksPlaceTargetted";
						case BannerStat.Columns.ClicksMusicTargetted: return "ClicksMusicTargetted";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(BannerStat.Columns columnEnum)
		{
			switch (columnEnum)
			{
													default: return false;
			}
		}


		#region Common
	 
		public BannerStat(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);}
		public BannerStat()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.BannerStat);
		}
		public BannerStat(BobSet bs)
		{
			this.Bob = new Bob(Bobs.Tables.Defs.BannerStat, bs);
		}
		public BannerStat(IBob Parent, object Column) : this()
		{
			this.Bob.GetBobFromParentSimple(Parent, Column, TablesEnum.BannerStat);
		}
		public BannerStat(int BannerK, DateTime Date) : this()
		{
			this.Bob.GetBobFromPrimaryKeyArray(new Q[] {new Q(BannerStat.Columns.BannerK,BannerK), new Q(BannerStat.Columns.Date,Date)});
		} 
		#endregion

	}
	#endregion
	#region BannerStatTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region BannerStat
	/// <summary>
	/// This tracks the hits / clicks each benner gets for each day it's online
	/// </summary>
	[Serializable]
	public partial class BannerStat 
	{
		
		#region Simple members
		/// <summary>
		/// Tha banner that this stat is recording
		/// </summary>
		public override int BannerK
		{
			get { return (int)this[BannerStat.Columns.BannerK]; }
			set { this[BannerStat.Columns.BannerK] = value; }
		}
		/// <summary>
		/// The date that these stats were recorded in
		/// </summary>
		public override DateTime Date
		{
			get { return (DateTime)this[BannerStat.Columns.Date]; }
			set { this[BannerStat.Columns.Date] = value; }
		}
		/// <summary>
		/// Number of times that the banner was displayed
		/// </summary>
		public override int Hits
		{
			get { return (int)this[BannerStat.Columns.Hits]; }
			set { this[BannerStat.Columns.Hits] = value; }
		}
		/// <summary>
		/// Number of times that the banner was clicked on - must remind user that this may not be recorded if they don't link to the required url.
		/// </summary>
		public override int Clicks
		{
			get { return (int)this[BannerStat.Columns.Clicks]; }
			set { this[BannerStat.Columns.Clicks] = value; }
		}
		/// <summary>
		/// Number of times that the banner was displayed on a relevant page
		/// </summary>
		public override int HitsTargetted
		{
			get { return (int)this[BannerStat.Columns.HitsTargetted]; }
			set { this[BannerStat.Columns.HitsTargetted] = value; }
		}
		/// <summary>
		/// Number of times that the banner was displayed on a place-relevant page
		/// </summary>
		public override int HitsPlaceTargetted
		{
			get { return (int)this[BannerStat.Columns.HitsPlaceTargetted]; }
			set { this[BannerStat.Columns.HitsPlaceTargetted] = value; }
		}
		/// <summary>
		/// Number of times that the banner was displayed on a music-relevant page
		/// </summary>
		public override int HitsMusicTargetted
		{
			get { return (int)this[BannerStat.Columns.HitsMusicTargetted]; }
			set { this[BannerStat.Columns.HitsMusicTargetted] = value; }
		}
		/// <summary>
		/// Number of times that the banner was clicked after being displayed on a place-relevant page
		/// </summary>
		public override int ClicksPlaceTargetted
		{
			get { return (int)this[BannerStat.Columns.ClicksPlaceTargetted]; }
			set { this[BannerStat.Columns.ClicksPlaceTargetted] = value; }
		}
		/// <summary>
		/// Number of times that the banner was clicked after being displayed on a music-relevant page
		/// </summary>
		public override int ClicksMusicTargetted
		{
			get { return (int)this[BannerStat.Columns.ClicksMusicTargetted]; }
			set { this[BannerStat.Columns.ClicksMusicTargetted] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildBannerStats
	{
		CachedSqlSelect<BannerStat> ChildBannerStats();
		CachedSqlSelect<BannerStat> ChildBannerStats(Q where);
		CachedSqlSelect<BannerStat> ChildBannerStats(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<BannerStat> ChildBannerStats(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class BannerStat 
		{
		}

	#region BannerStatDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region BannerStatDataHolder
	/// <summary>
	/// This tracks the hits / clicks each benner gets for each day it's onlineDataHolder
	/// </summary>
	[Serializable]
	public partial class BannerStatDataHolder : DataHolder<BannerStat>
	{
		BannerStat dataHolder;
		[NonSerializedAttribute] BannerStat bob;

		public BannerStatDataHolder()
		{
			this.dataHolder = new BannerStat();
		}
		
		void CopyValues(BannerStat source, BannerStat destination)
		{
			destination[Bobs.BannerStat.Columns.BannerK] = source[Bobs.BannerStat.Columns.BannerK];
			destination[Bobs.BannerStat.Columns.Date] = source[Bobs.BannerStat.Columns.Date];
			destination[Bobs.BannerStat.Columns.Hits] = source[Bobs.BannerStat.Columns.Hits];
			destination[Bobs.BannerStat.Columns.Clicks] = source[Bobs.BannerStat.Columns.Clicks];
			destination[Bobs.BannerStat.Columns.HitsTargetted] = source[Bobs.BannerStat.Columns.HitsTargetted];
			destination[Bobs.BannerStat.Columns.HitsPlaceTargetted] = source[Bobs.BannerStat.Columns.HitsPlaceTargetted];
			destination[Bobs.BannerStat.Columns.HitsMusicTargetted] = source[Bobs.BannerStat.Columns.HitsMusicTargetted];
			destination[Bobs.BannerStat.Columns.ClicksPlaceTargetted] = source[Bobs.BannerStat.Columns.ClicksPlaceTargetted];
			destination[Bobs.BannerStat.Columns.ClicksMusicTargetted] = source[Bobs.BannerStat.Columns.ClicksMusicTargetted];
		}
		
		public BannerStatDataHolder(BannerStat bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// Tha banner that this stat is recording
		/// </summary>
		public int BannerK
		{
			get { return dataHolder.BannerK; }
			set { this.dataHolder.BannerK = value; }
		}
		/// <summary>
		/// The date that these stats were recorded in
		/// </summary>
		public DateTime Date
		{
			get { return dataHolder.Date; }
			set { this.dataHolder.Date = value; }
		}
		/// <summary>
		/// Number of times that the banner was displayed
		/// </summary>
		public int Hits
		{
			get { return dataHolder.Hits; }
			set { this.dataHolder.Hits = value; }
		}
		/// <summary>
		/// Number of times that the banner was clicked on - must remind user that this may not be recorded if they don't link to the required url.
		/// </summary>
		public int Clicks
		{
			get { return dataHolder.Clicks; }
			set { this.dataHolder.Clicks = value; }
		}
		/// <summary>
		/// Number of times that the banner was displayed on a relevant page
		/// </summary>
		public int HitsTargetted
		{
			get { return dataHolder.HitsTargetted; }
			set { this.dataHolder.HitsTargetted = value; }
		}
		/// <summary>
		/// Number of times that the banner was displayed on a place-relevant page
		/// </summary>
		public int HitsPlaceTargetted
		{
			get { return dataHolder.HitsPlaceTargetted; }
			set { this.dataHolder.HitsPlaceTargetted = value; }
		}
		/// <summary>
		/// Number of times that the banner was displayed on a music-relevant page
		/// </summary>
		public int HitsMusicTargetted
		{
			get { return dataHolder.HitsMusicTargetted; }
			set { this.dataHolder.HitsMusicTargetted = value; }
		}
		/// <summary>
		/// Number of times that the banner was clicked after being displayed on a place-relevant page
		/// </summary>
		public int ClicksPlaceTargetted
		{
			get { return dataHolder.ClicksPlaceTargetted; }
			set { this.dataHolder.ClicksPlaceTargetted = value; }
		}
		/// <summary>
		/// Number of times that the banner was clicked after being displayed on a music-relevant page
		/// </summary>
		public int ClicksMusicTargetted
		{
			get { return dataHolder.ClicksMusicTargetted; }
			set { this.dataHolder.ClicksMusicTargetted = value; }
		}
		#endregion
		public BannerStat BannerStat
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new BannerStat(K);
					}
					else
					{
						bob = new BannerStat();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region BannerStatSet
	public partial class BannerStatSet : BobSet, IEnumerable<BannerStat>
	{
		public BannerStatSet(Query query) : base(query) { }

		public BannerStat this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new BannerStat(this);
					((BannerStat)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (BannerStat)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new BannerStatTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<BannerStat> ToList()
		{
			List<BannerStat> list = new List<BannerStat>();
			foreach (BannerStat item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<BannerStat> Members

		public new IEnumerator<BannerStat> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region BannerStatTableDef
	public class BannerStatTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "BannerStat";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "5928621F";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return BannerStat.GetColumnName((BannerStat.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.BannerStat;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return false;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return null;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			BannerStat.Columns c = (BannerStat.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case BannerStat.Columns.BannerK: ColumnStore[i] = new ColumnDef(c, "BannerK", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey, 0); break;
					case BannerStat.Columns.Date: ColumnStore[i] = new ColumnDef(c, "Date", SqlDbType.DateTime, 16, SqlColumnFlag.PrimaryKey, DateTime.Parse("01/01/0001")); break;
					case BannerStat.Columns.Hits: ColumnStore[i] = new ColumnDef(c, "Hits", SqlDbType.Int, 0); break;
					case BannerStat.Columns.Clicks: ColumnStore[i] = new ColumnDef(c, "Clicks", SqlDbType.Int, 0); break;
					case BannerStat.Columns.HitsTargetted: ColumnStore[i] = new ColumnDef(c, "HitsTargetted", SqlDbType.Int, 0); break;
					case BannerStat.Columns.HitsPlaceTargetted: ColumnStore[i] = new ColumnDef(c, "HitsPlaceTargetted", SqlDbType.Int, 0); break;
					case BannerStat.Columns.HitsMusicTargetted: ColumnStore[i] = new ColumnDef(c, "HitsMusicTargetted", SqlDbType.Int, 0); break;
					case BannerStat.Columns.ClicksPlaceTargetted: ColumnStore[i] = new ColumnDef(c, "ClicksPlaceTargetted", SqlDbType.Int, 0); break;
					case BannerStat.Columns.ClicksMusicTargetted: ColumnStore[i] = new ColumnDef(c, "ClicksMusicTargetted", SqlDbType.Int, 0); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(BannerStat.Columns.BannerK);
						InitColumn(BannerStat.Columns.Date);
						InitColumn(BannerStat.Columns.Hits);
						InitColumn(BannerStat.Columns.Clicks);
						InitColumn(BannerStat.Columns.HitsTargetted);
						InitColumn(BannerStat.Columns.HitsPlaceTargetted);
						InitColumn(BannerStat.Columns.HitsMusicTargetted);
						InitColumn(BannerStat.Columns.ClicksPlaceTargetted);
						InitColumn(BannerStat.Columns.ClicksMusicTargetted);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region BinRange
	/// <summary>
	/// Database to help guess the credit card type from bank identification number (BIN - the first 6 numbe
	/// </summary>
	public partial class BinRange : Model.Entities.BinRange, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// The bottom number of the range
			/// </summary>
			Low = 0x000b0001,
			/// <summary>
			/// The top number of the range
			/// </summary>
			High = 0x000b0002,
			/// <summary>
			/// The card type: None=0, Delta=1, Electron=2, VisaPurchasing=3, Visa=4, MasterCard=5, Switch=6, Solo=7, JCB=8, Maestro=9
			/// </summary>
			Type = 0x000b0003,
			/// <summary>
			/// Order they are retreived from the database (for generics)
			/// </summary>
			Order = 0x000b0004,
		}
		#endregion
		public static string GetColumnName(BinRange.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case BinRange.Columns.Low: return "Low";
						case BinRange.Columns.High: return "High";
						case BinRange.Columns.Type: return "Type";
						case BinRange.Columns.Order: return "Order";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(BinRange.Columns columnEnum)
		{
			switch (columnEnum)
			{
								default: return false;
			}
		}


		#region Common
	 
		public BinRange(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);}
		public BinRange()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.BinRange);
		}
		public BinRange(BobSet bs)
		{
			this.Bob = new Bob(Bobs.Tables.Defs.BinRange, bs);
		}
		public BinRange(IBob Parent, object Column) : this()
		{
			this.Bob.GetBobFromParentSimple(Parent, Column, TablesEnum.BinRange);
		}
		public BinRange(int Low, int High) : this()
		{
			this.Bob.GetBobFromPrimaryKeyArray(new Q[] {new Q(BinRange.Columns.Low,Low), new Q(BinRange.Columns.High,High)});
		} 
		#endregion

	}
	#endregion
	#region BinRangeTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region BinRange
	/// <summary>
	/// Database to help guess the credit card type from bank identification number (BIN - the first 6 numbe
	/// </summary>
	[Serializable]
	public partial class BinRange 
	{
		
		#region Simple members
		/// <summary>
		/// The bottom number of the range
		/// </summary>
		public override int Low
		{
			get { return (int)this[BinRange.Columns.Low]; }
			set { this[BinRange.Columns.Low] = value; }
		}
		/// <summary>
		/// The top number of the range
		/// </summary>
		public override int High
		{
			get { return (int)this[BinRange.Columns.High]; }
			set { this[BinRange.Columns.High] = value; }
		}
		/// <summary>
		/// The card type: None=0, Delta=1, Electron=2, VisaPurchasing=3, Visa=4, MasterCard=5, Switch=6, Solo=7, JCB=8, Maestro=9
		/// </summary>
		public override int Type
		{
			get { return (int)this[BinRange.Columns.Type]; }
			set { this[BinRange.Columns.Type] = value; }
		}
		/// <summary>
		/// Order they are retreived from the database (for generics)
		/// </summary>
		public override int Order
		{
			get { return (int)this[BinRange.Columns.Order]; }
			set { this[BinRange.Columns.Order] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildBinRanges
	{
		CachedSqlSelect<BinRange> ChildBinRanges();
		CachedSqlSelect<BinRange> ChildBinRanges(Q where);
		CachedSqlSelect<BinRange> ChildBinRanges(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<BinRange> ChildBinRanges(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class BinRange 
		{
		}

	#region BinRangeDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region BinRangeDataHolder
	/// <summary>
	/// Database to help guess the credit card type from bank identification number (BIN - the first 6 numbeDataHolder
	/// </summary>
	[Serializable]
	public partial class BinRangeDataHolder : DataHolder<BinRange>
	{
		BinRange dataHolder;
		[NonSerializedAttribute] BinRange bob;

		public BinRangeDataHolder()
		{
			this.dataHolder = new BinRange();
		}
		
		void CopyValues(BinRange source, BinRange destination)
		{
			destination[Bobs.BinRange.Columns.Low] = source[Bobs.BinRange.Columns.Low];
			destination[Bobs.BinRange.Columns.High] = source[Bobs.BinRange.Columns.High];
			destination[Bobs.BinRange.Columns.Type] = source[Bobs.BinRange.Columns.Type];
			destination[Bobs.BinRange.Columns.Order] = source[Bobs.BinRange.Columns.Order];
		}
		
		public BinRangeDataHolder(BinRange bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// The bottom number of the range
		/// </summary>
		public int Low
		{
			get { return dataHolder.Low; }
			set { this.dataHolder.Low = value; }
		}
		/// <summary>
		/// The top number of the range
		/// </summary>
		public int High
		{
			get { return dataHolder.High; }
			set { this.dataHolder.High = value; }
		}
		/// <summary>
		/// The card type: None=0, Delta=1, Electron=2, VisaPurchasing=3, Visa=4, MasterCard=5, Switch=6, Solo=7, JCB=8, Maestro=9
		/// </summary>
		public int Type
		{
			get { return dataHolder.Type; }
			set { this.dataHolder.Type = value; }
		}
		/// <summary>
		/// Order they are retreived from the database (for generics)
		/// </summary>
		public int Order
		{
			get { return dataHolder.Order; }
			set { this.dataHolder.Order = value; }
		}
		#endregion
		public BinRange BinRange
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new BinRange(K);
					}
					else
					{
						bob = new BinRange();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region BinRangeSet
	public partial class BinRangeSet : BobSet, IEnumerable<BinRange>
	{
		public BinRangeSet(Query query) : base(query) { }

		public BinRange this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new BinRange(this);
					((BinRange)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (BinRange)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new BinRangeTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<BinRange> ToList()
		{
			List<BinRange> list = new List<BinRange>();
			foreach (BinRange item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<BinRange> Members

		public new IEnumerator<BinRange> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region BinRangeTableDef
	public class BinRangeTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "BinRange";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "CF09D1E6";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return BinRange.GetColumnName((BinRange.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.BinRange;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return false;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return null;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			BinRange.Columns c = (BinRange.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case BinRange.Columns.Low: ColumnStore[i] = new ColumnDef(c, "Low", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey, 0); break;
					case BinRange.Columns.High: ColumnStore[i] = new ColumnDef(c, "High", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey, 0); break;
					case BinRange.Columns.Type: ColumnStore[i] = new ColumnDef(c, "Type", SqlDbType.Int, 0); break;
					case BinRange.Columns.Order: ColumnStore[i] = new ColumnDef(c, "Order", SqlDbType.Int, 0); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(BinRange.Columns.Low);
						InitColumn(BinRange.Columns.High);
						InitColumn(BinRange.Columns.Type);
						InitColumn(BinRange.Columns.Order);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region Brand
	/// <summary>
	/// e.g. Event brand
	/// </summary>
	public partial class Brand : Model.Entities.Brand, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// The primary key
			/// </summary>
			K = 0x000c0001,
			/// <summary>
			/// Name of the brand
			/// </summary>
			Name = 0x000c0002,
			/// <summary>
			/// Link to the promoter - doesn't always have a promoter, so sometimes is 0.
			/// </summary>
			PromoterK = 0x000c0003,
			/// <summary>
			/// Cropped image 100*100
			/// </summary>
			Pic = 0x000c0004,
			/// <summary>
			/// Which user added this brand
			/// </summary>
			OwnerUsrK = 0x000c0005,
			/// <summary>
			/// Has this brand just been added to the site?
			/// </summary>
			IsNew = 0x000c0006,
			/// <summary>
			/// Has this brand recently been edited?
			/// </summary>
			IsEdited = 0x000c0007,
			/// <summary>
			/// Guid used to ensure duplicate brands don't get posted if the user refreshes the page after saving.
			/// </summary>
			DuplicateGuid = 0x000c0008,
			/// <summary>
			/// How is this brand controlled by this promoter?
			/// </summary>
			PromoterStatus = 0x000c0009,
			/// <summary>
			/// Unique url-compliant name
			/// </summary>
			UrlName = 0x000c000a,
			/// <summary>
			/// State var used to reconstruct cropper when re-cropping
			/// </summary>
			PicState = 0x000c000b,
			/// <summary>
			/// The Photo that was used to create the Pic.
			/// </summary>
			PicPhotoK = 0x000c000c,
			/// <summary>
			/// The Misc that was used to create the Pic.
			/// </summary>
			PicMiscK = 0x000c000d,
			/// <summary>
			/// The party group
			/// </summary>
			GroupK = 0x000c000e,
			/// <summary>
			/// Total number of comments
			/// </summary>
			TotalComments = 0x000c000f,
			/// <summary>
			/// DateTime of the last post
			/// </summary>
			LastPost = 0x000c0010,
			/// <summary>
			/// Average DateTime of all the comments
			/// </summary>
			AverageCommentDateTime = 0x000c0011,
			/// <summary>
			/// When the brand was added to the system
			/// </summary>
			DateTimeCreated = 0x000c0012,
			/// <summary>
			/// Does this brand ban photos? e.g. Love Puppy / Manumission
			/// </summary>
			NoPhotos = 0x000c0013,
			/// <summary>
			/// Has daves util function added the regulars to the group?
			/// </summary>
			AddedRegulars = 0x000c0014,
			/// <summary>
			/// Css to emit for the styled pages
			/// </summary>
			StyledCss = 0x000c0015,
			/// <summary>
			/// Xml to emit for the styled pages
			/// </summary>
			StyledXml = 0x000c0016,
		}
		#endregion
		public static string GetColumnName(Brand.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case Brand.Columns.K: return "K";
						case Brand.Columns.Name: return "Name";
						case Brand.Columns.PromoterK: return "PromoterK";
						case Brand.Columns.Pic: return "Pic";
						case Brand.Columns.OwnerUsrK: return "OwnerUsrK";
						case Brand.Columns.IsNew: return "IsNew";
						case Brand.Columns.IsEdited: return "IsEdited";
						case Brand.Columns.DuplicateGuid: return "DuplicateGuid";
						case Brand.Columns.PromoterStatus: return "PromoterStatus";
						case Brand.Columns.UrlName: return "UrlName";
						case Brand.Columns.PicState: return "PicState";
						case Brand.Columns.PicPhotoK: return "PicPhotoK";
						case Brand.Columns.PicMiscK: return "PicMiscK";
						case Brand.Columns.GroupK: return "GroupK";
						case Brand.Columns.TotalComments: return "TotalComments";
						case Brand.Columns.LastPost: return "LastPost";
						case Brand.Columns.AverageCommentDateTime: return "AverageCommentDateTime";
						case Brand.Columns.DateTimeCreated: return "DateTimeCreated";
						case Brand.Columns.NoPhotos: return "NoPhotos";
						case Brand.Columns.AddedRegulars: return "AddedRegulars";
						case Brand.Columns.StyledCss: return "StyledCss";
						case Brand.Columns.StyledXml: return "StyledXml";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(Brand.Columns columnEnum)
		{
			switch (columnEnum)
			{
																										default: return false;
			}
		}


		#region Common
 
		public Brand(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);  }
		public Brand()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.Brand);
		}
		public Brand(BobSet bs)
		{
			this.Bob = new Bob(bs.Table, bs);
		}
		public Brand(int BrandK, IBob Parent, object Column)
			: this()
		{
			Bob.GetBobFromParent(BrandK, Parent.Bob, Column, TablesEnum.Brand);
		}
		public Brand(int BrandK)
			: this()
		{
			Bob.GetBobFromPrimaryKey(BrandK);
		}
		#endregion

	}
	#endregion
	#region BrandTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region Brand
	/// <summary>
	/// e.g. Event brand
	/// </summary>
	[Serializable]
	public partial class Brand 
	{
		
		#region Simple members
		/// <summary>
		/// The primary key
		/// </summary>
		public override int K
		{
			get { return (int)this[Brand.Columns.K] as int? ?? 0 ; }
			set { this[Brand.Columns.K] = value; }
		}
		/// <summary>
		/// Name of the brand
		/// </summary>
		public override string Name
		{
			get { return (string)this[Brand.Columns.Name]; }
			set { this[Brand.Columns.Name] = value; }
		}
		/// <summary>
		/// Link to the promoter - doesn't always have a promoter, so sometimes is 0.
		/// </summary>
		public override int PromoterK
		{
			get { return (int)this[Brand.Columns.PromoterK]; }
			set { this[Brand.Columns.PromoterK] = value; }
		}
		/// <summary>
		/// Cropped image 100*100
		/// </summary>
		public Guid	Pic
		{
			get{ return Cambro.Misc.Db.GuidConvertor(this[Brand.Columns.Pic]);}		
			set{ this[Brand.Columns.Pic] = new System.Data.SqlTypes.SqlGuid(value);}
		}
		/// <summary>
		/// Which user added this brand
		/// </summary>
		public override int OwnerUsrK
		{
			get { return (int)this[Brand.Columns.OwnerUsrK]; }
			set { this[Brand.Columns.OwnerUsrK] = value; }
		}
		/// <summary>
		/// Has this brand just been added to the site?
		/// </summary>
		public override bool IsNew
		{
			get { return (bool)this[Brand.Columns.IsNew]; }
			set { this[Brand.Columns.IsNew] = value; }
		}
		/// <summary>
		/// Has this brand recently been edited?
		/// </summary>
		public override bool IsEdited
		{
			get { return (bool)this[Brand.Columns.IsEdited]; }
			set { this[Brand.Columns.IsEdited] = value; }
		}
		/// <summary>
		/// Guid used to ensure duplicate brands don't get posted if the user refreshes the page after saving.
		/// </summary>
		public Guid	DuplicateGuid
		{
			get{ return Cambro.Misc.Db.GuidConvertor(this[Brand.Columns.DuplicateGuid]);}		
			set{ this[Brand.Columns.DuplicateGuid] = new System.Data.SqlTypes.SqlGuid(value);}
		}
		/// <summary>
		/// How is this brand controlled by this promoter?
		/// </summary>
		public override int PromoterStatus
		{
			get { return (int)this[Brand.Columns.PromoterStatus]; }
			set { this[Brand.Columns.PromoterStatus] = value; }
		}
		/// <summary>
		/// Unique url-compliant name
		/// </summary>
		public override string UrlName
		{
			get { return (string)this[Brand.Columns.UrlName]; }
			set { this[Brand.Columns.UrlName] = value; }
		}
		/// <summary>
		/// State var used to reconstruct cropper when re-cropping
		/// </summary>
		public override string PicState
		{
			get { return (string)this[Brand.Columns.PicState]; }
			set { this[Brand.Columns.PicState] = value; }
		}
		/// <summary>
		/// The Photo that was used to create the Pic.
		/// </summary>
		public override int PicPhotoK
		{
			get { return (int)this[Brand.Columns.PicPhotoK]; }
			set { this[Brand.Columns.PicPhotoK] = value; }
		}
		/// <summary>
		/// The Misc that was used to create the Pic.
		/// </summary>
		public override int PicMiscK
		{
			get { return (int)this[Brand.Columns.PicMiscK]; }
			set { this[Brand.Columns.PicMiscK] = value; }
		}
		/// <summary>
		/// The party group
		/// </summary>
		public override int GroupK
		{
			get { return (int)this[Brand.Columns.GroupK]; }
			set { this[Brand.Columns.GroupK] = value; }
		}
		/// <summary>
		/// Total number of comments
		/// </summary>
		public override int TotalComments
		{
			get { return (int)this[Brand.Columns.TotalComments]; }
			set { this[Brand.Columns.TotalComments] = value; }
		}
		/// <summary>
		/// DateTime of the last post
		/// </summary>
		public override DateTime LastPost
		{
			get { return (DateTime)this[Brand.Columns.LastPost]; }
			set { this[Brand.Columns.LastPost] = value; }
		}
		/// <summary>
		/// Average DateTime of all the comments
		/// </summary>
		public override DateTime AverageCommentDateTime
		{
			get { return (DateTime)this[Brand.Columns.AverageCommentDateTime]; }
			set { this[Brand.Columns.AverageCommentDateTime] = value; }
		}
		/// <summary>
		/// When the brand was added to the system
		/// </summary>
		public override DateTime DateTimeCreated
		{
			get { return (DateTime)this[Brand.Columns.DateTimeCreated]; }
			set { this[Brand.Columns.DateTimeCreated] = value; }
		}
		/// <summary>
		/// Does this brand ban photos? e.g. Love Puppy / Manumission
		/// </summary>
		public override bool NoPhotos
		{
			get { return (bool)this[Brand.Columns.NoPhotos]; }
			set { this[Brand.Columns.NoPhotos] = value; }
		}
		/// <summary>
		/// Has daves util function added the regulars to the group?
		/// </summary>
		public override bool AddedRegulars
		{
			get { return (bool)this[Brand.Columns.AddedRegulars]; }
			set { this[Brand.Columns.AddedRegulars] = value; }
		}
		/// <summary>
		/// Css to emit for the styled pages
		/// </summary>
		public override string StyledCss
		{
			get { return (string)this[Brand.Columns.StyledCss]; }
			set { this[Brand.Columns.StyledCss] = value; }
		}
		/// <summary>
		/// Xml to emit for the styled pages
		/// </summary>
		public override string StyledXml
		{
			get { return (string)this[Brand.Columns.StyledXml]; }
			set { this[Brand.Columns.StyledXml] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildBrands
	{
		CachedSqlSelect<Brand> ChildBrands();
		CachedSqlSelect<Brand> ChildBrands(Q where);
		CachedSqlSelect<Brand> ChildBrands(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<Brand> ChildBrands(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class Brand 
	 : 
	Bobs.ChildInterfaces.IHasChildBanners
	,
	Bobs.ChildInterfaces.IHasChildComps
	,
	Bobs.ChildInterfaces.IHasChildEventBrands
	,
	Bobs.ChildInterfaces.IHasChildGroups
	,
	Bobs.ChildInterfaces.IHasChildThreads
	,
	Bobs.ChildInterfaces.IHasChildTicketRuns
		{
			public CachedSqlSelect<Banner> ChildBanners()
		{
			return this.ChildBanners(null, null);
		}
		public CachedSqlSelect<Banner> ChildBanners(Q where)
		{
			return this.ChildBanners(where, null);
		}
		public CachedSqlSelect<Banner> ChildBanners(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildBanners(null, orderBy);
		}
		public CachedSqlSelect<Banner> ChildBanners(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<Banner>
			(
				new Children<Banner>
				(
					TablesEnum.Brand, 
					this.K, 
					TablesEnum.Banner, 
					dr => 
					{ 
						Banner newBanner = new Banner(); 
						newBanner.Initialise(dr); 
						return newBanner;
					},
					"73D8C33D",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<Comp> ChildComps()
		{
			return this.ChildComps(null, null);
		}
		public CachedSqlSelect<Comp> ChildComps(Q where)
		{
			return this.ChildComps(where, null);
		}
		public CachedSqlSelect<Comp> ChildComps(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildComps(null, orderBy);
		}
		public CachedSqlSelect<Comp> ChildComps(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<Comp>
			(
				new Children<Comp>
				(
					TablesEnum.Brand, 
					this.K, 
					TablesEnum.Comp, 
					dr => 
					{ 
						Comp newComp = new Comp(); 
						newComp.Initialise(dr); 
						return newComp;
					},
					"61E0C58E",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<EventBrand> ChildEventBrands()
		{
			return this.ChildEventBrands(null, null);
		}
		public CachedSqlSelect<EventBrand> ChildEventBrands(Q where)
		{
			return this.ChildEventBrands(where, null);
		}
		public CachedSqlSelect<EventBrand> ChildEventBrands(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildEventBrands(null, orderBy);
		}
		public CachedSqlSelect<EventBrand> ChildEventBrands(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<EventBrand>
			(
				new Children<EventBrand>
				(
					TablesEnum.Brand, 
					this.K, 
					TablesEnum.EventBrand, 
					dr => 
					{ 
						EventBrand newEventBrand = new EventBrand(); 
						newEventBrand.Initialise(dr); 
						return newEventBrand;
					},
					"8CFC8B28",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<Group> ChildGroups()
		{
			return this.ChildGroups(null, null);
		}
		public CachedSqlSelect<Group> ChildGroups(Q where)
		{
			return this.ChildGroups(where, null);
		}
		public CachedSqlSelect<Group> ChildGroups(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildGroups(null, orderBy);
		}
		public CachedSqlSelect<Group> ChildGroups(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<Group>
			(
				new Children<Group>
				(
					TablesEnum.Brand, 
					this.K, 
					TablesEnum.Group, 
					dr => 
					{ 
						Group newGroup = new Group(); 
						newGroup.Initialise(dr); 
						return newGroup;
					},
					"81294206",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<Thread> ChildThreads()
		{
			return this.ChildThreads(null, null);
		}
		public CachedSqlSelect<Thread> ChildThreads(Q where)
		{
			return this.ChildThreads(where, null);
		}
		public CachedSqlSelect<Thread> ChildThreads(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildThreads(null, orderBy);
		}
		public CachedSqlSelect<Thread> ChildThreads(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<Thread>
			(
				new Children<Thread>
				(
					TablesEnum.Brand, 
					this.K, 
					TablesEnum.Thread, 
					dr => 
					{ 
						Thread newThread = new Thread(); 
						newThread.Initialise(dr); 
						return newThread;
					},
					"4576C3F1",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<TicketRun> ChildTicketRuns()
		{
			return this.ChildTicketRuns(null, null);
		}
		public CachedSqlSelect<TicketRun> ChildTicketRuns(Q where)
		{
			return this.ChildTicketRuns(where, null);
		}
		public CachedSqlSelect<TicketRun> ChildTicketRuns(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildTicketRuns(null, orderBy);
		}
		public CachedSqlSelect<TicketRun> ChildTicketRuns(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<TicketRun>
			(
				new Children<TicketRun>
				(
					TablesEnum.Brand, 
					this.K, 
					TablesEnum.TicketRun, 
					dr => 
					{ 
						TicketRun newTicketRun = new TicketRun(); 
						newTicketRun.Initialise(dr); 
						return newTicketRun;
					},
					"D8F98D64",
					where,
					orderBy
				)
			);
		}
		}

	#region BrandDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region BrandDataHolder
	/// <summary>
	/// e.g. Event brandDataHolder
	/// </summary>
	[Serializable]
	public partial class BrandDataHolder : DataHolder<Brand>
	{
		Brand dataHolder;
		[NonSerializedAttribute] Brand bob;

		public BrandDataHolder()
		{
			this.dataHolder = new Brand();
		}
		
		void CopyValues(Brand source, Brand destination)
		{
			destination[Bobs.Brand.Columns.K] = source[Bobs.Brand.Columns.K];
			destination[Bobs.Brand.Columns.Name] = source[Bobs.Brand.Columns.Name];
			destination[Bobs.Brand.Columns.PromoterK] = source[Bobs.Brand.Columns.PromoterK];
			destination[Bobs.Brand.Columns.Pic] = source[Bobs.Brand.Columns.Pic];
			destination[Bobs.Brand.Columns.OwnerUsrK] = source[Bobs.Brand.Columns.OwnerUsrK];
			destination[Bobs.Brand.Columns.IsNew] = source[Bobs.Brand.Columns.IsNew];
			destination[Bobs.Brand.Columns.IsEdited] = source[Bobs.Brand.Columns.IsEdited];
			destination[Bobs.Brand.Columns.DuplicateGuid] = source[Bobs.Brand.Columns.DuplicateGuid];
			destination[Bobs.Brand.Columns.PromoterStatus] = source[Bobs.Brand.Columns.PromoterStatus];
			destination[Bobs.Brand.Columns.UrlName] = source[Bobs.Brand.Columns.UrlName];
			destination[Bobs.Brand.Columns.PicState] = source[Bobs.Brand.Columns.PicState];
			destination[Bobs.Brand.Columns.PicPhotoK] = source[Bobs.Brand.Columns.PicPhotoK];
			destination[Bobs.Brand.Columns.PicMiscK] = source[Bobs.Brand.Columns.PicMiscK];
			destination[Bobs.Brand.Columns.GroupK] = source[Bobs.Brand.Columns.GroupK];
			destination[Bobs.Brand.Columns.TotalComments] = source[Bobs.Brand.Columns.TotalComments];
			destination[Bobs.Brand.Columns.LastPost] = source[Bobs.Brand.Columns.LastPost];
			destination[Bobs.Brand.Columns.AverageCommentDateTime] = source[Bobs.Brand.Columns.AverageCommentDateTime];
			destination[Bobs.Brand.Columns.DateTimeCreated] = source[Bobs.Brand.Columns.DateTimeCreated];
			destination[Bobs.Brand.Columns.NoPhotos] = source[Bobs.Brand.Columns.NoPhotos];
			destination[Bobs.Brand.Columns.AddedRegulars] = source[Bobs.Brand.Columns.AddedRegulars];
			destination[Bobs.Brand.Columns.StyledCss] = source[Bobs.Brand.Columns.StyledCss];
			destination[Bobs.Brand.Columns.StyledXml] = source[Bobs.Brand.Columns.StyledXml];
		}
		
		public BrandDataHolder(Brand bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// The primary key
		/// </summary>
		public int K
		{
			get { return dataHolder.K; }
			set { this.dataHolder.K = value; }
		}
		/// <summary>
		/// Name of the brand
		/// </summary>
		public string Name
		{
			get { return dataHolder.Name; }
			set { this.dataHolder.Name = value; }
		}
		/// <summary>
		/// Link to the promoter - doesn't always have a promoter, so sometimes is 0.
		/// </summary>
		public int PromoterK
		{
			get { return dataHolder.PromoterK; }
			set { this.dataHolder.PromoterK = value; }
		}
		/// <summary>
		/// Cropped image 100*100
		/// </summary>
		public Guid Pic
		{
			get { return dataHolder.Pic; }
			set { this.dataHolder.Pic = value; }
		}
		/// <summary>
		/// Which user added this brand
		/// </summary>
		public int OwnerUsrK
		{
			get { return dataHolder.OwnerUsrK; }
			set { this.dataHolder.OwnerUsrK = value; }
		}
		/// <summary>
		/// Has this brand just been added to the site?
		/// </summary>
		public bool IsNew
		{
			get { return dataHolder.IsNew; }
			set { this.dataHolder.IsNew = value; }
		}
		/// <summary>
		/// Has this brand recently been edited?
		/// </summary>
		public bool IsEdited
		{
			get { return dataHolder.IsEdited; }
			set { this.dataHolder.IsEdited = value; }
		}
		/// <summary>
		/// Guid used to ensure duplicate brands don't get posted if the user refreshes the page after saving.
		/// </summary>
		public Guid DuplicateGuid
		{
			get { return dataHolder.DuplicateGuid; }
			set { this.dataHolder.DuplicateGuid = value; }
		}
		/// <summary>
		/// How is this brand controlled by this promoter?
		/// </summary>
		public int PromoterStatus
		{
			get { return dataHolder.PromoterStatus; }
			set { this.dataHolder.PromoterStatus = value; }
		}
		/// <summary>
		/// Unique url-compliant name
		/// </summary>
		public string UrlName
		{
			get { return dataHolder.UrlName; }
			set { this.dataHolder.UrlName = value; }
		}
		/// <summary>
		/// State var used to reconstruct cropper when re-cropping
		/// </summary>
		public string PicState
		{
			get { return dataHolder.PicState; }
			set { this.dataHolder.PicState = value; }
		}
		/// <summary>
		/// The Photo that was used to create the Pic.
		/// </summary>
		public int PicPhotoK
		{
			get { return dataHolder.PicPhotoK; }
			set { this.dataHolder.PicPhotoK = value; }
		}
		/// <summary>
		/// The Misc that was used to create the Pic.
		/// </summary>
		public int PicMiscK
		{
			get { return dataHolder.PicMiscK; }
			set { this.dataHolder.PicMiscK = value; }
		}
		/// <summary>
		/// The party group
		/// </summary>
		public int GroupK
		{
			get { return dataHolder.GroupK; }
			set { this.dataHolder.GroupK = value; }
		}
		/// <summary>
		/// Total number of comments
		/// </summary>
		public int TotalComments
		{
			get { return dataHolder.TotalComments; }
			set { this.dataHolder.TotalComments = value; }
		}
		/// <summary>
		/// DateTime of the last post
		/// </summary>
		public DateTime LastPost
		{
			get { return dataHolder.LastPost; }
			set { this.dataHolder.LastPost = value; }
		}
		/// <summary>
		/// Average DateTime of all the comments
		/// </summary>
		public DateTime AverageCommentDateTime
		{
			get { return dataHolder.AverageCommentDateTime; }
			set { this.dataHolder.AverageCommentDateTime = value; }
		}
		/// <summary>
		/// When the brand was added to the system
		/// </summary>
		public DateTime DateTimeCreated
		{
			get { return dataHolder.DateTimeCreated; }
			set { this.dataHolder.DateTimeCreated = value; }
		}
		/// <summary>
		/// Does this brand ban photos? e.g. Love Puppy / Manumission
		/// </summary>
		public bool NoPhotos
		{
			get { return dataHolder.NoPhotos; }
			set { this.dataHolder.NoPhotos = value; }
		}
		/// <summary>
		/// Has daves util function added the regulars to the group?
		/// </summary>
		public bool AddedRegulars
		{
			get { return dataHolder.AddedRegulars; }
			set { this.dataHolder.AddedRegulars = value; }
		}
		/// <summary>
		/// Css to emit for the styled pages
		/// </summary>
		public string StyledCss
		{
			get { return dataHolder.StyledCss; }
			set { this.dataHolder.StyledCss = value; }
		}
		/// <summary>
		/// Xml to emit for the styled pages
		/// </summary>
		public string StyledXml
		{
			get { return dataHolder.StyledXml; }
			set { this.dataHolder.StyledXml = value; }
		}
		#endregion
		public Brand Brand
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new Brand(K);
					}
					else
					{
						bob = new Brand();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region BrandSet
	public partial class BrandSet : BobSet, IEnumerable<Brand>
	{
		public BrandSet(Query query) : base(query) { }

		public Brand this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new Brand(this);
					((Brand)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (Brand)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new BrandTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<Brand> ToList()
		{
			List<Brand> list = new List<Brand>();
			foreach (Brand item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<Brand> Members

		public new IEnumerator<Brand> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region BrandTableDef
	public class BrandTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "Brand";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "7CDA01A4";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return Brand.GetColumnName((Brand.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.Brand;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return true;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return Brand.Columns.K;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			Brand.Columns c = (Brand.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case Brand.Columns.K: ColumnStore[i] = new ColumnDef(c, "K", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey | SqlColumnFlag.AutoNumber, null); break;
					case Brand.Columns.Name: ColumnStore[i] = new ColumnDef(c, "Name", SqlDbType.VarChar, 200, ""); break;
					case Brand.Columns.PromoterK: ColumnStore[i] = new ColumnDef(c, "PromoterK", SqlDbType.Int, 0); break;
					case Brand.Columns.Pic: ColumnStore[i] = new ColumnDef(c, "Pic", SqlDbType.UniqueIdentifier, Guid.Empty); break;
					case Brand.Columns.OwnerUsrK: ColumnStore[i] = new ColumnDef(c, "OwnerUsrK", SqlDbType.Int, 0); break;
					case Brand.Columns.IsNew: ColumnStore[i] = new ColumnDef(c, "IsNew", SqlDbType.Bit, false); break;
					case Brand.Columns.IsEdited: ColumnStore[i] = new ColumnDef(c, "IsEdited", SqlDbType.Bit, false); break;
					case Brand.Columns.DuplicateGuid: ColumnStore[i] = new ColumnDef(c, "DuplicateGuid", SqlDbType.UniqueIdentifier, Guid.Empty); break;
					case Brand.Columns.PromoterStatus: ColumnStore[i] = new ColumnDef(c, "PromoterStatus", SqlDbType.Int, 0); break;
					case Brand.Columns.UrlName: ColumnStore[i] = new ColumnDef(c, "UrlName", SqlDbType.VarChar, 200, ""); break;
					case Brand.Columns.PicState: ColumnStore[i] = new ColumnDef(c, "PicState", SqlDbType.VarChar, 100, ""); break;
					case Brand.Columns.PicPhotoK: ColumnStore[i] = new ColumnDef(c, "PicPhotoK", SqlDbType.Int, 0); break;
					case Brand.Columns.PicMiscK: ColumnStore[i] = new ColumnDef(c, "PicMiscK", SqlDbType.Int, 0); break;
					case Brand.Columns.GroupK: ColumnStore[i] = new ColumnDef(c, "GroupK", SqlDbType.Int, 0); break;
					case Brand.Columns.TotalComments: ColumnStore[i] = new ColumnDef(c, "TotalComments", SqlDbType.Int, 0); break;
					case Brand.Columns.LastPost: ColumnStore[i] = new ColumnDef(c, "LastPost", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case Brand.Columns.AverageCommentDateTime: ColumnStore[i] = new ColumnDef(c, "AverageCommentDateTime", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case Brand.Columns.DateTimeCreated: ColumnStore[i] = new ColumnDef(c, "DateTimeCreated", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case Brand.Columns.NoPhotos: ColumnStore[i] = new ColumnDef(c, "NoPhotos", SqlDbType.Bit, false); break;
					case Brand.Columns.AddedRegulars: ColumnStore[i] = new ColumnDef(c, "AddedRegulars", SqlDbType.Bit, false); break;
					case Brand.Columns.StyledCss: ColumnStore[i] = new ColumnDef(c, "StyledCss", SqlDbType.Text, ""); break;
					case Brand.Columns.StyledXml: ColumnStore[i] = new ColumnDef(c, "StyledXml", SqlDbType.Text, ""); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(Brand.Columns.K);
						InitColumn(Brand.Columns.Name);
						InitColumn(Brand.Columns.PromoterK);
						InitColumn(Brand.Columns.Pic);
						InitColumn(Brand.Columns.OwnerUsrK);
						InitColumn(Brand.Columns.IsNew);
						InitColumn(Brand.Columns.IsEdited);
						InitColumn(Brand.Columns.DuplicateGuid);
						InitColumn(Brand.Columns.PromoterStatus);
						InitColumn(Brand.Columns.UrlName);
						InitColumn(Brand.Columns.PicState);
						InitColumn(Brand.Columns.PicPhotoK);
						InitColumn(Brand.Columns.PicMiscK);
						InitColumn(Brand.Columns.GroupK);
						InitColumn(Brand.Columns.TotalComments);
						InitColumn(Brand.Columns.LastPost);
						InitColumn(Brand.Columns.AverageCommentDateTime);
						InitColumn(Brand.Columns.DateTimeCreated);
						InitColumn(Brand.Columns.NoPhotos);
						InitColumn(Brand.Columns.AddedRegulars);
						InitColumn(Brand.Columns.StyledCss);
						InitColumn(Brand.Columns.StyledXml);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region Buddy
	/// <summary>
	/// Links one user to another
	/// </summary>
	public partial class Buddy : Model.Entities.Buddy, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// Primary K - not clustered index
			/// </summary>
			K = 0x000d0001,
			/// <summary>
			/// The user that added the buddy
			/// </summary>
			UsrK = 0x000d0002,
			/// <summary>
			/// The buddy
			/// </summary>
			BuddyUsrK = 0x000d0003,
			/// <summary>
			/// Has the buddy added this user to his buddy list?
			/// </summary>
			FullBuddy = 0x000d0004,
			/// <summary>
			/// Has the user asked not to be alerted by pop-up from this buddy? If so, this is set to the data/time that the request was made. For 15 mins pop-up alerts will not be sent.
			/// </summary>
			LastPopupHoldOff = 0x000d0005,
			/// <summary>
			/// Can BuddyUsr invite Buddy to threads?
			/// </summary>
			CanInvite = 0x000d0006,
			/// <summary>
			/// Can Buddy invite BuddyUsr to threads?
			/// </summary>
			CanBuddyInvite = 0x000d0007,
			/// <summary>
			/// Has this buddy request been denied?
			/// </summary>
			Denied = 0x000d0008,
			/// <summary>
			/// 0 = Nickname, 1 = Real Name, 2 = Email Address, 3 = Spotter Number
			/// </summary>
			BuddyFoundByMethod = 0x000d0009,
			/// <summary>
			/// If this is a buddy invite for a skeleton user, then a nickname is required
			/// </summary>
			SkeletonName = 0x000d000a,
		}
		#endregion
		public static string GetColumnName(Buddy.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case Buddy.Columns.K: return "K";
						case Buddy.Columns.UsrK: return "UsrK";
						case Buddy.Columns.BuddyUsrK: return "BuddyUsrK";
						case Buddy.Columns.FullBuddy: return "FullBuddy";
						case Buddy.Columns.LastPopupHoldOff: return "LastPopupHoldOff";
						case Buddy.Columns.CanInvite: return "CanInvite";
						case Buddy.Columns.CanBuddyInvite: return "CanBuddyInvite";
						case Buddy.Columns.Denied: return "Denied";
						case Buddy.Columns.BuddyFoundByMethod: return "BuddyFoundByMethod";
						case Buddy.Columns.SkeletonName: return "SkeletonName";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(Buddy.Columns columnEnum)
		{
			switch (columnEnum)
			{
														default: return false;
			}
		}


		#region Common
 
		public Buddy(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);  }
		public Buddy()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.Buddy);
		}
		public Buddy(BobSet bs)
		{
			this.Bob = new Bob(bs.Table, bs);
		}
		public Buddy(int BuddyK, IBob Parent, object Column)
			: this()
		{
			Bob.GetBobFromParent(BuddyK, Parent.Bob, Column, TablesEnum.Buddy);
		}
		public Buddy(int BuddyK)
			: this()
		{
			Bob.GetBobFromPrimaryKey(BuddyK);
		}
		#endregion

	}
	#endregion
	#region BuddyTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region Buddy
	/// <summary>
	/// Links one user to another
	/// </summary>
	[Serializable]
	public partial class Buddy 
	{
		
		#region Simple members
		/// <summary>
		/// Primary K - not clustered index
		/// </summary>
		public override int K
		{
			get { return (int)this[Buddy.Columns.K] as int? ?? 0 ; }
			set { this[Buddy.Columns.K] = value; }
		}
		/// <summary>
		/// The user that added the buddy
		/// </summary>
		public override int UsrK
		{
			get { return (int)this[Buddy.Columns.UsrK]; }
			set { this[Buddy.Columns.UsrK] = value; }
		}
		/// <summary>
		/// The buddy
		/// </summary>
		public override int BuddyUsrK
		{
			get { return (int)this[Buddy.Columns.BuddyUsrK]; }
			set { this[Buddy.Columns.BuddyUsrK] = value; }
		}
		/// <summary>
		/// Has the buddy added this user to his buddy list?
		/// </summary>
		public override bool FullBuddy
		{
			get { return (bool)this[Buddy.Columns.FullBuddy]; }
			set { this[Buddy.Columns.FullBuddy] = value; }
		}
		/// <summary>
		/// Has the user asked not to be alerted by pop-up from this buddy? If so, this is set to the data/time that the request was made. For 15 mins pop-up alerts will not be sent.
		/// </summary>
		public override DateTime LastPopupHoldOff
		{
			get { return (DateTime)this[Buddy.Columns.LastPopupHoldOff]; }
			set { this[Buddy.Columns.LastPopupHoldOff] = value; }
		}
		/// <summary>
		/// Can BuddyUsr invite Buddy to threads?
		/// </summary>
		public override bool CanInvite
		{
			get { return (bool)this[Buddy.Columns.CanInvite]; }
			set { this[Buddy.Columns.CanInvite] = value; }
		}
		/// <summary>
		/// Can Buddy invite BuddyUsr to threads?
		/// </summary>
		public override bool CanBuddyInvite
		{
			get { return (bool)this[Buddy.Columns.CanBuddyInvite]; }
			set { this[Buddy.Columns.CanBuddyInvite] = value; }
		}
		/// <summary>
		/// Has this buddy request been denied?
		/// </summary>
		public override bool Denied
		{
			get { return (bool)this[Buddy.Columns.Denied]; }
			set { this[Buddy.Columns.Denied] = value; }
		}
		/// <summary>
		/// 0 = Nickname, 1 = Real Name, 2 = Email Address, 3 = Spotter Number
		/// </summary>
		public override int BuddyFoundByMethod
		{
			get { return (int)this[Buddy.Columns.BuddyFoundByMethod]; }
			set { this[Buddy.Columns.BuddyFoundByMethod] = value; }
		}
		/// <summary>
		/// If this is a buddy invite for a skeleton user, then a nickname is required
		/// </summary>
		public override string SkeletonName
		{
			get { return (string)this[Buddy.Columns.SkeletonName]; }
			set { this[Buddy.Columns.SkeletonName] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildBuddys
	{
		CachedSqlSelect<Buddy> ChildBuddys();
		CachedSqlSelect<Buddy> ChildBuddys(Q where);
		CachedSqlSelect<Buddy> ChildBuddys(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<Buddy> ChildBuddys(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class Buddy 
		{
		}

	#region BuddyDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region BuddyDataHolder
	/// <summary>
	/// Links one user to anotherDataHolder
	/// </summary>
	[Serializable]
	public partial class BuddyDataHolder : DataHolder<Buddy>
	{
		Buddy dataHolder;
		[NonSerializedAttribute] Buddy bob;

		public BuddyDataHolder()
		{
			this.dataHolder = new Buddy();
		}
		
		void CopyValues(Buddy source, Buddy destination)
		{
			destination[Bobs.Buddy.Columns.K] = source[Bobs.Buddy.Columns.K];
			destination[Bobs.Buddy.Columns.UsrK] = source[Bobs.Buddy.Columns.UsrK];
			destination[Bobs.Buddy.Columns.BuddyUsrK] = source[Bobs.Buddy.Columns.BuddyUsrK];
			destination[Bobs.Buddy.Columns.FullBuddy] = source[Bobs.Buddy.Columns.FullBuddy];
			destination[Bobs.Buddy.Columns.LastPopupHoldOff] = source[Bobs.Buddy.Columns.LastPopupHoldOff];
			destination[Bobs.Buddy.Columns.CanInvite] = source[Bobs.Buddy.Columns.CanInvite];
			destination[Bobs.Buddy.Columns.CanBuddyInvite] = source[Bobs.Buddy.Columns.CanBuddyInvite];
			destination[Bobs.Buddy.Columns.Denied] = source[Bobs.Buddy.Columns.Denied];
			destination[Bobs.Buddy.Columns.BuddyFoundByMethod] = source[Bobs.Buddy.Columns.BuddyFoundByMethod];
			destination[Bobs.Buddy.Columns.SkeletonName] = source[Bobs.Buddy.Columns.SkeletonName];
		}
		
		public BuddyDataHolder(Buddy bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// Primary K - not clustered index
		/// </summary>
		public int K
		{
			get { return dataHolder.K; }
			set { this.dataHolder.K = value; }
		}
		/// <summary>
		/// The user that added the buddy
		/// </summary>
		public int UsrK
		{
			get { return dataHolder.UsrK; }
			set { this.dataHolder.UsrK = value; }
		}
		/// <summary>
		/// The buddy
		/// </summary>
		public int BuddyUsrK
		{
			get { return dataHolder.BuddyUsrK; }
			set { this.dataHolder.BuddyUsrK = value; }
		}
		/// <summary>
		/// Has the buddy added this user to his buddy list?
		/// </summary>
		public bool FullBuddy
		{
			get { return dataHolder.FullBuddy; }
			set { this.dataHolder.FullBuddy = value; }
		}
		/// <summary>
		/// Has the user asked not to be alerted by pop-up from this buddy? If so, this is set to the data/time that the request was made. For 15 mins pop-up alerts will not be sent.
		/// </summary>
		public DateTime LastPopupHoldOff
		{
			get { return dataHolder.LastPopupHoldOff; }
			set { this.dataHolder.LastPopupHoldOff = value; }
		}
		/// <summary>
		/// Can BuddyUsr invite Buddy to threads?
		/// </summary>
		public bool CanInvite
		{
			get { return dataHolder.CanInvite; }
			set { this.dataHolder.CanInvite = value; }
		}
		/// <summary>
		/// Can Buddy invite BuddyUsr to threads?
		/// </summary>
		public bool CanBuddyInvite
		{
			get { return dataHolder.CanBuddyInvite; }
			set { this.dataHolder.CanBuddyInvite = value; }
		}
		/// <summary>
		/// Has this buddy request been denied?
		/// </summary>
		public bool Denied
		{
			get { return dataHolder.Denied; }
			set { this.dataHolder.Denied = value; }
		}
		/// <summary>
		/// 0 = Nickname, 1 = Real Name, 2 = Email Address, 3 = Spotter Number
		/// </summary>
		public int BuddyFoundByMethod
		{
			get { return dataHolder.BuddyFoundByMethod; }
			set { this.dataHolder.BuddyFoundByMethod = value; }
		}
		/// <summary>
		/// If this is a buddy invite for a skeleton user, then a nickname is required
		/// </summary>
		public string SkeletonName
		{
			get { return dataHolder.SkeletonName; }
			set { this.dataHolder.SkeletonName = value; }
		}
		#endregion
		public Buddy Buddy
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new Buddy(K);
					}
					else
					{
						bob = new Buddy();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region BuddySet
	public partial class BuddySet : BobSet, IEnumerable<Buddy>
	{
		public BuddySet(Query query) : base(query) { }

		public Buddy this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new Buddy(this);
					((Buddy)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (Buddy)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new BuddyTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<Buddy> ToList()
		{
			List<Buddy> list = new List<Buddy>();
			foreach (Buddy item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<Buddy> Members

		public new IEnumerator<Buddy> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region BuddyTableDef
	public class BuddyTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "Buddy";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "85FC3E35";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return Buddy.GetColumnName((Buddy.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.Buddy;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return true;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return Buddy.Columns.K;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			Buddy.Columns c = (Buddy.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case Buddy.Columns.K: ColumnStore[i] = new ColumnDef(c, "K", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey | SqlColumnFlag.AutoNumber, null); break;
					case Buddy.Columns.UsrK: ColumnStore[i] = new ColumnDef(c, "UsrK", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey, 0); break;
					case Buddy.Columns.BuddyUsrK: ColumnStore[i] = new ColumnDef(c, "BuddyUsrK", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey, 0); break;
					case Buddy.Columns.FullBuddy: ColumnStore[i] = new ColumnDef(c, "FullBuddy", SqlDbType.Bit, false); break;
					case Buddy.Columns.LastPopupHoldOff: ColumnStore[i] = new ColumnDef(c, "LastPopupHoldOff", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case Buddy.Columns.CanInvite: ColumnStore[i] = new ColumnDef(c, "CanInvite", SqlDbType.Bit, false); break;
					case Buddy.Columns.CanBuddyInvite: ColumnStore[i] = new ColumnDef(c, "CanBuddyInvite", SqlDbType.Bit, false); break;
					case Buddy.Columns.Denied: ColumnStore[i] = new ColumnDef(c, "Denied", SqlDbType.Bit, false); break;
					case Buddy.Columns.BuddyFoundByMethod: ColumnStore[i] = new ColumnDef(c, "BuddyFoundByMethod", SqlDbType.Int, 0); break;
					case Buddy.Columns.SkeletonName: ColumnStore[i] = new ColumnDef(c, "SkeletonName", SqlDbType.VarChar, ""); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(Buddy.Columns.K);
						InitColumn(Buddy.Columns.UsrK);
						InitColumn(Buddy.Columns.BuddyUsrK);
						InitColumn(Buddy.Columns.FullBuddy);
						InitColumn(Buddy.Columns.LastPopupHoldOff);
						InitColumn(Buddy.Columns.CanInvite);
						InitColumn(Buddy.Columns.CanBuddyInvite);
						InitColumn(Buddy.Columns.Denied);
						InitColumn(Buddy.Columns.BuddyFoundByMethod);
						InitColumn(Buddy.Columns.SkeletonName);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region CampaignCredit
	/// <summary>
	/// Used to track how many campaign credits each promoter has bought / spent
	/// </summary>
	public partial class CampaignCredit : Model.Entities.CampaignCredit, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// auto incrementing primary key
			/// </summary>
			K = 0x000e0001,
			/// <summary>
			/// the promoter
			/// </summary>
			PromoterK = 0x000e0002,
			/// <summary>
			/// DateTime at which the Credit addition or subtraction occurred
			/// </summary>
			ActionDateTime = 0x000e0003,
			/// <summary>
			/// the type of the linked object - InsertionOrder = 19, Banner = 16, EmailSpotlight = 20, Event = 2
			/// </summary>
			BuyableObjectType = 0x000e0004,
			/// <summary>
			/// the key of the linked object
			/// </summary>
			BuyableObjectK = 0x000e0005,
			/// <summary>
			/// DateTime til when this buyable object is locked
			/// </summary>
			BuyableLockDateTime = 0x000e0006,
			/// <summary>
			/// the invoice item type
			/// </summary>
			InvoiceItemType = 0x000e0007,
			/// <summary>
			/// if not linked to an object, this is the description
			/// </summary>
			Description = 0x000e0008,
			/// <summary>
			/// the credits for this item (+ve for credits being bought, -ve for credits being spent)
			/// </summary>
			Credits = 0x000e0009,
			/// <summary>
			/// used when buying CampaignCredits - otherwise always true
			/// </summary>
			Enabled = 0x000e000a,
			/// <summary>
			/// running total of the promoters balance to date, including this CampaignCredit
			/// </summary>
			BalanceToDate = 0x000e000b,
			/// <summary>
			/// Display ascending ordering to order records processed at the same action datetime
			/// </summary>
			DisplayOrder = 0x000e000c,
			/// <summary>
			/// UsrK of usr who this campaign credit was created for
			/// </summary>
			UsrK = 0x000e000d,
			/// <summary>
			/// ActionUsrK of usr who created this campaign credit
			/// </summary>
			ActionUsrK = 0x000e000e,
			/// <summary>
			/// Notes for this campaign credit
			/// </summary>
			Notes = 0x000e000f,
			/// <summary>
			/// Admin override to fix discount level for price of credits for this campaign credit
			/// </summary>
			FixedDiscount = 0x000e0010,
			/// <summary>
			/// Flag to indicate if price is fixed and if to use FixedDiscount
			/// </summary>
			IsPriceFixed = 0x000e0011,
		}
		#endregion
		public static string GetColumnName(CampaignCredit.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case CampaignCredit.Columns.K: return "K";
						case CampaignCredit.Columns.PromoterK: return "PromoterK";
						case CampaignCredit.Columns.ActionDateTime: return "ActionDateTime";
						case CampaignCredit.Columns.BuyableObjectType: return "BuyableObjectType";
						case CampaignCredit.Columns.BuyableObjectK: return "BuyableObjectK";
						case CampaignCredit.Columns.BuyableLockDateTime: return "BuyableLockDateTime";
						case CampaignCredit.Columns.InvoiceItemType: return "InvoiceItemType";
						case CampaignCredit.Columns.Description: return "Description";
						case CampaignCredit.Columns.Credits: return "Credits";
						case CampaignCredit.Columns.Enabled: return "Enabled";
						case CampaignCredit.Columns.BalanceToDate: return "BalanceToDate";
						case CampaignCredit.Columns.DisplayOrder: return "DisplayOrder";
						case CampaignCredit.Columns.UsrK: return "UsrK";
						case CampaignCredit.Columns.ActionUsrK: return "ActionUsrK";
						case CampaignCredit.Columns.Notes: return "Notes";
						case CampaignCredit.Columns.FixedDiscount: return "FixedDiscount";
						case CampaignCredit.Columns.IsPriceFixed: return "IsPriceFixed";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(CampaignCredit.Columns columnEnum)
		{
			switch (columnEnum)
			{
																					default: return false;
			}
		}


		#region Common
 
		public CampaignCredit(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);  }
		public CampaignCredit()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.CampaignCredit);
		}
		public CampaignCredit(BobSet bs)
		{
			this.Bob = new Bob(bs.Table, bs);
		}
		public CampaignCredit(int CampaignCreditK, IBob Parent, object Column)
			: this()
		{
			Bob.GetBobFromParent(CampaignCreditK, Parent.Bob, Column, TablesEnum.CampaignCredit);
		}
		public CampaignCredit(int CampaignCreditK)
			: this()
		{
			Bob.GetBobFromPrimaryKey(CampaignCreditK);
		}
		#endregion

	}
	#endregion
	#region CampaignCreditTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region CampaignCredit
	/// <summary>
	/// Used to track how many campaign credits each promoter has bought / spent
	/// </summary>
	[Serializable]
	public partial class CampaignCredit 
	{
		
		#region Simple members
		/// <summary>
		/// auto incrementing primary key
		/// </summary>
		public override int K
		{
			get { return (int)this[CampaignCredit.Columns.K] as int? ?? 0 ; }
			set { this[CampaignCredit.Columns.K] = value; }
		}
		/// <summary>
		/// the promoter
		/// </summary>
		public override int PromoterK
		{
			get { return (int)this[CampaignCredit.Columns.PromoterK]; }
			set { this[CampaignCredit.Columns.PromoterK] = value; }
		}
		/// <summary>
		/// DateTime at which the Credit addition or subtraction occurred
		/// </summary>
		public override DateTime ActionDateTime
		{
			get { return (DateTime)this[CampaignCredit.Columns.ActionDateTime]; }
			set { this[CampaignCredit.Columns.ActionDateTime] = value; }
		}
		/// <summary>
		/// the type of the linked object - InsertionOrder = 19, Banner = 16, EmailSpotlight = 20, Event = 2
		/// </summary>
		public override int BuyableObjectType
		{
			get { return (int)this[CampaignCredit.Columns.BuyableObjectType]; }
			set { this[CampaignCredit.Columns.BuyableObjectType] = value; }
		}
		/// <summary>
		/// the key of the linked object
		/// </summary>
		public override int BuyableObjectK
		{
			get { return (int)this[CampaignCredit.Columns.BuyableObjectK]; }
			set { this[CampaignCredit.Columns.BuyableObjectK] = value; }
		}
		/// <summary>
		/// DateTime til when this buyable object is locked
		/// </summary>
		public override DateTime BuyableLockDateTime
		{
			get { return (DateTime)this[CampaignCredit.Columns.BuyableLockDateTime]; }
			set { this[CampaignCredit.Columns.BuyableLockDateTime] = value; }
		}
		/// <summary>
		/// the invoice item type
		/// </summary>
		public override int InvoiceItemType
		{
			get { return (int)this[CampaignCredit.Columns.InvoiceItemType]; }
			set { this[CampaignCredit.Columns.InvoiceItemType] = value; }
		}
		/// <summary>
		/// if not linked to an object, this is the description
		/// </summary>
		public override string Description
		{
			get { return (string)this[CampaignCredit.Columns.Description]; }
			set { this[CampaignCredit.Columns.Description] = value; }
		}
		/// <summary>
		/// the credits for this item (+ve for credits being bought, -ve for credits being spent)
		/// </summary>
		public override int Credits
		{
			get { return (int)this[CampaignCredit.Columns.Credits]; }
			set { this[CampaignCredit.Columns.Credits] = value; }
		}
		/// <summary>
		/// used when buying CampaignCredits - otherwise always true
		/// </summary>
		public override bool Enabled
		{
			get { return (bool)this[CampaignCredit.Columns.Enabled]; }
			set { this[CampaignCredit.Columns.Enabled] = value; }
		}
		/// <summary>
		/// running total of the promoters balance to date, including this CampaignCredit
		/// </summary>
		public override int BalanceToDate
		{
			get { return (int)this[CampaignCredit.Columns.BalanceToDate]; }
			set { this[CampaignCredit.Columns.BalanceToDate] = value; }
		}
		/// <summary>
		/// Display ascending ordering to order records processed at the same action datetime
		/// </summary>
		public override int DisplayOrder
		{
			get { return (int)this[CampaignCredit.Columns.DisplayOrder]; }
			set { this[CampaignCredit.Columns.DisplayOrder] = value; }
		}
		/// <summary>
		/// UsrK of usr who this campaign credit was created for
		/// </summary>
		public override int UsrK
		{
			get { return (int)this[CampaignCredit.Columns.UsrK]; }
			set { this[CampaignCredit.Columns.UsrK] = value; }
		}
		/// <summary>
		/// ActionUsrK of usr who created this campaign credit
		/// </summary>
		public override int ActionUsrK
		{
			get { return (int)this[CampaignCredit.Columns.ActionUsrK]; }
			set { this[CampaignCredit.Columns.ActionUsrK] = value; }
		}
		/// <summary>
		/// Notes for this campaign credit
		/// </summary>
		public override string Notes
		{
			get { return (string)this[CampaignCredit.Columns.Notes]; }
			set { this[CampaignCredit.Columns.Notes] = value; }
		}
		/// <summary>
		/// Admin override to fix discount level for price of credits for this campaign credit
		/// </summary>
		public override double FixedDiscount
		{
			get { return (double)this[CampaignCredit.Columns.FixedDiscount]; }
			set { this[CampaignCredit.Columns.FixedDiscount] = value; }
		}
		/// <summary>
		/// Flag to indicate if price is fixed and if to use FixedDiscount
		/// </summary>
		public override bool IsPriceFixed
		{
			get { return (bool)this[CampaignCredit.Columns.IsPriceFixed]; }
			set { this[CampaignCredit.Columns.IsPriceFixed] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildCampaignCredits
	{
		CachedSqlSelect<CampaignCredit> ChildCampaignCredits();
		CachedSqlSelect<CampaignCredit> ChildCampaignCredits(Q where);
		CachedSqlSelect<CampaignCredit> ChildCampaignCredits(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<CampaignCredit> ChildCampaignCredits(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class CampaignCredit 
		{
		}

	#region CampaignCreditDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region CampaignCreditDataHolder
	/// <summary>
	/// Used to track how many campaign credits each promoter has bought / spentDataHolder
	/// </summary>
	[Serializable]
	public partial class CampaignCreditDataHolder : DataHolder<CampaignCredit>
	{
		CampaignCredit dataHolder;
		[NonSerializedAttribute] CampaignCredit bob;

		public CampaignCreditDataHolder()
		{
			this.dataHolder = new CampaignCredit();
		}
		
		void CopyValues(CampaignCredit source, CampaignCredit destination)
		{
			destination[Bobs.CampaignCredit.Columns.K] = source[Bobs.CampaignCredit.Columns.K];
			destination[Bobs.CampaignCredit.Columns.PromoterK] = source[Bobs.CampaignCredit.Columns.PromoterK];
			destination[Bobs.CampaignCredit.Columns.ActionDateTime] = source[Bobs.CampaignCredit.Columns.ActionDateTime];
			destination[Bobs.CampaignCredit.Columns.BuyableObjectType] = source[Bobs.CampaignCredit.Columns.BuyableObjectType];
			destination[Bobs.CampaignCredit.Columns.BuyableObjectK] = source[Bobs.CampaignCredit.Columns.BuyableObjectK];
			destination[Bobs.CampaignCredit.Columns.BuyableLockDateTime] = source[Bobs.CampaignCredit.Columns.BuyableLockDateTime];
			destination[Bobs.CampaignCredit.Columns.InvoiceItemType] = source[Bobs.CampaignCredit.Columns.InvoiceItemType];
			destination[Bobs.CampaignCredit.Columns.Description] = source[Bobs.CampaignCredit.Columns.Description];
			destination[Bobs.CampaignCredit.Columns.Credits] = source[Bobs.CampaignCredit.Columns.Credits];
			destination[Bobs.CampaignCredit.Columns.Enabled] = source[Bobs.CampaignCredit.Columns.Enabled];
			destination[Bobs.CampaignCredit.Columns.BalanceToDate] = source[Bobs.CampaignCredit.Columns.BalanceToDate];
			destination[Bobs.CampaignCredit.Columns.DisplayOrder] = source[Bobs.CampaignCredit.Columns.DisplayOrder];
			destination[Bobs.CampaignCredit.Columns.UsrK] = source[Bobs.CampaignCredit.Columns.UsrK];
			destination[Bobs.CampaignCredit.Columns.ActionUsrK] = source[Bobs.CampaignCredit.Columns.ActionUsrK];
			destination[Bobs.CampaignCredit.Columns.Notes] = source[Bobs.CampaignCredit.Columns.Notes];
			destination[Bobs.CampaignCredit.Columns.FixedDiscount] = source[Bobs.CampaignCredit.Columns.FixedDiscount];
			destination[Bobs.CampaignCredit.Columns.IsPriceFixed] = source[Bobs.CampaignCredit.Columns.IsPriceFixed];
		}
		
		public CampaignCreditDataHolder(CampaignCredit bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// auto incrementing primary key
		/// </summary>
		public int K
		{
			get { return dataHolder.K; }
			set { this.dataHolder.K = value; }
		}
		/// <summary>
		/// the promoter
		/// </summary>
		public int PromoterK
		{
			get { return dataHolder.PromoterK; }
			set { this.dataHolder.PromoterK = value; }
		}
		/// <summary>
		/// DateTime at which the Credit addition or subtraction occurred
		/// </summary>
		public DateTime ActionDateTime
		{
			get { return dataHolder.ActionDateTime; }
			set { this.dataHolder.ActionDateTime = value; }
		}
		/// <summary>
		/// the type of the linked object - InsertionOrder = 19, Banner = 16, EmailSpotlight = 20, Event = 2
		/// </summary>
		public int BuyableObjectType
		{
			get { return dataHolder.BuyableObjectType; }
			set { this.dataHolder.BuyableObjectType = value; }
		}
		/// <summary>
		/// the key of the linked object
		/// </summary>
		public int BuyableObjectK
		{
			get { return dataHolder.BuyableObjectK; }
			set { this.dataHolder.BuyableObjectK = value; }
		}
		/// <summary>
		/// DateTime til when this buyable object is locked
		/// </summary>
		public DateTime BuyableLockDateTime
		{
			get { return dataHolder.BuyableLockDateTime; }
			set { this.dataHolder.BuyableLockDateTime = value; }
		}
		/// <summary>
		/// the invoice item type
		/// </summary>
		public int InvoiceItemType
		{
			get { return dataHolder.InvoiceItemType; }
			set { this.dataHolder.InvoiceItemType = value; }
		}
		/// <summary>
		/// if not linked to an object, this is the description
		/// </summary>
		public string Description
		{
			get { return dataHolder.Description; }
			set { this.dataHolder.Description = value; }
		}
		/// <summary>
		/// the credits for this item (+ve for credits being bought, -ve for credits being spent)
		/// </summary>
		public int Credits
		{
			get { return dataHolder.Credits; }
			set { this.dataHolder.Credits = value; }
		}
		/// <summary>
		/// used when buying CampaignCredits - otherwise always true
		/// </summary>
		public bool Enabled
		{
			get { return dataHolder.Enabled; }
			set { this.dataHolder.Enabled = value; }
		}
		/// <summary>
		/// running total of the promoters balance to date, including this CampaignCredit
		/// </summary>
		public int BalanceToDate
		{
			get { return dataHolder.BalanceToDate; }
			set { this.dataHolder.BalanceToDate = value; }
		}
		/// <summary>
		/// Display ascending ordering to order records processed at the same action datetime
		/// </summary>
		public int DisplayOrder
		{
			get { return dataHolder.DisplayOrder; }
			set { this.dataHolder.DisplayOrder = value; }
		}
		/// <summary>
		/// UsrK of usr who this campaign credit was created for
		/// </summary>
		public int UsrK
		{
			get { return dataHolder.UsrK; }
			set { this.dataHolder.UsrK = value; }
		}
		/// <summary>
		/// ActionUsrK of usr who created this campaign credit
		/// </summary>
		public int ActionUsrK
		{
			get { return dataHolder.ActionUsrK; }
			set { this.dataHolder.ActionUsrK = value; }
		}
		/// <summary>
		/// Notes for this campaign credit
		/// </summary>
		public string Notes
		{
			get { return dataHolder.Notes; }
			set { this.dataHolder.Notes = value; }
		}
		/// <summary>
		/// Admin override to fix discount level for price of credits for this campaign credit
		/// </summary>
		public double FixedDiscount
		{
			get { return dataHolder.FixedDiscount; }
			set { this.dataHolder.FixedDiscount = value; }
		}
		/// <summary>
		/// Flag to indicate if price is fixed and if to use FixedDiscount
		/// </summary>
		public bool IsPriceFixed
		{
			get { return dataHolder.IsPriceFixed; }
			set { this.dataHolder.IsPriceFixed = value; }
		}
		#endregion
		public CampaignCredit CampaignCredit
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new CampaignCredit(K);
					}
					else
					{
						bob = new CampaignCredit();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region CampaignCreditSet
	public partial class CampaignCreditSet : BobSet, IEnumerable<CampaignCredit>
	{
		public CampaignCreditSet(Query query) : base(query) { }

		public CampaignCredit this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new CampaignCredit(this);
					((CampaignCredit)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (CampaignCredit)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new CampaignCreditTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<CampaignCredit> ToList()
		{
			List<CampaignCredit> list = new List<CampaignCredit>();
			foreach (CampaignCredit item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<CampaignCredit> Members

		public new IEnumerator<CampaignCredit> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region CampaignCreditTableDef
	public class CampaignCreditTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "CampaignCredit";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "CDCF195E";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return CampaignCredit.GetColumnName((CampaignCredit.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.CampaignCredit;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return true;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return CampaignCredit.Columns.K;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			CampaignCredit.Columns c = (CampaignCredit.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case CampaignCredit.Columns.K: ColumnStore[i] = new ColumnDef(c, "K", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey | SqlColumnFlag.AutoNumber, null); break;
					case CampaignCredit.Columns.PromoterK: ColumnStore[i] = new ColumnDef(c, "PromoterK", SqlDbType.Int, 0); break;
					case CampaignCredit.Columns.ActionDateTime: ColumnStore[i] = new ColumnDef(c, "ActionDateTime", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case CampaignCredit.Columns.BuyableObjectType: ColumnStore[i] = new ColumnDef(c, "BuyableObjectType", SqlDbType.Int, 0); break;
					case CampaignCredit.Columns.BuyableObjectK: ColumnStore[i] = new ColumnDef(c, "BuyableObjectK", SqlDbType.Int, 0); break;
					case CampaignCredit.Columns.BuyableLockDateTime: ColumnStore[i] = new ColumnDef(c, "BuyableLockDateTime", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case CampaignCredit.Columns.InvoiceItemType: ColumnStore[i] = new ColumnDef(c, "InvoiceItemType", SqlDbType.Int, 0); break;
					case CampaignCredit.Columns.Description: ColumnStore[i] = new ColumnDef(c, "Description", SqlDbType.VarChar, 250, ""); break;
					case CampaignCredit.Columns.Credits: ColumnStore[i] = new ColumnDef(c, "Credits", SqlDbType.Int, 0); break;
					case CampaignCredit.Columns.Enabled: ColumnStore[i] = new ColumnDef(c, "Enabled", SqlDbType.Bit, false); break;
					case CampaignCredit.Columns.BalanceToDate: ColumnStore[i] = new ColumnDef(c, "BalanceToDate", SqlDbType.Int, 0); break;
					case CampaignCredit.Columns.DisplayOrder: ColumnStore[i] = new ColumnDef(c, "DisplayOrder", SqlDbType.Int, 0); break;
					case CampaignCredit.Columns.UsrK: ColumnStore[i] = new ColumnDef(c, "UsrK", SqlDbType.Int, 0); break;
					case CampaignCredit.Columns.ActionUsrK: ColumnStore[i] = new ColumnDef(c, "ActionUsrK", SqlDbType.Int, 0); break;
					case CampaignCredit.Columns.Notes: ColumnStore[i] = new ColumnDef(c, "Notes", SqlDbType.Text, ""); break;
					case CampaignCredit.Columns.FixedDiscount: ColumnStore[i] = new ColumnDef(c, "FixedDiscount", SqlDbType.Float, 0.0); break;
					case CampaignCredit.Columns.IsPriceFixed: ColumnStore[i] = new ColumnDef(c, "IsPriceFixed", SqlDbType.Bit, false); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(CampaignCredit.Columns.K);
						InitColumn(CampaignCredit.Columns.PromoterK);
						InitColumn(CampaignCredit.Columns.ActionDateTime);
						InitColumn(CampaignCredit.Columns.BuyableObjectType);
						InitColumn(CampaignCredit.Columns.BuyableObjectK);
						InitColumn(CampaignCredit.Columns.BuyableLockDateTime);
						InitColumn(CampaignCredit.Columns.InvoiceItemType);
						InitColumn(CampaignCredit.Columns.Description);
						InitColumn(CampaignCredit.Columns.Credits);
						InitColumn(CampaignCredit.Columns.Enabled);
						InitColumn(CampaignCredit.Columns.BalanceToDate);
						InitColumn(CampaignCredit.Columns.DisplayOrder);
						InitColumn(CampaignCredit.Columns.UsrK);
						InitColumn(CampaignCredit.Columns.ActionUsrK);
						InitColumn(CampaignCredit.Columns.Notes);
						InitColumn(CampaignCredit.Columns.FixedDiscount);
						InitColumn(CampaignCredit.Columns.IsPriceFixed);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region Chat
	/// <summary>
	/// New optimised chat items table
	/// </summary>
	public partial class Chat : Model.Entities.Chat, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// The usr
			/// </summary>
			UsrK = 0x000f0001,
			/// <summary>
			/// Xml string containing chat items
			/// </summary>
			ChatItems = 0x000f0002,
			/// <summary>
			/// Long reprasenting the datetime of the last chat item in ticks
			/// </summary>
			LastChatItem = 0x000f0003,
			/// <summary>
			/// Session id used to stop multi-browser use
			/// </summary>
			SessionId = 0x000f0004,
		}
		#endregion
		public static string GetColumnName(Chat.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case Chat.Columns.UsrK: return "UsrK";
						case Chat.Columns.ChatItems: return "ChatItems";
						case Chat.Columns.LastChatItem: return "LastChatItem";
						case Chat.Columns.SessionId: return "SessionId";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(Chat.Columns columnEnum)
		{
			switch (columnEnum)
			{
								default: return false;
			}
		}


		#region Common
 
		public Chat(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);  }
		public Chat()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.Chat);
		}
		public Chat(BobSet bs)
		{
			this.Bob = new Bob(bs.Table, bs);
		}
		public Chat(int ChatUsrK, IBob Parent, object Column)
			: this()
		{
			Bob.GetBobFromParent(ChatUsrK, Parent.Bob, Column, TablesEnum.Chat);
		}
		public Chat(int ChatUsrK)
			: this()
		{
			Bob.GetBobFromPrimaryKey(ChatUsrK);
		}
		#endregion

	}
	#endregion
	#region ChatTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region Chat
	/// <summary>
	/// New optimised chat items table
	/// </summary>
	[Serializable]
	public partial class Chat 
	{
		
		#region Simple members
		/// <summary>
		/// The usr
		/// </summary>
		public override int UsrK
		{
			get { return (int)this[Chat.Columns.UsrK]; }
			set { this[Chat.Columns.UsrK] = value; }
		}
		/// <summary>
		/// Xml string containing chat items
		/// </summary>
		public override string ChatItems
		{
			get { return (string)this[Chat.Columns.ChatItems]; }
			set { this[Chat.Columns.ChatItems] = value; }
		}
		/// <summary>
		/// Long reprasenting the datetime of the last chat item in ticks
		/// </summary>
		public override long LastChatItem
		{
			get { return (long)this[Chat.Columns.LastChatItem]; }
			set { this[Chat.Columns.LastChatItem] = value; }
		}
		/// <summary>
		/// Session id used to stop multi-browser use
		/// </summary>
		public override int SessionId
		{
			get { return (int)this[Chat.Columns.SessionId]; }
			set { this[Chat.Columns.SessionId] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildChats
	{
		CachedSqlSelect<Chat> ChildChats();
		CachedSqlSelect<Chat> ChildChats(Q where);
		CachedSqlSelect<Chat> ChildChats(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<Chat> ChildChats(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class Chat 
		{
		}

	#region ChatDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region ChatDataHolder
	/// <summary>
	/// New optimised chat items tableDataHolder
	/// </summary>
	[Serializable]
	public partial class ChatDataHolder : DataHolder<Chat>
	{
		Chat dataHolder;
		[NonSerializedAttribute] Chat bob;

		public ChatDataHolder()
		{
			this.dataHolder = new Chat();
		}
		
		void CopyValues(Chat source, Chat destination)
		{
			destination[Bobs.Chat.Columns.UsrK] = source[Bobs.Chat.Columns.UsrK];
			destination[Bobs.Chat.Columns.ChatItems] = source[Bobs.Chat.Columns.ChatItems];
			destination[Bobs.Chat.Columns.LastChatItem] = source[Bobs.Chat.Columns.LastChatItem];
			destination[Bobs.Chat.Columns.SessionId] = source[Bobs.Chat.Columns.SessionId];
		}
		
		public ChatDataHolder(Chat bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// The usr
		/// </summary>
		public int UsrK
		{
			get { return dataHolder.UsrK; }
			set { this.dataHolder.UsrK = value; }
		}
		/// <summary>
		/// Xml string containing chat items
		/// </summary>
		public string ChatItems
		{
			get { return dataHolder.ChatItems; }
			set { this.dataHolder.ChatItems = value; }
		}
		/// <summary>
		/// Long reprasenting the datetime of the last chat item in ticks
		/// </summary>
		public long LastChatItem
		{
			get { return dataHolder.LastChatItem; }
			set { this.dataHolder.LastChatItem = value; }
		}
		/// <summary>
		/// Session id used to stop multi-browser use
		/// </summary>
		public int SessionId
		{
			get { return dataHolder.SessionId; }
			set { this.dataHolder.SessionId = value; }
		}
		#endregion
		public Chat Chat
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new Chat(K);
					}
					else
					{
						bob = new Chat();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region ChatSet
	public partial class ChatSet : BobSet, IEnumerable<Chat>
	{
		public ChatSet(Query query) : base(query) { }

		public Chat this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new Chat(this);
					((Chat)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (Chat)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new ChatTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<Chat> ToList()
		{
			List<Chat> list = new List<Chat>();
			foreach (Chat item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<Chat> Members

		public new IEnumerator<Chat> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region ChatTableDef
	public class ChatTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "Chat";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "497351AF";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return Chat.GetColumnName((Chat.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.Chat;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return true;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return Chat.Columns.UsrK;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			Chat.Columns c = (Chat.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case Chat.Columns.UsrK: ColumnStore[i] = new ColumnDef(c, "UsrK", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey, 0); break;
					case Chat.Columns.ChatItems: ColumnStore[i] = new ColumnDef(c, "ChatItems", SqlDbType.Text, ""); break;
					case Chat.Columns.LastChatItem: ColumnStore[i] = new ColumnDef(c, "LastChatItem", SqlDbType.BigInt, 0L); break;
					case Chat.Columns.SessionId: ColumnStore[i] = new ColumnDef(c, "SessionId", SqlDbType.Int, 0); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(Chat.Columns.UsrK);
						InitColumn(Chat.Columns.ChatItems);
						InitColumn(Chat.Columns.LastChatItem);
						InitColumn(Chat.Columns.SessionId);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region ChatMessage
	/// <summary>
	/// Chat messages
	/// </summary>
	public partial class ChatMessage : Model.Entities.ChatMessage, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// The primary key
			/// </summary>
			K = 0x00100001,
			/// <summary>
			/// Text of the message
			/// </summary>
			Text = 0x00100002,
			/// <summary>
			/// Date/time that the message was sent
			/// </summary>
			DateTime = 0x00100003,
			/// <summary>
			/// UsrK of the posting user
			/// </summary>
			UsrK = 0x00100004,
			/// <summary>
			/// Room posted to
			/// </summary>
			RoomGuid = 0x00100005,
			/// <summary>
			/// The guid of the main chat item (for the archive)
			/// </summary>
			ChatItemGuid = 0x00100006,
			/// <summary>
			/// Has this item been deleted from the archive?
			/// </summary>
			Deleted = 0x00100007,
		}
		#endregion
		public static string GetColumnName(ChatMessage.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case ChatMessage.Columns.K: return "K";
						case ChatMessage.Columns.Text: return "Text";
						case ChatMessage.Columns.DateTime: return "DateTime";
						case ChatMessage.Columns.UsrK: return "UsrK";
						case ChatMessage.Columns.RoomGuid: return "RoomGuid";
						case ChatMessage.Columns.ChatItemGuid: return "ChatItemGuid";
						case ChatMessage.Columns.Deleted: return "Deleted";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(ChatMessage.Columns columnEnum)
		{
			switch (columnEnum)
			{
											default: return false;
			}
		}


		#region Common
 
		public ChatMessage(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);  }
		public ChatMessage()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.ChatMessage);
		}
		public ChatMessage(BobSet bs)
		{
			this.Bob = new Bob(bs.Table, bs);
		}
		public ChatMessage(int ChatMessageK, IBob Parent, object Column)
			: this()
		{
			Bob.GetBobFromParent(ChatMessageK, Parent.Bob, Column, TablesEnum.ChatMessage);
		}
		public ChatMessage(int ChatMessageK)
			: this()
		{
			Bob.GetBobFromPrimaryKey(ChatMessageK);
		}
		#endregion

	}
	#endregion
	#region ChatMessageTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region ChatMessage
	/// <summary>
	/// Chat messages
	/// </summary>
	[Serializable]
	public partial class ChatMessage 
	{
		
		#region Simple members
		/// <summary>
		/// The primary key
		/// </summary>
		public override int K
		{
			get { return (int)this[ChatMessage.Columns.K] as int? ?? 0 ; }
			set { this[ChatMessage.Columns.K] = value; }
		}
		/// <summary>
		/// Text of the message
		/// </summary>
		public override string Text
		{
			get { return (string)this[ChatMessage.Columns.Text]; }
			set { this[ChatMessage.Columns.Text] = value; }
		}
		/// <summary>
		/// Date/time that the message was sent
		/// </summary>
		public override DateTime DateTime
		{
			get { return (DateTime)this[ChatMessage.Columns.DateTime]; }
			set { this[ChatMessage.Columns.DateTime] = value; }
		}
		/// <summary>
		/// UsrK of the posting user
		/// </summary>
		public override int UsrK
		{
			get { return (int)this[ChatMessage.Columns.UsrK]; }
			set { this[ChatMessage.Columns.UsrK] = value; }
		}
		/// <summary>
		/// Room posted to
		/// </summary>
		public Guid	RoomGuid
		{
			get{ return Cambro.Misc.Db.GuidConvertor(this[ChatMessage.Columns.RoomGuid]);}		
			set{ this[ChatMessage.Columns.RoomGuid] = new System.Data.SqlTypes.SqlGuid(value);}
		}
		/// <summary>
		/// The guid of the main chat item (for the archive)
		/// </summary>
		public override Guid? ChatItemGuid
		{
			get { return (Guid?)this[ChatMessage.Columns.ChatItemGuid]; }
			set { this[ChatMessage.Columns.ChatItemGuid] = value; }
		}
		/// <summary>
		/// Has this item been deleted from the archive?
		/// </summary>
		public override bool? Deleted
		{
			get { return (bool?)this[ChatMessage.Columns.Deleted]; }
			set { this[ChatMessage.Columns.Deleted] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildChatMessages
	{
		CachedSqlSelect<ChatMessage> ChildChatMessages();
		CachedSqlSelect<ChatMessage> ChildChatMessages(Q where);
		CachedSqlSelect<ChatMessage> ChildChatMessages(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<ChatMessage> ChildChatMessages(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class ChatMessage 
		{
		}

	#region ChatMessageDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region ChatMessageDataHolder
	/// <summary>
	/// Chat messagesDataHolder
	/// </summary>
	[Serializable]
	public partial class ChatMessageDataHolder : DataHolder<ChatMessage>
	{
		ChatMessage dataHolder;
		[NonSerializedAttribute] ChatMessage bob;

		public ChatMessageDataHolder()
		{
			this.dataHolder = new ChatMessage();
		}
		
		void CopyValues(ChatMessage source, ChatMessage destination)
		{
			destination[Bobs.ChatMessage.Columns.K] = source[Bobs.ChatMessage.Columns.K];
			destination[Bobs.ChatMessage.Columns.Text] = source[Bobs.ChatMessage.Columns.Text];
			destination[Bobs.ChatMessage.Columns.DateTime] = source[Bobs.ChatMessage.Columns.DateTime];
			destination[Bobs.ChatMessage.Columns.UsrK] = source[Bobs.ChatMessage.Columns.UsrK];
			destination[Bobs.ChatMessage.Columns.RoomGuid] = source[Bobs.ChatMessage.Columns.RoomGuid];
			destination[Bobs.ChatMessage.Columns.ChatItemGuid] = source[Bobs.ChatMessage.Columns.ChatItemGuid];
			destination[Bobs.ChatMessage.Columns.Deleted] = source[Bobs.ChatMessage.Columns.Deleted];
		}
		
		public ChatMessageDataHolder(ChatMessage bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// The primary key
		/// </summary>
		public int K
		{
			get { return dataHolder.K; }
			set { this.dataHolder.K = value; }
		}
		/// <summary>
		/// Text of the message
		/// </summary>
		public string Text
		{
			get { return dataHolder.Text; }
			set { this.dataHolder.Text = value; }
		}
		/// <summary>
		/// Date/time that the message was sent
		/// </summary>
		public DateTime DateTime
		{
			get { return dataHolder.DateTime; }
			set { this.dataHolder.DateTime = value; }
		}
		/// <summary>
		/// UsrK of the posting user
		/// </summary>
		public int UsrK
		{
			get { return dataHolder.UsrK; }
			set { this.dataHolder.UsrK = value; }
		}
		/// <summary>
		/// Room posted to
		/// </summary>
		public Guid RoomGuid
		{
			get { return dataHolder.RoomGuid; }
			set { this.dataHolder.RoomGuid = value; }
		}
		/// <summary>
		/// The guid of the main chat item (for the archive)
		/// </summary>
		public Guid? ChatItemGuid
		{
			get { return dataHolder.ChatItemGuid; }
			set { this.dataHolder.ChatItemGuid = value; }
		}
		/// <summary>
		/// Has this item been deleted from the archive?
		/// </summary>
		public bool? Deleted
		{
			get { return dataHolder.Deleted; }
			set { this.dataHolder.Deleted = value; }
		}
		#endregion
		public ChatMessage ChatMessage
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new ChatMessage(K);
					}
					else
					{
						bob = new ChatMessage();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region ChatMessageSet
	public partial class ChatMessageSet : BobSet, IEnumerable<ChatMessage>
	{
		public ChatMessageSet(Query query) : base(query) { }

		public ChatMessage this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new ChatMessage(this);
					((ChatMessage)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (ChatMessage)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new ChatMessageTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<ChatMessage> ToList()
		{
			List<ChatMessage> list = new List<ChatMessage>();
			foreach (ChatMessage item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<ChatMessage> Members

		public new IEnumerator<ChatMessage> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region ChatMessageTableDef
	public class ChatMessageTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "ChatMessage";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "FEBF12DC";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return ChatMessage.GetColumnName((ChatMessage.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.ChatMessage;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return true;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return ChatMessage.Columns.K;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			ChatMessage.Columns c = (ChatMessage.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case ChatMessage.Columns.K: ColumnStore[i] = new ColumnDef(c, "K", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey | SqlColumnFlag.AutoNumber, null); break;
					case ChatMessage.Columns.Text: ColumnStore[i] = new ColumnDef(c, "Text", SqlDbType.VarChar, 200, ""); break;
					case ChatMessage.Columns.DateTime: ColumnStore[i] = new ColumnDef(c, "DateTime", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case ChatMessage.Columns.UsrK: ColumnStore[i] = new ColumnDef(c, "UsrK", SqlDbType.Int, 0); break;
					case ChatMessage.Columns.RoomGuid: ColumnStore[i] = new ColumnDef(c, "RoomGuid", SqlDbType.UniqueIdentifier, Guid.Empty); break;
					case ChatMessage.Columns.ChatItemGuid: ColumnStore[i] = new ColumnDef(c, "ChatItemGuid", SqlDbType.UniqueIdentifier, null); break;
					case ChatMessage.Columns.Deleted: ColumnStore[i] = new ColumnDef(c, "Deleted", SqlDbType.Bit, null); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(ChatMessage.Columns.K);
						InitColumn(ChatMessage.Columns.Text);
						InitColumn(ChatMessage.Columns.DateTime);
						InitColumn(ChatMessage.Columns.UsrK);
						InitColumn(ChatMessage.Columns.RoomGuid);
						InitColumn(ChatMessage.Columns.ChatItemGuid);
						InitColumn(ChatMessage.Columns.Deleted);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region ClubDetails
	/// <summary>
	/// Club details harvested from Yellow pages
	/// </summary>
	public partial class ClubDetails : Model.Entities.ClubDetails, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// Key
			/// </summary>
			K = 0x00110001,
			/// <summary>
			/// Company
			/// </summary>
			Company = 0x00110002,
			/// <summary>
			/// WebLink
			/// </summary>
			WebLink = 0x00110003,
			/// <summary>
			/// Telephone
			/// </summary>
			Telephone = 0x00110004,
			/// <summary>
			/// Address
			/// </summary>
			Address = 0x00110005,
			/// <summary>
			/// PostCode
			/// </summary>
			PostCode = 0x00110006,
			/// <summary>
			/// ExtraInfo
			/// </summary>
			ExtraInfo = 0x00110007,
			/// <summary>
			/// PromoterK
			/// </summary>
			PromoterK = 0x00110008,
			/// <summary>
			/// VenueK
			/// </summary>
			VenueK = 0x00110009,
			/// <summary>
			/// DoneDate
			/// </summary>
			DoneDate = 0x0011000a,
			/// <summary>
			/// Dead
			/// </summary>
			Dead = 0x0011000b,
		}
		#endregion
		public static string GetColumnName(ClubDetails.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case ClubDetails.Columns.K: return "K";
						case ClubDetails.Columns.Company: return "Company";
						case ClubDetails.Columns.WebLink: return "WebLink";
						case ClubDetails.Columns.Telephone: return "Telephone";
						case ClubDetails.Columns.Address: return "Address";
						case ClubDetails.Columns.PostCode: return "PostCode";
						case ClubDetails.Columns.ExtraInfo: return "ExtraInfo";
						case ClubDetails.Columns.PromoterK: return "PromoterK";
						case ClubDetails.Columns.VenueK: return "VenueK";
						case ClubDetails.Columns.DoneDate: return "DoneDate";
						case ClubDetails.Columns.Dead: return "Dead";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(ClubDetails.Columns columnEnum)
		{
			switch (columnEnum)
			{
															default: return false;
			}
		}


		#region Common
 
		public ClubDetails(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);  }
		public ClubDetails()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.ClubDetails);
		}
		public ClubDetails(BobSet bs)
		{
			this.Bob = new Bob(bs.Table, bs);
		}
		public ClubDetails(int ClubDetailsK, IBob Parent, object Column)
			: this()
		{
			Bob.GetBobFromParent(ClubDetailsK, Parent.Bob, Column, TablesEnum.ClubDetails);
		}
		public ClubDetails(int ClubDetailsK)
			: this()
		{
			Bob.GetBobFromPrimaryKey(ClubDetailsK);
		}
		#endregion

	}
	#endregion
	#region ClubDetailsTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region ClubDetails
	/// <summary>
	/// Club details harvested from Yellow pages
	/// </summary>
	[Serializable]
	public partial class ClubDetails 
	{
		
		#region Simple members
		/// <summary>
		/// Key
		/// </summary>
		public override int K
		{
			get { return (int)this[ClubDetails.Columns.K] as int? ?? 0 ; }
			set { this[ClubDetails.Columns.K] = value; }
		}
		/// <summary>
		/// Company
		/// </summary>
		public override string Company
		{
			get { return (string)this[ClubDetails.Columns.Company]; }
			set { this[ClubDetails.Columns.Company] = value; }
		}
		/// <summary>
		/// WebLink
		/// </summary>
		public override string WebLink
		{
			get { return (string)this[ClubDetails.Columns.WebLink]; }
			set { this[ClubDetails.Columns.WebLink] = value; }
		}
		/// <summary>
		/// Telephone
		/// </summary>
		public override string Telephone
		{
			get { return (string)this[ClubDetails.Columns.Telephone]; }
			set { this[ClubDetails.Columns.Telephone] = value; }
		}
		/// <summary>
		/// Address
		/// </summary>
		public override string Address
		{
			get { return (string)this[ClubDetails.Columns.Address]; }
			set { this[ClubDetails.Columns.Address] = value; }
		}
		/// <summary>
		/// PostCode
		/// </summary>
		public override string PostCode
		{
			get { return (string)this[ClubDetails.Columns.PostCode]; }
			set { this[ClubDetails.Columns.PostCode] = value; }
		}
		/// <summary>
		/// ExtraInfo
		/// </summary>
		public override string ExtraInfo
		{
			get { return (string)this[ClubDetails.Columns.ExtraInfo]; }
			set { this[ClubDetails.Columns.ExtraInfo] = value; }
		}
		/// <summary>
		/// PromoterK
		/// </summary>
		public override int PromoterK
		{
			get { return (int)this[ClubDetails.Columns.PromoterK]; }
			set { this[ClubDetails.Columns.PromoterK] = value; }
		}
		/// <summary>
		/// VenueK
		/// </summary>
		public override int VenueK
		{
			get { return (int)this[ClubDetails.Columns.VenueK]; }
			set { this[ClubDetails.Columns.VenueK] = value; }
		}
		/// <summary>
		/// DoneDate
		/// </summary>
		public override DateTime DoneDate
		{
			get { return (DateTime)this[ClubDetails.Columns.DoneDate]; }
			set { this[ClubDetails.Columns.DoneDate] = value; }
		}
		/// <summary>
		/// Dead
		/// </summary>
		public override int Dead
		{
			get { return (int)this[ClubDetails.Columns.Dead]; }
			set { this[ClubDetails.Columns.Dead] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildClubDetailss
	{
		CachedSqlSelect<ClubDetails> ChildClubDetailss();
		CachedSqlSelect<ClubDetails> ChildClubDetailss(Q where);
		CachedSqlSelect<ClubDetails> ChildClubDetailss(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<ClubDetails> ChildClubDetailss(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class ClubDetails 
		{
		}

	#region ClubDetailsDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region ClubDetailsDataHolder
	/// <summary>
	/// Club details harvested from Yellow pagesDataHolder
	/// </summary>
	[Serializable]
	public partial class ClubDetailsDataHolder : DataHolder<ClubDetails>
	{
		ClubDetails dataHolder;
		[NonSerializedAttribute] ClubDetails bob;

		public ClubDetailsDataHolder()
		{
			this.dataHolder = new ClubDetails();
		}
		
		void CopyValues(ClubDetails source, ClubDetails destination)
		{
			destination[Bobs.ClubDetails.Columns.K] = source[Bobs.ClubDetails.Columns.K];
			destination[Bobs.ClubDetails.Columns.Company] = source[Bobs.ClubDetails.Columns.Company];
			destination[Bobs.ClubDetails.Columns.WebLink] = source[Bobs.ClubDetails.Columns.WebLink];
			destination[Bobs.ClubDetails.Columns.Telephone] = source[Bobs.ClubDetails.Columns.Telephone];
			destination[Bobs.ClubDetails.Columns.Address] = source[Bobs.ClubDetails.Columns.Address];
			destination[Bobs.ClubDetails.Columns.PostCode] = source[Bobs.ClubDetails.Columns.PostCode];
			destination[Bobs.ClubDetails.Columns.ExtraInfo] = source[Bobs.ClubDetails.Columns.ExtraInfo];
			destination[Bobs.ClubDetails.Columns.PromoterK] = source[Bobs.ClubDetails.Columns.PromoterK];
			destination[Bobs.ClubDetails.Columns.VenueK] = source[Bobs.ClubDetails.Columns.VenueK];
			destination[Bobs.ClubDetails.Columns.DoneDate] = source[Bobs.ClubDetails.Columns.DoneDate];
			destination[Bobs.ClubDetails.Columns.Dead] = source[Bobs.ClubDetails.Columns.Dead];
		}
		
		public ClubDetailsDataHolder(ClubDetails bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// Key
		/// </summary>
		public int K
		{
			get { return dataHolder.K; }
			set { this.dataHolder.K = value; }
		}
		/// <summary>
		/// Company
		/// </summary>
		public string Company
		{
			get { return dataHolder.Company; }
			set { this.dataHolder.Company = value; }
		}
		/// <summary>
		/// WebLink
		/// </summary>
		public string WebLink
		{
			get { return dataHolder.WebLink; }
			set { this.dataHolder.WebLink = value; }
		}
		/// <summary>
		/// Telephone
		/// </summary>
		public string Telephone
		{
			get { return dataHolder.Telephone; }
			set { this.dataHolder.Telephone = value; }
		}
		/// <summary>
		/// Address
		/// </summary>
		public string Address
		{
			get { return dataHolder.Address; }
			set { this.dataHolder.Address = value; }
		}
		/// <summary>
		/// PostCode
		/// </summary>
		public string PostCode
		{
			get { return dataHolder.PostCode; }
			set { this.dataHolder.PostCode = value; }
		}
		/// <summary>
		/// ExtraInfo
		/// </summary>
		public string ExtraInfo
		{
			get { return dataHolder.ExtraInfo; }
			set { this.dataHolder.ExtraInfo = value; }
		}
		/// <summary>
		/// PromoterK
		/// </summary>
		public int PromoterK
		{
			get { return dataHolder.PromoterK; }
			set { this.dataHolder.PromoterK = value; }
		}
		/// <summary>
		/// VenueK
		/// </summary>
		public int VenueK
		{
			get { return dataHolder.VenueK; }
			set { this.dataHolder.VenueK = value; }
		}
		/// <summary>
		/// DoneDate
		/// </summary>
		public DateTime DoneDate
		{
			get { return dataHolder.DoneDate; }
			set { this.dataHolder.DoneDate = value; }
		}
		/// <summary>
		/// Dead
		/// </summary>
		public int Dead
		{
			get { return dataHolder.Dead; }
			set { this.dataHolder.Dead = value; }
		}
		#endregion
		public ClubDetails ClubDetails
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new ClubDetails(K);
					}
					else
					{
						bob = new ClubDetails();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region ClubDetailsSet
	public partial class ClubDetailsSet : BobSet, IEnumerable<ClubDetails>
	{
		public ClubDetailsSet(Query query) : base(query) { }

		public ClubDetails this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new ClubDetails(this);
					((ClubDetails)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (ClubDetails)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new ClubDetailsTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<ClubDetails> ToList()
		{
			List<ClubDetails> list = new List<ClubDetails>();
			foreach (ClubDetails item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<ClubDetails> Members

		public new IEnumerator<ClubDetails> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region ClubDetailsTableDef
	public class ClubDetailsTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "ClubDetails";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "8E6B772A";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return ClubDetails.GetColumnName((ClubDetails.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.ClubDetails;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return true;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return ClubDetails.Columns.K;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			ClubDetails.Columns c = (ClubDetails.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case ClubDetails.Columns.K: ColumnStore[i] = new ColumnDef(c, "K", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey | SqlColumnFlag.AutoNumber, null); break;
					case ClubDetails.Columns.Company: ColumnStore[i] = new ColumnDef(c, "Company", SqlDbType.NVarChar, 510, ""); break;
					case ClubDetails.Columns.WebLink: ColumnStore[i] = new ColumnDef(c, "WebLink", SqlDbType.NVarChar, 510, ""); break;
					case ClubDetails.Columns.Telephone: ColumnStore[i] = new ColumnDef(c, "Telephone", SqlDbType.NVarChar, 128, ""); break;
					case ClubDetails.Columns.Address: ColumnStore[i] = new ColumnDef(c, "Address", SqlDbType.NVarChar, 510, ""); break;
					case ClubDetails.Columns.PostCode: ColumnStore[i] = new ColumnDef(c, "PostCode", SqlDbType.NVarChar, 20, ""); break;
					case ClubDetails.Columns.ExtraInfo: ColumnStore[i] = new ColumnDef(c, "ExtraInfo", SqlDbType.NVarChar, 510, ""); break;
					case ClubDetails.Columns.PromoterK: ColumnStore[i] = new ColumnDef(c, "PromoterK", SqlDbType.Int, 0); break;
					case ClubDetails.Columns.VenueK: ColumnStore[i] = new ColumnDef(c, "VenueK", SqlDbType.Int, 0); break;
					case ClubDetails.Columns.DoneDate: ColumnStore[i] = new ColumnDef(c, "DoneDate", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case ClubDetails.Columns.Dead: ColumnStore[i] = new ColumnDef(c, "Dead", SqlDbType.Int, 0); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(ClubDetails.Columns.K);
						InitColumn(ClubDetails.Columns.Company);
						InitColumn(ClubDetails.Columns.WebLink);
						InitColumn(ClubDetails.Columns.Telephone);
						InitColumn(ClubDetails.Columns.Address);
						InitColumn(ClubDetails.Columns.PostCode);
						InitColumn(ClubDetails.Columns.ExtraInfo);
						InitColumn(ClubDetails.Columns.PromoterK);
						InitColumn(ClubDetails.Columns.VenueK);
						InitColumn(ClubDetails.Columns.DoneDate);
						InitColumn(ClubDetails.Columns.Dead);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region Comment
	/// <summary>
	/// Comment - discussion comment either under a photo or a thread
	/// </summary>
	public partial class Comment : Model.Entities.Comment, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// The primary key
			/// </summary>
			K = 0x00120001,
			/// <summary>
			/// Text of comment
			/// </summary>
			Text = 0x00120002,
			/// <summary>
			/// Date / time posted
			/// </summary>
			DateTime = 0x00120003,
			/// <summary>
			/// Links to one Thread
			/// </summary>
			ThreadK = 0x00120004,
			/// <summary>
			/// Links to one User
			/// </summary>
			UsrK = 0x00120005,
			/// <summary>
			/// If this is set to false, the comment will not be displayed (for disabling offensive posts)
			/// </summary>
			Enabled = 0x00120006,
			/// <summary>
			/// Guid used to ensure duplicate messages don't get posted if the user refreshes the page after posting a message.
			/// </summary>
			DuplicateGuid = 0x00120007,
			/// <summary>
			/// If the comment has been edited by it's author, this is true
			/// </summary>
			IsEdited = 0x00120008,
			/// <summary>
			/// If the comment has been edited by it's author, this will show the date/time that the edit took place
			/// </summary>
			EditDateTime = 0x00120009,
			/// <summary>
			/// Number of users that Lol'ed at this comment
			/// </summary>
			LolCount = 0x0012000a,
			/// <summary>
			/// Index of thie comment in the thread
			/// </summary>
			IndexInThread = 0x0012000b,
			/// <summary>
			/// Ip of the user when posted
			/// </summary>
			Ip = 0x0012000c,
			/// <summary>
			/// The guid of the main chat item (for the archive)
			/// </summary>
			ChatItemGuid = 0x0012000d,
		}
		#endregion
		public static string GetColumnName(Comment.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case Comment.Columns.K: return "K";
						case Comment.Columns.Text: return "Text";
						case Comment.Columns.DateTime: return "DateTime";
						case Comment.Columns.ThreadK: return "ThreadK";
						case Comment.Columns.UsrK: return "UsrK";
						case Comment.Columns.Enabled: return "Enabled";
						case Comment.Columns.DuplicateGuid: return "DuplicateGuid";
						case Comment.Columns.IsEdited: return "IsEdited";
						case Comment.Columns.EditDateTime: return "EditDateTime";
						case Comment.Columns.LolCount: return "LolCount";
						case Comment.Columns.IndexInThread: return "IndexInThread";
						case Comment.Columns.Ip: return "Ip";
						case Comment.Columns.ChatItemGuid: return "ChatItemGuid";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(Comment.Columns columnEnum)
		{
			switch (columnEnum)
			{
																	default: return false;
			}
		}


		#region Common
 
		public Comment(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);  }
		public Comment()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.Comment);
		}
		public Comment(BobSet bs)
		{
			this.Bob = new Bob(bs.Table, bs);
		}
		public Comment(int CommentK, IBob Parent, object Column)
			: this()
		{
			Bob.GetBobFromParent(CommentK, Parent.Bob, Column, TablesEnum.Comment);
		}
		public Comment(int CommentK)
			: this()
		{
			Bob.GetBobFromPrimaryKey(CommentK);
		}
		#endregion

	}
	#endregion
	#region CommentTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region Comment
	/// <summary>
	/// Comment - discussion comment either under a photo or a thread
	/// </summary>
	[Serializable]
	public partial class Comment 
	{
		
		#region Simple members
		/// <summary>
		/// The primary key
		/// </summary>
		public override int K
		{
			get { return (int)this[Comment.Columns.K] as int? ?? 0 ; }
			set { this[Comment.Columns.K] = value; }
		}
		/// <summary>
		/// Text of comment
		/// </summary>
		public override string Text
		{
			get { return (string)this[Comment.Columns.Text]; }
			set { this[Comment.Columns.Text] = value; }
		}
		/// <summary>
		/// Date / time posted
		/// </summary>
		public override DateTime DateTime
		{
			get { return (DateTime)this[Comment.Columns.DateTime]; }
			set { this[Comment.Columns.DateTime] = value; }
		}
		/// <summary>
		/// Links to one Thread
		/// </summary>
		public override int ThreadK
		{
			get { return (int)this[Comment.Columns.ThreadK]; }
			set { this[Comment.Columns.ThreadK] = value; }
		}
		/// <summary>
		/// Links to one User
		/// </summary>
		public override int UsrK
		{
			get { return (int)this[Comment.Columns.UsrK]; }
			set { this[Comment.Columns.UsrK] = value; }
		}
		/// <summary>
		/// If this is set to false, the comment will not be displayed (for disabling offensive posts)
		/// </summary>
		public override bool Enabled
		{
			get { return (bool)this[Comment.Columns.Enabled]; }
			set { this[Comment.Columns.Enabled] = value; }
		}
		/// <summary>
		/// Guid used to ensure duplicate messages don't get posted if the user refreshes the page after posting a message.
		/// </summary>
		public Guid	DuplicateGuid
		{
			get{ return Cambro.Misc.Db.GuidConvertor(this[Comment.Columns.DuplicateGuid]);}		
			set{ this[Comment.Columns.DuplicateGuid] = new System.Data.SqlTypes.SqlGuid(value);}
		}
		/// <summary>
		/// If the comment has been edited by it's author, this is true
		/// </summary>
		public override bool IsEdited
		{
			get { return (bool)this[Comment.Columns.IsEdited]; }
			set { this[Comment.Columns.IsEdited] = value; }
		}
		/// <summary>
		/// If the comment has been edited by it's author, this will show the date/time that the edit took place
		/// </summary>
		public override DateTime EditDateTime
		{
			get { return (DateTime)this[Comment.Columns.EditDateTime]; }
			set { this[Comment.Columns.EditDateTime] = value; }
		}
		/// <summary>
		/// Number of users that Lol'ed at this comment
		/// </summary>
		public override int LolCount
		{
			get { return (int)this[Comment.Columns.LolCount]; }
			set { this[Comment.Columns.LolCount] = value; }
		}
		/// <summary>
		/// Index of thie comment in the thread
		/// </summary>
		public override int IndexInThread
		{
			get { return (int)this[Comment.Columns.IndexInThread]; }
			set { this[Comment.Columns.IndexInThread] = value; }
		}
		/// <summary>
		/// Ip of the user when posted
		/// </summary>
		public override string Ip
		{
			get { return (string)this[Comment.Columns.Ip]; }
			set { this[Comment.Columns.Ip] = value; }
		}
		/// <summary>
		/// The guid of the main chat item (for the archive)
		/// </summary>
		public override Guid? ChatItemGuid
		{
			get { return (Guid?)this[Comment.Columns.ChatItemGuid]; }
			set { this[Comment.Columns.ChatItemGuid] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildComments
	{
		CachedSqlSelect<Comment> ChildComments();
		CachedSqlSelect<Comment> ChildComments(Q where);
		CachedSqlSelect<Comment> ChildComments(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<Comment> ChildComments(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class Comment 
	 : 
	Bobs.ChildInterfaces.IHasChildLols
		{
			public CachedSqlSelect<Lol> ChildLols()
		{
			return this.ChildLols(null, null);
		}
		public CachedSqlSelect<Lol> ChildLols(Q where)
		{
			return this.ChildLols(where, null);
		}
		public CachedSqlSelect<Lol> ChildLols(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildLols(null, orderBy);
		}
		public CachedSqlSelect<Lol> ChildLols(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<Lol>
			(
				new Children<Lol>
				(
					TablesEnum.Comment, 
					this.K, 
					TablesEnum.Lol, 
					dr => 
					{ 
						Lol newLol = new Lol(); 
						newLol.Initialise(dr); 
						return newLol;
					},
					"B9944A9A",
					where,
					orderBy
				)
			);
		}
		}

	#region CommentDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region CommentDataHolder
	/// <summary>
	/// Comment - discussion comment either under a photo or a threadDataHolder
	/// </summary>
	[Serializable]
	public partial class CommentDataHolder : DataHolder<Comment>
	{
		Comment dataHolder;
		[NonSerializedAttribute] Comment bob;

		public CommentDataHolder()
		{
			this.dataHolder = new Comment();
		}
		
		void CopyValues(Comment source, Comment destination)
		{
			destination[Bobs.Comment.Columns.K] = source[Bobs.Comment.Columns.K];
			destination[Bobs.Comment.Columns.Text] = source[Bobs.Comment.Columns.Text];
			destination[Bobs.Comment.Columns.DateTime] = source[Bobs.Comment.Columns.DateTime];
			destination[Bobs.Comment.Columns.ThreadK] = source[Bobs.Comment.Columns.ThreadK];
			destination[Bobs.Comment.Columns.UsrK] = source[Bobs.Comment.Columns.UsrK];
			destination[Bobs.Comment.Columns.Enabled] = source[Bobs.Comment.Columns.Enabled];
			destination[Bobs.Comment.Columns.DuplicateGuid] = source[Bobs.Comment.Columns.DuplicateGuid];
			destination[Bobs.Comment.Columns.IsEdited] = source[Bobs.Comment.Columns.IsEdited];
			destination[Bobs.Comment.Columns.EditDateTime] = source[Bobs.Comment.Columns.EditDateTime];
			destination[Bobs.Comment.Columns.LolCount] = source[Bobs.Comment.Columns.LolCount];
			destination[Bobs.Comment.Columns.IndexInThread] = source[Bobs.Comment.Columns.IndexInThread];
			destination[Bobs.Comment.Columns.Ip] = source[Bobs.Comment.Columns.Ip];
			destination[Bobs.Comment.Columns.ChatItemGuid] = source[Bobs.Comment.Columns.ChatItemGuid];
		}
		
		public CommentDataHolder(Comment bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// The primary key
		/// </summary>
		public int K
		{
			get { return dataHolder.K; }
			set { this.dataHolder.K = value; }
		}
		/// <summary>
		/// Text of comment
		/// </summary>
		public string Text
		{
			get { return dataHolder.Text; }
			set { this.dataHolder.Text = value; }
		}
		/// <summary>
		/// Date / time posted
		/// </summary>
		public DateTime DateTime
		{
			get { return dataHolder.DateTime; }
			set { this.dataHolder.DateTime = value; }
		}
		/// <summary>
		/// Links to one Thread
		/// </summary>
		public int ThreadK
		{
			get { return dataHolder.ThreadK; }
			set { this.dataHolder.ThreadK = value; }
		}
		/// <summary>
		/// Links to one User
		/// </summary>
		public int UsrK
		{
			get { return dataHolder.UsrK; }
			set { this.dataHolder.UsrK = value; }
		}
		/// <summary>
		/// If this is set to false, the comment will not be displayed (for disabling offensive posts)
		/// </summary>
		public bool Enabled
		{
			get { return dataHolder.Enabled; }
			set { this.dataHolder.Enabled = value; }
		}
		/// <summary>
		/// Guid used to ensure duplicate messages don't get posted if the user refreshes the page after posting a message.
		/// </summary>
		public Guid DuplicateGuid
		{
			get { return dataHolder.DuplicateGuid; }
			set { this.dataHolder.DuplicateGuid = value; }
		}
		/// <summary>
		/// If the comment has been edited by it's author, this is true
		/// </summary>
		public bool IsEdited
		{
			get { return dataHolder.IsEdited; }
			set { this.dataHolder.IsEdited = value; }
		}
		/// <summary>
		/// If the comment has been edited by it's author, this will show the date/time that the edit took place
		/// </summary>
		public DateTime EditDateTime
		{
			get { return dataHolder.EditDateTime; }
			set { this.dataHolder.EditDateTime = value; }
		}
		/// <summary>
		/// Number of users that Lol'ed at this comment
		/// </summary>
		public int LolCount
		{
			get { return dataHolder.LolCount; }
			set { this.dataHolder.LolCount = value; }
		}
		/// <summary>
		/// Index of thie comment in the thread
		/// </summary>
		public int IndexInThread
		{
			get { return dataHolder.IndexInThread; }
			set { this.dataHolder.IndexInThread = value; }
		}
		/// <summary>
		/// Ip of the user when posted
		/// </summary>
		public string Ip
		{
			get { return dataHolder.Ip; }
			set { this.dataHolder.Ip = value; }
		}
		/// <summary>
		/// The guid of the main chat item (for the archive)
		/// </summary>
		public Guid? ChatItemGuid
		{
			get { return dataHolder.ChatItemGuid; }
			set { this.dataHolder.ChatItemGuid = value; }
		}
		#endregion
		public Comment Comment
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new Comment(K);
					}
					else
					{
						bob = new Comment();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region CommentSet
	public partial class CommentSet : BobSet, IEnumerable<Comment>
	{
		public CommentSet(Query query) : base(query) { }

		public Comment this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new Comment(this);
					((Comment)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (Comment)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new CommentTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<Comment> ToList()
		{
			List<Comment> list = new List<Comment>();
			foreach (Comment item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<Comment> Members

		public new IEnumerator<Comment> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region CommentTableDef
	public class CommentTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "Comment";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "B51CFA22";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return Comment.GetColumnName((Comment.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.Comment;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return true;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return Comment.Columns.K;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			Comment.Columns c = (Comment.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case Comment.Columns.K: ColumnStore[i] = new ColumnDef(c, "K", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey | SqlColumnFlag.AutoNumber, null); break;
					case Comment.Columns.Text: ColumnStore[i] = new ColumnDef(c, "Text", SqlDbType.Text, ""); break;
					case Comment.Columns.DateTime: ColumnStore[i] = new ColumnDef(c, "DateTime", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case Comment.Columns.ThreadK: ColumnStore[i] = new ColumnDef(c, "ThreadK", SqlDbType.Int, 0); break;
					case Comment.Columns.UsrK: ColumnStore[i] = new ColumnDef(c, "UsrK", SqlDbType.Int, 0); break;
					case Comment.Columns.Enabled: ColumnStore[i] = new ColumnDef(c, "Enabled", SqlDbType.Bit, false); break;
					case Comment.Columns.DuplicateGuid: ColumnStore[i] = new ColumnDef(c, "DuplicateGuid", SqlDbType.UniqueIdentifier, Guid.Empty); break;
					case Comment.Columns.IsEdited: ColumnStore[i] = new ColumnDef(c, "IsEdited", SqlDbType.Bit, false); break;
					case Comment.Columns.EditDateTime: ColumnStore[i] = new ColumnDef(c, "EditDateTime", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case Comment.Columns.LolCount: ColumnStore[i] = new ColumnDef(c, "LolCount", SqlDbType.Int, 0); break;
					case Comment.Columns.IndexInThread: ColumnStore[i] = new ColumnDef(c, "IndexInThread", SqlDbType.Int, 0); break;
					case Comment.Columns.Ip: ColumnStore[i] = new ColumnDef(c, "Ip", SqlDbType.VarChar, 15, ""); break;
					case Comment.Columns.ChatItemGuid: ColumnStore[i] = new ColumnDef(c, "ChatItemGuid", SqlDbType.UniqueIdentifier, null); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(Comment.Columns.K);
						InitColumn(Comment.Columns.Text);
						InitColumn(Comment.Columns.DateTime);
						InitColumn(Comment.Columns.ThreadK);
						InitColumn(Comment.Columns.UsrK);
						InitColumn(Comment.Columns.Enabled);
						InitColumn(Comment.Columns.DuplicateGuid);
						InitColumn(Comment.Columns.IsEdited);
						InitColumn(Comment.Columns.EditDateTime);
						InitColumn(Comment.Columns.LolCount);
						InitColumn(Comment.Columns.IndexInThread);
						InitColumn(Comment.Columns.Ip);
						InitColumn(Comment.Columns.ChatItemGuid);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region CommentAlert
	/// <summary>
	/// Alerts to send emails when comments are posted
	/// </summary>
	public partial class CommentAlert : Model.Entities.CommentAlert, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// Link to Usr table
			/// </summary>
			UsrK = 0x00130001,
			/// <summary>
			/// Photo=1, Event=2, Venue=4, Place=5, Thread=6
			/// </summary>
			ParentObjectType = 0x00130002,
			/// <summary>
			/// Key of parent object
			/// </summary>
			ParentObjectK = 0x00130003,
		}
		#endregion
		public static string GetColumnName(CommentAlert.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case CommentAlert.Columns.UsrK: return "UsrK";
						case CommentAlert.Columns.ParentObjectType: return "ParentObjectType";
						case CommentAlert.Columns.ParentObjectK: return "ParentObjectK";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(CommentAlert.Columns columnEnum)
		{
			switch (columnEnum)
			{
							default: return false;
			}
		}


		#region Common
	 
		public CommentAlert(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);}
		public CommentAlert()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.CommentAlert);
		}
		public CommentAlert(BobSet bs)
		{
			this.Bob = new Bob(Bobs.Tables.Defs.CommentAlert, bs);
		}
		public CommentAlert(IBob Parent, object Column) : this()
		{
			this.Bob.GetBobFromParentSimple(Parent, Column, TablesEnum.CommentAlert);
		}
		public CommentAlert(int UsrK, int ParentObjectType, int ParentObjectK) : this()
		{
			this.Bob.GetBobFromPrimaryKeyArray(new Q[] {new Q(CommentAlert.Columns.UsrK,UsrK), new Q(CommentAlert.Columns.ParentObjectType,ParentObjectType), new Q(CommentAlert.Columns.ParentObjectK,ParentObjectK)});
		} 
		#endregion

	}
	#endregion
	#region CommentAlertTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region CommentAlert
	/// <summary>
	/// Alerts to send emails when comments are posted
	/// </summary>
	[Serializable]
	public partial class CommentAlert 
	{
		
		#region Simple members
		/// <summary>
		/// Link to Usr table
		/// </summary>
		public override int UsrK
		{
			get { return (int)this[CommentAlert.Columns.UsrK]; }
			set { this[CommentAlert.Columns.UsrK] = value; }
		}
		/// <summary>
		/// Photo=1, Event=2, Venue=4, Place=5, Thread=6
		/// </summary>
		public override int ParentObjectType
		{
			get { return (int)this[CommentAlert.Columns.ParentObjectType]; }
			set { this[CommentAlert.Columns.ParentObjectType] = value; }
		}
		/// <summary>
		/// Key of parent object
		/// </summary>
		public override int ParentObjectK
		{
			get { return (int)this[CommentAlert.Columns.ParentObjectK]; }
			set { this[CommentAlert.Columns.ParentObjectK] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildCommentAlerts
	{
		CachedSqlSelect<CommentAlert> ChildCommentAlerts();
		CachedSqlSelect<CommentAlert> ChildCommentAlerts(Q where);
		CachedSqlSelect<CommentAlert> ChildCommentAlerts(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<CommentAlert> ChildCommentAlerts(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class CommentAlert 
		{
		}

	#region CommentAlertDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region CommentAlertDataHolder
	/// <summary>
	/// Alerts to send emails when comments are postedDataHolder
	/// </summary>
	[Serializable]
	public partial class CommentAlertDataHolder : DataHolder<CommentAlert>
	{
		CommentAlert dataHolder;
		[NonSerializedAttribute] CommentAlert bob;

		public CommentAlertDataHolder()
		{
			this.dataHolder = new CommentAlert();
		}
		
		void CopyValues(CommentAlert source, CommentAlert destination)
		{
			destination[Bobs.CommentAlert.Columns.UsrK] = source[Bobs.CommentAlert.Columns.UsrK];
			destination[Bobs.CommentAlert.Columns.ParentObjectType] = source[Bobs.CommentAlert.Columns.ParentObjectType];
			destination[Bobs.CommentAlert.Columns.ParentObjectK] = source[Bobs.CommentAlert.Columns.ParentObjectK];
		}
		
		public CommentAlertDataHolder(CommentAlert bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// Link to Usr table
		/// </summary>
		public int UsrK
		{
			get { return dataHolder.UsrK; }
			set { this.dataHolder.UsrK = value; }
		}
		/// <summary>
		/// Photo=1, Event=2, Venue=4, Place=5, Thread=6
		/// </summary>
		public int ParentObjectType
		{
			get { return dataHolder.ParentObjectType; }
			set { this.dataHolder.ParentObjectType = value; }
		}
		/// <summary>
		/// Key of parent object
		/// </summary>
		public int ParentObjectK
		{
			get { return dataHolder.ParentObjectK; }
			set { this.dataHolder.ParentObjectK = value; }
		}
		#endregion
		public CommentAlert CommentAlert
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new CommentAlert(K);
					}
					else
					{
						bob = new CommentAlert();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region CommentAlertSet
	public partial class CommentAlertSet : BobSet, IEnumerable<CommentAlert>
	{
		public CommentAlertSet(Query query) : base(query) { }

		public CommentAlert this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new CommentAlert(this);
					((CommentAlert)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (CommentAlert)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new CommentAlertTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<CommentAlert> ToList()
		{
			List<CommentAlert> list = new List<CommentAlert>();
			foreach (CommentAlert item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<CommentAlert> Members

		public new IEnumerator<CommentAlert> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region CommentAlertTableDef
	public class CommentAlertTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "CommentAlert";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "E8EF0595";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return CommentAlert.GetColumnName((CommentAlert.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.CommentAlert;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return false;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return null;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			CommentAlert.Columns c = (CommentAlert.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case CommentAlert.Columns.UsrK: ColumnStore[i] = new ColumnDef(c, "UsrK", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey, 0); break;
					case CommentAlert.Columns.ParentObjectType: ColumnStore[i] = new ColumnDef(c, "ParentObjectType", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey, 0); break;
					case CommentAlert.Columns.ParentObjectK: ColumnStore[i] = new ColumnDef(c, "ParentObjectK", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey, 0); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(CommentAlert.Columns.UsrK);
						InitColumn(CommentAlert.Columns.ParentObjectType);
						InitColumn(CommentAlert.Columns.ParentObjectK);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region Comp
	/// <summary>
	/// A competition
	/// </summary>
	public partial class Comp : Model.Entities.Comp, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// The primary key
			/// </summary>
			K = 0x00140001,
			/// <summary>
			/// DateTime that the competition was added to the system
			/// </summary>
			DateTimeAdded = 0x00140002,
			/// <summary>
			/// DateTime that the competition starts
			/// </summary>
			DateTimeStart = 0x00140003,
			/// <summary>
			/// DateTime that the competition closes
			/// </summary>
			DateTimeClose = 0x00140004,
			/// <summary>
			/// Question
			/// </summary>
			Question = 0x00140005,
			/// <summary>
			/// Multiple choice answer 1
			/// </summary>
			Answer1 = 0x00140006,
			/// <summary>
			/// Multiple choice answer 2
			/// </summary>
			Answer2 = 0x00140007,
			/// <summary>
			/// Multiple choice answer 3
			/// </summary>
			Answer3 = 0x00140008,
			/// <summary>
			/// The correct answer - 1, 2 or 3
			/// </summary>
			CorrectAnswer = 0x00140009,
			/// <summary>
			/// Description of the first prize
			/// </summary>
			Prize = 0x0014000a,
			/// <summary>
			/// Description of the second prize
			/// </summary>
			Prize2 = 0x0014000b,
			/// <summary>
			/// Description of the third prize
			/// </summary>
			Prize3 = 0x0014000c,
			/// <summary>
			/// HTML snippet about the sponsor. May include logo, link etc.
			/// </summary>
			SponsorDetails = 0x0014000d,
			/// <summary>
			/// Number of first prize winners
			/// </summary>
			Winners = 0x0014000e,
			/// <summary>
			/// Number of second prize winners
			/// </summary>
			Winners2 = 0x0014000f,
			/// <summary>
			/// Number of third prize winners
			/// </summary>
			Winners3 = 0x00140010,
			/// <summary>
			/// Have the winners been picked and notified yet?
			/// </summary>
			WinnersPicked = 0x00140011,
			/// <summary>
			/// The owner that has access to the results
			/// </summary>
			OwnerUsrK = 0x00140012,
			/// <summary>
			/// The url of the icon (should be approx 30*30)
			/// </summary>
			IconFilename = 0x00140013,
			/// <summary>
			/// Prize value range - 1=£0-£100, 2=£100+, 3=£500+
			/// </summary>
			PrizeValueRange = 0x00140014,
			/// <summary>
			/// Number of entries
			/// </summary>
			Entries = 0x00140015,
			/// <summary>
			/// Cropped image 100*100
			/// </summary>
			Pic = 0x00140016,
			/// <summary>
			/// Original file for cropped image
			/// </summary>
			PicOriginal = 0x00140017,
			/// <summary>
			/// Number of entries
			/// </summary>
			DisplayType = 0x00140018,
			/// <summary>
			/// Status
			/// </summary>
			Status = 0x00140019,
			/// <summary>
			/// The owner promoter
			/// </summary>
			PromoterK = 0x0014001a,
			/// <summary>
			/// The relevant brand (if any)
			/// </summary>
			BrandK = 0x0014001b,
			/// <summary>
			/// The relevant event (if any)
			/// </summary>
			EventK = 0x0014001c,
			/// <summary>
			/// Where is this competition linking to?
			/// </summary>
			LinkType = 0x0014001d,
			/// <summary>
			/// State var used to reconstruct cropper when re-cropping
			/// </summary>
			PicState = 0x0014001e,
			/// <summary>
			/// The Photo that was used to create the Pic.
			/// </summary>
			PicPhotoK = 0x0014001f,
			/// <summary>
			/// The Misc that was used to create the Pic.
			/// </summary>
			PicMiscK = 0x00140020,
			/// <summary>
			/// Is this competition an HTML override?
			/// </summary>
			IsHtmlOverride = 0x00140021,
		}
		#endregion
		public static string GetColumnName(Comp.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case Comp.Columns.K: return "K";
						case Comp.Columns.DateTimeAdded: return "DateTimeAdded";
						case Comp.Columns.DateTimeStart: return "DateTimeStart";
						case Comp.Columns.DateTimeClose: return "DateTimeClose";
						case Comp.Columns.Question: return "Question";
						case Comp.Columns.Answer1: return "Answer1";
						case Comp.Columns.Answer2: return "Answer2";
						case Comp.Columns.Answer3: return "Answer3";
						case Comp.Columns.CorrectAnswer: return "CorrectAnswer";
						case Comp.Columns.Prize: return "Prize";
						case Comp.Columns.Prize2: return "Prize2";
						case Comp.Columns.Prize3: return "Prize3";
						case Comp.Columns.SponsorDetails: return "SponsorDetails";
						case Comp.Columns.Winners: return "Winners";
						case Comp.Columns.Winners2: return "Winners2";
						case Comp.Columns.Winners3: return "Winners3";
						case Comp.Columns.WinnersPicked: return "WinnersPicked";
						case Comp.Columns.OwnerUsrK: return "OwnerUsrK";
						case Comp.Columns.IconFilename: return "IconFilename";
						case Comp.Columns.PrizeValueRange: return "PrizeValueRange";
						case Comp.Columns.Entries: return "Entries";
						case Comp.Columns.Pic: return "Pic";
						case Comp.Columns.PicOriginal: return "PicOriginal";
						case Comp.Columns.DisplayType: return "DisplayType";
						case Comp.Columns.Status: return "Status";
						case Comp.Columns.PromoterK: return "PromoterK";
						case Comp.Columns.BrandK: return "BrandK";
						case Comp.Columns.EventK: return "EventK";
						case Comp.Columns.LinkType: return "LinkType";
						case Comp.Columns.PicState: return "PicState";
						case Comp.Columns.PicPhotoK: return "PicPhotoK";
						case Comp.Columns.PicMiscK: return "PicMiscK";
						case Comp.Columns.IsHtmlOverride: return "IsHtmlOverride";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(Comp.Columns columnEnum)
		{
			switch (columnEnum)
			{
																																					default: return false;
			}
		}


		#region Common
 
		public Comp(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);  }
		public Comp()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.Comp);
		}
		public Comp(BobSet bs)
		{
			this.Bob = new Bob(bs.Table, bs);
		}
		public Comp(int CompK, IBob Parent, object Column)
			: this()
		{
			Bob.GetBobFromParent(CompK, Parent.Bob, Column, TablesEnum.Comp);
		}
		public Comp(int CompK)
			: this()
		{
			Bob.GetBobFromPrimaryKey(CompK);
		}
		#endregion

	}
	#endregion
	#region CompTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region Comp
	/// <summary>
	/// A competition
	/// </summary>
	[Serializable]
	public partial class Comp 
	{
		
		#region Simple members
		/// <summary>
		/// The primary key
		/// </summary>
		public override int K
		{
			get { return (int)this[Comp.Columns.K] as int? ?? 0 ; }
			set { this[Comp.Columns.K] = value; }
		}
		/// <summary>
		/// DateTime that the competition was added to the system
		/// </summary>
		public override DateTime DateTimeAdded
		{
			get { return (DateTime)this[Comp.Columns.DateTimeAdded]; }
			set { this[Comp.Columns.DateTimeAdded] = value; }
		}
		/// <summary>
		/// DateTime that the competition starts
		/// </summary>
		public override DateTime DateTimeStart
		{
			get { return (DateTime)this[Comp.Columns.DateTimeStart]; }
			set { this[Comp.Columns.DateTimeStart] = value; }
		}
		/// <summary>
		/// DateTime that the competition closes
		/// </summary>
		public override DateTime DateTimeClose
		{
			get { return (DateTime)this[Comp.Columns.DateTimeClose]; }
			set { this[Comp.Columns.DateTimeClose] = value; }
		}
		/// <summary>
		/// Question
		/// </summary>
		public override string Question
		{
			get { return (string)this[Comp.Columns.Question]; }
			set { this[Comp.Columns.Question] = value; }
		}
		/// <summary>
		/// Multiple choice answer 1
		/// </summary>
		public override string Answer1
		{
			get { return (string)this[Comp.Columns.Answer1]; }
			set { this[Comp.Columns.Answer1] = value; }
		}
		/// <summary>
		/// Multiple choice answer 2
		/// </summary>
		public override string Answer2
		{
			get { return (string)this[Comp.Columns.Answer2]; }
			set { this[Comp.Columns.Answer2] = value; }
		}
		/// <summary>
		/// Multiple choice answer 3
		/// </summary>
		public override string Answer3
		{
			get { return (string)this[Comp.Columns.Answer3]; }
			set { this[Comp.Columns.Answer3] = value; }
		}
		/// <summary>
		/// The correct answer - 1, 2 or 3
		/// </summary>
		public override int CorrectAnswer
		{
			get { return (int)this[Comp.Columns.CorrectAnswer]; }
			set { this[Comp.Columns.CorrectAnswer] = value; }
		}
		/// <summary>
		/// Description of the first prize
		/// </summary>
		public override string Prize
		{
			get { return (string)this[Comp.Columns.Prize]; }
			set { this[Comp.Columns.Prize] = value; }
		}
		/// <summary>
		/// Description of the second prize
		/// </summary>
		public override string Prize2
		{
			get { return (string)this[Comp.Columns.Prize2]; }
			set { this[Comp.Columns.Prize2] = value; }
		}
		/// <summary>
		/// Description of the third prize
		/// </summary>
		public override string Prize3
		{
			get { return (string)this[Comp.Columns.Prize3]; }
			set { this[Comp.Columns.Prize3] = value; }
		}
		/// <summary>
		/// HTML snippet about the sponsor. May include logo, link etc.
		/// </summary>
		public override string SponsorDetails
		{
			get { return (string)this[Comp.Columns.SponsorDetails]; }
			set { this[Comp.Columns.SponsorDetails] = value; }
		}
		/// <summary>
		/// Number of first prize winners
		/// </summary>
		public override int Winners
		{
			get { return (int)this[Comp.Columns.Winners]; }
			set { this[Comp.Columns.Winners] = value; }
		}
		/// <summary>
		/// Number of second prize winners
		/// </summary>
		public override int Winners2
		{
			get { return (int)this[Comp.Columns.Winners2]; }
			set { this[Comp.Columns.Winners2] = value; }
		}
		/// <summary>
		/// Number of third prize winners
		/// </summary>
		public override int Winners3
		{
			get { return (int)this[Comp.Columns.Winners3]; }
			set { this[Comp.Columns.Winners3] = value; }
		}
		/// <summary>
		/// Have the winners been picked and notified yet?
		/// </summary>
		public override bool WinnersPicked
		{
			get { return (bool)this[Comp.Columns.WinnersPicked]; }
			set { this[Comp.Columns.WinnersPicked] = value; }
		}
		/// <summary>
		/// The owner that has access to the results
		/// </summary>
		public override int OwnerUsrK
		{
			get { return (int)this[Comp.Columns.OwnerUsrK]; }
			set { this[Comp.Columns.OwnerUsrK] = value; }
		}
		/// <summary>
		/// The url of the icon (should be approx 30*30)
		/// </summary>
		public override string IconFilename
		{
			get { return (string)this[Comp.Columns.IconFilename]; }
			set { this[Comp.Columns.IconFilename] = value; }
		}
		/// <summary>
		/// Prize value range - 1=£0-£100, 2=£100+, 3=£500+
		/// </summary>
		public override int PrizeValueRange
		{
			get { return (int)this[Comp.Columns.PrizeValueRange]; }
			set { this[Comp.Columns.PrizeValueRange] = value; }
		}
		/// <summary>
		/// Number of entries
		/// </summary>
		public override int Entries
		{
			get { return (int)this[Comp.Columns.Entries]; }
			set { this[Comp.Columns.Entries] = value; }
		}
		/// <summary>
		/// Cropped image 100*100
		/// </summary>
		public Guid	Pic
		{
			get{ return Cambro.Misc.Db.GuidConvertor(this[Comp.Columns.Pic]);}		
			set{ this[Comp.Columns.Pic] = new System.Data.SqlTypes.SqlGuid(value);}
		}
		/// <summary>
		/// Original file for cropped image
		/// </summary>
		public Guid	PicOriginal
		{
			get{ return Cambro.Misc.Db.GuidConvertor(this[Comp.Columns.PicOriginal]);}		
			set{ this[Comp.Columns.PicOriginal] = new System.Data.SqlTypes.SqlGuid(value);}
		}
		/// <summary>
		/// Number of entries
		/// </summary>
		public override int DisplayType
		{
			get { return (int)this[Comp.Columns.DisplayType]; }
			set { this[Comp.Columns.DisplayType] = value; }
		}
		/// <summary>
		/// Status
		/// </summary>
		public override int Status
		{
			get { return (int)this[Comp.Columns.Status]; }
			set { this[Comp.Columns.Status] = value; }
		}
		/// <summary>
		/// The owner promoter
		/// </summary>
		public override int PromoterK
		{
			get { return (int)this[Comp.Columns.PromoterK]; }
			set { this[Comp.Columns.PromoterK] = value; }
		}
		/// <summary>
		/// The relevant brand (if any)
		/// </summary>
		public override int BrandK
		{
			get { return (int)this[Comp.Columns.BrandK]; }
			set { this[Comp.Columns.BrandK] = value; }
		}
		/// <summary>
		/// The relevant event (if any)
		/// </summary>
		public override int EventK
		{
			get { return (int)this[Comp.Columns.EventK]; }
			set { this[Comp.Columns.EventK] = value; }
		}
		/// <summary>
		/// Where is this competition linking to?
		/// </summary>
		public override int LinkType
		{
			get { return (int)this[Comp.Columns.LinkType]; }
			set { this[Comp.Columns.LinkType] = value; }
		}
		/// <summary>
		/// State var used to reconstruct cropper when re-cropping
		/// </summary>
		public override string PicState
		{
			get { return (string)this[Comp.Columns.PicState]; }
			set { this[Comp.Columns.PicState] = value; }
		}
		/// <summary>
		/// The Photo that was used to create the Pic.
		/// </summary>
		public override int PicPhotoK
		{
			get { return (int)this[Comp.Columns.PicPhotoK]; }
			set { this[Comp.Columns.PicPhotoK] = value; }
		}
		/// <summary>
		/// The Misc that was used to create the Pic.
		/// </summary>
		public override int PicMiscK
		{
			get { return (int)this[Comp.Columns.PicMiscK]; }
			set { this[Comp.Columns.PicMiscK] = value; }
		}
		/// <summary>
		/// Is this competition an HTML override?
		/// </summary>
		public override bool IsHtmlOverride
		{
			get { return (bool)this[Comp.Columns.IsHtmlOverride]; }
			set { this[Comp.Columns.IsHtmlOverride] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildComps
	{
		CachedSqlSelect<Comp> ChildComps();
		CachedSqlSelect<Comp> ChildComps(Q where);
		CachedSqlSelect<Comp> ChildComps(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<Comp> ChildComps(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class Comp 
	 : 
	Bobs.ChildInterfaces.IHasChildCompEntrys
		{
			public CachedSqlSelect<CompEntry> ChildCompEntrys()
		{
			return this.ChildCompEntrys(null, null);
		}
		public CachedSqlSelect<CompEntry> ChildCompEntrys(Q where)
		{
			return this.ChildCompEntrys(where, null);
		}
		public CachedSqlSelect<CompEntry> ChildCompEntrys(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildCompEntrys(null, orderBy);
		}
		public CachedSqlSelect<CompEntry> ChildCompEntrys(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<CompEntry>
			(
				new Children<CompEntry>
				(
					TablesEnum.Comp, 
					this.K, 
					TablesEnum.CompEntry, 
					dr => 
					{ 
						CompEntry newCompEntry = new CompEntry(); 
						newCompEntry.Initialise(dr); 
						return newCompEntry;
					},
					"CEEC0128",
					where,
					orderBy
				)
			);
		}
		}

	#region CompDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region CompDataHolder
	/// <summary>
	/// A competitionDataHolder
	/// </summary>
	[Serializable]
	public partial class CompDataHolder : DataHolder<Comp>
	{
		Comp dataHolder;
		[NonSerializedAttribute] Comp bob;

		public CompDataHolder()
		{
			this.dataHolder = new Comp();
		}
		
		void CopyValues(Comp source, Comp destination)
		{
			destination[Bobs.Comp.Columns.K] = source[Bobs.Comp.Columns.K];
			destination[Bobs.Comp.Columns.DateTimeAdded] = source[Bobs.Comp.Columns.DateTimeAdded];
			destination[Bobs.Comp.Columns.DateTimeStart] = source[Bobs.Comp.Columns.DateTimeStart];
			destination[Bobs.Comp.Columns.DateTimeClose] = source[Bobs.Comp.Columns.DateTimeClose];
			destination[Bobs.Comp.Columns.Question] = source[Bobs.Comp.Columns.Question];
			destination[Bobs.Comp.Columns.Answer1] = source[Bobs.Comp.Columns.Answer1];
			destination[Bobs.Comp.Columns.Answer2] = source[Bobs.Comp.Columns.Answer2];
			destination[Bobs.Comp.Columns.Answer3] = source[Bobs.Comp.Columns.Answer3];
			destination[Bobs.Comp.Columns.CorrectAnswer] = source[Bobs.Comp.Columns.CorrectAnswer];
			destination[Bobs.Comp.Columns.Prize] = source[Bobs.Comp.Columns.Prize];
			destination[Bobs.Comp.Columns.Prize2] = source[Bobs.Comp.Columns.Prize2];
			destination[Bobs.Comp.Columns.Prize3] = source[Bobs.Comp.Columns.Prize3];
			destination[Bobs.Comp.Columns.SponsorDetails] = source[Bobs.Comp.Columns.SponsorDetails];
			destination[Bobs.Comp.Columns.Winners] = source[Bobs.Comp.Columns.Winners];
			destination[Bobs.Comp.Columns.Winners2] = source[Bobs.Comp.Columns.Winners2];
			destination[Bobs.Comp.Columns.Winners3] = source[Bobs.Comp.Columns.Winners3];
			destination[Bobs.Comp.Columns.WinnersPicked] = source[Bobs.Comp.Columns.WinnersPicked];
			destination[Bobs.Comp.Columns.OwnerUsrK] = source[Bobs.Comp.Columns.OwnerUsrK];
			destination[Bobs.Comp.Columns.IconFilename] = source[Bobs.Comp.Columns.IconFilename];
			destination[Bobs.Comp.Columns.PrizeValueRange] = source[Bobs.Comp.Columns.PrizeValueRange];
			destination[Bobs.Comp.Columns.Entries] = source[Bobs.Comp.Columns.Entries];
			destination[Bobs.Comp.Columns.Pic] = source[Bobs.Comp.Columns.Pic];
			destination[Bobs.Comp.Columns.PicOriginal] = source[Bobs.Comp.Columns.PicOriginal];
			destination[Bobs.Comp.Columns.DisplayType] = source[Bobs.Comp.Columns.DisplayType];
			destination[Bobs.Comp.Columns.Status] = source[Bobs.Comp.Columns.Status];
			destination[Bobs.Comp.Columns.PromoterK] = source[Bobs.Comp.Columns.PromoterK];
			destination[Bobs.Comp.Columns.BrandK] = source[Bobs.Comp.Columns.BrandK];
			destination[Bobs.Comp.Columns.EventK] = source[Bobs.Comp.Columns.EventK];
			destination[Bobs.Comp.Columns.LinkType] = source[Bobs.Comp.Columns.LinkType];
			destination[Bobs.Comp.Columns.PicState] = source[Bobs.Comp.Columns.PicState];
			destination[Bobs.Comp.Columns.PicPhotoK] = source[Bobs.Comp.Columns.PicPhotoK];
			destination[Bobs.Comp.Columns.PicMiscK] = source[Bobs.Comp.Columns.PicMiscK];
			destination[Bobs.Comp.Columns.IsHtmlOverride] = source[Bobs.Comp.Columns.IsHtmlOverride];
		}
		
		public CompDataHolder(Comp bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// The primary key
		/// </summary>
		public int K
		{
			get { return dataHolder.K; }
			set { this.dataHolder.K = value; }
		}
		/// <summary>
		/// DateTime that the competition was added to the system
		/// </summary>
		public DateTime DateTimeAdded
		{
			get { return dataHolder.DateTimeAdded; }
			set { this.dataHolder.DateTimeAdded = value; }
		}
		/// <summary>
		/// DateTime that the competition starts
		/// </summary>
		public DateTime DateTimeStart
		{
			get { return dataHolder.DateTimeStart; }
			set { this.dataHolder.DateTimeStart = value; }
		}
		/// <summary>
		/// DateTime that the competition closes
		/// </summary>
		public DateTime DateTimeClose
		{
			get { return dataHolder.DateTimeClose; }
			set { this.dataHolder.DateTimeClose = value; }
		}
		/// <summary>
		/// Question
		/// </summary>
		public string Question
		{
			get { return dataHolder.Question; }
			set { this.dataHolder.Question = value; }
		}
		/// <summary>
		/// Multiple choice answer 1
		/// </summary>
		public string Answer1
		{
			get { return dataHolder.Answer1; }
			set { this.dataHolder.Answer1 = value; }
		}
		/// <summary>
		/// Multiple choice answer 2
		/// </summary>
		public string Answer2
		{
			get { return dataHolder.Answer2; }
			set { this.dataHolder.Answer2 = value; }
		}
		/// <summary>
		/// Multiple choice answer 3
		/// </summary>
		public string Answer3
		{
			get { return dataHolder.Answer3; }
			set { this.dataHolder.Answer3 = value; }
		}
		/// <summary>
		/// The correct answer - 1, 2 or 3
		/// </summary>
		public int CorrectAnswer
		{
			get { return dataHolder.CorrectAnswer; }
			set { this.dataHolder.CorrectAnswer = value; }
		}
		/// <summary>
		/// Description of the first prize
		/// </summary>
		public string Prize
		{
			get { return dataHolder.Prize; }
			set { this.dataHolder.Prize = value; }
		}
		/// <summary>
		/// Description of the second prize
		/// </summary>
		public string Prize2
		{
			get { return dataHolder.Prize2; }
			set { this.dataHolder.Prize2 = value; }
		}
		/// <summary>
		/// Description of the third prize
		/// </summary>
		public string Prize3
		{
			get { return dataHolder.Prize3; }
			set { this.dataHolder.Prize3 = value; }
		}
		/// <summary>
		/// HTML snippet about the sponsor. May include logo, link etc.
		/// </summary>
		public string SponsorDetails
		{
			get { return dataHolder.SponsorDetails; }
			set { this.dataHolder.SponsorDetails = value; }
		}
		/// <summary>
		/// Number of first prize winners
		/// </summary>
		public int Winners
		{
			get { return dataHolder.Winners; }
			set { this.dataHolder.Winners = value; }
		}
		/// <summary>
		/// Number of second prize winners
		/// </summary>
		public int Winners2
		{
			get { return dataHolder.Winners2; }
			set { this.dataHolder.Winners2 = value; }
		}
		/// <summary>
		/// Number of third prize winners
		/// </summary>
		public int Winners3
		{
			get { return dataHolder.Winners3; }
			set { this.dataHolder.Winners3 = value; }
		}
		/// <summary>
		/// Have the winners been picked and notified yet?
		/// </summary>
		public bool WinnersPicked
		{
			get { return dataHolder.WinnersPicked; }
			set { this.dataHolder.WinnersPicked = value; }
		}
		/// <summary>
		/// The owner that has access to the results
		/// </summary>
		public int OwnerUsrK
		{
			get { return dataHolder.OwnerUsrK; }
			set { this.dataHolder.OwnerUsrK = value; }
		}
		/// <summary>
		/// The url of the icon (should be approx 30*30)
		/// </summary>
		public string IconFilename
		{
			get { return dataHolder.IconFilename; }
			set { this.dataHolder.IconFilename = value; }
		}
		/// <summary>
		/// Prize value range - 1=£0-£100, 2=£100+, 3=£500+
		/// </summary>
		public int PrizeValueRange
		{
			get { return dataHolder.PrizeValueRange; }
			set { this.dataHolder.PrizeValueRange = value; }
		}
		/// <summary>
		/// Number of entries
		/// </summary>
		public int Entries
		{
			get { return dataHolder.Entries; }
			set { this.dataHolder.Entries = value; }
		}
		/// <summary>
		/// Cropped image 100*100
		/// </summary>
		public Guid Pic
		{
			get { return dataHolder.Pic; }
			set { this.dataHolder.Pic = value; }
		}
		/// <summary>
		/// Original file for cropped image
		/// </summary>
		public Guid PicOriginal
		{
			get { return dataHolder.PicOriginal; }
			set { this.dataHolder.PicOriginal = value; }
		}
		/// <summary>
		/// Number of entries
		/// </summary>
		public int DisplayType
		{
			get { return dataHolder.DisplayType; }
			set { this.dataHolder.DisplayType = value; }
		}
		/// <summary>
		/// Status
		/// </summary>
		public int Status
		{
			get { return dataHolder.Status; }
			set { this.dataHolder.Status = value; }
		}
		/// <summary>
		/// The owner promoter
		/// </summary>
		public int PromoterK
		{
			get { return dataHolder.PromoterK; }
			set { this.dataHolder.PromoterK = value; }
		}
		/// <summary>
		/// The relevant brand (if any)
		/// </summary>
		public int BrandK
		{
			get { return dataHolder.BrandK; }
			set { this.dataHolder.BrandK = value; }
		}
		/// <summary>
		/// The relevant event (if any)
		/// </summary>
		public int EventK
		{
			get { return dataHolder.EventK; }
			set { this.dataHolder.EventK = value; }
		}
		/// <summary>
		/// Where is this competition linking to?
		/// </summary>
		public int LinkType
		{
			get { return dataHolder.LinkType; }
			set { this.dataHolder.LinkType = value; }
		}
		/// <summary>
		/// State var used to reconstruct cropper when re-cropping
		/// </summary>
		public string PicState
		{
			get { return dataHolder.PicState; }
			set { this.dataHolder.PicState = value; }
		}
		/// <summary>
		/// The Photo that was used to create the Pic.
		/// </summary>
		public int PicPhotoK
		{
			get { return dataHolder.PicPhotoK; }
			set { this.dataHolder.PicPhotoK = value; }
		}
		/// <summary>
		/// The Misc that was used to create the Pic.
		/// </summary>
		public int PicMiscK
		{
			get { return dataHolder.PicMiscK; }
			set { this.dataHolder.PicMiscK = value; }
		}
		/// <summary>
		/// Is this competition an HTML override?
		/// </summary>
		public bool IsHtmlOverride
		{
			get { return dataHolder.IsHtmlOverride; }
			set { this.dataHolder.IsHtmlOverride = value; }
		}
		#endregion
		public Comp Comp
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new Comp(K);
					}
					else
					{
						bob = new Comp();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region CompSet
	public partial class CompSet : BobSet, IEnumerable<Comp>
	{
		public CompSet(Query query) : base(query) { }

		public Comp this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new Comp(this);
					((Comp)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (Comp)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new CompTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<Comp> ToList()
		{
			List<Comp> list = new List<Comp>();
			foreach (Comp item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<Comp> Members

		public new IEnumerator<Comp> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region CompTableDef
	public class CompTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "Comp";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "61E0C58E";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return Comp.GetColumnName((Comp.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.Comp;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return true;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return Comp.Columns.K;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			Comp.Columns c = (Comp.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case Comp.Columns.K: ColumnStore[i] = new ColumnDef(c, "K", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey | SqlColumnFlag.AutoNumber, null); break;
					case Comp.Columns.DateTimeAdded: ColumnStore[i] = new ColumnDef(c, "DateTimeAdded", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case Comp.Columns.DateTimeStart: ColumnStore[i] = new ColumnDef(c, "DateTimeStart", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case Comp.Columns.DateTimeClose: ColumnStore[i] = new ColumnDef(c, "DateTimeClose", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case Comp.Columns.Question: ColumnStore[i] = new ColumnDef(c, "Question", SqlDbType.VarChar, 200, ""); break;
					case Comp.Columns.Answer1: ColumnStore[i] = new ColumnDef(c, "Answer1", SqlDbType.VarChar, 100, ""); break;
					case Comp.Columns.Answer2: ColumnStore[i] = new ColumnDef(c, "Answer2", SqlDbType.VarChar, 100, ""); break;
					case Comp.Columns.Answer3: ColumnStore[i] = new ColumnDef(c, "Answer3", SqlDbType.VarChar, 100, ""); break;
					case Comp.Columns.CorrectAnswer: ColumnStore[i] = new ColumnDef(c, "CorrectAnswer", SqlDbType.Int, 0); break;
					case Comp.Columns.Prize: ColumnStore[i] = new ColumnDef(c, "Prize", SqlDbType.VarChar, 200, ""); break;
					case Comp.Columns.Prize2: ColumnStore[i] = new ColumnDef(c, "Prize2", SqlDbType.VarChar, 200, ""); break;
					case Comp.Columns.Prize3: ColumnStore[i] = new ColumnDef(c, "Prize3", SqlDbType.VarChar, 200, ""); break;
					case Comp.Columns.SponsorDetails: ColumnStore[i] = new ColumnDef(c, "SponsorDetails", SqlDbType.Text, ""); break;
					case Comp.Columns.Winners: ColumnStore[i] = new ColumnDef(c, "Winners", SqlDbType.Int, 0); break;
					case Comp.Columns.Winners2: ColumnStore[i] = new ColumnDef(c, "Winners2", SqlDbType.Int, 0); break;
					case Comp.Columns.Winners3: ColumnStore[i] = new ColumnDef(c, "Winners3", SqlDbType.Int, 0); break;
					case Comp.Columns.WinnersPicked: ColumnStore[i] = new ColumnDef(c, "WinnersPicked", SqlDbType.Bit, false); break;
					case Comp.Columns.OwnerUsrK: ColumnStore[i] = new ColumnDef(c, "OwnerUsrK", SqlDbType.Int, 0); break;
					case Comp.Columns.IconFilename: ColumnStore[i] = new ColumnDef(c, "IconFilename", SqlDbType.VarChar, 100, ""); break;
					case Comp.Columns.PrizeValueRange: ColumnStore[i] = new ColumnDef(c, "PrizeValueRange", SqlDbType.Int, 0); break;
					case Comp.Columns.Entries: ColumnStore[i] = new ColumnDef(c, "Entries", SqlDbType.Int, 0); break;
					case Comp.Columns.Pic: ColumnStore[i] = new ColumnDef(c, "Pic", SqlDbType.UniqueIdentifier, Guid.Empty); break;
					case Comp.Columns.PicOriginal: ColumnStore[i] = new ColumnDef(c, "PicOriginal", SqlDbType.UniqueIdentifier, Guid.Empty); break;
					case Comp.Columns.DisplayType: ColumnStore[i] = new ColumnDef(c, "DisplayType", SqlDbType.Int, 0); break;
					case Comp.Columns.Status: ColumnStore[i] = new ColumnDef(c, "Status", SqlDbType.Int, 0); break;
					case Comp.Columns.PromoterK: ColumnStore[i] = new ColumnDef(c, "PromoterK", SqlDbType.Int, 0); break;
					case Comp.Columns.BrandK: ColumnStore[i] = new ColumnDef(c, "BrandK", SqlDbType.Int, 0); break;
					case Comp.Columns.EventK: ColumnStore[i] = new ColumnDef(c, "EventK", SqlDbType.Int, 0); break;
					case Comp.Columns.LinkType: ColumnStore[i] = new ColumnDef(c, "LinkType", SqlDbType.Int, 0); break;
					case Comp.Columns.PicState: ColumnStore[i] = new ColumnDef(c, "PicState", SqlDbType.VarChar, 100, ""); break;
					case Comp.Columns.PicPhotoK: ColumnStore[i] = new ColumnDef(c, "PicPhotoK", SqlDbType.Int, 0); break;
					case Comp.Columns.PicMiscK: ColumnStore[i] = new ColumnDef(c, "PicMiscK", SqlDbType.Int, 0); break;
					case Comp.Columns.IsHtmlOverride: ColumnStore[i] = new ColumnDef(c, "IsHtmlOverride", SqlDbType.Bit, false); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(Comp.Columns.K);
						InitColumn(Comp.Columns.DateTimeAdded);
						InitColumn(Comp.Columns.DateTimeStart);
						InitColumn(Comp.Columns.DateTimeClose);
						InitColumn(Comp.Columns.Question);
						InitColumn(Comp.Columns.Answer1);
						InitColumn(Comp.Columns.Answer2);
						InitColumn(Comp.Columns.Answer3);
						InitColumn(Comp.Columns.CorrectAnswer);
						InitColumn(Comp.Columns.Prize);
						InitColumn(Comp.Columns.Prize2);
						InitColumn(Comp.Columns.Prize3);
						InitColumn(Comp.Columns.SponsorDetails);
						InitColumn(Comp.Columns.Winners);
						InitColumn(Comp.Columns.Winners2);
						InitColumn(Comp.Columns.Winners3);
						InitColumn(Comp.Columns.WinnersPicked);
						InitColumn(Comp.Columns.OwnerUsrK);
						InitColumn(Comp.Columns.IconFilename);
						InitColumn(Comp.Columns.PrizeValueRange);
						InitColumn(Comp.Columns.Entries);
						InitColumn(Comp.Columns.Pic);
						InitColumn(Comp.Columns.PicOriginal);
						InitColumn(Comp.Columns.DisplayType);
						InitColumn(Comp.Columns.Status);
						InitColumn(Comp.Columns.PromoterK);
						InitColumn(Comp.Columns.BrandK);
						InitColumn(Comp.Columns.EventK);
						InitColumn(Comp.Columns.LinkType);
						InitColumn(Comp.Columns.PicState);
						InitColumn(Comp.Columns.PicPhotoK);
						InitColumn(Comp.Columns.PicMiscK);
						InitColumn(Comp.Columns.IsHtmlOverride);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region CompEntry
	/// <summary>
	/// Competition entry
	/// </summary>
	public partial class CompEntry : Model.Entities.CompEntry, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// Link to the Comp table
			/// </summary>
			CompK = 0x00150001,
			/// <summary>
			/// Link to Usr table
			/// </summary>
			UsrK = 0x00150002,
			/// <summary>
			/// Answer - 1,2 or 3
			/// </summary>
			Answer = 0x00150003,
			/// <summary>
			/// Is this entry a winner?
			/// </summary>
			Winner = 0x00150004,
			/// <summary>
			/// What prize did they win? 1,2 or 3?
			/// </summary>
			Prize = 0x00150005,
			/// <summary>
			/// Link to PM thread with owner
			/// </summary>
			WinnerThreadK = 0x00150006,
		}
		#endregion
		public static string GetColumnName(CompEntry.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case CompEntry.Columns.CompK: return "CompK";
						case CompEntry.Columns.UsrK: return "UsrK";
						case CompEntry.Columns.Answer: return "Answer";
						case CompEntry.Columns.Winner: return "Winner";
						case CompEntry.Columns.Prize: return "Prize";
						case CompEntry.Columns.WinnerThreadK: return "WinnerThreadK";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(CompEntry.Columns columnEnum)
		{
			switch (columnEnum)
			{
										default: return false;
			}
		}


		#region Common
	 
		public CompEntry(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);}
		public CompEntry()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.CompEntry);
		}
		public CompEntry(BobSet bs)
		{
			this.Bob = new Bob(Bobs.Tables.Defs.CompEntry, bs);
		}
		public CompEntry(IBob Parent, object Column) : this()
		{
			this.Bob.GetBobFromParentSimple(Parent, Column, TablesEnum.CompEntry);
		}
		public CompEntry(int CompK, int UsrK) : this()
		{
			this.Bob.GetBobFromPrimaryKeyArray(new Q[] {new Q(CompEntry.Columns.CompK,CompK), new Q(CompEntry.Columns.UsrK,UsrK)});
		} 
		#endregion

	}
	#endregion
	#region CompEntryTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region CompEntry
	/// <summary>
	/// Competition entry
	/// </summary>
	[Serializable]
	public partial class CompEntry 
	{
		
		#region Simple members
		/// <summary>
		/// Link to the Comp table
		/// </summary>
		public override int CompK
		{
			get { return (int)this[CompEntry.Columns.CompK]; }
			set { this[CompEntry.Columns.CompK] = value; }
		}
		/// <summary>
		/// Link to Usr table
		/// </summary>
		public override int UsrK
		{
			get { return (int)this[CompEntry.Columns.UsrK]; }
			set { this[CompEntry.Columns.UsrK] = value; }
		}
		/// <summary>
		/// Answer - 1,2 or 3
		/// </summary>
		public override int Answer
		{
			get { return (int)this[CompEntry.Columns.Answer]; }
			set { this[CompEntry.Columns.Answer] = value; }
		}
		/// <summary>
		/// Is this entry a winner?
		/// </summary>
		public override bool Winner
		{
			get { return (bool)this[CompEntry.Columns.Winner]; }
			set { this[CompEntry.Columns.Winner] = value; }
		}
		/// <summary>
		/// What prize did they win? 1,2 or 3?
		/// </summary>
		public override int Prize
		{
			get { return (int)this[CompEntry.Columns.Prize]; }
			set { this[CompEntry.Columns.Prize] = value; }
		}
		/// <summary>
		/// Link to PM thread with owner
		/// </summary>
		public override int WinnerThreadK
		{
			get { return (int)this[CompEntry.Columns.WinnerThreadK]; }
			set { this[CompEntry.Columns.WinnerThreadK] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildCompEntrys
	{
		CachedSqlSelect<CompEntry> ChildCompEntrys();
		CachedSqlSelect<CompEntry> ChildCompEntrys(Q where);
		CachedSqlSelect<CompEntry> ChildCompEntrys(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<CompEntry> ChildCompEntrys(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class CompEntry 
		{
		}

	#region CompEntryDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region CompEntryDataHolder
	/// <summary>
	/// Competition entryDataHolder
	/// </summary>
	[Serializable]
	public partial class CompEntryDataHolder : DataHolder<CompEntry>
	{
		CompEntry dataHolder;
		[NonSerializedAttribute] CompEntry bob;

		public CompEntryDataHolder()
		{
			this.dataHolder = new CompEntry();
		}
		
		void CopyValues(CompEntry source, CompEntry destination)
		{
			destination[Bobs.CompEntry.Columns.CompK] = source[Bobs.CompEntry.Columns.CompK];
			destination[Bobs.CompEntry.Columns.UsrK] = source[Bobs.CompEntry.Columns.UsrK];
			destination[Bobs.CompEntry.Columns.Answer] = source[Bobs.CompEntry.Columns.Answer];
			destination[Bobs.CompEntry.Columns.Winner] = source[Bobs.CompEntry.Columns.Winner];
			destination[Bobs.CompEntry.Columns.Prize] = source[Bobs.CompEntry.Columns.Prize];
			destination[Bobs.CompEntry.Columns.WinnerThreadK] = source[Bobs.CompEntry.Columns.WinnerThreadK];
		}
		
		public CompEntryDataHolder(CompEntry bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// Link to the Comp table
		/// </summary>
		public int CompK
		{
			get { return dataHolder.CompK; }
			set { this.dataHolder.CompK = value; }
		}
		/// <summary>
		/// Link to Usr table
		/// </summary>
		public int UsrK
		{
			get { return dataHolder.UsrK; }
			set { this.dataHolder.UsrK = value; }
		}
		/// <summary>
		/// Answer - 1,2 or 3
		/// </summary>
		public int Answer
		{
			get { return dataHolder.Answer; }
			set { this.dataHolder.Answer = value; }
		}
		/// <summary>
		/// Is this entry a winner?
		/// </summary>
		public bool Winner
		{
			get { return dataHolder.Winner; }
			set { this.dataHolder.Winner = value; }
		}
		/// <summary>
		/// What prize did they win? 1,2 or 3?
		/// </summary>
		public int Prize
		{
			get { return dataHolder.Prize; }
			set { this.dataHolder.Prize = value; }
		}
		/// <summary>
		/// Link to PM thread with owner
		/// </summary>
		public int WinnerThreadK
		{
			get { return dataHolder.WinnerThreadK; }
			set { this.dataHolder.WinnerThreadK = value; }
		}
		#endregion
		public CompEntry CompEntry
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new CompEntry(K);
					}
					else
					{
						bob = new CompEntry();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region CompEntrySet
	public partial class CompEntrySet : BobSet, IEnumerable<CompEntry>
	{
		public CompEntrySet(Query query) : base(query) { }

		public CompEntry this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new CompEntry(this);
					((CompEntry)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (CompEntry)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new CompEntryTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<CompEntry> ToList()
		{
			List<CompEntry> list = new List<CompEntry>();
			foreach (CompEntry item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<CompEntry> Members

		public new IEnumerator<CompEntry> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region CompEntryTableDef
	public class CompEntryTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "CompEntry";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "CEEC0128";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return CompEntry.GetColumnName((CompEntry.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.CompEntry;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return false;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return null;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			CompEntry.Columns c = (CompEntry.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case CompEntry.Columns.CompK: ColumnStore[i] = new ColumnDef(c, "CompK", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey, 0); break;
					case CompEntry.Columns.UsrK: ColumnStore[i] = new ColumnDef(c, "UsrK", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey, 0); break;
					case CompEntry.Columns.Answer: ColumnStore[i] = new ColumnDef(c, "Answer", SqlDbType.Int, 0); break;
					case CompEntry.Columns.Winner: ColumnStore[i] = new ColumnDef(c, "Winner", SqlDbType.Bit, false); break;
					case CompEntry.Columns.Prize: ColumnStore[i] = new ColumnDef(c, "Prize", SqlDbType.Int, 0); break;
					case CompEntry.Columns.WinnerThreadK: ColumnStore[i] = new ColumnDef(c, "WinnerThreadK", SqlDbType.Int, 0); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(CompEntry.Columns.CompK);
						InitColumn(CompEntry.Columns.UsrK);
						InitColumn(CompEntry.Columns.Answer);
						InitColumn(CompEntry.Columns.Winner);
						InitColumn(CompEntry.Columns.Prize);
						InitColumn(CompEntry.Columns.WinnerThreadK);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region Country
	/// <summary>
	/// Country
	/// </summary>
	public partial class Country : Model.Entities.Country, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// Key
			/// </summary>
			K = 0x00160001,
			/// <summary>
			/// Name of the country
			/// </summary>
			Name = 0x00160002,
			/// <summary>
			/// three letter currency code - NULL if minor country
			/// </summary>
			CurrencyCode = 0x00160003,
			/// <summary>
			/// Currency name (not currently used on site) - NULL if minor country
			/// </summary>
			CurrencyName = 0x00160004,
			/// <summary>
			/// Number of decimal places used in the currency (not currently used on site) - NULL if minor country
			/// </summary>
			CurrencyDecimals = 0x00160005,
			/// <summary>
			/// Region - BillingRegionEnum
			/// </summary>
			Region = 0x00160006,
			/// <summary>
			/// 2 letter country code transmitted to WorldPay during order
			/// </summary>
			Code2Letter = 0x00160007,
			/// <summary>
			/// 3 letter country code
			/// </summary>
			Code3Letter = 0x00160008,
			/// <summary>
			/// 3 number country code
			/// </summary>
			Code3Number = 0x00160009,
			/// <summary>
			/// The two letter prefix to the VAT codes
			/// </summary>
			EuVatCodePrefix = 0x0016000a,
			/// <summary>
			/// Minimum place population to display in the top places list
			/// </summary>
			PlacePopulationMinimum = 0x0016000b,
			/// <summary>
			/// Abbreviated name - e.g. United Kingdom = UK
			/// </summary>
			FriendlyName = 0x0016000c,
			/// <summary>
			/// Postcode type for user sign-up, venue entry and spotter sign-up
			/// </summary>
			PostcodeType = 0x0016000d,
			/// <summary>
			/// Does the country have loads of events? This restricts the past events on the FP to show only those with events etc.
			/// </summary>
			Mature = 0x0016000e,
			/// <summary>
			/// Should the place names be followed by the region abbreviation? Should the All Places page have details about the Regions?
			/// </summary>
			UseRegion = 0x0016000f,
			/// <summary>
			/// What does this country call its regions (e.g. "State" for the US).
			/// </summary>
			RegionName = 0x00160010,
			/// <summary>
			/// Is the country enabled on the site?
			/// </summary>
			Enabled = 0x00160011,
			/// <summary>
			/// Minimum events a place should have before being included on the place menu
			/// </summary>
			MinEventsForPlaceMenu = 0x00160012,
			/// <summary>
			/// International phone dialing prefix for this country
			/// </summary>
			DialingCode = 0x00160013,
			/// <summary>
			/// Total events in this country
			/// </summary>
			TotalEvents = 0x00160014,
			/// <summary>
			/// Name used in url's
			/// </summary>
			UrlName = 0x00160015,
			/// <summary>
			/// Custom Html shown on the country page.
			/// </summary>
			CustomHtml = 0x00160016,
			/// <summary>
			/// Royal mail postage zone
			/// </summary>
			PostageZone = 0x00160017,
		}
		#endregion
		public static string GetColumnName(Country.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case Country.Columns.K: return "K";
						case Country.Columns.Name: return "Name";
						case Country.Columns.CurrencyCode: return "CurrencyCode";
						case Country.Columns.CurrencyName: return "CurrencyName";
						case Country.Columns.CurrencyDecimals: return "CurrencyDecimals";
						case Country.Columns.Region: return "Region";
						case Country.Columns.Code2Letter: return "Code2Letter";
						case Country.Columns.Code3Letter: return "Code3Letter";
						case Country.Columns.Code3Number: return "Code3Number";
						case Country.Columns.EuVatCodePrefix: return "EuVatCodePrefix";
						case Country.Columns.PlacePopulationMinimum: return "PlacePopulationMinimum";
						case Country.Columns.FriendlyName: return "FriendlyName";
						case Country.Columns.PostcodeType: return "PostcodeType";
						case Country.Columns.Mature: return "Mature";
						case Country.Columns.UseRegion: return "UseRegion";
						case Country.Columns.RegionName: return "RegionName";
						case Country.Columns.Enabled: return "Enabled";
						case Country.Columns.MinEventsForPlaceMenu: return "MinEventsForPlaceMenu";
						case Country.Columns.DialingCode: return "DialingCode";
						case Country.Columns.TotalEvents: return "TotalEvents";
						case Country.Columns.UrlName: return "UrlName";
						case Country.Columns.CustomHtml: return "CustomHtml";
						case Country.Columns.PostageZone: return "PostageZone";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(Country.Columns columnEnum)
		{
			switch (columnEnum)
			{
																											default: return false;
			}
		}


		#region Common
 
		public Country(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);  }
		public Country()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.Country);
		}
		public Country(BobSet bs)
		{
			this.Bob = new Bob(bs.Table, bs);
		}
		public Country(int CountryK, IBob Parent, object Column)
			: this()
		{
			Bob.GetBobFromParent(CountryK, Parent.Bob, Column, TablesEnum.Country);
		}
		public Country(int CountryK)
			: this()
		{
			Bob.GetBobFromPrimaryKey(CountryK);
		}
		#endregion

	}
	#endregion
	#region CountryTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region Country
	/// <summary>
	/// Country
	/// </summary>
	[Serializable]
	public partial class Country 
	{
		
		#region Simple members
		/// <summary>
		/// Key
		/// </summary>
		public override int K
		{
			get { return (int)this[Country.Columns.K] as int? ?? 0 ; }
			set { this[Country.Columns.K] = value; }
		}
		/// <summary>
		/// Name of the country
		/// </summary>
		public override string Name
		{
			get { return (string)this[Country.Columns.Name]; }
			set { this[Country.Columns.Name] = value; }
		}
		/// <summary>
		/// three letter currency code - NULL if minor country
		/// </summary>
		public override string CurrencyCode
		{
			get { return (string)this[Country.Columns.CurrencyCode]; }
			set { this[Country.Columns.CurrencyCode] = value; }
		}
		/// <summary>
		/// Currency name (not currently used on site) - NULL if minor country
		/// </summary>
		public override string CurrencyName
		{
			get { return (string)this[Country.Columns.CurrencyName]; }
			set { this[Country.Columns.CurrencyName] = value; }
		}
		/// <summary>
		/// Number of decimal places used in the currency (not currently used on site) - NULL if minor country
		/// </summary>
		public override int CurrencyDecimals
		{
			get { return (int)this[Country.Columns.CurrencyDecimals]; }
			set { this[Country.Columns.CurrencyDecimals] = value; }
		}
		/// <summary>
		/// Region - BillingRegionEnum
		/// </summary>
		public override int Region
		{
			get { return (int)this[Country.Columns.Region]; }
			set { this[Country.Columns.Region] = value; }
		}
		/// <summary>
		/// 2 letter country code transmitted to WorldPay during order
		/// </summary>
		public override string Code2Letter
		{
			get { return (string)this[Country.Columns.Code2Letter]; }
			set { this[Country.Columns.Code2Letter] = value; }
		}
		/// <summary>
		/// 3 letter country code
		/// </summary>
		public override string Code3Letter
		{
			get { return (string)this[Country.Columns.Code3Letter]; }
			set { this[Country.Columns.Code3Letter] = value; }
		}
		/// <summary>
		/// 3 number country code
		/// </summary>
		public override string Code3Number
		{
			get { return (string)this[Country.Columns.Code3Number]; }
			set { this[Country.Columns.Code3Number] = value; }
		}
		/// <summary>
		/// The two letter prefix to the VAT codes
		/// </summary>
		public override string EuVatCodePrefix
		{
			get { return (string)this[Country.Columns.EuVatCodePrefix]; }
			set { this[Country.Columns.EuVatCodePrefix] = value; }
		}
		/// <summary>
		/// Minimum place population to display in the top places list
		/// </summary>
		public override int PlacePopulationMinimum
		{
			get { return (int)this[Country.Columns.PlacePopulationMinimum]; }
			set { this[Country.Columns.PlacePopulationMinimum] = value; }
		}
		/// <summary>
		/// Abbreviated name - e.g. United Kingdom = UK
		/// </summary>
		public override string FriendlyName
		{
			get { return (string)this[Country.Columns.FriendlyName]; }
			set { this[Country.Columns.FriendlyName] = value; }
		}
		/// <summary>
		/// Postcode type for user sign-up, venue entry and spotter sign-up
		/// </summary>
		public override int PostcodeType
		{
			get { return (int)this[Country.Columns.PostcodeType]; }
			set { this[Country.Columns.PostcodeType] = value; }
		}
		/// <summary>
		/// Does the country have loads of events? This restricts the past events on the FP to show only those with events etc.
		/// </summary>
		public override bool Mature
		{
			get { return (bool)this[Country.Columns.Mature]; }
			set { this[Country.Columns.Mature] = value; }
		}
		/// <summary>
		/// Should the place names be followed by the region abbreviation? Should the All Places page have details about the Regions?
		/// </summary>
		public override bool UseRegion
		{
			get { return (bool)this[Country.Columns.UseRegion]; }
			set { this[Country.Columns.UseRegion] = value; }
		}
		/// <summary>
		/// What does this country call its regions (e.g. "State" for the US).
		/// </summary>
		public override string RegionName
		{
			get { return (string)this[Country.Columns.RegionName]; }
			set { this[Country.Columns.RegionName] = value; }
		}
		/// <summary>
		/// Is the country enabled on the site?
		/// </summary>
		public override bool Enabled
		{
			get { return (bool)this[Country.Columns.Enabled]; }
			set { this[Country.Columns.Enabled] = value; }
		}
		/// <summary>
		/// Minimum events a place should have before being included on the place menu
		/// </summary>
		public override int MinEventsForPlaceMenu
		{
			get { return (int)this[Country.Columns.MinEventsForPlaceMenu]; }
			set { this[Country.Columns.MinEventsForPlaceMenu] = value; }
		}
		/// <summary>
		/// International phone dialing prefix for this country
		/// </summary>
		public override int DialingCode
		{
			get { return (int)this[Country.Columns.DialingCode]; }
			set { this[Country.Columns.DialingCode] = value; }
		}
		/// <summary>
		/// Total events in this country
		/// </summary>
		public override int TotalEvents
		{
			get { return (int)this[Country.Columns.TotalEvents]; }
			set { this[Country.Columns.TotalEvents] = value; }
		}
		/// <summary>
		/// Name used in url's
		/// </summary>
		public override string UrlName
		{
			get { return (string)this[Country.Columns.UrlName]; }
			set { this[Country.Columns.UrlName] = value; }
		}
		/// <summary>
		/// Custom Html shown on the country page.
		/// </summary>
		public override string CustomHtml
		{
			get { return (string)this[Country.Columns.CustomHtml]; }
			set { this[Country.Columns.CustomHtml] = value; }
		}
		/// <summary>
		/// Royal mail postage zone
		/// </summary>
		public override int PostageZone
		{
			get { return (int)this[Country.Columns.PostageZone]; }
			set { this[Country.Columns.PostageZone] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildCountrys
	{
		CachedSqlSelect<Country> ChildCountrys();
		CachedSqlSelect<Country> ChildCountrys(Q where);
		CachedSqlSelect<Country> ChildCountrys(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<Country> ChildCountrys(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class Country 
	 : 
	Bobs.ChildInterfaces.IHasChildArticles
	,
	Bobs.ChildInterfaces.IHasChildGroups
	,
	Bobs.ChildInterfaces.IHasChildIpCountrys
	,
	Bobs.ChildInterfaces.IHasChildPlaces
	,
	Bobs.ChildInterfaces.IHasChildRegions
	,
	Bobs.ChildInterfaces.IHasChildThreads
	,
	Bobs.ChildInterfaces.IHasChildVisits
		{
			public CachedSqlSelect<Article> ChildArticles()
		{
			return this.ChildArticles(null, null);
		}
		public CachedSqlSelect<Article> ChildArticles(Q where)
		{
			return this.ChildArticles(where, null);
		}
		public CachedSqlSelect<Article> ChildArticles(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildArticles(null, orderBy);
		}
		public CachedSqlSelect<Article> ChildArticles(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<Article>
			(
				new Children<Article>
				(
					TablesEnum.Country, 
					this.K, 
					TablesEnum.Article, 
					dr => 
					{ 
						Article newArticle = new Article(); 
						newArticle.Initialise(dr); 
						return newArticle;
					},
					"D389F153",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<Group> ChildGroups()
		{
			return this.ChildGroups(null, null);
		}
		public CachedSqlSelect<Group> ChildGroups(Q where)
		{
			return this.ChildGroups(where, null);
		}
		public CachedSqlSelect<Group> ChildGroups(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildGroups(null, orderBy);
		}
		public CachedSqlSelect<Group> ChildGroups(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<Group>
			(
				new Children<Group>
				(
					TablesEnum.Country, 
					this.K, 
					TablesEnum.Group, 
					dr => 
					{ 
						Group newGroup = new Group(); 
						newGroup.Initialise(dr); 
						return newGroup;
					},
					"81294206",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<IpCountry> ChildIpCountrys()
		{
			return this.ChildIpCountrys(null, null);
		}
		public CachedSqlSelect<IpCountry> ChildIpCountrys(Q where)
		{
			return this.ChildIpCountrys(where, null);
		}
		public CachedSqlSelect<IpCountry> ChildIpCountrys(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildIpCountrys(null, orderBy);
		}
		public CachedSqlSelect<IpCountry> ChildIpCountrys(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<IpCountry>
			(
				new Children<IpCountry>
				(
					TablesEnum.Country, 
					this.K, 
					TablesEnum.IpCountry, 
					dr => 
					{ 
						IpCountry newIpCountry = new IpCountry(); 
						newIpCountry.Initialise(dr); 
						return newIpCountry;
					},
					"C2F26276",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<Place> ChildPlaces()
		{
			return this.ChildPlaces(null, null);
		}
		public CachedSqlSelect<Place> ChildPlaces(Q where)
		{
			return this.ChildPlaces(where, null);
		}
		public CachedSqlSelect<Place> ChildPlaces(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildPlaces(null, orderBy);
		}
		public CachedSqlSelect<Place> ChildPlaces(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<Place>
			(
				new Children<Place>
				(
					TablesEnum.Country, 
					this.K, 
					TablesEnum.Place, 
					dr => 
					{ 
						Place newPlace = new Place(); 
						newPlace.Initialise(dr); 
						return newPlace;
					},
					"E6E58561",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<Region> ChildRegions()
		{
			return this.ChildRegions(null, null);
		}
		public CachedSqlSelect<Region> ChildRegions(Q where)
		{
			return this.ChildRegions(where, null);
		}
		public CachedSqlSelect<Region> ChildRegions(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildRegions(null, orderBy);
		}
		public CachedSqlSelect<Region> ChildRegions(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<Region>
			(
				new Children<Region>
				(
					TablesEnum.Country, 
					this.K, 
					TablesEnum.Region, 
					dr => 
					{ 
						Region newRegion = new Region(); 
						newRegion.Initialise(dr); 
						return newRegion;
					},
					"5C2A5A71",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<Thread> ChildThreads()
		{
			return this.ChildThreads(null, null);
		}
		public CachedSqlSelect<Thread> ChildThreads(Q where)
		{
			return this.ChildThreads(where, null);
		}
		public CachedSqlSelect<Thread> ChildThreads(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildThreads(null, orderBy);
		}
		public CachedSqlSelect<Thread> ChildThreads(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<Thread>
			(
				new Children<Thread>
				(
					TablesEnum.Country, 
					this.K, 
					TablesEnum.Thread, 
					dr => 
					{ 
						Thread newThread = new Thread(); 
						newThread.Initialise(dr); 
						return newThread;
					},
					"4576C3F1",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<Visit> ChildVisits()
		{
			return this.ChildVisits(null, null);
		}
		public CachedSqlSelect<Visit> ChildVisits(Q where)
		{
			return this.ChildVisits(where, null);
		}
		public CachedSqlSelect<Visit> ChildVisits(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildVisits(null, orderBy);
		}
		public CachedSqlSelect<Visit> ChildVisits(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<Visit>
			(
				new Children<Visit>
				(
					TablesEnum.Country, 
					this.K, 
					TablesEnum.Visit, 
					dr => 
					{ 
						Visit newVisit = new Visit(); 
						newVisit.Initialise(dr); 
						return newVisit;
					},
					"89BFB233",
					where,
					orderBy
				)
			);
		}
		}

	#region CountryDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region CountryDataHolder
	/// <summary>
	/// CountryDataHolder
	/// </summary>
	[Serializable]
	public partial class CountryDataHolder : DataHolder<Country>
	{
		Country dataHolder;
		[NonSerializedAttribute] Country bob;

		public CountryDataHolder()
		{
			this.dataHolder = new Country();
		}
		
		void CopyValues(Country source, Country destination)
		{
			destination[Bobs.Country.Columns.K] = source[Bobs.Country.Columns.K];
			destination[Bobs.Country.Columns.Name] = source[Bobs.Country.Columns.Name];
			destination[Bobs.Country.Columns.CurrencyCode] = source[Bobs.Country.Columns.CurrencyCode];
			destination[Bobs.Country.Columns.CurrencyName] = source[Bobs.Country.Columns.CurrencyName];
			destination[Bobs.Country.Columns.CurrencyDecimals] = source[Bobs.Country.Columns.CurrencyDecimals];
			destination[Bobs.Country.Columns.Region] = source[Bobs.Country.Columns.Region];
			destination[Bobs.Country.Columns.Code2Letter] = source[Bobs.Country.Columns.Code2Letter];
			destination[Bobs.Country.Columns.Code3Letter] = source[Bobs.Country.Columns.Code3Letter];
			destination[Bobs.Country.Columns.Code3Number] = source[Bobs.Country.Columns.Code3Number];
			destination[Bobs.Country.Columns.EuVatCodePrefix] = source[Bobs.Country.Columns.EuVatCodePrefix];
			destination[Bobs.Country.Columns.PlacePopulationMinimum] = source[Bobs.Country.Columns.PlacePopulationMinimum];
			destination[Bobs.Country.Columns.FriendlyName] = source[Bobs.Country.Columns.FriendlyName];
			destination[Bobs.Country.Columns.PostcodeType] = source[Bobs.Country.Columns.PostcodeType];
			destination[Bobs.Country.Columns.Mature] = source[Bobs.Country.Columns.Mature];
			destination[Bobs.Country.Columns.UseRegion] = source[Bobs.Country.Columns.UseRegion];
			destination[Bobs.Country.Columns.RegionName] = source[Bobs.Country.Columns.RegionName];
			destination[Bobs.Country.Columns.Enabled] = source[Bobs.Country.Columns.Enabled];
			destination[Bobs.Country.Columns.MinEventsForPlaceMenu] = source[Bobs.Country.Columns.MinEventsForPlaceMenu];
			destination[Bobs.Country.Columns.DialingCode] = source[Bobs.Country.Columns.DialingCode];
			destination[Bobs.Country.Columns.TotalEvents] = source[Bobs.Country.Columns.TotalEvents];
			destination[Bobs.Country.Columns.UrlName] = source[Bobs.Country.Columns.UrlName];
			destination[Bobs.Country.Columns.CustomHtml] = source[Bobs.Country.Columns.CustomHtml];
			destination[Bobs.Country.Columns.PostageZone] = source[Bobs.Country.Columns.PostageZone];
		}
		
		public CountryDataHolder(Country bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// Key
		/// </summary>
		public int K
		{
			get { return dataHolder.K; }
			set { this.dataHolder.K = value; }
		}
		/// <summary>
		/// Name of the country
		/// </summary>
		public string Name
		{
			get { return dataHolder.Name; }
			set { this.dataHolder.Name = value; }
		}
		/// <summary>
		/// three letter currency code - NULL if minor country
		/// </summary>
		public string CurrencyCode
		{
			get { return dataHolder.CurrencyCode; }
			set { this.dataHolder.CurrencyCode = value; }
		}
		/// <summary>
		/// Currency name (not currently used on site) - NULL if minor country
		/// </summary>
		public string CurrencyName
		{
			get { return dataHolder.CurrencyName; }
			set { this.dataHolder.CurrencyName = value; }
		}
		/// <summary>
		/// Number of decimal places used in the currency (not currently used on site) - NULL if minor country
		/// </summary>
		public int CurrencyDecimals
		{
			get { return dataHolder.CurrencyDecimals; }
			set { this.dataHolder.CurrencyDecimals = value; }
		}
		/// <summary>
		/// Region - BillingRegionEnum
		/// </summary>
		public int Region
		{
			get { return dataHolder.Region; }
			set { this.dataHolder.Region = value; }
		}
		/// <summary>
		/// 2 letter country code transmitted to WorldPay during order
		/// </summary>
		public string Code2Letter
		{
			get { return dataHolder.Code2Letter; }
			set { this.dataHolder.Code2Letter = value; }
		}
		/// <summary>
		/// 3 letter country code
		/// </summary>
		public string Code3Letter
		{
			get { return dataHolder.Code3Letter; }
			set { this.dataHolder.Code3Letter = value; }
		}
		/// <summary>
		/// 3 number country code
		/// </summary>
		public string Code3Number
		{
			get { return dataHolder.Code3Number; }
			set { this.dataHolder.Code3Number = value; }
		}
		/// <summary>
		/// The two letter prefix to the VAT codes
		/// </summary>
		public string EuVatCodePrefix
		{
			get { return dataHolder.EuVatCodePrefix; }
			set { this.dataHolder.EuVatCodePrefix = value; }
		}
		/// <summary>
		/// Minimum place population to display in the top places list
		/// </summary>
		public int PlacePopulationMinimum
		{
			get { return dataHolder.PlacePopulationMinimum; }
			set { this.dataHolder.PlacePopulationMinimum = value; }
		}
		/// <summary>
		/// Abbreviated name - e.g. United Kingdom = UK
		/// </summary>
		public string FriendlyName
		{
			get { return dataHolder.FriendlyName; }
			set { this.dataHolder.FriendlyName = value; }
		}
		/// <summary>
		/// Postcode type for user sign-up, venue entry and spotter sign-up
		/// </summary>
		public int PostcodeType
		{
			get { return dataHolder.PostcodeType; }
			set { this.dataHolder.PostcodeType = value; }
		}
		/// <summary>
		/// Does the country have loads of events? This restricts the past events on the FP to show only those with events etc.
		/// </summary>
		public bool Mature
		{
			get { return dataHolder.Mature; }
			set { this.dataHolder.Mature = value; }
		}
		/// <summary>
		/// Should the place names be followed by the region abbreviation? Should the All Places page have details about the Regions?
		/// </summary>
		public bool UseRegion
		{
			get { return dataHolder.UseRegion; }
			set { this.dataHolder.UseRegion = value; }
		}
		/// <summary>
		/// What does this country call its regions (e.g. "State" for the US).
		/// </summary>
		public string RegionName
		{
			get { return dataHolder.RegionName; }
			set { this.dataHolder.RegionName = value; }
		}
		/// <summary>
		/// Is the country enabled on the site?
		/// </summary>
		public bool Enabled
		{
			get { return dataHolder.Enabled; }
			set { this.dataHolder.Enabled = value; }
		}
		/// <summary>
		/// Minimum events a place should have before being included on the place menu
		/// </summary>
		public int MinEventsForPlaceMenu
		{
			get { return dataHolder.MinEventsForPlaceMenu; }
			set { this.dataHolder.MinEventsForPlaceMenu = value; }
		}
		/// <summary>
		/// International phone dialing prefix for this country
		/// </summary>
		public int DialingCode
		{
			get { return dataHolder.DialingCode; }
			set { this.dataHolder.DialingCode = value; }
		}
		/// <summary>
		/// Total events in this country
		/// </summary>
		public int TotalEvents
		{
			get { return dataHolder.TotalEvents; }
			set { this.dataHolder.TotalEvents = value; }
		}
		/// <summary>
		/// Name used in url's
		/// </summary>
		public string UrlName
		{
			get { return dataHolder.UrlName; }
			set { this.dataHolder.UrlName = value; }
		}
		/// <summary>
		/// Custom Html shown on the country page.
		/// </summary>
		public string CustomHtml
		{
			get { return dataHolder.CustomHtml; }
			set { this.dataHolder.CustomHtml = value; }
		}
		/// <summary>
		/// Royal mail postage zone
		/// </summary>
		public int PostageZone
		{
			get { return dataHolder.PostageZone; }
			set { this.dataHolder.PostageZone = value; }
		}
		#endregion
		public Country Country
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new Country(K);
					}
					else
					{
						bob = new Country();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region CountrySet
	public partial class CountrySet : BobSet, IEnumerable<Country>
	{
		public CountrySet(Query query) : base(query) { }

		public Country this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new Country(this);
					((Country)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (Country)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new CountryTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<Country> ToList()
		{
			List<Country> list = new List<Country>();
			foreach (Country item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<Country> Members

		public new IEnumerator<Country> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region CountryTableDef
	public class CountryTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "Country";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "F4C72973";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return Country.GetColumnName((Country.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.Country;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return true;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return Country.Columns.K;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			Country.Columns c = (Country.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case Country.Columns.K: ColumnStore[i] = new ColumnDef(c, "K", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey | SqlColumnFlag.AutoNumber, null); break;
					case Country.Columns.Name: ColumnStore[i] = new ColumnDef(c, "Name", SqlDbType.VarChar, 255, ""); break;
					case Country.Columns.CurrencyCode: ColumnStore[i] = new ColumnDef(c, "CurrencyCode", SqlDbType.VarChar, 255, ""); break;
					case Country.Columns.CurrencyName: ColumnStore[i] = new ColumnDef(c, "CurrencyName", SqlDbType.VarChar, 255, ""); break;
					case Country.Columns.CurrencyDecimals: ColumnStore[i] = new ColumnDef(c, "CurrencyDecimals", SqlDbType.Int, 0); break;
					case Country.Columns.Region: ColumnStore[i] = new ColumnDef(c, "Region", SqlDbType.Int, 0); break;
					case Country.Columns.Code2Letter: ColumnStore[i] = new ColumnDef(c, "Code2Letter", SqlDbType.Char, 2, ""); break;
					case Country.Columns.Code3Letter: ColumnStore[i] = new ColumnDef(c, "Code3Letter", SqlDbType.Char, 3, ""); break;
					case Country.Columns.Code3Number: ColumnStore[i] = new ColumnDef(c, "Code3Number", SqlDbType.Char, 3, ""); break;
					case Country.Columns.EuVatCodePrefix: ColumnStore[i] = new ColumnDef(c, "EuVatCodePrefix", SqlDbType.Char, 2, ""); break;
					case Country.Columns.PlacePopulationMinimum: ColumnStore[i] = new ColumnDef(c, "PlacePopulationMinimum", SqlDbType.Int, 0); break;
					case Country.Columns.FriendlyName: ColumnStore[i] = new ColumnDef(c, "FriendlyName", SqlDbType.VarChar, 255, ""); break;
					case Country.Columns.PostcodeType: ColumnStore[i] = new ColumnDef(c, "PostcodeType", SqlDbType.Int, 0); break;
					case Country.Columns.Mature: ColumnStore[i] = new ColumnDef(c, "Mature", SqlDbType.Bit, false); break;
					case Country.Columns.UseRegion: ColumnStore[i] = new ColumnDef(c, "UseRegion", SqlDbType.Bit, false); break;
					case Country.Columns.RegionName: ColumnStore[i] = new ColumnDef(c, "RegionName", SqlDbType.VarChar, ""); break;
					case Country.Columns.Enabled: ColumnStore[i] = new ColumnDef(c, "Enabled", SqlDbType.Bit, false); break;
					case Country.Columns.MinEventsForPlaceMenu: ColumnStore[i] = new ColumnDef(c, "MinEventsForPlaceMenu", SqlDbType.Int, 0); break;
					case Country.Columns.DialingCode: ColumnStore[i] = new ColumnDef(c, "DialingCode", SqlDbType.Int, 0); break;
					case Country.Columns.TotalEvents: ColumnStore[i] = new ColumnDef(c, "TotalEvents", SqlDbType.Int, 0); break;
					case Country.Columns.UrlName: ColumnStore[i] = new ColumnDef(c, "UrlName", SqlDbType.VarChar, 255, SqlColumnFlag.PrimaryKey, ""); break;
					case Country.Columns.CustomHtml: ColumnStore[i] = new ColumnDef(c, "CustomHtml", SqlDbType.Text, ""); break;
					case Country.Columns.PostageZone: ColumnStore[i] = new ColumnDef(c, "PostageZone", SqlDbType.Int, 0); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(Country.Columns.K);
						InitColumn(Country.Columns.Name);
						InitColumn(Country.Columns.CurrencyCode);
						InitColumn(Country.Columns.CurrencyName);
						InitColumn(Country.Columns.CurrencyDecimals);
						InitColumn(Country.Columns.Region);
						InitColumn(Country.Columns.Code2Letter);
						InitColumn(Country.Columns.Code3Letter);
						InitColumn(Country.Columns.Code3Number);
						InitColumn(Country.Columns.EuVatCodePrefix);
						InitColumn(Country.Columns.PlacePopulationMinimum);
						InitColumn(Country.Columns.FriendlyName);
						InitColumn(Country.Columns.PostcodeType);
						InitColumn(Country.Columns.Mature);
						InitColumn(Country.Columns.UseRegion);
						InitColumn(Country.Columns.RegionName);
						InitColumn(Country.Columns.Enabled);
						InitColumn(Country.Columns.MinEventsForPlaceMenu);
						InitColumn(Country.Columns.DialingCode);
						InitColumn(Country.Columns.TotalEvents);
						InitColumn(Country.Columns.UrlName);
						InitColumn(Country.Columns.CustomHtml);
						InitColumn(Country.Columns.PostageZone);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region Demographics
	/// <summary>
	/// Demographics questionairre results
	/// </summary>
	public partial class Demographics : Model.Entities.Demographics, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// Guid of browser or Usr
			/// </summary>
			Guid = 0x00170001,
			/// <summary>
			/// Date/time the questionairre was completed
			/// </summary>
			DateTime = 0x00170002,
			/// <summary>
			/// When going out, what do you drink? Water
			/// </summary>
			DrinkWater = 0x00170003,
			/// <summary>
			/// When going out, what do you drink? Soft drinks
			/// </summary>
			DrinkSoft = 0x00170004,
			/// <summary>
			/// When going out, what do you drink? Energy drinks
			/// </summary>
			DrinkEnergy = 0x00170005,
			/// <summary>
			/// When going out, what do you drink? Beer / lager (in a pint / glass)
			/// </summary>
			DrinkDraftBeer = 0x00170006,
			/// <summary>
			/// When going out, what do you drink? Bottled beer / lager
			/// </summary>
			DrinkBottledBeer = 0x00170007,
			/// <summary>
			/// When going out, what do you drink? Spirits
			/// </summary>
			DrinkSpirits = 0x00170008,
			/// <summary>
			/// When going out, what do you drink? Wine
			/// </summary>
			DrinkWine = 0x00170009,
			/// <summary>
			/// When going out, what do you drink? Alcopops
			/// </summary>
			DrinkAlcopops = 0x0017000a,
			/// <summary>
			/// When going out, what do you drink? Cider
			/// </summary>
			DrinkCider = 0x0017000b,
			/// <summary>
			/// Do you smoke? Yes=1, No=2, Only when I go out=3
			/// </summary>
			Smoke = 0x0017000c,
			/// <summary>
			/// How / how often do you spend your evenings: All night clubbing (times per week)
			/// </summary>
			EveningAllNight = 0x0017000d,
			/// <summary>
			/// How / how often do you spend your evenings: Late night at a pub/club (in bed by 3am) (times per week)
			/// </summary>
			EveningLateNight = 0x0017000e,
			/// <summary>
			/// How / how often do you spend your evenings: Couple of drinks in a bar (in bed by midnight) (times per week)
			/// </summary>
			EveningCoupleDrinks = 0x0017000f,
			/// <summary>
			/// How / how often do you spend your evenings: Other social event (e.g. cinema, restaurant etc.) (times per week)
			/// </summary>
			EveningOther = 0x00170010,
			/// <summary>
			/// How / how often do you spend your evenings: Stay in / work (times per week)
			/// </summary>
			EveningStayIn = 0x00170011,
			/// <summary>
			/// What’s your employment status: Full-time=1, Part-time=2, Currently unemployed=3, Student=4
			/// </summary>
			Employment = 0x00170012,
			/// <summary>
			/// How much do you earn per year? [less than £15k]=1, [15 - 19]=2, [20 - 24]=3, [25 - 29]=4, [30 - 39]=5, [40 - 49]=6, [£50k+]=7
			/// </summary>
			Salary = 0x00170013,
			/// <summary>
			/// Do you use a credit card?
			/// </summary>
			CreditCard = 0x00170014,
			/// <summary>
			/// Do you have a personal loan?
			/// </summary>
			Loan = 0x00170015,
			/// <summary>
			/// Do you have a mortgage?
			/// </summary>
			Mortgage = 0x00170016,
			/// <summary>
			/// Do you own: Car / motorbike
			/// </summary>
			OwnCar = 0x00170017,
			/// <summary>
			/// Do you own: Pedal bike
			/// </summary>
			OwnBike = 0x00170018,
			/// <summary>
			/// Do you own: MP3 player
			/// </summary>
			OwnMp3 = 0x00170019,
			/// <summary>
			/// Do you own: PC
			/// </summary>
			OwnPc = 0x0017001a,
			/// <summary>
			/// Do you own: Laptop
			/// </summary>
			OwnLaptop = 0x0017001b,
			/// <summary>
			/// Do you own: Mac
			/// </summary>
			OwnMac = 0x0017001c,
			/// <summary>
			/// Do you own: Broadband internet
			/// </summary>
			OwnBroadband = 0x0017001d,
			/// <summary>
			/// Do you own: Games console
			/// </summary>
			OwnConsole = 0x0017001e,
			/// <summary>
			/// Do you own: Digital camera
			/// </summary>
			OwnCamera = 0x0017001f,
			/// <summary>
			/// Do you own: DVD player
			/// </summary>
			OwnDvd = 0x00170020,
			/// <summary>
			/// Do you own: DVD recorder
			/// </summary>
			OwnDvdRec = 0x00170021,
			/// <summary>
			/// Do you think you might buy in the next 6 months: Car / motorbike
			/// </summary>
			BuyCar = 0x00170022,
			/// <summary>
			/// Do you think you might buy in the next 6 months: Pedal bike
			/// </summary>
			BuyBike = 0x00170023,
			/// <summary>
			/// Do you think you might buy in the next 6 months: MP3 player
			/// </summary>
			BuyMp3 = 0x00170024,
			/// <summary>
			/// Do you think you might buy in the next 6 months: PC
			/// </summary>
			BuyPc = 0x00170025,
			/// <summary>
			/// Do you think you might buy in the next 6 months: Laptop
			/// </summary>
			BuyLaptop = 0x00170026,
			/// <summary>
			/// Do you think you might buy in the next 6 months: Mac
			/// </summary>
			BuyMac = 0x00170027,
			/// <summary>
			/// Do you think you might buy in the next 6 months: Broadband internet
			/// </summary>
			BuyBroadband = 0x00170028,
			/// <summary>
			/// Do you think you might buy in the next 6 months: Games console
			/// </summary>
			BuyConsole = 0x00170029,
			/// <summary>
			/// Do you think you might buy in the next 6 months: Digital camera
			/// </summary>
			BuyCamera = 0x0017002a,
			/// <summary>
			/// Do you think you might buy in the next 6 months: DVD player
			/// </summary>
			BuyDvd = 0x0017002b,
			/// <summary>
			/// Do you think you might buy in the next 6 months: DVD recorder
			/// </summary>
			BuyDvdRec = 0x0017002c,
			/// <summary>
			/// How much do you spend on average per month on: Designer / branded clothes (Nothing=1, less than £10=2, £10-£19=3, £20-£49=4, £50-£99=5, £100-£200=6, £200+=7)
			/// </summary>
			SpendDesignerClothes = 0x0017002d,
			/// <summary>
			/// How much do you spend on average per month on: High street / non-branded clothes (Nothing=1, less than £10=2, £10-£19=3, £20-£49=4, £50-£99=5, £100-£200=6, £200+=7)
			/// </summary>
			SpendHighStreetClothes = 0x0017002e,
			/// <summary>
			/// How much do you spend on average per month on: Music on CD (Nothing=1, less than £10=2, £10-£19=3, £20-£49=4, £50-£99=5, £100-£200=6, £200+=7)
			/// </summary>
			SpendMusicCd = 0x0017002f,
			/// <summary>
			/// How much do you spend on average per month on: Music on vinyl (Nothing=1, less than £10=2, £10-£19=3, £20-£49=4, £50-£99=5, £100-£200=6, £200+=7)
			/// </summary>
			SpendMusicVinyl = 0x00170030,
			/// <summary>
			/// How much do you spend on average per month on: Music downloads (Nothing=1, less than £10=2, £10-£19=3, £20-£49=4, £50-£99=5, £100-£200=6, £200+=7)
			/// </summary>
			SpendMusicDownload = 0x00170031,
			/// <summary>
			/// How much do you spend on average per month on: DVDs (Nothing=1, less than £10=2, £10-£19=3, £20-£49=4, £50-£99=5, £100-£200=6, £200+=7)
			/// </summary>
			SpendDvd = 0x00170032,
			/// <summary>
			/// How much do you spend on average per month on: Computer/video games (Nothing=1, less than £10=2, £10-£19=3, £20-£49=4, £50-£99=5, £100-£200=6, £200+=7)
			/// </summary>
			SpendGames = 0x00170033,
			/// <summary>
			/// How much do you spend on average per month on: Mobile phone calls (Nothing=1, less than £10=2, £10-£19=3, £20-£49=4, £50-£99=5, £100-£200=6, £200+=7)
			/// </summary>
			SpendMobile = 0x00170034,
			/// <summary>
			/// How much do you spend on average per month on: Ringtones / text voting etc. (Nothing=1, less than £10=2, £10-£19=3, £20-£49=4, £50-£99=5, £100-£200=6, £200+=7)
			/// </summary>
			SpendSms = 0x00170035,
			/// <summary>
			/// How much do you spend on average per month on: Car / motorbike (Nothing=1, less than £10=2, £10-£19=3, £20-£49=4, £50-£99=5, £100-£200=6, £200+=7)
			/// </summary>
			SpendCar = 0x00170036,
			/// <summary>
			/// How much do you spend on average per month on: Other travel / public transport (Nothing=1, less than £10=2, £10-£19=3, £20-£49=4, £50-£99=5, £100-£200=6, £200+=7)
			/// </summary>
			SpendTravel = 0x00170037,
			/// <summary>
			/// How often do you go abroad on holiday? (time(s) per year)
			/// </summary>
			Holidays = 0x00170038,
			/// <summary>
			/// When you think of mobile phone imaging technology, which mobile phone manufacturer comes to mind first?
			/// </summary>
			ImagingManufacturer = 0x00170039,
			/// <summary>
			/// On a scale of 1-5, how important is imaging functionality in a mobile phone when considering which handset to get? (1 = not very important, 5 = very important)
			/// </summary>
			ImagingImportant = 0x0017003a,
			/// <summary>
			/// How would you describe your overall opinion about the following mobile phone manufacturers? (1 = not good, 5 = very good) Sony
			/// </summary>
			ImagingOpinionSony = 0x0017003b,
			/// <summary>
			/// How would you describe your overall opinion about the following mobile phone manufacturers? (1 = not good, 5 = very good) Nokia
			/// </summary>
			ImagingOpinionNokia = 0x0017003c,
			/// <summary>
			/// How would you describe your overall opinion about the following mobile phone manufacturers? (1 = not good, 5 = very good) Motorola
			/// </summary>
			ImagingOpinionMotorola = 0x0017003d,
			/// <summary>
			/// How would you describe your overall opinion about the following mobile phone manufacturers? (1 = not good, 5 = very good) BenQ/Siemens
			/// </summary>
			ImagingOpinionSiemens = 0x0017003e,
			/// <summary>
			/// How would you describe your overall opinion about the following mobile phone manufacturers? (1 = not good, 5 = very good) LG
			/// </summary>
			ImagingOpinionLg = 0x0017003f,
			/// <summary>
			/// How would you describe your overall opinion about the following mobile phone manufacturers? (1 = not good, 5 = very good) Samsung
			/// </summary>
			ImagingOpinionSamsung = 0x00170040,
			/// <summary>
			/// Thinking of mobile phone imaging capabilities, how would you rate each of the following manufacturers on a scale of 1-5? (1=does not provide imaging technology, 5=provides advanced imaging technology) Sony
			/// </summary>
			ImagingCapabilitySony = 0x00170041,
			/// <summary>
			/// Thinking of mobile phone imaging capabilities, how would you rate each of the following manufacturers on a scale of 1-5? (1=does not provide imaging technology, 5=provides advanced imaging technology) Nokia
			/// </summary>
			ImagingCapabilityNokia = 0x00170042,
			/// <summary>
			/// Thinking of mobile phone imaging capabilities, how would you rate each of the following manufacturers on a scale of 1-5? (1=does not provide imaging technology, 5=provides advanced imaging technology) Motorola
			/// </summary>
			ImagingCapabilityMotorola = 0x00170043,
			/// <summary>
			/// Thinking of mobile phone imaging capabilities, how would you rate each of the following manufacturers on a scale of 1-5? (1=does not provide imaging technology, 5=provides advanced imaging technology) BenQ/Siemens
			/// </summary>
			ImagingCapabilitySiemens = 0x00170044,
			/// <summary>
			/// Thinking of mobile phone imaging capabilities, how would you rate each of the following manufacturers on a scale of 1-5? (1=does not provide imaging technology, 5=provides advanced imaging technology) LG
			/// </summary>
			ImagingCapabilityLg = 0x00170045,
			/// <summary>
			/// Thinking of mobile phone imaging capabilities, how would you rate each of the following manufacturers on a scale of 1-5? (1=does not provide imaging technology, 5=provides advanced imaging technology) Samsung
			/// </summary>
			ImagingCapabilitySamsung = 0x00170046,
			/// <summary>
			/// If you were to buy a new mobile phone, how likely would you be to consider the following manufacturers? (1=very unlikely, 5 = very likely) Sony
			/// </summary>
			ImagingBuySony = 0x00170047,
			/// <summary>
			/// If you were to buy a new mobile phone, how likely would you be to consider the following manufacturers? (1=very unlikely, 5 = very likely) Nokia
			/// </summary>
			ImagingBuyNokia = 0x00170048,
			/// <summary>
			/// If you were to buy a new mobile phone, how likely would you be to consider the following manufacturers? (1=very unlikely, 5 = very likely) Motorola
			/// </summary>
			ImagingBuyMotorola = 0x00170049,
			/// <summary>
			/// If you were to buy a new mobile phone, how likely would you be to consider the following manufacturers? (1=very unlikely, 5 = very likely) BenQ/Siemens
			/// </summary>
			ImagingBuySiemens = 0x0017004a,
			/// <summary>
			/// If you were to buy a new mobile phone, how likely would you be to consider the following manufacturers? (1=very unlikely, 5 = very likely) LG
			/// </summary>
			ImagingBuyLg = 0x0017004b,
			/// <summary>
			/// If you were to buy a new mobile phone, how likely would you be to consider the following manufacturers? (1=very unlikely, 5 = very likely) Samsung
			/// </summary>
			ImagingBuySamsung = 0x0017004c,
		}
		#endregion
		public static string GetColumnName(Demographics.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case Demographics.Columns.Guid: return "Guid";
						case Demographics.Columns.DateTime: return "DateTime";
						case Demographics.Columns.DrinkWater: return "DrinkWater";
						case Demographics.Columns.DrinkSoft: return "DrinkSoft";
						case Demographics.Columns.DrinkEnergy: return "DrinkEnergy";
						case Demographics.Columns.DrinkDraftBeer: return "DrinkDraftBeer";
						case Demographics.Columns.DrinkBottledBeer: return "DrinkBottledBeer";
						case Demographics.Columns.DrinkSpirits: return "DrinkSpirits";
						case Demographics.Columns.DrinkWine: return "DrinkWine";
						case Demographics.Columns.DrinkAlcopops: return "DrinkAlcopops";
						case Demographics.Columns.DrinkCider: return "DrinkCider";
						case Demographics.Columns.Smoke: return "Smoke";
						case Demographics.Columns.EveningAllNight: return "EveningAllNight";
						case Demographics.Columns.EveningLateNight: return "EveningLateNight";
						case Demographics.Columns.EveningCoupleDrinks: return "EveningCoupleDrinks";
						case Demographics.Columns.EveningOther: return "EveningOther";
						case Demographics.Columns.EveningStayIn: return "EveningStayIn";
						case Demographics.Columns.Employment: return "Employment";
						case Demographics.Columns.Salary: return "Salary";
						case Demographics.Columns.CreditCard: return "CreditCard";
						case Demographics.Columns.Loan: return "Loan";
						case Demographics.Columns.Mortgage: return "Mortgage";
						case Demographics.Columns.OwnCar: return "OwnCar";
						case Demographics.Columns.OwnBike: return "OwnBike";
						case Demographics.Columns.OwnMp3: return "OwnMp3";
						case Demographics.Columns.OwnPc: return "OwnPc";
						case Demographics.Columns.OwnLaptop: return "OwnLaptop";
						case Demographics.Columns.OwnMac: return "OwnMac";
						case Demographics.Columns.OwnBroadband: return "OwnBroadband";
						case Demographics.Columns.OwnConsole: return "OwnConsole";
						case Demographics.Columns.OwnCamera: return "OwnCamera";
						case Demographics.Columns.OwnDvd: return "OwnDvd";
						case Demographics.Columns.OwnDvdRec: return "OwnDvdRec";
						case Demographics.Columns.BuyCar: return "BuyCar";
						case Demographics.Columns.BuyBike: return "BuyBike";
						case Demographics.Columns.BuyMp3: return "BuyMp3";
						case Demographics.Columns.BuyPc: return "BuyPc";
						case Demographics.Columns.BuyLaptop: return "BuyLaptop";
						case Demographics.Columns.BuyMac: return "BuyMac";
						case Demographics.Columns.BuyBroadband: return "BuyBroadband";
						case Demographics.Columns.BuyConsole: return "BuyConsole";
						case Demographics.Columns.BuyCamera: return "BuyCamera";
						case Demographics.Columns.BuyDvd: return "BuyDvd";
						case Demographics.Columns.BuyDvdRec: return "BuyDvdRec";
						case Demographics.Columns.SpendDesignerClothes: return "SpendDesignerClothes";
						case Demographics.Columns.SpendHighStreetClothes: return "SpendHighStreetClothes";
						case Demographics.Columns.SpendMusicCd: return "SpendMusicCd";
						case Demographics.Columns.SpendMusicVinyl: return "SpendMusicVinyl";
						case Demographics.Columns.SpendMusicDownload: return "SpendMusicDownload";
						case Demographics.Columns.SpendDvd: return "SpendDvd";
						case Demographics.Columns.SpendGames: return "SpendGames";
						case Demographics.Columns.SpendMobile: return "SpendMobile";
						case Demographics.Columns.SpendSms: return "SpendSms";
						case Demographics.Columns.SpendCar: return "SpendCar";
						case Demographics.Columns.SpendTravel: return "SpendTravel";
						case Demographics.Columns.Holidays: return "Holidays";
						case Demographics.Columns.ImagingManufacturer: return "ImagingManufacturer";
						case Demographics.Columns.ImagingImportant: return "ImagingImportant";
						case Demographics.Columns.ImagingOpinionSony: return "ImagingOpinionSony";
						case Demographics.Columns.ImagingOpinionNokia: return "ImagingOpinionNokia";
						case Demographics.Columns.ImagingOpinionMotorola: return "ImagingOpinionMotorola";
						case Demographics.Columns.ImagingOpinionSiemens: return "ImagingOpinionSiemens";
						case Demographics.Columns.ImagingOpinionLg: return "ImagingOpinionLg";
						case Demographics.Columns.ImagingOpinionSamsung: return "ImagingOpinionSamsung";
						case Demographics.Columns.ImagingCapabilitySony: return "ImagingCapabilitySony";
						case Demographics.Columns.ImagingCapabilityNokia: return "ImagingCapabilityNokia";
						case Demographics.Columns.ImagingCapabilityMotorola: return "ImagingCapabilityMotorola";
						case Demographics.Columns.ImagingCapabilitySiemens: return "ImagingCapabilitySiemens";
						case Demographics.Columns.ImagingCapabilityLg: return "ImagingCapabilityLg";
						case Demographics.Columns.ImagingCapabilitySamsung: return "ImagingCapabilitySamsung";
						case Demographics.Columns.ImagingBuySony: return "ImagingBuySony";
						case Demographics.Columns.ImagingBuyNokia: return "ImagingBuyNokia";
						case Demographics.Columns.ImagingBuyMotorola: return "ImagingBuyMotorola";
						case Demographics.Columns.ImagingBuySiemens: return "ImagingBuySiemens";
						case Demographics.Columns.ImagingBuyLg: return "ImagingBuyLg";
						case Demographics.Columns.ImagingBuySamsung: return "ImagingBuySamsung";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(Demographics.Columns columnEnum)
		{
			switch (columnEnum)
			{
																																																																																default: return false;
			}
		}


		#region Common
 
		public Demographics(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);  }
		public Demographics()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.Demographics);
		}
		public Demographics(BobSet bs)
		{
			this.Bob = new Bob(bs.Table, bs);
		}
		public Demographics(Guid DemographicsGuid, IBob Parent, object Column)
			: this()
		{
			Bob.GetBobFromParent(DemographicsGuid, Parent.Bob, Column, TablesEnum.Demographics);
		}
		public Demographics(Guid DemographicsGuid)
			: this()
		{
			Bob.GetBobFromPrimaryKey(DemographicsGuid);
		}
		#endregion

	}
	#endregion
	#region DemographicsTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region Demographics
	/// <summary>
	/// Demographics questionairre results
	/// </summary>
	[Serializable]
	public partial class Demographics 
	{
		
		#region Simple members
		/// <summary>
		/// Guid of browser or Usr
		/// </summary>
		public Guid	Guid
		{
			get{ return Cambro.Misc.Db.GuidConvertor(this[Demographics.Columns.Guid]);}		
			set{ this[Demographics.Columns.Guid] = new System.Data.SqlTypes.SqlGuid(value);}
		}
		/// <summary>
		/// Date/time the questionairre was completed
		/// </summary>
		public override DateTime DateTime
		{
			get { return (DateTime)this[Demographics.Columns.DateTime]; }
			set { this[Demographics.Columns.DateTime] = value; }
		}
		/// <summary>
		/// When going out, what do you drink? Water
		/// </summary>
		public override bool DrinkWater
		{
			get { return (bool)this[Demographics.Columns.DrinkWater]; }
			set { this[Demographics.Columns.DrinkWater] = value; }
		}
		/// <summary>
		/// When going out, what do you drink? Soft drinks
		/// </summary>
		public override bool DrinkSoft
		{
			get { return (bool)this[Demographics.Columns.DrinkSoft]; }
			set { this[Demographics.Columns.DrinkSoft] = value; }
		}
		/// <summary>
		/// When going out, what do you drink? Energy drinks
		/// </summary>
		public override bool DrinkEnergy
		{
			get { return (bool)this[Demographics.Columns.DrinkEnergy]; }
			set { this[Demographics.Columns.DrinkEnergy] = value; }
		}
		/// <summary>
		/// When going out, what do you drink? Beer / lager (in a pint / glass)
		/// </summary>
		public override bool DrinkDraftBeer
		{
			get { return (bool)this[Demographics.Columns.DrinkDraftBeer]; }
			set { this[Demographics.Columns.DrinkDraftBeer] = value; }
		}
		/// <summary>
		/// When going out, what do you drink? Bottled beer / lager
		/// </summary>
		public override bool DrinkBottledBeer
		{
			get { return (bool)this[Demographics.Columns.DrinkBottledBeer]; }
			set { this[Demographics.Columns.DrinkBottledBeer] = value; }
		}
		/// <summary>
		/// When going out, what do you drink? Spirits
		/// </summary>
		public override bool DrinkSpirits
		{
			get { return (bool)this[Demographics.Columns.DrinkSpirits]; }
			set { this[Demographics.Columns.DrinkSpirits] = value; }
		}
		/// <summary>
		/// When going out, what do you drink? Wine
		/// </summary>
		public override bool DrinkWine
		{
			get { return (bool)this[Demographics.Columns.DrinkWine]; }
			set { this[Demographics.Columns.DrinkWine] = value; }
		}
		/// <summary>
		/// When going out, what do you drink? Alcopops
		/// </summary>
		public override bool DrinkAlcopops
		{
			get { return (bool)this[Demographics.Columns.DrinkAlcopops]; }
			set { this[Demographics.Columns.DrinkAlcopops] = value; }
		}
		/// <summary>
		/// When going out, what do you drink? Cider
		/// </summary>
		public override bool DrinkCider
		{
			get { return (bool)this[Demographics.Columns.DrinkCider]; }
			set { this[Demographics.Columns.DrinkCider] = value; }
		}
		/// <summary>
		/// Do you smoke? Yes=1, No=2, Only when I go out=3
		/// </summary>
		public override int Smoke
		{
			get { return (int)this[Demographics.Columns.Smoke]; }
			set { this[Demographics.Columns.Smoke] = value; }
		}
		/// <summary>
		/// How / how often do you spend your evenings: All night clubbing (times per week)
		/// </summary>
		public override double EveningAllNight
		{
			get { return (double)this[Demographics.Columns.EveningAllNight]; }
			set { this[Demographics.Columns.EveningAllNight] = value; }
		}
		/// <summary>
		/// How / how often do you spend your evenings: Late night at a pub/club (in bed by 3am) (times per week)
		/// </summary>
		public override double EveningLateNight
		{
			get { return (double)this[Demographics.Columns.EveningLateNight]; }
			set { this[Demographics.Columns.EveningLateNight] = value; }
		}
		/// <summary>
		/// How / how often do you spend your evenings: Couple of drinks in a bar (in bed by midnight) (times per week)
		/// </summary>
		public override double EveningCoupleDrinks
		{
			get { return (double)this[Demographics.Columns.EveningCoupleDrinks]; }
			set { this[Demographics.Columns.EveningCoupleDrinks] = value; }
		}
		/// <summary>
		/// How / how often do you spend your evenings: Other social event (e.g. cinema, restaurant etc.) (times per week)
		/// </summary>
		public override double EveningOther
		{
			get { return (double)this[Demographics.Columns.EveningOther]; }
			set { this[Demographics.Columns.EveningOther] = value; }
		}
		/// <summary>
		/// How / how often do you spend your evenings: Stay in / work (times per week)
		/// </summary>
		public override double EveningStayIn
		{
			get { return (double)this[Demographics.Columns.EveningStayIn]; }
			set { this[Demographics.Columns.EveningStayIn] = value; }
		}
		/// <summary>
		/// What’s your employment status: Full-time=1, Part-time=2, Currently unemployed=3, Student=4
		/// </summary>
		public override int Employment
		{
			get { return (int)this[Demographics.Columns.Employment]; }
			set { this[Demographics.Columns.Employment] = value; }
		}
		/// <summary>
		/// How much do you earn per year? [less than £15k]=1, [15 - 19]=2, [20 - 24]=3, [25 - 29]=4, [30 - 39]=5, [40 - 49]=6, [£50k+]=7
		/// </summary>
		public override int Salary
		{
			get { return (int)this[Demographics.Columns.Salary]; }
			set { this[Demographics.Columns.Salary] = value; }
		}
		/// <summary>
		/// Do you use a credit card?
		/// </summary>
		public override bool CreditCard
		{
			get { return (bool)this[Demographics.Columns.CreditCard]; }
			set { this[Demographics.Columns.CreditCard] = value; }
		}
		/// <summary>
		/// Do you have a personal loan?
		/// </summary>
		public override bool Loan
		{
			get { return (bool)this[Demographics.Columns.Loan]; }
			set { this[Demographics.Columns.Loan] = value; }
		}
		/// <summary>
		/// Do you have a mortgage?
		/// </summary>
		public override bool Mortgage
		{
			get { return (bool)this[Demographics.Columns.Mortgage]; }
			set { this[Demographics.Columns.Mortgage] = value; }
		}
		/// <summary>
		/// Do you own: Car / motorbike
		/// </summary>
		public override bool OwnCar
		{
			get { return (bool)this[Demographics.Columns.OwnCar]; }
			set { this[Demographics.Columns.OwnCar] = value; }
		}
		/// <summary>
		/// Do you own: Pedal bike
		/// </summary>
		public override bool OwnBike
		{
			get { return (bool)this[Demographics.Columns.OwnBike]; }
			set { this[Demographics.Columns.OwnBike] = value; }
		}
		/// <summary>
		/// Do you own: MP3 player
		/// </summary>
		public override bool OwnMp3
		{
			get { return (bool)this[Demographics.Columns.OwnMp3]; }
			set { this[Demographics.Columns.OwnMp3] = value; }
		}
		/// <summary>
		/// Do you own: PC
		/// </summary>
		public override bool OwnPc
		{
			get { return (bool)this[Demographics.Columns.OwnPc]; }
			set { this[Demographics.Columns.OwnPc] = value; }
		}
		/// <summary>
		/// Do you own: Laptop
		/// </summary>
		public override bool OwnLaptop
		{
			get { return (bool)this[Demographics.Columns.OwnLaptop]; }
			set { this[Demographics.Columns.OwnLaptop] = value; }
		}
		/// <summary>
		/// Do you own: Mac
		/// </summary>
		public override bool OwnMac
		{
			get { return (bool)this[Demographics.Columns.OwnMac]; }
			set { this[Demographics.Columns.OwnMac] = value; }
		}
		/// <summary>
		/// Do you own: Broadband internet
		/// </summary>
		public override bool OwnBroadband
		{
			get { return (bool)this[Demographics.Columns.OwnBroadband]; }
			set { this[Demographics.Columns.OwnBroadband] = value; }
		}
		/// <summary>
		/// Do you own: Games console
		/// </summary>
		public override bool OwnConsole
		{
			get { return (bool)this[Demographics.Columns.OwnConsole]; }
			set { this[Demographics.Columns.OwnConsole] = value; }
		}
		/// <summary>
		/// Do you own: Digital camera
		/// </summary>
		public override bool OwnCamera
		{
			get { return (bool)this[Demographics.Columns.OwnCamera]; }
			set { this[Demographics.Columns.OwnCamera] = value; }
		}
		/// <summary>
		/// Do you own: DVD player
		/// </summary>
		public override bool OwnDvd
		{
			get { return (bool)this[Demographics.Columns.OwnDvd]; }
			set { this[Demographics.Columns.OwnDvd] = value; }
		}
		/// <summary>
		/// Do you own: DVD recorder
		/// </summary>
		public override bool OwnDvdRec
		{
			get { return (bool)this[Demographics.Columns.OwnDvdRec]; }
			set { this[Demographics.Columns.OwnDvdRec] = value; }
		}
		/// <summary>
		/// Do you think you might buy in the next 6 months: Car / motorbike
		/// </summary>
		public override bool BuyCar
		{
			get { return (bool)this[Demographics.Columns.BuyCar]; }
			set { this[Demographics.Columns.BuyCar] = value; }
		}
		/// <summary>
		/// Do you think you might buy in the next 6 months: Pedal bike
		/// </summary>
		public override bool BuyBike
		{
			get { return (bool)this[Demographics.Columns.BuyBike]; }
			set { this[Demographics.Columns.BuyBike] = value; }
		}
		/// <summary>
		/// Do you think you might buy in the next 6 months: MP3 player
		/// </summary>
		public override bool BuyMp3
		{
			get { return (bool)this[Demographics.Columns.BuyMp3]; }
			set { this[Demographics.Columns.BuyMp3] = value; }
		}
		/// <summary>
		/// Do you think you might buy in the next 6 months: PC
		/// </summary>
		public override bool BuyPc
		{
			get { return (bool)this[Demographics.Columns.BuyPc]; }
			set { this[Demographics.Columns.BuyPc] = value; }
		}
		/// <summary>
		/// Do you think you might buy in the next 6 months: Laptop
		/// </summary>
		public override bool BuyLaptop
		{
			get { return (bool)this[Demographics.Columns.BuyLaptop]; }
			set { this[Demographics.Columns.BuyLaptop] = value; }
		}
		/// <summary>
		/// Do you think you might buy in the next 6 months: Mac
		/// </summary>
		public override bool BuyMac
		{
			get { return (bool)this[Demographics.Columns.BuyMac]; }
			set { this[Demographics.Columns.BuyMac] = value; }
		}
		/// <summary>
		/// Do you think you might buy in the next 6 months: Broadband internet
		/// </summary>
		public override bool BuyBroadband
		{
			get { return (bool)this[Demographics.Columns.BuyBroadband]; }
			set { this[Demographics.Columns.BuyBroadband] = value; }
		}
		/// <summary>
		/// Do you think you might buy in the next 6 months: Games console
		/// </summary>
		public override bool BuyConsole
		{
			get { return (bool)this[Demographics.Columns.BuyConsole]; }
			set { this[Demographics.Columns.BuyConsole] = value; }
		}
		/// <summary>
		/// Do you think you might buy in the next 6 months: Digital camera
		/// </summary>
		public override bool BuyCamera
		{
			get { return (bool)this[Demographics.Columns.BuyCamera]; }
			set { this[Demographics.Columns.BuyCamera] = value; }
		}
		/// <summary>
		/// Do you think you might buy in the next 6 months: DVD player
		/// </summary>
		public override bool BuyDvd
		{
			get { return (bool)this[Demographics.Columns.BuyDvd]; }
			set { this[Demographics.Columns.BuyDvd] = value; }
		}
		/// <summary>
		/// Do you think you might buy in the next 6 months: DVD recorder
		/// </summary>
		public override bool BuyDvdRec
		{
			get { return (bool)this[Demographics.Columns.BuyDvdRec]; }
			set { this[Demographics.Columns.BuyDvdRec] = value; }
		}
		/// <summary>
		/// How much do you spend on average per month on: Designer / branded clothes (Nothing=1, less than £10=2, £10-£19=3, £20-£49=4, £50-£99=5, £100-£200=6, £200+=7)
		/// </summary>
		public override int SpendDesignerClothes
		{
			get { return (int)this[Demographics.Columns.SpendDesignerClothes]; }
			set { this[Demographics.Columns.SpendDesignerClothes] = value; }
		}
		/// <summary>
		/// How much do you spend on average per month on: High street / non-branded clothes (Nothing=1, less than £10=2, £10-£19=3, £20-£49=4, £50-£99=5, £100-£200=6, £200+=7)
		/// </summary>
		public override int SpendHighStreetClothes
		{
			get { return (int)this[Demographics.Columns.SpendHighStreetClothes]; }
			set { this[Demographics.Columns.SpendHighStreetClothes] = value; }
		}
		/// <summary>
		/// How much do you spend on average per month on: Music on CD (Nothing=1, less than £10=2, £10-£19=3, £20-£49=4, £50-£99=5, £100-£200=6, £200+=7)
		/// </summary>
		public override int SpendMusicCd
		{
			get { return (int)this[Demographics.Columns.SpendMusicCd]; }
			set { this[Demographics.Columns.SpendMusicCd] = value; }
		}
		/// <summary>
		/// How much do you spend on average per month on: Music on vinyl (Nothing=1, less than £10=2, £10-£19=3, £20-£49=4, £50-£99=5, £100-£200=6, £200+=7)
		/// </summary>
		public override int SpendMusicVinyl
		{
			get { return (int)this[Demographics.Columns.SpendMusicVinyl]; }
			set { this[Demographics.Columns.SpendMusicVinyl] = value; }
		}
		/// <summary>
		/// How much do you spend on average per month on: Music downloads (Nothing=1, less than £10=2, £10-£19=3, £20-£49=4, £50-£99=5, £100-£200=6, £200+=7)
		/// </summary>
		public override int SpendMusicDownload
		{
			get { return (int)this[Demographics.Columns.SpendMusicDownload]; }
			set { this[Demographics.Columns.SpendMusicDownload] = value; }
		}
		/// <summary>
		/// How much do you spend on average per month on: DVDs (Nothing=1, less than £10=2, £10-£19=3, £20-£49=4, £50-£99=5, £100-£200=6, £200+=7)
		/// </summary>
		public override int SpendDvd
		{
			get { return (int)this[Demographics.Columns.SpendDvd]; }
			set { this[Demographics.Columns.SpendDvd] = value; }
		}
		/// <summary>
		/// How much do you spend on average per month on: Computer/video games (Nothing=1, less than £10=2, £10-£19=3, £20-£49=4, £50-£99=5, £100-£200=6, £200+=7)
		/// </summary>
		public override int SpendGames
		{
			get { return (int)this[Demographics.Columns.SpendGames]; }
			set { this[Demographics.Columns.SpendGames] = value; }
		}
		/// <summary>
		/// How much do you spend on average per month on: Mobile phone calls (Nothing=1, less than £10=2, £10-£19=3, £20-£49=4, £50-£99=5, £100-£200=6, £200+=7)
		/// </summary>
		public override int SpendMobile
		{
			get { return (int)this[Demographics.Columns.SpendMobile]; }
			set { this[Demographics.Columns.SpendMobile] = value; }
		}
		/// <summary>
		/// How much do you spend on average per month on: Ringtones / text voting etc. (Nothing=1, less than £10=2, £10-£19=3, £20-£49=4, £50-£99=5, £100-£200=6, £200+=7)
		/// </summary>
		public override int SpendSms
		{
			get { return (int)this[Demographics.Columns.SpendSms]; }
			set { this[Demographics.Columns.SpendSms] = value; }
		}
		/// <summary>
		/// How much do you spend on average per month on: Car / motorbike (Nothing=1, less than £10=2, £10-£19=3, £20-£49=4, £50-£99=5, £100-£200=6, £200+=7)
		/// </summary>
		public override int SpendCar
		{
			get { return (int)this[Demographics.Columns.SpendCar]; }
			set { this[Demographics.Columns.SpendCar] = value; }
		}
		/// <summary>
		/// How much do you spend on average per month on: Other travel / public transport (Nothing=1, less than £10=2, £10-£19=3, £20-£49=4, £50-£99=5, £100-£200=6, £200+=7)
		/// </summary>
		public override int SpendTravel
		{
			get { return (int)this[Demographics.Columns.SpendTravel]; }
			set { this[Demographics.Columns.SpendTravel] = value; }
		}
		/// <summary>
		/// How often do you go abroad on holiday? (time(s) per year)
		/// </summary>
		public override int Holidays
		{
			get { return (int)this[Demographics.Columns.Holidays]; }
			set { this[Demographics.Columns.Holidays] = value; }
		}
		/// <summary>
		/// When you think of mobile phone imaging technology, which mobile phone manufacturer comes to mind first?
		/// </summary>
		public override string ImagingManufacturer
		{
			get { return (string)this[Demographics.Columns.ImagingManufacturer]; }
			set { this[Demographics.Columns.ImagingManufacturer] = value; }
		}
		/// <summary>
		/// On a scale of 1-5, how important is imaging functionality in a mobile phone when considering which handset to get? (1 = not very important, 5 = very important)
		/// </summary>
		public override int ImagingImportant
		{
			get { return (int)this[Demographics.Columns.ImagingImportant]; }
			set { this[Demographics.Columns.ImagingImportant] = value; }
		}
		/// <summary>
		/// How would you describe your overall opinion about the following mobile phone manufacturers? (1 = not good, 5 = very good) Sony
		/// </summary>
		public override int ImagingOpinionSony
		{
			get { return (int)this[Demographics.Columns.ImagingOpinionSony]; }
			set { this[Demographics.Columns.ImagingOpinionSony] = value; }
		}
		/// <summary>
		/// How would you describe your overall opinion about the following mobile phone manufacturers? (1 = not good, 5 = very good) Nokia
		/// </summary>
		public override int ImagingOpinionNokia
		{
			get { return (int)this[Demographics.Columns.ImagingOpinionNokia]; }
			set { this[Demographics.Columns.ImagingOpinionNokia] = value; }
		}
		/// <summary>
		/// How would you describe your overall opinion about the following mobile phone manufacturers? (1 = not good, 5 = very good) Motorola
		/// </summary>
		public override int ImagingOpinionMotorola
		{
			get { return (int)this[Demographics.Columns.ImagingOpinionMotorola]; }
			set { this[Demographics.Columns.ImagingOpinionMotorola] = value; }
		}
		/// <summary>
		/// How would you describe your overall opinion about the following mobile phone manufacturers? (1 = not good, 5 = very good) BenQ/Siemens
		/// </summary>
		public override int ImagingOpinionSiemens
		{
			get { return (int)this[Demographics.Columns.ImagingOpinionSiemens]; }
			set { this[Demographics.Columns.ImagingOpinionSiemens] = value; }
		}
		/// <summary>
		/// How would you describe your overall opinion about the following mobile phone manufacturers? (1 = not good, 5 = very good) LG
		/// </summary>
		public override int ImagingOpinionLg
		{
			get { return (int)this[Demographics.Columns.ImagingOpinionLg]; }
			set { this[Demographics.Columns.ImagingOpinionLg] = value; }
		}
		/// <summary>
		/// How would you describe your overall opinion about the following mobile phone manufacturers? (1 = not good, 5 = very good) Samsung
		/// </summary>
		public override int ImagingOpinionSamsung
		{
			get { return (int)this[Demographics.Columns.ImagingOpinionSamsung]; }
			set { this[Demographics.Columns.ImagingOpinionSamsung] = value; }
		}
		/// <summary>
		/// Thinking of mobile phone imaging capabilities, how would you rate each of the following manufacturers on a scale of 1-5? (1=does not provide imaging technology, 5=provides advanced imaging technology) Sony
		/// </summary>
		public override int ImagingCapabilitySony
		{
			get { return (int)this[Demographics.Columns.ImagingCapabilitySony]; }
			set { this[Demographics.Columns.ImagingCapabilitySony] = value; }
		}
		/// <summary>
		/// Thinking of mobile phone imaging capabilities, how would you rate each of the following manufacturers on a scale of 1-5? (1=does not provide imaging technology, 5=provides advanced imaging technology) Nokia
		/// </summary>
		public override int ImagingCapabilityNokia
		{
			get { return (int)this[Demographics.Columns.ImagingCapabilityNokia]; }
			set { this[Demographics.Columns.ImagingCapabilityNokia] = value; }
		}
		/// <summary>
		/// Thinking of mobile phone imaging capabilities, how would you rate each of the following manufacturers on a scale of 1-5? (1=does not provide imaging technology, 5=provides advanced imaging technology) Motorola
		/// </summary>
		public override int ImagingCapabilityMotorola
		{
			get { return (int)this[Demographics.Columns.ImagingCapabilityMotorola]; }
			set { this[Demographics.Columns.ImagingCapabilityMotorola] = value; }
		}
		/// <summary>
		/// Thinking of mobile phone imaging capabilities, how would you rate each of the following manufacturers on a scale of 1-5? (1=does not provide imaging technology, 5=provides advanced imaging technology) BenQ/Siemens
		/// </summary>
		public override int ImagingCapabilitySiemens
		{
			get { return (int)this[Demographics.Columns.ImagingCapabilitySiemens]; }
			set { this[Demographics.Columns.ImagingCapabilitySiemens] = value; }
		}
		/// <summary>
		/// Thinking of mobile phone imaging capabilities, how would you rate each of the following manufacturers on a scale of 1-5? (1=does not provide imaging technology, 5=provides advanced imaging technology) LG
		/// </summary>
		public override int ImagingCapabilityLg
		{
			get { return (int)this[Demographics.Columns.ImagingCapabilityLg]; }
			set { this[Demographics.Columns.ImagingCapabilityLg] = value; }
		}
		/// <summary>
		/// Thinking of mobile phone imaging capabilities, how would you rate each of the following manufacturers on a scale of 1-5? (1=does not provide imaging technology, 5=provides advanced imaging technology) Samsung
		/// </summary>
		public override int ImagingCapabilitySamsung
		{
			get { return (int)this[Demographics.Columns.ImagingCapabilitySamsung]; }
			set { this[Demographics.Columns.ImagingCapabilitySamsung] = value; }
		}
		/// <summary>
		/// If you were to buy a new mobile phone, how likely would you be to consider the following manufacturers? (1=very unlikely, 5 = very likely) Sony
		/// </summary>
		public override int ImagingBuySony
		{
			get { return (int)this[Demographics.Columns.ImagingBuySony]; }
			set { this[Demographics.Columns.ImagingBuySony] = value; }
		}
		/// <summary>
		/// If you were to buy a new mobile phone, how likely would you be to consider the following manufacturers? (1=very unlikely, 5 = very likely) Nokia
		/// </summary>
		public override int ImagingBuyNokia
		{
			get { return (int)this[Demographics.Columns.ImagingBuyNokia]; }
			set { this[Demographics.Columns.ImagingBuyNokia] = value; }
		}
		/// <summary>
		/// If you were to buy a new mobile phone, how likely would you be to consider the following manufacturers? (1=very unlikely, 5 = very likely) Motorola
		/// </summary>
		public override int ImagingBuyMotorola
		{
			get { return (int)this[Demographics.Columns.ImagingBuyMotorola]; }
			set { this[Demographics.Columns.ImagingBuyMotorola] = value; }
		}
		/// <summary>
		/// If you were to buy a new mobile phone, how likely would you be to consider the following manufacturers? (1=very unlikely, 5 = very likely) BenQ/Siemens
		/// </summary>
		public override int ImagingBuySiemens
		{
			get { return (int)this[Demographics.Columns.ImagingBuySiemens]; }
			set { this[Demographics.Columns.ImagingBuySiemens] = value; }
		}
		/// <summary>
		/// If you were to buy a new mobile phone, how likely would you be to consider the following manufacturers? (1=very unlikely, 5 = very likely) LG
		/// </summary>
		public override int ImagingBuyLg
		{
			get { return (int)this[Demographics.Columns.ImagingBuyLg]; }
			set { this[Demographics.Columns.ImagingBuyLg] = value; }
		}
		/// <summary>
		/// If you were to buy a new mobile phone, how likely would you be to consider the following manufacturers? (1=very unlikely, 5 = very likely) Samsung
		/// </summary>
		public override int ImagingBuySamsung
		{
			get { return (int)this[Demographics.Columns.ImagingBuySamsung]; }
			set { this[Demographics.Columns.ImagingBuySamsung] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildDemographicss
	{
		CachedSqlSelect<Demographics> ChildDemographicss();
		CachedSqlSelect<Demographics> ChildDemographicss(Q where);
		CachedSqlSelect<Demographics> ChildDemographicss(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<Demographics> ChildDemographicss(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class Demographics 
		{
		}

	#region DemographicsDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region DemographicsDataHolder
	/// <summary>
	/// Demographics questionairre resultsDataHolder
	/// </summary>
	[Serializable]
	public partial class DemographicsDataHolder : DataHolder<Demographics>
	{
		Demographics dataHolder;
		[NonSerializedAttribute] Demographics bob;

		public DemographicsDataHolder()
		{
			this.dataHolder = new Demographics();
		}
		
		void CopyValues(Demographics source, Demographics destination)
		{
			destination[Bobs.Demographics.Columns.Guid] = source[Bobs.Demographics.Columns.Guid];
			destination[Bobs.Demographics.Columns.DateTime] = source[Bobs.Demographics.Columns.DateTime];
			destination[Bobs.Demographics.Columns.DrinkWater] = source[Bobs.Demographics.Columns.DrinkWater];
			destination[Bobs.Demographics.Columns.DrinkSoft] = source[Bobs.Demographics.Columns.DrinkSoft];
			destination[Bobs.Demographics.Columns.DrinkEnergy] = source[Bobs.Demographics.Columns.DrinkEnergy];
			destination[Bobs.Demographics.Columns.DrinkDraftBeer] = source[Bobs.Demographics.Columns.DrinkDraftBeer];
			destination[Bobs.Demographics.Columns.DrinkBottledBeer] = source[Bobs.Demographics.Columns.DrinkBottledBeer];
			destination[Bobs.Demographics.Columns.DrinkSpirits] = source[Bobs.Demographics.Columns.DrinkSpirits];
			destination[Bobs.Demographics.Columns.DrinkWine] = source[Bobs.Demographics.Columns.DrinkWine];
			destination[Bobs.Demographics.Columns.DrinkAlcopops] = source[Bobs.Demographics.Columns.DrinkAlcopops];
			destination[Bobs.Demographics.Columns.DrinkCider] = source[Bobs.Demographics.Columns.DrinkCider];
			destination[Bobs.Demographics.Columns.Smoke] = source[Bobs.Demographics.Columns.Smoke];
			destination[Bobs.Demographics.Columns.EveningAllNight] = source[Bobs.Demographics.Columns.EveningAllNight];
			destination[Bobs.Demographics.Columns.EveningLateNight] = source[Bobs.Demographics.Columns.EveningLateNight];
			destination[Bobs.Demographics.Columns.EveningCoupleDrinks] = source[Bobs.Demographics.Columns.EveningCoupleDrinks];
			destination[Bobs.Demographics.Columns.EveningOther] = source[Bobs.Demographics.Columns.EveningOther];
			destination[Bobs.Demographics.Columns.EveningStayIn] = source[Bobs.Demographics.Columns.EveningStayIn];
			destination[Bobs.Demographics.Columns.Employment] = source[Bobs.Demographics.Columns.Employment];
			destination[Bobs.Demographics.Columns.Salary] = source[Bobs.Demographics.Columns.Salary];
			destination[Bobs.Demographics.Columns.CreditCard] = source[Bobs.Demographics.Columns.CreditCard];
			destination[Bobs.Demographics.Columns.Loan] = source[Bobs.Demographics.Columns.Loan];
			destination[Bobs.Demographics.Columns.Mortgage] = source[Bobs.Demographics.Columns.Mortgage];
			destination[Bobs.Demographics.Columns.OwnCar] = source[Bobs.Demographics.Columns.OwnCar];
			destination[Bobs.Demographics.Columns.OwnBike] = source[Bobs.Demographics.Columns.OwnBike];
			destination[Bobs.Demographics.Columns.OwnMp3] = source[Bobs.Demographics.Columns.OwnMp3];
			destination[Bobs.Demographics.Columns.OwnPc] = source[Bobs.Demographics.Columns.OwnPc];
			destination[Bobs.Demographics.Columns.OwnLaptop] = source[Bobs.Demographics.Columns.OwnLaptop];
			destination[Bobs.Demographics.Columns.OwnMac] = source[Bobs.Demographics.Columns.OwnMac];
			destination[Bobs.Demographics.Columns.OwnBroadband] = source[Bobs.Demographics.Columns.OwnBroadband];
			destination[Bobs.Demographics.Columns.OwnConsole] = source[Bobs.Demographics.Columns.OwnConsole];
			destination[Bobs.Demographics.Columns.OwnCamera] = source[Bobs.Demographics.Columns.OwnCamera];
			destination[Bobs.Demographics.Columns.OwnDvd] = source[Bobs.Demographics.Columns.OwnDvd];
			destination[Bobs.Demographics.Columns.OwnDvdRec] = source[Bobs.Demographics.Columns.OwnDvdRec];
			destination[Bobs.Demographics.Columns.BuyCar] = source[Bobs.Demographics.Columns.BuyCar];
			destination[Bobs.Demographics.Columns.BuyBike] = source[Bobs.Demographics.Columns.BuyBike];
			destination[Bobs.Demographics.Columns.BuyMp3] = source[Bobs.Demographics.Columns.BuyMp3];
			destination[Bobs.Demographics.Columns.BuyPc] = source[Bobs.Demographics.Columns.BuyPc];
			destination[Bobs.Demographics.Columns.BuyLaptop] = source[Bobs.Demographics.Columns.BuyLaptop];
			destination[Bobs.Demographics.Columns.BuyMac] = source[Bobs.Demographics.Columns.BuyMac];
			destination[Bobs.Demographics.Columns.BuyBroadband] = source[Bobs.Demographics.Columns.BuyBroadband];
			destination[Bobs.Demographics.Columns.BuyConsole] = source[Bobs.Demographics.Columns.BuyConsole];
			destination[Bobs.Demographics.Columns.BuyCamera] = source[Bobs.Demographics.Columns.BuyCamera];
			destination[Bobs.Demographics.Columns.BuyDvd] = source[Bobs.Demographics.Columns.BuyDvd];
			destination[Bobs.Demographics.Columns.BuyDvdRec] = source[Bobs.Demographics.Columns.BuyDvdRec];
			destination[Bobs.Demographics.Columns.SpendDesignerClothes] = source[Bobs.Demographics.Columns.SpendDesignerClothes];
			destination[Bobs.Demographics.Columns.SpendHighStreetClothes] = source[Bobs.Demographics.Columns.SpendHighStreetClothes];
			destination[Bobs.Demographics.Columns.SpendMusicCd] = source[Bobs.Demographics.Columns.SpendMusicCd];
			destination[Bobs.Demographics.Columns.SpendMusicVinyl] = source[Bobs.Demographics.Columns.SpendMusicVinyl];
			destination[Bobs.Demographics.Columns.SpendMusicDownload] = source[Bobs.Demographics.Columns.SpendMusicDownload];
			destination[Bobs.Demographics.Columns.SpendDvd] = source[Bobs.Demographics.Columns.SpendDvd];
			destination[Bobs.Demographics.Columns.SpendGames] = source[Bobs.Demographics.Columns.SpendGames];
			destination[Bobs.Demographics.Columns.SpendMobile] = source[Bobs.Demographics.Columns.SpendMobile];
			destination[Bobs.Demographics.Columns.SpendSms] = source[Bobs.Demographics.Columns.SpendSms];
			destination[Bobs.Demographics.Columns.SpendCar] = source[Bobs.Demographics.Columns.SpendCar];
			destination[Bobs.Demographics.Columns.SpendTravel] = source[Bobs.Demographics.Columns.SpendTravel];
			destination[Bobs.Demographics.Columns.Holidays] = source[Bobs.Demographics.Columns.Holidays];
			destination[Bobs.Demographics.Columns.ImagingManufacturer] = source[Bobs.Demographics.Columns.ImagingManufacturer];
			destination[Bobs.Demographics.Columns.ImagingImportant] = source[Bobs.Demographics.Columns.ImagingImportant];
			destination[Bobs.Demographics.Columns.ImagingOpinionSony] = source[Bobs.Demographics.Columns.ImagingOpinionSony];
			destination[Bobs.Demographics.Columns.ImagingOpinionNokia] = source[Bobs.Demographics.Columns.ImagingOpinionNokia];
			destination[Bobs.Demographics.Columns.ImagingOpinionMotorola] = source[Bobs.Demographics.Columns.ImagingOpinionMotorola];
			destination[Bobs.Demographics.Columns.ImagingOpinionSiemens] = source[Bobs.Demographics.Columns.ImagingOpinionSiemens];
			destination[Bobs.Demographics.Columns.ImagingOpinionLg] = source[Bobs.Demographics.Columns.ImagingOpinionLg];
			destination[Bobs.Demographics.Columns.ImagingOpinionSamsung] = source[Bobs.Demographics.Columns.ImagingOpinionSamsung];
			destination[Bobs.Demographics.Columns.ImagingCapabilitySony] = source[Bobs.Demographics.Columns.ImagingCapabilitySony];
			destination[Bobs.Demographics.Columns.ImagingCapabilityNokia] = source[Bobs.Demographics.Columns.ImagingCapabilityNokia];
			destination[Bobs.Demographics.Columns.ImagingCapabilityMotorola] = source[Bobs.Demographics.Columns.ImagingCapabilityMotorola];
			destination[Bobs.Demographics.Columns.ImagingCapabilitySiemens] = source[Bobs.Demographics.Columns.ImagingCapabilitySiemens];
			destination[Bobs.Demographics.Columns.ImagingCapabilityLg] = source[Bobs.Demographics.Columns.ImagingCapabilityLg];
			destination[Bobs.Demographics.Columns.ImagingCapabilitySamsung] = source[Bobs.Demographics.Columns.ImagingCapabilitySamsung];
			destination[Bobs.Demographics.Columns.ImagingBuySony] = source[Bobs.Demographics.Columns.ImagingBuySony];
			destination[Bobs.Demographics.Columns.ImagingBuyNokia] = source[Bobs.Demographics.Columns.ImagingBuyNokia];
			destination[Bobs.Demographics.Columns.ImagingBuyMotorola] = source[Bobs.Demographics.Columns.ImagingBuyMotorola];
			destination[Bobs.Demographics.Columns.ImagingBuySiemens] = source[Bobs.Demographics.Columns.ImagingBuySiemens];
			destination[Bobs.Demographics.Columns.ImagingBuyLg] = source[Bobs.Demographics.Columns.ImagingBuyLg];
			destination[Bobs.Demographics.Columns.ImagingBuySamsung] = source[Bobs.Demographics.Columns.ImagingBuySamsung];
		}
		
		public DemographicsDataHolder(Demographics bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// Guid of browser or Usr
		/// </summary>
		public Guid Guid
		{
			get { return dataHolder.Guid; }
			set { this.dataHolder.Guid = value; }
		}
		/// <summary>
		/// Date/time the questionairre was completed
		/// </summary>
		public DateTime DateTime
		{
			get { return dataHolder.DateTime; }
			set { this.dataHolder.DateTime = value; }
		}
		/// <summary>
		/// When going out, what do you drink? Water
		/// </summary>
		public bool DrinkWater
		{
			get { return dataHolder.DrinkWater; }
			set { this.dataHolder.DrinkWater = value; }
		}
		/// <summary>
		/// When going out, what do you drink? Soft drinks
		/// </summary>
		public bool DrinkSoft
		{
			get { return dataHolder.DrinkSoft; }
			set { this.dataHolder.DrinkSoft = value; }
		}
		/// <summary>
		/// When going out, what do you drink? Energy drinks
		/// </summary>
		public bool DrinkEnergy
		{
			get { return dataHolder.DrinkEnergy; }
			set { this.dataHolder.DrinkEnergy = value; }
		}
		/// <summary>
		/// When going out, what do you drink? Beer / lager (in a pint / glass)
		/// </summary>
		public bool DrinkDraftBeer
		{
			get { return dataHolder.DrinkDraftBeer; }
			set { this.dataHolder.DrinkDraftBeer = value; }
		}
		/// <summary>
		/// When going out, what do you drink? Bottled beer / lager
		/// </summary>
		public bool DrinkBottledBeer
		{
			get { return dataHolder.DrinkBottledBeer; }
			set { this.dataHolder.DrinkBottledBeer = value; }
		}
		/// <summary>
		/// When going out, what do you drink? Spirits
		/// </summary>
		public bool DrinkSpirits
		{
			get { return dataHolder.DrinkSpirits; }
			set { this.dataHolder.DrinkSpirits = value; }
		}
		/// <summary>
		/// When going out, what do you drink? Wine
		/// </summary>
		public bool DrinkWine
		{
			get { return dataHolder.DrinkWine; }
			set { this.dataHolder.DrinkWine = value; }
		}
		/// <summary>
		/// When going out, what do you drink? Alcopops
		/// </summary>
		public bool DrinkAlcopops
		{
			get { return dataHolder.DrinkAlcopops; }
			set { this.dataHolder.DrinkAlcopops = value; }
		}
		/// <summary>
		/// When going out, what do you drink? Cider
		/// </summary>
		public bool DrinkCider
		{
			get { return dataHolder.DrinkCider; }
			set { this.dataHolder.DrinkCider = value; }
		}
		/// <summary>
		/// Do you smoke? Yes=1, No=2, Only when I go out=3
		/// </summary>
		public int Smoke
		{
			get { return dataHolder.Smoke; }
			set { this.dataHolder.Smoke = value; }
		}
		/// <summary>
		/// How / how often do you spend your evenings: All night clubbing (times per week)
		/// </summary>
		public double EveningAllNight
		{
			get { return dataHolder.EveningAllNight; }
			set { this.dataHolder.EveningAllNight = value; }
		}
		/// <summary>
		/// How / how often do you spend your evenings: Late night at a pub/club (in bed by 3am) (times per week)
		/// </summary>
		public double EveningLateNight
		{
			get { return dataHolder.EveningLateNight; }
			set { this.dataHolder.EveningLateNight = value; }
		}
		/// <summary>
		/// How / how often do you spend your evenings: Couple of drinks in a bar (in bed by midnight) (times per week)
		/// </summary>
		public double EveningCoupleDrinks
		{
			get { return dataHolder.EveningCoupleDrinks; }
			set { this.dataHolder.EveningCoupleDrinks = value; }
		}
		/// <summary>
		/// How / how often do you spend your evenings: Other social event (e.g. cinema, restaurant etc.) (times per week)
		/// </summary>
		public double EveningOther
		{
			get { return dataHolder.EveningOther; }
			set { this.dataHolder.EveningOther = value; }
		}
		/// <summary>
		/// How / how often do you spend your evenings: Stay in / work (times per week)
		/// </summary>
		public double EveningStayIn
		{
			get { return dataHolder.EveningStayIn; }
			set { this.dataHolder.EveningStayIn = value; }
		}
		/// <summary>
		/// What’s your employment status: Full-time=1, Part-time=2, Currently unemployed=3, Student=4
		/// </summary>
		public int Employment
		{
			get { return dataHolder.Employment; }
			set { this.dataHolder.Employment = value; }
		}
		/// <summary>
		/// How much do you earn per year? [less than £15k]=1, [15 - 19]=2, [20 - 24]=3, [25 - 29]=4, [30 - 39]=5, [40 - 49]=6, [£50k+]=7
		/// </summary>
		public int Salary
		{
			get { return dataHolder.Salary; }
			set { this.dataHolder.Salary = value; }
		}
		/// <summary>
		/// Do you use a credit card?
		/// </summary>
		public bool CreditCard
		{
			get { return dataHolder.CreditCard; }
			set { this.dataHolder.CreditCard = value; }
		}
		/// <summary>
		/// Do you have a personal loan?
		/// </summary>
		public bool Loan
		{
			get { return dataHolder.Loan; }
			set { this.dataHolder.Loan = value; }
		}
		/// <summary>
		/// Do you have a mortgage?
		/// </summary>
		public bool Mortgage
		{
			get { return dataHolder.Mortgage; }
			set { this.dataHolder.Mortgage = value; }
		}
		/// <summary>
		/// Do you own: Car / motorbike
		/// </summary>
		public bool OwnCar
		{
			get { return dataHolder.OwnCar; }
			set { this.dataHolder.OwnCar = value; }
		}
		/// <summary>
		/// Do you own: Pedal bike
		/// </summary>
		public bool OwnBike
		{
			get { return dataHolder.OwnBike; }
			set { this.dataHolder.OwnBike = value; }
		}
		/// <summary>
		/// Do you own: MP3 player
		/// </summary>
		public bool OwnMp3
		{
			get { return dataHolder.OwnMp3; }
			set { this.dataHolder.OwnMp3 = value; }
		}
		/// <summary>
		/// Do you own: PC
		/// </summary>
		public bool OwnPc
		{
			get { return dataHolder.OwnPc; }
			set { this.dataHolder.OwnPc = value; }
		}
		/// <summary>
		/// Do you own: Laptop
		/// </summary>
		public bool OwnLaptop
		{
			get { return dataHolder.OwnLaptop; }
			set { this.dataHolder.OwnLaptop = value; }
		}
		/// <summary>
		/// Do you own: Mac
		/// </summary>
		public bool OwnMac
		{
			get { return dataHolder.OwnMac; }
			set { this.dataHolder.OwnMac = value; }
		}
		/// <summary>
		/// Do you own: Broadband internet
		/// </summary>
		public bool OwnBroadband
		{
			get { return dataHolder.OwnBroadband; }
			set { this.dataHolder.OwnBroadband = value; }
		}
		/// <summary>
		/// Do you own: Games console
		/// </summary>
		public bool OwnConsole
		{
			get { return dataHolder.OwnConsole; }
			set { this.dataHolder.OwnConsole = value; }
		}
		/// <summary>
		/// Do you own: Digital camera
		/// </summary>
		public bool OwnCamera
		{
			get { return dataHolder.OwnCamera; }
			set { this.dataHolder.OwnCamera = value; }
		}
		/// <summary>
		/// Do you own: DVD player
		/// </summary>
		public bool OwnDvd
		{
			get { return dataHolder.OwnDvd; }
			set { this.dataHolder.OwnDvd = value; }
		}
		/// <summary>
		/// Do you own: DVD recorder
		/// </summary>
		public bool OwnDvdRec
		{
			get { return dataHolder.OwnDvdRec; }
			set { this.dataHolder.OwnDvdRec = value; }
		}
		/// <summary>
		/// Do you think you might buy in the next 6 months: Car / motorbike
		/// </summary>
		public bool BuyCar
		{
			get { return dataHolder.BuyCar; }
			set { this.dataHolder.BuyCar = value; }
		}
		/// <summary>
		/// Do you think you might buy in the next 6 months: Pedal bike
		/// </summary>
		public bool BuyBike
		{
			get { return dataHolder.BuyBike; }
			set { this.dataHolder.BuyBike = value; }
		}
		/// <summary>
		/// Do you think you might buy in the next 6 months: MP3 player
		/// </summary>
		public bool BuyMp3
		{
			get { return dataHolder.BuyMp3; }
			set { this.dataHolder.BuyMp3 = value; }
		}
		/// <summary>
		/// Do you think you might buy in the next 6 months: PC
		/// </summary>
		public bool BuyPc
		{
			get { return dataHolder.BuyPc; }
			set { this.dataHolder.BuyPc = value; }
		}
		/// <summary>
		/// Do you think you might buy in the next 6 months: Laptop
		/// </summary>
		public bool BuyLaptop
		{
			get { return dataHolder.BuyLaptop; }
			set { this.dataHolder.BuyLaptop = value; }
		}
		/// <summary>
		/// Do you think you might buy in the next 6 months: Mac
		/// </summary>
		public bool BuyMac
		{
			get { return dataHolder.BuyMac; }
			set { this.dataHolder.BuyMac = value; }
		}
		/// <summary>
		/// Do you think you might buy in the next 6 months: Broadband internet
		/// </summary>
		public bool BuyBroadband
		{
			get { return dataHolder.BuyBroadband; }
			set { this.dataHolder.BuyBroadband = value; }
		}
		/// <summary>
		/// Do you think you might buy in the next 6 months: Games console
		/// </summary>
		public bool BuyConsole
		{
			get { return dataHolder.BuyConsole; }
			set { this.dataHolder.BuyConsole = value; }
		}
		/// <summary>
		/// Do you think you might buy in the next 6 months: Digital camera
		/// </summary>
		public bool BuyCamera
		{
			get { return dataHolder.BuyCamera; }
			set { this.dataHolder.BuyCamera = value; }
		}
		/// <summary>
		/// Do you think you might buy in the next 6 months: DVD player
		/// </summary>
		public bool BuyDvd
		{
			get { return dataHolder.BuyDvd; }
			set { this.dataHolder.BuyDvd = value; }
		}
		/// <summary>
		/// Do you think you might buy in the next 6 months: DVD recorder
		/// </summary>
		public bool BuyDvdRec
		{
			get { return dataHolder.BuyDvdRec; }
			set { this.dataHolder.BuyDvdRec = value; }
		}
		/// <summary>
		/// How much do you spend on average per month on: Designer / branded clothes (Nothing=1, less than £10=2, £10-£19=3, £20-£49=4, £50-£99=5, £100-£200=6, £200+=7)
		/// </summary>
		public int SpendDesignerClothes
		{
			get { return dataHolder.SpendDesignerClothes; }
			set { this.dataHolder.SpendDesignerClothes = value; }
		}
		/// <summary>
		/// How much do you spend on average per month on: High street / non-branded clothes (Nothing=1, less than £10=2, £10-£19=3, £20-£49=4, £50-£99=5, £100-£200=6, £200+=7)
		/// </summary>
		public int SpendHighStreetClothes
		{
			get { return dataHolder.SpendHighStreetClothes; }
			set { this.dataHolder.SpendHighStreetClothes = value; }
		}
		/// <summary>
		/// How much do you spend on average per month on: Music on CD (Nothing=1, less than £10=2, £10-£19=3, £20-£49=4, £50-£99=5, £100-£200=6, £200+=7)
		/// </summary>
		public int SpendMusicCd
		{
			get { return dataHolder.SpendMusicCd; }
			set { this.dataHolder.SpendMusicCd = value; }
		}
		/// <summary>
		/// How much do you spend on average per month on: Music on vinyl (Nothing=1, less than £10=2, £10-£19=3, £20-£49=4, £50-£99=5, £100-£200=6, £200+=7)
		/// </summary>
		public int SpendMusicVinyl
		{
			get { return dataHolder.SpendMusicVinyl; }
			set { this.dataHolder.SpendMusicVinyl = value; }
		}
		/// <summary>
		/// How much do you spend on average per month on: Music downloads (Nothing=1, less than £10=2, £10-£19=3, £20-£49=4, £50-£99=5, £100-£200=6, £200+=7)
		/// </summary>
		public int SpendMusicDownload
		{
			get { return dataHolder.SpendMusicDownload; }
			set { this.dataHolder.SpendMusicDownload = value; }
		}
		/// <summary>
		/// How much do you spend on average per month on: DVDs (Nothing=1, less than £10=2, £10-£19=3, £20-£49=4, £50-£99=5, £100-£200=6, £200+=7)
		/// </summary>
		public int SpendDvd
		{
			get { return dataHolder.SpendDvd; }
			set { this.dataHolder.SpendDvd = value; }
		}
		/// <summary>
		/// How much do you spend on average per month on: Computer/video games (Nothing=1, less than £10=2, £10-£19=3, £20-£49=4, £50-£99=5, £100-£200=6, £200+=7)
		/// </summary>
		public int SpendGames
		{
			get { return dataHolder.SpendGames; }
			set { this.dataHolder.SpendGames = value; }
		}
		/// <summary>
		/// How much do you spend on average per month on: Mobile phone calls (Nothing=1, less than £10=2, £10-£19=3, £20-£49=4, £50-£99=5, £100-£200=6, £200+=7)
		/// </summary>
		public int SpendMobile
		{
			get { return dataHolder.SpendMobile; }
			set { this.dataHolder.SpendMobile = value; }
		}
		/// <summary>
		/// How much do you spend on average per month on: Ringtones / text voting etc. (Nothing=1, less than £10=2, £10-£19=3, £20-£49=4, £50-£99=5, £100-£200=6, £200+=7)
		/// </summary>
		public int SpendSms
		{
			get { return dataHolder.SpendSms; }
			set { this.dataHolder.SpendSms = value; }
		}
		/// <summary>
		/// How much do you spend on average per month on: Car / motorbike (Nothing=1, less than £10=2, £10-£19=3, £20-£49=4, £50-£99=5, £100-£200=6, £200+=7)
		/// </summary>
		public int SpendCar
		{
			get { return dataHolder.SpendCar; }
			set { this.dataHolder.SpendCar = value; }
		}
		/// <summary>
		/// How much do you spend on average per month on: Other travel / public transport (Nothing=1, less than £10=2, £10-£19=3, £20-£49=4, £50-£99=5, £100-£200=6, £200+=7)
		/// </summary>
		public int SpendTravel
		{
			get { return dataHolder.SpendTravel; }
			set { this.dataHolder.SpendTravel = value; }
		}
		/// <summary>
		/// How often do you go abroad on holiday? (time(s) per year)
		/// </summary>
		public int Holidays
		{
			get { return dataHolder.Holidays; }
			set { this.dataHolder.Holidays = value; }
		}
		/// <summary>
		/// When you think of mobile phone imaging technology, which mobile phone manufacturer comes to mind first?
		/// </summary>
		public string ImagingManufacturer
		{
			get { return dataHolder.ImagingManufacturer; }
			set { this.dataHolder.ImagingManufacturer = value; }
		}
		/// <summary>
		/// On a scale of 1-5, how important is imaging functionality in a mobile phone when considering which handset to get? (1 = not very important, 5 = very important)
		/// </summary>
		public int ImagingImportant
		{
			get { return dataHolder.ImagingImportant; }
			set { this.dataHolder.ImagingImportant = value; }
		}
		/// <summary>
		/// How would you describe your overall opinion about the following mobile phone manufacturers? (1 = not good, 5 = very good) Sony
		/// </summary>
		public int ImagingOpinionSony
		{
			get { return dataHolder.ImagingOpinionSony; }
			set { this.dataHolder.ImagingOpinionSony = value; }
		}
		/// <summary>
		/// How would you describe your overall opinion about the following mobile phone manufacturers? (1 = not good, 5 = very good) Nokia
		/// </summary>
		public int ImagingOpinionNokia
		{
			get { return dataHolder.ImagingOpinionNokia; }
			set { this.dataHolder.ImagingOpinionNokia = value; }
		}
		/// <summary>
		/// How would you describe your overall opinion about the following mobile phone manufacturers? (1 = not good, 5 = very good) Motorola
		/// </summary>
		public int ImagingOpinionMotorola
		{
			get { return dataHolder.ImagingOpinionMotorola; }
			set { this.dataHolder.ImagingOpinionMotorola = value; }
		}
		/// <summary>
		/// How would you describe your overall opinion about the following mobile phone manufacturers? (1 = not good, 5 = very good) BenQ/Siemens
		/// </summary>
		public int ImagingOpinionSiemens
		{
			get { return dataHolder.ImagingOpinionSiemens; }
			set { this.dataHolder.ImagingOpinionSiemens = value; }
		}
		/// <summary>
		/// How would you describe your overall opinion about the following mobile phone manufacturers? (1 = not good, 5 = very good) LG
		/// </summary>
		public int ImagingOpinionLg
		{
			get { return dataHolder.ImagingOpinionLg; }
			set { this.dataHolder.ImagingOpinionLg = value; }
		}
		/// <summary>
		/// How would you describe your overall opinion about the following mobile phone manufacturers? (1 = not good, 5 = very good) Samsung
		/// </summary>
		public int ImagingOpinionSamsung
		{
			get { return dataHolder.ImagingOpinionSamsung; }
			set { this.dataHolder.ImagingOpinionSamsung = value; }
		}
		/// <summary>
		/// Thinking of mobile phone imaging capabilities, how would you rate each of the following manufacturers on a scale of 1-5? (1=does not provide imaging technology, 5=provides advanced imaging technology) Sony
		/// </summary>
		public int ImagingCapabilitySony
		{
			get { return dataHolder.ImagingCapabilitySony; }
			set { this.dataHolder.ImagingCapabilitySony = value; }
		}
		/// <summary>
		/// Thinking of mobile phone imaging capabilities, how would you rate each of the following manufacturers on a scale of 1-5? (1=does not provide imaging technology, 5=provides advanced imaging technology) Nokia
		/// </summary>
		public int ImagingCapabilityNokia
		{
			get { return dataHolder.ImagingCapabilityNokia; }
			set { this.dataHolder.ImagingCapabilityNokia = value; }
		}
		/// <summary>
		/// Thinking of mobile phone imaging capabilities, how would you rate each of the following manufacturers on a scale of 1-5? (1=does not provide imaging technology, 5=provides advanced imaging technology) Motorola
		/// </summary>
		public int ImagingCapabilityMotorola
		{
			get { return dataHolder.ImagingCapabilityMotorola; }
			set { this.dataHolder.ImagingCapabilityMotorola = value; }
		}
		/// <summary>
		/// Thinking of mobile phone imaging capabilities, how would you rate each of the following manufacturers on a scale of 1-5? (1=does not provide imaging technology, 5=provides advanced imaging technology) BenQ/Siemens
		/// </summary>
		public int ImagingCapabilitySiemens
		{
			get { return dataHolder.ImagingCapabilitySiemens; }
			set { this.dataHolder.ImagingCapabilitySiemens = value; }
		}
		/// <summary>
		/// Thinking of mobile phone imaging capabilities, how would you rate each of the following manufacturers on a scale of 1-5? (1=does not provide imaging technology, 5=provides advanced imaging technology) LG
		/// </summary>
		public int ImagingCapabilityLg
		{
			get { return dataHolder.ImagingCapabilityLg; }
			set { this.dataHolder.ImagingCapabilityLg = value; }
		}
		/// <summary>
		/// Thinking of mobile phone imaging capabilities, how would you rate each of the following manufacturers on a scale of 1-5? (1=does not provide imaging technology, 5=provides advanced imaging technology) Samsung
		/// </summary>
		public int ImagingCapabilitySamsung
		{
			get { return dataHolder.ImagingCapabilitySamsung; }
			set { this.dataHolder.ImagingCapabilitySamsung = value; }
		}
		/// <summary>
		/// If you were to buy a new mobile phone, how likely would you be to consider the following manufacturers? (1=very unlikely, 5 = very likely) Sony
		/// </summary>
		public int ImagingBuySony
		{
			get { return dataHolder.ImagingBuySony; }
			set { this.dataHolder.ImagingBuySony = value; }
		}
		/// <summary>
		/// If you were to buy a new mobile phone, how likely would you be to consider the following manufacturers? (1=very unlikely, 5 = very likely) Nokia
		/// </summary>
		public int ImagingBuyNokia
		{
			get { return dataHolder.ImagingBuyNokia; }
			set { this.dataHolder.ImagingBuyNokia = value; }
		}
		/// <summary>
		/// If you were to buy a new mobile phone, how likely would you be to consider the following manufacturers? (1=very unlikely, 5 = very likely) Motorola
		/// </summary>
		public int ImagingBuyMotorola
		{
			get { return dataHolder.ImagingBuyMotorola; }
			set { this.dataHolder.ImagingBuyMotorola = value; }
		}
		/// <summary>
		/// If you were to buy a new mobile phone, how likely would you be to consider the following manufacturers? (1=very unlikely, 5 = very likely) BenQ/Siemens
		/// </summary>
		public int ImagingBuySiemens
		{
			get { return dataHolder.ImagingBuySiemens; }
			set { this.dataHolder.ImagingBuySiemens = value; }
		}
		/// <summary>
		/// If you were to buy a new mobile phone, how likely would you be to consider the following manufacturers? (1=very unlikely, 5 = very likely) LG
		/// </summary>
		public int ImagingBuyLg
		{
			get { return dataHolder.ImagingBuyLg; }
			set { this.dataHolder.ImagingBuyLg = value; }
		}
		/// <summary>
		/// If you were to buy a new mobile phone, how likely would you be to consider the following manufacturers? (1=very unlikely, 5 = very likely) Samsung
		/// </summary>
		public int ImagingBuySamsung
		{
			get { return dataHolder.ImagingBuySamsung; }
			set { this.dataHolder.ImagingBuySamsung = value; }
		}
		#endregion
		public Demographics Demographics
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new Demographics(K);
					}
					else
					{
						bob = new Demographics();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region DemographicsSet
	public partial class DemographicsSet : BobSet, IEnumerable<Demographics>
	{
		public DemographicsSet(Query query) : base(query) { }

		public Demographics this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new Demographics(this);
					((Demographics)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (Demographics)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new DemographicsTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<Demographics> ToList()
		{
			List<Demographics> list = new List<Demographics>();
			foreach (Demographics item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<Demographics> Members

		public new IEnumerator<Demographics> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region DemographicsTableDef
	public class DemographicsTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "Demographics";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "932169C1";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return Demographics.GetColumnName((Demographics.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.Demographics;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return true;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return Demographics.Columns.Guid;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			Demographics.Columns c = (Demographics.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case Demographics.Columns.Guid: ColumnStore[i] = new ColumnDef(c, "Guid", SqlDbType.UniqueIdentifier, 16, SqlColumnFlag.PrimaryKey, Guid.Empty); break;
					case Demographics.Columns.DateTime: ColumnStore[i] = new ColumnDef(c, "DateTime", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case Demographics.Columns.DrinkWater: ColumnStore[i] = new ColumnDef(c, "DrinkWater", SqlDbType.Bit, false); break;
					case Demographics.Columns.DrinkSoft: ColumnStore[i] = new ColumnDef(c, "DrinkSoft", SqlDbType.Bit, false); break;
					case Demographics.Columns.DrinkEnergy: ColumnStore[i] = new ColumnDef(c, "DrinkEnergy", SqlDbType.Bit, false); break;
					case Demographics.Columns.DrinkDraftBeer: ColumnStore[i] = new ColumnDef(c, "DrinkDraftBeer", SqlDbType.Bit, false); break;
					case Demographics.Columns.DrinkBottledBeer: ColumnStore[i] = new ColumnDef(c, "DrinkBottledBeer", SqlDbType.Bit, false); break;
					case Demographics.Columns.DrinkSpirits: ColumnStore[i] = new ColumnDef(c, "DrinkSpirits", SqlDbType.Bit, false); break;
					case Demographics.Columns.DrinkWine: ColumnStore[i] = new ColumnDef(c, "DrinkWine", SqlDbType.Bit, false); break;
					case Demographics.Columns.DrinkAlcopops: ColumnStore[i] = new ColumnDef(c, "DrinkAlcopops", SqlDbType.Bit, false); break;
					case Demographics.Columns.DrinkCider: ColumnStore[i] = new ColumnDef(c, "DrinkCider", SqlDbType.Bit, false); break;
					case Demographics.Columns.Smoke: ColumnStore[i] = new ColumnDef(c, "Smoke", SqlDbType.Int, 0); break;
					case Demographics.Columns.EveningAllNight: ColumnStore[i] = new ColumnDef(c, "EveningAllNight", SqlDbType.Float, 0.0); break;
					case Demographics.Columns.EveningLateNight: ColumnStore[i] = new ColumnDef(c, "EveningLateNight", SqlDbType.Float, 0.0); break;
					case Demographics.Columns.EveningCoupleDrinks: ColumnStore[i] = new ColumnDef(c, "EveningCoupleDrinks", SqlDbType.Float, 0.0); break;
					case Demographics.Columns.EveningOther: ColumnStore[i] = new ColumnDef(c, "EveningOther", SqlDbType.Float, 0.0); break;
					case Demographics.Columns.EveningStayIn: ColumnStore[i] = new ColumnDef(c, "EveningStayIn", SqlDbType.Float, 0.0); break;
					case Demographics.Columns.Employment: ColumnStore[i] = new ColumnDef(c, "Employment", SqlDbType.Int, 0); break;
					case Demographics.Columns.Salary: ColumnStore[i] = new ColumnDef(c, "Salary", SqlDbType.Int, 0); break;
					case Demographics.Columns.CreditCard: ColumnStore[i] = new ColumnDef(c, "CreditCard", SqlDbType.Bit, false); break;
					case Demographics.Columns.Loan: ColumnStore[i] = new ColumnDef(c, "Loan", SqlDbType.Bit, false); break;
					case Demographics.Columns.Mortgage: ColumnStore[i] = new ColumnDef(c, "Mortgage", SqlDbType.Bit, false); break;
					case Demographics.Columns.OwnCar: ColumnStore[i] = new ColumnDef(c, "OwnCar", SqlDbType.Bit, false); break;
					case Demographics.Columns.OwnBike: ColumnStore[i] = new ColumnDef(c, "OwnBike", SqlDbType.Bit, false); break;
					case Demographics.Columns.OwnMp3: ColumnStore[i] = new ColumnDef(c, "OwnMp3", SqlDbType.Bit, false); break;
					case Demographics.Columns.OwnPc: ColumnStore[i] = new ColumnDef(c, "OwnPc", SqlDbType.Bit, false); break;
					case Demographics.Columns.OwnLaptop: ColumnStore[i] = new ColumnDef(c, "OwnLaptop", SqlDbType.Bit, false); break;
					case Demographics.Columns.OwnMac: ColumnStore[i] = new ColumnDef(c, "OwnMac", SqlDbType.Bit, false); break;
					case Demographics.Columns.OwnBroadband: ColumnStore[i] = new ColumnDef(c, "OwnBroadband", SqlDbType.Bit, false); break;
					case Demographics.Columns.OwnConsole: ColumnStore[i] = new ColumnDef(c, "OwnConsole", SqlDbType.Bit, false); break;
					case Demographics.Columns.OwnCamera: ColumnStore[i] = new ColumnDef(c, "OwnCamera", SqlDbType.Bit, false); break;
					case Demographics.Columns.OwnDvd: ColumnStore[i] = new ColumnDef(c, "OwnDvd", SqlDbType.Bit, false); break;
					case Demographics.Columns.OwnDvdRec: ColumnStore[i] = new ColumnDef(c, "OwnDvdRec", SqlDbType.Bit, false); break;
					case Demographics.Columns.BuyCar: ColumnStore[i] = new ColumnDef(c, "BuyCar", SqlDbType.Bit, false); break;
					case Demographics.Columns.BuyBike: ColumnStore[i] = new ColumnDef(c, "BuyBike", SqlDbType.Bit, false); break;
					case Demographics.Columns.BuyMp3: ColumnStore[i] = new ColumnDef(c, "BuyMp3", SqlDbType.Bit, false); break;
					case Demographics.Columns.BuyPc: ColumnStore[i] = new ColumnDef(c, "BuyPc", SqlDbType.Bit, false); break;
					case Demographics.Columns.BuyLaptop: ColumnStore[i] = new ColumnDef(c, "BuyLaptop", SqlDbType.Bit, false); break;
					case Demographics.Columns.BuyMac: ColumnStore[i] = new ColumnDef(c, "BuyMac", SqlDbType.Bit, false); break;
					case Demographics.Columns.BuyBroadband: ColumnStore[i] = new ColumnDef(c, "BuyBroadband", SqlDbType.Bit, false); break;
					case Demographics.Columns.BuyConsole: ColumnStore[i] = new ColumnDef(c, "BuyConsole", SqlDbType.Bit, false); break;
					case Demographics.Columns.BuyCamera: ColumnStore[i] = new ColumnDef(c, "BuyCamera", SqlDbType.Bit, false); break;
					case Demographics.Columns.BuyDvd: ColumnStore[i] = new ColumnDef(c, "BuyDvd", SqlDbType.Bit, false); break;
					case Demographics.Columns.BuyDvdRec: ColumnStore[i] = new ColumnDef(c, "BuyDvdRec", SqlDbType.Bit, false); break;
					case Demographics.Columns.SpendDesignerClothes: ColumnStore[i] = new ColumnDef(c, "SpendDesignerClothes", SqlDbType.Int, 0); break;
					case Demographics.Columns.SpendHighStreetClothes: ColumnStore[i] = new ColumnDef(c, "SpendHighStreetClothes", SqlDbType.Int, 0); break;
					case Demographics.Columns.SpendMusicCd: ColumnStore[i] = new ColumnDef(c, "SpendMusicCd", SqlDbType.Int, 0); break;
					case Demographics.Columns.SpendMusicVinyl: ColumnStore[i] = new ColumnDef(c, "SpendMusicVinyl", SqlDbType.Int, 0); break;
					case Demographics.Columns.SpendMusicDownload: ColumnStore[i] = new ColumnDef(c, "SpendMusicDownload", SqlDbType.Int, 0); break;
					case Demographics.Columns.SpendDvd: ColumnStore[i] = new ColumnDef(c, "SpendDvd", SqlDbType.Int, 0); break;
					case Demographics.Columns.SpendGames: ColumnStore[i] = new ColumnDef(c, "SpendGames", SqlDbType.Int, 0); break;
					case Demographics.Columns.SpendMobile: ColumnStore[i] = new ColumnDef(c, "SpendMobile", SqlDbType.Int, 0); break;
					case Demographics.Columns.SpendSms: ColumnStore[i] = new ColumnDef(c, "SpendSms", SqlDbType.Int, 0); break;
					case Demographics.Columns.SpendCar: ColumnStore[i] = new ColumnDef(c, "SpendCar", SqlDbType.Int, 0); break;
					case Demographics.Columns.SpendTravel: ColumnStore[i] = new ColumnDef(c, "SpendTravel", SqlDbType.Int, 0); break;
					case Demographics.Columns.Holidays: ColumnStore[i] = new ColumnDef(c, "Holidays", SqlDbType.Int, 0); break;
					case Demographics.Columns.ImagingManufacturer: ColumnStore[i] = new ColumnDef(c, "ImagingManufacturer", SqlDbType.VarChar, 255, ""); break;
					case Demographics.Columns.ImagingImportant: ColumnStore[i] = new ColumnDef(c, "ImagingImportant", SqlDbType.Int, 0); break;
					case Demographics.Columns.ImagingOpinionSony: ColumnStore[i] = new ColumnDef(c, "ImagingOpinionSony", SqlDbType.Int, 0); break;
					case Demographics.Columns.ImagingOpinionNokia: ColumnStore[i] = new ColumnDef(c, "ImagingOpinionNokia", SqlDbType.Int, 0); break;
					case Demographics.Columns.ImagingOpinionMotorola: ColumnStore[i] = new ColumnDef(c, "ImagingOpinionMotorola", SqlDbType.Int, 0); break;
					case Demographics.Columns.ImagingOpinionSiemens: ColumnStore[i] = new ColumnDef(c, "ImagingOpinionSiemens", SqlDbType.Int, 0); break;
					case Demographics.Columns.ImagingOpinionLg: ColumnStore[i] = new ColumnDef(c, "ImagingOpinionLg", SqlDbType.Int, 0); break;
					case Demographics.Columns.ImagingOpinionSamsung: ColumnStore[i] = new ColumnDef(c, "ImagingOpinionSamsung", SqlDbType.Int, 0); break;
					case Demographics.Columns.ImagingCapabilitySony: ColumnStore[i] = new ColumnDef(c, "ImagingCapabilitySony", SqlDbType.Int, 0); break;
					case Demographics.Columns.ImagingCapabilityNokia: ColumnStore[i] = new ColumnDef(c, "ImagingCapabilityNokia", SqlDbType.Int, 0); break;
					case Demographics.Columns.ImagingCapabilityMotorola: ColumnStore[i] = new ColumnDef(c, "ImagingCapabilityMotorola", SqlDbType.Int, 0); break;
					case Demographics.Columns.ImagingCapabilitySiemens: ColumnStore[i] = new ColumnDef(c, "ImagingCapabilitySiemens", SqlDbType.Int, 0); break;
					case Demographics.Columns.ImagingCapabilityLg: ColumnStore[i] = new ColumnDef(c, "ImagingCapabilityLg", SqlDbType.Int, 0); break;
					case Demographics.Columns.ImagingCapabilitySamsung: ColumnStore[i] = new ColumnDef(c, "ImagingCapabilitySamsung", SqlDbType.Int, 0); break;
					case Demographics.Columns.ImagingBuySony: ColumnStore[i] = new ColumnDef(c, "ImagingBuySony", SqlDbType.Int, 0); break;
					case Demographics.Columns.ImagingBuyNokia: ColumnStore[i] = new ColumnDef(c, "ImagingBuyNokia", SqlDbType.Int, 0); break;
					case Demographics.Columns.ImagingBuyMotorola: ColumnStore[i] = new ColumnDef(c, "ImagingBuyMotorola", SqlDbType.Int, 0); break;
					case Demographics.Columns.ImagingBuySiemens: ColumnStore[i] = new ColumnDef(c, "ImagingBuySiemens", SqlDbType.Int, 0); break;
					case Demographics.Columns.ImagingBuyLg: ColumnStore[i] = new ColumnDef(c, "ImagingBuyLg", SqlDbType.Int, 0); break;
					case Demographics.Columns.ImagingBuySamsung: ColumnStore[i] = new ColumnDef(c, "ImagingBuySamsung", SqlDbType.Int, 0); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(Demographics.Columns.Guid);
						InitColumn(Demographics.Columns.DateTime);
						InitColumn(Demographics.Columns.DrinkWater);
						InitColumn(Demographics.Columns.DrinkSoft);
						InitColumn(Demographics.Columns.DrinkEnergy);
						InitColumn(Demographics.Columns.DrinkDraftBeer);
						InitColumn(Demographics.Columns.DrinkBottledBeer);
						InitColumn(Demographics.Columns.DrinkSpirits);
						InitColumn(Demographics.Columns.DrinkWine);
						InitColumn(Demographics.Columns.DrinkAlcopops);
						InitColumn(Demographics.Columns.DrinkCider);
						InitColumn(Demographics.Columns.Smoke);
						InitColumn(Demographics.Columns.EveningAllNight);
						InitColumn(Demographics.Columns.EveningLateNight);
						InitColumn(Demographics.Columns.EveningCoupleDrinks);
						InitColumn(Demographics.Columns.EveningOther);
						InitColumn(Demographics.Columns.EveningStayIn);
						InitColumn(Demographics.Columns.Employment);
						InitColumn(Demographics.Columns.Salary);
						InitColumn(Demographics.Columns.CreditCard);
						InitColumn(Demographics.Columns.Loan);
						InitColumn(Demographics.Columns.Mortgage);
						InitColumn(Demographics.Columns.OwnCar);
						InitColumn(Demographics.Columns.OwnBike);
						InitColumn(Demographics.Columns.OwnMp3);
						InitColumn(Demographics.Columns.OwnPc);
						InitColumn(Demographics.Columns.OwnLaptop);
						InitColumn(Demographics.Columns.OwnMac);
						InitColumn(Demographics.Columns.OwnBroadband);
						InitColumn(Demographics.Columns.OwnConsole);
						InitColumn(Demographics.Columns.OwnCamera);
						InitColumn(Demographics.Columns.OwnDvd);
						InitColumn(Demographics.Columns.OwnDvdRec);
						InitColumn(Demographics.Columns.BuyCar);
						InitColumn(Demographics.Columns.BuyBike);
						InitColumn(Demographics.Columns.BuyMp3);
						InitColumn(Demographics.Columns.BuyPc);
						InitColumn(Demographics.Columns.BuyLaptop);
						InitColumn(Demographics.Columns.BuyMac);
						InitColumn(Demographics.Columns.BuyBroadband);
						InitColumn(Demographics.Columns.BuyConsole);
						InitColumn(Demographics.Columns.BuyCamera);
						InitColumn(Demographics.Columns.BuyDvd);
						InitColumn(Demographics.Columns.BuyDvdRec);
						InitColumn(Demographics.Columns.SpendDesignerClothes);
						InitColumn(Demographics.Columns.SpendHighStreetClothes);
						InitColumn(Demographics.Columns.SpendMusicCd);
						InitColumn(Demographics.Columns.SpendMusicVinyl);
						InitColumn(Demographics.Columns.SpendMusicDownload);
						InitColumn(Demographics.Columns.SpendDvd);
						InitColumn(Demographics.Columns.SpendGames);
						InitColumn(Demographics.Columns.SpendMobile);
						InitColumn(Demographics.Columns.SpendSms);
						InitColumn(Demographics.Columns.SpendCar);
						InitColumn(Demographics.Columns.SpendTravel);
						InitColumn(Demographics.Columns.Holidays);
						InitColumn(Demographics.Columns.ImagingManufacturer);
						InitColumn(Demographics.Columns.ImagingImportant);
						InitColumn(Demographics.Columns.ImagingOpinionSony);
						InitColumn(Demographics.Columns.ImagingOpinionNokia);
						InitColumn(Demographics.Columns.ImagingOpinionMotorola);
						InitColumn(Demographics.Columns.ImagingOpinionSiemens);
						InitColumn(Demographics.Columns.ImagingOpinionLg);
						InitColumn(Demographics.Columns.ImagingOpinionSamsung);
						InitColumn(Demographics.Columns.ImagingCapabilitySony);
						InitColumn(Demographics.Columns.ImagingCapabilityNokia);
						InitColumn(Demographics.Columns.ImagingCapabilityMotorola);
						InitColumn(Demographics.Columns.ImagingCapabilitySiemens);
						InitColumn(Demographics.Columns.ImagingCapabilityLg);
						InitColumn(Demographics.Columns.ImagingCapabilitySamsung);
						InitColumn(Demographics.Columns.ImagingBuySony);
						InitColumn(Demographics.Columns.ImagingBuyNokia);
						InitColumn(Demographics.Columns.ImagingBuyMotorola);
						InitColumn(Demographics.Columns.ImagingBuySiemens);
						InitColumn(Demographics.Columns.ImagingBuyLg);
						InitColumn(Demographics.Columns.ImagingBuySamsung);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region Domain
	/// <summary>
	/// Domains that redirect to DSI
	/// </summary>
	public partial class Domain : Model.Entities.Domain, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// Unique Id
			/// </summary>
			K = 0x00180001,
			/// <summary>
			/// Domain name
			/// </summary>
			DomainName = 0x00180002,
			/// <summary>
			/// Link to the promoter table
			/// </summary>
			PromoterK = 0x00180003,
			/// <summary>
			/// Redirect to object page - type
			/// </summary>
			RedirectObjectType = 0x00180004,
			/// <summary>
			/// Redirect to object - K
			/// </summary>
			RedirectObjectK = 0x00180005,
			/// <summary>
			/// Redirect to custom URL
			/// </summary>
			RedirectUrl = 0x00180006,
			/// <summary>
			/// Site Application to invoke, in combination with RedirectObjectK and RedirectObjectType where relevant
			/// </summary>
			RedirectApp = 0x00180007,
			/// <summary>
			/// The resource ID of this domain when registered with Wild West Domains, useful for automated domain renewal
			/// </summary>
			WwdResourceID = 0x00180008,
			/// <summary>
			/// Has this domain been registered in the Primary zone? (Extra)
			/// </summary>
			RegisteredPrimary = 0x00180009,
			/// <summary>
			/// Has this domain been registered in the Secondary zone? (Mace)
			/// </summary>
			RegisteredSecondary = 0x0018000a,
		}
		#endregion
		public static string GetColumnName(Domain.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case Domain.Columns.K: return "K";
						case Domain.Columns.DomainName: return "DomainName";
						case Domain.Columns.PromoterK: return "PromoterK";
						case Domain.Columns.RedirectObjectType: return "RedirectObjectType";
						case Domain.Columns.RedirectObjectK: return "RedirectObjectK";
						case Domain.Columns.RedirectUrl: return "RedirectUrl";
						case Domain.Columns.RedirectApp: return "RedirectApp";
						case Domain.Columns.WwdResourceID: return "WwdResourceID";
						case Domain.Columns.RegisteredPrimary: return "RegisteredPrimary";
						case Domain.Columns.RegisteredSecondary: return "RegisteredSecondary";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(Domain.Columns columnEnum)
		{
			switch (columnEnum)
			{
														default: return false;
			}
		}


		#region Common
 
		public Domain(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);  }
		public Domain()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.Domain);
		}
		public Domain(BobSet bs)
		{
			this.Bob = new Bob(bs.Table, bs);
		}
		public Domain(int DomainK, IBob Parent, object Column)
			: this()
		{
			Bob.GetBobFromParent(DomainK, Parent.Bob, Column, TablesEnum.Domain);
		}
		public Domain(int DomainK)
			: this()
		{
			Bob.GetBobFromPrimaryKey(DomainK);
		}
		#endregion

	}
	#endregion
	#region DomainTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region Domain
	/// <summary>
	/// Domains that redirect to DSI
	/// </summary>
	[Serializable]
	public partial class Domain 
	{
		
		#region Simple members
		/// <summary>
		/// Unique Id
		/// </summary>
		public override int K
		{
			get { return (int)this[Domain.Columns.K] as int? ?? 0 ; }
			set { this[Domain.Columns.K] = value; }
		}
		/// <summary>
		/// Domain name
		/// </summary>
		public override string DomainName
		{
			get { return (string)this[Domain.Columns.DomainName]; }
			set { this[Domain.Columns.DomainName] = value; }
		}
		/// <summary>
		/// Link to the promoter table
		/// </summary>
		public override int PromoterK
		{
			get { return (int)this[Domain.Columns.PromoterK]; }
			set { this[Domain.Columns.PromoterK] = value; }
		}
		/// <summary>
		/// Redirect to object page - type
		/// </summary>
		public override int RedirectObjectType
		{
			get { return (int)this[Domain.Columns.RedirectObjectType]; }
			set { this[Domain.Columns.RedirectObjectType] = value; }
		}
		/// <summary>
		/// Redirect to object - K
		/// </summary>
		public override int RedirectObjectK
		{
			get { return (int)this[Domain.Columns.RedirectObjectK]; }
			set { this[Domain.Columns.RedirectObjectK] = value; }
		}
		/// <summary>
		/// Redirect to custom URL
		/// </summary>
		public override string RedirectUrl
		{
			get { return (string)this[Domain.Columns.RedirectUrl]; }
			set { this[Domain.Columns.RedirectUrl] = value; }
		}
		/// <summary>
		/// Site Application to invoke, in combination with RedirectObjectK and RedirectObjectType where relevant
		/// </summary>
		public override string RedirectApp
		{
			get { return (string)this[Domain.Columns.RedirectApp]; }
			set { this[Domain.Columns.RedirectApp] = value; }
		}
		/// <summary>
		/// The resource ID of this domain when registered with Wild West Domains, useful for automated domain renewal
		/// </summary>
		public override string WwdResourceID
		{
			get { return (string)this[Domain.Columns.WwdResourceID]; }
			set { this[Domain.Columns.WwdResourceID] = value; }
		}
		/// <summary>
		/// Has this domain been registered in the Primary zone? (Extra)
		/// </summary>
		public override bool RegisteredPrimary
		{
			get { return (bool)this[Domain.Columns.RegisteredPrimary]; }
			set { this[Domain.Columns.RegisteredPrimary] = value; }
		}
		/// <summary>
		/// Has this domain been registered in the Secondary zone? (Mace)
		/// </summary>
		public override bool RegisteredSecondary
		{
			get { return (bool)this[Domain.Columns.RegisteredSecondary]; }
			set { this[Domain.Columns.RegisteredSecondary] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildDomains
	{
		CachedSqlSelect<Domain> ChildDomains();
		CachedSqlSelect<Domain> ChildDomains(Q where);
		CachedSqlSelect<Domain> ChildDomains(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<Domain> ChildDomains(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class Domain 
	 : 
	Bobs.ChildInterfaces.IHasChildDomainStatss
	,
	Bobs.ChildInterfaces.IHasChildTickets
	,
	Bobs.ChildInterfaces.IHasChildVisits
		{
			public CachedSqlSelect<DomainStats> ChildDomainStatss()
		{
			return this.ChildDomainStatss(null, null);
		}
		public CachedSqlSelect<DomainStats> ChildDomainStatss(Q where)
		{
			return this.ChildDomainStatss(where, null);
		}
		public CachedSqlSelect<DomainStats> ChildDomainStatss(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildDomainStatss(null, orderBy);
		}
		public CachedSqlSelect<DomainStats> ChildDomainStatss(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<DomainStats>
			(
				new Children<DomainStats>
				(
					TablesEnum.Domain, 
					this.K, 
					TablesEnum.DomainStats, 
					dr => 
					{ 
						DomainStats newDomainStats = new DomainStats(); 
						newDomainStats.Initialise(dr); 
						return newDomainStats;
					},
					"2E2E29B3",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<Ticket> ChildTickets()
		{
			return this.ChildTickets(null, null);
		}
		public CachedSqlSelect<Ticket> ChildTickets(Q where)
		{
			return this.ChildTickets(where, null);
		}
		public CachedSqlSelect<Ticket> ChildTickets(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildTickets(null, orderBy);
		}
		public CachedSqlSelect<Ticket> ChildTickets(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<Ticket>
			(
				new Children<Ticket>
				(
					TablesEnum.Domain, 
					this.K, 
					TablesEnum.Ticket, 
					dr => 
					{ 
						Ticket newTicket = new Ticket(); 
						newTicket.Initialise(dr); 
						return newTicket;
					},
					"117368D6",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<Visit> ChildVisits()
		{
			return this.ChildVisits(null, null);
		}
		public CachedSqlSelect<Visit> ChildVisits(Q where)
		{
			return this.ChildVisits(where, null);
		}
		public CachedSqlSelect<Visit> ChildVisits(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildVisits(null, orderBy);
		}
		public CachedSqlSelect<Visit> ChildVisits(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<Visit>
			(
				new Children<Visit>
				(
					TablesEnum.Domain, 
					this.K, 
					TablesEnum.Visit, 
					dr => 
					{ 
						Visit newVisit = new Visit(); 
						newVisit.Initialise(dr); 
						return newVisit;
					},
					"89BFB233",
					where,
					orderBy
				)
			);
		}
		}

	#region DomainDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region DomainDataHolder
	/// <summary>
	/// Domains that redirect to DSIDataHolder
	/// </summary>
	[Serializable]
	public partial class DomainDataHolder : DataHolder<Domain>
	{
		Domain dataHolder;
		[NonSerializedAttribute] Domain bob;

		public DomainDataHolder()
		{
			this.dataHolder = new Domain();
		}
		
		void CopyValues(Domain source, Domain destination)
		{
			destination[Bobs.Domain.Columns.K] = source[Bobs.Domain.Columns.K];
			destination[Bobs.Domain.Columns.DomainName] = source[Bobs.Domain.Columns.DomainName];
			destination[Bobs.Domain.Columns.PromoterK] = source[Bobs.Domain.Columns.PromoterK];
			destination[Bobs.Domain.Columns.RedirectObjectType] = source[Bobs.Domain.Columns.RedirectObjectType];
			destination[Bobs.Domain.Columns.RedirectObjectK] = source[Bobs.Domain.Columns.RedirectObjectK];
			destination[Bobs.Domain.Columns.RedirectUrl] = source[Bobs.Domain.Columns.RedirectUrl];
			destination[Bobs.Domain.Columns.RedirectApp] = source[Bobs.Domain.Columns.RedirectApp];
			destination[Bobs.Domain.Columns.WwdResourceID] = source[Bobs.Domain.Columns.WwdResourceID];
			destination[Bobs.Domain.Columns.RegisteredPrimary] = source[Bobs.Domain.Columns.RegisteredPrimary];
			destination[Bobs.Domain.Columns.RegisteredSecondary] = source[Bobs.Domain.Columns.RegisteredSecondary];
		}
		
		public DomainDataHolder(Domain bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// Unique Id
		/// </summary>
		public int K
		{
			get { return dataHolder.K; }
			set { this.dataHolder.K = value; }
		}
		/// <summary>
		/// Domain name
		/// </summary>
		public string DomainName
		{
			get { return dataHolder.DomainName; }
			set { this.dataHolder.DomainName = value; }
		}
		/// <summary>
		/// Link to the promoter table
		/// </summary>
		public int PromoterK
		{
			get { return dataHolder.PromoterK; }
			set { this.dataHolder.PromoterK = value; }
		}
		/// <summary>
		/// Redirect to object page - type
		/// </summary>
		public int RedirectObjectType
		{
			get { return dataHolder.RedirectObjectType; }
			set { this.dataHolder.RedirectObjectType = value; }
		}
		/// <summary>
		/// Redirect to object - K
		/// </summary>
		public int RedirectObjectK
		{
			get { return dataHolder.RedirectObjectK; }
			set { this.dataHolder.RedirectObjectK = value; }
		}
		/// <summary>
		/// Redirect to custom URL
		/// </summary>
		public string RedirectUrl
		{
			get { return dataHolder.RedirectUrl; }
			set { this.dataHolder.RedirectUrl = value; }
		}
		/// <summary>
		/// Site Application to invoke, in combination with RedirectObjectK and RedirectObjectType where relevant
		/// </summary>
		public string RedirectApp
		{
			get { return dataHolder.RedirectApp; }
			set { this.dataHolder.RedirectApp = value; }
		}
		/// <summary>
		/// The resource ID of this domain when registered with Wild West Domains, useful for automated domain renewal
		/// </summary>
		public string WwdResourceID
		{
			get { return dataHolder.WwdResourceID; }
			set { this.dataHolder.WwdResourceID = value; }
		}
		/// <summary>
		/// Has this domain been registered in the Primary zone? (Extra)
		/// </summary>
		public bool RegisteredPrimary
		{
			get { return dataHolder.RegisteredPrimary; }
			set { this.dataHolder.RegisteredPrimary = value; }
		}
		/// <summary>
		/// Has this domain been registered in the Secondary zone? (Mace)
		/// </summary>
		public bool RegisteredSecondary
		{
			get { return dataHolder.RegisteredSecondary; }
			set { this.dataHolder.RegisteredSecondary = value; }
		}
		#endregion
		public Domain Domain
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new Domain(K);
					}
					else
					{
						bob = new Domain();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region DomainSet
	public partial class DomainSet : BobSet, IEnumerable<Domain>
	{
		public DomainSet(Query query) : base(query) { }

		public Domain this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new Domain(this);
					((Domain)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (Domain)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new DomainTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<Domain> ToList()
		{
			List<Domain> list = new List<Domain>();
			foreach (Domain item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<Domain> Members

		public new IEnumerator<Domain> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region DomainTableDef
	public class DomainTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "Domain";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "6F78DD45";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return Domain.GetColumnName((Domain.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.Domain;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return true;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return Domain.Columns.K;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			Domain.Columns c = (Domain.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case Domain.Columns.K: ColumnStore[i] = new ColumnDef(c, "K", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey | SqlColumnFlag.AutoNumber, null); break;
					case Domain.Columns.DomainName: ColumnStore[i] = new ColumnDef(c, "DomainName", SqlDbType.VarChar, 50, SqlColumnFlag.PrimaryKey, ""); break;
					case Domain.Columns.PromoterK: ColumnStore[i] = new ColumnDef(c, "PromoterK", SqlDbType.Int, 0); break;
					case Domain.Columns.RedirectObjectType: ColumnStore[i] = new ColumnDef(c, "RedirectObjectType", SqlDbType.Int, 0); break;
					case Domain.Columns.RedirectObjectK: ColumnStore[i] = new ColumnDef(c, "RedirectObjectK", SqlDbType.Int, 0); break;
					case Domain.Columns.RedirectUrl: ColumnStore[i] = new ColumnDef(c, "RedirectUrl", SqlDbType.VarChar, 200, ""); break;
					case Domain.Columns.RedirectApp: ColumnStore[i] = new ColumnDef(c, "RedirectApp", SqlDbType.VarChar, ""); break;
					case Domain.Columns.WwdResourceID: ColumnStore[i] = new ColumnDef(c, "WwdResourceID", SqlDbType.VarChar, ""); break;
					case Domain.Columns.RegisteredPrimary: ColumnStore[i] = new ColumnDef(c, "RegisteredPrimary", SqlDbType.Bit, false); break;
					case Domain.Columns.RegisteredSecondary: ColumnStore[i] = new ColumnDef(c, "RegisteredSecondary", SqlDbType.Bit, false); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(Domain.Columns.K);
						InitColumn(Domain.Columns.DomainName);
						InitColumn(Domain.Columns.PromoterK);
						InitColumn(Domain.Columns.RedirectObjectType);
						InitColumn(Domain.Columns.RedirectObjectK);
						InitColumn(Domain.Columns.RedirectUrl);
						InitColumn(Domain.Columns.RedirectApp);
						InitColumn(Domain.Columns.WwdResourceID);
						InitColumn(Domain.Columns.RegisteredPrimary);
						InitColumn(Domain.Columns.RegisteredSecondary);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region DomainStats
	/// <summary>
	/// Hits per day stats for the domain table
	/// </summary>
	public partial class DomainStats : Model.Entities.DomainStats, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// Link to the domain table
			/// </summary>
			DomainK = 0x00190001,
			/// <summary>
			/// Date for the stats
			/// </summary>
			Date = 0x00190002,
			/// <summary>
			/// Number of visitors in this day
			/// </summary>
			Hits = 0x00190003,
		}
		#endregion
		public static string GetColumnName(DomainStats.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case DomainStats.Columns.DomainK: return "DomainK";
						case DomainStats.Columns.Date: return "Date";
						case DomainStats.Columns.Hits: return "Hits";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(DomainStats.Columns columnEnum)
		{
			switch (columnEnum)
			{
							default: return false;
			}
		}


		#region Common
	 
		public DomainStats(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);}
		public DomainStats()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.DomainStats);
		}
		public DomainStats(BobSet bs)
		{
			this.Bob = new Bob(Bobs.Tables.Defs.DomainStats, bs);
		}
		public DomainStats(IBob Parent, object Column) : this()
		{
			this.Bob.GetBobFromParentSimple(Parent, Column, TablesEnum.DomainStats);
		}
		public DomainStats(int DomainK, DateTime Date) : this()
		{
			this.Bob.GetBobFromPrimaryKeyArray(new Q[] {new Q(DomainStats.Columns.DomainK,DomainK), new Q(DomainStats.Columns.Date,Date)});
		} 
		#endregion

	}
	#endregion
	#region DomainStatsTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region DomainStats
	/// <summary>
	/// Hits per day stats for the domain table
	/// </summary>
	[Serializable]
	public partial class DomainStats 
	{
		
		#region Simple members
		/// <summary>
		/// Link to the domain table
		/// </summary>
		public override int DomainK
		{
			get { return (int)this[DomainStats.Columns.DomainK]; }
			set { this[DomainStats.Columns.DomainK] = value; }
		}
		/// <summary>
		/// Date for the stats
		/// </summary>
		public override DateTime Date
		{
			get { return (DateTime)this[DomainStats.Columns.Date]; }
			set { this[DomainStats.Columns.Date] = value; }
		}
		/// <summary>
		/// Number of visitors in this day
		/// </summary>
		public override int Hits
		{
			get { return (int)this[DomainStats.Columns.Hits]; }
			set { this[DomainStats.Columns.Hits] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildDomainStatss
	{
		CachedSqlSelect<DomainStats> ChildDomainStatss();
		CachedSqlSelect<DomainStats> ChildDomainStatss(Q where);
		CachedSqlSelect<DomainStats> ChildDomainStatss(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<DomainStats> ChildDomainStatss(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class DomainStats 
		{
		}

	#region DomainStatsDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region DomainStatsDataHolder
	/// <summary>
	/// Hits per day stats for the domain tableDataHolder
	/// </summary>
	[Serializable]
	public partial class DomainStatsDataHolder : DataHolder<DomainStats>
	{
		DomainStats dataHolder;
		[NonSerializedAttribute] DomainStats bob;

		public DomainStatsDataHolder()
		{
			this.dataHolder = new DomainStats();
		}
		
		void CopyValues(DomainStats source, DomainStats destination)
		{
			destination[Bobs.DomainStats.Columns.DomainK] = source[Bobs.DomainStats.Columns.DomainK];
			destination[Bobs.DomainStats.Columns.Date] = source[Bobs.DomainStats.Columns.Date];
			destination[Bobs.DomainStats.Columns.Hits] = source[Bobs.DomainStats.Columns.Hits];
		}
		
		public DomainStatsDataHolder(DomainStats bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// Link to the domain table
		/// </summary>
		public int DomainK
		{
			get { return dataHolder.DomainK; }
			set { this.dataHolder.DomainK = value; }
		}
		/// <summary>
		/// Date for the stats
		/// </summary>
		public DateTime Date
		{
			get { return dataHolder.Date; }
			set { this.dataHolder.Date = value; }
		}
		/// <summary>
		/// Number of visitors in this day
		/// </summary>
		public int Hits
		{
			get { return dataHolder.Hits; }
			set { this.dataHolder.Hits = value; }
		}
		#endregion
		public DomainStats DomainStats
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new DomainStats(K);
					}
					else
					{
						bob = new DomainStats();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region DomainStatsSet
	public partial class DomainStatsSet : BobSet, IEnumerable<DomainStats>
	{
		public DomainStatsSet(Query query) : base(query) { }

		public DomainStats this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new DomainStats(this);
					((DomainStats)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (DomainStats)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new DomainStatsTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<DomainStats> ToList()
		{
			List<DomainStats> list = new List<DomainStats>();
			foreach (DomainStats item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<DomainStats> Members

		public new IEnumerator<DomainStats> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region DomainStatsTableDef
	public class DomainStatsTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "DomainStats";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "2E2E29B3";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return DomainStats.GetColumnName((DomainStats.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.DomainStats;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return false;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return null;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			DomainStats.Columns c = (DomainStats.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case DomainStats.Columns.DomainK: ColumnStore[i] = new ColumnDef(c, "DomainK", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey, 0); break;
					case DomainStats.Columns.Date: ColumnStore[i] = new ColumnDef(c, "Date", SqlDbType.DateTime, 16, SqlColumnFlag.PrimaryKey, DateTime.Parse("01/01/0001")); break;
					case DomainStats.Columns.Hits: ColumnStore[i] = new ColumnDef(c, "Hits", SqlDbType.Int, 0); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(DomainStats.Columns.DomainK);
						InitColumn(DomainStats.Columns.Date);
						InitColumn(DomainStats.Columns.Hits);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region DonationIcon
	/// <summary>
	/// Donation icons
	/// </summary>
	public partial class DonationIcon : Model.Entities.DonationIcon, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// K
			/// </summary>
			K = 0x001a0001,
			/// <summary>
			/// Name displayed on donation pages etc.
			/// </summary>
			IconName = 0x001a0002,
			/// <summary>
			/// Text displayed by Icon on Rollovers, etc.
			/// </summary>
			IconText = 0x001a0003,
			/// <summary>
			/// image path
			/// </summary>
			ImgUrl = 0x001a0004,
			/// <summary>
			/// Chat thread to discuss how much one loves one's donation icon
			/// </summary>
			ThreadK = 0x001a0005,
			/// <summary>
			/// Date and time when this icon becomes the Active icon
			/// </summary>
			StartDateTime = 0x001a0006,
			/// <summary>
			/// Price if bought while icon is active
			/// </summary>
			PriceWhenActive = 0x001a0007,
			/// <summary>
			/// Price if bought once icon is retroactive
			/// </summary>
			PriceWhenRetroactive = 0x001a0008,
			/// <summary>
			/// Donate page - which control layout to use
			/// </summary>
			DonatePageControl = 0x001a0009,
			/// <summary>
			/// Donate page Header
			/// </summary>
			DonatePageHeader = 0x001a000a,
			/// <summary>
			/// Donate page center text
			/// </summary>
			DonatePageCenterText = 0x001a000b,
			/// <summary>
			/// Donate page line 1 text
			/// </summary>
			DonatePageLine1Text = 0x001a000c,
			/// <summary>
			/// Donate page line 2 text
			/// </summary>
			DonatePageLine2Text = 0x001a000d,
			/// <summary>
			/// Is this DonationIcon ready to go live from the StartDate?
			/// </summary>
			Enabled = 0x001a000e,
			/// <summary>
			/// Storage GUID for icon, if applicable
			/// </summary>
			ImgGuid = 0x001a000f,
			/// <summary>
			/// Image extension for icon, if applicable
			/// </summary>
			ImgExtension = 0x001a0010,
			/// <summary>
			/// Is this icon a vatable item?
			/// </summary>
			Vatable = 0x001a0011,
			/// <summary>
			/// Not used
			/// </summary>
			Description = 0x001a0012,
			/// <summary>
			/// Is this icon a charity donation?
			/// </summary>
			Charity = 0x001a0013,
		}
		#endregion
		public static string GetColumnName(DonationIcon.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case DonationIcon.Columns.K: return "K";
						case DonationIcon.Columns.IconName: return "IconName";
						case DonationIcon.Columns.IconText: return "IconText";
						case DonationIcon.Columns.ImgUrl: return "ImgUrl";
						case DonationIcon.Columns.ThreadK: return "ThreadK";
						case DonationIcon.Columns.StartDateTime: return "StartDateTime";
						case DonationIcon.Columns.PriceWhenActive: return "PriceWhenActive";
						case DonationIcon.Columns.PriceWhenRetroactive: return "PriceWhenRetroactive";
						case DonationIcon.Columns.DonatePageControl: return "DonatePageControl";
						case DonationIcon.Columns.DonatePageHeader: return "DonatePageHeader";
						case DonationIcon.Columns.DonatePageCenterText: return "DonatePageCenterText";
						case DonationIcon.Columns.DonatePageLine1Text: return "DonatePageLine1Text";
						case DonationIcon.Columns.DonatePageLine2Text: return "DonatePageLine2Text";
						case DonationIcon.Columns.Enabled: return "Enabled";
						case DonationIcon.Columns.ImgGuid: return "ImgGuid";
						case DonationIcon.Columns.ImgExtension: return "ImgExtension";
						case DonationIcon.Columns.Vatable: return "Vatable";
						case DonationIcon.Columns.Description: return "Description";
						case DonationIcon.Columns.Charity: return "Charity";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(DonationIcon.Columns columnEnum)
		{
			switch (columnEnum)
			{
																							default: return false;
			}
		}


		#region Common
 
		public DonationIcon(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);  }
		public DonationIcon()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.DonationIcon);
		}
		public DonationIcon(BobSet bs)
		{
			this.Bob = new Bob(bs.Table, bs);
		}
		public DonationIcon(int DonationIconK, IBob Parent, object Column)
			: this()
		{
			Bob.GetBobFromParent(DonationIconK, Parent.Bob, Column, TablesEnum.DonationIcon);
		}
		public DonationIcon(int DonationIconK)
			: this()
		{
			Bob.GetBobFromPrimaryKey(DonationIconK);
		}
		#endregion

	}
	#endregion
	#region DonationIconTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region DonationIcon
	/// <summary>
	/// Donation icons
	/// </summary>
	[Serializable]
	public partial class DonationIcon 
	{
		
		#region Simple members
		/// <summary>
		/// K
		/// </summary>
		public override int K
		{
			get { return (int)this[DonationIcon.Columns.K] as int? ?? 0 ; }
			set { this[DonationIcon.Columns.K] = value; }
		}
		/// <summary>
		/// Name displayed on donation pages etc.
		/// </summary>
		public override string IconName
		{
			get { return (string)this[DonationIcon.Columns.IconName]; }
			set { this[DonationIcon.Columns.IconName] = value; }
		}
		/// <summary>
		/// Text displayed by Icon on Rollovers, etc.
		/// </summary>
		public override string IconText
		{
			get { return (string)this[DonationIcon.Columns.IconText]; }
			set { this[DonationIcon.Columns.IconText] = value; }
		}
		/// <summary>
		/// image path
		/// </summary>
		public override string ImgUrl
		{
			get { return (string)this[DonationIcon.Columns.ImgUrl]; }
			set { this[DonationIcon.Columns.ImgUrl] = value; }
		}
		/// <summary>
		/// Chat thread to discuss how much one loves one's donation icon
		/// </summary>
		public override int ThreadK
		{
			get { return (int)this[DonationIcon.Columns.ThreadK]; }
			set { this[DonationIcon.Columns.ThreadK] = value; }
		}
		/// <summary>
		/// Date and time when this icon becomes the Active icon
		/// </summary>
		public override DateTime StartDateTime
		{
			get { return (DateTime)this[DonationIcon.Columns.StartDateTime]; }
			set { this[DonationIcon.Columns.StartDateTime] = value; }
		}
		/// <summary>
		/// Price if bought while icon is active
		/// </summary>
		public override decimal PriceWhenActive
		{
			get { return (decimal)this[DonationIcon.Columns.PriceWhenActive]; }
			set { this[DonationIcon.Columns.PriceWhenActive] = value; }
		}
		/// <summary>
		/// Price if bought once icon is retroactive
		/// </summary>
		public override decimal PriceWhenRetroactive
		{
			get { return (decimal)this[DonationIcon.Columns.PriceWhenRetroactive]; }
			set { this[DonationIcon.Columns.PriceWhenRetroactive] = value; }
		}
		/// <summary>
		/// Donate page - which control layout to use
		/// </summary>
		public override int DonatePageControl
		{
			get { return (int)this[DonationIcon.Columns.DonatePageControl]; }
			set { this[DonationIcon.Columns.DonatePageControl] = value; }
		}
		/// <summary>
		/// Donate page Header
		/// </summary>
		public override string DonatePageHeader
		{
			get { return (string)this[DonationIcon.Columns.DonatePageHeader]; }
			set { this[DonationIcon.Columns.DonatePageHeader] = value; }
		}
		/// <summary>
		/// Donate page center text
		/// </summary>
		public override string DonatePageCenterText
		{
			get { return (string)this[DonationIcon.Columns.DonatePageCenterText]; }
			set { this[DonationIcon.Columns.DonatePageCenterText] = value; }
		}
		/// <summary>
		/// Donate page line 1 text
		/// </summary>
		public override string DonatePageLine1Text
		{
			get { return (string)this[DonationIcon.Columns.DonatePageLine1Text]; }
			set { this[DonationIcon.Columns.DonatePageLine1Text] = value; }
		}
		/// <summary>
		/// Donate page line 2 text
		/// </summary>
		public override string DonatePageLine2Text
		{
			get { return (string)this[DonationIcon.Columns.DonatePageLine2Text]; }
			set { this[DonationIcon.Columns.DonatePageLine2Text] = value; }
		}
		/// <summary>
		/// Is this DonationIcon ready to go live from the StartDate?
		/// </summary>
		public override bool Enabled
		{
			get { return (bool)this[DonationIcon.Columns.Enabled]; }
			set { this[DonationIcon.Columns.Enabled] = value; }
		}
		/// <summary>
		/// Storage GUID for icon, if applicable
		/// </summary>
		public override Guid? ImgGuid
		{
			get { return (Guid?)this[DonationIcon.Columns.ImgGuid]; }
			set { this[DonationIcon.Columns.ImgGuid] = value; }
		}
		/// <summary>
		/// Image extension for icon, if applicable
		/// </summary>
		public override string ImgExtension
		{
			get { return (string)this[DonationIcon.Columns.ImgExtension]; }
			set { this[DonationIcon.Columns.ImgExtension] = value; }
		}
		/// <summary>
		/// Is this icon a vatable item?
		/// </summary>
		public override bool? Vatable
		{
			get { return (bool?)this[DonationIcon.Columns.Vatable]; }
			set { this[DonationIcon.Columns.Vatable] = value; }
		}
		/// <summary>
		/// Not used
		/// </summary>
		public override string Description
		{
			get { return (string)this[DonationIcon.Columns.Description]; }
			set { this[DonationIcon.Columns.Description] = value; }
		}
		/// <summary>
		/// Is this icon a charity donation?
		/// </summary>
		public override bool Charity
		{
			get { return (bool)this[DonationIcon.Columns.Charity]; }
			set { this[DonationIcon.Columns.Charity] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildDonationIcons
	{
		CachedSqlSelect<DonationIcon> ChildDonationIcons();
		CachedSqlSelect<DonationIcon> ChildDonationIcons(Q where);
		CachedSqlSelect<DonationIcon> ChildDonationIcons(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<DonationIcon> ChildDonationIcons(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class DonationIcon 
	 : 
	Bobs.ChildInterfaces.IHasChildUsrDonationIcons
		{
			public CachedSqlSelect<UsrDonationIcon> ChildUsrDonationIcons()
		{
			return this.ChildUsrDonationIcons(null, null);
		}
		public CachedSqlSelect<UsrDonationIcon> ChildUsrDonationIcons(Q where)
		{
			return this.ChildUsrDonationIcons(where, null);
		}
		public CachedSqlSelect<UsrDonationIcon> ChildUsrDonationIcons(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildUsrDonationIcons(null, orderBy);
		}
		public CachedSqlSelect<UsrDonationIcon> ChildUsrDonationIcons(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<UsrDonationIcon>
			(
				new Children<UsrDonationIcon>
				(
					TablesEnum.DonationIcon, 
					this.K, 
					TablesEnum.UsrDonationIcon, 
					dr => 
					{ 
						UsrDonationIcon newUsrDonationIcon = new UsrDonationIcon(); 
						newUsrDonationIcon.Initialise(dr); 
						return newUsrDonationIcon;
					},
					"324FC462",
					where,
					orderBy
				)
			);
		}
		}

	#region DonationIconDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region DonationIconDataHolder
	/// <summary>
	/// Donation iconsDataHolder
	/// </summary>
	[Serializable]
	public partial class DonationIconDataHolder : DataHolder<DonationIcon>
	{
		DonationIcon dataHolder;
		[NonSerializedAttribute] DonationIcon bob;

		public DonationIconDataHolder()
		{
			this.dataHolder = new DonationIcon();
		}
		
		void CopyValues(DonationIcon source, DonationIcon destination)
		{
			destination[Bobs.DonationIcon.Columns.K] = source[Bobs.DonationIcon.Columns.K];
			destination[Bobs.DonationIcon.Columns.IconName] = source[Bobs.DonationIcon.Columns.IconName];
			destination[Bobs.DonationIcon.Columns.IconText] = source[Bobs.DonationIcon.Columns.IconText];
			destination[Bobs.DonationIcon.Columns.ImgUrl] = source[Bobs.DonationIcon.Columns.ImgUrl];
			destination[Bobs.DonationIcon.Columns.ThreadK] = source[Bobs.DonationIcon.Columns.ThreadK];
			destination[Bobs.DonationIcon.Columns.StartDateTime] = source[Bobs.DonationIcon.Columns.StartDateTime];
			destination[Bobs.DonationIcon.Columns.PriceWhenActive] = source[Bobs.DonationIcon.Columns.PriceWhenActive];
			destination[Bobs.DonationIcon.Columns.PriceWhenRetroactive] = source[Bobs.DonationIcon.Columns.PriceWhenRetroactive];
			destination[Bobs.DonationIcon.Columns.DonatePageControl] = source[Bobs.DonationIcon.Columns.DonatePageControl];
			destination[Bobs.DonationIcon.Columns.DonatePageHeader] = source[Bobs.DonationIcon.Columns.DonatePageHeader];
			destination[Bobs.DonationIcon.Columns.DonatePageCenterText] = source[Bobs.DonationIcon.Columns.DonatePageCenterText];
			destination[Bobs.DonationIcon.Columns.DonatePageLine1Text] = source[Bobs.DonationIcon.Columns.DonatePageLine1Text];
			destination[Bobs.DonationIcon.Columns.DonatePageLine2Text] = source[Bobs.DonationIcon.Columns.DonatePageLine2Text];
			destination[Bobs.DonationIcon.Columns.Enabled] = source[Bobs.DonationIcon.Columns.Enabled];
			destination[Bobs.DonationIcon.Columns.ImgGuid] = source[Bobs.DonationIcon.Columns.ImgGuid];
			destination[Bobs.DonationIcon.Columns.ImgExtension] = source[Bobs.DonationIcon.Columns.ImgExtension];
			destination[Bobs.DonationIcon.Columns.Vatable] = source[Bobs.DonationIcon.Columns.Vatable];
			destination[Bobs.DonationIcon.Columns.Description] = source[Bobs.DonationIcon.Columns.Description];
			destination[Bobs.DonationIcon.Columns.Charity] = source[Bobs.DonationIcon.Columns.Charity];
		}
		
		public DonationIconDataHolder(DonationIcon bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// K
		/// </summary>
		public int K
		{
			get { return dataHolder.K; }
			set { this.dataHolder.K = value; }
		}
		/// <summary>
		/// Name displayed on donation pages etc.
		/// </summary>
		public string IconName
		{
			get { return dataHolder.IconName; }
			set { this.dataHolder.IconName = value; }
		}
		/// <summary>
		/// Text displayed by Icon on Rollovers, etc.
		/// </summary>
		public string IconText
		{
			get { return dataHolder.IconText; }
			set { this.dataHolder.IconText = value; }
		}
		/// <summary>
		/// image path
		/// </summary>
		public string ImgUrl
		{
			get { return dataHolder.ImgUrl; }
			set { this.dataHolder.ImgUrl = value; }
		}
		/// <summary>
		/// Chat thread to discuss how much one loves one's donation icon
		/// </summary>
		public int ThreadK
		{
			get { return dataHolder.ThreadK; }
			set { this.dataHolder.ThreadK = value; }
		}
		/// <summary>
		/// Date and time when this icon becomes the Active icon
		/// </summary>
		public DateTime StartDateTime
		{
			get { return dataHolder.StartDateTime; }
			set { this.dataHolder.StartDateTime = value; }
		}
		/// <summary>
		/// Price if bought while icon is active
		/// </summary>
		public decimal PriceWhenActive
		{
			get { return dataHolder.PriceWhenActive; }
			set { this.dataHolder.PriceWhenActive = value; }
		}
		/// <summary>
		/// Price if bought once icon is retroactive
		/// </summary>
		public decimal PriceWhenRetroactive
		{
			get { return dataHolder.PriceWhenRetroactive; }
			set { this.dataHolder.PriceWhenRetroactive = value; }
		}
		/// <summary>
		/// Donate page - which control layout to use
		/// </summary>
		public int DonatePageControl
		{
			get { return dataHolder.DonatePageControl; }
			set { this.dataHolder.DonatePageControl = value; }
		}
		/// <summary>
		/// Donate page Header
		/// </summary>
		public string DonatePageHeader
		{
			get { return dataHolder.DonatePageHeader; }
			set { this.dataHolder.DonatePageHeader = value; }
		}
		/// <summary>
		/// Donate page center text
		/// </summary>
		public string DonatePageCenterText
		{
			get { return dataHolder.DonatePageCenterText; }
			set { this.dataHolder.DonatePageCenterText = value; }
		}
		/// <summary>
		/// Donate page line 1 text
		/// </summary>
		public string DonatePageLine1Text
		{
			get { return dataHolder.DonatePageLine1Text; }
			set { this.dataHolder.DonatePageLine1Text = value; }
		}
		/// <summary>
		/// Donate page line 2 text
		/// </summary>
		public string DonatePageLine2Text
		{
			get { return dataHolder.DonatePageLine2Text; }
			set { this.dataHolder.DonatePageLine2Text = value; }
		}
		/// <summary>
		/// Is this DonationIcon ready to go live from the StartDate?
		/// </summary>
		public bool Enabled
		{
			get { return dataHolder.Enabled; }
			set { this.dataHolder.Enabled = value; }
		}
		/// <summary>
		/// Storage GUID for icon, if applicable
		/// </summary>
		public Guid? ImgGuid
		{
			get { return dataHolder.ImgGuid; }
			set { this.dataHolder.ImgGuid = value; }
		}
		/// <summary>
		/// Image extension for icon, if applicable
		/// </summary>
		public string ImgExtension
		{
			get { return dataHolder.ImgExtension; }
			set { this.dataHolder.ImgExtension = value; }
		}
		/// <summary>
		/// Is this icon a vatable item?
		/// </summary>
		public bool? Vatable
		{
			get { return dataHolder.Vatable; }
			set { this.dataHolder.Vatable = value; }
		}
		/// <summary>
		/// Not used
		/// </summary>
		public string Description
		{
			get { return dataHolder.Description; }
			set { this.dataHolder.Description = value; }
		}
		/// <summary>
		/// Is this icon a charity donation?
		/// </summary>
		public bool Charity
		{
			get { return dataHolder.Charity; }
			set { this.dataHolder.Charity = value; }
		}
		#endregion
		public DonationIcon DonationIcon
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new DonationIcon(K);
					}
					else
					{
						bob = new DonationIcon();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region DonationIconSet
	public partial class DonationIconSet : BobSet, IEnumerable<DonationIcon>
	{
		public DonationIconSet(Query query) : base(query) { }

		public DonationIcon this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new DonationIcon(this);
					((DonationIcon)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (DonationIcon)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new DonationIconTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<DonationIcon> ToList()
		{
			List<DonationIcon> list = new List<DonationIcon>();
			foreach (DonationIcon item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<DonationIcon> Members

		public new IEnumerator<DonationIcon> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region DonationIconTableDef
	public class DonationIconTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "DonationIcon";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "DCDBA406";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return DonationIcon.GetColumnName((DonationIcon.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.DonationIcon;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return true;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return DonationIcon.Columns.K;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			DonationIcon.Columns c = (DonationIcon.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case DonationIcon.Columns.K: ColumnStore[i] = new ColumnDef(c, "K", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey | SqlColumnFlag.AutoNumber, null); break;
					case DonationIcon.Columns.IconName: ColumnStore[i] = new ColumnDef(c, "IconName", SqlDbType.VarChar, null); break;
					case DonationIcon.Columns.IconText: ColumnStore[i] = new ColumnDef(c, "IconText", SqlDbType.VarChar, null); break;
					case DonationIcon.Columns.ImgUrl: ColumnStore[i] = new ColumnDef(c, "ImgUrl", SqlDbType.VarChar, 2147483647, null); break;
					case DonationIcon.Columns.ThreadK: ColumnStore[i] = new ColumnDef(c, "ThreadK", SqlDbType.Int, null); break;
					case DonationIcon.Columns.StartDateTime: ColumnStore[i] = new ColumnDef(c, "StartDateTime", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case DonationIcon.Columns.PriceWhenActive: ColumnStore[i] = new ColumnDef(c, "PriceWhenActive", SqlDbType.Decimal, 20, null); break;
					case DonationIcon.Columns.PriceWhenRetroactive: ColumnStore[i] = new ColumnDef(c, "PriceWhenRetroactive", SqlDbType.Decimal, 20, null); break;
					case DonationIcon.Columns.DonatePageControl: ColumnStore[i] = new ColumnDef(c, "DonatePageControl", SqlDbType.Int, null); break;
					case DonationIcon.Columns.DonatePageHeader: ColumnStore[i] = new ColumnDef(c, "DonatePageHeader", SqlDbType.VarChar, 2147483647, null); break;
					case DonationIcon.Columns.DonatePageCenterText: ColumnStore[i] = new ColumnDef(c, "DonatePageCenterText", SqlDbType.VarChar, 2147483647, null); break;
					case DonationIcon.Columns.DonatePageLine1Text: ColumnStore[i] = new ColumnDef(c, "DonatePageLine1Text", SqlDbType.VarChar, 2147483647, null); break;
					case DonationIcon.Columns.DonatePageLine2Text: ColumnStore[i] = new ColumnDef(c, "DonatePageLine2Text", SqlDbType.VarChar, 2147483647, null); break;
					case DonationIcon.Columns.Enabled: ColumnStore[i] = new ColumnDef(c, "Enabled", SqlDbType.Bit, false); break;
					case DonationIcon.Columns.ImgGuid: ColumnStore[i] = new ColumnDef(c, "ImgGuid", SqlDbType.UniqueIdentifier, null); break;
					case DonationIcon.Columns.ImgExtension: ColumnStore[i] = new ColumnDef(c, "ImgExtension", SqlDbType.VarChar, 4, null); break;
					case DonationIcon.Columns.Vatable: ColumnStore[i] = new ColumnDef(c, "Vatable", SqlDbType.Bit, null); break;
					case DonationIcon.Columns.Description: ColumnStore[i] = new ColumnDef(c, "Description", SqlDbType.Text, null); break;
					case DonationIcon.Columns.Charity: ColumnStore[i] = new ColumnDef(c, "Charity", SqlDbType.Bit, false); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(DonationIcon.Columns.K);
						InitColumn(DonationIcon.Columns.IconName);
						InitColumn(DonationIcon.Columns.IconText);
						InitColumn(DonationIcon.Columns.ImgUrl);
						InitColumn(DonationIcon.Columns.ThreadK);
						InitColumn(DonationIcon.Columns.StartDateTime);
						InitColumn(DonationIcon.Columns.PriceWhenActive);
						InitColumn(DonationIcon.Columns.PriceWhenRetroactive);
						InitColumn(DonationIcon.Columns.DonatePageControl);
						InitColumn(DonationIcon.Columns.DonatePageHeader);
						InitColumn(DonationIcon.Columns.DonatePageCenterText);
						InitColumn(DonationIcon.Columns.DonatePageLine1Text);
						InitColumn(DonationIcon.Columns.DonatePageLine2Text);
						InitColumn(DonationIcon.Columns.Enabled);
						InitColumn(DonationIcon.Columns.ImgGuid);
						InitColumn(DonationIcon.Columns.ImgExtension);
						InitColumn(DonationIcon.Columns.Vatable);
						InitColumn(DonationIcon.Columns.Description);
						InitColumn(DonationIcon.Columns.Charity);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region Event
	/// <summary>
	/// One single event
	/// </summary>
	public partial class Event : Model.Entities.Event, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// The primary key
			/// </summary>
			K = 0x001b0001,
			/// <summary>
			/// Name of the event
			/// </summary>
			Name = 0x001b0002,
			/// <summary>
			/// All the details about the event for summary boxes
			/// </summary>
			ShortDetailsHtml = 0x001b0003,
			/// <summary>
			/// All the details about the event main event page
			/// </summary>
			LongDetailsHtml = 0x001b0004,
			/// <summary>
			/// Is the longDetails plain html? - e.g. rendered outsite the yellow box?
			/// </summary>
			LongDetailsPlain = 0x001b0005,
			/// <summary>
			/// Cropped image between 75*75 and 100*100
			/// </summary>
			Pic = 0x001b0006,
			/// <summary>
			/// Date that the event takes place
			/// </summary>
			DateTime = 0x001b0007,
			/// <summary>
			/// Link to one Venue
			/// </summary>
			VenueK = 0x001b0008,
			/// <summary>
			/// Note for admins only
			/// </summary>
			AdminNote = 0x001b0009,
			/// <summary>
			/// Capacity of the event (max number of people that can attent)
			/// </summary>
			Capacity = 0x001b000a,
			/// <summary>
			/// The user that added this event (0 if added by admin)
			/// </summary>
			OwnerUsrK = 0x001b000b,
			/// <summary>
			/// If the owner wants to upload another image after the this has been enabled, it is stored here
			/// </summary>
			PicNew = 0x001b000c,
			/// <summary>
			/// The total number of comments
			/// </summary>
			TotalComments = 0x001b000d,
			/// <summary>
			/// The date/time of the last post that was posted in this board (including child objects)
			/// </summary>
			LastPost = 0x001b000e,
			/// <summary>
			/// The average date.time of all comments posted in this board (including child objects)
			/// </summary>
			AverageCommentDateTime = 0x001b000f,
			/// <summary>
			/// Total number of photos in the event (live + disabled + new)
			/// </summary>
			TotalPhotos = 0x001b0010,
			/// <summary>
			/// The number of live photos on this event
			/// </summary>
			LivePhotos = 0x001b0011,
			/// <summary>
			/// When was the event added to the system?
			/// </summary>
			AddedDateTime = 0x001b0012,
			/// <summary>
			/// Does the event have a guestlist?
			/// </summary>
			HasGuestlist = 0x001b0013,
			/// <summary>
			/// DateTime that the last photo was made live
			/// </summary>
			LastLivePhoto = 0x001b0014,
			/// <summary>
			/// Does the event have a spotter?
			/// </summary>
			HasSpotter = 0x001b0015,
			/// <summary>
			/// Whether the guestlist is running - the event owner can disable it when they want it closed
			/// </summary>
			GuestlistOpen = 0x001b0016,
			/// <summary>
			/// Once this is set to true, the owner can't open the list again - they've been billed.
			/// </summary>
			GuestlistFinished = 0x001b0017,
			/// <summary>
			/// Limit the total number of people on the guestlist?
			/// </summary>
			GuestlistLimit = 0x001b0018,
			/// <summary>
			/// Total number of people currently on the list
			/// </summary>
			GuestlistCount = 0x001b0019,
			/// <summary>
			/// Html details about the guestlist
			/// </summary>
			GuestlistDetails = 0x001b001a,
			/// <summary>
			/// Promoter that controls this guestlist
			/// </summary>
			GuestlistPromoterK = 0x001b001b,
			/// <summary>
			/// Regular (non-guestlist) price
			/// </summary>
			GuestlistRegularPrice = 0x001b001c,
			/// <summary>
			/// Reduced guestlist price
			/// </summary>
			GuestlistPrice = 0x001b001d,
			/// <summary>
			/// Is the guestlist promoted on the front page of the site?
			/// </summary>
			GuestlistPromotion = 0x001b001e,
			/// <summary>
			/// When is the event? Morning, Daytime or Evening?
			/// </summary>
			StartTime = 0x001b001f,
			/// <summary>
			/// The email address of the admin contact for sorting spoters with guestlists
			/// </summary>
			AdminEmail = 0x001b0020,
			/// <summary>
			/// Donated - highlight the event, and give it a duck
			/// </summary>
			Donated = 0x001b0021,
			/// <summary>
			/// Is the description text or html?
			/// </summary>
			IsDescriptionText = 0x001b0022,
			/// <summary>
			/// Has the event been seen by an admin or not?
			/// </summary>
			IsNew = 0x001b0023,
			/// <summary>
			/// Should the description just have "\n" replaced with "&lt;br&gt;"? (This overrides IsDescriptionText)
			/// </summary>
			IsDescriptionCleanHtml = 0x001b0024,
			/// <summary>
			/// Has the event been recently edited?
			/// </summary>
			IsEdited = 0x001b0025,
			/// <summary>
			/// Guid used to ensure duplicate events don't get posted if the user refreshes the page after saving.
			/// </summary>
			DuplicateGuid = 0x001b0026,
			/// <summary>
			/// State var used to reconstruct cropper when re-cropping
			/// </summary>
			PicState = 0x001b0027,
			/// <summary>
			/// The Photo that was used to create the Pic.
			/// </summary>
			PicPhotoK = 0x001b0028,
			/// <summary>
			/// The Misc that was used to create the Pic.
			/// </summary>
			PicMiscK = 0x001b0029,
			/// <summary>
			/// The url fragment - so that the url can be generated without accessing parent database records
			/// </summary>
			UrlFragment = 0x001b002a,
			/// <summary>
			/// Music types, comma seperated
			/// </summary>
			MusicTypesString = 0x001b002b,
			/// <summary>
			/// The moderator that has been assigned to moderate this event
			/// </summary>
			ModeratorUsrK = 0x001b002c,
			/// <summary>
			/// Time stamp to record when someone is trying to purchase an IBuyable item that is linked to this Bob. No lock = DateTime.MinValue
			/// </summary>
			BuyableLockDateTime = 0x001b002d,
			/// <summary>
			/// Are tickets currently available for this event? (Updated hourly)
			/// </summary>
			IsTicketsAvailable = 0x001b002e,
			/// <summary>
			/// How hot are the tickets (Tickets sold in the last 48 hrs x booking fee)
			/// </summary>
			TicketHeat = 0x001b002f,
			/// <summary>
			/// Shall we display this event with a hilight?
			/// </summary>
			HasHilight = 0x001b0030,
			/// <summary>
			/// Number of our members signed up as going
			/// </summary>
			UsrAttendCount = 0x001b0031,
			/// <summary>
			/// Admin override to fix discount level for price of credits for this event donation
			/// </summary>
			FixedDiscount = 0x001b0032,
			/// <summary>
			/// Flag to indicate if price is fixed and if to use FixedDiscount
			/// </summary>
			IsPriceFixed = 0x001b0033,
			/// <summary>
			/// Latitude
			/// </summary>
			Lat = 0x001b0034,
			/// <summary>
			/// Longitude
			/// </summary>
			Lon = 0x001b0035,
			/// <summary>
			/// database-calculated HtmID based on Lat/Lon
			/// </summary>
			HtmId = 0x001b0036,
			/// <summary>
			/// Exclude this event from showing "Find Hotel" banners etc
			/// </summary>
			DontShowHotelLink = 0x001b0037,
			/// <summary>
			/// Display the spotter request panel?
			/// </summary>
			SpotterRequest = 0x001b0038,
			/// <summary>
			/// Name for spotter request panel
			/// </summary>
			SpotterRequestName = 0x001b0039,
			/// <summary>
			/// Number for spotter request panel
			/// </summary>
			SpotterRequestNumber = 0x001b003a,
			/// <summary>
			/// Facebook event id
			/// </summary>
			FacebookEventId = 0x001b003b,
		}
		#endregion
		public static string GetColumnName(Event.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case Event.Columns.K: return "K";
						case Event.Columns.Name: return "Name";
						case Event.Columns.ShortDetailsHtml: return "ShortDetailsHtml";
						case Event.Columns.LongDetailsHtml: return "LongDetailsHtml";
						case Event.Columns.LongDetailsPlain: return "LongDetailsPlain";
						case Event.Columns.Pic: return "Pic";
						case Event.Columns.DateTime: return "DateTime";
						case Event.Columns.VenueK: return "VenueK";
						case Event.Columns.AdminNote: return "AdminNote";
						case Event.Columns.Capacity: return "Capacity";
						case Event.Columns.OwnerUsrK: return "OwnerUsrK";
						case Event.Columns.PicNew: return "PicNew";
						case Event.Columns.TotalComments: return "TotalComments";
						case Event.Columns.LastPost: return "LastPost";
						case Event.Columns.AverageCommentDateTime: return "AverageCommentDateTime";
						case Event.Columns.TotalPhotos: return "TotalPhotos";
						case Event.Columns.LivePhotos: return "LivePhotos";
						case Event.Columns.AddedDateTime: return "AddedDateTime";
						case Event.Columns.HasGuestlist: return "HasGuestlist";
						case Event.Columns.LastLivePhoto: return "LastLivePhoto";
						case Event.Columns.HasSpotter: return "HasSpotter";
						case Event.Columns.GuestlistOpen: return "GuestlistOpen";
						case Event.Columns.GuestlistFinished: return "GuestlistFinished";
						case Event.Columns.GuestlistLimit: return "GuestlistLimit";
						case Event.Columns.GuestlistCount: return "GuestlistCount";
						case Event.Columns.GuestlistDetails: return "GuestlistDetails";
						case Event.Columns.GuestlistPromoterK: return "GuestlistPromoterK";
						case Event.Columns.GuestlistRegularPrice: return "GuestlistRegularPrice";
						case Event.Columns.GuestlistPrice: return "GuestlistPrice";
						case Event.Columns.GuestlistPromotion: return "GuestlistPromotion";
						case Event.Columns.StartTime: return "StartTime";
						case Event.Columns.AdminEmail: return "AdminEmail";
						case Event.Columns.Donated: return "Donated";
						case Event.Columns.IsDescriptionText: return "IsDescriptionText";
						case Event.Columns.IsNew: return "IsNew";
						case Event.Columns.IsDescriptionCleanHtml: return "IsDescriptionCleanHtml";
						case Event.Columns.IsEdited: return "IsEdited";
						case Event.Columns.DuplicateGuid: return "DuplicateGuid";
						case Event.Columns.PicState: return "PicState";
						case Event.Columns.PicPhotoK: return "PicPhotoK";
						case Event.Columns.PicMiscK: return "PicMiscK";
						case Event.Columns.UrlFragment: return "UrlFragment";
						case Event.Columns.MusicTypesString: return "MusicTypesString";
						case Event.Columns.ModeratorUsrK: return "ModeratorUsrK";
						case Event.Columns.BuyableLockDateTime: return "BuyableLockDateTime";
						case Event.Columns.IsTicketsAvailable: return "IsTicketsAvailable";
						case Event.Columns.TicketHeat: return "TicketHeat";
						case Event.Columns.HasHilight: return "HasHilight";
						case Event.Columns.UsrAttendCount: return "UsrAttendCount";
						case Event.Columns.FixedDiscount: return "FixedDiscount";
						case Event.Columns.IsPriceFixed: return "IsPriceFixed";
						case Event.Columns.Lat: return "Lat";
						case Event.Columns.Lon: return "Lon";
						case Event.Columns.HtmId: return "HtmId";
						case Event.Columns.DontShowHotelLink: return "DontShowHotelLink";
						case Event.Columns.SpotterRequest: return "SpotterRequest";
						case Event.Columns.SpotterRequestName: return "SpotterRequestName";
						case Event.Columns.SpotterRequestNumber: return "SpotterRequestNumber";
						case Event.Columns.FacebookEventId: return "FacebookEventId";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(Event.Columns columnEnum)
		{
			switch (columnEnum)
			{
											case Event.Columns.DateTime: return true;
																																																									default: return false;
			}
		}


		#region Common
 
		public Event(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);  }
		public Event()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.Event);
		}
		public Event(BobSet bs)
		{
			this.Bob = new Bob(bs.Table, bs);
		}
		public Event(int EventK, IBob Parent, object Column)
			: this()
		{
			Bob.GetBobFromParent(EventK, Parent.Bob, Column, TablesEnum.Event);
		}
		public Event(int EventK)
			: this()
		{
			Bob.GetBobFromPrimaryKey(EventK);
		}
		#endregion

	}
	#endregion
	#region EventTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region Event
	/// <summary>
	/// One single event
	/// </summary>
	[Serializable]
	public partial class Event 
	{
		
		#region Simple members
		/// <summary>
		/// The primary key
		/// </summary>
		public override int K
		{
			get { return (int)this[Event.Columns.K] as int? ?? 0 ; }
			set { this[Event.Columns.K] = value; }
		}
		/// <summary>
		/// Name of the event
		/// </summary>
		public override string Name
		{
			get { return (string)this[Event.Columns.Name]; }
			set { this[Event.Columns.Name] = value; }
		}
		/// <summary>
		/// All the details about the event for summary boxes
		/// </summary>
		public override string ShortDetailsHtml
		{
			get { return (string)this[Event.Columns.ShortDetailsHtml]; }
			set { this[Event.Columns.ShortDetailsHtml] = value; }
		}
		/// <summary>
		/// All the details about the event main event page
		/// </summary>
		public override string LongDetailsHtml
		{
			get { return (string)this[Event.Columns.LongDetailsHtml]; }
			set { this[Event.Columns.LongDetailsHtml] = value; }
		}
		/// <summary>
		/// Is the longDetails plain html? - e.g. rendered outsite the yellow box?
		/// </summary>
		public override bool LongDetailsPlain
		{
			get { return (bool)this[Event.Columns.LongDetailsPlain]; }
			set { this[Event.Columns.LongDetailsPlain] = value; }
		}
		/// <summary>
		/// Cropped image between 75*75 and 100*100
		/// </summary>
		public Guid	Pic
		{
			get{ return Cambro.Misc.Db.GuidConvertor(this[Event.Columns.Pic]);}		
			set{ this[Event.Columns.Pic] = new System.Data.SqlTypes.SqlGuid(value);}
		}
		/// <summary>
		/// Date that the event takes place
		/// </summary>
		public override DateTime DateTime
		{
			get { return (DateTime)this[Event.Columns.DateTime]; }
			set { this[Event.Columns.DateTime] = value; }
		}
		/// <summary>
		/// Link to one Venue
		/// </summary>
		public override int VenueK
		{
			get { return (int)this[Event.Columns.VenueK]; }
			set { this[Event.Columns.VenueK] = value; }
		}
		/// <summary>
		/// Note for admins only
		/// </summary>
		public override string AdminNote
		{
			get { return (string)this[Event.Columns.AdminNote]; }
			set { this[Event.Columns.AdminNote] = value; }
		}
		/// <summary>
		/// Capacity of the event (max number of people that can attent)
		/// </summary>
		public override int Capacity
		{
			get { return (int)this[Event.Columns.Capacity]; }
			set { this[Event.Columns.Capacity] = value; }
		}
		/// <summary>
		/// The user that added this event (0 if added by admin)
		/// </summary>
		public override int OwnerUsrK
		{
			get { return (int)this[Event.Columns.OwnerUsrK]; }
			set { this[Event.Columns.OwnerUsrK] = value; }
		}
		/// <summary>
		/// If the owner wants to upload another image after the this has been enabled, it is stored here
		/// </summary>
		public Guid	PicNew
		{
			get{ return Cambro.Misc.Db.GuidConvertor(this[Event.Columns.PicNew]);}		
			set{ this[Event.Columns.PicNew] = new System.Data.SqlTypes.SqlGuid(value);}
		}
		/// <summary>
		/// The total number of comments
		/// </summary>
		public override int TotalComments
		{
			get { return (int)this[Event.Columns.TotalComments]; }
			set { this[Event.Columns.TotalComments] = value; }
		}
		/// <summary>
		/// The date/time of the last post that was posted in this board (including child objects)
		/// </summary>
		public override DateTime LastPost
		{
			get { return (DateTime)this[Event.Columns.LastPost]; }
			set { this[Event.Columns.LastPost] = value; }
		}
		/// <summary>
		/// The average date.time of all comments posted in this board (including child objects)
		/// </summary>
		public override DateTime AverageCommentDateTime
		{
			get { return (DateTime)this[Event.Columns.AverageCommentDateTime]; }
			set { this[Event.Columns.AverageCommentDateTime] = value; }
		}
		/// <summary>
		/// Total number of photos in the event (live + disabled + new)
		/// </summary>
		public override int TotalPhotos
		{
			get { return (int)this[Event.Columns.TotalPhotos]; }
			set { this[Event.Columns.TotalPhotos] = value; }
		}
		/// <summary>
		/// The number of live photos on this event
		/// </summary>
		public override int LivePhotos
		{
			get { return (int)this[Event.Columns.LivePhotos]; }
			set { this[Event.Columns.LivePhotos] = value; }
		}
		/// <summary>
		/// When was the event added to the system?
		/// </summary>
		public override DateTime AddedDateTime
		{
			get { return (DateTime)this[Event.Columns.AddedDateTime]; }
			set { this[Event.Columns.AddedDateTime] = value; }
		}
		/// <summary>
		/// Does the event have a guestlist?
		/// </summary>
		public override bool HasGuestlist
		{
			get { return (bool)this[Event.Columns.HasGuestlist]; }
			set { this[Event.Columns.HasGuestlist] = value; }
		}
		/// <summary>
		/// DateTime that the last photo was made live
		/// </summary>
		public override DateTime LastLivePhoto
		{
			get { return (DateTime)this[Event.Columns.LastLivePhoto]; }
			set { this[Event.Columns.LastLivePhoto] = value; }
		}
		/// <summary>
		/// Does the event have a spotter?
		/// </summary>
		public override bool HasSpotter
		{
			get { return (bool)this[Event.Columns.HasSpotter]; }
			set { this[Event.Columns.HasSpotter] = value; }
		}
		/// <summary>
		/// Whether the guestlist is running - the event owner can disable it when they want it closed
		/// </summary>
		public override bool GuestlistOpen
		{
			get { return (bool)this[Event.Columns.GuestlistOpen]; }
			set { this[Event.Columns.GuestlistOpen] = value; }
		}
		/// <summary>
		/// Once this is set to true, the owner can't open the list again - they've been billed.
		/// </summary>
		public override bool GuestlistFinished
		{
			get { return (bool)this[Event.Columns.GuestlistFinished]; }
			set { this[Event.Columns.GuestlistFinished] = value; }
		}
		/// <summary>
		/// Limit the total number of people on the guestlist?
		/// </summary>
		public override int GuestlistLimit
		{
			get { return (int)this[Event.Columns.GuestlistLimit]; }
			set { this[Event.Columns.GuestlistLimit] = value; }
		}
		/// <summary>
		/// Total number of people currently on the list
		/// </summary>
		public override int GuestlistCount
		{
			get { return (int)this[Event.Columns.GuestlistCount]; }
			set { this[Event.Columns.GuestlistCount] = value; }
		}
		/// <summary>
		/// Html details about the guestlist
		/// </summary>
		public override string GuestlistDetails
		{
			get { return (string)this[Event.Columns.GuestlistDetails]; }
			set { this[Event.Columns.GuestlistDetails] = value; }
		}
		/// <summary>
		/// Promoter that controls this guestlist
		/// </summary>
		public override int GuestlistPromoterK
		{
			get { return (int)this[Event.Columns.GuestlistPromoterK]; }
			set { this[Event.Columns.GuestlistPromoterK] = value; }
		}
		/// <summary>
		/// Regular (non-guestlist) price
		/// </summary>
		public override double GuestlistRegularPrice
		{
			get { return (double)this[Event.Columns.GuestlistRegularPrice]; }
			set { this[Event.Columns.GuestlistRegularPrice] = value; }
		}
		/// <summary>
		/// Reduced guestlist price
		/// </summary>
		public override double GuestlistPrice
		{
			get { return (double)this[Event.Columns.GuestlistPrice]; }
			set { this[Event.Columns.GuestlistPrice] = value; }
		}
		/// <summary>
		/// Is the guestlist promoted on the front page of the site?
		/// </summary>
		public override bool GuestlistPromotion
		{
			get { return (bool)this[Event.Columns.GuestlistPromotion]; }
			set { this[Event.Columns.GuestlistPromotion] = value; }
		}
		/// <summary>
		/// When is the event? Morning, Daytime or Evening?
		/// </summary>
		public override int StartTime
		{
			get { return (int)this[Event.Columns.StartTime]; }
			set { this[Event.Columns.StartTime] = value; }
		}
		/// <summary>
		/// The email address of the admin contact for sorting spoters with guestlists
		/// </summary>
		public override string AdminEmail
		{
			get { return (string)this[Event.Columns.AdminEmail]; }
			set { this[Event.Columns.AdminEmail] = value; }
		}
		/// <summary>
		/// Donated - highlight the event, and give it a duck
		/// </summary>
		public override bool Donated
		{
			get { return (bool)this[Event.Columns.Donated]; }
			set { this[Event.Columns.Donated] = value; }
		}
		/// <summary>
		/// Is the description text or html?
		/// </summary>
		public override bool IsDescriptionText
		{
			get { return (bool)this[Event.Columns.IsDescriptionText]; }
			set { this[Event.Columns.IsDescriptionText] = value; }
		}
		/// <summary>
		/// Has the event been seen by an admin or not?
		/// </summary>
		public override bool IsNew
		{
			get { return (bool)this[Event.Columns.IsNew]; }
			set { this[Event.Columns.IsNew] = value; }
		}
		/// <summary>
		/// Should the description just have "\n" replaced with "&lt;br&gt;"? (This overrides IsDescriptionText)
		/// </summary>
		public override bool IsDescriptionCleanHtml
		{
			get { return (bool)this[Event.Columns.IsDescriptionCleanHtml]; }
			set { this[Event.Columns.IsDescriptionCleanHtml] = value; }
		}
		/// <summary>
		/// Has the event been recently edited?
		/// </summary>
		public override bool IsEdited
		{
			get { return (bool)this[Event.Columns.IsEdited]; }
			set { this[Event.Columns.IsEdited] = value; }
		}
		/// <summary>
		/// Guid used to ensure duplicate events don't get posted if the user refreshes the page after saving.
		/// </summary>
		public Guid	DuplicateGuid
		{
			get{ return Cambro.Misc.Db.GuidConvertor(this[Event.Columns.DuplicateGuid]);}		
			set{ this[Event.Columns.DuplicateGuid] = new System.Data.SqlTypes.SqlGuid(value);}
		}
		/// <summary>
		/// State var used to reconstruct cropper when re-cropping
		/// </summary>
		public override string PicState
		{
			get { return (string)this[Event.Columns.PicState]; }
			set { this[Event.Columns.PicState] = value; }
		}
		/// <summary>
		/// The Photo that was used to create the Pic.
		/// </summary>
		public override int PicPhotoK
		{
			get { return (int)this[Event.Columns.PicPhotoK]; }
			set { this[Event.Columns.PicPhotoK] = value; }
		}
		/// <summary>
		/// The Misc that was used to create the Pic.
		/// </summary>
		public override int PicMiscK
		{
			get { return (int)this[Event.Columns.PicMiscK]; }
			set { this[Event.Columns.PicMiscK] = value; }
		}
		/// <summary>
		/// The url fragment - so that the url can be generated without accessing parent database records
		/// </summary>
		public override string UrlFragment
		{
			get { return (string)this[Event.Columns.UrlFragment]; }
			set { this[Event.Columns.UrlFragment] = value; }
		}
		/// <summary>
		/// Music types, comma seperated
		/// </summary>
		public override string MusicTypesString
		{
			get { return (string)this[Event.Columns.MusicTypesString]; }
			set { this[Event.Columns.MusicTypesString] = value; }
		}
		/// <summary>
		/// The moderator that has been assigned to moderate this event
		/// </summary>
		public override int ModeratorUsrK
		{
			get { return (int)this[Event.Columns.ModeratorUsrK]; }
			set { this[Event.Columns.ModeratorUsrK] = value; }
		}
		/// <summary>
		/// Time stamp to record when someone is trying to purchase an IBuyable item that is linked to this Bob. No lock = DateTime.MinValue
		/// </summary>
		public override DateTime BuyableLockDateTime
		{
			get { return (DateTime)this[Event.Columns.BuyableLockDateTime]; }
			set { this[Event.Columns.BuyableLockDateTime] = value; }
		}
		/// <summary>
		/// Are tickets currently available for this event? (Updated hourly)
		/// </summary>
		public override bool IsTicketsAvailable
		{
			get { return (bool)this[Event.Columns.IsTicketsAvailable]; }
			set { this[Event.Columns.IsTicketsAvailable] = value; }
		}
		/// <summary>
		/// How hot are the tickets (Tickets sold in the last 48 hrs x booking fee)
		/// </summary>
		public override double TicketHeat
		{
			get { return (double)this[Event.Columns.TicketHeat]; }
			set { this[Event.Columns.TicketHeat] = value; }
		}
		/// <summary>
		/// Shall we display this event with a hilight?
		/// </summary>
		public override bool HasHilight
		{
			get { return (bool)this[Event.Columns.HasHilight]; }
			set { this[Event.Columns.HasHilight] = value; }
		}
		/// <summary>
		/// Number of our members signed up as going
		/// </summary>
		public override int UsrAttendCount
		{
			get { return (int)this[Event.Columns.UsrAttendCount]; }
			set { this[Event.Columns.UsrAttendCount] = value; }
		}
		/// <summary>
		/// Admin override to fix discount level for price of credits for this event donation
		/// </summary>
		public override double FixedDiscount
		{
			get { return (double)this[Event.Columns.FixedDiscount]; }
			set { this[Event.Columns.FixedDiscount] = value; }
		}
		/// <summary>
		/// Flag to indicate if price is fixed and if to use FixedDiscount
		/// </summary>
		public override bool IsPriceFixed
		{
			get { return (bool)this[Event.Columns.IsPriceFixed]; }
			set { this[Event.Columns.IsPriceFixed] = value; }
		}
		/// <summary>
		/// Latitude
		/// </summary>
		public override double Lat
		{
			get { return (double)this[Event.Columns.Lat]; }
			set { this[Event.Columns.Lat] = value; }
		}
		/// <summary>
		/// Longitude
		/// </summary>
		public override double Lon
		{
			get { return (double)this[Event.Columns.Lon]; }
			set { this[Event.Columns.Lon] = value; }
		}
		/// <summary>
		/// database-calculated HtmID based on Lat/Lon
		/// </summary>
		public override long? HtmId
		{
			get { return (long?)this[Event.Columns.HtmId]; }
			set { this[Event.Columns.HtmId] = value; }
		}
		/// <summary>
		/// Exclude this event from showing "Find Hotel" banners etc
		/// </summary>
		public override bool? DontShowHotelLink
		{
			get { return (bool?)this[Event.Columns.DontShowHotelLink]; }
			set { this[Event.Columns.DontShowHotelLink] = value; }
		}
		/// <summary>
		/// Display the spotter request panel?
		/// </summary>
		public override bool? SpotterRequest
		{
			get { return (bool?)this[Event.Columns.SpotterRequest]; }
			set { this[Event.Columns.SpotterRequest] = value; }
		}
		/// <summary>
		/// Name for spotter request panel
		/// </summary>
		public override string SpotterRequestName
		{
			get { return (string)this[Event.Columns.SpotterRequestName]; }
			set { this[Event.Columns.SpotterRequestName] = value; }
		}
		/// <summary>
		/// Number for spotter request panel
		/// </summary>
		public override string SpotterRequestNumber
		{
			get { return (string)this[Event.Columns.SpotterRequestNumber]; }
			set { this[Event.Columns.SpotterRequestNumber] = value; }
		}
		/// <summary>
		/// Facebook event id
		/// </summary>
		public override long? FacebookEventId
		{
			get { return (long?)this[Event.Columns.FacebookEventId]; }
			set { this[Event.Columns.FacebookEventId] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildEvents
	{
		CachedSqlSelect<Event> ChildEvents();
		CachedSqlSelect<Event> ChildEvents(Q where);
		CachedSqlSelect<Event> ChildEvents(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<Event> ChildEvents(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class Event 
	 : 
	Bobs.ChildInterfaces.IHasChildArticles
	,
	Bobs.ChildInterfaces.IHasChildBanners
	,
	Bobs.ChildInterfaces.IHasChildBannerFolders
	,
	Bobs.ChildInterfaces.IHasChildComps
	,
	Bobs.ChildInterfaces.IHasChildEventBrands
	,
	Bobs.ChildInterfaces.IHasChildEventMusicTypes
	,
	Bobs.ChildInterfaces.IHasChildFlyers
	,
	Bobs.ChildInterfaces.IHasChildGallerys
	,
	Bobs.ChildInterfaces.IHasChildGroupEvents
	,
	Bobs.ChildInterfaces.IHasChildPhotos
	,
	Bobs.ChildInterfaces.IHasChildThreads
	,
	Bobs.ChildInterfaces.IHasChildTickets
	,
	Bobs.ChildInterfaces.IHasChildTicketPromoterEvents
	,
	Bobs.ChildInterfaces.IHasChildTicketRuns
	,
	Bobs.ChildInterfaces.IHasChildUsrEventAttendeds
	,
	Bobs.ChildInterfaces.IHasChildUsrEventGuestlists
		{
			public CachedSqlSelect<Article> ChildArticles()
		{
			return this.ChildArticles(null, null);
		}
		public CachedSqlSelect<Article> ChildArticles(Q where)
		{
			return this.ChildArticles(where, null);
		}
		public CachedSqlSelect<Article> ChildArticles(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildArticles(null, orderBy);
		}
		public CachedSqlSelect<Article> ChildArticles(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<Article>
			(
				new Children<Article>
				(
					TablesEnum.Event, 
					this.K, 
					TablesEnum.Article, 
					dr => 
					{ 
						Article newArticle = new Article(); 
						newArticle.Initialise(dr); 
						return newArticle;
					},
					"D389F153",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<Banner> ChildBanners()
		{
			return this.ChildBanners(null, null);
		}
		public CachedSqlSelect<Banner> ChildBanners(Q where)
		{
			return this.ChildBanners(where, null);
		}
		public CachedSqlSelect<Banner> ChildBanners(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildBanners(null, orderBy);
		}
		public CachedSqlSelect<Banner> ChildBanners(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<Banner>
			(
				new Children<Banner>
				(
					TablesEnum.Event, 
					this.K, 
					TablesEnum.Banner, 
					dr => 
					{ 
						Banner newBanner = new Banner(); 
						newBanner.Initialise(dr); 
						return newBanner;
					},
					"73D8C33D",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<BannerFolder> ChildBannerFolders()
		{
			return this.ChildBannerFolders(null, null);
		}
		public CachedSqlSelect<BannerFolder> ChildBannerFolders(Q where)
		{
			return this.ChildBannerFolders(where, null);
		}
		public CachedSqlSelect<BannerFolder> ChildBannerFolders(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildBannerFolders(null, orderBy);
		}
		public CachedSqlSelect<BannerFolder> ChildBannerFolders(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<BannerFolder>
			(
				new Children<BannerFolder>
				(
					TablesEnum.Event, 
					this.K, 
					TablesEnum.BannerFolder, 
					dr => 
					{ 
						BannerFolder newBannerFolder = new BannerFolder(); 
						newBannerFolder.Initialise(dr); 
						return newBannerFolder;
					},
					"F4A4B2D6",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<Comp> ChildComps()
		{
			return this.ChildComps(null, null);
		}
		public CachedSqlSelect<Comp> ChildComps(Q where)
		{
			return this.ChildComps(where, null);
		}
		public CachedSqlSelect<Comp> ChildComps(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildComps(null, orderBy);
		}
		public CachedSqlSelect<Comp> ChildComps(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<Comp>
			(
				new Children<Comp>
				(
					TablesEnum.Event, 
					this.K, 
					TablesEnum.Comp, 
					dr => 
					{ 
						Comp newComp = new Comp(); 
						newComp.Initialise(dr); 
						return newComp;
					},
					"61E0C58E",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<EventBrand> ChildEventBrands()
		{
			return this.ChildEventBrands(null, null);
		}
		public CachedSqlSelect<EventBrand> ChildEventBrands(Q where)
		{
			return this.ChildEventBrands(where, null);
		}
		public CachedSqlSelect<EventBrand> ChildEventBrands(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildEventBrands(null, orderBy);
		}
		public CachedSqlSelect<EventBrand> ChildEventBrands(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<EventBrand>
			(
				new Children<EventBrand>
				(
					TablesEnum.Event, 
					this.K, 
					TablesEnum.EventBrand, 
					dr => 
					{ 
						EventBrand newEventBrand = new EventBrand(); 
						newEventBrand.Initialise(dr); 
						return newEventBrand;
					},
					"8CFC8B28",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<EventMusicType> ChildEventMusicTypes()
		{
			return this.ChildEventMusicTypes(null, null);
		}
		public CachedSqlSelect<EventMusicType> ChildEventMusicTypes(Q where)
		{
			return this.ChildEventMusicTypes(where, null);
		}
		public CachedSqlSelect<EventMusicType> ChildEventMusicTypes(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildEventMusicTypes(null, orderBy);
		}
		public CachedSqlSelect<EventMusicType> ChildEventMusicTypes(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<EventMusicType>
			(
				new Children<EventMusicType>
				(
					TablesEnum.Event, 
					this.K, 
					TablesEnum.EventMusicType, 
					dr => 
					{ 
						EventMusicType newEventMusicType = new EventMusicType(); 
						newEventMusicType.Initialise(dr); 
						return newEventMusicType;
					},
					"D9782475",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<Flyer> ChildFlyers()
		{
			return this.ChildFlyers(null, null);
		}
		public CachedSqlSelect<Flyer> ChildFlyers(Q where)
		{
			return this.ChildFlyers(where, null);
		}
		public CachedSqlSelect<Flyer> ChildFlyers(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildFlyers(null, orderBy);
		}
		public CachedSqlSelect<Flyer> ChildFlyers(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<Flyer>
			(
				new Children<Flyer>
				(
					TablesEnum.Event, 
					this.K, 
					TablesEnum.Flyer, 
					dr => 
					{ 
						Flyer newFlyer = new Flyer(); 
						newFlyer.Initialise(dr); 
						return newFlyer;
					},
					"1933EADE",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<Gallery> ChildGallerys()
		{
			return this.ChildGallerys(null, null);
		}
		public CachedSqlSelect<Gallery> ChildGallerys(Q where)
		{
			return this.ChildGallerys(where, null);
		}
		public CachedSqlSelect<Gallery> ChildGallerys(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildGallerys(null, orderBy);
		}
		public CachedSqlSelect<Gallery> ChildGallerys(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<Gallery>
			(
				new Children<Gallery>
				(
					TablesEnum.Event, 
					this.K, 
					TablesEnum.Gallery, 
					dr => 
					{ 
						Gallery newGallery = new Gallery(); 
						newGallery.Initialise(dr); 
						return newGallery;
					},
					"A1E9A35D",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<GroupEvent> ChildGroupEvents()
		{
			return this.ChildGroupEvents(null, null);
		}
		public CachedSqlSelect<GroupEvent> ChildGroupEvents(Q where)
		{
			return this.ChildGroupEvents(where, null);
		}
		public CachedSqlSelect<GroupEvent> ChildGroupEvents(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildGroupEvents(null, orderBy);
		}
		public CachedSqlSelect<GroupEvent> ChildGroupEvents(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<GroupEvent>
			(
				new Children<GroupEvent>
				(
					TablesEnum.Event, 
					this.K, 
					TablesEnum.GroupEvent, 
					dr => 
					{ 
						GroupEvent newGroupEvent = new GroupEvent(); 
						newGroupEvent.Initialise(dr); 
						return newGroupEvent;
					},
					"3AB4F1F6",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<Photo> ChildPhotos()
		{
			return this.ChildPhotos(null, null);
		}
		public CachedSqlSelect<Photo> ChildPhotos(Q where)
		{
			return this.ChildPhotos(where, null);
		}
		public CachedSqlSelect<Photo> ChildPhotos(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildPhotos(null, orderBy);
		}
		public CachedSqlSelect<Photo> ChildPhotos(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<Photo>
			(
				new Children<Photo>
				(
					TablesEnum.Event, 
					this.K, 
					TablesEnum.Photo, 
					dr => 
					{ 
						Photo newPhoto = new Photo(); 
						newPhoto.Initialise(dr); 
						return newPhoto;
					},
					"71653456",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<Thread> ChildThreads()
		{
			return this.ChildThreads(null, null);
		}
		public CachedSqlSelect<Thread> ChildThreads(Q where)
		{
			return this.ChildThreads(where, null);
		}
		public CachedSqlSelect<Thread> ChildThreads(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildThreads(null, orderBy);
		}
		public CachedSqlSelect<Thread> ChildThreads(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<Thread>
			(
				new Children<Thread>
				(
					TablesEnum.Event, 
					this.K, 
					TablesEnum.Thread, 
					dr => 
					{ 
						Thread newThread = new Thread(); 
						newThread.Initialise(dr); 
						return newThread;
					},
					"4576C3F1",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<Ticket> ChildTickets()
		{
			return this.ChildTickets(null, null);
		}
		public CachedSqlSelect<Ticket> ChildTickets(Q where)
		{
			return this.ChildTickets(where, null);
		}
		public CachedSqlSelect<Ticket> ChildTickets(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildTickets(null, orderBy);
		}
		public CachedSqlSelect<Ticket> ChildTickets(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<Ticket>
			(
				new Children<Ticket>
				(
					TablesEnum.Event, 
					this.K, 
					TablesEnum.Ticket, 
					dr => 
					{ 
						Ticket newTicket = new Ticket(); 
						newTicket.Initialise(dr); 
						return newTicket;
					},
					"117368D6",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<TicketPromoterEvent> ChildTicketPromoterEvents()
		{
			return this.ChildTicketPromoterEvents(null, null);
		}
		public CachedSqlSelect<TicketPromoterEvent> ChildTicketPromoterEvents(Q where)
		{
			return this.ChildTicketPromoterEvents(where, null);
		}
		public CachedSqlSelect<TicketPromoterEvent> ChildTicketPromoterEvents(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildTicketPromoterEvents(null, orderBy);
		}
		public CachedSqlSelect<TicketPromoterEvent> ChildTicketPromoterEvents(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<TicketPromoterEvent>
			(
				new Children<TicketPromoterEvent>
				(
					TablesEnum.Event, 
					this.K, 
					TablesEnum.TicketPromoterEvent, 
					dr => 
					{ 
						TicketPromoterEvent newTicketPromoterEvent = new TicketPromoterEvent(); 
						newTicketPromoterEvent.Initialise(dr); 
						return newTicketPromoterEvent;
					},
					"4A1C9197",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<TicketRun> ChildTicketRuns()
		{
			return this.ChildTicketRuns(null, null);
		}
		public CachedSqlSelect<TicketRun> ChildTicketRuns(Q where)
		{
			return this.ChildTicketRuns(where, null);
		}
		public CachedSqlSelect<TicketRun> ChildTicketRuns(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildTicketRuns(null, orderBy);
		}
		public CachedSqlSelect<TicketRun> ChildTicketRuns(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<TicketRun>
			(
				new Children<TicketRun>
				(
					TablesEnum.Event, 
					this.K, 
					TablesEnum.TicketRun, 
					dr => 
					{ 
						TicketRun newTicketRun = new TicketRun(); 
						newTicketRun.Initialise(dr); 
						return newTicketRun;
					},
					"D8F98D64",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<UsrEventAttended> ChildUsrEventAttendeds()
		{
			return this.ChildUsrEventAttendeds(null, null);
		}
		public CachedSqlSelect<UsrEventAttended> ChildUsrEventAttendeds(Q where)
		{
			return this.ChildUsrEventAttendeds(where, null);
		}
		public CachedSqlSelect<UsrEventAttended> ChildUsrEventAttendeds(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildUsrEventAttendeds(null, orderBy);
		}
		public CachedSqlSelect<UsrEventAttended> ChildUsrEventAttendeds(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<UsrEventAttended>
			(
				new Children<UsrEventAttended>
				(
					TablesEnum.Event, 
					this.K, 
					TablesEnum.UsrEventAttended, 
					dr => 
					{ 
						UsrEventAttended newUsrEventAttended = new UsrEventAttended(); 
						newUsrEventAttended.Initialise(dr); 
						return newUsrEventAttended;
					},
					"95A27612",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<UsrEventGuestlist> ChildUsrEventGuestlists()
		{
			return this.ChildUsrEventGuestlists(null, null);
		}
		public CachedSqlSelect<UsrEventGuestlist> ChildUsrEventGuestlists(Q where)
		{
			return this.ChildUsrEventGuestlists(where, null);
		}
		public CachedSqlSelect<UsrEventGuestlist> ChildUsrEventGuestlists(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildUsrEventGuestlists(null, orderBy);
		}
		public CachedSqlSelect<UsrEventGuestlist> ChildUsrEventGuestlists(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<UsrEventGuestlist>
			(
				new Children<UsrEventGuestlist>
				(
					TablesEnum.Event, 
					this.K, 
					TablesEnum.UsrEventGuestlist, 
					dr => 
					{ 
						UsrEventGuestlist newUsrEventGuestlist = new UsrEventGuestlist(); 
						newUsrEventGuestlist.Initialise(dr); 
						return newUsrEventGuestlist;
					},
					"6F23F8F8",
					where,
					orderBy
				)
			);
		}
		}

	#region EventDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region EventDataHolder
	/// <summary>
	/// One single eventDataHolder
	/// </summary>
	[Serializable]
	public partial class EventDataHolder : DataHolder<Event>
	{
		Event dataHolder;
		[NonSerializedAttribute] Event bob;

		public EventDataHolder()
		{
			this.dataHolder = new Event();
		}
		
		void CopyValues(Event source, Event destination)
		{
			destination[Bobs.Event.Columns.K] = source[Bobs.Event.Columns.K];
			destination[Bobs.Event.Columns.Name] = source[Bobs.Event.Columns.Name];
			destination[Bobs.Event.Columns.ShortDetailsHtml] = source[Bobs.Event.Columns.ShortDetailsHtml];
			destination[Bobs.Event.Columns.LongDetailsHtml] = source[Bobs.Event.Columns.LongDetailsHtml];
			destination[Bobs.Event.Columns.LongDetailsPlain] = source[Bobs.Event.Columns.LongDetailsPlain];
			destination[Bobs.Event.Columns.Pic] = source[Bobs.Event.Columns.Pic];
			destination[Bobs.Event.Columns.DateTime] = source[Bobs.Event.Columns.DateTime];
			destination[Bobs.Event.Columns.VenueK] = source[Bobs.Event.Columns.VenueK];
			destination[Bobs.Event.Columns.AdminNote] = source[Bobs.Event.Columns.AdminNote];
			destination[Bobs.Event.Columns.Capacity] = source[Bobs.Event.Columns.Capacity];
			destination[Bobs.Event.Columns.OwnerUsrK] = source[Bobs.Event.Columns.OwnerUsrK];
			destination[Bobs.Event.Columns.PicNew] = source[Bobs.Event.Columns.PicNew];
			destination[Bobs.Event.Columns.TotalComments] = source[Bobs.Event.Columns.TotalComments];
			destination[Bobs.Event.Columns.LastPost] = source[Bobs.Event.Columns.LastPost];
			destination[Bobs.Event.Columns.AverageCommentDateTime] = source[Bobs.Event.Columns.AverageCommentDateTime];
			destination[Bobs.Event.Columns.TotalPhotos] = source[Bobs.Event.Columns.TotalPhotos];
			destination[Bobs.Event.Columns.LivePhotos] = source[Bobs.Event.Columns.LivePhotos];
			destination[Bobs.Event.Columns.AddedDateTime] = source[Bobs.Event.Columns.AddedDateTime];
			destination[Bobs.Event.Columns.HasGuestlist] = source[Bobs.Event.Columns.HasGuestlist];
			destination[Bobs.Event.Columns.LastLivePhoto] = source[Bobs.Event.Columns.LastLivePhoto];
			destination[Bobs.Event.Columns.HasSpotter] = source[Bobs.Event.Columns.HasSpotter];
			destination[Bobs.Event.Columns.GuestlistOpen] = source[Bobs.Event.Columns.GuestlistOpen];
			destination[Bobs.Event.Columns.GuestlistFinished] = source[Bobs.Event.Columns.GuestlistFinished];
			destination[Bobs.Event.Columns.GuestlistLimit] = source[Bobs.Event.Columns.GuestlistLimit];
			destination[Bobs.Event.Columns.GuestlistCount] = source[Bobs.Event.Columns.GuestlistCount];
			destination[Bobs.Event.Columns.GuestlistDetails] = source[Bobs.Event.Columns.GuestlistDetails];
			destination[Bobs.Event.Columns.GuestlistPromoterK] = source[Bobs.Event.Columns.GuestlistPromoterK];
			destination[Bobs.Event.Columns.GuestlistRegularPrice] = source[Bobs.Event.Columns.GuestlistRegularPrice];
			destination[Bobs.Event.Columns.GuestlistPrice] = source[Bobs.Event.Columns.GuestlistPrice];
			destination[Bobs.Event.Columns.GuestlistPromotion] = source[Bobs.Event.Columns.GuestlistPromotion];
			destination[Bobs.Event.Columns.StartTime] = source[Bobs.Event.Columns.StartTime];
			destination[Bobs.Event.Columns.AdminEmail] = source[Bobs.Event.Columns.AdminEmail];
			destination[Bobs.Event.Columns.Donated] = source[Bobs.Event.Columns.Donated];
			destination[Bobs.Event.Columns.IsDescriptionText] = source[Bobs.Event.Columns.IsDescriptionText];
			destination[Bobs.Event.Columns.IsNew] = source[Bobs.Event.Columns.IsNew];
			destination[Bobs.Event.Columns.IsDescriptionCleanHtml] = source[Bobs.Event.Columns.IsDescriptionCleanHtml];
			destination[Bobs.Event.Columns.IsEdited] = source[Bobs.Event.Columns.IsEdited];
			destination[Bobs.Event.Columns.DuplicateGuid] = source[Bobs.Event.Columns.DuplicateGuid];
			destination[Bobs.Event.Columns.PicState] = source[Bobs.Event.Columns.PicState];
			destination[Bobs.Event.Columns.PicPhotoK] = source[Bobs.Event.Columns.PicPhotoK];
			destination[Bobs.Event.Columns.PicMiscK] = source[Bobs.Event.Columns.PicMiscK];
			destination[Bobs.Event.Columns.UrlFragment] = source[Bobs.Event.Columns.UrlFragment];
			destination[Bobs.Event.Columns.MusicTypesString] = source[Bobs.Event.Columns.MusicTypesString];
			destination[Bobs.Event.Columns.ModeratorUsrK] = source[Bobs.Event.Columns.ModeratorUsrK];
			destination[Bobs.Event.Columns.BuyableLockDateTime] = source[Bobs.Event.Columns.BuyableLockDateTime];
			destination[Bobs.Event.Columns.IsTicketsAvailable] = source[Bobs.Event.Columns.IsTicketsAvailable];
			destination[Bobs.Event.Columns.TicketHeat] = source[Bobs.Event.Columns.TicketHeat];
			destination[Bobs.Event.Columns.HasHilight] = source[Bobs.Event.Columns.HasHilight];
			destination[Bobs.Event.Columns.UsrAttendCount] = source[Bobs.Event.Columns.UsrAttendCount];
			destination[Bobs.Event.Columns.FixedDiscount] = source[Bobs.Event.Columns.FixedDiscount];
			destination[Bobs.Event.Columns.IsPriceFixed] = source[Bobs.Event.Columns.IsPriceFixed];
			destination[Bobs.Event.Columns.Lat] = source[Bobs.Event.Columns.Lat];
			destination[Bobs.Event.Columns.Lon] = source[Bobs.Event.Columns.Lon];
			destination[Bobs.Event.Columns.HtmId] = source[Bobs.Event.Columns.HtmId];
			destination[Bobs.Event.Columns.DontShowHotelLink] = source[Bobs.Event.Columns.DontShowHotelLink];
			destination[Bobs.Event.Columns.SpotterRequest] = source[Bobs.Event.Columns.SpotterRequest];
			destination[Bobs.Event.Columns.SpotterRequestName] = source[Bobs.Event.Columns.SpotterRequestName];
			destination[Bobs.Event.Columns.SpotterRequestNumber] = source[Bobs.Event.Columns.SpotterRequestNumber];
			destination[Bobs.Event.Columns.FacebookEventId] = source[Bobs.Event.Columns.FacebookEventId];
		}
		
		public EventDataHolder(Event bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// The primary key
		/// </summary>
		public int K
		{
			get { return dataHolder.K; }
			set { this.dataHolder.K = value; }
		}
		/// <summary>
		/// Name of the event
		/// </summary>
		public string Name
		{
			get { return dataHolder.Name; }
			set { this.dataHolder.Name = value; }
		}
		/// <summary>
		/// All the details about the event for summary boxes
		/// </summary>
		public string ShortDetailsHtml
		{
			get { return dataHolder.ShortDetailsHtml; }
			set { this.dataHolder.ShortDetailsHtml = value; }
		}
		/// <summary>
		/// All the details about the event main event page
		/// </summary>
		public string LongDetailsHtml
		{
			get { return dataHolder.LongDetailsHtml; }
			set { this.dataHolder.LongDetailsHtml = value; }
		}
		/// <summary>
		/// Is the longDetails plain html? - e.g. rendered outsite the yellow box?
		/// </summary>
		public bool LongDetailsPlain
		{
			get { return dataHolder.LongDetailsPlain; }
			set { this.dataHolder.LongDetailsPlain = value; }
		}
		/// <summary>
		/// Cropped image between 75*75 and 100*100
		/// </summary>
		public Guid Pic
		{
			get { return dataHolder.Pic; }
			set { this.dataHolder.Pic = value; }
		}
		/// <summary>
		/// Date that the event takes place
		/// </summary>
		public DateTime DateTime
		{
			get { return dataHolder.DateTime; }
			set { this.dataHolder.DateTime = value; }
		}
		/// <summary>
		/// Link to one Venue
		/// </summary>
		public int VenueK
		{
			get { return dataHolder.VenueK; }
			set { this.dataHolder.VenueK = value; }
		}
		/// <summary>
		/// Note for admins only
		/// </summary>
		public string AdminNote
		{
			get { return dataHolder.AdminNote; }
			set { this.dataHolder.AdminNote = value; }
		}
		/// <summary>
		/// Capacity of the event (max number of people that can attent)
		/// </summary>
		public int Capacity
		{
			get { return dataHolder.Capacity; }
			set { this.dataHolder.Capacity = value; }
		}
		/// <summary>
		/// The user that added this event (0 if added by admin)
		/// </summary>
		public int OwnerUsrK
		{
			get { return dataHolder.OwnerUsrK; }
			set { this.dataHolder.OwnerUsrK = value; }
		}
		/// <summary>
		/// If the owner wants to upload another image after the this has been enabled, it is stored here
		/// </summary>
		public Guid PicNew
		{
			get { return dataHolder.PicNew; }
			set { this.dataHolder.PicNew = value; }
		}
		/// <summary>
		/// The total number of comments
		/// </summary>
		public int TotalComments
		{
			get { return dataHolder.TotalComments; }
			set { this.dataHolder.TotalComments = value; }
		}
		/// <summary>
		/// The date/time of the last post that was posted in this board (including child objects)
		/// </summary>
		public DateTime LastPost
		{
			get { return dataHolder.LastPost; }
			set { this.dataHolder.LastPost = value; }
		}
		/// <summary>
		/// The average date.time of all comments posted in this board (including child objects)
		/// </summary>
		public DateTime AverageCommentDateTime
		{
			get { return dataHolder.AverageCommentDateTime; }
			set { this.dataHolder.AverageCommentDateTime = value; }
		}
		/// <summary>
		/// Total number of photos in the event (live + disabled + new)
		/// </summary>
		public int TotalPhotos
		{
			get { return dataHolder.TotalPhotos; }
			set { this.dataHolder.TotalPhotos = value; }
		}
		/// <summary>
		/// The number of live photos on this event
		/// </summary>
		public int LivePhotos
		{
			get { return dataHolder.LivePhotos; }
			set { this.dataHolder.LivePhotos = value; }
		}
		/// <summary>
		/// When was the event added to the system?
		/// </summary>
		public DateTime AddedDateTime
		{
			get { return dataHolder.AddedDateTime; }
			set { this.dataHolder.AddedDateTime = value; }
		}
		/// <summary>
		/// Does the event have a guestlist?
		/// </summary>
		public bool HasGuestlist
		{
			get { return dataHolder.HasGuestlist; }
			set { this.dataHolder.HasGuestlist = value; }
		}
		/// <summary>
		/// DateTime that the last photo was made live
		/// </summary>
		public DateTime LastLivePhoto
		{
			get { return dataHolder.LastLivePhoto; }
			set { this.dataHolder.LastLivePhoto = value; }
		}
		/// <summary>
		/// Does the event have a spotter?
		/// </summary>
		public bool HasSpotter
		{
			get { return dataHolder.HasSpotter; }
			set { this.dataHolder.HasSpotter = value; }
		}
		/// <summary>
		/// Whether the guestlist is running - the event owner can disable it when they want it closed
		/// </summary>
		public bool GuestlistOpen
		{
			get { return dataHolder.GuestlistOpen; }
			set { this.dataHolder.GuestlistOpen = value; }
		}
		/// <summary>
		/// Once this is set to true, the owner can't open the list again - they've been billed.
		/// </summary>
		public bool GuestlistFinished
		{
			get { return dataHolder.GuestlistFinished; }
			set { this.dataHolder.GuestlistFinished = value; }
		}
		/// <summary>
		/// Limit the total number of people on the guestlist?
		/// </summary>
		public int GuestlistLimit
		{
			get { return dataHolder.GuestlistLimit; }
			set { this.dataHolder.GuestlistLimit = value; }
		}
		/// <summary>
		/// Total number of people currently on the list
		/// </summary>
		public int GuestlistCount
		{
			get { return dataHolder.GuestlistCount; }
			set { this.dataHolder.GuestlistCount = value; }
		}
		/// <summary>
		/// Html details about the guestlist
		/// </summary>
		public string GuestlistDetails
		{
			get { return dataHolder.GuestlistDetails; }
			set { this.dataHolder.GuestlistDetails = value; }
		}
		/// <summary>
		/// Promoter that controls this guestlist
		/// </summary>
		public int GuestlistPromoterK
		{
			get { return dataHolder.GuestlistPromoterK; }
			set { this.dataHolder.GuestlistPromoterK = value; }
		}
		/// <summary>
		/// Regular (non-guestlist) price
		/// </summary>
		public double GuestlistRegularPrice
		{
			get { return dataHolder.GuestlistRegularPrice; }
			set { this.dataHolder.GuestlistRegularPrice = value; }
		}
		/// <summary>
		/// Reduced guestlist price
		/// </summary>
		public double GuestlistPrice
		{
			get { return dataHolder.GuestlistPrice; }
			set { this.dataHolder.GuestlistPrice = value; }
		}
		/// <summary>
		/// Is the guestlist promoted on the front page of the site?
		/// </summary>
		public bool GuestlistPromotion
		{
			get { return dataHolder.GuestlistPromotion; }
			set { this.dataHolder.GuestlistPromotion = value; }
		}
		/// <summary>
		/// When is the event? Morning, Daytime or Evening?
		/// </summary>
		public int StartTime
		{
			get { return dataHolder.StartTime; }
			set { this.dataHolder.StartTime = value; }
		}
		/// <summary>
		/// The email address of the admin contact for sorting spoters with guestlists
		/// </summary>
		public string AdminEmail
		{
			get { return dataHolder.AdminEmail; }
			set { this.dataHolder.AdminEmail = value; }
		}
		/// <summary>
		/// Donated - highlight the event, and give it a duck
		/// </summary>
		public bool Donated
		{
			get { return dataHolder.Donated; }
			set { this.dataHolder.Donated = value; }
		}
		/// <summary>
		/// Is the description text or html?
		/// </summary>
		public bool IsDescriptionText
		{
			get { return dataHolder.IsDescriptionText; }
			set { this.dataHolder.IsDescriptionText = value; }
		}
		/// <summary>
		/// Has the event been seen by an admin or not?
		/// </summary>
		public bool IsNew
		{
			get { return dataHolder.IsNew; }
			set { this.dataHolder.IsNew = value; }
		}
		/// <summary>
		/// Should the description just have "\n" replaced with "&lt;br&gt;"? (This overrides IsDescriptionText)
		/// </summary>
		public bool IsDescriptionCleanHtml
		{
			get { return dataHolder.IsDescriptionCleanHtml; }
			set { this.dataHolder.IsDescriptionCleanHtml = value; }
		}
		/// <summary>
		/// Has the event been recently edited?
		/// </summary>
		public bool IsEdited
		{
			get { return dataHolder.IsEdited; }
			set { this.dataHolder.IsEdited = value; }
		}
		/// <summary>
		/// Guid used to ensure duplicate events don't get posted if the user refreshes the page after saving.
		/// </summary>
		public Guid DuplicateGuid
		{
			get { return dataHolder.DuplicateGuid; }
			set { this.dataHolder.DuplicateGuid = value; }
		}
		/// <summary>
		/// State var used to reconstruct cropper when re-cropping
		/// </summary>
		public string PicState
		{
			get { return dataHolder.PicState; }
			set { this.dataHolder.PicState = value; }
		}
		/// <summary>
		/// The Photo that was used to create the Pic.
		/// </summary>
		public int PicPhotoK
		{
			get { return dataHolder.PicPhotoK; }
			set { this.dataHolder.PicPhotoK = value; }
		}
		/// <summary>
		/// The Misc that was used to create the Pic.
		/// </summary>
		public int PicMiscK
		{
			get { return dataHolder.PicMiscK; }
			set { this.dataHolder.PicMiscK = value; }
		}
		/// <summary>
		/// The url fragment - so that the url can be generated without accessing parent database records
		/// </summary>
		public string UrlFragment
		{
			get { return dataHolder.UrlFragment; }
			set { this.dataHolder.UrlFragment = value; }
		}
		/// <summary>
		/// Music types, comma seperated
		/// </summary>
		public string MusicTypesString
		{
			get { return dataHolder.MusicTypesString; }
			set { this.dataHolder.MusicTypesString = value; }
		}
		/// <summary>
		/// The moderator that has been assigned to moderate this event
		/// </summary>
		public int ModeratorUsrK
		{
			get { return dataHolder.ModeratorUsrK; }
			set { this.dataHolder.ModeratorUsrK = value; }
		}
		/// <summary>
		/// Time stamp to record when someone is trying to purchase an IBuyable item that is linked to this Bob. No lock = DateTime.MinValue
		/// </summary>
		public DateTime BuyableLockDateTime
		{
			get { return dataHolder.BuyableLockDateTime; }
			set { this.dataHolder.BuyableLockDateTime = value; }
		}
		/// <summary>
		/// Are tickets currently available for this event? (Updated hourly)
		/// </summary>
		public bool IsTicketsAvailable
		{
			get { return dataHolder.IsTicketsAvailable; }
			set { this.dataHolder.IsTicketsAvailable = value; }
		}
		/// <summary>
		/// How hot are the tickets (Tickets sold in the last 48 hrs x booking fee)
		/// </summary>
		public double TicketHeat
		{
			get { return dataHolder.TicketHeat; }
			set { this.dataHolder.TicketHeat = value; }
		}
		/// <summary>
		/// Shall we display this event with a hilight?
		/// </summary>
		public bool HasHilight
		{
			get { return dataHolder.HasHilight; }
			set { this.dataHolder.HasHilight = value; }
		}
		/// <summary>
		/// Number of our members signed up as going
		/// </summary>
		public int UsrAttendCount
		{
			get { return dataHolder.UsrAttendCount; }
			set { this.dataHolder.UsrAttendCount = value; }
		}
		/// <summary>
		/// Admin override to fix discount level for price of credits for this event donation
		/// </summary>
		public double FixedDiscount
		{
			get { return dataHolder.FixedDiscount; }
			set { this.dataHolder.FixedDiscount = value; }
		}
		/// <summary>
		/// Flag to indicate if price is fixed and if to use FixedDiscount
		/// </summary>
		public bool IsPriceFixed
		{
			get { return dataHolder.IsPriceFixed; }
			set { this.dataHolder.IsPriceFixed = value; }
		}
		/// <summary>
		/// Latitude
		/// </summary>
		public double Lat
		{
			get { return dataHolder.Lat; }
			set { this.dataHolder.Lat = value; }
		}
		/// <summary>
		/// Longitude
		/// </summary>
		public double Lon
		{
			get { return dataHolder.Lon; }
			set { this.dataHolder.Lon = value; }
		}
		/// <summary>
		/// database-calculated HtmID based on Lat/Lon
		/// </summary>
		public long? HtmId
		{
			get { return dataHolder.HtmId; }
			set { this.dataHolder.HtmId = value; }
		}
		/// <summary>
		/// Exclude this event from showing "Find Hotel" banners etc
		/// </summary>
		public bool? DontShowHotelLink
		{
			get { return dataHolder.DontShowHotelLink; }
			set { this.dataHolder.DontShowHotelLink = value; }
		}
		/// <summary>
		/// Display the spotter request panel?
		/// </summary>
		public bool? SpotterRequest
		{
			get { return dataHolder.SpotterRequest; }
			set { this.dataHolder.SpotterRequest = value; }
		}
		/// <summary>
		/// Name for spotter request panel
		/// </summary>
		public string SpotterRequestName
		{
			get { return dataHolder.SpotterRequestName; }
			set { this.dataHolder.SpotterRequestName = value; }
		}
		/// <summary>
		/// Number for spotter request panel
		/// </summary>
		public string SpotterRequestNumber
		{
			get { return dataHolder.SpotterRequestNumber; }
			set { this.dataHolder.SpotterRequestNumber = value; }
		}
		/// <summary>
		/// Facebook event id
		/// </summary>
		public long? FacebookEventId
		{
			get { return dataHolder.FacebookEventId; }
			set { this.dataHolder.FacebookEventId = value; }
		}
		#endregion
		public Event Event
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new Event(K);
					}
					else
					{
						bob = new Event();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region EventSet
	public partial class EventSet : BobSet, IEnumerable<Event>
	{
		public EventSet(Query query) : base(query) { }

		public Event this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new Event(this);
					((Event)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (Event)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new EventTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<Event> ToList()
		{
			List<Event> list = new List<Event>();
			foreach (Event item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<Event> Members

		public new IEnumerator<Event> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region EventTableDef
	public class EventTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "Event";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "8F18B18D";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return Event.GetColumnName((Event.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.Event;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return true;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return Event.Columns.K;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			Event.Columns c = (Event.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case Event.Columns.K: ColumnStore[i] = new ColumnDef(c, "K", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey | SqlColumnFlag.AutoNumber, null); break;
					case Event.Columns.Name: ColumnStore[i] = new ColumnDef(c, "Name", SqlDbType.VarChar, 200, ""); break;
					case Event.Columns.ShortDetailsHtml: ColumnStore[i] = new ColumnDef(c, "ShortDetailsHtml", SqlDbType.Text, ""); break;
					case Event.Columns.LongDetailsHtml: ColumnStore[i] = new ColumnDef(c, "LongDetailsHtml", SqlDbType.Text, ""); break;
					case Event.Columns.LongDetailsPlain: ColumnStore[i] = new ColumnDef(c, "LongDetailsPlain", SqlDbType.Bit, false); break;
					case Event.Columns.Pic: ColumnStore[i] = new ColumnDef(c, "Pic", SqlDbType.UniqueIdentifier, Guid.Empty); break;
					case Event.Columns.DateTime: ColumnStore[i] = new ColumnDef(c, "DateTime", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case Event.Columns.VenueK: ColumnStore[i] = new ColumnDef(c, "VenueK", SqlDbType.Int, 0); break;
					case Event.Columns.AdminNote: ColumnStore[i] = new ColumnDef(c, "AdminNote", SqlDbType.Text, ""); break;
					case Event.Columns.Capacity: ColumnStore[i] = new ColumnDef(c, "Capacity", SqlDbType.Int, 0); break;
					case Event.Columns.OwnerUsrK: ColumnStore[i] = new ColumnDef(c, "OwnerUsrK", SqlDbType.Int, 0); break;
					case Event.Columns.PicNew: ColumnStore[i] = new ColumnDef(c, "PicNew", SqlDbType.UniqueIdentifier, Guid.Empty); break;
					case Event.Columns.TotalComments: ColumnStore[i] = new ColumnDef(c, "TotalComments", SqlDbType.Int, 0); break;
					case Event.Columns.LastPost: ColumnStore[i] = new ColumnDef(c, "LastPost", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case Event.Columns.AverageCommentDateTime: ColumnStore[i] = new ColumnDef(c, "AverageCommentDateTime", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case Event.Columns.TotalPhotos: ColumnStore[i] = new ColumnDef(c, "TotalPhotos", SqlDbType.Int, 0); break;
					case Event.Columns.LivePhotos: ColumnStore[i] = new ColumnDef(c, "LivePhotos", SqlDbType.Int, 0); break;
					case Event.Columns.AddedDateTime: ColumnStore[i] = new ColumnDef(c, "AddedDateTime", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case Event.Columns.HasGuestlist: ColumnStore[i] = new ColumnDef(c, "HasGuestlist", SqlDbType.Bit, false); break;
					case Event.Columns.LastLivePhoto: ColumnStore[i] = new ColumnDef(c, "LastLivePhoto", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case Event.Columns.HasSpotter: ColumnStore[i] = new ColumnDef(c, "HasSpotter", SqlDbType.Bit, false); break;
					case Event.Columns.GuestlistOpen: ColumnStore[i] = new ColumnDef(c, "GuestlistOpen", SqlDbType.Bit, false); break;
					case Event.Columns.GuestlistFinished: ColumnStore[i] = new ColumnDef(c, "GuestlistFinished", SqlDbType.Bit, false); break;
					case Event.Columns.GuestlistLimit: ColumnStore[i] = new ColumnDef(c, "GuestlistLimit", SqlDbType.Int, 0); break;
					case Event.Columns.GuestlistCount: ColumnStore[i] = new ColumnDef(c, "GuestlistCount", SqlDbType.Int, 0); break;
					case Event.Columns.GuestlistDetails: ColumnStore[i] = new ColumnDef(c, "GuestlistDetails", SqlDbType.Text, ""); break;
					case Event.Columns.GuestlistPromoterK: ColumnStore[i] = new ColumnDef(c, "GuestlistPromoterK", SqlDbType.Int, 0); break;
					case Event.Columns.GuestlistRegularPrice: ColumnStore[i] = new ColumnDef(c, "GuestlistRegularPrice", SqlDbType.Float, 0.0); break;
					case Event.Columns.GuestlistPrice: ColumnStore[i] = new ColumnDef(c, "GuestlistPrice", SqlDbType.Float, 0.0); break;
					case Event.Columns.GuestlistPromotion: ColumnStore[i] = new ColumnDef(c, "GuestlistPromotion", SqlDbType.Bit, false); break;
					case Event.Columns.StartTime: ColumnStore[i] = new ColumnDef(c, "StartTime", SqlDbType.Int, 0); break;
					case Event.Columns.AdminEmail: ColumnStore[i] = new ColumnDef(c, "AdminEmail", SqlDbType.VarChar, ""); break;
					case Event.Columns.Donated: ColumnStore[i] = new ColumnDef(c, "Donated", SqlDbType.Bit, false); break;
					case Event.Columns.IsDescriptionText: ColumnStore[i] = new ColumnDef(c, "IsDescriptionText", SqlDbType.Bit, false); break;
					case Event.Columns.IsNew: ColumnStore[i] = new ColumnDef(c, "IsNew", SqlDbType.Bit, false); break;
					case Event.Columns.IsDescriptionCleanHtml: ColumnStore[i] = new ColumnDef(c, "IsDescriptionCleanHtml", SqlDbType.Bit, false); break;
					case Event.Columns.IsEdited: ColumnStore[i] = new ColumnDef(c, "IsEdited", SqlDbType.Bit, false); break;
					case Event.Columns.DuplicateGuid: ColumnStore[i] = new ColumnDef(c, "DuplicateGuid", SqlDbType.UniqueIdentifier, Guid.Empty); break;
					case Event.Columns.PicState: ColumnStore[i] = new ColumnDef(c, "PicState", SqlDbType.VarChar, 100, ""); break;
					case Event.Columns.PicPhotoK: ColumnStore[i] = new ColumnDef(c, "PicPhotoK", SqlDbType.Int, 0); break;
					case Event.Columns.PicMiscK: ColumnStore[i] = new ColumnDef(c, "PicMiscK", SqlDbType.Int, 0); break;
					case Event.Columns.UrlFragment: ColumnStore[i] = new ColumnDef(c, "UrlFragment", SqlDbType.VarChar, 255, ""); break;
					case Event.Columns.MusicTypesString: ColumnStore[i] = new ColumnDef(c, "MusicTypesString", SqlDbType.Text, ""); break;
					case Event.Columns.ModeratorUsrK: ColumnStore[i] = new ColumnDef(c, "ModeratorUsrK", SqlDbType.Int, 0); break;
					case Event.Columns.BuyableLockDateTime: ColumnStore[i] = new ColumnDef(c, "BuyableLockDateTime", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case Event.Columns.IsTicketsAvailable: ColumnStore[i] = new ColumnDef(c, "IsTicketsAvailable", SqlDbType.Bit, false); break;
					case Event.Columns.TicketHeat: ColumnStore[i] = new ColumnDef(c, "TicketHeat", SqlDbType.Float, 0.0); break;
					case Event.Columns.HasHilight: ColumnStore[i] = new ColumnDef(c, "HasHilight", SqlDbType.Bit, false); break;
					case Event.Columns.UsrAttendCount: ColumnStore[i] = new ColumnDef(c, "UsrAttendCount", SqlDbType.Int, 0); break;
					case Event.Columns.FixedDiscount: ColumnStore[i] = new ColumnDef(c, "FixedDiscount", SqlDbType.Float, 0.0); break;
					case Event.Columns.IsPriceFixed: ColumnStore[i] = new ColumnDef(c, "IsPriceFixed", SqlDbType.Bit, false); break;
					case Event.Columns.Lat: ColumnStore[i] = new ColumnDef(c, "Lat", SqlDbType.Float, null); break;
					case Event.Columns.Lon: ColumnStore[i] = new ColumnDef(c, "Lon", SqlDbType.Float, null); break;
					case Event.Columns.HtmId: ColumnStore[i] = new ColumnDef(c, "HtmId", SqlDbType.BigInt, 8, SqlColumnFlag.IsComputed, null); break;
					case Event.Columns.DontShowHotelLink: ColumnStore[i] = new ColumnDef(c, "DontShowHotelLink", SqlDbType.Bit, null); break;
					case Event.Columns.SpotterRequest: ColumnStore[i] = new ColumnDef(c, "SpotterRequest", SqlDbType.Bit, null); break;
					case Event.Columns.SpotterRequestName: ColumnStore[i] = new ColumnDef(c, "SpotterRequestName", SqlDbType.VarChar, 100, null); break;
					case Event.Columns.SpotterRequestNumber: ColumnStore[i] = new ColumnDef(c, "SpotterRequestNumber", SqlDbType.VarChar, 100, null); break;
					case Event.Columns.FacebookEventId: ColumnStore[i] = new ColumnDef(c, "FacebookEventId", SqlDbType.BigInt, null); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(Event.Columns.K);
						InitColumn(Event.Columns.Name);
						InitColumn(Event.Columns.ShortDetailsHtml);
						InitColumn(Event.Columns.LongDetailsHtml);
						InitColumn(Event.Columns.LongDetailsPlain);
						InitColumn(Event.Columns.Pic);
						InitColumn(Event.Columns.DateTime);
						InitColumn(Event.Columns.VenueK);
						InitColumn(Event.Columns.AdminNote);
						InitColumn(Event.Columns.Capacity);
						InitColumn(Event.Columns.OwnerUsrK);
						InitColumn(Event.Columns.PicNew);
						InitColumn(Event.Columns.TotalComments);
						InitColumn(Event.Columns.LastPost);
						InitColumn(Event.Columns.AverageCommentDateTime);
						InitColumn(Event.Columns.TotalPhotos);
						InitColumn(Event.Columns.LivePhotos);
						InitColumn(Event.Columns.AddedDateTime);
						InitColumn(Event.Columns.HasGuestlist);
						InitColumn(Event.Columns.LastLivePhoto);
						InitColumn(Event.Columns.HasSpotter);
						InitColumn(Event.Columns.GuestlistOpen);
						InitColumn(Event.Columns.GuestlistFinished);
						InitColumn(Event.Columns.GuestlistLimit);
						InitColumn(Event.Columns.GuestlistCount);
						InitColumn(Event.Columns.GuestlistDetails);
						InitColumn(Event.Columns.GuestlistPromoterK);
						InitColumn(Event.Columns.GuestlistRegularPrice);
						InitColumn(Event.Columns.GuestlistPrice);
						InitColumn(Event.Columns.GuestlistPromotion);
						InitColumn(Event.Columns.StartTime);
						InitColumn(Event.Columns.AdminEmail);
						InitColumn(Event.Columns.Donated);
						InitColumn(Event.Columns.IsDescriptionText);
						InitColumn(Event.Columns.IsNew);
						InitColumn(Event.Columns.IsDescriptionCleanHtml);
						InitColumn(Event.Columns.IsEdited);
						InitColumn(Event.Columns.DuplicateGuid);
						InitColumn(Event.Columns.PicState);
						InitColumn(Event.Columns.PicPhotoK);
						InitColumn(Event.Columns.PicMiscK);
						InitColumn(Event.Columns.UrlFragment);
						InitColumn(Event.Columns.MusicTypesString);
						InitColumn(Event.Columns.ModeratorUsrK);
						InitColumn(Event.Columns.BuyableLockDateTime);
						InitColumn(Event.Columns.IsTicketsAvailable);
						InitColumn(Event.Columns.TicketHeat);
						InitColumn(Event.Columns.HasHilight);
						InitColumn(Event.Columns.UsrAttendCount);
						InitColumn(Event.Columns.FixedDiscount);
						InitColumn(Event.Columns.IsPriceFixed);
						InitColumn(Event.Columns.Lat);
						InitColumn(Event.Columns.Lon);
						InitColumn(Event.Columns.HtmId);
						InitColumn(Event.Columns.DontShowHotelLink);
						InitColumn(Event.Columns.SpotterRequest);
						InitColumn(Event.Columns.SpotterRequestName);
						InitColumn(Event.Columns.SpotterRequestNumber);
						InitColumn(Event.Columns.FacebookEventId);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region EventBrand
	/// <summary>
	/// Links an event to one or many brands
	/// </summary>
	public partial class EventBrand : Model.Entities.EventBrand, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// Link to Event table
			/// </summary>
			EventK = 0x001c0001,
			/// <summary>
			/// Link to the Brand table
			/// </summary>
			BrandK = 0x001c0002,
		}
		#endregion
		public static string GetColumnName(EventBrand.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case EventBrand.Columns.EventK: return "EventK";
						case EventBrand.Columns.BrandK: return "BrandK";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(EventBrand.Columns columnEnum)
		{
			switch (columnEnum)
			{
						default: return false;
			}
		}


		#region Common
	 
		public EventBrand(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);}
		public EventBrand()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.EventBrand);
		}
		public EventBrand(BobSet bs)
		{
			this.Bob = new Bob(Bobs.Tables.Defs.EventBrand, bs);
		}
		public EventBrand(IBob Parent, object Column) : this()
		{
			this.Bob.GetBobFromParentSimple(Parent, Column, TablesEnum.EventBrand);
		}
		public EventBrand(int EventK, int BrandK) : this()
		{
			this.Bob.GetBobFromPrimaryKeyArray(new Q[] {new Q(EventBrand.Columns.EventK,EventK), new Q(EventBrand.Columns.BrandK,BrandK)});
		} 
		#endregion

	}
	#endregion
	#region EventBrandTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region EventBrand
	/// <summary>
	/// Links an event to one or many brands
	/// </summary>
	[Serializable]
	public partial class EventBrand 
	{
		
		#region Simple members
		/// <summary>
		/// Link to Event table
		/// </summary>
		public override int EventK
		{
			get { return (int)this[EventBrand.Columns.EventK]; }
			set { this[EventBrand.Columns.EventK] = value; }
		}
		/// <summary>
		/// Link to the Brand table
		/// </summary>
		public override int BrandK
		{
			get { return (int)this[EventBrand.Columns.BrandK]; }
			set { this[EventBrand.Columns.BrandK] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildEventBrands
	{
		CachedSqlSelect<EventBrand> ChildEventBrands();
		CachedSqlSelect<EventBrand> ChildEventBrands(Q where);
		CachedSqlSelect<EventBrand> ChildEventBrands(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<EventBrand> ChildEventBrands(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class EventBrand 
		{
		}

	#region EventBrandDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region EventBrandDataHolder
	/// <summary>
	/// Links an event to one or many brandsDataHolder
	/// </summary>
	[Serializable]
	public partial class EventBrandDataHolder : DataHolder<EventBrand>
	{
		EventBrand dataHolder;
		[NonSerializedAttribute] EventBrand bob;

		public EventBrandDataHolder()
		{
			this.dataHolder = new EventBrand();
		}
		
		void CopyValues(EventBrand source, EventBrand destination)
		{
			destination[Bobs.EventBrand.Columns.EventK] = source[Bobs.EventBrand.Columns.EventK];
			destination[Bobs.EventBrand.Columns.BrandK] = source[Bobs.EventBrand.Columns.BrandK];
		}
		
		public EventBrandDataHolder(EventBrand bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// Link to Event table
		/// </summary>
		public int EventK
		{
			get { return dataHolder.EventK; }
			set { this.dataHolder.EventK = value; }
		}
		/// <summary>
		/// Link to the Brand table
		/// </summary>
		public int BrandK
		{
			get { return dataHolder.BrandK; }
			set { this.dataHolder.BrandK = value; }
		}
		#endregion
		public EventBrand EventBrand
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new EventBrand(K);
					}
					else
					{
						bob = new EventBrand();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region EventBrandSet
	public partial class EventBrandSet : BobSet, IEnumerable<EventBrand>
	{
		public EventBrandSet(Query query) : base(query) { }

		public EventBrand this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new EventBrand(this);
					((EventBrand)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (EventBrand)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new EventBrandTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<EventBrand> ToList()
		{
			List<EventBrand> list = new List<EventBrand>();
			foreach (EventBrand item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<EventBrand> Members

		public new IEnumerator<EventBrand> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region EventBrandTableDef
	public class EventBrandTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "EventBrand";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "8CFC8B28";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return EventBrand.GetColumnName((EventBrand.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.EventBrand;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return false;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return null;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			EventBrand.Columns c = (EventBrand.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case EventBrand.Columns.EventK: ColumnStore[i] = new ColumnDef(c, "EventK", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey, 0); break;
					case EventBrand.Columns.BrandK: ColumnStore[i] = new ColumnDef(c, "BrandK", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey, 0); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(EventBrand.Columns.EventK);
						InitColumn(EventBrand.Columns.BrandK);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region EventMusicType
	/// <summary>
	/// Links an event to many MusicTypes - the Music types that will be played
	/// </summary>
	public partial class EventMusicType : Model.Entities.EventMusicType, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// Link to Event table
			/// </summary>
			EventK = 0x001d0001,
			/// <summary>
			/// Link to the MusicType table
			/// </summary>
			MusicTypeK = 0x001d0002,
		}
		#endregion
		public static string GetColumnName(EventMusicType.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case EventMusicType.Columns.EventK: return "EventK";
						case EventMusicType.Columns.MusicTypeK: return "MusicTypeK";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(EventMusicType.Columns columnEnum)
		{
			switch (columnEnum)
			{
						default: return false;
			}
		}


		#region Common
	 
		public EventMusicType(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);}
		public EventMusicType()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.EventMusicType);
		}
		public EventMusicType(BobSet bs)
		{
			this.Bob = new Bob(Bobs.Tables.Defs.EventMusicType, bs);
		}
		public EventMusicType(IBob Parent, object Column) : this()
		{
			this.Bob.GetBobFromParentSimple(Parent, Column, TablesEnum.EventMusicType);
		}
		public EventMusicType(int EventK, int MusicTypeK) : this()
		{
			this.Bob.GetBobFromPrimaryKeyArray(new Q[] {new Q(EventMusicType.Columns.EventK,EventK), new Q(EventMusicType.Columns.MusicTypeK,MusicTypeK)});
		} 
		#endregion

	}
	#endregion
	#region EventMusicTypeTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region EventMusicType
	/// <summary>
	/// Links an event to many MusicTypes - the Music types that will be played
	/// </summary>
	[Serializable]
	public partial class EventMusicType 
	{
		
		#region Simple members
		/// <summary>
		/// Link to Event table
		/// </summary>
		public override int EventK
		{
			get { return (int)this[EventMusicType.Columns.EventK]; }
			set { this[EventMusicType.Columns.EventK] = value; }
		}
		/// <summary>
		/// Link to the MusicType table
		/// </summary>
		public override int MusicTypeK
		{
			get { return (int)this[EventMusicType.Columns.MusicTypeK]; }
			set { this[EventMusicType.Columns.MusicTypeK] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildEventMusicTypes
	{
		CachedSqlSelect<EventMusicType> ChildEventMusicTypes();
		CachedSqlSelect<EventMusicType> ChildEventMusicTypes(Q where);
		CachedSqlSelect<EventMusicType> ChildEventMusicTypes(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<EventMusicType> ChildEventMusicTypes(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class EventMusicType 
		{
		}

	#region EventMusicTypeDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region EventMusicTypeDataHolder
	/// <summary>
	/// Links an event to many MusicTypes - the Music types that will be playedDataHolder
	/// </summary>
	[Serializable]
	public partial class EventMusicTypeDataHolder : DataHolder<EventMusicType>
	{
		EventMusicType dataHolder;
		[NonSerializedAttribute] EventMusicType bob;

		public EventMusicTypeDataHolder()
		{
			this.dataHolder = new EventMusicType();
		}
		
		void CopyValues(EventMusicType source, EventMusicType destination)
		{
			destination[Bobs.EventMusicType.Columns.EventK] = source[Bobs.EventMusicType.Columns.EventK];
			destination[Bobs.EventMusicType.Columns.MusicTypeK] = source[Bobs.EventMusicType.Columns.MusicTypeK];
		}
		
		public EventMusicTypeDataHolder(EventMusicType bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// Link to Event table
		/// </summary>
		public int EventK
		{
			get { return dataHolder.EventK; }
			set { this.dataHolder.EventK = value; }
		}
		/// <summary>
		/// Link to the MusicType table
		/// </summary>
		public int MusicTypeK
		{
			get { return dataHolder.MusicTypeK; }
			set { this.dataHolder.MusicTypeK = value; }
		}
		#endregion
		public EventMusicType EventMusicType
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new EventMusicType(K);
					}
					else
					{
						bob = new EventMusicType();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region EventMusicTypeSet
	public partial class EventMusicTypeSet : BobSet, IEnumerable<EventMusicType>
	{
		public EventMusicTypeSet(Query query) : base(query) { }

		public EventMusicType this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new EventMusicType(this);
					((EventMusicType)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (EventMusicType)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new EventMusicTypeTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<EventMusicType> ToList()
		{
			List<EventMusicType> list = new List<EventMusicType>();
			foreach (EventMusicType item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<EventMusicType> Members

		public new IEnumerator<EventMusicType> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region EventMusicTypeTableDef
	public class EventMusicTypeTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "EventMusicType";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "D9782475";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return EventMusicType.GetColumnName((EventMusicType.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.EventMusicType;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return false;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return null;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			EventMusicType.Columns c = (EventMusicType.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case EventMusicType.Columns.EventK: ColumnStore[i] = new ColumnDef(c, "EventK", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey, 0); break;
					case EventMusicType.Columns.MusicTypeK: ColumnStore[i] = new ColumnDef(c, "MusicTypeK", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey, 0); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(EventMusicType.Columns.EventK);
						InitColumn(EventMusicType.Columns.MusicTypeK);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region FacebookPost
	/// <summary>
	/// Facebook posts
	/// </summary>
	public partial class FacebookPost : Model.Entities.FacebookPost, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// Key
			/// </summary>
			K = 0x001e0001,
			/// <summary>
			/// Date/time
			/// </summary>
			DateTime = 0x001e0002,
			/// <summary>
			/// Type
			/// </summary>
			Type = 0x001e0003,
			/// <summary>
			/// The connected Usr at the time
			/// </summary>
			UsrK = 0x001e0004,
			/// <summary>
			/// Content data in XML
			/// </summary>
			Content = 0x001e0005,
			/// <summary>
			/// Facebook user id
			/// </summary>
			FacebookUid = 0x001e0006,
			/// <summary>
			/// Int data used for de-duplicates
			/// </summary>
			DataInt = 0x001e0007,
			/// <summary>
			/// Total number of hits
			/// </summary>
			Hits = 0x001e0008,
		}
		#endregion
		public static string GetColumnName(FacebookPost.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case FacebookPost.Columns.K: return "K";
						case FacebookPost.Columns.DateTime: return "DateTime";
						case FacebookPost.Columns.Type: return "Type";
						case FacebookPost.Columns.UsrK: return "UsrK";
						case FacebookPost.Columns.Content: return "Content";
						case FacebookPost.Columns.FacebookUid: return "FacebookUid";
						case FacebookPost.Columns.DataInt: return "DataInt";
						case FacebookPost.Columns.Hits: return "Hits";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(FacebookPost.Columns columnEnum)
		{
			switch (columnEnum)
			{
												default: return false;
			}
		}


		#region Common
 
		public FacebookPost(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);  }
		public FacebookPost()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.FacebookPost);
		}
		public FacebookPost(BobSet bs)
		{
			this.Bob = new Bob(bs.Table, bs);
		}
		public FacebookPost(int FacebookPostK, IBob Parent, object Column)
			: this()
		{
			Bob.GetBobFromParent(FacebookPostK, Parent.Bob, Column, TablesEnum.FacebookPost);
		}
		public FacebookPost(int FacebookPostK)
			: this()
		{
			Bob.GetBobFromPrimaryKey(FacebookPostK);
		}
		#endregion

	}
	#endregion
	#region FacebookPostTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region FacebookPost
	/// <summary>
	/// Facebook posts
	/// </summary>
	[Serializable]
	public partial class FacebookPost 
	{
		
		#region Simple members
		/// <summary>
		/// Key
		/// </summary>
		public override int K
		{
			get { return (int)this[FacebookPost.Columns.K] as int? ?? 0 ; }
			set { this[FacebookPost.Columns.K] = value; }
		}
		/// <summary>
		/// Date/time
		/// </summary>
		public override DateTime? DateTime
		{
			get { return (DateTime?)this[FacebookPost.Columns.DateTime]; }
			set { this[FacebookPost.Columns.DateTime] = value; }
		}
		/// <summary>
		/// Type
		/// </summary>
		public override int? Type
		{
			get { return (int?)this[FacebookPost.Columns.Type]; }
			set { this[FacebookPost.Columns.Type] = value; }
		}
		/// <summary>
		/// The connected Usr at the time
		/// </summary>
		public override int? UsrK
		{
			get { return (int?)this[FacebookPost.Columns.UsrK]; }
			set { this[FacebookPost.Columns.UsrK] = value; }
		}
		/// <summary>
		/// Content data in XML
		/// </summary>
		public override string Content
		{
			get { return (string)this[FacebookPost.Columns.Content]; }
			set { this[FacebookPost.Columns.Content] = value; }
		}
		/// <summary>
		/// Facebook user id
		/// </summary>
		public override long? FacebookUid
		{
			get { return (long?)this[FacebookPost.Columns.FacebookUid]; }
			set { this[FacebookPost.Columns.FacebookUid] = value; }
		}
		/// <summary>
		/// Int data used for de-duplicates
		/// </summary>
		public override int DataInt
		{
			get { return (int)this[FacebookPost.Columns.DataInt]; }
			set { this[FacebookPost.Columns.DataInt] = value; }
		}
		/// <summary>
		/// Total number of hits
		/// </summary>
		public override int? Hits
		{
			get { return (int?)this[FacebookPost.Columns.Hits]; }
			set { this[FacebookPost.Columns.Hits] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildFacebookPosts
	{
		CachedSqlSelect<FacebookPost> ChildFacebookPosts();
		CachedSqlSelect<FacebookPost> ChildFacebookPosts(Q where);
		CachedSqlSelect<FacebookPost> ChildFacebookPosts(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<FacebookPost> ChildFacebookPosts(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class FacebookPost 
		{
		}

	#region FacebookPostDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region FacebookPostDataHolder
	/// <summary>
	/// Facebook postsDataHolder
	/// </summary>
	[Serializable]
	public partial class FacebookPostDataHolder : DataHolder<FacebookPost>
	{
		FacebookPost dataHolder;
		[NonSerializedAttribute] FacebookPost bob;

		public FacebookPostDataHolder()
		{
			this.dataHolder = new FacebookPost();
		}
		
		void CopyValues(FacebookPost source, FacebookPost destination)
		{
			destination[Bobs.FacebookPost.Columns.K] = source[Bobs.FacebookPost.Columns.K];
			destination[Bobs.FacebookPost.Columns.DateTime] = source[Bobs.FacebookPost.Columns.DateTime];
			destination[Bobs.FacebookPost.Columns.Type] = source[Bobs.FacebookPost.Columns.Type];
			destination[Bobs.FacebookPost.Columns.UsrK] = source[Bobs.FacebookPost.Columns.UsrK];
			destination[Bobs.FacebookPost.Columns.Content] = source[Bobs.FacebookPost.Columns.Content];
			destination[Bobs.FacebookPost.Columns.FacebookUid] = source[Bobs.FacebookPost.Columns.FacebookUid];
			destination[Bobs.FacebookPost.Columns.DataInt] = source[Bobs.FacebookPost.Columns.DataInt];
			destination[Bobs.FacebookPost.Columns.Hits] = source[Bobs.FacebookPost.Columns.Hits];
		}
		
		public FacebookPostDataHolder(FacebookPost bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// Key
		/// </summary>
		public int K
		{
			get { return dataHolder.K; }
			set { this.dataHolder.K = value; }
		}
		/// <summary>
		/// Date/time
		/// </summary>
		public DateTime? DateTime
		{
			get { return dataHolder.DateTime; }
			set { this.dataHolder.DateTime = value; }
		}
		/// <summary>
		/// Type
		/// </summary>
		public int? Type
		{
			get { return dataHolder.Type; }
			set { this.dataHolder.Type = value; }
		}
		/// <summary>
		/// The connected Usr at the time
		/// </summary>
		public int? UsrK
		{
			get { return dataHolder.UsrK; }
			set { this.dataHolder.UsrK = value; }
		}
		/// <summary>
		/// Content data in XML
		/// </summary>
		public string Content
		{
			get { return dataHolder.Content; }
			set { this.dataHolder.Content = value; }
		}
		/// <summary>
		/// Facebook user id
		/// </summary>
		public long? FacebookUid
		{
			get { return dataHolder.FacebookUid; }
			set { this.dataHolder.FacebookUid = value; }
		}
		/// <summary>
		/// Int data used for de-duplicates
		/// </summary>
		public int DataInt
		{
			get { return dataHolder.DataInt; }
			set { this.dataHolder.DataInt = value; }
		}
		/// <summary>
		/// Total number of hits
		/// </summary>
		public int? Hits
		{
			get { return dataHolder.Hits; }
			set { this.dataHolder.Hits = value; }
		}
		#endregion
		public FacebookPost FacebookPost
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new FacebookPost(K);
					}
					else
					{
						bob = new FacebookPost();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region FacebookPostSet
	public partial class FacebookPostSet : BobSet, IEnumerable<FacebookPost>
	{
		public FacebookPostSet(Query query) : base(query) { }

		public FacebookPost this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new FacebookPost(this);
					((FacebookPost)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (FacebookPost)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new FacebookPostTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<FacebookPost> ToList()
		{
			List<FacebookPost> list = new List<FacebookPost>();
			foreach (FacebookPost item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<FacebookPost> Members

		public new IEnumerator<FacebookPost> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region FacebookPostTableDef
	public class FacebookPostTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "FacebookPost";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "6D42EC75";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return FacebookPost.GetColumnName((FacebookPost.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.FacebookPost;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return true;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return FacebookPost.Columns.K;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			FacebookPost.Columns c = (FacebookPost.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case FacebookPost.Columns.K: ColumnStore[i] = new ColumnDef(c, "K", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey | SqlColumnFlag.AutoNumber, null); break;
					case FacebookPost.Columns.DateTime: ColumnStore[i] = new ColumnDef(c, "DateTime", SqlDbType.DateTime, 16, null); break;
					case FacebookPost.Columns.Type: ColumnStore[i] = new ColumnDef(c, "Type", SqlDbType.Int, null); break;
					case FacebookPost.Columns.UsrK: ColumnStore[i] = new ColumnDef(c, "UsrK", SqlDbType.Int, null); break;
					case FacebookPost.Columns.Content: ColumnStore[i] = new ColumnDef(c, "Content", SqlDbType.Text, null); break;
					case FacebookPost.Columns.FacebookUid: ColumnStore[i] = new ColumnDef(c, "FacebookUid", SqlDbType.BigInt, null); break;
					case FacebookPost.Columns.DataInt: ColumnStore[i] = new ColumnDef(c, "DataInt", SqlDbType.Int, 0); break;
					case FacebookPost.Columns.Hits: ColumnStore[i] = new ColumnDef(c, "Hits", SqlDbType.Int, null); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(FacebookPost.Columns.K);
						InitColumn(FacebookPost.Columns.DateTime);
						InitColumn(FacebookPost.Columns.Type);
						InitColumn(FacebookPost.Columns.UsrK);
						InitColumn(FacebookPost.Columns.Content);
						InitColumn(FacebookPost.Columns.FacebookUid);
						InitColumn(FacebookPost.Columns.DataInt);
						InitColumn(FacebookPost.Columns.Hits);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region Fiat500Entry
	/// <summary>
	/// Entries for the Fiat 500 competition
	/// </summary>
	public partial class Fiat500Entry : Model.Entities.Fiat500Entry, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// Primary key
			/// </summary>
			K = 0x001f0001,
			/// <summary>
			/// K of Usr who filled out the form
			/// </summary>
			UsrK = 0x001f0002,
			/// <summary>
			/// server
			/// </summary>
			Submitted = 0x001f0003,
			/// <summary>
			/// server
			/// </summary>
			FirstName = 0x001f0004,
			/// <summary>
			/// server
			/// </summary>
			LastName = 0x001f0005,
			/// <summary>
			/// server
			/// </summary>
			MobileNumber = 0x001f0006,
			/// <summary>
			/// server
			/// </summary>
			EmailAddress = 0x001f0007,
			/// <summary>
			/// server
			/// </summary>
			HouseNumberAndStreetName = 0x001f0008,
			/// <summary>
			/// server
			/// </summary>
			Town = 0x001f0009,
			/// <summary>
			/// server
			/// </summary>
			City = 0x001f000a,
			/// <summary>
			/// server
			/// </summary>
			County = 0x001f000b,
			/// <summary>
			/// server
			/// </summary>
			PostCode = 0x001f000c,
			/// <summary>
			/// server
			/// </summary>
			AcceptConditions = 0x001f000d,
			/// <summary>
			/// server
			/// </summary>
			NumberOfKids = 0x001f000e,
			/// <summary>
			/// server
			/// </summary>
			NotifyByEmail = 0x001f000f,
			/// <summary>
			/// server
			/// </summary>
			NotifyByPost = 0x001f0010,
			/// <summary>
			/// server
			/// </summary>
			NotifyByPhone = 0x001f0011,
			/// <summary>
			/// server
			/// </summary>
			NotifyBySms = 0x001f0012,
		}
		#endregion
		public static string GetColumnName(Fiat500Entry.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case Fiat500Entry.Columns.K: return "K";
						case Fiat500Entry.Columns.UsrK: return "UsrK";
						case Fiat500Entry.Columns.Submitted: return "Submitted";
						case Fiat500Entry.Columns.FirstName: return "FirstName";
						case Fiat500Entry.Columns.LastName: return "LastName";
						case Fiat500Entry.Columns.MobileNumber: return "MobileNumber";
						case Fiat500Entry.Columns.EmailAddress: return "EmailAddress";
						case Fiat500Entry.Columns.HouseNumberAndStreetName: return "HouseNumberAndStreetName";
						case Fiat500Entry.Columns.Town: return "Town";
						case Fiat500Entry.Columns.City: return "City";
						case Fiat500Entry.Columns.County: return "County";
						case Fiat500Entry.Columns.PostCode: return "PostCode";
						case Fiat500Entry.Columns.AcceptConditions: return "AcceptConditions";
						case Fiat500Entry.Columns.NumberOfKids: return "NumberOfKids";
						case Fiat500Entry.Columns.NotifyByEmail: return "NotifyByEmail";
						case Fiat500Entry.Columns.NotifyByPost: return "NotifyByPost";
						case Fiat500Entry.Columns.NotifyByPhone: return "NotifyByPhone";
						case Fiat500Entry.Columns.NotifyBySms: return "NotifyBySms";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(Fiat500Entry.Columns columnEnum)
		{
			switch (columnEnum)
			{
																						default: return false;
			}
		}


		#region Common
 
		public Fiat500Entry(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);  }
		public Fiat500Entry()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.Fiat500Entry);
		}
		public Fiat500Entry(BobSet bs)
		{
			this.Bob = new Bob(bs.Table, bs);
		}
		public Fiat500Entry(int Fiat500EntryK, IBob Parent, object Column)
			: this()
		{
			Bob.GetBobFromParent(Fiat500EntryK, Parent.Bob, Column, TablesEnum.Fiat500Entry);
		}
		public Fiat500Entry(int Fiat500EntryK)
			: this()
		{
			Bob.GetBobFromPrimaryKey(Fiat500EntryK);
		}
		#endregion

	}
	#endregion
	#region Fiat500EntryTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region Fiat500Entry
	/// <summary>
	/// Entries for the Fiat 500 competition
	/// </summary>
	[Serializable]
	public partial class Fiat500Entry 
	{
		
		#region Simple members
		/// <summary>
		/// Primary key
		/// </summary>
		public override int K
		{
			get { return (int)this[Fiat500Entry.Columns.K] as int? ?? 0 ; }
			set { this[Fiat500Entry.Columns.K] = value; }
		}
		/// <summary>
		/// K of Usr who filled out the form
		/// </summary>
		public override int UsrK
		{
			get { return (int)this[Fiat500Entry.Columns.UsrK]; }
			set { this[Fiat500Entry.Columns.UsrK] = value; }
		}
		/// <summary>
		/// server
		/// </summary>
		public override DateTime Submitted
		{
			get { return (DateTime)this[Fiat500Entry.Columns.Submitted]; }
			set { this[Fiat500Entry.Columns.Submitted] = value; }
		}
		/// <summary>
		/// server
		/// </summary>
		public override string FirstName
		{
			get { return (string)this[Fiat500Entry.Columns.FirstName]; }
			set { this[Fiat500Entry.Columns.FirstName] = value; }
		}
		/// <summary>
		/// server
		/// </summary>
		public override string LastName
		{
			get { return (string)this[Fiat500Entry.Columns.LastName]; }
			set { this[Fiat500Entry.Columns.LastName] = value; }
		}
		/// <summary>
		/// server
		/// </summary>
		public override string MobileNumber
		{
			get { return (string)this[Fiat500Entry.Columns.MobileNumber]; }
			set { this[Fiat500Entry.Columns.MobileNumber] = value; }
		}
		/// <summary>
		/// server
		/// </summary>
		public override string EmailAddress
		{
			get { return (string)this[Fiat500Entry.Columns.EmailAddress]; }
			set { this[Fiat500Entry.Columns.EmailAddress] = value; }
		}
		/// <summary>
		/// server
		/// </summary>
		public override string HouseNumberAndStreetName
		{
			get { return (string)this[Fiat500Entry.Columns.HouseNumberAndStreetName]; }
			set { this[Fiat500Entry.Columns.HouseNumberAndStreetName] = value; }
		}
		/// <summary>
		/// server
		/// </summary>
		public override string Town
		{
			get { return (string)this[Fiat500Entry.Columns.Town]; }
			set { this[Fiat500Entry.Columns.Town] = value; }
		}
		/// <summary>
		/// server
		/// </summary>
		public override string City
		{
			get { return (string)this[Fiat500Entry.Columns.City]; }
			set { this[Fiat500Entry.Columns.City] = value; }
		}
		/// <summary>
		/// server
		/// </summary>
		public override string County
		{
			get { return (string)this[Fiat500Entry.Columns.County]; }
			set { this[Fiat500Entry.Columns.County] = value; }
		}
		/// <summary>
		/// server
		/// </summary>
		public override string PostCode
		{
			get { return (string)this[Fiat500Entry.Columns.PostCode]; }
			set { this[Fiat500Entry.Columns.PostCode] = value; }
		}
		/// <summary>
		/// server
		/// </summary>
		public override bool AcceptConditions
		{
			get { return (bool)this[Fiat500Entry.Columns.AcceptConditions]; }
			set { this[Fiat500Entry.Columns.AcceptConditions] = value; }
		}
		/// <summary>
		/// server
		/// </summary>
		public override int NumberOfKids
		{
			get { return (int)this[Fiat500Entry.Columns.NumberOfKids]; }
			set { this[Fiat500Entry.Columns.NumberOfKids] = value; }
		}
		/// <summary>
		/// server
		/// </summary>
		public override bool NotifyByEmail
		{
			get { return (bool)this[Fiat500Entry.Columns.NotifyByEmail]; }
			set { this[Fiat500Entry.Columns.NotifyByEmail] = value; }
		}
		/// <summary>
		/// server
		/// </summary>
		public override bool NotifyByPost
		{
			get { return (bool)this[Fiat500Entry.Columns.NotifyByPost]; }
			set { this[Fiat500Entry.Columns.NotifyByPost] = value; }
		}
		/// <summary>
		/// server
		/// </summary>
		public override bool NotifyByPhone
		{
			get { return (bool)this[Fiat500Entry.Columns.NotifyByPhone]; }
			set { this[Fiat500Entry.Columns.NotifyByPhone] = value; }
		}
		/// <summary>
		/// server
		/// </summary>
		public override bool NotifyBySms
		{
			get { return (bool)this[Fiat500Entry.Columns.NotifyBySms]; }
			set { this[Fiat500Entry.Columns.NotifyBySms] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildFiat500Entrys
	{
		CachedSqlSelect<Fiat500Entry> ChildFiat500Entrys();
		CachedSqlSelect<Fiat500Entry> ChildFiat500Entrys(Q where);
		CachedSqlSelect<Fiat500Entry> ChildFiat500Entrys(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<Fiat500Entry> ChildFiat500Entrys(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class Fiat500Entry 
		{
		}

	#region Fiat500EntryDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region Fiat500EntryDataHolder
	/// <summary>
	/// Entries for the Fiat 500 competitionDataHolder
	/// </summary>
	[Serializable]
	public partial class Fiat500EntryDataHolder : DataHolder<Fiat500Entry>
	{
		Fiat500Entry dataHolder;
		[NonSerializedAttribute] Fiat500Entry bob;

		public Fiat500EntryDataHolder()
		{
			this.dataHolder = new Fiat500Entry();
		}
		
		void CopyValues(Fiat500Entry source, Fiat500Entry destination)
		{
			destination[Bobs.Fiat500Entry.Columns.K] = source[Bobs.Fiat500Entry.Columns.K];
			destination[Bobs.Fiat500Entry.Columns.UsrK] = source[Bobs.Fiat500Entry.Columns.UsrK];
			destination[Bobs.Fiat500Entry.Columns.Submitted] = source[Bobs.Fiat500Entry.Columns.Submitted];
			destination[Bobs.Fiat500Entry.Columns.FirstName] = source[Bobs.Fiat500Entry.Columns.FirstName];
			destination[Bobs.Fiat500Entry.Columns.LastName] = source[Bobs.Fiat500Entry.Columns.LastName];
			destination[Bobs.Fiat500Entry.Columns.MobileNumber] = source[Bobs.Fiat500Entry.Columns.MobileNumber];
			destination[Bobs.Fiat500Entry.Columns.EmailAddress] = source[Bobs.Fiat500Entry.Columns.EmailAddress];
			destination[Bobs.Fiat500Entry.Columns.HouseNumberAndStreetName] = source[Bobs.Fiat500Entry.Columns.HouseNumberAndStreetName];
			destination[Bobs.Fiat500Entry.Columns.Town] = source[Bobs.Fiat500Entry.Columns.Town];
			destination[Bobs.Fiat500Entry.Columns.City] = source[Bobs.Fiat500Entry.Columns.City];
			destination[Bobs.Fiat500Entry.Columns.County] = source[Bobs.Fiat500Entry.Columns.County];
			destination[Bobs.Fiat500Entry.Columns.PostCode] = source[Bobs.Fiat500Entry.Columns.PostCode];
			destination[Bobs.Fiat500Entry.Columns.AcceptConditions] = source[Bobs.Fiat500Entry.Columns.AcceptConditions];
			destination[Bobs.Fiat500Entry.Columns.NumberOfKids] = source[Bobs.Fiat500Entry.Columns.NumberOfKids];
			destination[Bobs.Fiat500Entry.Columns.NotifyByEmail] = source[Bobs.Fiat500Entry.Columns.NotifyByEmail];
			destination[Bobs.Fiat500Entry.Columns.NotifyByPost] = source[Bobs.Fiat500Entry.Columns.NotifyByPost];
			destination[Bobs.Fiat500Entry.Columns.NotifyByPhone] = source[Bobs.Fiat500Entry.Columns.NotifyByPhone];
			destination[Bobs.Fiat500Entry.Columns.NotifyBySms] = source[Bobs.Fiat500Entry.Columns.NotifyBySms];
		}
		
		public Fiat500EntryDataHolder(Fiat500Entry bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// Primary key
		/// </summary>
		public int K
		{
			get { return dataHolder.K; }
			set { this.dataHolder.K = value; }
		}
		/// <summary>
		/// K of Usr who filled out the form
		/// </summary>
		public int UsrK
		{
			get { return dataHolder.UsrK; }
			set { this.dataHolder.UsrK = value; }
		}
		/// <summary>
		/// server
		/// </summary>
		public DateTime Submitted
		{
			get { return dataHolder.Submitted; }
			set { this.dataHolder.Submitted = value; }
		}
		/// <summary>
		/// server
		/// </summary>
		public string FirstName
		{
			get { return dataHolder.FirstName; }
			set { this.dataHolder.FirstName = value; }
		}
		/// <summary>
		/// server
		/// </summary>
		public string LastName
		{
			get { return dataHolder.LastName; }
			set { this.dataHolder.LastName = value; }
		}
		/// <summary>
		/// server
		/// </summary>
		public string MobileNumber
		{
			get { return dataHolder.MobileNumber; }
			set { this.dataHolder.MobileNumber = value; }
		}
		/// <summary>
		/// server
		/// </summary>
		public string EmailAddress
		{
			get { return dataHolder.EmailAddress; }
			set { this.dataHolder.EmailAddress = value; }
		}
		/// <summary>
		/// server
		/// </summary>
		public string HouseNumberAndStreetName
		{
			get { return dataHolder.HouseNumberAndStreetName; }
			set { this.dataHolder.HouseNumberAndStreetName = value; }
		}
		/// <summary>
		/// server
		/// </summary>
		public string Town
		{
			get { return dataHolder.Town; }
			set { this.dataHolder.Town = value; }
		}
		/// <summary>
		/// server
		/// </summary>
		public string City
		{
			get { return dataHolder.City; }
			set { this.dataHolder.City = value; }
		}
		/// <summary>
		/// server
		/// </summary>
		public string County
		{
			get { return dataHolder.County; }
			set { this.dataHolder.County = value; }
		}
		/// <summary>
		/// server
		/// </summary>
		public string PostCode
		{
			get { return dataHolder.PostCode; }
			set { this.dataHolder.PostCode = value; }
		}
		/// <summary>
		/// server
		/// </summary>
		public bool AcceptConditions
		{
			get { return dataHolder.AcceptConditions; }
			set { this.dataHolder.AcceptConditions = value; }
		}
		/// <summary>
		/// server
		/// </summary>
		public int NumberOfKids
		{
			get { return dataHolder.NumberOfKids; }
			set { this.dataHolder.NumberOfKids = value; }
		}
		/// <summary>
		/// server
		/// </summary>
		public bool NotifyByEmail
		{
			get { return dataHolder.NotifyByEmail; }
			set { this.dataHolder.NotifyByEmail = value; }
		}
		/// <summary>
		/// server
		/// </summary>
		public bool NotifyByPost
		{
			get { return dataHolder.NotifyByPost; }
			set { this.dataHolder.NotifyByPost = value; }
		}
		/// <summary>
		/// server
		/// </summary>
		public bool NotifyByPhone
		{
			get { return dataHolder.NotifyByPhone; }
			set { this.dataHolder.NotifyByPhone = value; }
		}
		/// <summary>
		/// server
		/// </summary>
		public bool NotifyBySms
		{
			get { return dataHolder.NotifyBySms; }
			set { this.dataHolder.NotifyBySms = value; }
		}
		#endregion
		public Fiat500Entry Fiat500Entry
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new Fiat500Entry(K);
					}
					else
					{
						bob = new Fiat500Entry();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region Fiat500EntrySet
	public partial class Fiat500EntrySet : BobSet, IEnumerable<Fiat500Entry>
	{
		public Fiat500EntrySet(Query query) : base(query) { }

		public Fiat500Entry this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new Fiat500Entry(this);
					((Fiat500Entry)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (Fiat500Entry)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new Fiat500EntryTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<Fiat500Entry> ToList()
		{
			List<Fiat500Entry> list = new List<Fiat500Entry>();
			foreach (Fiat500Entry item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<Fiat500Entry> Members

		public new IEnumerator<Fiat500Entry> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region Fiat500EntryTableDef
	public class Fiat500EntryTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "Fiat500Entry";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "79123DA7";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return Fiat500Entry.GetColumnName((Fiat500Entry.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.Fiat500Entry;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return true;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return Fiat500Entry.Columns.K;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			Fiat500Entry.Columns c = (Fiat500Entry.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case Fiat500Entry.Columns.K: ColumnStore[i] = new ColumnDef(c, "K", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey | SqlColumnFlag.AutoNumber, null); break;
					case Fiat500Entry.Columns.UsrK: ColumnStore[i] = new ColumnDef(c, "UsrK", SqlDbType.Int, 0); break;
					case Fiat500Entry.Columns.Submitted: ColumnStore[i] = new ColumnDef(c, "Submitted", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case Fiat500Entry.Columns.FirstName: ColumnStore[i] = new ColumnDef(c, "FirstName", SqlDbType.VarChar, ""); break;
					case Fiat500Entry.Columns.LastName: ColumnStore[i] = new ColumnDef(c, "LastName", SqlDbType.VarChar, ""); break;
					case Fiat500Entry.Columns.MobileNumber: ColumnStore[i] = new ColumnDef(c, "MobileNumber", SqlDbType.VarChar, ""); break;
					case Fiat500Entry.Columns.EmailAddress: ColumnStore[i] = new ColumnDef(c, "EmailAddress", SqlDbType.VarChar, ""); break;
					case Fiat500Entry.Columns.HouseNumberAndStreetName: ColumnStore[i] = new ColumnDef(c, "HouseNumberAndStreetName", SqlDbType.VarChar, ""); break;
					case Fiat500Entry.Columns.Town: ColumnStore[i] = new ColumnDef(c, "Town", SqlDbType.VarChar, ""); break;
					case Fiat500Entry.Columns.City: ColumnStore[i] = new ColumnDef(c, "City", SqlDbType.VarChar, ""); break;
					case Fiat500Entry.Columns.County: ColumnStore[i] = new ColumnDef(c, "County", SqlDbType.VarChar, ""); break;
					case Fiat500Entry.Columns.PostCode: ColumnStore[i] = new ColumnDef(c, "PostCode", SqlDbType.VarChar, ""); break;
					case Fiat500Entry.Columns.AcceptConditions: ColumnStore[i] = new ColumnDef(c, "AcceptConditions", SqlDbType.Bit, false); break;
					case Fiat500Entry.Columns.NumberOfKids: ColumnStore[i] = new ColumnDef(c, "NumberOfKids", SqlDbType.Int, 0); break;
					case Fiat500Entry.Columns.NotifyByEmail: ColumnStore[i] = new ColumnDef(c, "NotifyByEmail", SqlDbType.Bit, false); break;
					case Fiat500Entry.Columns.NotifyByPost: ColumnStore[i] = new ColumnDef(c, "NotifyByPost", SqlDbType.Bit, false); break;
					case Fiat500Entry.Columns.NotifyByPhone: ColumnStore[i] = new ColumnDef(c, "NotifyByPhone", SqlDbType.Bit, false); break;
					case Fiat500Entry.Columns.NotifyBySms: ColumnStore[i] = new ColumnDef(c, "NotifyBySms", SqlDbType.Bit, false); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(Fiat500Entry.Columns.K);
						InitColumn(Fiat500Entry.Columns.UsrK);
						InitColumn(Fiat500Entry.Columns.Submitted);
						InitColumn(Fiat500Entry.Columns.FirstName);
						InitColumn(Fiat500Entry.Columns.LastName);
						InitColumn(Fiat500Entry.Columns.MobileNumber);
						InitColumn(Fiat500Entry.Columns.EmailAddress);
						InitColumn(Fiat500Entry.Columns.HouseNumberAndStreetName);
						InitColumn(Fiat500Entry.Columns.Town);
						InitColumn(Fiat500Entry.Columns.City);
						InitColumn(Fiat500Entry.Columns.County);
						InitColumn(Fiat500Entry.Columns.PostCode);
						InitColumn(Fiat500Entry.Columns.AcceptConditions);
						InitColumn(Fiat500Entry.Columns.NumberOfKids);
						InitColumn(Fiat500Entry.Columns.NotifyByEmail);
						InitColumn(Fiat500Entry.Columns.NotifyByPost);
						InitColumn(Fiat500Entry.Columns.NotifyByPhone);
						InitColumn(Fiat500Entry.Columns.NotifyBySms);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region Flyer
	/// <summary>
	/// eFlyers sent out by Promoters
	/// </summary>
	public partial class Flyer : Model.Entities.Flyer, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// K of the Flyer
			/// </summary>
			K = 0x00200001,
			/// <summary>
			/// Promoter
			/// </summary>
			PromoterK = 0x00200002,
			/// <summary>
			/// Name to identify this flyer run
			/// </summary>
			Name = 0x00200003,
			/// <summary>
			/// Subject for the email
			/// </summary>
			Subject = 0x00200004,
			/// <summary>
			/// Background colour of the email to make it blend with flyer. Use hex, e.g. #D2D2D2, but without the #
			/// </summary>
			BackgroundColor = 0x00200005,
			/// <summary>
			/// Flyer image K entry in Misc table
			/// </summary>
			MiscK = 0x00200006,
			/// <summary>
			/// DateTime when to send the eFlyer
			/// </summary>
			SendDateTime = 0x00200007,
			/// <summary>
			/// Url to redirect to when clicking on the Flyer image
			/// </summary>
			LinkTargetUrl = 0x00200008,
			/// <summary>
			/// Comma-delimited list of PlaceKs to which this Flyer is targetted
			/// </summary>
			PlaceKs = 0x00200009,
			/// <summary>
			/// Comma-delimited list of MusicTypeKs to which this Flyer is targetted
			/// </summary>
			MusicTypeKs = 0x0020000a,
			/// <summary>
			/// Total eFlyers we have sent
			/// </summary>
			Sends = 0x0020000b,
			/// <summary>
			/// Total times image has been viewed (downloaded) (or displayed in popup if the user clicks "I can't see the flyer" in the email)
			/// </summary>
			Views = 0x0020000c,
			/// <summary>
			/// Total clicks on the email image (or the popup)
			/// </summary>
			Clicks = 0x0020000d,
			/// <summary>
			/// Total people who unsubscribed because of this flyer
			/// </summary>
			Unsubscribes = 0x0020000e,
			/// <summary>
			/// Optional display name in the From field on the sent email
			/// </summary>
			MailFromDisplayName = 0x0020000f,
			/// <summary>
			/// Is eFlyer only to be sent to Usrs with IsPromoter true?
			/// </summary>
			PromotersOnly = 0x00200010,
			/// <summary>
			/// Is this eFlyer confirmed by admin and queued up to send?
			/// </summary>
			IsReadyToSend = 0x00200011,
			/// <summary>
			/// Is this eFlyer currently in the process of sending?
			/// </summary>
			IsSending = 0x00200012,
			/// <summary>
			/// If the eFlyer has been stopped mid-sending, the last usrK reached
			/// </summary>
			PausedAtUsrK = 0x00200013,
			/// <summary>
			/// Has this eFlyer successfully finished sending?
			/// </summary>
			HasFinishedSending = 0x00200014,
			/// <summary>
			/// Comma-separated list of EventKs, Usrs Attended of which to target this Flyer to
			/// </summary>
			EventKs = 0x00200015,
			/// <summary>
			/// When was the last activity?
			/// </summary>
			DateTimeLastMessageSent = 0x00200016,
			/// <summary>
			/// Is this an HTML eFlyer?
			/// </summary>
			IsHtml = 0x00200017,
			/// <summary>
			/// Html to send for HTML eFlyers
			/// </summary>
			Html = 0x00200018,
			/// <summary>
			/// Text to send as the alternative to HTML
			/// </summary>
			TextAlternative = 0x00200019,
			/// <summary>
			/// How many emasils were skipped due to broken emails?
			/// </summary>
			Broken = 0x0020001a,
			/// <summary>
			/// How many emasils were skipped due to exceptions?
			/// </summary>
			Exceptions = 0x0020001b,
			/// <summary>
			/// How many retries due to mail server out of space?
			/// </summary>
			MailServerRetries = 0x0020001c,
			/// <summary>
			/// When was the last mail server retry?
			/// </summary>
			MailServerLastRetry = 0x0020001d,
		}
		#endregion
		public static string GetColumnName(Flyer.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case Flyer.Columns.K: return "K";
						case Flyer.Columns.PromoterK: return "PromoterK";
						case Flyer.Columns.Name: return "Name";
						case Flyer.Columns.Subject: return "Subject";
						case Flyer.Columns.BackgroundColor: return "BackgroundColor";
						case Flyer.Columns.MiscK: return "MiscK";
						case Flyer.Columns.SendDateTime: return "SendDateTime";
						case Flyer.Columns.LinkTargetUrl: return "LinkTargetUrl";
						case Flyer.Columns.PlaceKs: return "PlaceKs";
						case Flyer.Columns.MusicTypeKs: return "MusicTypeKs";
						case Flyer.Columns.Sends: return "Sends";
						case Flyer.Columns.Views: return "Views";
						case Flyer.Columns.Clicks: return "Clicks";
						case Flyer.Columns.Unsubscribes: return "Unsubscribes";
						case Flyer.Columns.MailFromDisplayName: return "MailFromDisplayName";
						case Flyer.Columns.PromotersOnly: return "PromotersOnly";
						case Flyer.Columns.IsReadyToSend: return "IsReadyToSend";
						case Flyer.Columns.IsSending: return "IsSending";
						case Flyer.Columns.PausedAtUsrK: return "PausedAtUsrK";
						case Flyer.Columns.HasFinishedSending: return "HasFinishedSending";
						case Flyer.Columns.EventKs: return "EventKs";
						case Flyer.Columns.DateTimeLastMessageSent: return "DateTimeLastMessageSent";
						case Flyer.Columns.IsHtml: return "IsHtml";
						case Flyer.Columns.Html: return "Html";
						case Flyer.Columns.TextAlternative: return "TextAlternative";
						case Flyer.Columns.Broken: return "Broken";
						case Flyer.Columns.Exceptions: return "Exceptions";
						case Flyer.Columns.MailServerRetries: return "MailServerRetries";
						case Flyer.Columns.MailServerLastRetry: return "MailServerLastRetry";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(Flyer.Columns columnEnum)
		{
			switch (columnEnum)
			{
																																	default: return false;
			}
		}


		#region Common
 
		public Flyer(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);  }
		public Flyer()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.Flyer);
		}
		public Flyer(BobSet bs)
		{
			this.Bob = new Bob(bs.Table, bs);
		}
		public Flyer(int FlyerK, IBob Parent, object Column)
			: this()
		{
			Bob.GetBobFromParent(FlyerK, Parent.Bob, Column, TablesEnum.Flyer);
		}
		public Flyer(int FlyerK)
			: this()
		{
			Bob.GetBobFromPrimaryKey(FlyerK);
		}
		#endregion

	}
	#endregion
	#region FlyerTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region Flyer
	/// <summary>
	/// eFlyers sent out by Promoters
	/// </summary>
	[Serializable]
	public partial class Flyer 
	{
		
		#region Simple members
		/// <summary>
		/// K of the Flyer
		/// </summary>
		public override int K
		{
			get { return (int)this[Flyer.Columns.K] as int? ?? 0 ; }
			set { this[Flyer.Columns.K] = value; }
		}
		/// <summary>
		/// Promoter
		/// </summary>
		public override int PromoterK
		{
			get { return (int)this[Flyer.Columns.PromoterK]; }
			set { this[Flyer.Columns.PromoterK] = value; }
		}
		/// <summary>
		/// Name to identify this flyer run
		/// </summary>
		public override string Name
		{
			get { return (string)this[Flyer.Columns.Name]; }
			set { this[Flyer.Columns.Name] = value; }
		}
		/// <summary>
		/// Subject for the email
		/// </summary>
		public override string Subject
		{
			get { return (string)this[Flyer.Columns.Subject]; }
			set { this[Flyer.Columns.Subject] = value; }
		}
		/// <summary>
		/// Background colour of the email to make it blend with flyer. Use hex, e.g. #D2D2D2, but without the #
		/// </summary>
		public override string BackgroundColor
		{
			get { return (string)this[Flyer.Columns.BackgroundColor]; }
			set { this[Flyer.Columns.BackgroundColor] = value; }
		}
		/// <summary>
		/// Flyer image K entry in Misc table
		/// </summary>
		public override int MiscK
		{
			get { return (int)this[Flyer.Columns.MiscK]; }
			set { this[Flyer.Columns.MiscK] = value; }
		}
		/// <summary>
		/// DateTime when to send the eFlyer
		/// </summary>
		public override DateTime SendDateTime
		{
			get { return (DateTime)this[Flyer.Columns.SendDateTime]; }
			set { this[Flyer.Columns.SendDateTime] = value; }
		}
		/// <summary>
		/// Url to redirect to when clicking on the Flyer image
		/// </summary>
		public override string LinkTargetUrl
		{
			get { return (string)this[Flyer.Columns.LinkTargetUrl]; }
			set { this[Flyer.Columns.LinkTargetUrl] = value; }
		}
		/// <summary>
		/// Comma-delimited list of PlaceKs to which this Flyer is targetted
		/// </summary>
		public override string PlaceKs
		{
			get { return (string)this[Flyer.Columns.PlaceKs]; }
			set { this[Flyer.Columns.PlaceKs] = value; }
		}
		/// <summary>
		/// Comma-delimited list of MusicTypeKs to which this Flyer is targetted
		/// </summary>
		public override string MusicTypeKs
		{
			get { return (string)this[Flyer.Columns.MusicTypeKs]; }
			set { this[Flyer.Columns.MusicTypeKs] = value; }
		}
		/// <summary>
		/// Total eFlyers we have sent
		/// </summary>
		public override int Sends
		{
			get { return (int)this[Flyer.Columns.Sends]; }
			set { this[Flyer.Columns.Sends] = value; }
		}
		/// <summary>
		/// Total times image has been viewed (downloaded) (or displayed in popup if the user clicks "I can't see the flyer" in the email)
		/// </summary>
		public override int Views
		{
			get { return (int)this[Flyer.Columns.Views]; }
			set { this[Flyer.Columns.Views] = value; }
		}
		/// <summary>
		/// Total clicks on the email image (or the popup)
		/// </summary>
		public override int Clicks
		{
			get { return (int)this[Flyer.Columns.Clicks]; }
			set { this[Flyer.Columns.Clicks] = value; }
		}
		/// <summary>
		/// Total people who unsubscribed because of this flyer
		/// </summary>
		public override int Unsubscribes
		{
			get { return (int)this[Flyer.Columns.Unsubscribes]; }
			set { this[Flyer.Columns.Unsubscribes] = value; }
		}
		/// <summary>
		/// Optional display name in the From field on the sent email
		/// </summary>
		public override string MailFromDisplayName
		{
			get { return (string)this[Flyer.Columns.MailFromDisplayName]; }
			set { this[Flyer.Columns.MailFromDisplayName] = value; }
		}
		/// <summary>
		/// Is eFlyer only to be sent to Usrs with IsPromoter true?
		/// </summary>
		public override bool PromotersOnly
		{
			get { return (bool)this[Flyer.Columns.PromotersOnly]; }
			set { this[Flyer.Columns.PromotersOnly] = value; }
		}
		/// <summary>
		/// Is this eFlyer confirmed by admin and queued up to send?
		/// </summary>
		public override bool IsReadyToSend
		{
			get { return (bool)this[Flyer.Columns.IsReadyToSend]; }
			set { this[Flyer.Columns.IsReadyToSend] = value; }
		}
		/// <summary>
		/// Is this eFlyer currently in the process of sending?
		/// </summary>
		public override bool IsSending
		{
			get { return (bool)this[Flyer.Columns.IsSending]; }
			set { this[Flyer.Columns.IsSending] = value; }
		}
		/// <summary>
		/// If the eFlyer has been stopped mid-sending, the last usrK reached
		/// </summary>
		public override int PausedAtUsrK
		{
			get { return (int)this[Flyer.Columns.PausedAtUsrK]; }
			set { this[Flyer.Columns.PausedAtUsrK] = value; }
		}
		/// <summary>
		/// Has this eFlyer successfully finished sending?
		/// </summary>
		public override bool HasFinishedSending
		{
			get { return (bool)this[Flyer.Columns.HasFinishedSending]; }
			set { this[Flyer.Columns.HasFinishedSending] = value; }
		}
		/// <summary>
		/// Comma-separated list of EventKs, Usrs Attended of which to target this Flyer to
		/// </summary>
		public override string EventKs
		{
			get { return (string)this[Flyer.Columns.EventKs]; }
			set { this[Flyer.Columns.EventKs] = value; }
		}
		/// <summary>
		/// When was the last activity?
		/// </summary>
		public override DateTime? DateTimeLastMessageSent
		{
			get { return (DateTime?)this[Flyer.Columns.DateTimeLastMessageSent]; }
			set { this[Flyer.Columns.DateTimeLastMessageSent] = value; }
		}
		/// <summary>
		/// Is this an HTML eFlyer?
		/// </summary>
		public override bool IsHtml
		{
			get { return (bool)this[Flyer.Columns.IsHtml]; }
			set { this[Flyer.Columns.IsHtml] = value; }
		}
		/// <summary>
		/// Html to send for HTML eFlyers
		/// </summary>
		public override string Html
		{
			get { return (string)this[Flyer.Columns.Html]; }
			set { this[Flyer.Columns.Html] = value; }
		}
		/// <summary>
		/// Text to send as the alternative to HTML
		/// </summary>
		public override string TextAlternative
		{
			get { return (string)this[Flyer.Columns.TextAlternative]; }
			set { this[Flyer.Columns.TextAlternative] = value; }
		}
		/// <summary>
		/// How many emasils were skipped due to broken emails?
		/// </summary>
		public override int Broken
		{
			get { return (int)this[Flyer.Columns.Broken]; }
			set { this[Flyer.Columns.Broken] = value; }
		}
		/// <summary>
		/// How many emasils were skipped due to exceptions?
		/// </summary>
		public override int Exceptions
		{
			get { return (int)this[Flyer.Columns.Exceptions]; }
			set { this[Flyer.Columns.Exceptions] = value; }
		}
		/// <summary>
		/// How many retries due to mail server out of space?
		/// </summary>
		public override int MailServerRetries
		{
			get { return (int)this[Flyer.Columns.MailServerRetries]; }
			set { this[Flyer.Columns.MailServerRetries] = value; }
		}
		/// <summary>
		/// When was the last mail server retry?
		/// </summary>
		public override DateTime? MailServerLastRetry
		{
			get { return (DateTime?)this[Flyer.Columns.MailServerLastRetry]; }
			set { this[Flyer.Columns.MailServerLastRetry] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildFlyers
	{
		CachedSqlSelect<Flyer> ChildFlyers();
		CachedSqlSelect<Flyer> ChildFlyers(Q where);
		CachedSqlSelect<Flyer> ChildFlyers(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<Flyer> ChildFlyers(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class Flyer 
		{
		}

	#region FlyerDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region FlyerDataHolder
	/// <summary>
	/// eFlyers sent out by PromotersDataHolder
	/// </summary>
	[Serializable]
	public partial class FlyerDataHolder : DataHolder<Flyer>
	{
		Flyer dataHolder;
		[NonSerializedAttribute] Flyer bob;

		public FlyerDataHolder()
		{
			this.dataHolder = new Flyer();
		}
		
		void CopyValues(Flyer source, Flyer destination)
		{
			destination[Bobs.Flyer.Columns.K] = source[Bobs.Flyer.Columns.K];
			destination[Bobs.Flyer.Columns.PromoterK] = source[Bobs.Flyer.Columns.PromoterK];
			destination[Bobs.Flyer.Columns.Name] = source[Bobs.Flyer.Columns.Name];
			destination[Bobs.Flyer.Columns.Subject] = source[Bobs.Flyer.Columns.Subject];
			destination[Bobs.Flyer.Columns.BackgroundColor] = source[Bobs.Flyer.Columns.BackgroundColor];
			destination[Bobs.Flyer.Columns.MiscK] = source[Bobs.Flyer.Columns.MiscK];
			destination[Bobs.Flyer.Columns.SendDateTime] = source[Bobs.Flyer.Columns.SendDateTime];
			destination[Bobs.Flyer.Columns.LinkTargetUrl] = source[Bobs.Flyer.Columns.LinkTargetUrl];
			destination[Bobs.Flyer.Columns.PlaceKs] = source[Bobs.Flyer.Columns.PlaceKs];
			destination[Bobs.Flyer.Columns.MusicTypeKs] = source[Bobs.Flyer.Columns.MusicTypeKs];
			destination[Bobs.Flyer.Columns.Sends] = source[Bobs.Flyer.Columns.Sends];
			destination[Bobs.Flyer.Columns.Views] = source[Bobs.Flyer.Columns.Views];
			destination[Bobs.Flyer.Columns.Clicks] = source[Bobs.Flyer.Columns.Clicks];
			destination[Bobs.Flyer.Columns.Unsubscribes] = source[Bobs.Flyer.Columns.Unsubscribes];
			destination[Bobs.Flyer.Columns.MailFromDisplayName] = source[Bobs.Flyer.Columns.MailFromDisplayName];
			destination[Bobs.Flyer.Columns.PromotersOnly] = source[Bobs.Flyer.Columns.PromotersOnly];
			destination[Bobs.Flyer.Columns.IsReadyToSend] = source[Bobs.Flyer.Columns.IsReadyToSend];
			destination[Bobs.Flyer.Columns.IsSending] = source[Bobs.Flyer.Columns.IsSending];
			destination[Bobs.Flyer.Columns.PausedAtUsrK] = source[Bobs.Flyer.Columns.PausedAtUsrK];
			destination[Bobs.Flyer.Columns.HasFinishedSending] = source[Bobs.Flyer.Columns.HasFinishedSending];
			destination[Bobs.Flyer.Columns.EventKs] = source[Bobs.Flyer.Columns.EventKs];
			destination[Bobs.Flyer.Columns.DateTimeLastMessageSent] = source[Bobs.Flyer.Columns.DateTimeLastMessageSent];
			destination[Bobs.Flyer.Columns.IsHtml] = source[Bobs.Flyer.Columns.IsHtml];
			destination[Bobs.Flyer.Columns.Html] = source[Bobs.Flyer.Columns.Html];
			destination[Bobs.Flyer.Columns.TextAlternative] = source[Bobs.Flyer.Columns.TextAlternative];
			destination[Bobs.Flyer.Columns.Broken] = source[Bobs.Flyer.Columns.Broken];
			destination[Bobs.Flyer.Columns.Exceptions] = source[Bobs.Flyer.Columns.Exceptions];
			destination[Bobs.Flyer.Columns.MailServerRetries] = source[Bobs.Flyer.Columns.MailServerRetries];
			destination[Bobs.Flyer.Columns.MailServerLastRetry] = source[Bobs.Flyer.Columns.MailServerLastRetry];
		}
		
		public FlyerDataHolder(Flyer bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// K of the Flyer
		/// </summary>
		public int K
		{
			get { return dataHolder.K; }
			set { this.dataHolder.K = value; }
		}
		/// <summary>
		/// Promoter
		/// </summary>
		public int PromoterK
		{
			get { return dataHolder.PromoterK; }
			set { this.dataHolder.PromoterK = value; }
		}
		/// <summary>
		/// Name to identify this flyer run
		/// </summary>
		public string Name
		{
			get { return dataHolder.Name; }
			set { this.dataHolder.Name = value; }
		}
		/// <summary>
		/// Subject for the email
		/// </summary>
		public string Subject
		{
			get { return dataHolder.Subject; }
			set { this.dataHolder.Subject = value; }
		}
		/// <summary>
		/// Background colour of the email to make it blend with flyer. Use hex, e.g. #D2D2D2, but without the #
		/// </summary>
		public string BackgroundColor
		{
			get { return dataHolder.BackgroundColor; }
			set { this.dataHolder.BackgroundColor = value; }
		}
		/// <summary>
		/// Flyer image K entry in Misc table
		/// </summary>
		public int MiscK
		{
			get { return dataHolder.MiscK; }
			set { this.dataHolder.MiscK = value; }
		}
		/// <summary>
		/// DateTime when to send the eFlyer
		/// </summary>
		public DateTime SendDateTime
		{
			get { return dataHolder.SendDateTime; }
			set { this.dataHolder.SendDateTime = value; }
		}
		/// <summary>
		/// Url to redirect to when clicking on the Flyer image
		/// </summary>
		public string LinkTargetUrl
		{
			get { return dataHolder.LinkTargetUrl; }
			set { this.dataHolder.LinkTargetUrl = value; }
		}
		/// <summary>
		/// Comma-delimited list of PlaceKs to which this Flyer is targetted
		/// </summary>
		public string PlaceKs
		{
			get { return dataHolder.PlaceKs; }
			set { this.dataHolder.PlaceKs = value; }
		}
		/// <summary>
		/// Comma-delimited list of MusicTypeKs to which this Flyer is targetted
		/// </summary>
		public string MusicTypeKs
		{
			get { return dataHolder.MusicTypeKs; }
			set { this.dataHolder.MusicTypeKs = value; }
		}
		/// <summary>
		/// Total eFlyers we have sent
		/// </summary>
		public int Sends
		{
			get { return dataHolder.Sends; }
			set { this.dataHolder.Sends = value; }
		}
		/// <summary>
		/// Total times image has been viewed (downloaded) (or displayed in popup if the user clicks "I can't see the flyer" in the email)
		/// </summary>
		public int Views
		{
			get { return dataHolder.Views; }
			set { this.dataHolder.Views = value; }
		}
		/// <summary>
		/// Total clicks on the email image (or the popup)
		/// </summary>
		public int Clicks
		{
			get { return dataHolder.Clicks; }
			set { this.dataHolder.Clicks = value; }
		}
		/// <summary>
		/// Total people who unsubscribed because of this flyer
		/// </summary>
		public int Unsubscribes
		{
			get { return dataHolder.Unsubscribes; }
			set { this.dataHolder.Unsubscribes = value; }
		}
		/// <summary>
		/// Optional display name in the From field on the sent email
		/// </summary>
		public string MailFromDisplayName
		{
			get { return dataHolder.MailFromDisplayName; }
			set { this.dataHolder.MailFromDisplayName = value; }
		}
		/// <summary>
		/// Is eFlyer only to be sent to Usrs with IsPromoter true?
		/// </summary>
		public bool PromotersOnly
		{
			get { return dataHolder.PromotersOnly; }
			set { this.dataHolder.PromotersOnly = value; }
		}
		/// <summary>
		/// Is this eFlyer confirmed by admin and queued up to send?
		/// </summary>
		public bool IsReadyToSend
		{
			get { return dataHolder.IsReadyToSend; }
			set { this.dataHolder.IsReadyToSend = value; }
		}
		/// <summary>
		/// Is this eFlyer currently in the process of sending?
		/// </summary>
		public bool IsSending
		{
			get { return dataHolder.IsSending; }
			set { this.dataHolder.IsSending = value; }
		}
		/// <summary>
		/// If the eFlyer has been stopped mid-sending, the last usrK reached
		/// </summary>
		public int PausedAtUsrK
		{
			get { return dataHolder.PausedAtUsrK; }
			set { this.dataHolder.PausedAtUsrK = value; }
		}
		/// <summary>
		/// Has this eFlyer successfully finished sending?
		/// </summary>
		public bool HasFinishedSending
		{
			get { return dataHolder.HasFinishedSending; }
			set { this.dataHolder.HasFinishedSending = value; }
		}
		/// <summary>
		/// Comma-separated list of EventKs, Usrs Attended of which to target this Flyer to
		/// </summary>
		public string EventKs
		{
			get { return dataHolder.EventKs; }
			set { this.dataHolder.EventKs = value; }
		}
		/// <summary>
		/// When was the last activity?
		/// </summary>
		public DateTime? DateTimeLastMessageSent
		{
			get { return dataHolder.DateTimeLastMessageSent; }
			set { this.dataHolder.DateTimeLastMessageSent = value; }
		}
		/// <summary>
		/// Is this an HTML eFlyer?
		/// </summary>
		public bool IsHtml
		{
			get { return dataHolder.IsHtml; }
			set { this.dataHolder.IsHtml = value; }
		}
		/// <summary>
		/// Html to send for HTML eFlyers
		/// </summary>
		public string Html
		{
			get { return dataHolder.Html; }
			set { this.dataHolder.Html = value; }
		}
		/// <summary>
		/// Text to send as the alternative to HTML
		/// </summary>
		public string TextAlternative
		{
			get { return dataHolder.TextAlternative; }
			set { this.dataHolder.TextAlternative = value; }
		}
		/// <summary>
		/// How many emasils were skipped due to broken emails?
		/// </summary>
		public int Broken
		{
			get { return dataHolder.Broken; }
			set { this.dataHolder.Broken = value; }
		}
		/// <summary>
		/// How many emasils were skipped due to exceptions?
		/// </summary>
		public int Exceptions
		{
			get { return dataHolder.Exceptions; }
			set { this.dataHolder.Exceptions = value; }
		}
		/// <summary>
		/// How many retries due to mail server out of space?
		/// </summary>
		public int MailServerRetries
		{
			get { return dataHolder.MailServerRetries; }
			set { this.dataHolder.MailServerRetries = value; }
		}
		/// <summary>
		/// When was the last mail server retry?
		/// </summary>
		public DateTime? MailServerLastRetry
		{
			get { return dataHolder.MailServerLastRetry; }
			set { this.dataHolder.MailServerLastRetry = value; }
		}
		#endregion
		public Flyer Flyer
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new Flyer(K);
					}
					else
					{
						bob = new Flyer();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region FlyerSet
	public partial class FlyerSet : BobSet, IEnumerable<Flyer>
	{
		public FlyerSet(Query query) : base(query) { }

		public Flyer this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new Flyer(this);
					((Flyer)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (Flyer)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new FlyerTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<Flyer> ToList()
		{
			List<Flyer> list = new List<Flyer>();
			foreach (Flyer item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<Flyer> Members

		public new IEnumerator<Flyer> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region FlyerTableDef
	public class FlyerTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "Flyer";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "1933EADE";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return Flyer.GetColumnName((Flyer.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.Flyer;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return true;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return Flyer.Columns.K;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			Flyer.Columns c = (Flyer.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case Flyer.Columns.K: ColumnStore[i] = new ColumnDef(c, "K", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey | SqlColumnFlag.AutoNumber, null); break;
					case Flyer.Columns.PromoterK: ColumnStore[i] = new ColumnDef(c, "PromoterK", SqlDbType.Int, 0); break;
					case Flyer.Columns.Name: ColumnStore[i] = new ColumnDef(c, "Name", SqlDbType.VarChar, 100, ""); break;
					case Flyer.Columns.Subject: ColumnStore[i] = new ColumnDef(c, "Subject", SqlDbType.VarChar, 150, ""); break;
					case Flyer.Columns.BackgroundColor: ColumnStore[i] = new ColumnDef(c, "BackgroundColor", SqlDbType.VarChar, 6, ""); break;
					case Flyer.Columns.MiscK: ColumnStore[i] = new ColumnDef(c, "MiscK", SqlDbType.Int, 0); break;
					case Flyer.Columns.SendDateTime: ColumnStore[i] = new ColumnDef(c, "SendDateTime", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case Flyer.Columns.LinkTargetUrl: ColumnStore[i] = new ColumnDef(c, "LinkTargetUrl", SqlDbType.VarChar, 250, ""); break;
					case Flyer.Columns.PlaceKs: ColumnStore[i] = new ColumnDef(c, "PlaceKs", SqlDbType.VarChar, 400, ""); break;
					case Flyer.Columns.MusicTypeKs: ColumnStore[i] = new ColumnDef(c, "MusicTypeKs", SqlDbType.VarChar, 400, ""); break;
					case Flyer.Columns.Sends: ColumnStore[i] = new ColumnDef(c, "Sends", SqlDbType.Int, 0); break;
					case Flyer.Columns.Views: ColumnStore[i] = new ColumnDef(c, "Views", SqlDbType.Int, 0); break;
					case Flyer.Columns.Clicks: ColumnStore[i] = new ColumnDef(c, "Clicks", SqlDbType.Int, 0); break;
					case Flyer.Columns.Unsubscribes: ColumnStore[i] = new ColumnDef(c, "Unsubscribes", SqlDbType.Int, 0); break;
					case Flyer.Columns.MailFromDisplayName: ColumnStore[i] = new ColumnDef(c, "MailFromDisplayName", SqlDbType.VarChar, ""); break;
					case Flyer.Columns.PromotersOnly: ColumnStore[i] = new ColumnDef(c, "PromotersOnly", SqlDbType.Bit, false); break;
					case Flyer.Columns.IsReadyToSend: ColumnStore[i] = new ColumnDef(c, "IsReadyToSend", SqlDbType.Bit, false); break;
					case Flyer.Columns.IsSending: ColumnStore[i] = new ColumnDef(c, "IsSending", SqlDbType.Bit, false); break;
					case Flyer.Columns.PausedAtUsrK: ColumnStore[i] = new ColumnDef(c, "PausedAtUsrK", SqlDbType.Int, 0); break;
					case Flyer.Columns.HasFinishedSending: ColumnStore[i] = new ColumnDef(c, "HasFinishedSending", SqlDbType.Bit, false); break;
					case Flyer.Columns.EventKs: ColumnStore[i] = new ColumnDef(c, "EventKs", SqlDbType.VarChar, 2147483647, null); break;
					case Flyer.Columns.DateTimeLastMessageSent: ColumnStore[i] = new ColumnDef(c, "DateTimeLastMessageSent", SqlDbType.DateTime, 16, null); break;
					case Flyer.Columns.IsHtml: ColumnStore[i] = new ColumnDef(c, "IsHtml", SqlDbType.Bit, false); break;
					case Flyer.Columns.Html: ColumnStore[i] = new ColumnDef(c, "Html", SqlDbType.Text, null); break;
					case Flyer.Columns.TextAlternative: ColumnStore[i] = new ColumnDef(c, "TextAlternative", SqlDbType.Text, null); break;
					case Flyer.Columns.Broken: ColumnStore[i] = new ColumnDef(c, "Broken", SqlDbType.Int, 0); break;
					case Flyer.Columns.Exceptions: ColumnStore[i] = new ColumnDef(c, "Exceptions", SqlDbType.Int, 0); break;
					case Flyer.Columns.MailServerRetries: ColumnStore[i] = new ColumnDef(c, "MailServerRetries", SqlDbType.Int, 0); break;
					case Flyer.Columns.MailServerLastRetry: ColumnStore[i] = new ColumnDef(c, "MailServerLastRetry", SqlDbType.DateTime, 16, null); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(Flyer.Columns.K);
						InitColumn(Flyer.Columns.PromoterK);
						InitColumn(Flyer.Columns.Name);
						InitColumn(Flyer.Columns.Subject);
						InitColumn(Flyer.Columns.BackgroundColor);
						InitColumn(Flyer.Columns.MiscK);
						InitColumn(Flyer.Columns.SendDateTime);
						InitColumn(Flyer.Columns.LinkTargetUrl);
						InitColumn(Flyer.Columns.PlaceKs);
						InitColumn(Flyer.Columns.MusicTypeKs);
						InitColumn(Flyer.Columns.Sends);
						InitColumn(Flyer.Columns.Views);
						InitColumn(Flyer.Columns.Clicks);
						InitColumn(Flyer.Columns.Unsubscribes);
						InitColumn(Flyer.Columns.MailFromDisplayName);
						InitColumn(Flyer.Columns.PromotersOnly);
						InitColumn(Flyer.Columns.IsReadyToSend);
						InitColumn(Flyer.Columns.IsSending);
						InitColumn(Flyer.Columns.PausedAtUsrK);
						InitColumn(Flyer.Columns.HasFinishedSending);
						InitColumn(Flyer.Columns.EventKs);
						InitColumn(Flyer.Columns.DateTimeLastMessageSent);
						InitColumn(Flyer.Columns.IsHtml);
						InitColumn(Flyer.Columns.Html);
						InitColumn(Flyer.Columns.TextAlternative);
						InitColumn(Flyer.Columns.Broken);
						InitColumn(Flyer.Columns.Exceptions);
						InitColumn(Flyer.Columns.MailServerRetries);
						InitColumn(Flyer.Columns.MailServerLastRetry);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region Gallery
	/// <summary>
	/// A gallery contains photos
	/// </summary>
	public partial class Gallery : Model.Entities.Gallery, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// The primary key
			/// </summary>
			K = 0x00210001,
			/// <summary>
			/// The event that these photos were taken at
			/// </summary>
			EventK = 0x00210002,
			/// <summary>
			/// If the gallery is in an article, this is the key
			/// </summary>
			ArticleK = 0x00210003,
			/// <summary>
			/// Name
			/// </summary>
			Name = 0x00210004,
			/// <summary>
			/// Link to the main photo - used for the title image.
			/// </summary>
			MainPhotoK = 0x00210005,
			/// <summary>
			/// Link to the Usr table.
			/// </summary>
			OwnerUsrK = 0x00210006,
			/// <summary>
			/// Total number of photos (live + disabled + new) in the gallery
			/// </summary>
			TotalPhotos = 0x00210007,
			/// <summary>
			/// Total number of live photos in the gallery
			/// </summary>
			LivePhotos = 0x00210008,
			/// <summary>
			/// DateTime when the Gallery was created
			/// </summary>
			CreateDateTime = 0x00210009,
			/// <summary>
			/// DateTime when the last photo was made live
			/// </summary>
			LastLiveDateTime = 0x0021000a,
			/// <summary>
			/// Admin note only visible to photo admins
			/// </summary>
			AdminNote = 0x0021000b,
			/// <summary>
			/// Is this a mobile gallery (with mms photos)?
			/// </summary>
			IsMobile = 0x0021000c,
			/// <summary>
			/// State var used to reconstruct cropper when re-cropping
			/// </summary>
			PicState = 0x0021000d,
			/// <summary>
			/// The Photo that was used to create the Pic.
			/// </summary>
			PicPhotoK = 0x0021000e,
			/// <summary>
			/// The Misc that was used to create the Pic.
			/// </summary>
			PicMiscK = 0x0021000f,
			/// <summary>
			/// The url fragment - so that the url can be generated without accessing parent database records
			/// </summary>
			UrlFragment = 0x00210010,
			/// <summary>
			/// The moderator assigned to this gallery
			/// </summary>
			ModeratorUsrK = 0x00210011,
			/// <summary>
			/// The count of packages in the current upload
			/// </summary>
			CurrentPackageCount = 0x00210012,
			/// <summary>
			/// When did the last package complete?
			/// </summary>
			LastPackageDateTime = 0x00210013,
			/// <summary>
			/// What is the package index of the last package to be completed? (success or fail)
			/// </summary>
			LastPackageIndex = 0x00210014,
			/// <summary>
			/// Is an upload in progress?
			/// </summary>
			UploadInProgress = 0x00210015,
			/// <summary>
			/// How many times has a photo upload failed?
			/// </summary>
			UploadFails = 0x00210016,
			/// <summary>
			/// Watch uploads for comments? (default = true)
			/// </summary>
			WatchUploads = 0x00210017,
			/// <summary>
			/// Has the FinishedUploading task run on this gallery?
			/// </summary>
			RunFinishedUploadingTask = 0x00210018,
		}
		#endregion
		public static string GetColumnName(Gallery.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case Gallery.Columns.K: return "K";
						case Gallery.Columns.EventK: return "EventK";
						case Gallery.Columns.ArticleK: return "ArticleK";
						case Gallery.Columns.Name: return "Name";
						case Gallery.Columns.MainPhotoK: return "MainPhotoK";
						case Gallery.Columns.OwnerUsrK: return "OwnerUsrK";
						case Gallery.Columns.TotalPhotos: return "TotalPhotos";
						case Gallery.Columns.LivePhotos: return "LivePhotos";
						case Gallery.Columns.CreateDateTime: return "CreateDateTime";
						case Gallery.Columns.LastLiveDateTime: return "LastLiveDateTime";
						case Gallery.Columns.AdminNote: return "AdminNote";
						case Gallery.Columns.IsMobile: return "IsMobile";
						case Gallery.Columns.PicState: return "PicState";
						case Gallery.Columns.PicPhotoK: return "PicPhotoK";
						case Gallery.Columns.PicMiscK: return "PicMiscK";
						case Gallery.Columns.UrlFragment: return "UrlFragment";
						case Gallery.Columns.ModeratorUsrK: return "ModeratorUsrK";
						case Gallery.Columns.CurrentPackageCount: return "CurrentPackageCount";
						case Gallery.Columns.LastPackageDateTime: return "LastPackageDateTime";
						case Gallery.Columns.LastPackageIndex: return "LastPackageIndex";
						case Gallery.Columns.UploadInProgress: return "UploadInProgress";
						case Gallery.Columns.UploadFails: return "UploadFails";
						case Gallery.Columns.WatchUploads: return "WatchUploads";
						case Gallery.Columns.RunFinishedUploadingTask: return "RunFinishedUploadingTask";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(Gallery.Columns columnEnum)
		{
			switch (columnEnum)
			{
																												default: return false;
			}
		}


		#region Common
 
		public Gallery(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);  }
		public Gallery()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.Gallery);
		}
		public Gallery(BobSet bs)
		{
			this.Bob = new Bob(bs.Table, bs);
		}
		public Gallery(int GalleryK, IBob Parent, object Column)
			: this()
		{
			Bob.GetBobFromParent(GalleryK, Parent.Bob, Column, TablesEnum.Gallery);
		}
		public Gallery(int GalleryK)
			: this()
		{
			Bob.GetBobFromPrimaryKey(GalleryK);
		}
		#endregion

	}
	#endregion
	#region GalleryTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region Gallery
	/// <summary>
	/// A gallery contains photos
	/// </summary>
	[Serializable]
	public partial class Gallery 
	{
		
		#region Simple members
		/// <summary>
		/// The primary key
		/// </summary>
		public override int K
		{
			get { return (int)this[Gallery.Columns.K] as int? ?? 0 ; }
			set { this[Gallery.Columns.K] = value; }
		}
		/// <summary>
		/// The event that these photos were taken at
		/// </summary>
		public override int EventK
		{
			get { return (int)this[Gallery.Columns.EventK]; }
			set { this[Gallery.Columns.EventK] = value; }
		}
		/// <summary>
		/// If the gallery is in an article, this is the key
		/// </summary>
		public override int ArticleK
		{
			get { return (int)this[Gallery.Columns.ArticleK]; }
			set { this[Gallery.Columns.ArticleK] = value; }
		}
		/// <summary>
		/// Name
		/// </summary>
		public override string Name
		{
			get { return (string)this[Gallery.Columns.Name]; }
			set { this[Gallery.Columns.Name] = value; }
		}
		/// <summary>
		/// Link to the main photo - used for the title image.
		/// </summary>
		public override int MainPhotoK
		{
			get { return (int)this[Gallery.Columns.MainPhotoK]; }
			set { this[Gallery.Columns.MainPhotoK] = value; }
		}
		/// <summary>
		/// Link to the Usr table.
		/// </summary>
		public override int OwnerUsrK
		{
			get { return (int)this[Gallery.Columns.OwnerUsrK]; }
			set { this[Gallery.Columns.OwnerUsrK] = value; }
		}
		/// <summary>
		/// Total number of photos (live + disabled + new) in the gallery
		/// </summary>
		public override int TotalPhotos
		{
			get { return (int)this[Gallery.Columns.TotalPhotos]; }
			set { this[Gallery.Columns.TotalPhotos] = value; }
		}
		/// <summary>
		/// Total number of live photos in the gallery
		/// </summary>
		public override int LivePhotos
		{
			get { return (int)this[Gallery.Columns.LivePhotos]; }
			set { this[Gallery.Columns.LivePhotos] = value; }
		}
		/// <summary>
		/// DateTime when the Gallery was created
		/// </summary>
		public override DateTime CreateDateTime
		{
			get { return (DateTime)this[Gallery.Columns.CreateDateTime]; }
			set { this[Gallery.Columns.CreateDateTime] = value; }
		}
		/// <summary>
		/// DateTime when the last photo was made live
		/// </summary>
		public override DateTime LastLiveDateTime
		{
			get { return (DateTime)this[Gallery.Columns.LastLiveDateTime]; }
			set { this[Gallery.Columns.LastLiveDateTime] = value; }
		}
		/// <summary>
		/// Admin note only visible to photo admins
		/// </summary>
		public override string AdminNote
		{
			get { return (string)this[Gallery.Columns.AdminNote]; }
			set { this[Gallery.Columns.AdminNote] = value; }
		}
		/// <summary>
		/// Is this a mobile gallery (with mms photos)?
		/// </summary>
		public override bool IsMobile
		{
			get { return (bool)this[Gallery.Columns.IsMobile]; }
			set { this[Gallery.Columns.IsMobile] = value; }
		}
		/// <summary>
		/// State var used to reconstruct cropper when re-cropping
		/// </summary>
		public override string PicState
		{
			get { return (string)this[Gallery.Columns.PicState]; }
			set { this[Gallery.Columns.PicState] = value; }
		}
		/// <summary>
		/// The Photo that was used to create the Pic.
		/// </summary>
		public override int PicPhotoK
		{
			get { return (int)this[Gallery.Columns.PicPhotoK]; }
			set { this[Gallery.Columns.PicPhotoK] = value; }
		}
		/// <summary>
		/// The Misc that was used to create the Pic.
		/// </summary>
		public override int PicMiscK
		{
			get { return (int)this[Gallery.Columns.PicMiscK]; }
			set { this[Gallery.Columns.PicMiscK] = value; }
		}
		/// <summary>
		/// The url fragment - so that the url can be generated without accessing parent database records
		/// </summary>
		public override string UrlFragment
		{
			get { return (string)this[Gallery.Columns.UrlFragment]; }
			set { this[Gallery.Columns.UrlFragment] = value; }
		}
		/// <summary>
		/// The moderator assigned to this gallery
		/// </summary>
		public override int ModeratorUsrK
		{
			get { return (int)this[Gallery.Columns.ModeratorUsrK]; }
			set { this[Gallery.Columns.ModeratorUsrK] = value; }
		}
		/// <summary>
		/// The count of packages in the current upload
		/// </summary>
		public override int CurrentPackageCount
		{
			get { return (int)this[Gallery.Columns.CurrentPackageCount]; }
			set { this[Gallery.Columns.CurrentPackageCount] = value; }
		}
		/// <summary>
		/// When did the last package complete?
		/// </summary>
		public override DateTime LastPackageDateTime
		{
			get { return (DateTime)this[Gallery.Columns.LastPackageDateTime]; }
			set { this[Gallery.Columns.LastPackageDateTime] = value; }
		}
		/// <summary>
		/// What is the package index of the last package to be completed? (success or fail)
		/// </summary>
		public override int LastPackageIndex
		{
			get { return (int)this[Gallery.Columns.LastPackageIndex]; }
			set { this[Gallery.Columns.LastPackageIndex] = value; }
		}
		/// <summary>
		/// Is an upload in progress?
		/// </summary>
		public override bool UploadInProgress
		{
			get { return (bool)this[Gallery.Columns.UploadInProgress]; }
			set { this[Gallery.Columns.UploadInProgress] = value; }
		}
		/// <summary>
		/// How many times has a photo upload failed?
		/// </summary>
		public override int UploadFails
		{
			get { return (int)this[Gallery.Columns.UploadFails]; }
			set { this[Gallery.Columns.UploadFails] = value; }
		}
		/// <summary>
		/// Watch uploads for comments? (default = true)
		/// </summary>
		public override bool? WatchUploads
		{
			get { return (bool?)this[Gallery.Columns.WatchUploads]; }
			set { this[Gallery.Columns.WatchUploads] = value; }
		}
		/// <summary>
		/// Has the FinishedUploading task run on this gallery?
		/// </summary>
		public override bool? RunFinishedUploadingTask
		{
			get { return (bool?)this[Gallery.Columns.RunFinishedUploadingTask]; }
			set { this[Gallery.Columns.RunFinishedUploadingTask] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildGallerys
	{
		CachedSqlSelect<Gallery> ChildGallerys();
		CachedSqlSelect<Gallery> ChildGallerys(Q where);
		CachedSqlSelect<Gallery> ChildGallerys(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<Gallery> ChildGallerys(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class Gallery 
	 : 
	Bobs.ChildInterfaces.IHasChildGalleryUsrs
	,
	Bobs.ChildInterfaces.IHasChildPhotos
		{
			public CachedSqlSelect<GalleryUsr> ChildGalleryUsrs()
		{
			return this.ChildGalleryUsrs(null, null);
		}
		public CachedSqlSelect<GalleryUsr> ChildGalleryUsrs(Q where)
		{
			return this.ChildGalleryUsrs(where, null);
		}
		public CachedSqlSelect<GalleryUsr> ChildGalleryUsrs(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildGalleryUsrs(null, orderBy);
		}
		public CachedSqlSelect<GalleryUsr> ChildGalleryUsrs(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<GalleryUsr>
			(
				new Children<GalleryUsr>
				(
					TablesEnum.Gallery, 
					this.K, 
					TablesEnum.GalleryUsr, 
					dr => 
					{ 
						GalleryUsr newGalleryUsr = new GalleryUsr(); 
						newGalleryUsr.Initialise(dr); 
						return newGalleryUsr;
					},
					"73FAB6DB",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<Photo> ChildPhotos()
		{
			return this.ChildPhotos(null, null);
		}
		public CachedSqlSelect<Photo> ChildPhotos(Q where)
		{
			return this.ChildPhotos(where, null);
		}
		public CachedSqlSelect<Photo> ChildPhotos(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildPhotos(null, orderBy);
		}
		public CachedSqlSelect<Photo> ChildPhotos(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<Photo>
			(
				new Children<Photo>
				(
					TablesEnum.Gallery, 
					this.K, 
					TablesEnum.Photo, 
					dr => 
					{ 
						Photo newPhoto = new Photo(); 
						newPhoto.Initialise(dr); 
						return newPhoto;
					},
					"71653456",
					where,
					orderBy
				)
			);
		}
		}

	#region GalleryDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region GalleryDataHolder
	/// <summary>
	/// A gallery contains photosDataHolder
	/// </summary>
	[Serializable]
	public partial class GalleryDataHolder : DataHolder<Gallery>
	{
		Gallery dataHolder;
		[NonSerializedAttribute] Gallery bob;

		public GalleryDataHolder()
		{
			this.dataHolder = new Gallery();
		}
		
		void CopyValues(Gallery source, Gallery destination)
		{
			destination[Bobs.Gallery.Columns.K] = source[Bobs.Gallery.Columns.K];
			destination[Bobs.Gallery.Columns.EventK] = source[Bobs.Gallery.Columns.EventK];
			destination[Bobs.Gallery.Columns.ArticleK] = source[Bobs.Gallery.Columns.ArticleK];
			destination[Bobs.Gallery.Columns.Name] = source[Bobs.Gallery.Columns.Name];
			destination[Bobs.Gallery.Columns.MainPhotoK] = source[Bobs.Gallery.Columns.MainPhotoK];
			destination[Bobs.Gallery.Columns.OwnerUsrK] = source[Bobs.Gallery.Columns.OwnerUsrK];
			destination[Bobs.Gallery.Columns.TotalPhotos] = source[Bobs.Gallery.Columns.TotalPhotos];
			destination[Bobs.Gallery.Columns.LivePhotos] = source[Bobs.Gallery.Columns.LivePhotos];
			destination[Bobs.Gallery.Columns.CreateDateTime] = source[Bobs.Gallery.Columns.CreateDateTime];
			destination[Bobs.Gallery.Columns.LastLiveDateTime] = source[Bobs.Gallery.Columns.LastLiveDateTime];
			destination[Bobs.Gallery.Columns.AdminNote] = source[Bobs.Gallery.Columns.AdminNote];
			destination[Bobs.Gallery.Columns.IsMobile] = source[Bobs.Gallery.Columns.IsMobile];
			destination[Bobs.Gallery.Columns.PicState] = source[Bobs.Gallery.Columns.PicState];
			destination[Bobs.Gallery.Columns.PicPhotoK] = source[Bobs.Gallery.Columns.PicPhotoK];
			destination[Bobs.Gallery.Columns.PicMiscK] = source[Bobs.Gallery.Columns.PicMiscK];
			destination[Bobs.Gallery.Columns.UrlFragment] = source[Bobs.Gallery.Columns.UrlFragment];
			destination[Bobs.Gallery.Columns.ModeratorUsrK] = source[Bobs.Gallery.Columns.ModeratorUsrK];
			destination[Bobs.Gallery.Columns.CurrentPackageCount] = source[Bobs.Gallery.Columns.CurrentPackageCount];
			destination[Bobs.Gallery.Columns.LastPackageDateTime] = source[Bobs.Gallery.Columns.LastPackageDateTime];
			destination[Bobs.Gallery.Columns.LastPackageIndex] = source[Bobs.Gallery.Columns.LastPackageIndex];
			destination[Bobs.Gallery.Columns.UploadInProgress] = source[Bobs.Gallery.Columns.UploadInProgress];
			destination[Bobs.Gallery.Columns.UploadFails] = source[Bobs.Gallery.Columns.UploadFails];
			destination[Bobs.Gallery.Columns.WatchUploads] = source[Bobs.Gallery.Columns.WatchUploads];
			destination[Bobs.Gallery.Columns.RunFinishedUploadingTask] = source[Bobs.Gallery.Columns.RunFinishedUploadingTask];
		}
		
		public GalleryDataHolder(Gallery bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// The primary key
		/// </summary>
		public int K
		{
			get { return dataHolder.K; }
			set { this.dataHolder.K = value; }
		}
		/// <summary>
		/// The event that these photos were taken at
		/// </summary>
		public int EventK
		{
			get { return dataHolder.EventK; }
			set { this.dataHolder.EventK = value; }
		}
		/// <summary>
		/// If the gallery is in an article, this is the key
		/// </summary>
		public int ArticleK
		{
			get { return dataHolder.ArticleK; }
			set { this.dataHolder.ArticleK = value; }
		}
		/// <summary>
		/// Name
		/// </summary>
		public string Name
		{
			get { return dataHolder.Name; }
			set { this.dataHolder.Name = value; }
		}
		/// <summary>
		/// Link to the main photo - used for the title image.
		/// </summary>
		public int MainPhotoK
		{
			get { return dataHolder.MainPhotoK; }
			set { this.dataHolder.MainPhotoK = value; }
		}
		/// <summary>
		/// Link to the Usr table.
		/// </summary>
		public int OwnerUsrK
		{
			get { return dataHolder.OwnerUsrK; }
			set { this.dataHolder.OwnerUsrK = value; }
		}
		/// <summary>
		/// Total number of photos (live + disabled + new) in the gallery
		/// </summary>
		public int TotalPhotos
		{
			get { return dataHolder.TotalPhotos; }
			set { this.dataHolder.TotalPhotos = value; }
		}
		/// <summary>
		/// Total number of live photos in the gallery
		/// </summary>
		public int LivePhotos
		{
			get { return dataHolder.LivePhotos; }
			set { this.dataHolder.LivePhotos = value; }
		}
		/// <summary>
		/// DateTime when the Gallery was created
		/// </summary>
		public DateTime CreateDateTime
		{
			get { return dataHolder.CreateDateTime; }
			set { this.dataHolder.CreateDateTime = value; }
		}
		/// <summary>
		/// DateTime when the last photo was made live
		/// </summary>
		public DateTime LastLiveDateTime
		{
			get { return dataHolder.LastLiveDateTime; }
			set { this.dataHolder.LastLiveDateTime = value; }
		}
		/// <summary>
		/// Admin note only visible to photo admins
		/// </summary>
		public string AdminNote
		{
			get { return dataHolder.AdminNote; }
			set { this.dataHolder.AdminNote = value; }
		}
		/// <summary>
		/// Is this a mobile gallery (with mms photos)?
		/// </summary>
		public bool IsMobile
		{
			get { return dataHolder.IsMobile; }
			set { this.dataHolder.IsMobile = value; }
		}
		/// <summary>
		/// State var used to reconstruct cropper when re-cropping
		/// </summary>
		public string PicState
		{
			get { return dataHolder.PicState; }
			set { this.dataHolder.PicState = value; }
		}
		/// <summary>
		/// The Photo that was used to create the Pic.
		/// </summary>
		public int PicPhotoK
		{
			get { return dataHolder.PicPhotoK; }
			set { this.dataHolder.PicPhotoK = value; }
		}
		/// <summary>
		/// The Misc that was used to create the Pic.
		/// </summary>
		public int PicMiscK
		{
			get { return dataHolder.PicMiscK; }
			set { this.dataHolder.PicMiscK = value; }
		}
		/// <summary>
		/// The url fragment - so that the url can be generated without accessing parent database records
		/// </summary>
		public string UrlFragment
		{
			get { return dataHolder.UrlFragment; }
			set { this.dataHolder.UrlFragment = value; }
		}
		/// <summary>
		/// The moderator assigned to this gallery
		/// </summary>
		public int ModeratorUsrK
		{
			get { return dataHolder.ModeratorUsrK; }
			set { this.dataHolder.ModeratorUsrK = value; }
		}
		/// <summary>
		/// The count of packages in the current upload
		/// </summary>
		public int CurrentPackageCount
		{
			get { return dataHolder.CurrentPackageCount; }
			set { this.dataHolder.CurrentPackageCount = value; }
		}
		/// <summary>
		/// When did the last package complete?
		/// </summary>
		public DateTime LastPackageDateTime
		{
			get { return dataHolder.LastPackageDateTime; }
			set { this.dataHolder.LastPackageDateTime = value; }
		}
		/// <summary>
		/// What is the package index of the last package to be completed? (success or fail)
		/// </summary>
		public int LastPackageIndex
		{
			get { return dataHolder.LastPackageIndex; }
			set { this.dataHolder.LastPackageIndex = value; }
		}
		/// <summary>
		/// Is an upload in progress?
		/// </summary>
		public bool UploadInProgress
		{
			get { return dataHolder.UploadInProgress; }
			set { this.dataHolder.UploadInProgress = value; }
		}
		/// <summary>
		/// How many times has a photo upload failed?
		/// </summary>
		public int UploadFails
		{
			get { return dataHolder.UploadFails; }
			set { this.dataHolder.UploadFails = value; }
		}
		/// <summary>
		/// Watch uploads for comments? (default = true)
		/// </summary>
		public bool? WatchUploads
		{
			get { return dataHolder.WatchUploads; }
			set { this.dataHolder.WatchUploads = value; }
		}
		/// <summary>
		/// Has the FinishedUploading task run on this gallery?
		/// </summary>
		public bool? RunFinishedUploadingTask
		{
			get { return dataHolder.RunFinishedUploadingTask; }
			set { this.dataHolder.RunFinishedUploadingTask = value; }
		}
		#endregion
		public Gallery Gallery
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new Gallery(K);
					}
					else
					{
						bob = new Gallery();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region GallerySet
	public partial class GallerySet : BobSet, IEnumerable<Gallery>
	{
		public GallerySet(Query query) : base(query) { }

		public Gallery this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new Gallery(this);
					((Gallery)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (Gallery)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new GalleryTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<Gallery> ToList()
		{
			List<Gallery> list = new List<Gallery>();
			foreach (Gallery item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<Gallery> Members

		public new IEnumerator<Gallery> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region GalleryTableDef
	public class GalleryTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "Gallery";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "A1E9A35D";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return Gallery.GetColumnName((Gallery.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.Gallery;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return true;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return Gallery.Columns.K;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			Gallery.Columns c = (Gallery.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case Gallery.Columns.K: ColumnStore[i] = new ColumnDef(c, "K", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey | SqlColumnFlag.AutoNumber, null); break;
					case Gallery.Columns.EventK: ColumnStore[i] = new ColumnDef(c, "EventK", SqlDbType.Int, 0); break;
					case Gallery.Columns.ArticleK: ColumnStore[i] = new ColumnDef(c, "ArticleK", SqlDbType.Int, 0); break;
					case Gallery.Columns.Name: ColumnStore[i] = new ColumnDef(c, "Name", SqlDbType.VarChar, ""); break;
					case Gallery.Columns.MainPhotoK: ColumnStore[i] = new ColumnDef(c, "MainPhotoK", SqlDbType.Int, 0); break;
					case Gallery.Columns.OwnerUsrK: ColumnStore[i] = new ColumnDef(c, "OwnerUsrK", SqlDbType.Int, 0); break;
					case Gallery.Columns.TotalPhotos: ColumnStore[i] = new ColumnDef(c, "TotalPhotos", SqlDbType.Int, 0); break;
					case Gallery.Columns.LivePhotos: ColumnStore[i] = new ColumnDef(c, "LivePhotos", SqlDbType.Int, 0); break;
					case Gallery.Columns.CreateDateTime: ColumnStore[i] = new ColumnDef(c, "CreateDateTime", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case Gallery.Columns.LastLiveDateTime: ColumnStore[i] = new ColumnDef(c, "LastLiveDateTime", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case Gallery.Columns.AdminNote: ColumnStore[i] = new ColumnDef(c, "AdminNote", SqlDbType.Text, ""); break;
					case Gallery.Columns.IsMobile: ColumnStore[i] = new ColumnDef(c, "IsMobile", SqlDbType.Bit, false); break;
					case Gallery.Columns.PicState: ColumnStore[i] = new ColumnDef(c, "PicState", SqlDbType.VarChar, 100, ""); break;
					case Gallery.Columns.PicPhotoK: ColumnStore[i] = new ColumnDef(c, "PicPhotoK", SqlDbType.Int, 0); break;
					case Gallery.Columns.PicMiscK: ColumnStore[i] = new ColumnDef(c, "PicMiscK", SqlDbType.Int, 0); break;
					case Gallery.Columns.UrlFragment: ColumnStore[i] = new ColumnDef(c, "UrlFragment", SqlDbType.VarChar, 255, ""); break;
					case Gallery.Columns.ModeratorUsrK: ColumnStore[i] = new ColumnDef(c, "ModeratorUsrK", SqlDbType.Int, 0); break;
					case Gallery.Columns.CurrentPackageCount: ColumnStore[i] = new ColumnDef(c, "CurrentPackageCount", SqlDbType.Int, 0); break;
					case Gallery.Columns.LastPackageDateTime: ColumnStore[i] = new ColumnDef(c, "LastPackageDateTime", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case Gallery.Columns.LastPackageIndex: ColumnStore[i] = new ColumnDef(c, "LastPackageIndex", SqlDbType.Int, 0); break;
					case Gallery.Columns.UploadInProgress: ColumnStore[i] = new ColumnDef(c, "UploadInProgress", SqlDbType.Bit, false); break;
					case Gallery.Columns.UploadFails: ColumnStore[i] = new ColumnDef(c, "UploadFails", SqlDbType.Int, 0); break;
					case Gallery.Columns.WatchUploads: ColumnStore[i] = new ColumnDef(c, "WatchUploads", SqlDbType.Bit, null); break;
					case Gallery.Columns.RunFinishedUploadingTask: ColumnStore[i] = new ColumnDef(c, "RunFinishedUploadingTask", SqlDbType.Bit, null); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(Gallery.Columns.K);
						InitColumn(Gallery.Columns.EventK);
						InitColumn(Gallery.Columns.ArticleK);
						InitColumn(Gallery.Columns.Name);
						InitColumn(Gallery.Columns.MainPhotoK);
						InitColumn(Gallery.Columns.OwnerUsrK);
						InitColumn(Gallery.Columns.TotalPhotos);
						InitColumn(Gallery.Columns.LivePhotos);
						InitColumn(Gallery.Columns.CreateDateTime);
						InitColumn(Gallery.Columns.LastLiveDateTime);
						InitColumn(Gallery.Columns.AdminNote);
						InitColumn(Gallery.Columns.IsMobile);
						InitColumn(Gallery.Columns.PicState);
						InitColumn(Gallery.Columns.PicPhotoK);
						InitColumn(Gallery.Columns.PicMiscK);
						InitColumn(Gallery.Columns.UrlFragment);
						InitColumn(Gallery.Columns.ModeratorUsrK);
						InitColumn(Gallery.Columns.CurrentPackageCount);
						InitColumn(Gallery.Columns.LastPackageDateTime);
						InitColumn(Gallery.Columns.LastPackageIndex);
						InitColumn(Gallery.Columns.UploadInProgress);
						InitColumn(Gallery.Columns.UploadFails);
						InitColumn(Gallery.Columns.WatchUploads);
						InitColumn(Gallery.Columns.RunFinishedUploadingTask);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region GalleryUsr
	/// <summary>
	/// Stores information about when users view galleries
	/// </summary>
	public partial class GalleryUsr : Model.Entities.GalleryUsr, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// The thread
			/// </summary>
			GalleryK = 0x00220001,
			/// <summary>
			/// The user that has been invited
			/// </summary>
			UsrK = 0x00220002,
			/// <summary>
			/// The datetime that the gallery was last viewed
			/// </summary>
			ViewDateTime = 0x00220003,
			/// <summary>
			/// The new datetime (when this is set, it's value is copied to the DateTime if it is more than 5 mins ago) 
			/// </summary>
			ViewDateTimeLatest = 0x00220004,
			/// <summary>
			/// The number of photos that have been viewed at the time of the ViewDateTime
			/// </summary>
			ViewPhotos = 0x00220005,
			/// <summary>
			/// The number of photos that have been viewed at the time of the ViewDateTimeLatest
			/// </summary>
			ViewPhotosLatest = 0x00220006,
			/// <summary>
			/// Favourite gallery?
			/// </summary>
			Favourite = 0x00220007,
		}
		#endregion
		public static string GetColumnName(GalleryUsr.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case GalleryUsr.Columns.GalleryK: return "GalleryK";
						case GalleryUsr.Columns.UsrK: return "UsrK";
						case GalleryUsr.Columns.ViewDateTime: return "ViewDateTime";
						case GalleryUsr.Columns.ViewDateTimeLatest: return "ViewDateTimeLatest";
						case GalleryUsr.Columns.ViewPhotos: return "ViewPhotos";
						case GalleryUsr.Columns.ViewPhotosLatest: return "ViewPhotosLatest";
						case GalleryUsr.Columns.Favourite: return "Favourite";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(GalleryUsr.Columns columnEnum)
		{
			switch (columnEnum)
			{
											default: return false;
			}
		}


		#region Common
	 
		public GalleryUsr(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);}
		public GalleryUsr()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.GalleryUsr);
		}
		public GalleryUsr(BobSet bs)
		{
			this.Bob = new Bob(Bobs.Tables.Defs.GalleryUsr, bs);
		}
		public GalleryUsr(IBob Parent, object Column) : this()
		{
			this.Bob.GetBobFromParentSimple(Parent, Column, TablesEnum.GalleryUsr);
		}
		public GalleryUsr(int GalleryK, int UsrK) : this()
		{
			this.Bob.GetBobFromPrimaryKeyArray(new Q[] {new Q(GalleryUsr.Columns.GalleryK,GalleryK), new Q(GalleryUsr.Columns.UsrK,UsrK)});
		} 
		#endregion

	}
	#endregion
	#region GalleryUsrTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region GalleryUsr
	/// <summary>
	/// Stores information about when users view galleries
	/// </summary>
	[Serializable]
	public partial class GalleryUsr 
	{
		
		#region Simple members
		/// <summary>
		/// The thread
		/// </summary>
		public override int GalleryK
		{
			get { return (int)this[GalleryUsr.Columns.GalleryK]; }
			set { this[GalleryUsr.Columns.GalleryK] = value; }
		}
		/// <summary>
		/// The user that has been invited
		/// </summary>
		public override int UsrK
		{
			get { return (int)this[GalleryUsr.Columns.UsrK]; }
			set { this[GalleryUsr.Columns.UsrK] = value; }
		}
		/// <summary>
		/// The datetime that the gallery was last viewed
		/// </summary>
		public override DateTime ViewDateTime
		{
			get { return (DateTime)this[GalleryUsr.Columns.ViewDateTime]; }
			set { this[GalleryUsr.Columns.ViewDateTime] = value; }
		}
		/// <summary>
		/// The new datetime (when this is set, it's value is copied to the DateTime if it is more than 5 mins ago) 
		/// </summary>
		public override DateTime ViewDateTimeLatest
		{
			get { return (DateTime)this[GalleryUsr.Columns.ViewDateTimeLatest]; }
			set { this[GalleryUsr.Columns.ViewDateTimeLatest] = value; }
		}
		/// <summary>
		/// The number of photos that have been viewed at the time of the ViewDateTime
		/// </summary>
		public override int ViewPhotos
		{
			get { return (int)this[GalleryUsr.Columns.ViewPhotos]; }
			set { this[GalleryUsr.Columns.ViewPhotos] = value; }
		}
		/// <summary>
		/// The number of photos that have been viewed at the time of the ViewDateTimeLatest
		/// </summary>
		public override int ViewPhotosLatest
		{
			get { return (int)this[GalleryUsr.Columns.ViewPhotosLatest]; }
			set { this[GalleryUsr.Columns.ViewPhotosLatest] = value; }
		}
		/// <summary>
		/// Favourite gallery?
		/// </summary>
		public override bool Favourite
		{
			get { return (bool)this[GalleryUsr.Columns.Favourite]; }
			set { this[GalleryUsr.Columns.Favourite] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildGalleryUsrs
	{
		CachedSqlSelect<GalleryUsr> ChildGalleryUsrs();
		CachedSqlSelect<GalleryUsr> ChildGalleryUsrs(Q where);
		CachedSqlSelect<GalleryUsr> ChildGalleryUsrs(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<GalleryUsr> ChildGalleryUsrs(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class GalleryUsr 
		{
		}

	#region GalleryUsrDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region GalleryUsrDataHolder
	/// <summary>
	/// Stores information about when users view galleriesDataHolder
	/// </summary>
	[Serializable]
	public partial class GalleryUsrDataHolder : DataHolder<GalleryUsr>
	{
		GalleryUsr dataHolder;
		[NonSerializedAttribute] GalleryUsr bob;

		public GalleryUsrDataHolder()
		{
			this.dataHolder = new GalleryUsr();
		}
		
		void CopyValues(GalleryUsr source, GalleryUsr destination)
		{
			destination[Bobs.GalleryUsr.Columns.GalleryK] = source[Bobs.GalleryUsr.Columns.GalleryK];
			destination[Bobs.GalleryUsr.Columns.UsrK] = source[Bobs.GalleryUsr.Columns.UsrK];
			destination[Bobs.GalleryUsr.Columns.ViewDateTime] = source[Bobs.GalleryUsr.Columns.ViewDateTime];
			destination[Bobs.GalleryUsr.Columns.ViewDateTimeLatest] = source[Bobs.GalleryUsr.Columns.ViewDateTimeLatest];
			destination[Bobs.GalleryUsr.Columns.ViewPhotos] = source[Bobs.GalleryUsr.Columns.ViewPhotos];
			destination[Bobs.GalleryUsr.Columns.ViewPhotosLatest] = source[Bobs.GalleryUsr.Columns.ViewPhotosLatest];
			destination[Bobs.GalleryUsr.Columns.Favourite] = source[Bobs.GalleryUsr.Columns.Favourite];
		}
		
		public GalleryUsrDataHolder(GalleryUsr bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// The thread
		/// </summary>
		public int GalleryK
		{
			get { return dataHolder.GalleryK; }
			set { this.dataHolder.GalleryK = value; }
		}
		/// <summary>
		/// The user that has been invited
		/// </summary>
		public int UsrK
		{
			get { return dataHolder.UsrK; }
			set { this.dataHolder.UsrK = value; }
		}
		/// <summary>
		/// The datetime that the gallery was last viewed
		/// </summary>
		public DateTime ViewDateTime
		{
			get { return dataHolder.ViewDateTime; }
			set { this.dataHolder.ViewDateTime = value; }
		}
		/// <summary>
		/// The new datetime (when this is set, it's value is copied to the DateTime if it is more than 5 mins ago) 
		/// </summary>
		public DateTime ViewDateTimeLatest
		{
			get { return dataHolder.ViewDateTimeLatest; }
			set { this.dataHolder.ViewDateTimeLatest = value; }
		}
		/// <summary>
		/// The number of photos that have been viewed at the time of the ViewDateTime
		/// </summary>
		public int ViewPhotos
		{
			get { return dataHolder.ViewPhotos; }
			set { this.dataHolder.ViewPhotos = value; }
		}
		/// <summary>
		/// The number of photos that have been viewed at the time of the ViewDateTimeLatest
		/// </summary>
		public int ViewPhotosLatest
		{
			get { return dataHolder.ViewPhotosLatest; }
			set { this.dataHolder.ViewPhotosLatest = value; }
		}
		/// <summary>
		/// Favourite gallery?
		/// </summary>
		public bool Favourite
		{
			get { return dataHolder.Favourite; }
			set { this.dataHolder.Favourite = value; }
		}
		#endregion
		public GalleryUsr GalleryUsr
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new GalleryUsr(K);
					}
					else
					{
						bob = new GalleryUsr();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region GalleryUsrSet
	public partial class GalleryUsrSet : BobSet, IEnumerable<GalleryUsr>
	{
		public GalleryUsrSet(Query query) : base(query) { }

		public GalleryUsr this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new GalleryUsr(this);
					((GalleryUsr)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (GalleryUsr)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new GalleryUsrTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<GalleryUsr> ToList()
		{
			List<GalleryUsr> list = new List<GalleryUsr>();
			foreach (GalleryUsr item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<GalleryUsr> Members

		public new IEnumerator<GalleryUsr> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region GalleryUsrTableDef
	public class GalleryUsrTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "GalleryUsr";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "73FAB6DB";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return GalleryUsr.GetColumnName((GalleryUsr.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.GalleryUsr;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return false;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return null;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			GalleryUsr.Columns c = (GalleryUsr.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case GalleryUsr.Columns.GalleryK: ColumnStore[i] = new ColumnDef(c, "GalleryK", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey, 0); break;
					case GalleryUsr.Columns.UsrK: ColumnStore[i] = new ColumnDef(c, "UsrK", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey, 0); break;
					case GalleryUsr.Columns.ViewDateTime: ColumnStore[i] = new ColumnDef(c, "ViewDateTime", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case GalleryUsr.Columns.ViewDateTimeLatest: ColumnStore[i] = new ColumnDef(c, "ViewDateTimeLatest", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case GalleryUsr.Columns.ViewPhotos: ColumnStore[i] = new ColumnDef(c, "ViewPhotos", SqlDbType.Int, 0); break;
					case GalleryUsr.Columns.ViewPhotosLatest: ColumnStore[i] = new ColumnDef(c, "ViewPhotosLatest", SqlDbType.Int, 0); break;
					case GalleryUsr.Columns.Favourite: ColumnStore[i] = new ColumnDef(c, "Favourite", SqlDbType.Bit, false); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(GalleryUsr.Columns.GalleryK);
						InitColumn(GalleryUsr.Columns.UsrK);
						InitColumn(GalleryUsr.Columns.ViewDateTime);
						InitColumn(GalleryUsr.Columns.ViewDateTimeLatest);
						InitColumn(GalleryUsr.Columns.ViewPhotos);
						InitColumn(GalleryUsr.Columns.ViewPhotosLatest);
						InitColumn(GalleryUsr.Columns.Favourite);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region Global
	/// <summary>
	/// Global variables
	/// </summary>
	public partial class Global : Model.Entities.Global, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// The primary key
			/// </summary>
			K = 0x00230001,
			/// <summary>
			/// Name
			/// </summary>
			Name = 0x00230002,
			/// <summary>
			/// Description
			/// </summary>
			Description = 0x00230003,
			/// <summary>
			/// Value (200 chars)
			/// </summary>
			ValueString = 0x00230004,
			/// <summary>
			/// Value
			/// </summary>
			ValueInt = 0x00230005,
			/// <summary>
			/// Value
			/// </summary>
			ValueDouble = 0x00230006,
			/// <summary>
			/// Value
			/// </summary>
			ValueDateTime = 0x00230007,
			/// <summary>
			/// Unlimited length string value
			/// </summary>
			ValueText = 0x00230008,
		}
		#endregion
		public static string GetColumnName(Global.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case Global.Columns.K: return "K";
						case Global.Columns.Name: return "Name";
						case Global.Columns.Description: return "Description";
						case Global.Columns.ValueString: return "ValueString";
						case Global.Columns.ValueInt: return "ValueInt";
						case Global.Columns.ValueDouble: return "ValueDouble";
						case Global.Columns.ValueDateTime: return "ValueDateTime";
						case Global.Columns.ValueText: return "ValueText";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(Global.Columns columnEnum)
		{
			switch (columnEnum)
			{
												default: return false;
			}
		}


		#region Common
 
		public Global(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);  }
		public Global()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.Global);
		}
		public Global(BobSet bs)
		{
			this.Bob = new Bob(bs.Table, bs);
		}
		public Global(int GlobalK, IBob Parent, object Column)
			: this()
		{
			Bob.GetBobFromParent(GlobalK, Parent.Bob, Column, TablesEnum.Global);
		}
		public Global(int GlobalK)
			: this()
		{
			Bob.GetBobFromPrimaryKey(GlobalK);
		}
		#endregion

	}
	#endregion
	#region GlobalTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region Global
	/// <summary>
	/// Global variables
	/// </summary>
	[Serializable]
	public partial class Global 
	{
		
		#region Simple members
		/// <summary>
		/// The primary key
		/// </summary>
		public override int K
		{
			get { return (int)this[Global.Columns.K] as int? ?? 0 ; }
			set { this[Global.Columns.K] = value; }
		}
		/// <summary>
		/// Name
		/// </summary>
		public override string Name
		{
			get { return (string)this[Global.Columns.Name]; }
			set { this[Global.Columns.Name] = value; }
		}
		/// <summary>
		/// Description
		/// </summary>
		public override string Description
		{
			get { return (string)this[Global.Columns.Description]; }
			set { this[Global.Columns.Description] = value; }
		}
		/// <summary>
		/// Value (200 chars)
		/// </summary>
		public override string ValueString
		{
			get { return (string)this[Global.Columns.ValueString]; }
			set { this[Global.Columns.ValueString] = value; }
		}
		/// <summary>
		/// Value
		/// </summary>
		public override int ValueInt
		{
			get { return (int)this[Global.Columns.ValueInt]; }
			set { this[Global.Columns.ValueInt] = value; }
		}
		/// <summary>
		/// Value
		/// </summary>
		public override double ValueDouble
		{
			get { return (double)this[Global.Columns.ValueDouble]; }
			set { this[Global.Columns.ValueDouble] = value; }
		}
		/// <summary>
		/// Value
		/// </summary>
		public override DateTime ValueDateTime
		{
			get { return (DateTime)this[Global.Columns.ValueDateTime]; }
			set { this[Global.Columns.ValueDateTime] = value; }
		}
		/// <summary>
		/// Unlimited length string value
		/// </summary>
		public override string ValueText
		{
			get { return (string)this[Global.Columns.ValueText]; }
			set { this[Global.Columns.ValueText] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildGlobals
	{
		CachedSqlSelect<Global> ChildGlobals();
		CachedSqlSelect<Global> ChildGlobals(Q where);
		CachedSqlSelect<Global> ChildGlobals(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<Global> ChildGlobals(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class Global 
		{
		}

	#region GlobalDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region GlobalDataHolder
	/// <summary>
	/// Global variablesDataHolder
	/// </summary>
	[Serializable]
	public partial class GlobalDataHolder : DataHolder<Global>
	{
		Global dataHolder;
		[NonSerializedAttribute] Global bob;

		public GlobalDataHolder()
		{
			this.dataHolder = new Global();
		}
		
		void CopyValues(Global source, Global destination)
		{
			destination[Bobs.Global.Columns.K] = source[Bobs.Global.Columns.K];
			destination[Bobs.Global.Columns.Name] = source[Bobs.Global.Columns.Name];
			destination[Bobs.Global.Columns.Description] = source[Bobs.Global.Columns.Description];
			destination[Bobs.Global.Columns.ValueString] = source[Bobs.Global.Columns.ValueString];
			destination[Bobs.Global.Columns.ValueInt] = source[Bobs.Global.Columns.ValueInt];
			destination[Bobs.Global.Columns.ValueDouble] = source[Bobs.Global.Columns.ValueDouble];
			destination[Bobs.Global.Columns.ValueDateTime] = source[Bobs.Global.Columns.ValueDateTime];
			destination[Bobs.Global.Columns.ValueText] = source[Bobs.Global.Columns.ValueText];
		}
		
		public GlobalDataHolder(Global bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// The primary key
		/// </summary>
		public int K
		{
			get { return dataHolder.K; }
			set { this.dataHolder.K = value; }
		}
		/// <summary>
		/// Name
		/// </summary>
		public string Name
		{
			get { return dataHolder.Name; }
			set { this.dataHolder.Name = value; }
		}
		/// <summary>
		/// Description
		/// </summary>
		public string Description
		{
			get { return dataHolder.Description; }
			set { this.dataHolder.Description = value; }
		}
		/// <summary>
		/// Value (200 chars)
		/// </summary>
		public string ValueString
		{
			get { return dataHolder.ValueString; }
			set { this.dataHolder.ValueString = value; }
		}
		/// <summary>
		/// Value
		/// </summary>
		public int ValueInt
		{
			get { return dataHolder.ValueInt; }
			set { this.dataHolder.ValueInt = value; }
		}
		/// <summary>
		/// Value
		/// </summary>
		public double ValueDouble
		{
			get { return dataHolder.ValueDouble; }
			set { this.dataHolder.ValueDouble = value; }
		}
		/// <summary>
		/// Value
		/// </summary>
		public DateTime ValueDateTime
		{
			get { return dataHolder.ValueDateTime; }
			set { this.dataHolder.ValueDateTime = value; }
		}
		/// <summary>
		/// Unlimited length string value
		/// </summary>
		public string ValueText
		{
			get { return dataHolder.ValueText; }
			set { this.dataHolder.ValueText = value; }
		}
		#endregion
		public Global Global
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new Global(K);
					}
					else
					{
						bob = new Global();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region GlobalSet
	public partial class GlobalSet : BobSet, IEnumerable<Global>
	{
		public GlobalSet(Query query) : base(query) { }

		public Global this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new Global(this);
					((Global)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (Global)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new GlobalTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<Global> ToList()
		{
			List<Global> list = new List<Global>();
			foreach (Global item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<Global> Members

		public new IEnumerator<Global> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region GlobalTableDef
	public class GlobalTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "Global";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "B70C679F";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return Global.GetColumnName((Global.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.Global;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return true;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return Global.Columns.K;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			Global.Columns c = (Global.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case Global.Columns.K: ColumnStore[i] = new ColumnDef(c, "K", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey | SqlColumnFlag.AutoNumber, null); break;
					case Global.Columns.Name: ColumnStore[i] = new ColumnDef(c, "Name", SqlDbType.VarChar, ""); break;
					case Global.Columns.Description: ColumnStore[i] = new ColumnDef(c, "Description", SqlDbType.VarChar, 200, ""); break;
					case Global.Columns.ValueString: ColumnStore[i] = new ColumnDef(c, "ValueString", SqlDbType.VarChar, 200, ""); break;
					case Global.Columns.ValueInt: ColumnStore[i] = new ColumnDef(c, "ValueInt", SqlDbType.Int, 0); break;
					case Global.Columns.ValueDouble: ColumnStore[i] = new ColumnDef(c, "ValueDouble", SqlDbType.Float, 0.0); break;
					case Global.Columns.ValueDateTime: ColumnStore[i] = new ColumnDef(c, "ValueDateTime", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case Global.Columns.ValueText: ColumnStore[i] = new ColumnDef(c, "ValueText", SqlDbType.Text, ""); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(Global.Columns.K);
						InitColumn(Global.Columns.Name);
						InitColumn(Global.Columns.Description);
						InitColumn(Global.Columns.ValueString);
						InitColumn(Global.Columns.ValueInt);
						InitColumn(Global.Columns.ValueDouble);
						InitColumn(Global.Columns.ValueDateTime);
						InitColumn(Global.Columns.ValueText);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region Group
	/// <summary>
	/// Discussion / news groups
	/// </summary>
	public partial class Group : Model.Entities.Group, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// The primary key
			/// </summary>
			K = 0x00240001,
			/// <summary>
			/// Name of the group
			/// </summary>
			Name = 0x00240002,
			/// <summary>
			/// Text describing the group topic or scope
			/// </summary>
			Description = 0x00240003,
			/// <summary>
			/// Html shown on the group homepage
			/// </summary>
			LongDescriptionHtml = 0x00240004,
			/// <summary>
			/// Is the long description surrounded by a div and checked for proper html?
			/// </summary>
			LongDescriptionPlain = 0x00240005,
			/// <summary>
			/// Posting rules that people have to agree to before joining
			/// </summary>
			PostingRules = 0x00240006,
			/// <summary>
			/// DateTime the group was added
			/// </summary>
			DateTimeCreated = 0x00240007,
			/// <summary>
			/// Total number of members in this group
			/// </summary>
			TotalMembers = 0x00240008,
			/// <summary>
			/// Total number of moderators in this group
			/// </summary>
			TotalModerators = 0x00240009,
			/// <summary>
			/// Total number of owners of this group
			/// </summary>
			TotalOwners = 0x0024000a,
			/// <summary>
			/// Total number of comments
			/// </summary>
			TotalComments = 0x0024000b,
			/// <summary>
			/// DateTime of the last post
			/// </summary>
			LastPost = 0x0024000c,
			/// <summary>
			/// Average DateTime of all the comments
			/// </summary>
			AverageCommentDateTime = 0x0024000d,
			/// <summary>
			/// Private group page?
			/// </summary>
			PrivateGroupPage = 0x0024000e,
			/// <summary>
			/// Private chat forum?
			/// </summary>
			PrivateChat = 0x0024000f,
			/// <summary>
			/// Private members list?
			/// </summary>
			PrivateMemberList = 0x00240010,
			/// <summary>
			/// Membership restriction (Automatic=1, OwnerMustApprove=2, Custom=3)
			/// </summary>
			Restriction = 0x00240011,
			/// <summary>
			/// Enum specifying a membership object - e.g. admins, photo moderators, promoters etc.
			/// </summary>
			CustomRestrictionType = 0x00240012,
			/// <summary>
			/// Group theme
			/// </summary>
			ThemeK = 0x00240013,
			/// <summary>
			/// Is the group country specific?
			/// </summary>
			CountryK = 0x00240014,
			/// <summary>
			/// Is the group place specific?
			/// </summary>
			PlaceK = 0x00240015,
			/// <summary>
			/// Is the group music specific?
			/// </summary>
			MusicTypeK = 0x00240016,
			/// <summary>
			/// Is the group brand specific?
			/// </summary>
			BrandK = 0x00240017,
			/// <summary>
			/// Unique url-compliant name
			/// </summary>
			UrlName = 0x00240018,
			/// <summary>
			/// Cropped image 100*100
			/// </summary>
			Pic = 0x00240019,
			/// <summary>
			/// State var used to reconstruct cropper when re-cropping
			/// </summary>
			PicState = 0x0024001a,
			/// <summary>
			/// The Photo that was used to create the Pic.
			/// </summary>
			PicPhotoK = 0x0024001b,
			/// <summary>
			/// The Misc that was used to create the Pic.
			/// </summary>
			PicMiscK = 0x0024001c,
			/// <summary>
			/// Guid used to ensure duplicate groups don't get posted if the user refreshes the page after saving.
			/// </summary>
			DuplicateGuid = 0x0024001d,
			/// <summary>
			/// Force members to receive an email each time a new thread is posted to this group
			/// </summary>
			EmailOnAllThreads = 0x0024001e,
			/// <summary>
			/// The total number of members that have this group on their favourites list
			/// </summary>
			FavouriteCount = 0x0024001f,
			/// <summary>
			/// The total number of members that are watching this group for new messages
			/// </summary>
			WatchCount = 0x00240020,
		}
		#endregion
		public static string GetColumnName(Group.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case Group.Columns.K: return "K";
						case Group.Columns.Name: return "Name";
						case Group.Columns.Description: return "Description";
						case Group.Columns.LongDescriptionHtml: return "LongDescriptionHtml";
						case Group.Columns.LongDescriptionPlain: return "LongDescriptionPlain";
						case Group.Columns.PostingRules: return "PostingRules";
						case Group.Columns.DateTimeCreated: return "DateTimeCreated";
						case Group.Columns.TotalMembers: return "TotalMembers";
						case Group.Columns.TotalModerators: return "TotalModerators";
						case Group.Columns.TotalOwners: return "TotalOwners";
						case Group.Columns.TotalComments: return "TotalComments";
						case Group.Columns.LastPost: return "LastPost";
						case Group.Columns.AverageCommentDateTime: return "AverageCommentDateTime";
						case Group.Columns.PrivateGroupPage: return "PrivateGroupPage";
						case Group.Columns.PrivateChat: return "PrivateChat";
						case Group.Columns.PrivateMemberList: return "PrivateMemberList";
						case Group.Columns.Restriction: return "Restriction";
						case Group.Columns.CustomRestrictionType: return "CustomRestrictionType";
						case Group.Columns.ThemeK: return "ThemeK";
						case Group.Columns.CountryK: return "CountryK";
						case Group.Columns.PlaceK: return "PlaceK";
						case Group.Columns.MusicTypeK: return "MusicTypeK";
						case Group.Columns.BrandK: return "BrandK";
						case Group.Columns.UrlName: return "UrlName";
						case Group.Columns.Pic: return "Pic";
						case Group.Columns.PicState: return "PicState";
						case Group.Columns.PicPhotoK: return "PicPhotoK";
						case Group.Columns.PicMiscK: return "PicMiscK";
						case Group.Columns.DuplicateGuid: return "DuplicateGuid";
						case Group.Columns.EmailOnAllThreads: return "EmailOnAllThreads";
						case Group.Columns.FavouriteCount: return "FavouriteCount";
						case Group.Columns.WatchCount: return "WatchCount";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(Group.Columns columnEnum)
		{
			switch (columnEnum)
			{
																																				default: return false;
			}
		}


		#region Common
 
		public Group(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);  }
		public Group()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.Group);
		}
		public Group(BobSet bs)
		{
			this.Bob = new Bob(bs.Table, bs);
		}
		public Group(int GroupK, IBob Parent, object Column)
			: this()
		{
			Bob.GetBobFromParent(GroupK, Parent.Bob, Column, TablesEnum.Group);
		}
		public Group(int GroupK)
			: this()
		{
			Bob.GetBobFromPrimaryKey(GroupK);
		}
		#endregion

	}
	#endregion
	#region GroupTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region Group
	/// <summary>
	/// Discussion / news groups
	/// </summary>
	[Serializable]
	public partial class Group 
	{
		
		#region Simple members
		/// <summary>
		/// The primary key
		/// </summary>
		public override int K
		{
			get { return (int)this[Group.Columns.K] as int? ?? 0 ; }
			set { this[Group.Columns.K] = value; }
		}
		/// <summary>
		/// Name of the group
		/// </summary>
		public override string Name
		{
			get { return (string)this[Group.Columns.Name]; }
			set { this[Group.Columns.Name] = value; }
		}
		/// <summary>
		/// Text describing the group topic or scope
		/// </summary>
		public override string Description
		{
			get { return (string)this[Group.Columns.Description]; }
			set { this[Group.Columns.Description] = value; }
		}
		/// <summary>
		/// Html shown on the group homepage
		/// </summary>
		public override string LongDescriptionHtml
		{
			get { return (string)this[Group.Columns.LongDescriptionHtml]; }
			set { this[Group.Columns.LongDescriptionHtml] = value; }
		}
		/// <summary>
		/// Is the long description surrounded by a div and checked for proper html?
		/// </summary>
		public override bool LongDescriptionPlain
		{
			get { return (bool)this[Group.Columns.LongDescriptionPlain]; }
			set { this[Group.Columns.LongDescriptionPlain] = value; }
		}
		/// <summary>
		/// Posting rules that people have to agree to before joining
		/// </summary>
		public override string PostingRules
		{
			get { return (string)this[Group.Columns.PostingRules]; }
			set { this[Group.Columns.PostingRules] = value; }
		}
		/// <summary>
		/// DateTime the group was added
		/// </summary>
		public override DateTime DateTimeCreated
		{
			get { return (DateTime)this[Group.Columns.DateTimeCreated]; }
			set { this[Group.Columns.DateTimeCreated] = value; }
		}
		/// <summary>
		/// Total number of members in this group
		/// </summary>
		public override int TotalMembers
		{
			get { return (int)this[Group.Columns.TotalMembers]; }
			set { this[Group.Columns.TotalMembers] = value; }
		}
		/// <summary>
		/// Total number of moderators in this group
		/// </summary>
		public override int TotalModerators
		{
			get { return (int)this[Group.Columns.TotalModerators]; }
			set { this[Group.Columns.TotalModerators] = value; }
		}
		/// <summary>
		/// Total number of owners of this group
		/// </summary>
		public override int TotalOwners
		{
			get { return (int)this[Group.Columns.TotalOwners]; }
			set { this[Group.Columns.TotalOwners] = value; }
		}
		/// <summary>
		/// Total number of comments
		/// </summary>
		public override int TotalComments
		{
			get { return (int)this[Group.Columns.TotalComments]; }
			set { this[Group.Columns.TotalComments] = value; }
		}
		/// <summary>
		/// DateTime of the last post
		/// </summary>
		public override DateTime? LastPost
		{
			get { return (DateTime?)this[Group.Columns.LastPost]; }
			set { this[Group.Columns.LastPost] = value; }
		}
		/// <summary>
		/// Average DateTime of all the comments
		/// </summary>
		public override DateTime? AverageCommentDateTime
		{
			get { return (DateTime?)this[Group.Columns.AverageCommentDateTime]; }
			set { this[Group.Columns.AverageCommentDateTime] = value; }
		}
		/// <summary>
		/// Private group page?
		/// </summary>
		public override bool PrivateGroupPage
		{
			get { return (bool)this[Group.Columns.PrivateGroupPage]; }
			set { this[Group.Columns.PrivateGroupPage] = value; }
		}
		/// <summary>
		/// Private chat forum?
		/// </summary>
		public override bool PrivateChat
		{
			get { return (bool)this[Group.Columns.PrivateChat]; }
			set { this[Group.Columns.PrivateChat] = value; }
		}
		/// <summary>
		/// Private members list?
		/// </summary>
		public override bool PrivateMemberList
		{
			get { return (bool)this[Group.Columns.PrivateMemberList]; }
			set { this[Group.Columns.PrivateMemberList] = value; }
		}
		/// <summary>
		/// Membership restriction (Automatic=1, OwnerMustApprove=2, Custom=3)
		/// </summary>
		public override int Restriction
		{
			get { return (int)this[Group.Columns.Restriction]; }
			set { this[Group.Columns.Restriction] = value; }
		}
		/// <summary>
		/// Enum specifying a membership object - e.g. admins, photo moderators, promoters etc.
		/// </summary>
		public override int CustomRestrictionType
		{
			get { return (int)this[Group.Columns.CustomRestrictionType]; }
			set { this[Group.Columns.CustomRestrictionType] = value; }
		}
		/// <summary>
		/// Group theme
		/// </summary>
		public override int ThemeK
		{
			get { return (int)this[Group.Columns.ThemeK]; }
			set { this[Group.Columns.ThemeK] = value; }
		}
		/// <summary>
		/// Is the group country specific?
		/// </summary>
		public override int CountryK
		{
			get { return (int)this[Group.Columns.CountryK]; }
			set { this[Group.Columns.CountryK] = value; }
		}
		/// <summary>
		/// Is the group place specific?
		/// </summary>
		public override int PlaceK
		{
			get { return (int)this[Group.Columns.PlaceK]; }
			set { this[Group.Columns.PlaceK] = value; }
		}
		/// <summary>
		/// Is the group music specific?
		/// </summary>
		public override int MusicTypeK
		{
			get { return (int)this[Group.Columns.MusicTypeK]; }
			set { this[Group.Columns.MusicTypeK] = value; }
		}
		/// <summary>
		/// Is the group brand specific?
		/// </summary>
		public override int BrandK
		{
			get { return (int)this[Group.Columns.BrandK]; }
			set { this[Group.Columns.BrandK] = value; }
		}
		/// <summary>
		/// Unique url-compliant name
		/// </summary>
		public override string UrlName
		{
			get { return (string)this[Group.Columns.UrlName]; }
			set { this[Group.Columns.UrlName] = value; }
		}
		/// <summary>
		/// Cropped image 100*100
		/// </summary>
		public Guid	Pic
		{
			get{ return Cambro.Misc.Db.GuidConvertor(this[Group.Columns.Pic]);}		
			set{ this[Group.Columns.Pic] = new System.Data.SqlTypes.SqlGuid(value);}
		}
		/// <summary>
		/// State var used to reconstruct cropper when re-cropping
		/// </summary>
		public override string PicState
		{
			get { return (string)this[Group.Columns.PicState]; }
			set { this[Group.Columns.PicState] = value; }
		}
		/// <summary>
		/// The Photo that was used to create the Pic.
		/// </summary>
		public override int PicPhotoK
		{
			get { return (int)this[Group.Columns.PicPhotoK]; }
			set { this[Group.Columns.PicPhotoK] = value; }
		}
		/// <summary>
		/// The Misc that was used to create the Pic.
		/// </summary>
		public override int PicMiscK
		{
			get { return (int)this[Group.Columns.PicMiscK]; }
			set { this[Group.Columns.PicMiscK] = value; }
		}
		/// <summary>
		/// Guid used to ensure duplicate groups don't get posted if the user refreshes the page after saving.
		/// </summary>
		public Guid	DuplicateGuid
		{
			get{ return Cambro.Misc.Db.GuidConvertor(this[Group.Columns.DuplicateGuid]);}		
			set{ this[Group.Columns.DuplicateGuid] = new System.Data.SqlTypes.SqlGuid(value);}
		}
		/// <summary>
		/// Force members to receive an email each time a new thread is posted to this group
		/// </summary>
		public override bool EmailOnAllThreads
		{
			get { return (bool)this[Group.Columns.EmailOnAllThreads]; }
			set { this[Group.Columns.EmailOnAllThreads] = value; }
		}
		/// <summary>
		/// The total number of members that have this group on their favourites list
		/// </summary>
		public override int FavouriteCount
		{
			get { return (int)this[Group.Columns.FavouriteCount]; }
			set { this[Group.Columns.FavouriteCount] = value; }
		}
		/// <summary>
		/// The total number of members that are watching this group for new messages
		/// </summary>
		public override int WatchCount
		{
			get { return (int)this[Group.Columns.WatchCount]; }
			set { this[Group.Columns.WatchCount] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildGroups
	{
		CachedSqlSelect<Group> ChildGroups();
		CachedSqlSelect<Group> ChildGroups(Q where);
		CachedSqlSelect<Group> ChildGroups(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<Group> ChildGroups(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class Group 
	 : 
	Bobs.ChildInterfaces.IHasChildBrands
	,
	Bobs.ChildInterfaces.IHasChildGroupEvents
	,
	Bobs.ChildInterfaces.IHasChildGroupPhotos
	,
	Bobs.ChildInterfaces.IHasChildGroupUsrs
	,
	Bobs.ChildInterfaces.IHasChildThreads
		{
			public CachedSqlSelect<Brand> ChildBrands()
		{
			return this.ChildBrands(null, null);
		}
		public CachedSqlSelect<Brand> ChildBrands(Q where)
		{
			return this.ChildBrands(where, null);
		}
		public CachedSqlSelect<Brand> ChildBrands(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildBrands(null, orderBy);
		}
		public CachedSqlSelect<Brand> ChildBrands(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<Brand>
			(
				new Children<Brand>
				(
					TablesEnum.Group, 
					this.K, 
					TablesEnum.Brand, 
					dr => 
					{ 
						Brand newBrand = new Brand(); 
						newBrand.Initialise(dr); 
						return newBrand;
					},
					"7CDA01A4",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<GroupEvent> ChildGroupEvents()
		{
			return this.ChildGroupEvents(null, null);
		}
		public CachedSqlSelect<GroupEvent> ChildGroupEvents(Q where)
		{
			return this.ChildGroupEvents(where, null);
		}
		public CachedSqlSelect<GroupEvent> ChildGroupEvents(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildGroupEvents(null, orderBy);
		}
		public CachedSqlSelect<GroupEvent> ChildGroupEvents(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<GroupEvent>
			(
				new Children<GroupEvent>
				(
					TablesEnum.Group, 
					this.K, 
					TablesEnum.GroupEvent, 
					dr => 
					{ 
						GroupEvent newGroupEvent = new GroupEvent(); 
						newGroupEvent.Initialise(dr); 
						return newGroupEvent;
					},
					"3AB4F1F6",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<GroupPhoto> ChildGroupPhotos()
		{
			return this.ChildGroupPhotos(null, null);
		}
		public CachedSqlSelect<GroupPhoto> ChildGroupPhotos(Q where)
		{
			return this.ChildGroupPhotos(where, null);
		}
		public CachedSqlSelect<GroupPhoto> ChildGroupPhotos(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildGroupPhotos(null, orderBy);
		}
		public CachedSqlSelect<GroupPhoto> ChildGroupPhotos(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<GroupPhoto>
			(
				new Children<GroupPhoto>
				(
					TablesEnum.Group, 
					this.K, 
					TablesEnum.GroupPhoto, 
					dr => 
					{ 
						GroupPhoto newGroupPhoto = new GroupPhoto(); 
						newGroupPhoto.Initialise(dr); 
						return newGroupPhoto;
					},
					"90DFAF32",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<GroupUsr> ChildGroupUsrs()
		{
			return this.ChildGroupUsrs(null, null);
		}
		public CachedSqlSelect<GroupUsr> ChildGroupUsrs(Q where)
		{
			return this.ChildGroupUsrs(where, null);
		}
		public CachedSqlSelect<GroupUsr> ChildGroupUsrs(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildGroupUsrs(null, orderBy);
		}
		public CachedSqlSelect<GroupUsr> ChildGroupUsrs(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<GroupUsr>
			(
				new Children<GroupUsr>
				(
					TablesEnum.Group, 
					this.K, 
					TablesEnum.GroupUsr, 
					dr => 
					{ 
						GroupUsr newGroupUsr = new GroupUsr(); 
						newGroupUsr.Initialise(dr); 
						return newGroupUsr;
					},
					"21C961A3",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<Thread> ChildThreads()
		{
			return this.ChildThreads(null, null);
		}
		public CachedSqlSelect<Thread> ChildThreads(Q where)
		{
			return this.ChildThreads(where, null);
		}
		public CachedSqlSelect<Thread> ChildThreads(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildThreads(null, orderBy);
		}
		public CachedSqlSelect<Thread> ChildThreads(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<Thread>
			(
				new Children<Thread>
				(
					TablesEnum.Group, 
					this.K, 
					TablesEnum.Thread, 
					dr => 
					{ 
						Thread newThread = new Thread(); 
						newThread.Initialise(dr); 
						return newThread;
					},
					"4576C3F1",
					where,
					orderBy
				)
			);
		}
		}

	#region GroupDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region GroupDataHolder
	/// <summary>
	/// Discussion / news groupsDataHolder
	/// </summary>
	[Serializable]
	public partial class GroupDataHolder : DataHolder<Group>
	{
		Group dataHolder;
		[NonSerializedAttribute] Group bob;

		public GroupDataHolder()
		{
			this.dataHolder = new Group();
		}
		
		void CopyValues(Group source, Group destination)
		{
			destination[Bobs.Group.Columns.K] = source[Bobs.Group.Columns.K];
			destination[Bobs.Group.Columns.Name] = source[Bobs.Group.Columns.Name];
			destination[Bobs.Group.Columns.Description] = source[Bobs.Group.Columns.Description];
			destination[Bobs.Group.Columns.LongDescriptionHtml] = source[Bobs.Group.Columns.LongDescriptionHtml];
			destination[Bobs.Group.Columns.LongDescriptionPlain] = source[Bobs.Group.Columns.LongDescriptionPlain];
			destination[Bobs.Group.Columns.PostingRules] = source[Bobs.Group.Columns.PostingRules];
			destination[Bobs.Group.Columns.DateTimeCreated] = source[Bobs.Group.Columns.DateTimeCreated];
			destination[Bobs.Group.Columns.TotalMembers] = source[Bobs.Group.Columns.TotalMembers];
			destination[Bobs.Group.Columns.TotalModerators] = source[Bobs.Group.Columns.TotalModerators];
			destination[Bobs.Group.Columns.TotalOwners] = source[Bobs.Group.Columns.TotalOwners];
			destination[Bobs.Group.Columns.TotalComments] = source[Bobs.Group.Columns.TotalComments];
			destination[Bobs.Group.Columns.LastPost] = source[Bobs.Group.Columns.LastPost];
			destination[Bobs.Group.Columns.AverageCommentDateTime] = source[Bobs.Group.Columns.AverageCommentDateTime];
			destination[Bobs.Group.Columns.PrivateGroupPage] = source[Bobs.Group.Columns.PrivateGroupPage];
			destination[Bobs.Group.Columns.PrivateChat] = source[Bobs.Group.Columns.PrivateChat];
			destination[Bobs.Group.Columns.PrivateMemberList] = source[Bobs.Group.Columns.PrivateMemberList];
			destination[Bobs.Group.Columns.Restriction] = source[Bobs.Group.Columns.Restriction];
			destination[Bobs.Group.Columns.CustomRestrictionType] = source[Bobs.Group.Columns.CustomRestrictionType];
			destination[Bobs.Group.Columns.ThemeK] = source[Bobs.Group.Columns.ThemeK];
			destination[Bobs.Group.Columns.CountryK] = source[Bobs.Group.Columns.CountryK];
			destination[Bobs.Group.Columns.PlaceK] = source[Bobs.Group.Columns.PlaceK];
			destination[Bobs.Group.Columns.MusicTypeK] = source[Bobs.Group.Columns.MusicTypeK];
			destination[Bobs.Group.Columns.BrandK] = source[Bobs.Group.Columns.BrandK];
			destination[Bobs.Group.Columns.UrlName] = source[Bobs.Group.Columns.UrlName];
			destination[Bobs.Group.Columns.Pic] = source[Bobs.Group.Columns.Pic];
			destination[Bobs.Group.Columns.PicState] = source[Bobs.Group.Columns.PicState];
			destination[Bobs.Group.Columns.PicPhotoK] = source[Bobs.Group.Columns.PicPhotoK];
			destination[Bobs.Group.Columns.PicMiscK] = source[Bobs.Group.Columns.PicMiscK];
			destination[Bobs.Group.Columns.DuplicateGuid] = source[Bobs.Group.Columns.DuplicateGuid];
			destination[Bobs.Group.Columns.EmailOnAllThreads] = source[Bobs.Group.Columns.EmailOnAllThreads];
			destination[Bobs.Group.Columns.FavouriteCount] = source[Bobs.Group.Columns.FavouriteCount];
			destination[Bobs.Group.Columns.WatchCount] = source[Bobs.Group.Columns.WatchCount];
		}
		
		public GroupDataHolder(Group bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// The primary key
		/// </summary>
		public int K
		{
			get { return dataHolder.K; }
			set { this.dataHolder.K = value; }
		}
		/// <summary>
		/// Name of the group
		/// </summary>
		public string Name
		{
			get { return dataHolder.Name; }
			set { this.dataHolder.Name = value; }
		}
		/// <summary>
		/// Text describing the group topic or scope
		/// </summary>
		public string Description
		{
			get { return dataHolder.Description; }
			set { this.dataHolder.Description = value; }
		}
		/// <summary>
		/// Html shown on the group homepage
		/// </summary>
		public string LongDescriptionHtml
		{
			get { return dataHolder.LongDescriptionHtml; }
			set { this.dataHolder.LongDescriptionHtml = value; }
		}
		/// <summary>
		/// Is the long description surrounded by a div and checked for proper html?
		/// </summary>
		public bool LongDescriptionPlain
		{
			get { return dataHolder.LongDescriptionPlain; }
			set { this.dataHolder.LongDescriptionPlain = value; }
		}
		/// <summary>
		/// Posting rules that people have to agree to before joining
		/// </summary>
		public string PostingRules
		{
			get { return dataHolder.PostingRules; }
			set { this.dataHolder.PostingRules = value; }
		}
		/// <summary>
		/// DateTime the group was added
		/// </summary>
		public DateTime DateTimeCreated
		{
			get { return dataHolder.DateTimeCreated; }
			set { this.dataHolder.DateTimeCreated = value; }
		}
		/// <summary>
		/// Total number of members in this group
		/// </summary>
		public int TotalMembers
		{
			get { return dataHolder.TotalMembers; }
			set { this.dataHolder.TotalMembers = value; }
		}
		/// <summary>
		/// Total number of moderators in this group
		/// </summary>
		public int TotalModerators
		{
			get { return dataHolder.TotalModerators; }
			set { this.dataHolder.TotalModerators = value; }
		}
		/// <summary>
		/// Total number of owners of this group
		/// </summary>
		public int TotalOwners
		{
			get { return dataHolder.TotalOwners; }
			set { this.dataHolder.TotalOwners = value; }
		}
		/// <summary>
		/// Total number of comments
		/// </summary>
		public int TotalComments
		{
			get { return dataHolder.TotalComments; }
			set { this.dataHolder.TotalComments = value; }
		}
		/// <summary>
		/// DateTime of the last post
		/// </summary>
		public DateTime? LastPost
		{
			get { return dataHolder.LastPost; }
			set { this.dataHolder.LastPost = value; }
		}
		/// <summary>
		/// Average DateTime of all the comments
		/// </summary>
		public DateTime? AverageCommentDateTime
		{
			get { return dataHolder.AverageCommentDateTime; }
			set { this.dataHolder.AverageCommentDateTime = value; }
		}
		/// <summary>
		/// Private group page?
		/// </summary>
		public bool PrivateGroupPage
		{
			get { return dataHolder.PrivateGroupPage; }
			set { this.dataHolder.PrivateGroupPage = value; }
		}
		/// <summary>
		/// Private chat forum?
		/// </summary>
		public bool PrivateChat
		{
			get { return dataHolder.PrivateChat; }
			set { this.dataHolder.PrivateChat = value; }
		}
		/// <summary>
		/// Private members list?
		/// </summary>
		public bool PrivateMemberList
		{
			get { return dataHolder.PrivateMemberList; }
			set { this.dataHolder.PrivateMemberList = value; }
		}
		/// <summary>
		/// Membership restriction (Automatic=1, OwnerMustApprove=2, Custom=3)
		/// </summary>
		public int Restriction
		{
			get { return dataHolder.Restriction; }
			set { this.dataHolder.Restriction = value; }
		}
		/// <summary>
		/// Enum specifying a membership object - e.g. admins, photo moderators, promoters etc.
		/// </summary>
		public int CustomRestrictionType
		{
			get { return dataHolder.CustomRestrictionType; }
			set { this.dataHolder.CustomRestrictionType = value; }
		}
		/// <summary>
		/// Group theme
		/// </summary>
		public int ThemeK
		{
			get { return dataHolder.ThemeK; }
			set { this.dataHolder.ThemeK = value; }
		}
		/// <summary>
		/// Is the group country specific?
		/// </summary>
		public int CountryK
		{
			get { return dataHolder.CountryK; }
			set { this.dataHolder.CountryK = value; }
		}
		/// <summary>
		/// Is the group place specific?
		/// </summary>
		public int PlaceK
		{
			get { return dataHolder.PlaceK; }
			set { this.dataHolder.PlaceK = value; }
		}
		/// <summary>
		/// Is the group music specific?
		/// </summary>
		public int MusicTypeK
		{
			get { return dataHolder.MusicTypeK; }
			set { this.dataHolder.MusicTypeK = value; }
		}
		/// <summary>
		/// Is the group brand specific?
		/// </summary>
		public int BrandK
		{
			get { return dataHolder.BrandK; }
			set { this.dataHolder.BrandK = value; }
		}
		/// <summary>
		/// Unique url-compliant name
		/// </summary>
		public string UrlName
		{
			get { return dataHolder.UrlName; }
			set { this.dataHolder.UrlName = value; }
		}
		/// <summary>
		/// Cropped image 100*100
		/// </summary>
		public Guid Pic
		{
			get { return dataHolder.Pic; }
			set { this.dataHolder.Pic = value; }
		}
		/// <summary>
		/// State var used to reconstruct cropper when re-cropping
		/// </summary>
		public string PicState
		{
			get { return dataHolder.PicState; }
			set { this.dataHolder.PicState = value; }
		}
		/// <summary>
		/// The Photo that was used to create the Pic.
		/// </summary>
		public int PicPhotoK
		{
			get { return dataHolder.PicPhotoK; }
			set { this.dataHolder.PicPhotoK = value; }
		}
		/// <summary>
		/// The Misc that was used to create the Pic.
		/// </summary>
		public int PicMiscK
		{
			get { return dataHolder.PicMiscK; }
			set { this.dataHolder.PicMiscK = value; }
		}
		/// <summary>
		/// Guid used to ensure duplicate groups don't get posted if the user refreshes the page after saving.
		/// </summary>
		public Guid DuplicateGuid
		{
			get { return dataHolder.DuplicateGuid; }
			set { this.dataHolder.DuplicateGuid = value; }
		}
		/// <summary>
		/// Force members to receive an email each time a new thread is posted to this group
		/// </summary>
		public bool EmailOnAllThreads
		{
			get { return dataHolder.EmailOnAllThreads; }
			set { this.dataHolder.EmailOnAllThreads = value; }
		}
		/// <summary>
		/// The total number of members that have this group on their favourites list
		/// </summary>
		public int FavouriteCount
		{
			get { return dataHolder.FavouriteCount; }
			set { this.dataHolder.FavouriteCount = value; }
		}
		/// <summary>
		/// The total number of members that are watching this group for new messages
		/// </summary>
		public int WatchCount
		{
			get { return dataHolder.WatchCount; }
			set { this.dataHolder.WatchCount = value; }
		}
		#endregion
		public Group Group
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new Group(K);
					}
					else
					{
						bob = new Group();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region GroupSet
	public partial class GroupSet : BobSet, IEnumerable<Group>
	{
		public GroupSet(Query query) : base(query) { }

		public Group this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new Group(this);
					((Group)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (Group)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new GroupTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<Group> ToList()
		{
			List<Group> list = new List<Group>();
			foreach (Group item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<Group> Members

		public new IEnumerator<Group> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region GroupTableDef
	public class GroupTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "Group";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "81294206";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return Group.GetColumnName((Group.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.Group;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return true;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return Group.Columns.K;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			Group.Columns c = (Group.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case Group.Columns.K: ColumnStore[i] = new ColumnDef(c, "K", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey | SqlColumnFlag.AutoNumber, null); break;
					case Group.Columns.Name: ColumnStore[i] = new ColumnDef(c, "Name", SqlDbType.VarChar, 200, ""); break;
					case Group.Columns.Description: ColumnStore[i] = new ColumnDef(c, "Description", SqlDbType.VarChar, 255, ""); break;
					case Group.Columns.LongDescriptionHtml: ColumnStore[i] = new ColumnDef(c, "LongDescriptionHtml", SqlDbType.Text, ""); break;
					case Group.Columns.LongDescriptionPlain: ColumnStore[i] = new ColumnDef(c, "LongDescriptionPlain", SqlDbType.Bit, false); break;
					case Group.Columns.PostingRules: ColumnStore[i] = new ColumnDef(c, "PostingRules", SqlDbType.Text, ""); break;
					case Group.Columns.DateTimeCreated: ColumnStore[i] = new ColumnDef(c, "DateTimeCreated", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case Group.Columns.TotalMembers: ColumnStore[i] = new ColumnDef(c, "TotalMembers", SqlDbType.Int, 0); break;
					case Group.Columns.TotalModerators: ColumnStore[i] = new ColumnDef(c, "TotalModerators", SqlDbType.Int, 0); break;
					case Group.Columns.TotalOwners: ColumnStore[i] = new ColumnDef(c, "TotalOwners", SqlDbType.Int, 0); break;
					case Group.Columns.TotalComments: ColumnStore[i] = new ColumnDef(c, "TotalComments", SqlDbType.Int, 0); break;
					case Group.Columns.LastPost: ColumnStore[i] = new ColumnDef(c, "LastPost", SqlDbType.DateTime, 16, null); break;
					case Group.Columns.AverageCommentDateTime: ColumnStore[i] = new ColumnDef(c, "AverageCommentDateTime", SqlDbType.DateTime, 16, null); break;
					case Group.Columns.PrivateGroupPage: ColumnStore[i] = new ColumnDef(c, "PrivateGroupPage", SqlDbType.Bit, false); break;
					case Group.Columns.PrivateChat: ColumnStore[i] = new ColumnDef(c, "PrivateChat", SqlDbType.Bit, false); break;
					case Group.Columns.PrivateMemberList: ColumnStore[i] = new ColumnDef(c, "PrivateMemberList", SqlDbType.Bit, false); break;
					case Group.Columns.Restriction: ColumnStore[i] = new ColumnDef(c, "Restriction", SqlDbType.Int, 0); break;
					case Group.Columns.CustomRestrictionType: ColumnStore[i] = new ColumnDef(c, "CustomRestrictionType", SqlDbType.Int, 0); break;
					case Group.Columns.ThemeK: ColumnStore[i] = new ColumnDef(c, "ThemeK", SqlDbType.Int, 0); break;
					case Group.Columns.CountryK: ColumnStore[i] = new ColumnDef(c, "CountryK", SqlDbType.Int, 0); break;
					case Group.Columns.PlaceK: ColumnStore[i] = new ColumnDef(c, "PlaceK", SqlDbType.Int, 0); break;
					case Group.Columns.MusicTypeK: ColumnStore[i] = new ColumnDef(c, "MusicTypeK", SqlDbType.Int, 0); break;
					case Group.Columns.BrandK: ColumnStore[i] = new ColumnDef(c, "BrandK", SqlDbType.Int, 0); break;
					case Group.Columns.UrlName: ColumnStore[i] = new ColumnDef(c, "UrlName", SqlDbType.VarChar, 200, ""); break;
					case Group.Columns.Pic: ColumnStore[i] = new ColumnDef(c, "Pic", SqlDbType.UniqueIdentifier, Guid.Empty); break;
					case Group.Columns.PicState: ColumnStore[i] = new ColumnDef(c, "PicState", SqlDbType.VarChar, 100, ""); break;
					case Group.Columns.PicPhotoK: ColumnStore[i] = new ColumnDef(c, "PicPhotoK", SqlDbType.Int, 0); break;
					case Group.Columns.PicMiscK: ColumnStore[i] = new ColumnDef(c, "PicMiscK", SqlDbType.Int, 0); break;
					case Group.Columns.DuplicateGuid: ColumnStore[i] = new ColumnDef(c, "DuplicateGuid", SqlDbType.UniqueIdentifier, Guid.Empty); break;
					case Group.Columns.EmailOnAllThreads: ColumnStore[i] = new ColumnDef(c, "EmailOnAllThreads", SqlDbType.Bit, false); break;
					case Group.Columns.FavouriteCount: ColumnStore[i] = new ColumnDef(c, "FavouriteCount", SqlDbType.Int, 0); break;
					case Group.Columns.WatchCount: ColumnStore[i] = new ColumnDef(c, "WatchCount", SqlDbType.Int, 0); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(Group.Columns.K);
						InitColumn(Group.Columns.Name);
						InitColumn(Group.Columns.Description);
						InitColumn(Group.Columns.LongDescriptionHtml);
						InitColumn(Group.Columns.LongDescriptionPlain);
						InitColumn(Group.Columns.PostingRules);
						InitColumn(Group.Columns.DateTimeCreated);
						InitColumn(Group.Columns.TotalMembers);
						InitColumn(Group.Columns.TotalModerators);
						InitColumn(Group.Columns.TotalOwners);
						InitColumn(Group.Columns.TotalComments);
						InitColumn(Group.Columns.LastPost);
						InitColumn(Group.Columns.AverageCommentDateTime);
						InitColumn(Group.Columns.PrivateGroupPage);
						InitColumn(Group.Columns.PrivateChat);
						InitColumn(Group.Columns.PrivateMemberList);
						InitColumn(Group.Columns.Restriction);
						InitColumn(Group.Columns.CustomRestrictionType);
						InitColumn(Group.Columns.ThemeK);
						InitColumn(Group.Columns.CountryK);
						InitColumn(Group.Columns.PlaceK);
						InitColumn(Group.Columns.MusicTypeK);
						InitColumn(Group.Columns.BrandK);
						InitColumn(Group.Columns.UrlName);
						InitColumn(Group.Columns.Pic);
						InitColumn(Group.Columns.PicState);
						InitColumn(Group.Columns.PicPhotoK);
						InitColumn(Group.Columns.PicMiscK);
						InitColumn(Group.Columns.DuplicateGuid);
						InitColumn(Group.Columns.EmailOnAllThreads);
						InitColumn(Group.Columns.FavouriteCount);
						InitColumn(Group.Columns.WatchCount);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region GroupEvent
	/// <summary>
	/// Recommended events
	/// </summary>
	public partial class GroupEvent : Model.Entities.GroupEvent, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// Link to Group table
			/// </summary>
			GroupK = 0x00250001,
			/// <summary>
			/// Link to the Event table
			/// </summary>
			EventK = 0x00250002,
		}
		#endregion
		public static string GetColumnName(GroupEvent.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case GroupEvent.Columns.GroupK: return "GroupK";
						case GroupEvent.Columns.EventK: return "EventK";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(GroupEvent.Columns columnEnum)
		{
			switch (columnEnum)
			{
						default: return false;
			}
		}


		#region Common
	 
		public GroupEvent(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);}
		public GroupEvent()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.GroupEvent);
		}
		public GroupEvent(BobSet bs)
		{
			this.Bob = new Bob(Bobs.Tables.Defs.GroupEvent, bs);
		}
		public GroupEvent(IBob Parent, object Column) : this()
		{
			this.Bob.GetBobFromParentSimple(Parent, Column, TablesEnum.GroupEvent);
		}
		public GroupEvent(int GroupK, int EventK) : this()
		{
			this.Bob.GetBobFromPrimaryKeyArray(new Q[] {new Q(GroupEvent.Columns.GroupK,GroupK), new Q(GroupEvent.Columns.EventK,EventK)});
		} 
		#endregion

	}
	#endregion
	#region GroupEventTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region GroupEvent
	/// <summary>
	/// Recommended events
	/// </summary>
	[Serializable]
	public partial class GroupEvent 
	{
		
		#region Simple members
		/// <summary>
		/// Link to Group table
		/// </summary>
		public override int GroupK
		{
			get { return (int)this[GroupEvent.Columns.GroupK]; }
			set { this[GroupEvent.Columns.GroupK] = value; }
		}
		/// <summary>
		/// Link to the Event table
		/// </summary>
		public override int EventK
		{
			get { return (int)this[GroupEvent.Columns.EventK]; }
			set { this[GroupEvent.Columns.EventK] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildGroupEvents
	{
		CachedSqlSelect<GroupEvent> ChildGroupEvents();
		CachedSqlSelect<GroupEvent> ChildGroupEvents(Q where);
		CachedSqlSelect<GroupEvent> ChildGroupEvents(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<GroupEvent> ChildGroupEvents(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class GroupEvent 
		{
		}

	#region GroupEventDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region GroupEventDataHolder
	/// <summary>
	/// Recommended eventsDataHolder
	/// </summary>
	[Serializable]
	public partial class GroupEventDataHolder : DataHolder<GroupEvent>
	{
		GroupEvent dataHolder;
		[NonSerializedAttribute] GroupEvent bob;

		public GroupEventDataHolder()
		{
			this.dataHolder = new GroupEvent();
		}
		
		void CopyValues(GroupEvent source, GroupEvent destination)
		{
			destination[Bobs.GroupEvent.Columns.GroupK] = source[Bobs.GroupEvent.Columns.GroupK];
			destination[Bobs.GroupEvent.Columns.EventK] = source[Bobs.GroupEvent.Columns.EventK];
		}
		
		public GroupEventDataHolder(GroupEvent bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// Link to Group table
		/// </summary>
		public int GroupK
		{
			get { return dataHolder.GroupK; }
			set { this.dataHolder.GroupK = value; }
		}
		/// <summary>
		/// Link to the Event table
		/// </summary>
		public int EventK
		{
			get { return dataHolder.EventK; }
			set { this.dataHolder.EventK = value; }
		}
		#endregion
		public GroupEvent GroupEvent
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new GroupEvent(K);
					}
					else
					{
						bob = new GroupEvent();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region GroupEventSet
	public partial class GroupEventSet : BobSet, IEnumerable<GroupEvent>
	{
		public GroupEventSet(Query query) : base(query) { }

		public GroupEvent this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new GroupEvent(this);
					((GroupEvent)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (GroupEvent)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new GroupEventTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<GroupEvent> ToList()
		{
			List<GroupEvent> list = new List<GroupEvent>();
			foreach (GroupEvent item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<GroupEvent> Members

		public new IEnumerator<GroupEvent> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region GroupEventTableDef
	public class GroupEventTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "GroupEvent";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "3AB4F1F6";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return GroupEvent.GetColumnName((GroupEvent.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.GroupEvent;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return false;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return null;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			GroupEvent.Columns c = (GroupEvent.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case GroupEvent.Columns.GroupK: ColumnStore[i] = new ColumnDef(c, "GroupK", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey, 0); break;
					case GroupEvent.Columns.EventK: ColumnStore[i] = new ColumnDef(c, "EventK", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey, 0); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(GroupEvent.Columns.GroupK);
						InitColumn(GroupEvent.Columns.EventK);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region GroupPhoto
	/// <summary>
	/// Top photos on the group front-pages
	/// </summary>
	public partial class GroupPhoto : Model.Entities.GroupPhoto, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// Primary K - not clustered index
			/// </summary>
			K = 0x00260001,
			/// <summary>
			/// Link to Group table
			/// </summary>
			GroupK = 0x00260002,
			/// <summary>
			/// Link to the Photo table
			/// </summary>
			PhotoK = 0x00260003,
			/// <summary>
			/// Caption for the group homepage
			/// </summary>
			Caption = 0x00260004,
			/// <summary>
			/// When was the photo added
			/// </summary>
			DateTime = 0x00260005,
			/// <summary>
			/// Who added/modified the photo
			/// </summary>
			AddedByUsrK = 0x00260006,
			/// <summary>
			/// Do we show this on the group front page?
			/// </summary>
			ShowOnFrontPage = 0x00260007,
		}
		#endregion
		public static string GetColumnName(GroupPhoto.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case GroupPhoto.Columns.K: return "K";
						case GroupPhoto.Columns.GroupK: return "GroupK";
						case GroupPhoto.Columns.PhotoK: return "PhotoK";
						case GroupPhoto.Columns.Caption: return "Caption";
						case GroupPhoto.Columns.DateTime: return "DateTime";
						case GroupPhoto.Columns.AddedByUsrK: return "AddedByUsrK";
						case GroupPhoto.Columns.ShowOnFrontPage: return "ShowOnFrontPage";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(GroupPhoto.Columns columnEnum)
		{
			switch (columnEnum)
			{
											default: return false;
			}
		}


		#region Common
 
		public GroupPhoto(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);  }
		public GroupPhoto()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.GroupPhoto);
		}
		public GroupPhoto(BobSet bs)
		{
			this.Bob = new Bob(bs.Table, bs);
		}
		public GroupPhoto(int GroupPhotoK, IBob Parent, object Column)
			: this()
		{
			Bob.GetBobFromParent(GroupPhotoK, Parent.Bob, Column, TablesEnum.GroupPhoto);
		}
		public GroupPhoto(int GroupPhotoK)
			: this()
		{
			Bob.GetBobFromPrimaryKey(GroupPhotoK);
		}
		#endregion

	}
	#endregion
	#region GroupPhotoTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region GroupPhoto
	/// <summary>
	/// Top photos on the group front-pages
	/// </summary>
	[Serializable]
	public partial class GroupPhoto 
	{
		
		#region Simple members
		/// <summary>
		/// Primary K - not clustered index
		/// </summary>
		public override int K
		{
			get { return (int)this[GroupPhoto.Columns.K] as int? ?? 0 ; }
			set { this[GroupPhoto.Columns.K] = value; }
		}
		/// <summary>
		/// Link to Group table
		/// </summary>
		public override int GroupK
		{
			get { return (int)this[GroupPhoto.Columns.GroupK]; }
			set { this[GroupPhoto.Columns.GroupK] = value; }
		}
		/// <summary>
		/// Link to the Photo table
		/// </summary>
		public override int PhotoK
		{
			get { return (int)this[GroupPhoto.Columns.PhotoK]; }
			set { this[GroupPhoto.Columns.PhotoK] = value; }
		}
		/// <summary>
		/// Caption for the group homepage
		/// </summary>
		public override string Caption
		{
			get { return (string)this[GroupPhoto.Columns.Caption]; }
			set { this[GroupPhoto.Columns.Caption] = value; }
		}
		/// <summary>
		/// When was the photo added
		/// </summary>
		public override DateTime DateTime
		{
			get { return (DateTime)this[GroupPhoto.Columns.DateTime]; }
			set { this[GroupPhoto.Columns.DateTime] = value; }
		}
		/// <summary>
		/// Who added/modified the photo
		/// </summary>
		public override int AddedByUsrK
		{
			get { return (int)this[GroupPhoto.Columns.AddedByUsrK]; }
			set { this[GroupPhoto.Columns.AddedByUsrK] = value; }
		}
		/// <summary>
		/// Do we show this on the group front page?
		/// </summary>
		public override bool ShowOnFrontPage
		{
			get { return (bool)this[GroupPhoto.Columns.ShowOnFrontPage]; }
			set { this[GroupPhoto.Columns.ShowOnFrontPage] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildGroupPhotos
	{
		CachedSqlSelect<GroupPhoto> ChildGroupPhotos();
		CachedSqlSelect<GroupPhoto> ChildGroupPhotos(Q where);
		CachedSqlSelect<GroupPhoto> ChildGroupPhotos(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<GroupPhoto> ChildGroupPhotos(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class GroupPhoto 
		{
		}

	#region GroupPhotoDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region GroupPhotoDataHolder
	/// <summary>
	/// Top photos on the group front-pagesDataHolder
	/// </summary>
	[Serializable]
	public partial class GroupPhotoDataHolder : DataHolder<GroupPhoto>
	{
		GroupPhoto dataHolder;
		[NonSerializedAttribute] GroupPhoto bob;

		public GroupPhotoDataHolder()
		{
			this.dataHolder = new GroupPhoto();
		}
		
		void CopyValues(GroupPhoto source, GroupPhoto destination)
		{
			destination[Bobs.GroupPhoto.Columns.K] = source[Bobs.GroupPhoto.Columns.K];
			destination[Bobs.GroupPhoto.Columns.GroupK] = source[Bobs.GroupPhoto.Columns.GroupK];
			destination[Bobs.GroupPhoto.Columns.PhotoK] = source[Bobs.GroupPhoto.Columns.PhotoK];
			destination[Bobs.GroupPhoto.Columns.Caption] = source[Bobs.GroupPhoto.Columns.Caption];
			destination[Bobs.GroupPhoto.Columns.DateTime] = source[Bobs.GroupPhoto.Columns.DateTime];
			destination[Bobs.GroupPhoto.Columns.AddedByUsrK] = source[Bobs.GroupPhoto.Columns.AddedByUsrK];
			destination[Bobs.GroupPhoto.Columns.ShowOnFrontPage] = source[Bobs.GroupPhoto.Columns.ShowOnFrontPage];
		}
		
		public GroupPhotoDataHolder(GroupPhoto bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// Primary K - not clustered index
		/// </summary>
		public int K
		{
			get { return dataHolder.K; }
			set { this.dataHolder.K = value; }
		}
		/// <summary>
		/// Link to Group table
		/// </summary>
		public int GroupK
		{
			get { return dataHolder.GroupK; }
			set { this.dataHolder.GroupK = value; }
		}
		/// <summary>
		/// Link to the Photo table
		/// </summary>
		public int PhotoK
		{
			get { return dataHolder.PhotoK; }
			set { this.dataHolder.PhotoK = value; }
		}
		/// <summary>
		/// Caption for the group homepage
		/// </summary>
		public string Caption
		{
			get { return dataHolder.Caption; }
			set { this.dataHolder.Caption = value; }
		}
		/// <summary>
		/// When was the photo added
		/// </summary>
		public DateTime DateTime
		{
			get { return dataHolder.DateTime; }
			set { this.dataHolder.DateTime = value; }
		}
		/// <summary>
		/// Who added/modified the photo
		/// </summary>
		public int AddedByUsrK
		{
			get { return dataHolder.AddedByUsrK; }
			set { this.dataHolder.AddedByUsrK = value; }
		}
		/// <summary>
		/// Do we show this on the group front page?
		/// </summary>
		public bool ShowOnFrontPage
		{
			get { return dataHolder.ShowOnFrontPage; }
			set { this.dataHolder.ShowOnFrontPage = value; }
		}
		#endregion
		public GroupPhoto GroupPhoto
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new GroupPhoto(K);
					}
					else
					{
						bob = new GroupPhoto();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region GroupPhotoSet
	public partial class GroupPhotoSet : BobSet, IEnumerable<GroupPhoto>
	{
		public GroupPhotoSet(Query query) : base(query) { }

		public GroupPhoto this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new GroupPhoto(this);
					((GroupPhoto)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (GroupPhoto)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new GroupPhotoTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<GroupPhoto> ToList()
		{
			List<GroupPhoto> list = new List<GroupPhoto>();
			foreach (GroupPhoto item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<GroupPhoto> Members

		public new IEnumerator<GroupPhoto> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region GroupPhotoTableDef
	public class GroupPhotoTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "GroupPhoto";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "90DFAF32";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return GroupPhoto.GetColumnName((GroupPhoto.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.GroupPhoto;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return true;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return GroupPhoto.Columns.K;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			GroupPhoto.Columns c = (GroupPhoto.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case GroupPhoto.Columns.K: ColumnStore[i] = new ColumnDef(c, "K", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey | SqlColumnFlag.AutoNumber, null); break;
					case GroupPhoto.Columns.GroupK: ColumnStore[i] = new ColumnDef(c, "GroupK", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey, 0); break;
					case GroupPhoto.Columns.PhotoK: ColumnStore[i] = new ColumnDef(c, "PhotoK", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey, 0); break;
					case GroupPhoto.Columns.Caption: ColumnStore[i] = new ColumnDef(c, "Caption", SqlDbType.VarChar, 255, ""); break;
					case GroupPhoto.Columns.DateTime: ColumnStore[i] = new ColumnDef(c, "DateTime", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case GroupPhoto.Columns.AddedByUsrK: ColumnStore[i] = new ColumnDef(c, "AddedByUsrK", SqlDbType.Int, 0); break;
					case GroupPhoto.Columns.ShowOnFrontPage: ColumnStore[i] = new ColumnDef(c, "ShowOnFrontPage", SqlDbType.Bit, false); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(GroupPhoto.Columns.K);
						InitColumn(GroupPhoto.Columns.GroupK);
						InitColumn(GroupPhoto.Columns.PhotoK);
						InitColumn(GroupPhoto.Columns.Caption);
						InitColumn(GroupPhoto.Columns.DateTime);
						InitColumn(GroupPhoto.Columns.AddedByUsrK);
						InitColumn(GroupPhoto.Columns.ShowOnFrontPage);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region GroupUsr
	/// <summary>
	/// Membership of a group
	/// </summary>
	public partial class GroupUsr : Model.Entities.GroupUsr, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// The user that has been invited
			/// </summary>
			UsrK = 0x00270001,
			/// <summary>
			/// The group
			/// </summary>
			GroupK = 0x00270002,
			/// <summary>
			/// Membershp status: Member=1, Requested=2, Denied=3, Invited=4, Exited=5, Barred=6
			/// </summary>
			Status = 0x00270003,
			/// <summary>
			/// DateTime that the status last changed
			/// </summary>
			StatusChangeDateTime = 0x00270004,
			/// <summary>
			/// The UsrK of the user that performed the last status change
			/// </summary>
			StatusChangeUsrK = 0x00270005,
			/// <summary>
			/// Is the user an owner of this group?
			/// </summary>
			Owner = 0x00270006,
			/// <summary>
			/// Is the user a moderator of this group?
			/// </summary>
			Moderator = 0x00270007,
			/// <summary>
			/// Moderators with this flag set can post news.
			/// </summary>
			NewsAdmin = 0x00270008,
			/// <summary>
			/// Moderators with this flag set can invite/confirm/ban members.
			/// </summary>
			MemberAdmin = 0x00270009,
			/// <summary>
			/// Is this group a favourite?
			/// </summary>
			Favourite = 0x0027000a,
			/// <summary>
			/// Message sent to the person by the person that invited them
			/// </summary>
			InviteMessage = 0x0027000b,
			/// <summary>
			/// This is the user that invited this person
			/// </summary>
			InviteUsrK = 0x0027000c,
			/// <summary>
			/// Should this membership admin receive new user emails?
			/// </summary>
			MemberAdminNewUserEmails = 0x0027000d,
		}
		#endregion
		public static string GetColumnName(GroupUsr.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case GroupUsr.Columns.UsrK: return "UsrK";
						case GroupUsr.Columns.GroupK: return "GroupK";
						case GroupUsr.Columns.Status: return "Status";
						case GroupUsr.Columns.StatusChangeDateTime: return "StatusChangeDateTime";
						case GroupUsr.Columns.StatusChangeUsrK: return "StatusChangeUsrK";
						case GroupUsr.Columns.Owner: return "Owner";
						case GroupUsr.Columns.Moderator: return "Moderator";
						case GroupUsr.Columns.NewsAdmin: return "NewsAdmin";
						case GroupUsr.Columns.MemberAdmin: return "MemberAdmin";
						case GroupUsr.Columns.Favourite: return "Favourite";
						case GroupUsr.Columns.InviteMessage: return "InviteMessage";
						case GroupUsr.Columns.InviteUsrK: return "InviteUsrK";
						case GroupUsr.Columns.MemberAdminNewUserEmails: return "MemberAdminNewUserEmails";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(GroupUsr.Columns columnEnum)
		{
			switch (columnEnum)
			{
																	default: return false;
			}
		}


		#region Common
	 
		public GroupUsr(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);}
		public GroupUsr()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.GroupUsr);
		}
		public GroupUsr(BobSet bs)
		{
			this.Bob = new Bob(Bobs.Tables.Defs.GroupUsr, bs);
		}
		public GroupUsr(IBob Parent, object Column) : this()
		{
			this.Bob.GetBobFromParentSimple(Parent, Column, TablesEnum.GroupUsr);
		}
		public GroupUsr(int UsrK, int GroupK) : this()
		{
			this.Bob.GetBobFromPrimaryKeyArray(new Q[] {new Q(GroupUsr.Columns.UsrK,UsrK), new Q(GroupUsr.Columns.GroupK,GroupK)});
		} 
		#endregion

	}
	#endregion
	#region GroupUsrTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region GroupUsr
	/// <summary>
	/// Membership of a group
	/// </summary>
	[Serializable]
	public partial class GroupUsr 
	{
		
		#region Simple members
		/// <summary>
		/// The user that has been invited
		/// </summary>
		public override int UsrK
		{
			get { return (int)this[GroupUsr.Columns.UsrK]; }
			set { this[GroupUsr.Columns.UsrK] = value; }
		}
		/// <summary>
		/// The group
		/// </summary>
		public override int GroupK
		{
			get { return (int)this[GroupUsr.Columns.GroupK]; }
			set { this[GroupUsr.Columns.GroupK] = value; }
		}
		/// <summary>
		/// Membershp status: Member=1, Requested=2, Denied=3, Invited=4, Exited=5, Barred=6
		/// </summary>
		public override int Status
		{
			get { return (int)this[GroupUsr.Columns.Status]; }
			set { this[GroupUsr.Columns.Status] = value; }
		}
		/// <summary>
		/// DateTime that the status last changed
		/// </summary>
		public override DateTime StatusChangeDateTime
		{
			get { return (DateTime)this[GroupUsr.Columns.StatusChangeDateTime]; }
			set { this[GroupUsr.Columns.StatusChangeDateTime] = value; }
		}
		/// <summary>
		/// The UsrK of the user that performed the last status change
		/// </summary>
		public override int StatusChangeUsrK
		{
			get { return (int)this[GroupUsr.Columns.StatusChangeUsrK]; }
			set { this[GroupUsr.Columns.StatusChangeUsrK] = value; }
		}
		/// <summary>
		/// Is the user an owner of this group?
		/// </summary>
		public override bool Owner
		{
			get { return (bool)this[GroupUsr.Columns.Owner]; }
			set { this[GroupUsr.Columns.Owner] = value; }
		}
		/// <summary>
		/// Is the user a moderator of this group?
		/// </summary>
		public override bool Moderator
		{
			get { return (bool)this[GroupUsr.Columns.Moderator]; }
			set { this[GroupUsr.Columns.Moderator] = value; }
		}
		/// <summary>
		/// Moderators with this flag set can post news.
		/// </summary>
		public override bool NewsAdmin
		{
			get { return (bool)this[GroupUsr.Columns.NewsAdmin]; }
			set { this[GroupUsr.Columns.NewsAdmin] = value; }
		}
		/// <summary>
		/// Moderators with this flag set can invite/confirm/ban members.
		/// </summary>
		public override bool MemberAdmin
		{
			get { return (bool)this[GroupUsr.Columns.MemberAdmin]; }
			set { this[GroupUsr.Columns.MemberAdmin] = value; }
		}
		/// <summary>
		/// Is this group a favourite?
		/// </summary>
		public override bool Favourite
		{
			get { return (bool)this[GroupUsr.Columns.Favourite]; }
			set { this[GroupUsr.Columns.Favourite] = value; }
		}
		/// <summary>
		/// Message sent to the person by the person that invited them
		/// </summary>
		public override string InviteMessage
		{
			get { return (string)this[GroupUsr.Columns.InviteMessage]; }
			set { this[GroupUsr.Columns.InviteMessage] = value; }
		}
		/// <summary>
		/// This is the user that invited this person
		/// </summary>
		public override int InviteUsrK
		{
			get { return (int)this[GroupUsr.Columns.InviteUsrK]; }
			set { this[GroupUsr.Columns.InviteUsrK] = value; }
		}
		/// <summary>
		/// Should this membership admin receive new user emails?
		/// </summary>
		public override bool MemberAdminNewUserEmails
		{
			get { return (bool)this[GroupUsr.Columns.MemberAdminNewUserEmails]; }
			set { this[GroupUsr.Columns.MemberAdminNewUserEmails] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildGroupUsrs
	{
		CachedSqlSelect<GroupUsr> ChildGroupUsrs();
		CachedSqlSelect<GroupUsr> ChildGroupUsrs(Q where);
		CachedSqlSelect<GroupUsr> ChildGroupUsrs(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<GroupUsr> ChildGroupUsrs(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class GroupUsr 
		{
		}

	#region GroupUsrDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region GroupUsrDataHolder
	/// <summary>
	/// Membership of a groupDataHolder
	/// </summary>
	[Serializable]
	public partial class GroupUsrDataHolder : DataHolder<GroupUsr>
	{
		GroupUsr dataHolder;
		[NonSerializedAttribute] GroupUsr bob;

		public GroupUsrDataHolder()
		{
			this.dataHolder = new GroupUsr();
		}
		
		void CopyValues(GroupUsr source, GroupUsr destination)
		{
			destination[Bobs.GroupUsr.Columns.UsrK] = source[Bobs.GroupUsr.Columns.UsrK];
			destination[Bobs.GroupUsr.Columns.GroupK] = source[Bobs.GroupUsr.Columns.GroupK];
			destination[Bobs.GroupUsr.Columns.Status] = source[Bobs.GroupUsr.Columns.Status];
			destination[Bobs.GroupUsr.Columns.StatusChangeDateTime] = source[Bobs.GroupUsr.Columns.StatusChangeDateTime];
			destination[Bobs.GroupUsr.Columns.StatusChangeUsrK] = source[Bobs.GroupUsr.Columns.StatusChangeUsrK];
			destination[Bobs.GroupUsr.Columns.Owner] = source[Bobs.GroupUsr.Columns.Owner];
			destination[Bobs.GroupUsr.Columns.Moderator] = source[Bobs.GroupUsr.Columns.Moderator];
			destination[Bobs.GroupUsr.Columns.NewsAdmin] = source[Bobs.GroupUsr.Columns.NewsAdmin];
			destination[Bobs.GroupUsr.Columns.MemberAdmin] = source[Bobs.GroupUsr.Columns.MemberAdmin];
			destination[Bobs.GroupUsr.Columns.Favourite] = source[Bobs.GroupUsr.Columns.Favourite];
			destination[Bobs.GroupUsr.Columns.InviteMessage] = source[Bobs.GroupUsr.Columns.InviteMessage];
			destination[Bobs.GroupUsr.Columns.InviteUsrK] = source[Bobs.GroupUsr.Columns.InviteUsrK];
			destination[Bobs.GroupUsr.Columns.MemberAdminNewUserEmails] = source[Bobs.GroupUsr.Columns.MemberAdminNewUserEmails];
		}
		
		public GroupUsrDataHolder(GroupUsr bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// The user that has been invited
		/// </summary>
		public int UsrK
		{
			get { return dataHolder.UsrK; }
			set { this.dataHolder.UsrK = value; }
		}
		/// <summary>
		/// The group
		/// </summary>
		public int GroupK
		{
			get { return dataHolder.GroupK; }
			set { this.dataHolder.GroupK = value; }
		}
		/// <summary>
		/// Membershp status: Member=1, Requested=2, Denied=3, Invited=4, Exited=5, Barred=6
		/// </summary>
		public int Status
		{
			get { return dataHolder.Status; }
			set { this.dataHolder.Status = value; }
		}
		/// <summary>
		/// DateTime that the status last changed
		/// </summary>
		public DateTime StatusChangeDateTime
		{
			get { return dataHolder.StatusChangeDateTime; }
			set { this.dataHolder.StatusChangeDateTime = value; }
		}
		/// <summary>
		/// The UsrK of the user that performed the last status change
		/// </summary>
		public int StatusChangeUsrK
		{
			get { return dataHolder.StatusChangeUsrK; }
			set { this.dataHolder.StatusChangeUsrK = value; }
		}
		/// <summary>
		/// Is the user an owner of this group?
		/// </summary>
		public bool Owner
		{
			get { return dataHolder.Owner; }
			set { this.dataHolder.Owner = value; }
		}
		/// <summary>
		/// Is the user a moderator of this group?
		/// </summary>
		public bool Moderator
		{
			get { return dataHolder.Moderator; }
			set { this.dataHolder.Moderator = value; }
		}
		/// <summary>
		/// Moderators with this flag set can post news.
		/// </summary>
		public bool NewsAdmin
		{
			get { return dataHolder.NewsAdmin; }
			set { this.dataHolder.NewsAdmin = value; }
		}
		/// <summary>
		/// Moderators with this flag set can invite/confirm/ban members.
		/// </summary>
		public bool MemberAdmin
		{
			get { return dataHolder.MemberAdmin; }
			set { this.dataHolder.MemberAdmin = value; }
		}
		/// <summary>
		/// Is this group a favourite?
		/// </summary>
		public bool Favourite
		{
			get { return dataHolder.Favourite; }
			set { this.dataHolder.Favourite = value; }
		}
		/// <summary>
		/// Message sent to the person by the person that invited them
		/// </summary>
		public string InviteMessage
		{
			get { return dataHolder.InviteMessage; }
			set { this.dataHolder.InviteMessage = value; }
		}
		/// <summary>
		/// This is the user that invited this person
		/// </summary>
		public int InviteUsrK
		{
			get { return dataHolder.InviteUsrK; }
			set { this.dataHolder.InviteUsrK = value; }
		}
		/// <summary>
		/// Should this membership admin receive new user emails?
		/// </summary>
		public bool MemberAdminNewUserEmails
		{
			get { return dataHolder.MemberAdminNewUserEmails; }
			set { this.dataHolder.MemberAdminNewUserEmails = value; }
		}
		#endregion
		public GroupUsr GroupUsr
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new GroupUsr(K);
					}
					else
					{
						bob = new GroupUsr();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region GroupUsrSet
	public partial class GroupUsrSet : BobSet, IEnumerable<GroupUsr>
	{
		public GroupUsrSet(Query query) : base(query) { }

		public GroupUsr this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new GroupUsr(this);
					((GroupUsr)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (GroupUsr)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new GroupUsrTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<GroupUsr> ToList()
		{
			List<GroupUsr> list = new List<GroupUsr>();
			foreach (GroupUsr item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<GroupUsr> Members

		public new IEnumerator<GroupUsr> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region GroupUsrTableDef
	public class GroupUsrTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "GroupUsr";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "21C961A3";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return GroupUsr.GetColumnName((GroupUsr.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.GroupUsr;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return false;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return null;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			GroupUsr.Columns c = (GroupUsr.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case GroupUsr.Columns.UsrK: ColumnStore[i] = new ColumnDef(c, "UsrK", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey, 0); break;
					case GroupUsr.Columns.GroupK: ColumnStore[i] = new ColumnDef(c, "GroupK", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey, 0); break;
					case GroupUsr.Columns.Status: ColumnStore[i] = new ColumnDef(c, "Status", SqlDbType.Int, 0); break;
					case GroupUsr.Columns.StatusChangeDateTime: ColumnStore[i] = new ColumnDef(c, "StatusChangeDateTime", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case GroupUsr.Columns.StatusChangeUsrK: ColumnStore[i] = new ColumnDef(c, "StatusChangeUsrK", SqlDbType.Int, 0); break;
					case GroupUsr.Columns.Owner: ColumnStore[i] = new ColumnDef(c, "Owner", SqlDbType.Bit, false); break;
					case GroupUsr.Columns.Moderator: ColumnStore[i] = new ColumnDef(c, "Moderator", SqlDbType.Bit, false); break;
					case GroupUsr.Columns.NewsAdmin: ColumnStore[i] = new ColumnDef(c, "NewsAdmin", SqlDbType.Bit, false); break;
					case GroupUsr.Columns.MemberAdmin: ColumnStore[i] = new ColumnDef(c, "MemberAdmin", SqlDbType.Bit, false); break;
					case GroupUsr.Columns.Favourite: ColumnStore[i] = new ColumnDef(c, "Favourite", SqlDbType.Bit, false); break;
					case GroupUsr.Columns.InviteMessage: ColumnStore[i] = new ColumnDef(c, "InviteMessage", SqlDbType.Text, ""); break;
					case GroupUsr.Columns.InviteUsrK: ColumnStore[i] = new ColumnDef(c, "InviteUsrK", SqlDbType.Int, 0); break;
					case GroupUsr.Columns.MemberAdminNewUserEmails: ColumnStore[i] = new ColumnDef(c, "MemberAdminNewUserEmails", SqlDbType.Bit, false); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(GroupUsr.Columns.UsrK);
						InitColumn(GroupUsr.Columns.GroupK);
						InitColumn(GroupUsr.Columns.Status);
						InitColumn(GroupUsr.Columns.StatusChangeDateTime);
						InitColumn(GroupUsr.Columns.StatusChangeUsrK);
						InitColumn(GroupUsr.Columns.Owner);
						InitColumn(GroupUsr.Columns.Moderator);
						InitColumn(GroupUsr.Columns.NewsAdmin);
						InitColumn(GroupUsr.Columns.MemberAdmin);
						InitColumn(GroupUsr.Columns.Favourite);
						InitColumn(GroupUsr.Columns.InviteMessage);
						InitColumn(GroupUsr.Columns.InviteUsrK);
						InitColumn(GroupUsr.Columns.MemberAdminNewUserEmails);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region GuestlistCredit
	/// <summary>
	/// Guestlist credit top-up items
	/// </summary>
	public partial class GuestlistCredit : Model.Entities.GuestlistCredit, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// The primary key
			/// </summary>
			K = 0x00280001,
			/// <summary>
			/// Link to the promoter table
			/// </summary>
			PromoterK = 0x00280002,
			/// <summary>
			/// DateTime the credit request was created
			/// </summary>
			DateTimeCreated = 0x00280003,
			/// <summary>
			/// Number of credits bought
			/// </summary>
			Credits = 0x00280004,
			/// <summary>
			/// Total price charged
			/// </summary>
			TotalPrice = 0x00280005,
			/// <summary>
			/// Has the confirmation been received from paypal?
			/// </summary>
			Done = 0x00280006,
			/// <summary>
			/// Has the confirmation been received from paypal?
			/// </summary>
			DateTimeDone = 0x00280007,
			/// <summary>
			/// Time stamp to record when someone is trying to purchase an IBuyable item that is linked to this Bob. No lock = DateTime.MinValue
			/// </summary>
			BuyableLockDateTime = 0x00280008,
		}
		#endregion
		public static string GetColumnName(GuestlistCredit.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case GuestlistCredit.Columns.K: return "K";
						case GuestlistCredit.Columns.PromoterK: return "PromoterK";
						case GuestlistCredit.Columns.DateTimeCreated: return "DateTimeCreated";
						case GuestlistCredit.Columns.Credits: return "Credits";
						case GuestlistCredit.Columns.TotalPrice: return "TotalPrice";
						case GuestlistCredit.Columns.Done: return "Done";
						case GuestlistCredit.Columns.DateTimeDone: return "DateTimeDone";
						case GuestlistCredit.Columns.BuyableLockDateTime: return "BuyableLockDateTime";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(GuestlistCredit.Columns columnEnum)
		{
			switch (columnEnum)
			{
												default: return false;
			}
		}


		#region Common
 
		public GuestlistCredit(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);  }
		public GuestlistCredit()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.GuestlistCredit);
		}
		public GuestlistCredit(BobSet bs)
		{
			this.Bob = new Bob(bs.Table, bs);
		}
		public GuestlistCredit(int GuestlistCreditK, IBob Parent, object Column)
			: this()
		{
			Bob.GetBobFromParent(GuestlistCreditK, Parent.Bob, Column, TablesEnum.GuestlistCredit);
		}
		public GuestlistCredit(int GuestlistCreditK)
			: this()
		{
			Bob.GetBobFromPrimaryKey(GuestlistCreditK);
		}
		#endregion

	}
	#endregion
	#region GuestlistCreditTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region GuestlistCredit
	/// <summary>
	/// Guestlist credit top-up items
	/// </summary>
	[Serializable]
	public partial class GuestlistCredit 
	{
		
		#region Simple members
		/// <summary>
		/// The primary key
		/// </summary>
		public override int K
		{
			get { return (int)this[GuestlistCredit.Columns.K] as int? ?? 0 ; }
			set { this[GuestlistCredit.Columns.K] = value; }
		}
		/// <summary>
		/// Link to the promoter table
		/// </summary>
		public override int PromoterK
		{
			get { return (int)this[GuestlistCredit.Columns.PromoterK]; }
			set { this[GuestlistCredit.Columns.PromoterK] = value; }
		}
		/// <summary>
		/// DateTime the credit request was created
		/// </summary>
		public override DateTime DateTimeCreated
		{
			get { return (DateTime)this[GuestlistCredit.Columns.DateTimeCreated]; }
			set { this[GuestlistCredit.Columns.DateTimeCreated] = value; }
		}
		/// <summary>
		/// Number of credits bought
		/// </summary>
		public override int Credits
		{
			get { return (int)this[GuestlistCredit.Columns.Credits]; }
			set { this[GuestlistCredit.Columns.Credits] = value; }
		}
		/// <summary>
		/// Total price charged
		/// </summary>
		public override decimal TotalPrice
		{
			get { return (decimal)this[GuestlistCredit.Columns.TotalPrice]; }
			set { this[GuestlistCredit.Columns.TotalPrice] = value; }
		}
		/// <summary>
		/// Has the confirmation been received from paypal?
		/// </summary>
		public override bool Done
		{
			get { return (bool)this[GuestlistCredit.Columns.Done]; }
			set { this[GuestlistCredit.Columns.Done] = value; }
		}
		/// <summary>
		/// Has the confirmation been received from paypal?
		/// </summary>
		public override DateTime DateTimeDone
		{
			get { return (DateTime)this[GuestlistCredit.Columns.DateTimeDone]; }
			set { this[GuestlistCredit.Columns.DateTimeDone] = value; }
		}
		/// <summary>
		/// Time stamp to record when someone is trying to purchase an IBuyable item that is linked to this Bob. No lock = DateTime.MinValue
		/// </summary>
		public override DateTime BuyableLockDateTime
		{
			get { return (DateTime)this[GuestlistCredit.Columns.BuyableLockDateTime]; }
			set { this[GuestlistCredit.Columns.BuyableLockDateTime] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildGuestlistCredits
	{
		CachedSqlSelect<GuestlistCredit> ChildGuestlistCredits();
		CachedSqlSelect<GuestlistCredit> ChildGuestlistCredits(Q where);
		CachedSqlSelect<GuestlistCredit> ChildGuestlistCredits(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<GuestlistCredit> ChildGuestlistCredits(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class GuestlistCredit 
		{
		}

	#region GuestlistCreditDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region GuestlistCreditDataHolder
	/// <summary>
	/// Guestlist credit top-up itemsDataHolder
	/// </summary>
	[Serializable]
	public partial class GuestlistCreditDataHolder : DataHolder<GuestlistCredit>
	{
		GuestlistCredit dataHolder;
		[NonSerializedAttribute] GuestlistCredit bob;

		public GuestlistCreditDataHolder()
		{
			this.dataHolder = new GuestlistCredit();
		}
		
		void CopyValues(GuestlistCredit source, GuestlistCredit destination)
		{
			destination[Bobs.GuestlistCredit.Columns.K] = source[Bobs.GuestlistCredit.Columns.K];
			destination[Bobs.GuestlistCredit.Columns.PromoterK] = source[Bobs.GuestlistCredit.Columns.PromoterK];
			destination[Bobs.GuestlistCredit.Columns.DateTimeCreated] = source[Bobs.GuestlistCredit.Columns.DateTimeCreated];
			destination[Bobs.GuestlistCredit.Columns.Credits] = source[Bobs.GuestlistCredit.Columns.Credits];
			destination[Bobs.GuestlistCredit.Columns.TotalPrice] = source[Bobs.GuestlistCredit.Columns.TotalPrice];
			destination[Bobs.GuestlistCredit.Columns.Done] = source[Bobs.GuestlistCredit.Columns.Done];
			destination[Bobs.GuestlistCredit.Columns.DateTimeDone] = source[Bobs.GuestlistCredit.Columns.DateTimeDone];
			destination[Bobs.GuestlistCredit.Columns.BuyableLockDateTime] = source[Bobs.GuestlistCredit.Columns.BuyableLockDateTime];
		}
		
		public GuestlistCreditDataHolder(GuestlistCredit bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// The primary key
		/// </summary>
		public int K
		{
			get { return dataHolder.K; }
			set { this.dataHolder.K = value; }
		}
		/// <summary>
		/// Link to the promoter table
		/// </summary>
		public int PromoterK
		{
			get { return dataHolder.PromoterK; }
			set { this.dataHolder.PromoterK = value; }
		}
		/// <summary>
		/// DateTime the credit request was created
		/// </summary>
		public DateTime DateTimeCreated
		{
			get { return dataHolder.DateTimeCreated; }
			set { this.dataHolder.DateTimeCreated = value; }
		}
		/// <summary>
		/// Number of credits bought
		/// </summary>
		public int Credits
		{
			get { return dataHolder.Credits; }
			set { this.dataHolder.Credits = value; }
		}
		/// <summary>
		/// Total price charged
		/// </summary>
		public decimal TotalPrice
		{
			get { return dataHolder.TotalPrice; }
			set { this.dataHolder.TotalPrice = value; }
		}
		/// <summary>
		/// Has the confirmation been received from paypal?
		/// </summary>
		public bool Done
		{
			get { return dataHolder.Done; }
			set { this.dataHolder.Done = value; }
		}
		/// <summary>
		/// Has the confirmation been received from paypal?
		/// </summary>
		public DateTime DateTimeDone
		{
			get { return dataHolder.DateTimeDone; }
			set { this.dataHolder.DateTimeDone = value; }
		}
		/// <summary>
		/// Time stamp to record when someone is trying to purchase an IBuyable item that is linked to this Bob. No lock = DateTime.MinValue
		/// </summary>
		public DateTime BuyableLockDateTime
		{
			get { return dataHolder.BuyableLockDateTime; }
			set { this.dataHolder.BuyableLockDateTime = value; }
		}
		#endregion
		public GuestlistCredit GuestlistCredit
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new GuestlistCredit(K);
					}
					else
					{
						bob = new GuestlistCredit();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region GuestlistCreditSet
	public partial class GuestlistCreditSet : BobSet, IEnumerable<GuestlistCredit>
	{
		public GuestlistCreditSet(Query query) : base(query) { }

		public GuestlistCredit this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new GuestlistCredit(this);
					((GuestlistCredit)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (GuestlistCredit)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new GuestlistCreditTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<GuestlistCredit> ToList()
		{
			List<GuestlistCredit> list = new List<GuestlistCredit>();
			foreach (GuestlistCredit item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<GuestlistCredit> Members

		public new IEnumerator<GuestlistCredit> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region GuestlistCreditTableDef
	public class GuestlistCreditTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "GuestlistCredit";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "7BD67FFA";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return GuestlistCredit.GetColumnName((GuestlistCredit.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.GuestlistCredit;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return true;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return GuestlistCredit.Columns.K;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			GuestlistCredit.Columns c = (GuestlistCredit.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case GuestlistCredit.Columns.K: ColumnStore[i] = new ColumnDef(c, "K", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey | SqlColumnFlag.AutoNumber, null); break;
					case GuestlistCredit.Columns.PromoterK: ColumnStore[i] = new ColumnDef(c, "PromoterK", SqlDbType.Int, 0); break;
					case GuestlistCredit.Columns.DateTimeCreated: ColumnStore[i] = new ColumnDef(c, "DateTimeCreated", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case GuestlistCredit.Columns.Credits: ColumnStore[i] = new ColumnDef(c, "Credits", SqlDbType.Int, 0); break;
					case GuestlistCredit.Columns.TotalPrice: ColumnStore[i] = new ColumnDef(c, "TotalPrice", SqlDbType.Decimal, 20, 0m); break;
					case GuestlistCredit.Columns.Done: ColumnStore[i] = new ColumnDef(c, "Done", SqlDbType.Bit, false); break;
					case GuestlistCredit.Columns.DateTimeDone: ColumnStore[i] = new ColumnDef(c, "DateTimeDone", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case GuestlistCredit.Columns.BuyableLockDateTime: ColumnStore[i] = new ColumnDef(c, "BuyableLockDateTime", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(GuestlistCredit.Columns.K);
						InitColumn(GuestlistCredit.Columns.PromoterK);
						InitColumn(GuestlistCredit.Columns.DateTimeCreated);
						InitColumn(GuestlistCredit.Columns.Credits);
						InitColumn(GuestlistCredit.Columns.TotalPrice);
						InitColumn(GuestlistCredit.Columns.Done);
						InitColumn(GuestlistCredit.Columns.DateTimeDone);
						InitColumn(GuestlistCredit.Columns.BuyableLockDateTime);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region Hit
	/// <summary>
	/// Each page impression is logged here - deleted when it completes successfully
	/// </summary>
	public partial class Hit : Model.Entities.Hit, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// The primary key
			/// </summary>
			K = 0x00290001,
			/// <summary>
			/// Which server did the request come in to
			/// </summary>
			ServerId = 0x00290002,
			/// <summary>
			/// Date/time that the request was made
			/// </summary>
			StartTime = 0x00290003,
			/// <summary>
			/// Has the request ended?
			/// </summary>
			HasEnded = 0x00290004,
			/// <summary>
			/// Date/time that the request was completed (requests under 5s in length are deleted)
			/// </summary>
			EndTime = 0x00290005,
			/// <summary>
			/// Get string
			/// </summary>
			GetData = 0x00290006,
			/// <summary>
			/// Post data
			/// </summary>
			PostData = 0x00290007,
			/// <summary>
			/// The usr that was logged in (if any)
			/// </summary>
			UsrK = 0x00290008,
			/// <summary>
			/// Cookie data
			/// </summary>
			CookieData = 0x00290009,
		}
		#endregion
		public static string GetColumnName(Hit.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case Hit.Columns.K: return "K";
						case Hit.Columns.ServerId: return "ServerId";
						case Hit.Columns.StartTime: return "StartTime";
						case Hit.Columns.HasEnded: return "HasEnded";
						case Hit.Columns.EndTime: return "EndTime";
						case Hit.Columns.GetData: return "GetData";
						case Hit.Columns.PostData: return "PostData";
						case Hit.Columns.UsrK: return "UsrK";
						case Hit.Columns.CookieData: return "CookieData";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(Hit.Columns columnEnum)
		{
			switch (columnEnum)
			{
													default: return false;
			}
		}


		#region Common
 
		public Hit(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);  }
		public Hit()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.Hit);
		}
		public Hit(BobSet bs)
		{
			this.Bob = new Bob(bs.Table, bs);
		}
		public Hit(int HitK, IBob Parent, object Column)
			: this()
		{
			Bob.GetBobFromParent(HitK, Parent.Bob, Column, TablesEnum.Hit);
		}
		public Hit(int HitK)
			: this()
		{
			Bob.GetBobFromPrimaryKey(HitK);
		}
		#endregion

	}
	#endregion
	#region HitTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region Hit
	/// <summary>
	/// Each page impression is logged here - deleted when it completes successfully
	/// </summary>
	[Serializable]
	public partial class Hit 
	{
		
		#region Simple members
		/// <summary>
		/// The primary key
		/// </summary>
		public override int K
		{
			get { return (int)this[Hit.Columns.K] as int? ?? 0 ; }
			set { this[Hit.Columns.K] = value; }
		}
		/// <summary>
		/// Which server did the request come in to
		/// </summary>
		public override int ServerId
		{
			get { return (int)this[Hit.Columns.ServerId]; }
			set { this[Hit.Columns.ServerId] = value; }
		}
		/// <summary>
		/// Date/time that the request was made
		/// </summary>
		public override DateTime StartTime
		{
			get { return (DateTime)this[Hit.Columns.StartTime]; }
			set { this[Hit.Columns.StartTime] = value; }
		}
		/// <summary>
		/// Has the request ended?
		/// </summary>
		public override bool HasEnded
		{
			get { return (bool)this[Hit.Columns.HasEnded]; }
			set { this[Hit.Columns.HasEnded] = value; }
		}
		/// <summary>
		/// Date/time that the request was completed (requests under 5s in length are deleted)
		/// </summary>
		public override DateTime EndTime
		{
			get { return (DateTime)this[Hit.Columns.EndTime]; }
			set { this[Hit.Columns.EndTime] = value; }
		}
		/// <summary>
		/// Get string
		/// </summary>
		public override string GetData
		{
			get { return (string)this[Hit.Columns.GetData]; }
			set { this[Hit.Columns.GetData] = value; }
		}
		/// <summary>
		/// Post data
		/// </summary>
		public override string PostData
		{
			get { return (string)this[Hit.Columns.PostData]; }
			set { this[Hit.Columns.PostData] = value; }
		}
		/// <summary>
		/// The usr that was logged in (if any)
		/// </summary>
		public override int UsrK
		{
			get { return (int)this[Hit.Columns.UsrK]; }
			set { this[Hit.Columns.UsrK] = value; }
		}
		/// <summary>
		/// Cookie data
		/// </summary>
		public override string CookieData
		{
			get { return (string)this[Hit.Columns.CookieData]; }
			set { this[Hit.Columns.CookieData] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildHits
	{
		CachedSqlSelect<Hit> ChildHits();
		CachedSqlSelect<Hit> ChildHits(Q where);
		CachedSqlSelect<Hit> ChildHits(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<Hit> ChildHits(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class Hit 
		{
		}

	#region HitDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region HitDataHolder
	/// <summary>
	/// Each page impression is logged here - deleted when it completes successfullyDataHolder
	/// </summary>
	[Serializable]
	public partial class HitDataHolder : DataHolder<Hit>
	{
		Hit dataHolder;
		[NonSerializedAttribute] Hit bob;

		public HitDataHolder()
		{
			this.dataHolder = new Hit();
		}
		
		void CopyValues(Hit source, Hit destination)
		{
			destination[Bobs.Hit.Columns.K] = source[Bobs.Hit.Columns.K];
			destination[Bobs.Hit.Columns.ServerId] = source[Bobs.Hit.Columns.ServerId];
			destination[Bobs.Hit.Columns.StartTime] = source[Bobs.Hit.Columns.StartTime];
			destination[Bobs.Hit.Columns.HasEnded] = source[Bobs.Hit.Columns.HasEnded];
			destination[Bobs.Hit.Columns.EndTime] = source[Bobs.Hit.Columns.EndTime];
			destination[Bobs.Hit.Columns.GetData] = source[Bobs.Hit.Columns.GetData];
			destination[Bobs.Hit.Columns.PostData] = source[Bobs.Hit.Columns.PostData];
			destination[Bobs.Hit.Columns.UsrK] = source[Bobs.Hit.Columns.UsrK];
			destination[Bobs.Hit.Columns.CookieData] = source[Bobs.Hit.Columns.CookieData];
		}
		
		public HitDataHolder(Hit bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// The primary key
		/// </summary>
		public int K
		{
			get { return dataHolder.K; }
			set { this.dataHolder.K = value; }
		}
		/// <summary>
		/// Which server did the request come in to
		/// </summary>
		public int ServerId
		{
			get { return dataHolder.ServerId; }
			set { this.dataHolder.ServerId = value; }
		}
		/// <summary>
		/// Date/time that the request was made
		/// </summary>
		public DateTime StartTime
		{
			get { return dataHolder.StartTime; }
			set { this.dataHolder.StartTime = value; }
		}
		/// <summary>
		/// Has the request ended?
		/// </summary>
		public bool HasEnded
		{
			get { return dataHolder.HasEnded; }
			set { this.dataHolder.HasEnded = value; }
		}
		/// <summary>
		/// Date/time that the request was completed (requests under 5s in length are deleted)
		/// </summary>
		public DateTime EndTime
		{
			get { return dataHolder.EndTime; }
			set { this.dataHolder.EndTime = value; }
		}
		/// <summary>
		/// Get string
		/// </summary>
		public string GetData
		{
			get { return dataHolder.GetData; }
			set { this.dataHolder.GetData = value; }
		}
		/// <summary>
		/// Post data
		/// </summary>
		public string PostData
		{
			get { return dataHolder.PostData; }
			set { this.dataHolder.PostData = value; }
		}
		/// <summary>
		/// The usr that was logged in (if any)
		/// </summary>
		public int UsrK
		{
			get { return dataHolder.UsrK; }
			set { this.dataHolder.UsrK = value; }
		}
		/// <summary>
		/// Cookie data
		/// </summary>
		public string CookieData
		{
			get { return dataHolder.CookieData; }
			set { this.dataHolder.CookieData = value; }
		}
		#endregion
		public Hit Hit
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new Hit(K);
					}
					else
					{
						bob = new Hit();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region HitSet
	public partial class HitSet : BobSet, IEnumerable<Hit>
	{
		public HitSet(Query query) : base(query) { }

		public Hit this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new Hit(this);
					((Hit)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (Hit)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new HitTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<Hit> ToList()
		{
			List<Hit> list = new List<Hit>();
			foreach (Hit item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<Hit> Members

		public new IEnumerator<Hit> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region HitTableDef
	public class HitTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "Hit";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "AA59A111";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return Hit.GetColumnName((Hit.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.Hit;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return true;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return Hit.Columns.K;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			Hit.Columns c = (Hit.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case Hit.Columns.K: ColumnStore[i] = new ColumnDef(c, "K", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey | SqlColumnFlag.AutoNumber, null); break;
					case Hit.Columns.ServerId: ColumnStore[i] = new ColumnDef(c, "ServerId", SqlDbType.Int, 0); break;
					case Hit.Columns.StartTime: ColumnStore[i] = new ColumnDef(c, "StartTime", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case Hit.Columns.HasEnded: ColumnStore[i] = new ColumnDef(c, "HasEnded", SqlDbType.Bit, false); break;
					case Hit.Columns.EndTime: ColumnStore[i] = new ColumnDef(c, "EndTime", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case Hit.Columns.GetData: ColumnStore[i] = new ColumnDef(c, "GetData", SqlDbType.Text, ""); break;
					case Hit.Columns.PostData: ColumnStore[i] = new ColumnDef(c, "PostData", SqlDbType.Text, ""); break;
					case Hit.Columns.UsrK: ColumnStore[i] = new ColumnDef(c, "UsrK", SqlDbType.Int, 0); break;
					case Hit.Columns.CookieData: ColumnStore[i] = new ColumnDef(c, "CookieData", SqlDbType.Text, ""); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(Hit.Columns.K);
						InitColumn(Hit.Columns.ServerId);
						InitColumn(Hit.Columns.StartTime);
						InitColumn(Hit.Columns.HasEnded);
						InitColumn(Hit.Columns.EndTime);
						InitColumn(Hit.Columns.GetData);
						InitColumn(Hit.Columns.PostData);
						InitColumn(Hit.Columns.UsrK);
						InitColumn(Hit.Columns.CookieData);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region IncomingSms
	/// <summary>
	/// Table where all incoming sms's are logged
	/// </summary>
	public partial class IncomingSms : Model.Entities.IncomingSms, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// The primary key
			/// </summary>
			K = 0x002a0001,
			/// <summary>
			/// The text of the text message (should start "tonight")
			/// </summary>
			Message = 0x002a0002,
			/// <summary>
			/// DateTime that the message arrived
			/// </summary>
			DateTime = 0x002a0003,
			/// <summary>
			/// The mobile number that this sms came from.
			/// </summary>
			MobileK = 0x002a0004,
			/// <summary>
			/// Incoming type - Tonight or Pllay
			/// </summary>
			ServiceType = 0x002a0005,
			/// <summary>
			/// The xml data received from the gateway
			/// </summary>
			PostData = 0x002a0006,
			/// <summary>
			/// The message_id received from the gateway
			/// </summary>
			MessageID = 0x002a0007,
		}
		#endregion
		public static string GetColumnName(IncomingSms.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case IncomingSms.Columns.K: return "K";
						case IncomingSms.Columns.Message: return "Message";
						case IncomingSms.Columns.DateTime: return "DateTime";
						case IncomingSms.Columns.MobileK: return "MobileK";
						case IncomingSms.Columns.ServiceType: return "ServiceType";
						case IncomingSms.Columns.PostData: return "PostData";
						case IncomingSms.Columns.MessageID: return "MessageID";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(IncomingSms.Columns columnEnum)
		{
			switch (columnEnum)
			{
											default: return false;
			}
		}


		#region Common
 
		public IncomingSms(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);  }
		public IncomingSms()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.IncomingSms);
		}
		public IncomingSms(BobSet bs)
		{
			this.Bob = new Bob(bs.Table, bs);
		}
		public IncomingSms(int IncomingSmsK, IBob Parent, object Column)
			: this()
		{
			Bob.GetBobFromParent(IncomingSmsK, Parent.Bob, Column, TablesEnum.IncomingSms);
		}
		public IncomingSms(int IncomingSmsK)
			: this()
		{
			Bob.GetBobFromPrimaryKey(IncomingSmsK);
		}
		#endregion

	}
	#endregion
	#region IncomingSmsTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region IncomingSms
	/// <summary>
	/// Table where all incoming sms's are logged
	/// </summary>
	[Serializable]
	public partial class IncomingSms 
	{
		
		#region Simple members
		/// <summary>
		/// The primary key
		/// </summary>
		public override int K
		{
			get { return (int)this[IncomingSms.Columns.K] as int? ?? 0 ; }
			set { this[IncomingSms.Columns.K] = value; }
		}
		/// <summary>
		/// The text of the text message (should start "tonight")
		/// </summary>
		public override string Message
		{
			get { return (string)this[IncomingSms.Columns.Message]; }
			set { this[IncomingSms.Columns.Message] = value; }
		}
		/// <summary>
		/// DateTime that the message arrived
		/// </summary>
		public override DateTime? DateTime
		{
			get { return (DateTime?)this[IncomingSms.Columns.DateTime]; }
			set { this[IncomingSms.Columns.DateTime] = value; }
		}
		/// <summary>
		/// The mobile number that this sms came from.
		/// </summary>
		public override int? MobileK
		{
			get { return (int?)this[IncomingSms.Columns.MobileK]; }
			set { this[IncomingSms.Columns.MobileK] = value; }
		}
		/// <summary>
		/// Incoming type - Tonight or Pllay
		/// </summary>
		public override int? ServiceType
		{
			get { return (int?)this[IncomingSms.Columns.ServiceType]; }
			set { this[IncomingSms.Columns.ServiceType] = value; }
		}
		/// <summary>
		/// The xml data received from the gateway
		/// </summary>
		public override string PostData
		{
			get { return (string)this[IncomingSms.Columns.PostData]; }
			set { this[IncomingSms.Columns.PostData] = value; }
		}
		/// <summary>
		/// The message_id received from the gateway
		/// </summary>
		public override string MessageID
		{
			get { return (string)this[IncomingSms.Columns.MessageID]; }
			set { this[IncomingSms.Columns.MessageID] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildIncomingSmss
	{
		CachedSqlSelect<IncomingSms> ChildIncomingSmss();
		CachedSqlSelect<IncomingSms> ChildIncomingSmss(Q where);
		CachedSqlSelect<IncomingSms> ChildIncomingSmss(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<IncomingSms> ChildIncomingSmss(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class IncomingSms 
	 : 
	Bobs.ChildInterfaces.IHasChildOutgoingSmss
		{
			public CachedSqlSelect<OutgoingSms> ChildOutgoingSmss()
		{
			return this.ChildOutgoingSmss(null, null);
		}
		public CachedSqlSelect<OutgoingSms> ChildOutgoingSmss(Q where)
		{
			return this.ChildOutgoingSmss(where, null);
		}
		public CachedSqlSelect<OutgoingSms> ChildOutgoingSmss(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildOutgoingSmss(null, orderBy);
		}
		public CachedSqlSelect<OutgoingSms> ChildOutgoingSmss(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<OutgoingSms>
			(
				new Children<OutgoingSms>
				(
					TablesEnum.IncomingSms, 
					this.K, 
					TablesEnum.OutgoingSms, 
					dr => 
					{ 
						OutgoingSms newOutgoingSms = new OutgoingSms(); 
						newOutgoingSms.Initialise(dr); 
						return newOutgoingSms;
					},
					"35F6F63C",
					where,
					orderBy
				)
			);
		}
		}

	#region IncomingSmsDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region IncomingSmsDataHolder
	/// <summary>
	/// Table where all incoming sms's are loggedDataHolder
	/// </summary>
	[Serializable]
	public partial class IncomingSmsDataHolder : DataHolder<IncomingSms>
	{
		IncomingSms dataHolder;
		[NonSerializedAttribute] IncomingSms bob;

		public IncomingSmsDataHolder()
		{
			this.dataHolder = new IncomingSms();
		}
		
		void CopyValues(IncomingSms source, IncomingSms destination)
		{
			destination[Bobs.IncomingSms.Columns.K] = source[Bobs.IncomingSms.Columns.K];
			destination[Bobs.IncomingSms.Columns.Message] = source[Bobs.IncomingSms.Columns.Message];
			destination[Bobs.IncomingSms.Columns.DateTime] = source[Bobs.IncomingSms.Columns.DateTime];
			destination[Bobs.IncomingSms.Columns.MobileK] = source[Bobs.IncomingSms.Columns.MobileK];
			destination[Bobs.IncomingSms.Columns.ServiceType] = source[Bobs.IncomingSms.Columns.ServiceType];
			destination[Bobs.IncomingSms.Columns.PostData] = source[Bobs.IncomingSms.Columns.PostData];
			destination[Bobs.IncomingSms.Columns.MessageID] = source[Bobs.IncomingSms.Columns.MessageID];
		}
		
		public IncomingSmsDataHolder(IncomingSms bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// The primary key
		/// </summary>
		public int K
		{
			get { return dataHolder.K; }
			set { this.dataHolder.K = value; }
		}
		/// <summary>
		/// The text of the text message (should start "tonight")
		/// </summary>
		public string Message
		{
			get { return dataHolder.Message; }
			set { this.dataHolder.Message = value; }
		}
		/// <summary>
		/// DateTime that the message arrived
		/// </summary>
		public DateTime? DateTime
		{
			get { return dataHolder.DateTime; }
			set { this.dataHolder.DateTime = value; }
		}
		/// <summary>
		/// The mobile number that this sms came from.
		/// </summary>
		public int? MobileK
		{
			get { return dataHolder.MobileK; }
			set { this.dataHolder.MobileK = value; }
		}
		/// <summary>
		/// Incoming type - Tonight or Pllay
		/// </summary>
		public int? ServiceType
		{
			get { return dataHolder.ServiceType; }
			set { this.dataHolder.ServiceType = value; }
		}
		/// <summary>
		/// The xml data received from the gateway
		/// </summary>
		public string PostData
		{
			get { return dataHolder.PostData; }
			set { this.dataHolder.PostData = value; }
		}
		/// <summary>
		/// The message_id received from the gateway
		/// </summary>
		public string MessageID
		{
			get { return dataHolder.MessageID; }
			set { this.dataHolder.MessageID = value; }
		}
		#endregion
		public IncomingSms IncomingSms
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new IncomingSms(K);
					}
					else
					{
						bob = new IncomingSms();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region IncomingSmsSet
	public partial class IncomingSmsSet : BobSet, IEnumerable<IncomingSms>
	{
		public IncomingSmsSet(Query query) : base(query) { }

		public IncomingSms this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new IncomingSms(this);
					((IncomingSms)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (IncomingSms)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new IncomingSmsTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<IncomingSms> ToList()
		{
			List<IncomingSms> list = new List<IncomingSms>();
			foreach (IncomingSms item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<IncomingSms> Members

		public new IEnumerator<IncomingSms> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region IncomingSmsTableDef
	public class IncomingSmsTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "IncomingSms";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "3B819721";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return IncomingSms.GetColumnName((IncomingSms.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.IncomingSms;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return true;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return IncomingSms.Columns.K;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			IncomingSms.Columns c = (IncomingSms.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case IncomingSms.Columns.K: ColumnStore[i] = new ColumnDef(c, "K", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey | SqlColumnFlag.AutoNumber, null); break;
					case IncomingSms.Columns.Message: ColumnStore[i] = new ColumnDef(c, "Message", SqlDbType.VarChar, 400, null); break;
					case IncomingSms.Columns.DateTime: ColumnStore[i] = new ColumnDef(c, "DateTime", SqlDbType.DateTime, 16, null); break;
					case IncomingSms.Columns.MobileK: ColumnStore[i] = new ColumnDef(c, "MobileK", SqlDbType.Int, null); break;
					case IncomingSms.Columns.ServiceType: ColumnStore[i] = new ColumnDef(c, "ServiceType", SqlDbType.Int, null); break;
					case IncomingSms.Columns.PostData: ColumnStore[i] = new ColumnDef(c, "PostData", SqlDbType.Text, null); break;
					case IncomingSms.Columns.MessageID: ColumnStore[i] = new ColumnDef(c, "MessageID", SqlDbType.VarChar, 64, null); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(IncomingSms.Columns.K);
						InitColumn(IncomingSms.Columns.Message);
						InitColumn(IncomingSms.Columns.DateTime);
						InitColumn(IncomingSms.Columns.MobileK);
						InitColumn(IncomingSms.Columns.ServiceType);
						InitColumn(IncomingSms.Columns.PostData);
						InitColumn(IncomingSms.Columns.MessageID);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region InsertionOrder
	/// <summary>
	/// Track campaign credits and outstanding corporate IOs and Insertion Order Credits "IOCs"
	/// </summary>
	public partial class InsertionOrder : Model.Entities.InsertionOrder, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// auto incrementing primary key
			/// </summary>
			K = 0x002b0001,
			/// <summary>
			/// Status - Proforma = 1, Enabled = 2, Disabled = 3
			/// </summary>
			Status = 0x002b0002,
			/// <summary>
			/// (in corporate IOs, we calculate this from the banner types and impressions)
			/// </summary>
			CampaignCredits = 0x002b0003,
			/// <summary>
			/// this is a reminder that can be set. When the next invoice is due, this IO will pop up in the admin, and an invoice can be manually raised.
			/// </summary>
			NextInvoiceDue = 0x002b0004,
			/// <summary>
			/// the K of the promoter to whom the insertion order applies
			/// </summary>
			PromoterK = 0x002b0005,
			/// <summary>
			/// the K of the usr for the promoter to whom the insertion order applies
			/// </summary>
			UsrK = 0x002b0006,
			/// <summary>
			/// the name the insertion order report is pertinent to if the usrK is set to -1
			/// </summary>
			UsrNameOverride = 0x002b0007,
			/// <summary>
			/// When the insertion order was created
			/// </summary>
			DateTimeCreated = 0x002b0008,
			/// <summary>
			/// The clients reference code for the insertion order
			/// </summary>
			ClientRef = 0x002b0009,
			/// <summary>
			/// The start date of the campaign
			/// </summary>
			CampaignStartDate = 0x002b000a,
			/// <summary>
			/// The end date of the campaign
			/// </summary>
			CampaignEndDate = 0x002b000b,
			/// <summary>
			/// the K of the user to be used as a traffic contact
			/// </summary>
			TrafficUsrK = 0x002b000c,
			/// <summary>
			/// Misc notes
			/// </summary>
			Notes = 0x002b000d,
			/// <summary>
			/// The K of the user who made the changes
			/// </summary>
			ActionUsrK = 0x002b000e,
			/// <summary>
			/// PaymentTerms e.g. "30 days from date of invoice"
			/// </summary>
			PaymentTerms = 0x002b000f,
			/// <summary>
			/// InvoicePeriod  e.g. "Monthly" or "Campaign"
			/// </summary>
			InvoicePeriod = 0x002b0010,
			/// <summary>
			/// Name of the campaign
			/// </summary>
			CampaignName = 0x002b0011,
			/// <summary>
			/// Agency discount
			/// </summary>
			AgencyDiscount = 0x002b0012,
			/// <summary>
			/// used to prevent the InsertionOrder from being raised twice
			/// </summary>
			DuplicateGuid = 0x002b0013,
			/// <summary>
			/// true if the campaign credit value was overridden
			/// </summary>
			CampaignCreditsOverriden = 0x002b0014,
		}
		#endregion
		public static string GetColumnName(InsertionOrder.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case InsertionOrder.Columns.K: return "K";
						case InsertionOrder.Columns.Status: return "Status";
						case InsertionOrder.Columns.CampaignCredits: return "CampaignCredits";
						case InsertionOrder.Columns.NextInvoiceDue: return "NextInvoiceDue";
						case InsertionOrder.Columns.PromoterK: return "PromoterK";
						case InsertionOrder.Columns.UsrK: return "UsrK";
						case InsertionOrder.Columns.UsrNameOverride: return "UsrNameOverride";
						case InsertionOrder.Columns.DateTimeCreated: return "DateTimeCreated";
						case InsertionOrder.Columns.ClientRef: return "ClientRef";
						case InsertionOrder.Columns.CampaignStartDate: return "CampaignStartDate";
						case InsertionOrder.Columns.CampaignEndDate: return "CampaignEndDate";
						case InsertionOrder.Columns.TrafficUsrK: return "TrafficUsrK";
						case InsertionOrder.Columns.Notes: return "Notes";
						case InsertionOrder.Columns.ActionUsrK: return "ActionUsrK";
						case InsertionOrder.Columns.PaymentTerms: return "PaymentTerms";
						case InsertionOrder.Columns.InvoicePeriod: return "InvoicePeriod";
						case InsertionOrder.Columns.CampaignName: return "CampaignName";
						case InsertionOrder.Columns.AgencyDiscount: return "AgencyDiscount";
						case InsertionOrder.Columns.DuplicateGuid: return "DuplicateGuid";
						case InsertionOrder.Columns.CampaignCreditsOverriden: return "CampaignCreditsOverriden";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(InsertionOrder.Columns columnEnum)
		{
			switch (columnEnum)
			{
																								default: return false;
			}
		}


		#region Common
 
		public InsertionOrder(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);  }
		public InsertionOrder()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.InsertionOrder);
		}
		public InsertionOrder(BobSet bs)
		{
			this.Bob = new Bob(bs.Table, bs);
		}
		public InsertionOrder(int InsertionOrderK, IBob Parent, object Column)
			: this()
		{
			Bob.GetBobFromParent(InsertionOrderK, Parent.Bob, Column, TablesEnum.InsertionOrder);
		}
		public InsertionOrder(int InsertionOrderK)
			: this()
		{
			Bob.GetBobFromPrimaryKey(InsertionOrderK);
		}
		#endregion

	}
	#endregion
	#region InsertionOrderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region InsertionOrder
	/// <summary>
	/// Track campaign credits and outstanding corporate IOs and Insertion Order Credits "IOCs"
	/// </summary>
	[Serializable]
	public partial class InsertionOrder 
	{
		
		#region Simple members
		/// <summary>
		/// auto incrementing primary key
		/// </summary>
		public override int K
		{
			get { return (int)this[InsertionOrder.Columns.K] as int? ?? 0 ; }
			set { this[InsertionOrder.Columns.K] = value; }
		}
		/// <summary>
		/// Status - Proforma = 1, Enabled = 2, Disabled = 3
		/// </summary>
		public override int Status
		{
			get { return (int)this[InsertionOrder.Columns.Status]; }
			set { this[InsertionOrder.Columns.Status] = value; }
		}
		/// <summary>
		/// (in corporate IOs, we calculate this from the banner types and impressions)
		/// </summary>
		public override int CampaignCredits
		{
			get { return (int)this[InsertionOrder.Columns.CampaignCredits]; }
			set { this[InsertionOrder.Columns.CampaignCredits] = value; }
		}
		/// <summary>
		/// this is a reminder that can be set. When the next invoice is due, this IO will pop up in the admin, and an invoice can be manually raised.
		/// </summary>
		public override DateTime NextInvoiceDue
		{
			get { return (DateTime)this[InsertionOrder.Columns.NextInvoiceDue]; }
			set { this[InsertionOrder.Columns.NextInvoiceDue] = value; }
		}
		/// <summary>
		/// the K of the promoter to whom the insertion order applies
		/// </summary>
		public override int PromoterK
		{
			get { return (int)this[InsertionOrder.Columns.PromoterK]; }
			set { this[InsertionOrder.Columns.PromoterK] = value; }
		}
		/// <summary>
		/// the K of the usr for the promoter to whom the insertion order applies
		/// </summary>
		public override int UsrK
		{
			get { return (int)this[InsertionOrder.Columns.UsrK]; }
			set { this[InsertionOrder.Columns.UsrK] = value; }
		}
		/// <summary>
		/// the name the insertion order report is pertinent to if the usrK is set to -1
		/// </summary>
		public override string UsrNameOverride
		{
			get { return (string)this[InsertionOrder.Columns.UsrNameOverride]; }
			set { this[InsertionOrder.Columns.UsrNameOverride] = value; }
		}
		/// <summary>
		/// When the insertion order was created
		/// </summary>
		public override DateTime DateTimeCreated
		{
			get { return (DateTime)this[InsertionOrder.Columns.DateTimeCreated]; }
			set { this[InsertionOrder.Columns.DateTimeCreated] = value; }
		}
		/// <summary>
		/// The clients reference code for the insertion order
		/// </summary>
		public override string ClientRef
		{
			get { return (string)this[InsertionOrder.Columns.ClientRef]; }
			set { this[InsertionOrder.Columns.ClientRef] = value; }
		}
		/// <summary>
		/// The start date of the campaign
		/// </summary>
		public override DateTime CampaignStartDate
		{
			get { return (DateTime)this[InsertionOrder.Columns.CampaignStartDate]; }
			set { this[InsertionOrder.Columns.CampaignStartDate] = value; }
		}
		/// <summary>
		/// The end date of the campaign
		/// </summary>
		public override DateTime CampaignEndDate
		{
			get { return (DateTime)this[InsertionOrder.Columns.CampaignEndDate]; }
			set { this[InsertionOrder.Columns.CampaignEndDate] = value; }
		}
		/// <summary>
		/// the K of the user to be used as a traffic contact
		/// </summary>
		public override int TrafficUsrK
		{
			get { return (int)this[InsertionOrder.Columns.TrafficUsrK]; }
			set { this[InsertionOrder.Columns.TrafficUsrK] = value; }
		}
		/// <summary>
		/// Misc notes
		/// </summary>
		public override string Notes
		{
			get { return (string)this[InsertionOrder.Columns.Notes]; }
			set { this[InsertionOrder.Columns.Notes] = value; }
		}
		/// <summary>
		/// The K of the user who made the changes
		/// </summary>
		public override int ActionUsrK
		{
			get { return (int)this[InsertionOrder.Columns.ActionUsrK]; }
			set { this[InsertionOrder.Columns.ActionUsrK] = value; }
		}
		/// <summary>
		/// PaymentTerms e.g. "30 days from date of invoice"
		/// </summary>
		public override string PaymentTerms
		{
			get { return (string)this[InsertionOrder.Columns.PaymentTerms]; }
			set { this[InsertionOrder.Columns.PaymentTerms] = value; }
		}
		/// <summary>
		/// InvoicePeriod  e.g. "Monthly" or "Campaign"
		/// </summary>
		public override string InvoicePeriod
		{
			get { return (string)this[InsertionOrder.Columns.InvoicePeriod]; }
			set { this[InsertionOrder.Columns.InvoicePeriod] = value; }
		}
		/// <summary>
		/// Name of the campaign
		/// </summary>
		public override string CampaignName
		{
			get { return (string)this[InsertionOrder.Columns.CampaignName]; }
			set { this[InsertionOrder.Columns.CampaignName] = value; }
		}
		/// <summary>
		/// Agency discount
		/// </summary>
		public override double AgencyDiscount
		{
			get { return (double)this[InsertionOrder.Columns.AgencyDiscount]; }
			set { this[InsertionOrder.Columns.AgencyDiscount] = value; }
		}
		/// <summary>
		/// used to prevent the InsertionOrder from being raised twice
		/// </summary>
		public Guid	DuplicateGuid
		{
			get{ return Cambro.Misc.Db.GuidConvertor(this[InsertionOrder.Columns.DuplicateGuid]);}		
			set{ this[InsertionOrder.Columns.DuplicateGuid] = new System.Data.SqlTypes.SqlGuid(value);}
		}
		/// <summary>
		/// true if the campaign credit value was overridden
		/// </summary>
		public override bool CampaignCreditsOverriden
		{
			get { return (bool)this[InsertionOrder.Columns.CampaignCreditsOverriden]; }
			set { this[InsertionOrder.Columns.CampaignCreditsOverriden] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildInsertionOrders
	{
		CachedSqlSelect<InsertionOrder> ChildInsertionOrders();
		CachedSqlSelect<InsertionOrder> ChildInsertionOrders(Q where);
		CachedSqlSelect<InsertionOrder> ChildInsertionOrders(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<InsertionOrder> ChildInsertionOrders(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class InsertionOrder 
	 : 
	Bobs.ChildInterfaces.IHasChildInsertionOrderItems
	,
	Bobs.ChildInterfaces.IHasChildInvoices
		{
			public CachedSqlSelect<InsertionOrderItem> ChildInsertionOrderItems()
		{
			return this.ChildInsertionOrderItems(null, null);
		}
		public CachedSqlSelect<InsertionOrderItem> ChildInsertionOrderItems(Q where)
		{
			return this.ChildInsertionOrderItems(where, null);
		}
		public CachedSqlSelect<InsertionOrderItem> ChildInsertionOrderItems(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildInsertionOrderItems(null, orderBy);
		}
		public CachedSqlSelect<InsertionOrderItem> ChildInsertionOrderItems(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<InsertionOrderItem>
			(
				new Children<InsertionOrderItem>
				(
					TablesEnum.InsertionOrder, 
					this.K, 
					TablesEnum.InsertionOrderItem, 
					dr => 
					{ 
						InsertionOrderItem newInsertionOrderItem = new InsertionOrderItem(); 
						newInsertionOrderItem.Initialise(dr); 
						return newInsertionOrderItem;
					},
					"008F89FF",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<Invoice> ChildInvoices()
		{
			return this.ChildInvoices(null, null);
		}
		public CachedSqlSelect<Invoice> ChildInvoices(Q where)
		{
			return this.ChildInvoices(where, null);
		}
		public CachedSqlSelect<Invoice> ChildInvoices(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildInvoices(null, orderBy);
		}
		public CachedSqlSelect<Invoice> ChildInvoices(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<Invoice>
			(
				new Children<Invoice>
				(
					TablesEnum.InsertionOrder, 
					this.K, 
					TablesEnum.Invoice, 
					dr => 
					{ 
						Invoice newInvoice = new Invoice(); 
						newInvoice.Initialise(dr); 
						return newInvoice;
					},
					"E3B130F4",
					where,
					orderBy
				)
			);
		}
		}

	#region InsertionOrderDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region InsertionOrderDataHolder
	/// <summary>
	/// Track campaign credits and outstanding corporate IOs and Insertion Order Credits "IOCs"DataHolder
	/// </summary>
	[Serializable]
	public partial class InsertionOrderDataHolder : DataHolder<InsertionOrder>
	{
		InsertionOrder dataHolder;
		[NonSerializedAttribute] InsertionOrder bob;

		public InsertionOrderDataHolder()
		{
			this.dataHolder = new InsertionOrder();
		}
		
		void CopyValues(InsertionOrder source, InsertionOrder destination)
		{
			destination[Bobs.InsertionOrder.Columns.K] = source[Bobs.InsertionOrder.Columns.K];
			destination[Bobs.InsertionOrder.Columns.Status] = source[Bobs.InsertionOrder.Columns.Status];
			destination[Bobs.InsertionOrder.Columns.CampaignCredits] = source[Bobs.InsertionOrder.Columns.CampaignCredits];
			destination[Bobs.InsertionOrder.Columns.NextInvoiceDue] = source[Bobs.InsertionOrder.Columns.NextInvoiceDue];
			destination[Bobs.InsertionOrder.Columns.PromoterK] = source[Bobs.InsertionOrder.Columns.PromoterK];
			destination[Bobs.InsertionOrder.Columns.UsrK] = source[Bobs.InsertionOrder.Columns.UsrK];
			destination[Bobs.InsertionOrder.Columns.UsrNameOverride] = source[Bobs.InsertionOrder.Columns.UsrNameOverride];
			destination[Bobs.InsertionOrder.Columns.DateTimeCreated] = source[Bobs.InsertionOrder.Columns.DateTimeCreated];
			destination[Bobs.InsertionOrder.Columns.ClientRef] = source[Bobs.InsertionOrder.Columns.ClientRef];
			destination[Bobs.InsertionOrder.Columns.CampaignStartDate] = source[Bobs.InsertionOrder.Columns.CampaignStartDate];
			destination[Bobs.InsertionOrder.Columns.CampaignEndDate] = source[Bobs.InsertionOrder.Columns.CampaignEndDate];
			destination[Bobs.InsertionOrder.Columns.TrafficUsrK] = source[Bobs.InsertionOrder.Columns.TrafficUsrK];
			destination[Bobs.InsertionOrder.Columns.Notes] = source[Bobs.InsertionOrder.Columns.Notes];
			destination[Bobs.InsertionOrder.Columns.ActionUsrK] = source[Bobs.InsertionOrder.Columns.ActionUsrK];
			destination[Bobs.InsertionOrder.Columns.PaymentTerms] = source[Bobs.InsertionOrder.Columns.PaymentTerms];
			destination[Bobs.InsertionOrder.Columns.InvoicePeriod] = source[Bobs.InsertionOrder.Columns.InvoicePeriod];
			destination[Bobs.InsertionOrder.Columns.CampaignName] = source[Bobs.InsertionOrder.Columns.CampaignName];
			destination[Bobs.InsertionOrder.Columns.AgencyDiscount] = source[Bobs.InsertionOrder.Columns.AgencyDiscount];
			destination[Bobs.InsertionOrder.Columns.DuplicateGuid] = source[Bobs.InsertionOrder.Columns.DuplicateGuid];
			destination[Bobs.InsertionOrder.Columns.CampaignCreditsOverriden] = source[Bobs.InsertionOrder.Columns.CampaignCreditsOverriden];
		}
		
		public InsertionOrderDataHolder(InsertionOrder bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// auto incrementing primary key
		/// </summary>
		public int K
		{
			get { return dataHolder.K; }
			set { this.dataHolder.K = value; }
		}
		/// <summary>
		/// Status - Proforma = 1, Enabled = 2, Disabled = 3
		/// </summary>
		public int Status
		{
			get { return dataHolder.Status; }
			set { this.dataHolder.Status = value; }
		}
		/// <summary>
		/// (in corporate IOs, we calculate this from the banner types and impressions)
		/// </summary>
		public int CampaignCredits
		{
			get { return dataHolder.CampaignCredits; }
			set { this.dataHolder.CampaignCredits = value; }
		}
		/// <summary>
		/// this is a reminder that can be set. When the next invoice is due, this IO will pop up in the admin, and an invoice can be manually raised.
		/// </summary>
		public DateTime NextInvoiceDue
		{
			get { return dataHolder.NextInvoiceDue; }
			set { this.dataHolder.NextInvoiceDue = value; }
		}
		/// <summary>
		/// the K of the promoter to whom the insertion order applies
		/// </summary>
		public int PromoterK
		{
			get { return dataHolder.PromoterK; }
			set { this.dataHolder.PromoterK = value; }
		}
		/// <summary>
		/// the K of the usr for the promoter to whom the insertion order applies
		/// </summary>
		public int UsrK
		{
			get { return dataHolder.UsrK; }
			set { this.dataHolder.UsrK = value; }
		}
		/// <summary>
		/// the name the insertion order report is pertinent to if the usrK is set to -1
		/// </summary>
		public string UsrNameOverride
		{
			get { return dataHolder.UsrNameOverride; }
			set { this.dataHolder.UsrNameOverride = value; }
		}
		/// <summary>
		/// When the insertion order was created
		/// </summary>
		public DateTime DateTimeCreated
		{
			get { return dataHolder.DateTimeCreated; }
			set { this.dataHolder.DateTimeCreated = value; }
		}
		/// <summary>
		/// The clients reference code for the insertion order
		/// </summary>
		public string ClientRef
		{
			get { return dataHolder.ClientRef; }
			set { this.dataHolder.ClientRef = value; }
		}
		/// <summary>
		/// The start date of the campaign
		/// </summary>
		public DateTime CampaignStartDate
		{
			get { return dataHolder.CampaignStartDate; }
			set { this.dataHolder.CampaignStartDate = value; }
		}
		/// <summary>
		/// The end date of the campaign
		/// </summary>
		public DateTime CampaignEndDate
		{
			get { return dataHolder.CampaignEndDate; }
			set { this.dataHolder.CampaignEndDate = value; }
		}
		/// <summary>
		/// the K of the user to be used as a traffic contact
		/// </summary>
		public int TrafficUsrK
		{
			get { return dataHolder.TrafficUsrK; }
			set { this.dataHolder.TrafficUsrK = value; }
		}
		/// <summary>
		/// Misc notes
		/// </summary>
		public string Notes
		{
			get { return dataHolder.Notes; }
			set { this.dataHolder.Notes = value; }
		}
		/// <summary>
		/// The K of the user who made the changes
		/// </summary>
		public int ActionUsrK
		{
			get { return dataHolder.ActionUsrK; }
			set { this.dataHolder.ActionUsrK = value; }
		}
		/// <summary>
		/// PaymentTerms e.g. "30 days from date of invoice"
		/// </summary>
		public string PaymentTerms
		{
			get { return dataHolder.PaymentTerms; }
			set { this.dataHolder.PaymentTerms = value; }
		}
		/// <summary>
		/// InvoicePeriod  e.g. "Monthly" or "Campaign"
		/// </summary>
		public string InvoicePeriod
		{
			get { return dataHolder.InvoicePeriod; }
			set { this.dataHolder.InvoicePeriod = value; }
		}
		/// <summary>
		/// Name of the campaign
		/// </summary>
		public string CampaignName
		{
			get { return dataHolder.CampaignName; }
			set { this.dataHolder.CampaignName = value; }
		}
		/// <summary>
		/// Agency discount
		/// </summary>
		public double AgencyDiscount
		{
			get { return dataHolder.AgencyDiscount; }
			set { this.dataHolder.AgencyDiscount = value; }
		}
		/// <summary>
		/// used to prevent the InsertionOrder from being raised twice
		/// </summary>
		public Guid DuplicateGuid
		{
			get { return dataHolder.DuplicateGuid; }
			set { this.dataHolder.DuplicateGuid = value; }
		}
		/// <summary>
		/// true if the campaign credit value was overridden
		/// </summary>
		public bool CampaignCreditsOverriden
		{
			get { return dataHolder.CampaignCreditsOverriden; }
			set { this.dataHolder.CampaignCreditsOverriden = value; }
		}
		#endregion
		public InsertionOrder InsertionOrder
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new InsertionOrder(K);
					}
					else
					{
						bob = new InsertionOrder();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region InsertionOrderSet
	public partial class InsertionOrderSet : BobSet, IEnumerable<InsertionOrder>
	{
		public InsertionOrderSet(Query query) : base(query) { }

		public InsertionOrder this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new InsertionOrder(this);
					((InsertionOrder)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (InsertionOrder)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new InsertionOrderTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<InsertionOrder> ToList()
		{
			List<InsertionOrder> list = new List<InsertionOrder>();
			foreach (InsertionOrder item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<InsertionOrder> Members

		public new IEnumerator<InsertionOrder> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region InsertionOrderTableDef
	public class InsertionOrderTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "InsertionOrder";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "050AA86B";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return InsertionOrder.GetColumnName((InsertionOrder.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.InsertionOrder;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return true;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return InsertionOrder.Columns.K;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			InsertionOrder.Columns c = (InsertionOrder.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case InsertionOrder.Columns.K: ColumnStore[i] = new ColumnDef(c, "K", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey | SqlColumnFlag.AutoNumber, null); break;
					case InsertionOrder.Columns.Status: ColumnStore[i] = new ColumnDef(c, "Status", SqlDbType.Int, 0); break;
					case InsertionOrder.Columns.CampaignCredits: ColumnStore[i] = new ColumnDef(c, "CampaignCredits", SqlDbType.Int, 0); break;
					case InsertionOrder.Columns.NextInvoiceDue: ColumnStore[i] = new ColumnDef(c, "NextInvoiceDue", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case InsertionOrder.Columns.PromoterK: ColumnStore[i] = new ColumnDef(c, "PromoterK", SqlDbType.Int, 0); break;
					case InsertionOrder.Columns.UsrK: ColumnStore[i] = new ColumnDef(c, "UsrK", SqlDbType.Int, 0); break;
					case InsertionOrder.Columns.UsrNameOverride: ColumnStore[i] = new ColumnDef(c, "UsrNameOverride", SqlDbType.VarChar, 250, ""); break;
					case InsertionOrder.Columns.DateTimeCreated: ColumnStore[i] = new ColumnDef(c, "DateTimeCreated", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case InsertionOrder.Columns.ClientRef: ColumnStore[i] = new ColumnDef(c, "ClientRef", SqlDbType.VarChar, 250, ""); break;
					case InsertionOrder.Columns.CampaignStartDate: ColumnStore[i] = new ColumnDef(c, "CampaignStartDate", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case InsertionOrder.Columns.CampaignEndDate: ColumnStore[i] = new ColumnDef(c, "CampaignEndDate", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case InsertionOrder.Columns.TrafficUsrK: ColumnStore[i] = new ColumnDef(c, "TrafficUsrK", SqlDbType.Int, 0); break;
					case InsertionOrder.Columns.Notes: ColumnStore[i] = new ColumnDef(c, "Notes", SqlDbType.VarChar, 2147483647, ""); break;
					case InsertionOrder.Columns.ActionUsrK: ColumnStore[i] = new ColumnDef(c, "ActionUsrK", SqlDbType.Int, 0); break;
					case InsertionOrder.Columns.PaymentTerms: ColumnStore[i] = new ColumnDef(c, "PaymentTerms", SqlDbType.VarChar, 250, ""); break;
					case InsertionOrder.Columns.InvoicePeriod: ColumnStore[i] = new ColumnDef(c, "InvoicePeriod", SqlDbType.VarChar, 250, ""); break;
					case InsertionOrder.Columns.CampaignName: ColumnStore[i] = new ColumnDef(c, "CampaignName", SqlDbType.VarChar, ""); break;
					case InsertionOrder.Columns.AgencyDiscount: ColumnStore[i] = new ColumnDef(c, "AgencyDiscount", SqlDbType.Float, 0.0); break;
					case InsertionOrder.Columns.DuplicateGuid: ColumnStore[i] = new ColumnDef(c, "DuplicateGuid", SqlDbType.UniqueIdentifier, Guid.Empty); break;
					case InsertionOrder.Columns.CampaignCreditsOverriden: ColumnStore[i] = new ColumnDef(c, "CampaignCreditsOverriden", SqlDbType.Bit, false); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(InsertionOrder.Columns.K);
						InitColumn(InsertionOrder.Columns.Status);
						InitColumn(InsertionOrder.Columns.CampaignCredits);
						InitColumn(InsertionOrder.Columns.NextInvoiceDue);
						InitColumn(InsertionOrder.Columns.PromoterK);
						InitColumn(InsertionOrder.Columns.UsrK);
						InitColumn(InsertionOrder.Columns.UsrNameOverride);
						InitColumn(InsertionOrder.Columns.DateTimeCreated);
						InitColumn(InsertionOrder.Columns.ClientRef);
						InitColumn(InsertionOrder.Columns.CampaignStartDate);
						InitColumn(InsertionOrder.Columns.CampaignEndDate);
						InitColumn(InsertionOrder.Columns.TrafficUsrK);
						InitColumn(InsertionOrder.Columns.Notes);
						InitColumn(InsertionOrder.Columns.ActionUsrK);
						InitColumn(InsertionOrder.Columns.PaymentTerms);
						InitColumn(InsertionOrder.Columns.InvoicePeriod);
						InitColumn(InsertionOrder.Columns.CampaignName);
						InitColumn(InsertionOrder.Columns.AgencyDiscount);
						InitColumn(InsertionOrder.Columns.DuplicateGuid);
						InitColumn(InsertionOrder.Columns.CampaignCreditsOverriden);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region InsertionOrderItem
	/// <summary>
	/// Corporate IOs are split up into items
	/// </summary>
	public partial class InsertionOrderItem : Model.Entities.InsertionOrderItem, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// auto incrementing primary key
			/// </summary>
			K = 0x002c0001,
			/// <summary>
			/// Insertion Order K where one exists
			/// </summary>
			InsertionOrderK = 0x002c0002,
			/// <summary>
			/// Description
			/// </summary>
			Description = 0x002c0003,
			/// <summary>
			/// BannerPosition
			/// </summary>
			BannerPosition = 0x002c0004,
			/// <summary>
			/// ImpressionQuantity
			/// </summary>
			ImpressionQuantity = 0x002c0005,
			/// <summary>
			/// GrossCost = (Cpm * Impressions / 1000)
			/// </summary>
			PriceBeforeDiscount = 0x002c0006,
			/// <summary>
			/// Discount
			/// </summary>
			Discount = 0x002c0007,
			/// <summary>
			/// DiscountedCost = (GrossCost * (1 - discount))
			/// </summary>
			PriceBeforeAgencyDiscount = 0x002c0008,
			/// <summary>
			/// agency discount - copied from InsertionOrder
			/// </summary>
			AgencyDiscount = 0x002c0009,
			/// <summary>
			/// NetCost = (DiscountedCost * (1-agency discount)
			/// </summary>
			Price = 0x002c000a,
			/// <summary>
			/// Cpm - cost per mille
			/// </summary>
			Cpm = 0x002c000b,
		}
		#endregion
		public static string GetColumnName(InsertionOrderItem.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case InsertionOrderItem.Columns.K: return "K";
						case InsertionOrderItem.Columns.InsertionOrderK: return "InsertionOrderK";
						case InsertionOrderItem.Columns.Description: return "Description";
						case InsertionOrderItem.Columns.BannerPosition: return "BannerPosition";
						case InsertionOrderItem.Columns.ImpressionQuantity: return "ImpressionQuantity";
						case InsertionOrderItem.Columns.PriceBeforeDiscount: return "PriceBeforeDiscount";
						case InsertionOrderItem.Columns.Discount: return "Discount";
						case InsertionOrderItem.Columns.PriceBeforeAgencyDiscount: return "PriceBeforeAgencyDiscount";
						case InsertionOrderItem.Columns.AgencyDiscount: return "AgencyDiscount";
						case InsertionOrderItem.Columns.Price: return "Price";
						case InsertionOrderItem.Columns.Cpm: return "Cpm";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(InsertionOrderItem.Columns columnEnum)
		{
			switch (columnEnum)
			{
															default: return false;
			}
		}


		#region Common
 
		public InsertionOrderItem(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);  }
		public InsertionOrderItem()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.InsertionOrderItem);
		}
		public InsertionOrderItem(BobSet bs)
		{
			this.Bob = new Bob(bs.Table, bs);
		}
		public InsertionOrderItem(int InsertionOrderItemK, IBob Parent, object Column)
			: this()
		{
			Bob.GetBobFromParent(InsertionOrderItemK, Parent.Bob, Column, TablesEnum.InsertionOrderItem);
		}
		public InsertionOrderItem(int InsertionOrderItemK)
			: this()
		{
			Bob.GetBobFromPrimaryKey(InsertionOrderItemK);
		}
		#endregion

	}
	#endregion
	#region InsertionOrderItemTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region InsertionOrderItem
	/// <summary>
	/// Corporate IOs are split up into items
	/// </summary>
	[Serializable]
	public partial class InsertionOrderItem 
	{
		
		#region Simple members
		/// <summary>
		/// auto incrementing primary key
		/// </summary>
		public override int K
		{
			get { return (int)this[InsertionOrderItem.Columns.K] as int? ?? 0 ; }
			set { this[InsertionOrderItem.Columns.K] = value; }
		}
		/// <summary>
		/// Insertion Order K where one exists
		/// </summary>
		public override int InsertionOrderK
		{
			get { return (int)this[InsertionOrderItem.Columns.InsertionOrderK]; }
			set { this[InsertionOrderItem.Columns.InsertionOrderK] = value; }
		}
		/// <summary>
		/// Description
		/// </summary>
		public override string Description
		{
			get { return (string)this[InsertionOrderItem.Columns.Description]; }
			set { this[InsertionOrderItem.Columns.Description] = value; }
		}
		/// <summary>
		/// BannerPosition
		/// </summary>
		public override int BannerPosition
		{
			get { return (int)this[InsertionOrderItem.Columns.BannerPosition]; }
			set { this[InsertionOrderItem.Columns.BannerPosition] = value; }
		}
		/// <summary>
		/// ImpressionQuantity
		/// </summary>
		public override int ImpressionQuantity
		{
			get { return (int)this[InsertionOrderItem.Columns.ImpressionQuantity]; }
			set { this[InsertionOrderItem.Columns.ImpressionQuantity] = value; }
		}
		/// <summary>
		/// GrossCost = (Cpm * Impressions / 1000)
		/// </summary>
		public override decimal PriceBeforeDiscount
		{
			get { return (decimal)this[InsertionOrderItem.Columns.PriceBeforeDiscount]; }
			set { this[InsertionOrderItem.Columns.PriceBeforeDiscount] = value; }
		}
		/// <summary>
		/// Discount
		/// </summary>
		public override double Discount
		{
			get { return (double)this[InsertionOrderItem.Columns.Discount]; }
			set { this[InsertionOrderItem.Columns.Discount] = value; }
		}
		/// <summary>
		/// DiscountedCost = (GrossCost * (1 - discount))
		/// </summary>
		public override decimal PriceBeforeAgencyDiscount
		{
			get { return (decimal)this[InsertionOrderItem.Columns.PriceBeforeAgencyDiscount]; }
			set { this[InsertionOrderItem.Columns.PriceBeforeAgencyDiscount] = value; }
		}
		/// <summary>
		/// agency discount - copied from InsertionOrder
		/// </summary>
		public override double AgencyDiscount
		{
			get { return (double)this[InsertionOrderItem.Columns.AgencyDiscount]; }
			set { this[InsertionOrderItem.Columns.AgencyDiscount] = value; }
		}
		/// <summary>
		/// NetCost = (DiscountedCost * (1-agency discount)
		/// </summary>
		public override decimal Price
		{
			get { return (decimal)this[InsertionOrderItem.Columns.Price]; }
			set { this[InsertionOrderItem.Columns.Price] = value; }
		}
		/// <summary>
		/// Cpm - cost per mille
		/// </summary>
		public override decimal Cpm
		{
			get { return (decimal)this[InsertionOrderItem.Columns.Cpm]; }
			set { this[InsertionOrderItem.Columns.Cpm] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildInsertionOrderItems
	{
		CachedSqlSelect<InsertionOrderItem> ChildInsertionOrderItems();
		CachedSqlSelect<InsertionOrderItem> ChildInsertionOrderItems(Q where);
		CachedSqlSelect<InsertionOrderItem> ChildInsertionOrderItems(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<InsertionOrderItem> ChildInsertionOrderItems(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class InsertionOrderItem 
		{
		}

	#region InsertionOrderItemDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region InsertionOrderItemDataHolder
	/// <summary>
	/// Corporate IOs are split up into itemsDataHolder
	/// </summary>
	[Serializable]
	public partial class InsertionOrderItemDataHolder : DataHolder<InsertionOrderItem>
	{
		InsertionOrderItem dataHolder;
		[NonSerializedAttribute] InsertionOrderItem bob;

		public InsertionOrderItemDataHolder()
		{
			this.dataHolder = new InsertionOrderItem();
		}
		
		void CopyValues(InsertionOrderItem source, InsertionOrderItem destination)
		{
			destination[Bobs.InsertionOrderItem.Columns.K] = source[Bobs.InsertionOrderItem.Columns.K];
			destination[Bobs.InsertionOrderItem.Columns.InsertionOrderK] = source[Bobs.InsertionOrderItem.Columns.InsertionOrderK];
			destination[Bobs.InsertionOrderItem.Columns.Description] = source[Bobs.InsertionOrderItem.Columns.Description];
			destination[Bobs.InsertionOrderItem.Columns.BannerPosition] = source[Bobs.InsertionOrderItem.Columns.BannerPosition];
			destination[Bobs.InsertionOrderItem.Columns.ImpressionQuantity] = source[Bobs.InsertionOrderItem.Columns.ImpressionQuantity];
			destination[Bobs.InsertionOrderItem.Columns.PriceBeforeDiscount] = source[Bobs.InsertionOrderItem.Columns.PriceBeforeDiscount];
			destination[Bobs.InsertionOrderItem.Columns.Discount] = source[Bobs.InsertionOrderItem.Columns.Discount];
			destination[Bobs.InsertionOrderItem.Columns.PriceBeforeAgencyDiscount] = source[Bobs.InsertionOrderItem.Columns.PriceBeforeAgencyDiscount];
			destination[Bobs.InsertionOrderItem.Columns.AgencyDiscount] = source[Bobs.InsertionOrderItem.Columns.AgencyDiscount];
			destination[Bobs.InsertionOrderItem.Columns.Price] = source[Bobs.InsertionOrderItem.Columns.Price];
			destination[Bobs.InsertionOrderItem.Columns.Cpm] = source[Bobs.InsertionOrderItem.Columns.Cpm];
		}
		
		public InsertionOrderItemDataHolder(InsertionOrderItem bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// auto incrementing primary key
		/// </summary>
		public int K
		{
			get { return dataHolder.K; }
			set { this.dataHolder.K = value; }
		}
		/// <summary>
		/// Insertion Order K where one exists
		/// </summary>
		public int InsertionOrderK
		{
			get { return dataHolder.InsertionOrderK; }
			set { this.dataHolder.InsertionOrderK = value; }
		}
		/// <summary>
		/// Description
		/// </summary>
		public string Description
		{
			get { return dataHolder.Description; }
			set { this.dataHolder.Description = value; }
		}
		/// <summary>
		/// BannerPosition
		/// </summary>
		public int BannerPosition
		{
			get { return dataHolder.BannerPosition; }
			set { this.dataHolder.BannerPosition = value; }
		}
		/// <summary>
		/// ImpressionQuantity
		/// </summary>
		public int ImpressionQuantity
		{
			get { return dataHolder.ImpressionQuantity; }
			set { this.dataHolder.ImpressionQuantity = value; }
		}
		/// <summary>
		/// GrossCost = (Cpm * Impressions / 1000)
		/// </summary>
		public decimal PriceBeforeDiscount
		{
			get { return dataHolder.PriceBeforeDiscount; }
			set { this.dataHolder.PriceBeforeDiscount = value; }
		}
		/// <summary>
		/// Discount
		/// </summary>
		public double Discount
		{
			get { return dataHolder.Discount; }
			set { this.dataHolder.Discount = value; }
		}
		/// <summary>
		/// DiscountedCost = (GrossCost * (1 - discount))
		/// </summary>
		public decimal PriceBeforeAgencyDiscount
		{
			get { return dataHolder.PriceBeforeAgencyDiscount; }
			set { this.dataHolder.PriceBeforeAgencyDiscount = value; }
		}
		/// <summary>
		/// agency discount - copied from InsertionOrder
		/// </summary>
		public double AgencyDiscount
		{
			get { return dataHolder.AgencyDiscount; }
			set { this.dataHolder.AgencyDiscount = value; }
		}
		/// <summary>
		/// NetCost = (DiscountedCost * (1-agency discount)
		/// </summary>
		public decimal Price
		{
			get { return dataHolder.Price; }
			set { this.dataHolder.Price = value; }
		}
		/// <summary>
		/// Cpm - cost per mille
		/// </summary>
		public decimal Cpm
		{
			get { return dataHolder.Cpm; }
			set { this.dataHolder.Cpm = value; }
		}
		#endregion
		public InsertionOrderItem InsertionOrderItem
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new InsertionOrderItem(K);
					}
					else
					{
						bob = new InsertionOrderItem();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region InsertionOrderItemSet
	public partial class InsertionOrderItemSet : BobSet, IEnumerable<InsertionOrderItem>
	{
		public InsertionOrderItemSet(Query query) : base(query) { }

		public InsertionOrderItem this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new InsertionOrderItem(this);
					((InsertionOrderItem)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (InsertionOrderItem)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new InsertionOrderItemTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<InsertionOrderItem> ToList()
		{
			List<InsertionOrderItem> list = new List<InsertionOrderItem>();
			foreach (InsertionOrderItem item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<InsertionOrderItem> Members

		public new IEnumerator<InsertionOrderItem> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region InsertionOrderItemTableDef
	public class InsertionOrderItemTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "InsertionOrderItem";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "008F89FF";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return InsertionOrderItem.GetColumnName((InsertionOrderItem.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.InsertionOrderItem;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return true;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return InsertionOrderItem.Columns.K;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			InsertionOrderItem.Columns c = (InsertionOrderItem.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case InsertionOrderItem.Columns.K: ColumnStore[i] = new ColumnDef(c, "K", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey | SqlColumnFlag.AutoNumber, null); break;
					case InsertionOrderItem.Columns.InsertionOrderK: ColumnStore[i] = new ColumnDef(c, "InsertionOrderK", SqlDbType.Int, 0); break;
					case InsertionOrderItem.Columns.Description: ColumnStore[i] = new ColumnDef(c, "Description", SqlDbType.VarChar, 150, ""); break;
					case InsertionOrderItem.Columns.BannerPosition: ColumnStore[i] = new ColumnDef(c, "BannerPosition", SqlDbType.Int, 0); break;
					case InsertionOrderItem.Columns.ImpressionQuantity: ColumnStore[i] = new ColumnDef(c, "ImpressionQuantity", SqlDbType.Int, 0); break;
					case InsertionOrderItem.Columns.PriceBeforeDiscount: ColumnStore[i] = new ColumnDef(c, "PriceBeforeDiscount", SqlDbType.Decimal, 20, 0m); break;
					case InsertionOrderItem.Columns.Discount: ColumnStore[i] = new ColumnDef(c, "Discount", SqlDbType.Float, 0.0); break;
					case InsertionOrderItem.Columns.PriceBeforeAgencyDiscount: ColumnStore[i] = new ColumnDef(c, "PriceBeforeAgencyDiscount", SqlDbType.Decimal, 20, 0m); break;
					case InsertionOrderItem.Columns.AgencyDiscount: ColumnStore[i] = new ColumnDef(c, "AgencyDiscount", SqlDbType.Float, 0.0); break;
					case InsertionOrderItem.Columns.Price: ColumnStore[i] = new ColumnDef(c, "Price", SqlDbType.Decimal, 20, 0m); break;
					case InsertionOrderItem.Columns.Cpm: ColumnStore[i] = new ColumnDef(c, "Cpm", SqlDbType.Decimal, 20, 0m); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(InsertionOrderItem.Columns.K);
						InitColumn(InsertionOrderItem.Columns.InsertionOrderK);
						InitColumn(InsertionOrderItem.Columns.Description);
						InitColumn(InsertionOrderItem.Columns.BannerPosition);
						InitColumn(InsertionOrderItem.Columns.ImpressionQuantity);
						InitColumn(InsertionOrderItem.Columns.PriceBeforeDiscount);
						InitColumn(InsertionOrderItem.Columns.Discount);
						InitColumn(InsertionOrderItem.Columns.PriceBeforeAgencyDiscount);
						InitColumn(InsertionOrderItem.Columns.AgencyDiscount);
						InitColumn(InsertionOrderItem.Columns.Price);
						InitColumn(InsertionOrderItem.Columns.Cpm);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region Invoice
	/// <summary>
	/// Invoice or credit note
	/// </summary>
	public partial class Invoice : Model.Entities.Invoice, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// The primary key
			/// </summary>
			K = 0x002d0001,
			/// <summary>
			/// Invoice, Credit
			/// </summary>
			Type = 0x002d0002,
			/// <summary>
			/// The user that created this invoice
			/// </summary>
			UsrK = 0x002d0003,
			/// <summary>
			/// The If this is a promoter invoice - this is the promoter
			/// </summary>
			PromoterK = 0x002d0004,
			/// <summary>
			/// Link to the user that initiated this transfer (e.g. the admin user if it's done manually!)
			/// </summary>
			ActionUsrK = 0x002d0005,
			/// <summary>
			/// TO BE REMOVED - Name from credit card payment control
			/// </summary>
			Name = 0x002d0006,
			/// <summary>
			/// TO BE REMOVED - First line of the address from credit card payment control
			/// </summary>
			Address = 0x002d0007,
			/// <summary>
			/// TO BE REMOVED - Postcode from credit card payment control
			/// </summary>
			Postcode = 0x002d0008,
			/// <summary>
			/// TO BE REMOVED - Payment type - 1=CreditCard, 2=Invoiced
			/// </summary>
			PaymentType = 0x002d0009,
			/// <summary>
			/// Has this invoice been fully paid?
			/// </summary>
			Paid = 0x002d000a,
			/// <summary>
			/// When was the invoice created - the tax point
			/// </summary>
			CreatedDateTime = 0x002d000b,
			/// <summary>
			/// When is the invoice due to be paid (4 weeks). After this we can charge interest.
			/// </summary>
			DueDateTime = 0x002d000c,
			/// <summary>
			/// When the invoice was fully paid
			/// </summary>
			PaidDateTime = 0x002d000d,
			/// <summary>
			/// Price excluding VAT (+ve for invoices, -ve for credits)
			/// </summary>
			Price = 0x002d000e,
			/// <summary>
			/// Vat (+ve for invoices, -ve for credits)
			/// </summary>
			Vat = 0x002d000f,
			/// <summary>
			/// Price including VAT (+ve for invoices, -ve for credits)
			/// </summary>
			Total = 0x002d0010,
			/// <summary>
			/// Guid to catch duplicate "pay now" clicks
			/// </summary>
			DuplicateGuid = 0x002d0011,
			/// <summary>
			/// Additional Notes
			/// </summary>
			Notes = 0x002d0012,
			/// <summary>
			/// T0, T1, T4, T9
			/// </summary>
			VatCode = 0x002d0013,
			/// <summary>
			/// Who is the account manager for this invoice?
			/// </summary>
			SalesUsrK = 0x002d0014,
			/// <summary>
			/// How much is contributed to the account managers target?
			/// </summary>
			SalesUsrAmount = 0x002d0015,
			/// <summary>
			/// Flag for immediate credit card payments. This flag to be used for exports to Sage
			/// </summary>
			IsImmediateCreditCardPayment = 0x002d0016,
			/// <summary>
			/// Tax date - to be used for exporting to Sage
			/// </summary>
			TaxDateTime = 0x002d0017,
			/// <summary>
			/// Invoice purchase order number
			/// </summary>
			PurchaseOrderNumber = 0x002d0018,
			/// <summary>
			/// Type of the buyer: AgencyPromoter = 1, NonAgencyPromoter = 2, TicketUsr = 3, NonTicketUsr = 4
			/// </summary>
			BuyerType = 0x002d0019,
			/// <summary>
			/// Price before any discounts have been applied
			/// </summary>
			PriceBeforeDiscount = 0x002d001a,
			/// <summary>
			/// average of item level Discount - percentage - stored between 0 and 1
			/// </summary>
			Discount = 0x002d001b,
			/// <summary>
			/// sum of Invoice Item PriceBeforeAgencyDiscount but after item discount has been applied
			/// </summary>
			PriceBeforeAgencyDiscount = 0x002d001c,
			/// <summary>
			/// average of item level agency discount - percentage - stored between 0 and 1
			/// </summary>
			AgencyDiscount = 0x002d001d,
			/// <summary>
			/// Used when the item is a campaign credit top-up
			/// </summary>
			InsertionOrderK = 0x002d001e,
		}
		#endregion
		public static string GetColumnName(Invoice.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case Invoice.Columns.K: return "K";
						case Invoice.Columns.Type: return "Type";
						case Invoice.Columns.UsrK: return "UsrK";
						case Invoice.Columns.PromoterK: return "PromoterK";
						case Invoice.Columns.ActionUsrK: return "ActionUsrK";
						case Invoice.Columns.Name: return "Name";
						case Invoice.Columns.Address: return "Address";
						case Invoice.Columns.Postcode: return "Postcode";
						case Invoice.Columns.PaymentType: return "PaymentType";
						case Invoice.Columns.Paid: return "Paid";
						case Invoice.Columns.CreatedDateTime: return "CreatedDateTime";
						case Invoice.Columns.DueDateTime: return "DueDateTime";
						case Invoice.Columns.PaidDateTime: return "PaidDateTime";
						case Invoice.Columns.Price: return "Price";
						case Invoice.Columns.Vat: return "Vat";
						case Invoice.Columns.Total: return "Total";
						case Invoice.Columns.DuplicateGuid: return "DuplicateGuid";
						case Invoice.Columns.Notes: return "Notes";
						case Invoice.Columns.VatCode: return "VatCode";
						case Invoice.Columns.SalesUsrK: return "SalesUsrK";
						case Invoice.Columns.SalesUsrAmount: return "SalesUsrAmount";
						case Invoice.Columns.IsImmediateCreditCardPayment: return "IsImmediateCreditCardPayment";
						case Invoice.Columns.TaxDateTime: return "TaxDateTime";
						case Invoice.Columns.PurchaseOrderNumber: return "PurchaseOrderNumber";
						case Invoice.Columns.BuyerType: return "BuyerType";
						case Invoice.Columns.PriceBeforeDiscount: return "PriceBeforeDiscount";
						case Invoice.Columns.Discount: return "Discount";
						case Invoice.Columns.PriceBeforeAgencyDiscount: return "PriceBeforeAgencyDiscount";
						case Invoice.Columns.AgencyDiscount: return "AgencyDiscount";
						case Invoice.Columns.InsertionOrderK: return "InsertionOrderK";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(Invoice.Columns columnEnum)
		{
			switch (columnEnum)
			{
																																		default: return false;
			}
		}


		#region Common
 
		public Invoice(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);  }
		public Invoice()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.Invoice);
		}
		public Invoice(BobSet bs)
		{
			this.Bob = new Bob(bs.Table, bs);
		}
		public Invoice(int InvoiceK, IBob Parent, object Column)
			: this()
		{
			Bob.GetBobFromParent(InvoiceK, Parent.Bob, Column, TablesEnum.Invoice);
		}
		public Invoice(int InvoiceK)
			: this()
		{
			Bob.GetBobFromPrimaryKey(InvoiceK);
		}
		#endregion

	}
	#endregion
	#region InvoiceTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region Invoice
	/// <summary>
	/// Invoice or credit note
	/// </summary>
	[Serializable]
	public partial class Invoice 
	{
		
		#region Simple members
		/// <summary>
		/// The primary key
		/// </summary>
		public override int K
		{
			get { return (int)this[Invoice.Columns.K] as int? ?? 0 ; }
			set { this[Invoice.Columns.K] = value; }
		}
		/// <summary>
		/// Invoice, Credit
		/// </summary>
		public override int Type
		{
			get { return (int)this[Invoice.Columns.Type]; }
			set { this[Invoice.Columns.Type] = value; }
		}
		/// <summary>
		/// The user that created this invoice
		/// </summary>
		public override int UsrK
		{
			get { return (int)this[Invoice.Columns.UsrK]; }
			set { this[Invoice.Columns.UsrK] = value; }
		}
		/// <summary>
		/// The If this is a promoter invoice - this is the promoter
		/// </summary>
		public override int PromoterK
		{
			get { return (int)this[Invoice.Columns.PromoterK]; }
			set { this[Invoice.Columns.PromoterK] = value; }
		}
		/// <summary>
		/// Link to the user that initiated this transfer (e.g. the admin user if it's done manually!)
		/// </summary>
		public override int ActionUsrK
		{
			get { return (int)this[Invoice.Columns.ActionUsrK]; }
			set { this[Invoice.Columns.ActionUsrK] = value; }
		}
		/// <summary>
		/// TO BE REMOVED - Name from credit card payment control
		/// </summary>
		public override string Name
		{
			get { return (string)this[Invoice.Columns.Name]; }
			set { this[Invoice.Columns.Name] = value; }
		}
		/// <summary>
		/// TO BE REMOVED - First line of the address from credit card payment control
		/// </summary>
		public override string Address
		{
			get { return (string)this[Invoice.Columns.Address]; }
			set { this[Invoice.Columns.Address] = value; }
		}
		/// <summary>
		/// TO BE REMOVED - Postcode from credit card payment control
		/// </summary>
		public override string Postcode
		{
			get { return (string)this[Invoice.Columns.Postcode]; }
			set { this[Invoice.Columns.Postcode] = value; }
		}
		/// <summary>
		/// TO BE REMOVED - Payment type - 1=CreditCard, 2=Invoiced
		/// </summary>
		public override int PaymentType
		{
			get { return (int)this[Invoice.Columns.PaymentType]; }
			set { this[Invoice.Columns.PaymentType] = value; }
		}
		/// <summary>
		/// Has this invoice been fully paid?
		/// </summary>
		public override bool Paid
		{
			get { return (bool)this[Invoice.Columns.Paid]; }
			set { this[Invoice.Columns.Paid] = value; }
		}
		/// <summary>
		/// When was the invoice created - the tax point
		/// </summary>
		public override DateTime CreatedDateTime
		{
			get { return (DateTime)this[Invoice.Columns.CreatedDateTime]; }
			set { this[Invoice.Columns.CreatedDateTime] = value; }
		}
		/// <summary>
		/// When is the invoice due to be paid (4 weeks). After this we can charge interest.
		/// </summary>
		public override DateTime DueDateTime
		{
			get { return (DateTime)this[Invoice.Columns.DueDateTime]; }
			set { this[Invoice.Columns.DueDateTime] = value; }
		}
		/// <summary>
		/// When the invoice was fully paid
		/// </summary>
		public override DateTime PaidDateTime
		{
			get { return (DateTime)this[Invoice.Columns.PaidDateTime]; }
			set { this[Invoice.Columns.PaidDateTime] = value; }
		}
		/// <summary>
		/// Price excluding VAT (+ve for invoices, -ve for credits)
		/// </summary>
		public override decimal Price
		{
			get { return (decimal)this[Invoice.Columns.Price]; }
			set { this[Invoice.Columns.Price] = value; }
		}
		/// <summary>
		/// Vat (+ve for invoices, -ve for credits)
		/// </summary>
		public override decimal Vat
		{
			get { return (decimal)this[Invoice.Columns.Vat]; }
			set { this[Invoice.Columns.Vat] = value; }
		}
		/// <summary>
		/// Price including VAT (+ve for invoices, -ve for credits)
		/// </summary>
		public override decimal Total
		{
			get { return (decimal)this[Invoice.Columns.Total]; }
			set { this[Invoice.Columns.Total] = value; }
		}
		/// <summary>
		/// Guid to catch duplicate "pay now" clicks
		/// </summary>
		public Guid	DuplicateGuid
		{
			get{ return Cambro.Misc.Db.GuidConvertor(this[Invoice.Columns.DuplicateGuid]);}		
			set{ this[Invoice.Columns.DuplicateGuid] = new System.Data.SqlTypes.SqlGuid(value);}
		}
		/// <summary>
		/// Additional Notes
		/// </summary>
		public override string Notes
		{
			get { return (string)this[Invoice.Columns.Notes]; }
			set { this[Invoice.Columns.Notes] = value; }
		}
		/// <summary>
		/// T0, T1, T4, T9
		/// </summary>
		public override int VatCode
		{
			get { return (int)this[Invoice.Columns.VatCode]; }
			set { this[Invoice.Columns.VatCode] = value; }
		}
		/// <summary>
		/// Who is the account manager for this invoice?
		/// </summary>
		public override int SalesUsrK
		{
			get { return (int)this[Invoice.Columns.SalesUsrK]; }
			set { this[Invoice.Columns.SalesUsrK] = value; }
		}
		/// <summary>
		/// How much is contributed to the account managers target?
		/// </summary>
		public override decimal SalesUsrAmount
		{
			get { return (decimal)this[Invoice.Columns.SalesUsrAmount]; }
			set { this[Invoice.Columns.SalesUsrAmount] = value; }
		}
		/// <summary>
		/// Flag for immediate credit card payments. This flag to be used for exports to Sage
		/// </summary>
		public override bool IsImmediateCreditCardPayment
		{
			get { return (bool)this[Invoice.Columns.IsImmediateCreditCardPayment]; }
			set { this[Invoice.Columns.IsImmediateCreditCardPayment] = value; }
		}
		/// <summary>
		/// Tax date - to be used for exporting to Sage
		/// </summary>
		public override DateTime TaxDateTime
		{
			get { return (DateTime)this[Invoice.Columns.TaxDateTime]; }
			set { this[Invoice.Columns.TaxDateTime] = value; }
		}
		/// <summary>
		/// Invoice purchase order number
		/// </summary>
		public override string PurchaseOrderNumber
		{
			get { return (string)this[Invoice.Columns.PurchaseOrderNumber]; }
			set { this[Invoice.Columns.PurchaseOrderNumber] = value; }
		}
		/// <summary>
		/// Type of the buyer: AgencyPromoter = 1, NonAgencyPromoter = 2, TicketUsr = 3, NonTicketUsr = 4
		/// </summary>
		public override int BuyerType
		{
			get { return (int)this[Invoice.Columns.BuyerType]; }
			set { this[Invoice.Columns.BuyerType] = value; }
		}
		/// <summary>
		/// Price before any discounts have been applied
		/// </summary>
		public override decimal PriceBeforeDiscount
		{
			get { return (decimal)this[Invoice.Columns.PriceBeforeDiscount]; }
			set { this[Invoice.Columns.PriceBeforeDiscount] = value; }
		}
		/// <summary>
		/// average of item level Discount - percentage - stored between 0 and 1
		/// </summary>
		public override double Discount
		{
			get { return (double)this[Invoice.Columns.Discount]; }
			set { this[Invoice.Columns.Discount] = value; }
		}
		/// <summary>
		/// sum of Invoice Item PriceBeforeAgencyDiscount but after item discount has been applied
		/// </summary>
		public override decimal PriceBeforeAgencyDiscount
		{
			get { return (decimal)this[Invoice.Columns.PriceBeforeAgencyDiscount]; }
			set { this[Invoice.Columns.PriceBeforeAgencyDiscount] = value; }
		}
		/// <summary>
		/// average of item level agency discount - percentage - stored between 0 and 1
		/// </summary>
		public override double AgencyDiscount
		{
			get { return (double)this[Invoice.Columns.AgencyDiscount]; }
			set { this[Invoice.Columns.AgencyDiscount] = value; }
		}
		/// <summary>
		/// Used when the item is a campaign credit top-up
		/// </summary>
		public override int InsertionOrderK
		{
			get { return (int)this[Invoice.Columns.InsertionOrderK]; }
			set { this[Invoice.Columns.InsertionOrderK] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildInvoices
	{
		CachedSqlSelect<Invoice> ChildInvoices();
		CachedSqlSelect<Invoice> ChildInvoices(Q where);
		CachedSqlSelect<Invoice> ChildInvoices(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<Invoice> ChildInvoices(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class Invoice 
	 : 
	Bobs.ChildInterfaces.IHasChildInvoiceCredits
	,
	Bobs.ChildInterfaces.IHasChildInvoiceItems
	,
	Bobs.ChildInterfaces.IHasChildInvoiceTransfers
	,
	Bobs.ChildInterfaces.IHasChildTickets
		{
			public CachedSqlSelect<InvoiceCredit> ChildInvoiceCredits()
		{
			return this.ChildInvoiceCredits(null, null);
		}
		public CachedSqlSelect<InvoiceCredit> ChildInvoiceCredits(Q where)
		{
			return this.ChildInvoiceCredits(where, null);
		}
		public CachedSqlSelect<InvoiceCredit> ChildInvoiceCredits(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildInvoiceCredits(null, orderBy);
		}
		public CachedSqlSelect<InvoiceCredit> ChildInvoiceCredits(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<InvoiceCredit>
			(
				new Children<InvoiceCredit>
				(
					TablesEnum.Invoice, 
					this.K, 
					TablesEnum.InvoiceCredit, 
					dr => 
					{ 
						InvoiceCredit newInvoiceCredit = new InvoiceCredit(); 
						newInvoiceCredit.Initialise(dr); 
						return newInvoiceCredit;
					},
					"7CCFF60C",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<InvoiceItem> ChildInvoiceItems()
		{
			return this.ChildInvoiceItems(null, null);
		}
		public CachedSqlSelect<InvoiceItem> ChildInvoiceItems(Q where)
		{
			return this.ChildInvoiceItems(where, null);
		}
		public CachedSqlSelect<InvoiceItem> ChildInvoiceItems(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildInvoiceItems(null, orderBy);
		}
		public CachedSqlSelect<InvoiceItem> ChildInvoiceItems(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<InvoiceItem>
			(
				new Children<InvoiceItem>
				(
					TablesEnum.Invoice, 
					this.K, 
					TablesEnum.InvoiceItem, 
					dr => 
					{ 
						InvoiceItem newInvoiceItem = new InvoiceItem(); 
						newInvoiceItem.Initialise(dr); 
						return newInvoiceItem;
					},
					"4632788C",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<InvoiceTransfer> ChildInvoiceTransfers()
		{
			return this.ChildInvoiceTransfers(null, null);
		}
		public CachedSqlSelect<InvoiceTransfer> ChildInvoiceTransfers(Q where)
		{
			return this.ChildInvoiceTransfers(where, null);
		}
		public CachedSqlSelect<InvoiceTransfer> ChildInvoiceTransfers(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildInvoiceTransfers(null, orderBy);
		}
		public CachedSqlSelect<InvoiceTransfer> ChildInvoiceTransfers(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<InvoiceTransfer>
			(
				new Children<InvoiceTransfer>
				(
					TablesEnum.Invoice, 
					this.K, 
					TablesEnum.InvoiceTransfer, 
					dr => 
					{ 
						InvoiceTransfer newInvoiceTransfer = new InvoiceTransfer(); 
						newInvoiceTransfer.Initialise(dr); 
						return newInvoiceTransfer;
					},
					"D75AE2A5",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<Ticket> ChildTickets()
		{
			return this.ChildTickets(null, null);
		}
		public CachedSqlSelect<Ticket> ChildTickets(Q where)
		{
			return this.ChildTickets(where, null);
		}
		public CachedSqlSelect<Ticket> ChildTickets(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildTickets(null, orderBy);
		}
		public CachedSqlSelect<Ticket> ChildTickets(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<Ticket>
			(
				new Children<Ticket>
				(
					TablesEnum.Invoice, 
					this.K, 
					TablesEnum.Ticket, 
					dr => 
					{ 
						Ticket newTicket = new Ticket(); 
						newTicket.Initialise(dr); 
						return newTicket;
					},
					"117368D6",
					where,
					orderBy
				)
			);
		}
		}

	#region InvoiceDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region InvoiceDataHolder
	/// <summary>
	/// Invoice or credit noteDataHolder
	/// </summary>
	[Serializable]
	public partial class InvoiceDataHolder : DataHolder<Invoice>
	{
		Invoice dataHolder;
		[NonSerializedAttribute] Invoice bob;

		public InvoiceDataHolder()
		{
			this.dataHolder = new Invoice();
		}
		
		void CopyValues(Invoice source, Invoice destination)
		{
			destination[Bobs.Invoice.Columns.K] = source[Bobs.Invoice.Columns.K];
			destination[Bobs.Invoice.Columns.Type] = source[Bobs.Invoice.Columns.Type];
			destination[Bobs.Invoice.Columns.UsrK] = source[Bobs.Invoice.Columns.UsrK];
			destination[Bobs.Invoice.Columns.PromoterK] = source[Bobs.Invoice.Columns.PromoterK];
			destination[Bobs.Invoice.Columns.ActionUsrK] = source[Bobs.Invoice.Columns.ActionUsrK];
			destination[Bobs.Invoice.Columns.Name] = source[Bobs.Invoice.Columns.Name];
			destination[Bobs.Invoice.Columns.Address] = source[Bobs.Invoice.Columns.Address];
			destination[Bobs.Invoice.Columns.Postcode] = source[Bobs.Invoice.Columns.Postcode];
			destination[Bobs.Invoice.Columns.PaymentType] = source[Bobs.Invoice.Columns.PaymentType];
			destination[Bobs.Invoice.Columns.Paid] = source[Bobs.Invoice.Columns.Paid];
			destination[Bobs.Invoice.Columns.CreatedDateTime] = source[Bobs.Invoice.Columns.CreatedDateTime];
			destination[Bobs.Invoice.Columns.DueDateTime] = source[Bobs.Invoice.Columns.DueDateTime];
			destination[Bobs.Invoice.Columns.PaidDateTime] = source[Bobs.Invoice.Columns.PaidDateTime];
			destination[Bobs.Invoice.Columns.Price] = source[Bobs.Invoice.Columns.Price];
			destination[Bobs.Invoice.Columns.Vat] = source[Bobs.Invoice.Columns.Vat];
			destination[Bobs.Invoice.Columns.Total] = source[Bobs.Invoice.Columns.Total];
			destination[Bobs.Invoice.Columns.DuplicateGuid] = source[Bobs.Invoice.Columns.DuplicateGuid];
			destination[Bobs.Invoice.Columns.Notes] = source[Bobs.Invoice.Columns.Notes];
			destination[Bobs.Invoice.Columns.VatCode] = source[Bobs.Invoice.Columns.VatCode];
			destination[Bobs.Invoice.Columns.SalesUsrK] = source[Bobs.Invoice.Columns.SalesUsrK];
			destination[Bobs.Invoice.Columns.SalesUsrAmount] = source[Bobs.Invoice.Columns.SalesUsrAmount];
			destination[Bobs.Invoice.Columns.IsImmediateCreditCardPayment] = source[Bobs.Invoice.Columns.IsImmediateCreditCardPayment];
			destination[Bobs.Invoice.Columns.TaxDateTime] = source[Bobs.Invoice.Columns.TaxDateTime];
			destination[Bobs.Invoice.Columns.PurchaseOrderNumber] = source[Bobs.Invoice.Columns.PurchaseOrderNumber];
			destination[Bobs.Invoice.Columns.BuyerType] = source[Bobs.Invoice.Columns.BuyerType];
			destination[Bobs.Invoice.Columns.PriceBeforeDiscount] = source[Bobs.Invoice.Columns.PriceBeforeDiscount];
			destination[Bobs.Invoice.Columns.Discount] = source[Bobs.Invoice.Columns.Discount];
			destination[Bobs.Invoice.Columns.PriceBeforeAgencyDiscount] = source[Bobs.Invoice.Columns.PriceBeforeAgencyDiscount];
			destination[Bobs.Invoice.Columns.AgencyDiscount] = source[Bobs.Invoice.Columns.AgencyDiscount];
			destination[Bobs.Invoice.Columns.InsertionOrderK] = source[Bobs.Invoice.Columns.InsertionOrderK];
		}
		
		public InvoiceDataHolder(Invoice bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// The primary key
		/// </summary>
		public int K
		{
			get { return dataHolder.K; }
			set { this.dataHolder.K = value; }
		}
		/// <summary>
		/// Invoice, Credit
		/// </summary>
		public int Type
		{
			get { return dataHolder.Type; }
			set { this.dataHolder.Type = value; }
		}
		/// <summary>
		/// The user that created this invoice
		/// </summary>
		public int UsrK
		{
			get { return dataHolder.UsrK; }
			set { this.dataHolder.UsrK = value; }
		}
		/// <summary>
		/// The If this is a promoter invoice - this is the promoter
		/// </summary>
		public int PromoterK
		{
			get { return dataHolder.PromoterK; }
			set { this.dataHolder.PromoterK = value; }
		}
		/// <summary>
		/// Link to the user that initiated this transfer (e.g. the admin user if it's done manually!)
		/// </summary>
		public int ActionUsrK
		{
			get { return dataHolder.ActionUsrK; }
			set { this.dataHolder.ActionUsrK = value; }
		}
		/// <summary>
		/// TO BE REMOVED - Name from credit card payment control
		/// </summary>
		public string Name
		{
			get { return dataHolder.Name; }
			set { this.dataHolder.Name = value; }
		}
		/// <summary>
		/// TO BE REMOVED - First line of the address from credit card payment control
		/// </summary>
		public string Address
		{
			get { return dataHolder.Address; }
			set { this.dataHolder.Address = value; }
		}
		/// <summary>
		/// TO BE REMOVED - Postcode from credit card payment control
		/// </summary>
		public string Postcode
		{
			get { return dataHolder.Postcode; }
			set { this.dataHolder.Postcode = value; }
		}
		/// <summary>
		/// TO BE REMOVED - Payment type - 1=CreditCard, 2=Invoiced
		/// </summary>
		public int PaymentType
		{
			get { return dataHolder.PaymentType; }
			set { this.dataHolder.PaymentType = value; }
		}
		/// <summary>
		/// Has this invoice been fully paid?
		/// </summary>
		public bool Paid
		{
			get { return dataHolder.Paid; }
			set { this.dataHolder.Paid = value; }
		}
		/// <summary>
		/// When was the invoice created - the tax point
		/// </summary>
		public DateTime CreatedDateTime
		{
			get { return dataHolder.CreatedDateTime; }
			set { this.dataHolder.CreatedDateTime = value; }
		}
		/// <summary>
		/// When is the invoice due to be paid (4 weeks). After this we can charge interest.
		/// </summary>
		public DateTime DueDateTime
		{
			get { return dataHolder.DueDateTime; }
			set { this.dataHolder.DueDateTime = value; }
		}
		/// <summary>
		/// When the invoice was fully paid
		/// </summary>
		public DateTime PaidDateTime
		{
			get { return dataHolder.PaidDateTime; }
			set { this.dataHolder.PaidDateTime = value; }
		}
		/// <summary>
		/// Price excluding VAT (+ve for invoices, -ve for credits)
		/// </summary>
		public decimal Price
		{
			get { return dataHolder.Price; }
			set { this.dataHolder.Price = value; }
		}
		/// <summary>
		/// Vat (+ve for invoices, -ve for credits)
		/// </summary>
		public decimal Vat
		{
			get { return dataHolder.Vat; }
			set { this.dataHolder.Vat = value; }
		}
		/// <summary>
		/// Price including VAT (+ve for invoices, -ve for credits)
		/// </summary>
		public decimal Total
		{
			get { return dataHolder.Total; }
			set { this.dataHolder.Total = value; }
		}
		/// <summary>
		/// Guid to catch duplicate "pay now" clicks
		/// </summary>
		public Guid DuplicateGuid
		{
			get { return dataHolder.DuplicateGuid; }
			set { this.dataHolder.DuplicateGuid = value; }
		}
		/// <summary>
		/// Additional Notes
		/// </summary>
		public string Notes
		{
			get { return dataHolder.Notes; }
			set { this.dataHolder.Notes = value; }
		}
		/// <summary>
		/// T0, T1, T4, T9
		/// </summary>
		public int VatCode
		{
			get { return dataHolder.VatCode; }
			set { this.dataHolder.VatCode = value; }
		}
		/// <summary>
		/// Who is the account manager for this invoice?
		/// </summary>
		public int SalesUsrK
		{
			get { return dataHolder.SalesUsrK; }
			set { this.dataHolder.SalesUsrK = value; }
		}
		/// <summary>
		/// How much is contributed to the account managers target?
		/// </summary>
		public decimal SalesUsrAmount
		{
			get { return dataHolder.SalesUsrAmount; }
			set { this.dataHolder.SalesUsrAmount = value; }
		}
		/// <summary>
		/// Flag for immediate credit card payments. This flag to be used for exports to Sage
		/// </summary>
		public bool IsImmediateCreditCardPayment
		{
			get { return dataHolder.IsImmediateCreditCardPayment; }
			set { this.dataHolder.IsImmediateCreditCardPayment = value; }
		}
		/// <summary>
		/// Tax date - to be used for exporting to Sage
		/// </summary>
		public DateTime TaxDateTime
		{
			get { return dataHolder.TaxDateTime; }
			set { this.dataHolder.TaxDateTime = value; }
		}
		/// <summary>
		/// Invoice purchase order number
		/// </summary>
		public string PurchaseOrderNumber
		{
			get { return dataHolder.PurchaseOrderNumber; }
			set { this.dataHolder.PurchaseOrderNumber = value; }
		}
		/// <summary>
		/// Type of the buyer: AgencyPromoter = 1, NonAgencyPromoter = 2, TicketUsr = 3, NonTicketUsr = 4
		/// </summary>
		public int BuyerType
		{
			get { return dataHolder.BuyerType; }
			set { this.dataHolder.BuyerType = value; }
		}
		/// <summary>
		/// Price before any discounts have been applied
		/// </summary>
		public decimal PriceBeforeDiscount
		{
			get { return dataHolder.PriceBeforeDiscount; }
			set { this.dataHolder.PriceBeforeDiscount = value; }
		}
		/// <summary>
		/// average of item level Discount - percentage - stored between 0 and 1
		/// </summary>
		public double Discount
		{
			get { return dataHolder.Discount; }
			set { this.dataHolder.Discount = value; }
		}
		/// <summary>
		/// sum of Invoice Item PriceBeforeAgencyDiscount but after item discount has been applied
		/// </summary>
		public decimal PriceBeforeAgencyDiscount
		{
			get { return dataHolder.PriceBeforeAgencyDiscount; }
			set { this.dataHolder.PriceBeforeAgencyDiscount = value; }
		}
		/// <summary>
		/// average of item level agency discount - percentage - stored between 0 and 1
		/// </summary>
		public double AgencyDiscount
		{
			get { return dataHolder.AgencyDiscount; }
			set { this.dataHolder.AgencyDiscount = value; }
		}
		/// <summary>
		/// Used when the item is a campaign credit top-up
		/// </summary>
		public int InsertionOrderK
		{
			get { return dataHolder.InsertionOrderK; }
			set { this.dataHolder.InsertionOrderK = value; }
		}
		#endregion
		public Invoice Invoice
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new Invoice(K);
					}
					else
					{
						bob = new Invoice();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region InvoiceSet
	public partial class InvoiceSet : BobSet, IEnumerable<Invoice>
	{
		public InvoiceSet(Query query) : base(query) { }

		public Invoice this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new Invoice(this);
					((Invoice)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (Invoice)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new InvoiceTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<Invoice> ToList()
		{
			List<Invoice> list = new List<Invoice>();
			foreach (Invoice item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<Invoice> Members

		public new IEnumerator<Invoice> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region InvoiceTableDef
	public class InvoiceTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "Invoice";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "E3B130F4";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return Invoice.GetColumnName((Invoice.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.Invoice;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return true;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return Invoice.Columns.K;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			Invoice.Columns c = (Invoice.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case Invoice.Columns.K: ColumnStore[i] = new ColumnDef(c, "K", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey | SqlColumnFlag.AutoNumber, null); break;
					case Invoice.Columns.Type: ColumnStore[i] = new ColumnDef(c, "Type", SqlDbType.Int, 0); break;
					case Invoice.Columns.UsrK: ColumnStore[i] = new ColumnDef(c, "UsrK", SqlDbType.Int, 0); break;
					case Invoice.Columns.PromoterK: ColumnStore[i] = new ColumnDef(c, "PromoterK", SqlDbType.Int, 0); break;
					case Invoice.Columns.ActionUsrK: ColumnStore[i] = new ColumnDef(c, "ActionUsrK", SqlDbType.Int, 0); break;
					case Invoice.Columns.Name: ColumnStore[i] = new ColumnDef(c, "Name", SqlDbType.VarChar, 150, ""); break;
					case Invoice.Columns.Address: ColumnStore[i] = new ColumnDef(c, "Address", SqlDbType.VarChar, 150, ""); break;
					case Invoice.Columns.Postcode: ColumnStore[i] = new ColumnDef(c, "Postcode", SqlDbType.VarChar, 150, ""); break;
					case Invoice.Columns.PaymentType: ColumnStore[i] = new ColumnDef(c, "PaymentType", SqlDbType.Int, 0); break;
					case Invoice.Columns.Paid: ColumnStore[i] = new ColumnDef(c, "Paid", SqlDbType.Bit, false); break;
					case Invoice.Columns.CreatedDateTime: ColumnStore[i] = new ColumnDef(c, "CreatedDateTime", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case Invoice.Columns.DueDateTime: ColumnStore[i] = new ColumnDef(c, "DueDateTime", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case Invoice.Columns.PaidDateTime: ColumnStore[i] = new ColumnDef(c, "PaidDateTime", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case Invoice.Columns.Price: ColumnStore[i] = new ColumnDef(c, "Price", SqlDbType.Decimal, 20, 0m); break;
					case Invoice.Columns.Vat: ColumnStore[i] = new ColumnDef(c, "Vat", SqlDbType.Decimal, 20, 0m); break;
					case Invoice.Columns.Total: ColumnStore[i] = new ColumnDef(c, "Total", SqlDbType.Decimal, 20, 0m); break;
					case Invoice.Columns.DuplicateGuid: ColumnStore[i] = new ColumnDef(c, "DuplicateGuid", SqlDbType.UniqueIdentifier, Guid.Empty); break;
					case Invoice.Columns.Notes: ColumnStore[i] = new ColumnDef(c, "Notes", SqlDbType.Text, ""); break;
					case Invoice.Columns.VatCode: ColumnStore[i] = new ColumnDef(c, "VatCode", SqlDbType.Int, 0); break;
					case Invoice.Columns.SalesUsrK: ColumnStore[i] = new ColumnDef(c, "SalesUsrK", SqlDbType.Int, 0); break;
					case Invoice.Columns.SalesUsrAmount: ColumnStore[i] = new ColumnDef(c, "SalesUsrAmount", SqlDbType.Decimal, 20, 0m); break;
					case Invoice.Columns.IsImmediateCreditCardPayment: ColumnStore[i] = new ColumnDef(c, "IsImmediateCreditCardPayment", SqlDbType.Bit, false); break;
					case Invoice.Columns.TaxDateTime: ColumnStore[i] = new ColumnDef(c, "TaxDateTime", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case Invoice.Columns.PurchaseOrderNumber: ColumnStore[i] = new ColumnDef(c, "PurchaseOrderNumber", SqlDbType.VarChar, ""); break;
					case Invoice.Columns.BuyerType: ColumnStore[i] = new ColumnDef(c, "BuyerType", SqlDbType.Int, 0); break;
					case Invoice.Columns.PriceBeforeDiscount: ColumnStore[i] = new ColumnDef(c, "PriceBeforeDiscount", SqlDbType.Decimal, 20, 0m); break;
					case Invoice.Columns.Discount: ColumnStore[i] = new ColumnDef(c, "Discount", SqlDbType.Float, 0.0); break;
					case Invoice.Columns.PriceBeforeAgencyDiscount: ColumnStore[i] = new ColumnDef(c, "PriceBeforeAgencyDiscount", SqlDbType.Decimal, 20, 0m); break;
					case Invoice.Columns.AgencyDiscount: ColumnStore[i] = new ColumnDef(c, "AgencyDiscount", SqlDbType.Float, 0.0); break;
					case Invoice.Columns.InsertionOrderK: ColumnStore[i] = new ColumnDef(c, "InsertionOrderK", SqlDbType.Int, 0); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(Invoice.Columns.K);
						InitColumn(Invoice.Columns.Type);
						InitColumn(Invoice.Columns.UsrK);
						InitColumn(Invoice.Columns.PromoterK);
						InitColumn(Invoice.Columns.ActionUsrK);
						InitColumn(Invoice.Columns.Name);
						InitColumn(Invoice.Columns.Address);
						InitColumn(Invoice.Columns.Postcode);
						InitColumn(Invoice.Columns.PaymentType);
						InitColumn(Invoice.Columns.Paid);
						InitColumn(Invoice.Columns.CreatedDateTime);
						InitColumn(Invoice.Columns.DueDateTime);
						InitColumn(Invoice.Columns.PaidDateTime);
						InitColumn(Invoice.Columns.Price);
						InitColumn(Invoice.Columns.Vat);
						InitColumn(Invoice.Columns.Total);
						InitColumn(Invoice.Columns.DuplicateGuid);
						InitColumn(Invoice.Columns.Notes);
						InitColumn(Invoice.Columns.VatCode);
						InitColumn(Invoice.Columns.SalesUsrK);
						InitColumn(Invoice.Columns.SalesUsrAmount);
						InitColumn(Invoice.Columns.IsImmediateCreditCardPayment);
						InitColumn(Invoice.Columns.TaxDateTime);
						InitColumn(Invoice.Columns.PurchaseOrderNumber);
						InitColumn(Invoice.Columns.BuyerType);
						InitColumn(Invoice.Columns.PriceBeforeDiscount);
						InitColumn(Invoice.Columns.Discount);
						InitColumn(Invoice.Columns.PriceBeforeAgencyDiscount);
						InitColumn(Invoice.Columns.AgencyDiscount);
						InitColumn(Invoice.Columns.InsertionOrderK);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region InvoiceCredit
	/// <summary>
	/// Invoice to Credit relational table
	/// </summary>
	public partial class InvoiceCredit : Model.Entities.InvoiceCredit, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// Link to the Invoice table
			/// </summary>
			InvoiceK = 0x002e0001,
			/// <summary>
			/// Link to the Invoice table, referring to a credit
			/// </summary>
			CreditInvoiceK = 0x002e0002,
			/// <summary>
			/// +ve for DSI receiving money, -ve for DSI paying out money
			/// </summary>
			Amount = 0x002e0003,
		}
		#endregion
		public static string GetColumnName(InvoiceCredit.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case InvoiceCredit.Columns.InvoiceK: return "InvoiceK";
						case InvoiceCredit.Columns.CreditInvoiceK: return "CreditInvoiceK";
						case InvoiceCredit.Columns.Amount: return "Amount";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(InvoiceCredit.Columns columnEnum)
		{
			switch (columnEnum)
			{
							default: return false;
			}
		}


		#region Common
	 
		public InvoiceCredit(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);}
		public InvoiceCredit()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.InvoiceCredit);
		}
		public InvoiceCredit(BobSet bs)
		{
			this.Bob = new Bob(Bobs.Tables.Defs.InvoiceCredit, bs);
		}
		public InvoiceCredit(IBob Parent, object Column) : this()
		{
			this.Bob.GetBobFromParentSimple(Parent, Column, TablesEnum.InvoiceCredit);
		}
		public InvoiceCredit(int InvoiceK, int CreditInvoiceK) : this()
		{
			this.Bob.GetBobFromPrimaryKeyArray(new Q[] {new Q(InvoiceCredit.Columns.InvoiceK,InvoiceK), new Q(InvoiceCredit.Columns.CreditInvoiceK,CreditInvoiceK)});
		} 
		#endregion

	}
	#endregion
	#region InvoiceCreditTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region InvoiceCredit
	/// <summary>
	/// Invoice to Credit relational table
	/// </summary>
	[Serializable]
	public partial class InvoiceCredit 
	{
		
		#region Simple members
		/// <summary>
		/// Link to the Invoice table
		/// </summary>
		public override int InvoiceK
		{
			get { return (int)this[InvoiceCredit.Columns.InvoiceK]; }
			set { this[InvoiceCredit.Columns.InvoiceK] = value; }
		}
		/// <summary>
		/// Link to the Invoice table, referring to a credit
		/// </summary>
		public override int CreditInvoiceK
		{
			get { return (int)this[InvoiceCredit.Columns.CreditInvoiceK]; }
			set { this[InvoiceCredit.Columns.CreditInvoiceK] = value; }
		}
		/// <summary>
		/// +ve for DSI receiving money, -ve for DSI paying out money
		/// </summary>
		public override decimal Amount
		{
			get { return (decimal)this[InvoiceCredit.Columns.Amount]; }
			set { this[InvoiceCredit.Columns.Amount] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildInvoiceCredits
	{
		CachedSqlSelect<InvoiceCredit> ChildInvoiceCredits();
		CachedSqlSelect<InvoiceCredit> ChildInvoiceCredits(Q where);
		CachedSqlSelect<InvoiceCredit> ChildInvoiceCredits(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<InvoiceCredit> ChildInvoiceCredits(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class InvoiceCredit 
		{
		}

	#region InvoiceCreditDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region InvoiceCreditDataHolder
	/// <summary>
	/// Invoice to Credit relational tableDataHolder
	/// </summary>
	[Serializable]
	public partial class InvoiceCreditDataHolder : DataHolder<InvoiceCredit>
	{
		InvoiceCredit dataHolder;
		[NonSerializedAttribute] InvoiceCredit bob;

		public InvoiceCreditDataHolder()
		{
			this.dataHolder = new InvoiceCredit();
		}
		
		void CopyValues(InvoiceCredit source, InvoiceCredit destination)
		{
			destination[Bobs.InvoiceCredit.Columns.InvoiceK] = source[Bobs.InvoiceCredit.Columns.InvoiceK];
			destination[Bobs.InvoiceCredit.Columns.CreditInvoiceK] = source[Bobs.InvoiceCredit.Columns.CreditInvoiceK];
			destination[Bobs.InvoiceCredit.Columns.Amount] = source[Bobs.InvoiceCredit.Columns.Amount];
		}
		
		public InvoiceCreditDataHolder(InvoiceCredit bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// Link to the Invoice table
		/// </summary>
		public int InvoiceK
		{
			get { return dataHolder.InvoiceK; }
			set { this.dataHolder.InvoiceK = value; }
		}
		/// <summary>
		/// Link to the Invoice table, referring to a credit
		/// </summary>
		public int CreditInvoiceK
		{
			get { return dataHolder.CreditInvoiceK; }
			set { this.dataHolder.CreditInvoiceK = value; }
		}
		/// <summary>
		/// +ve for DSI receiving money, -ve for DSI paying out money
		/// </summary>
		public decimal Amount
		{
			get { return dataHolder.Amount; }
			set { this.dataHolder.Amount = value; }
		}
		#endregion
		public InvoiceCredit InvoiceCredit
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new InvoiceCredit(K);
					}
					else
					{
						bob = new InvoiceCredit();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region InvoiceCreditSet
	public partial class InvoiceCreditSet : BobSet, IEnumerable<InvoiceCredit>
	{
		public InvoiceCreditSet(Query query) : base(query) { }

		public InvoiceCredit this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new InvoiceCredit(this);
					((InvoiceCredit)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (InvoiceCredit)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new InvoiceCreditTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<InvoiceCredit> ToList()
		{
			List<InvoiceCredit> list = new List<InvoiceCredit>();
			foreach (InvoiceCredit item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<InvoiceCredit> Members

		public new IEnumerator<InvoiceCredit> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region InvoiceCreditTableDef
	public class InvoiceCreditTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "InvoiceCredit";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "7CCFF60C";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return InvoiceCredit.GetColumnName((InvoiceCredit.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.InvoiceCredit;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return false;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return null;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			InvoiceCredit.Columns c = (InvoiceCredit.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case InvoiceCredit.Columns.InvoiceK: ColumnStore[i] = new ColumnDef(c, "InvoiceK", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey, 0); break;
					case InvoiceCredit.Columns.CreditInvoiceK: ColumnStore[i] = new ColumnDef(c, "CreditInvoiceK", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey, 0); break;
					case InvoiceCredit.Columns.Amount: ColumnStore[i] = new ColumnDef(c, "Amount", SqlDbType.Decimal, 20, 0m); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(InvoiceCredit.Columns.InvoiceK);
						InitColumn(InvoiceCredit.Columns.CreditInvoiceK);
						InitColumn(InvoiceCredit.Columns.Amount);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region InvoiceItem
	/// <summary>
	/// Invoice / credit note line
	/// </summary>
	public partial class InvoiceItem : Model.Entities.InvoiceItem, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// The primary key
			/// </summary>
			K = 0x002f0001,
			/// <summary>
			/// The invoice
			/// </summary>
			InvoiceK = 0x002f0002,
			/// <summary>
			/// The type of the invoiceitem (Misc=0, Banner=1, etc.)
			/// </summary>
			Type = 0x002f0003,
			/// <summary>
			/// Key of the item (e.g. BannerK)
			/// </summary>
			KeyData = 0x002f0004,
			/// <summary>
			/// Additional data needed to enable the item on the site
			/// </summary>
			CustomData = 0x002f0005,
			/// <summary>
			/// Has the code been processed?
			/// </summary>
			ItemProcessed = 0x002f0006,
			/// <summary>
			/// Description of the item (for when there isn't a code)
			/// </summary>
			Description = 0x002f0007,
			/// <summary>
			/// Price excluding VAT (+ve for invoices, -ve for credits)
			/// </summary>
			Price = 0x002f0008,
			/// <summary>
			/// Vat (+ve for invoices, -ve for credits)
			/// </summary>
			Vat = 0x002f0009,
			/// <summary>
			/// Price including VAT (+ve for invoices, -ve for credits)
			/// </summary>
			Total = 0x002f000a,
			/// <summary>
			/// The revenue start date of the invoice item
			/// </summary>
			RevenueStartDate = 0x002f000b,
			/// <summary>
			/// The revenue end date of the invoice item
			/// </summary>
			RevenueEndDate = 0x002f000c,
			/// <summary>
			/// T0, T1, T9
			/// </summary>
			VatCode = 0x002f000d,
			/// <summary>
			/// The IBuyable Bob type of that the invoiceitem points to (Banner=1, etc.)
			/// </summary>
			BuyableObjectType = 0x002f000e,
			/// <summary>
			/// The IBuyable ObjectType reference Key
			/// </summary>
			BuyableObjectK = 0x002f000f,
			/// <summary>
			/// Price before applying discount
			/// </summary>
			PriceBeforeDiscount = 0x002f0010,
			/// <summary>
			/// Discount to apply to this item, between 0.0 and 1.0
			/// </summary>
			Discount = 0x002f0011,
			/// <summary>
			/// Price before agency discount but after item discount has been applied
			/// </summary>
			PriceBeforeAgencyDiscount = 0x002f0012,
			/// <summary>
			/// AgencyDiscount - percentage - stored between 0 and 1
			/// </summary>
			AgencyDiscount = 0x002f0013,
		}
		#endregion
		public static string GetColumnName(InvoiceItem.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case InvoiceItem.Columns.K: return "K";
						case InvoiceItem.Columns.InvoiceK: return "InvoiceK";
						case InvoiceItem.Columns.Type: return "Type";
						case InvoiceItem.Columns.KeyData: return "KeyData";
						case InvoiceItem.Columns.CustomData: return "CustomData";
						case InvoiceItem.Columns.ItemProcessed: return "ItemProcessed";
						case InvoiceItem.Columns.Description: return "Description";
						case InvoiceItem.Columns.Price: return "Price";
						case InvoiceItem.Columns.Vat: return "Vat";
						case InvoiceItem.Columns.Total: return "Total";
						case InvoiceItem.Columns.RevenueStartDate: return "RevenueStartDate";
						case InvoiceItem.Columns.RevenueEndDate: return "RevenueEndDate";
						case InvoiceItem.Columns.VatCode: return "VatCode";
						case InvoiceItem.Columns.BuyableObjectType: return "BuyableObjectType";
						case InvoiceItem.Columns.BuyableObjectK: return "BuyableObjectK";
						case InvoiceItem.Columns.PriceBeforeDiscount: return "PriceBeforeDiscount";
						case InvoiceItem.Columns.Discount: return "Discount";
						case InvoiceItem.Columns.PriceBeforeAgencyDiscount: return "PriceBeforeAgencyDiscount";
						case InvoiceItem.Columns.AgencyDiscount: return "AgencyDiscount";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(InvoiceItem.Columns columnEnum)
		{
			switch (columnEnum)
			{
																							default: return false;
			}
		}


		#region Common
 
		public InvoiceItem(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);  }
		public InvoiceItem()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.InvoiceItem);
		}
		public InvoiceItem(BobSet bs)
		{
			this.Bob = new Bob(bs.Table, bs);
		}
		public InvoiceItem(int InvoiceItemK, IBob Parent, object Column)
			: this()
		{
			Bob.GetBobFromParent(InvoiceItemK, Parent.Bob, Column, TablesEnum.InvoiceItem);
		}
		public InvoiceItem(int InvoiceItemK)
			: this()
		{
			Bob.GetBobFromPrimaryKey(InvoiceItemK);
		}
		#endregion

	}
	#endregion
	#region InvoiceItemTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region InvoiceItem
	/// <summary>
	/// Invoice / credit note line
	/// </summary>
	[Serializable]
	public partial class InvoiceItem 
	{
		
		#region Simple members
		/// <summary>
		/// The primary key
		/// </summary>
		public override int K
		{
			get { return (int)this[InvoiceItem.Columns.K] as int? ?? 0 ; }
			set { this[InvoiceItem.Columns.K] = value; }
		}
		/// <summary>
		/// The invoice
		/// </summary>
		public override int InvoiceK
		{
			get { return (int)this[InvoiceItem.Columns.InvoiceK]; }
			set { this[InvoiceItem.Columns.InvoiceK] = value; }
		}
		/// <summary>
		/// The type of the invoiceitem (Misc=0, Banner=1, etc.)
		/// </summary>
		public override int Type
		{
			get { return (int)this[InvoiceItem.Columns.Type]; }
			set { this[InvoiceItem.Columns.Type] = value; }
		}
		/// <summary>
		/// Key of the item (e.g. BannerK)
		/// </summary>
		public override int KeyData
		{
			get { return (int)this[InvoiceItem.Columns.KeyData]; }
			set { this[InvoiceItem.Columns.KeyData] = value; }
		}
		/// <summary>
		/// Additional data needed to enable the item on the site
		/// </summary>
		public override string CustomData
		{
			get { return (string)this[InvoiceItem.Columns.CustomData]; }
			set { this[InvoiceItem.Columns.CustomData] = value; }
		}
		/// <summary>
		/// Has the code been processed?
		/// </summary>
		public override bool ItemProcessed
		{
			get { return (bool)this[InvoiceItem.Columns.ItemProcessed]; }
			set { this[InvoiceItem.Columns.ItemProcessed] = value; }
		}
		/// <summary>
		/// Description of the item (for when there isn't a code)
		/// </summary>
		public override string Description
		{
			get { return (string)this[InvoiceItem.Columns.Description]; }
			set { this[InvoiceItem.Columns.Description] = value; }
		}
		/// <summary>
		/// Price excluding VAT (+ve for invoices, -ve for credits)
		/// </summary>
		public override decimal Price
		{
			get { return (decimal)this[InvoiceItem.Columns.Price]; }
			set { this[InvoiceItem.Columns.Price] = value; }
		}
		/// <summary>
		/// Vat (+ve for invoices, -ve for credits)
		/// </summary>
		public override decimal Vat
		{
			get { return (decimal)this[InvoiceItem.Columns.Vat]; }
			set { this[InvoiceItem.Columns.Vat] = value; }
		}
		/// <summary>
		/// Price including VAT (+ve for invoices, -ve for credits)
		/// </summary>
		public override decimal Total
		{
			get { return (decimal)this[InvoiceItem.Columns.Total]; }
			set { this[InvoiceItem.Columns.Total] = value; }
		}
		/// <summary>
		/// The revenue start date of the invoice item
		/// </summary>
		public override DateTime RevenueStartDate
		{
			get { return (DateTime)this[InvoiceItem.Columns.RevenueStartDate]; }
			set { this[InvoiceItem.Columns.RevenueStartDate] = value; }
		}
		/// <summary>
		/// The revenue end date of the invoice item
		/// </summary>
		public override DateTime RevenueEndDate
		{
			get { return (DateTime)this[InvoiceItem.Columns.RevenueEndDate]; }
			set { this[InvoiceItem.Columns.RevenueEndDate] = value; }
		}
		/// <summary>
		/// T0, T1, T9
		/// </summary>
		public override int VatCode
		{
			get { return (int)this[InvoiceItem.Columns.VatCode]; }
			set { this[InvoiceItem.Columns.VatCode] = value; }
		}
		/// <summary>
		/// The IBuyable Bob type of that the invoiceitem points to (Banner=1, etc.)
		/// </summary>
		public override int BuyableObjectType
		{
			get { return (int)this[InvoiceItem.Columns.BuyableObjectType]; }
			set { this[InvoiceItem.Columns.BuyableObjectType] = value; }
		}
		/// <summary>
		/// The IBuyable ObjectType reference Key
		/// </summary>
		public override int BuyableObjectK
		{
			get { return (int)this[InvoiceItem.Columns.BuyableObjectK]; }
			set { this[InvoiceItem.Columns.BuyableObjectK] = value; }
		}
		/// <summary>
		/// Price before applying discount
		/// </summary>
		public override decimal PriceBeforeDiscount
		{
			get { return (decimal)this[InvoiceItem.Columns.PriceBeforeDiscount]; }
			set { this[InvoiceItem.Columns.PriceBeforeDiscount] = value; }
		}
		/// <summary>
		/// Discount to apply to this item, between 0.0 and 1.0
		/// </summary>
		public override double Discount
		{
			get { return (double)this[InvoiceItem.Columns.Discount]; }
			set { this[InvoiceItem.Columns.Discount] = value; }
		}
		/// <summary>
		/// Price before agency discount but after item discount has been applied
		/// </summary>
		public override decimal PriceBeforeAgencyDiscount
		{
			get { return (decimal)this[InvoiceItem.Columns.PriceBeforeAgencyDiscount]; }
			set { this[InvoiceItem.Columns.PriceBeforeAgencyDiscount] = value; }
		}
		/// <summary>
		/// AgencyDiscount - percentage - stored between 0 and 1
		/// </summary>
		public override double AgencyDiscount
		{
			get { return (double)this[InvoiceItem.Columns.AgencyDiscount]; }
			set { this[InvoiceItem.Columns.AgencyDiscount] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildInvoiceItems
	{
		CachedSqlSelect<InvoiceItem> ChildInvoiceItems();
		CachedSqlSelect<InvoiceItem> ChildInvoiceItems(Q where);
		CachedSqlSelect<InvoiceItem> ChildInvoiceItems(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<InvoiceItem> ChildInvoiceItems(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class InvoiceItem 
	 : 
	Bobs.ChildInterfaces.IHasChildTickets
		{
			public CachedSqlSelect<Ticket> ChildTickets()
		{
			return this.ChildTickets(null, null);
		}
		public CachedSqlSelect<Ticket> ChildTickets(Q where)
		{
			return this.ChildTickets(where, null);
		}
		public CachedSqlSelect<Ticket> ChildTickets(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildTickets(null, orderBy);
		}
		public CachedSqlSelect<Ticket> ChildTickets(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<Ticket>
			(
				new Children<Ticket>
				(
					TablesEnum.InvoiceItem, 
					this.K, 
					TablesEnum.Ticket, 
					dr => 
					{ 
						Ticket newTicket = new Ticket(); 
						newTicket.Initialise(dr); 
						return newTicket;
					},
					"117368D6",
					where,
					orderBy
				)
			);
		}
		}

	#region InvoiceItemDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region InvoiceItemDataHolder
	/// <summary>
	/// Invoice / credit note lineDataHolder
	/// </summary>
	[Serializable]
	public partial class InvoiceItemDataHolder : DataHolder<InvoiceItem>
	{
		InvoiceItem dataHolder;
		[NonSerializedAttribute] InvoiceItem bob;

		public InvoiceItemDataHolder()
		{
			this.dataHolder = new InvoiceItem();
		}
		
		void CopyValues(InvoiceItem source, InvoiceItem destination)
		{
			destination[Bobs.InvoiceItem.Columns.K] = source[Bobs.InvoiceItem.Columns.K];
			destination[Bobs.InvoiceItem.Columns.InvoiceK] = source[Bobs.InvoiceItem.Columns.InvoiceK];
			destination[Bobs.InvoiceItem.Columns.Type] = source[Bobs.InvoiceItem.Columns.Type];
			destination[Bobs.InvoiceItem.Columns.KeyData] = source[Bobs.InvoiceItem.Columns.KeyData];
			destination[Bobs.InvoiceItem.Columns.CustomData] = source[Bobs.InvoiceItem.Columns.CustomData];
			destination[Bobs.InvoiceItem.Columns.ItemProcessed] = source[Bobs.InvoiceItem.Columns.ItemProcessed];
			destination[Bobs.InvoiceItem.Columns.Description] = source[Bobs.InvoiceItem.Columns.Description];
			destination[Bobs.InvoiceItem.Columns.Price] = source[Bobs.InvoiceItem.Columns.Price];
			destination[Bobs.InvoiceItem.Columns.Vat] = source[Bobs.InvoiceItem.Columns.Vat];
			destination[Bobs.InvoiceItem.Columns.Total] = source[Bobs.InvoiceItem.Columns.Total];
			destination[Bobs.InvoiceItem.Columns.RevenueStartDate] = source[Bobs.InvoiceItem.Columns.RevenueStartDate];
			destination[Bobs.InvoiceItem.Columns.RevenueEndDate] = source[Bobs.InvoiceItem.Columns.RevenueEndDate];
			destination[Bobs.InvoiceItem.Columns.VatCode] = source[Bobs.InvoiceItem.Columns.VatCode];
			destination[Bobs.InvoiceItem.Columns.BuyableObjectType] = source[Bobs.InvoiceItem.Columns.BuyableObjectType];
			destination[Bobs.InvoiceItem.Columns.BuyableObjectK] = source[Bobs.InvoiceItem.Columns.BuyableObjectK];
			destination[Bobs.InvoiceItem.Columns.PriceBeforeDiscount] = source[Bobs.InvoiceItem.Columns.PriceBeforeDiscount];
			destination[Bobs.InvoiceItem.Columns.Discount] = source[Bobs.InvoiceItem.Columns.Discount];
			destination[Bobs.InvoiceItem.Columns.PriceBeforeAgencyDiscount] = source[Bobs.InvoiceItem.Columns.PriceBeforeAgencyDiscount];
			destination[Bobs.InvoiceItem.Columns.AgencyDiscount] = source[Bobs.InvoiceItem.Columns.AgencyDiscount];
		}
		
		public InvoiceItemDataHolder(InvoiceItem bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// The primary key
		/// </summary>
		public int K
		{
			get { return dataHolder.K; }
			set { this.dataHolder.K = value; }
		}
		/// <summary>
		/// The invoice
		/// </summary>
		public int InvoiceK
		{
			get { return dataHolder.InvoiceK; }
			set { this.dataHolder.InvoiceK = value; }
		}
		/// <summary>
		/// The type of the invoiceitem (Misc=0, Banner=1, etc.)
		/// </summary>
		public int Type
		{
			get { return dataHolder.Type; }
			set { this.dataHolder.Type = value; }
		}
		/// <summary>
		/// Key of the item (e.g. BannerK)
		/// </summary>
		public int KeyData
		{
			get { return dataHolder.KeyData; }
			set { this.dataHolder.KeyData = value; }
		}
		/// <summary>
		/// Additional data needed to enable the item on the site
		/// </summary>
		public string CustomData
		{
			get { return dataHolder.CustomData; }
			set { this.dataHolder.CustomData = value; }
		}
		/// <summary>
		/// Has the code been processed?
		/// </summary>
		public bool ItemProcessed
		{
			get { return dataHolder.ItemProcessed; }
			set { this.dataHolder.ItemProcessed = value; }
		}
		/// <summary>
		/// Description of the item (for when there isn't a code)
		/// </summary>
		public string Description
		{
			get { return dataHolder.Description; }
			set { this.dataHolder.Description = value; }
		}
		/// <summary>
		/// Price excluding VAT (+ve for invoices, -ve for credits)
		/// </summary>
		public decimal Price
		{
			get { return dataHolder.Price; }
			set { this.dataHolder.Price = value; }
		}
		/// <summary>
		/// Vat (+ve for invoices, -ve for credits)
		/// </summary>
		public decimal Vat
		{
			get { return dataHolder.Vat; }
			set { this.dataHolder.Vat = value; }
		}
		/// <summary>
		/// Price including VAT (+ve for invoices, -ve for credits)
		/// </summary>
		public decimal Total
		{
			get { return dataHolder.Total; }
			set { this.dataHolder.Total = value; }
		}
		/// <summary>
		/// The revenue start date of the invoice item
		/// </summary>
		public DateTime RevenueStartDate
		{
			get { return dataHolder.RevenueStartDate; }
			set { this.dataHolder.RevenueStartDate = value; }
		}
		/// <summary>
		/// The revenue end date of the invoice item
		/// </summary>
		public DateTime RevenueEndDate
		{
			get { return dataHolder.RevenueEndDate; }
			set { this.dataHolder.RevenueEndDate = value; }
		}
		/// <summary>
		/// T0, T1, T9
		/// </summary>
		public int VatCode
		{
			get { return dataHolder.VatCode; }
			set { this.dataHolder.VatCode = value; }
		}
		/// <summary>
		/// The IBuyable Bob type of that the invoiceitem points to (Banner=1, etc.)
		/// </summary>
		public int BuyableObjectType
		{
			get { return dataHolder.BuyableObjectType; }
			set { this.dataHolder.BuyableObjectType = value; }
		}
		/// <summary>
		/// The IBuyable ObjectType reference Key
		/// </summary>
		public int BuyableObjectK
		{
			get { return dataHolder.BuyableObjectK; }
			set { this.dataHolder.BuyableObjectK = value; }
		}
		/// <summary>
		/// Price before applying discount
		/// </summary>
		public decimal PriceBeforeDiscount
		{
			get { return dataHolder.PriceBeforeDiscount; }
			set { this.dataHolder.PriceBeforeDiscount = value; }
		}
		/// <summary>
		/// Discount to apply to this item, between 0.0 and 1.0
		/// </summary>
		public double Discount
		{
			get { return dataHolder.Discount; }
			set { this.dataHolder.Discount = value; }
		}
		/// <summary>
		/// Price before agency discount but after item discount has been applied
		/// </summary>
		public decimal PriceBeforeAgencyDiscount
		{
			get { return dataHolder.PriceBeforeAgencyDiscount; }
			set { this.dataHolder.PriceBeforeAgencyDiscount = value; }
		}
		/// <summary>
		/// AgencyDiscount - percentage - stored between 0 and 1
		/// </summary>
		public double AgencyDiscount
		{
			get { return dataHolder.AgencyDiscount; }
			set { this.dataHolder.AgencyDiscount = value; }
		}
		#endregion
		public InvoiceItem InvoiceItem
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new InvoiceItem(K);
					}
					else
					{
						bob = new InvoiceItem();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region InvoiceItemSet
	public partial class InvoiceItemSet : BobSet, IEnumerable<InvoiceItem>
	{
		public InvoiceItemSet(Query query) : base(query) { }

		public InvoiceItem this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new InvoiceItem(this);
					((InvoiceItem)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (InvoiceItem)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new InvoiceItemTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<InvoiceItem> ToList()
		{
			List<InvoiceItem> list = new List<InvoiceItem>();
			foreach (InvoiceItem item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<InvoiceItem> Members

		public new IEnumerator<InvoiceItem> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region InvoiceItemTableDef
	public class InvoiceItemTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "InvoiceItem";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "4632788C";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return InvoiceItem.GetColumnName((InvoiceItem.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.InvoiceItem;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return true;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return InvoiceItem.Columns.K;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			InvoiceItem.Columns c = (InvoiceItem.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case InvoiceItem.Columns.K: ColumnStore[i] = new ColumnDef(c, "K", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey | SqlColumnFlag.AutoNumber, null); break;
					case InvoiceItem.Columns.InvoiceK: ColumnStore[i] = new ColumnDef(c, "InvoiceK", SqlDbType.Int, 0); break;
					case InvoiceItem.Columns.Type: ColumnStore[i] = new ColumnDef(c, "Type", SqlDbType.Int, 0); break;
					case InvoiceItem.Columns.KeyData: ColumnStore[i] = new ColumnDef(c, "KeyData", SqlDbType.Int, 0); break;
					case InvoiceItem.Columns.CustomData: ColumnStore[i] = new ColumnDef(c, "CustomData", SqlDbType.VarChar, 255, ""); break;
					case InvoiceItem.Columns.ItemProcessed: ColumnStore[i] = new ColumnDef(c, "ItemProcessed", SqlDbType.Bit, false); break;
					case InvoiceItem.Columns.Description: ColumnStore[i] = new ColumnDef(c, "Description", SqlDbType.VarChar, 255, ""); break;
					case InvoiceItem.Columns.Price: ColumnStore[i] = new ColumnDef(c, "Price", SqlDbType.Decimal, 20, 0m); break;
					case InvoiceItem.Columns.Vat: ColumnStore[i] = new ColumnDef(c, "Vat", SqlDbType.Decimal, 20, 0m); break;
					case InvoiceItem.Columns.Total: ColumnStore[i] = new ColumnDef(c, "Total", SqlDbType.Decimal, 20, 0m); break;
					case InvoiceItem.Columns.RevenueStartDate: ColumnStore[i] = new ColumnDef(c, "RevenueStartDate", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case InvoiceItem.Columns.RevenueEndDate: ColumnStore[i] = new ColumnDef(c, "RevenueEndDate", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case InvoiceItem.Columns.VatCode: ColumnStore[i] = new ColumnDef(c, "VatCode", SqlDbType.Int, 0); break;
					case InvoiceItem.Columns.BuyableObjectType: ColumnStore[i] = new ColumnDef(c, "BuyableObjectType", SqlDbType.Int, 0); break;
					case InvoiceItem.Columns.BuyableObjectK: ColumnStore[i] = new ColumnDef(c, "BuyableObjectK", SqlDbType.Int, 0); break;
					case InvoiceItem.Columns.PriceBeforeDiscount: ColumnStore[i] = new ColumnDef(c, "PriceBeforeDiscount", SqlDbType.Decimal, 20, 0m); break;
					case InvoiceItem.Columns.Discount: ColumnStore[i] = new ColumnDef(c, "Discount", SqlDbType.Float, 0.0); break;
					case InvoiceItem.Columns.PriceBeforeAgencyDiscount: ColumnStore[i] = new ColumnDef(c, "PriceBeforeAgencyDiscount", SqlDbType.Decimal, 20, 0m); break;
					case InvoiceItem.Columns.AgencyDiscount: ColumnStore[i] = new ColumnDef(c, "AgencyDiscount", SqlDbType.Float, 0.0); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(InvoiceItem.Columns.K);
						InitColumn(InvoiceItem.Columns.InvoiceK);
						InitColumn(InvoiceItem.Columns.Type);
						InitColumn(InvoiceItem.Columns.KeyData);
						InitColumn(InvoiceItem.Columns.CustomData);
						InitColumn(InvoiceItem.Columns.ItemProcessed);
						InitColumn(InvoiceItem.Columns.Description);
						InitColumn(InvoiceItem.Columns.Price);
						InitColumn(InvoiceItem.Columns.Vat);
						InitColumn(InvoiceItem.Columns.Total);
						InitColumn(InvoiceItem.Columns.RevenueStartDate);
						InitColumn(InvoiceItem.Columns.RevenueEndDate);
						InitColumn(InvoiceItem.Columns.VatCode);
						InitColumn(InvoiceItem.Columns.BuyableObjectType);
						InitColumn(InvoiceItem.Columns.BuyableObjectK);
						InitColumn(InvoiceItem.Columns.PriceBeforeDiscount);
						InitColumn(InvoiceItem.Columns.Discount);
						InitColumn(InvoiceItem.Columns.PriceBeforeAgencyDiscount);
						InitColumn(InvoiceItem.Columns.AgencyDiscount);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region InvoiceTransfer
	/// <summary>
	/// Invoice to Transfer relational table
	/// </summary>
	public partial class InvoiceTransfer : Model.Entities.InvoiceTransfer, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// Link to the Invoice table
			/// </summary>
			InvoiceK = 0x00300001,
			/// <summary>
			/// Link to the Transfer table
			/// </summary>
			TransferK = 0x00300002,
			/// <summary>
			/// +ve for DSI receiving money, -ve for DSI paying out money
			/// </summary>
			Amount = 0x00300003,
		}
		#endregion
		public static string GetColumnName(InvoiceTransfer.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case InvoiceTransfer.Columns.InvoiceK: return "InvoiceK";
						case InvoiceTransfer.Columns.TransferK: return "TransferK";
						case InvoiceTransfer.Columns.Amount: return "Amount";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(InvoiceTransfer.Columns columnEnum)
		{
			switch (columnEnum)
			{
							default: return false;
			}
		}


		#region Common
	 
		public InvoiceTransfer(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);}
		public InvoiceTransfer()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.InvoiceTransfer);
		}
		public InvoiceTransfer(BobSet bs)
		{
			this.Bob = new Bob(Bobs.Tables.Defs.InvoiceTransfer, bs);
		}
		public InvoiceTransfer(IBob Parent, object Column) : this()
		{
			this.Bob.GetBobFromParentSimple(Parent, Column, TablesEnum.InvoiceTransfer);
		}
		public InvoiceTransfer(int InvoiceK, int TransferK) : this()
		{
			this.Bob.GetBobFromPrimaryKeyArray(new Q[] {new Q(InvoiceTransfer.Columns.InvoiceK,InvoiceK), new Q(InvoiceTransfer.Columns.TransferK,TransferK)});
		} 
		#endregion

	}
	#endregion
	#region InvoiceTransferTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region InvoiceTransfer
	/// <summary>
	/// Invoice to Transfer relational table
	/// </summary>
	[Serializable]
	public partial class InvoiceTransfer 
	{
		
		#region Simple members
		/// <summary>
		/// Link to the Invoice table
		/// </summary>
		public override int InvoiceK
		{
			get { return (int)this[InvoiceTransfer.Columns.InvoiceK]; }
			set { this[InvoiceTransfer.Columns.InvoiceK] = value; }
		}
		/// <summary>
		/// Link to the Transfer table
		/// </summary>
		public override int TransferK
		{
			get { return (int)this[InvoiceTransfer.Columns.TransferK]; }
			set { this[InvoiceTransfer.Columns.TransferK] = value; }
		}
		/// <summary>
		/// +ve for DSI receiving money, -ve for DSI paying out money
		/// </summary>
		public override decimal Amount
		{
			get { return (decimal)this[InvoiceTransfer.Columns.Amount]; }
			set { this[InvoiceTransfer.Columns.Amount] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildInvoiceTransfers
	{
		CachedSqlSelect<InvoiceTransfer> ChildInvoiceTransfers();
		CachedSqlSelect<InvoiceTransfer> ChildInvoiceTransfers(Q where);
		CachedSqlSelect<InvoiceTransfer> ChildInvoiceTransfers(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<InvoiceTransfer> ChildInvoiceTransfers(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class InvoiceTransfer 
		{
		}

	#region InvoiceTransferDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region InvoiceTransferDataHolder
	/// <summary>
	/// Invoice to Transfer relational tableDataHolder
	/// </summary>
	[Serializable]
	public partial class InvoiceTransferDataHolder : DataHolder<InvoiceTransfer>
	{
		InvoiceTransfer dataHolder;
		[NonSerializedAttribute] InvoiceTransfer bob;

		public InvoiceTransferDataHolder()
		{
			this.dataHolder = new InvoiceTransfer();
		}
		
		void CopyValues(InvoiceTransfer source, InvoiceTransfer destination)
		{
			destination[Bobs.InvoiceTransfer.Columns.InvoiceK] = source[Bobs.InvoiceTransfer.Columns.InvoiceK];
			destination[Bobs.InvoiceTransfer.Columns.TransferK] = source[Bobs.InvoiceTransfer.Columns.TransferK];
			destination[Bobs.InvoiceTransfer.Columns.Amount] = source[Bobs.InvoiceTransfer.Columns.Amount];
		}
		
		public InvoiceTransferDataHolder(InvoiceTransfer bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// Link to the Invoice table
		/// </summary>
		public int InvoiceK
		{
			get { return dataHolder.InvoiceK; }
			set { this.dataHolder.InvoiceK = value; }
		}
		/// <summary>
		/// Link to the Transfer table
		/// </summary>
		public int TransferK
		{
			get { return dataHolder.TransferK; }
			set { this.dataHolder.TransferK = value; }
		}
		/// <summary>
		/// +ve for DSI receiving money, -ve for DSI paying out money
		/// </summary>
		public decimal Amount
		{
			get { return dataHolder.Amount; }
			set { this.dataHolder.Amount = value; }
		}
		#endregion
		public InvoiceTransfer InvoiceTransfer
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new InvoiceTransfer(K);
					}
					else
					{
						bob = new InvoiceTransfer();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region InvoiceTransferSet
	public partial class InvoiceTransferSet : BobSet, IEnumerable<InvoiceTransfer>
	{
		public InvoiceTransferSet(Query query) : base(query) { }

		public InvoiceTransfer this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new InvoiceTransfer(this);
					((InvoiceTransfer)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (InvoiceTransfer)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new InvoiceTransferTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<InvoiceTransfer> ToList()
		{
			List<InvoiceTransfer> list = new List<InvoiceTransfer>();
			foreach (InvoiceTransfer item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<InvoiceTransfer> Members

		public new IEnumerator<InvoiceTransfer> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region InvoiceTransferTableDef
	public class InvoiceTransferTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "InvoiceTransfer";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "D75AE2A5";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return InvoiceTransfer.GetColumnName((InvoiceTransfer.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.InvoiceTransfer;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return false;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return null;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			InvoiceTransfer.Columns c = (InvoiceTransfer.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case InvoiceTransfer.Columns.InvoiceK: ColumnStore[i] = new ColumnDef(c, "InvoiceK", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey, 0); break;
					case InvoiceTransfer.Columns.TransferK: ColumnStore[i] = new ColumnDef(c, "TransferK", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey, 0); break;
					case InvoiceTransfer.Columns.Amount: ColumnStore[i] = new ColumnDef(c, "Amount", SqlDbType.Decimal, 20, 0m); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(InvoiceTransfer.Columns.InvoiceK);
						InitColumn(InvoiceTransfer.Columns.TransferK);
						InitColumn(InvoiceTransfer.Columns.Amount);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region IpCountry
	/// <summary>
	/// links ip addresses to counrties
	/// </summary>
	public partial class IpCountry : Model.Entities.IpCountry, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// Ip from
			/// </summary>
			IpFrom = 0x00310001,
			/// <summary>
			/// Ip to
			/// </summary>
			IpTo = 0x00310002,
			/// <summary>
			/// Country code 2 letter
			/// </summary>
			Code2Letter = 0x00310003,
			/// <summary>
			/// Country code 3 letter
			/// </summary>
			Code3Letter = 0x00310004,
			/// <summary>
			/// Country name
			/// </summary>
			Name = 0x00310005,
			/// <summary>
			/// Link to the country database
			/// </summary>
			CountryK = 0x00310006,
		}
		#endregion
		public static string GetColumnName(IpCountry.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case IpCountry.Columns.IpFrom: return "IpFrom";
						case IpCountry.Columns.IpTo: return "IpTo";
						case IpCountry.Columns.Code2Letter: return "Code2Letter";
						case IpCountry.Columns.Code3Letter: return "Code3Letter";
						case IpCountry.Columns.Name: return "Name";
						case IpCountry.Columns.CountryK: return "CountryK";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(IpCountry.Columns columnEnum)
		{
			switch (columnEnum)
			{
										default: return false;
			}
		}


		#region Common
	 
		public IpCountry(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);}
		public IpCountry()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.IpCountry);
		}
		public IpCountry(BobSet bs)
		{
			this.Bob = new Bob(Bobs.Tables.Defs.IpCountry, bs);
		}
		public IpCountry(IBob Parent, object Column) : this()
		{
			this.Bob.GetBobFromParentSimple(Parent, Column, TablesEnum.IpCountry);
		}
		public IpCountry(long IpFrom, long IpTo) : this()
		{
			this.Bob.GetBobFromPrimaryKeyArray(new Q[] {new Q(IpCountry.Columns.IpFrom,IpFrom), new Q(IpCountry.Columns.IpTo,IpTo)});
		} 
		#endregion

	}
	#endregion
	#region IpCountryTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region IpCountry
	/// <summary>
	/// links ip addresses to counrties
	/// </summary>
	[Serializable]
	public partial class IpCountry 
	{
		
		#region Simple members
		/// <summary>
		/// Ip from
		/// </summary>
		public override long IpFrom
		{
			get { return (long)this[IpCountry.Columns.IpFrom]; }
			set { this[IpCountry.Columns.IpFrom] = value; }
		}
		/// <summary>
		/// Ip to
		/// </summary>
		public override long IpTo
		{
			get { return (long)this[IpCountry.Columns.IpTo]; }
			set { this[IpCountry.Columns.IpTo] = value; }
		}
		/// <summary>
		/// Country code 2 letter
		/// </summary>
		public override string Code2Letter
		{
			get { return (string)this[IpCountry.Columns.Code2Letter]; }
			set { this[IpCountry.Columns.Code2Letter] = value; }
		}
		/// <summary>
		/// Country code 3 letter
		/// </summary>
		public override string Code3Letter
		{
			get { return (string)this[IpCountry.Columns.Code3Letter]; }
			set { this[IpCountry.Columns.Code3Letter] = value; }
		}
		/// <summary>
		/// Country name
		/// </summary>
		public override string Name
		{
			get { return (string)this[IpCountry.Columns.Name]; }
			set { this[IpCountry.Columns.Name] = value; }
		}
		/// <summary>
		/// Link to the country database
		/// </summary>
		public override int CountryK
		{
			get { return (int)this[IpCountry.Columns.CountryK]; }
			set { this[IpCountry.Columns.CountryK] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildIpCountrys
	{
		CachedSqlSelect<IpCountry> ChildIpCountrys();
		CachedSqlSelect<IpCountry> ChildIpCountrys(Q where);
		CachedSqlSelect<IpCountry> ChildIpCountrys(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<IpCountry> ChildIpCountrys(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class IpCountry 
		{
		}

	#region IpCountryDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region IpCountryDataHolder
	/// <summary>
	/// links ip addresses to counrtiesDataHolder
	/// </summary>
	[Serializable]
	public partial class IpCountryDataHolder : DataHolder<IpCountry>
	{
		IpCountry dataHolder;
		[NonSerializedAttribute] IpCountry bob;

		public IpCountryDataHolder()
		{
			this.dataHolder = new IpCountry();
		}
		
		void CopyValues(IpCountry source, IpCountry destination)
		{
			destination[Bobs.IpCountry.Columns.IpFrom] = source[Bobs.IpCountry.Columns.IpFrom];
			destination[Bobs.IpCountry.Columns.IpTo] = source[Bobs.IpCountry.Columns.IpTo];
			destination[Bobs.IpCountry.Columns.Code2Letter] = source[Bobs.IpCountry.Columns.Code2Letter];
			destination[Bobs.IpCountry.Columns.Code3Letter] = source[Bobs.IpCountry.Columns.Code3Letter];
			destination[Bobs.IpCountry.Columns.Name] = source[Bobs.IpCountry.Columns.Name];
			destination[Bobs.IpCountry.Columns.CountryK] = source[Bobs.IpCountry.Columns.CountryK];
		}
		
		public IpCountryDataHolder(IpCountry bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// Ip from
		/// </summary>
		public long IpFrom
		{
			get { return dataHolder.IpFrom; }
			set { this.dataHolder.IpFrom = value; }
		}
		/// <summary>
		/// Ip to
		/// </summary>
		public long IpTo
		{
			get { return dataHolder.IpTo; }
			set { this.dataHolder.IpTo = value; }
		}
		/// <summary>
		/// Country code 2 letter
		/// </summary>
		public string Code2Letter
		{
			get { return dataHolder.Code2Letter; }
			set { this.dataHolder.Code2Letter = value; }
		}
		/// <summary>
		/// Country code 3 letter
		/// </summary>
		public string Code3Letter
		{
			get { return dataHolder.Code3Letter; }
			set { this.dataHolder.Code3Letter = value; }
		}
		/// <summary>
		/// Country name
		/// </summary>
		public string Name
		{
			get { return dataHolder.Name; }
			set { this.dataHolder.Name = value; }
		}
		/// <summary>
		/// Link to the country database
		/// </summary>
		public int CountryK
		{
			get { return dataHolder.CountryK; }
			set { this.dataHolder.CountryK = value; }
		}
		#endregion
		public IpCountry IpCountry
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new IpCountry(K);
					}
					else
					{
						bob = new IpCountry();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region IpCountrySet
	public partial class IpCountrySet : BobSet, IEnumerable<IpCountry>
	{
		public IpCountrySet(Query query) : base(query) { }

		public IpCountry this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new IpCountry(this);
					((IpCountry)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (IpCountry)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new IpCountryTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<IpCountry> ToList()
		{
			List<IpCountry> list = new List<IpCountry>();
			foreach (IpCountry item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<IpCountry> Members

		public new IEnumerator<IpCountry> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region IpCountryTableDef
	public class IpCountryTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "IpCountry";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "C2F26276";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return IpCountry.GetColumnName((IpCountry.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.IpCountry;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return false;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return null;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			IpCountry.Columns c = (IpCountry.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case IpCountry.Columns.IpFrom: ColumnStore[i] = new ColumnDef(c, "IpFrom", SqlDbType.BigInt, 8, SqlColumnFlag.PrimaryKey, 0L); break;
					case IpCountry.Columns.IpTo: ColumnStore[i] = new ColumnDef(c, "IpTo", SqlDbType.BigInt, 8, SqlColumnFlag.PrimaryKey, 0L); break;
					case IpCountry.Columns.Code2Letter: ColumnStore[i] = new ColumnDef(c, "Code2Letter", SqlDbType.VarChar, 2, ""); break;
					case IpCountry.Columns.Code3Letter: ColumnStore[i] = new ColumnDef(c, "Code3Letter", SqlDbType.VarChar, 3, ""); break;
					case IpCountry.Columns.Name: ColumnStore[i] = new ColumnDef(c, "Name", SqlDbType.VarChar, ""); break;
					case IpCountry.Columns.CountryK: ColumnStore[i] = new ColumnDef(c, "CountryK", SqlDbType.Int, 0); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(IpCountry.Columns.IpFrom);
						InitColumn(IpCountry.Columns.IpTo);
						InitColumn(IpCountry.Columns.Code2Letter);
						InitColumn(IpCountry.Columns.Code3Letter);
						InitColumn(IpCountry.Columns.Name);
						InitColumn(IpCountry.Columns.CountryK);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region Log
	/// <summary>
	/// Logs simple counts by day
	/// </summary>
	public partial class Log : Model.Entities.Log, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// The item - Log.Items
			/// </summary>
			Item = 0x00320001,
			/// <summary>
			/// The date
			/// </summary>
			Date = 0x00320002,
			/// <summary>
			/// The number of times this count happened
			/// </summary>
			Count = 0x00320003,
		}
		#endregion
		public static string GetColumnName(Log.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case Log.Columns.Item: return "Item";
						case Log.Columns.Date: return "Date";
						case Log.Columns.Count: return "Count";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(Log.Columns columnEnum)
		{
			switch (columnEnum)
			{
							default: return false;
			}
		}


		#region Common
	 
		public Log(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);}
		public Log()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.Log);
		}
		public Log(BobSet bs)
		{
			this.Bob = new Bob(Bobs.Tables.Defs.Log, bs);
		}
		public Log(IBob Parent, object Column) : this()
		{
			this.Bob.GetBobFromParentSimple(Parent, Column, TablesEnum.Log);
		}
		public Log(int Item, DateTime Date) : this()
		{
			this.Bob.GetBobFromPrimaryKeyArray(new Q[] {new Q(Log.Columns.Item,Item), new Q(Log.Columns.Date,Date)});
		} 
		#endregion

	}
	#endregion
	#region LogTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region Log
	/// <summary>
	/// Logs simple counts by day
	/// </summary>
	[Serializable]
	public partial class Log 
	{
		
		#region Simple members
		/// <summary>
		/// The item - Log.Items
		/// </summary>
		public override int Item
		{
			get { return (int)this[Log.Columns.Item]; }
			set { this[Log.Columns.Item] = value; }
		}
		/// <summary>
		/// The date
		/// </summary>
		public override DateTime Date
		{
			get { return (DateTime)this[Log.Columns.Date]; }
			set { this[Log.Columns.Date] = value; }
		}
		/// <summary>
		/// The number of times this count happened
		/// </summary>
		public override int Count
		{
			get { return (int)this[Log.Columns.Count]; }
			set { this[Log.Columns.Count] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildLogs
	{
		CachedSqlSelect<Log> ChildLogs();
		CachedSqlSelect<Log> ChildLogs(Q where);
		CachedSqlSelect<Log> ChildLogs(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<Log> ChildLogs(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class Log 
		{
		}

	#region LogDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region LogDataHolder
	/// <summary>
	/// Logs simple counts by dayDataHolder
	/// </summary>
	[Serializable]
	public partial class LogDataHolder : DataHolder<Log>
	{
		Log dataHolder;
		[NonSerializedAttribute] Log bob;

		public LogDataHolder()
		{
			this.dataHolder = new Log();
		}
		
		void CopyValues(Log source, Log destination)
		{
			destination[Bobs.Log.Columns.Item] = source[Bobs.Log.Columns.Item];
			destination[Bobs.Log.Columns.Date] = source[Bobs.Log.Columns.Date];
			destination[Bobs.Log.Columns.Count] = source[Bobs.Log.Columns.Count];
		}
		
		public LogDataHolder(Log bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// The item - Log.Items
		/// </summary>
		public int Item
		{
			get { return dataHolder.Item; }
			set { this.dataHolder.Item = value; }
		}
		/// <summary>
		/// The date
		/// </summary>
		public DateTime Date
		{
			get { return dataHolder.Date; }
			set { this.dataHolder.Date = value; }
		}
		/// <summary>
		/// The number of times this count happened
		/// </summary>
		public int Count
		{
			get { return dataHolder.Count; }
			set { this.dataHolder.Count = value; }
		}
		#endregion
		public Log Log
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new Log(K);
					}
					else
					{
						bob = new Log();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region LogSet
	public partial class LogSet : BobSet, IEnumerable<Log>
	{
		public LogSet(Query query) : base(query) { }

		public Log this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new Log(this);
					((Log)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (Log)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new LogTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<Log> ToList()
		{
			List<Log> list = new List<Log>();
			foreach (Log item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<Log> Members

		public new IEnumerator<Log> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region LogTableDef
	public class LogTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "Log";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "EEFC6452";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return Log.GetColumnName((Log.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.Log;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return false;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return null;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			Log.Columns c = (Log.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case Log.Columns.Item: ColumnStore[i] = new ColumnDef(c, "Item", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey, 0); break;
					case Log.Columns.Date: ColumnStore[i] = new ColumnDef(c, "Date", SqlDbType.DateTime, 16, SqlColumnFlag.PrimaryKey, DateTime.Parse("01/01/0001")); break;
					case Log.Columns.Count: ColumnStore[i] = new ColumnDef(c, "Count", SqlDbType.Int, 0); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(Log.Columns.Item);
						InitColumn(Log.Columns.Date);
						InitColumn(Log.Columns.Count);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region LogPageTime
	/// <summary>
	/// Log of each page load time and page reference
	/// </summary>
	public partial class LogPageTime : Model.Entities.LogPageTime, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// Primary K
			/// </summary>
			K = 0x00330001,
			/// <summary>
			/// Start time of page load
			/// </summary>
			StartDateTime = 0x00330002,
			/// <summary>
			/// End time of page load
			/// </summary>
			EndDateTime = 0x00330003,
			/// <summary>
			/// Current page filter
			/// </summary>
			CurrentFilter = 0x00330004,
			/// <summary>
			/// Path of the master container page
			/// </summary>
			MasterPath = 0x00330005,
			/// <summary>
			/// Page path
			/// </summary>
			PagePath = 0x00330006,
			/// <summary>
			/// K of object referenced in the current filter
			/// </summary>
			ObjectFilterK = 0x00330007,
			/// <summary>
			/// Type of object referenced in the current filter
			/// </summary>
			ObjectFilterType = 0x00330008,
			/// <summary>
			/// Web server name
			/// </summary>
			MachineName = 0x00330009,
			/// <summary>
			/// K of current user
			/// </summary>
			UsrK = 0x0033000a,
			/// <summary>
			/// Total Database select queries used to generate page
			/// </summary>
			Selects = 0x0033000b,
			/// <summary>
			/// Total Database update queries used to generate page
			/// </summary>
			Updates = 0x0033000c,
			/// <summary>
			/// Total Database insert queries used to generate page
			/// </summary>
			Inserts = 0x0033000d,
			/// <summary>
			/// Total Database delete queries used to generate page
			/// </summary>
			Deletes = 0x0033000e,
			/// <summary>
			/// Is page request a GET or POST. GET = true, POST = false
			/// </summary>
			IsGet = 0x0033000f,
			/// <summary>
			/// The Current Url
			/// </summary>
			Url = 0x00330010,
			/// <summary>
			/// Post data of Request, if Request exceeded certain duration
			/// </summary>
			PostData = 0x00330011,
			/// <summary>
			/// DSI Browser Guid
			/// </summary>
			DsiGuid = 0x00330012,
			/// <summary>
			/// User's IP address
			/// </summary>
			IpAddress = 0x00330013,
			/// <summary>
			/// Is the browser a crawler?
			/// </summary>
			IsCrawler = 0x00330014,
			/// <summary>
			/// Is this an AJAX request?
			/// </summary>
			IsAjaxRequest = 0x00330015,
			/// <summary>
			/// Has Page.Render fired?
			/// </summary>
			IsRendered = 0x00330016,
		}
		#endregion
		public static string GetColumnName(LogPageTime.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case LogPageTime.Columns.K: return "K";
						case LogPageTime.Columns.StartDateTime: return "StartDateTime";
						case LogPageTime.Columns.EndDateTime: return "EndDateTime";
						case LogPageTime.Columns.CurrentFilter: return "CurrentFilter";
						case LogPageTime.Columns.MasterPath: return "MasterPath";
						case LogPageTime.Columns.PagePath: return "PagePath";
						case LogPageTime.Columns.ObjectFilterK: return "ObjectFilterK";
						case LogPageTime.Columns.ObjectFilterType: return "ObjectFilterType";
						case LogPageTime.Columns.MachineName: return "MachineName";
						case LogPageTime.Columns.UsrK: return "UsrK";
						case LogPageTime.Columns.Selects: return "Selects";
						case LogPageTime.Columns.Updates: return "Updates";
						case LogPageTime.Columns.Inserts: return "Inserts";
						case LogPageTime.Columns.Deletes: return "Deletes";
						case LogPageTime.Columns.IsGet: return "IsGet";
						case LogPageTime.Columns.Url: return "Url";
						case LogPageTime.Columns.PostData: return "PostData";
						case LogPageTime.Columns.DsiGuid: return "DsiGuid";
						case LogPageTime.Columns.IpAddress: return "IpAddress";
						case LogPageTime.Columns.IsCrawler: return "IsCrawler";
						case LogPageTime.Columns.IsAjaxRequest: return "IsAjaxRequest";
						case LogPageTime.Columns.IsRendered: return "IsRendered";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(LogPageTime.Columns columnEnum)
		{
			switch (columnEnum)
			{
																										default: return false;
			}
		}


		#region Common
 
		public LogPageTime(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);  }
		public LogPageTime()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.LogPageTime);
		}
		public LogPageTime(BobSet bs)
		{
			this.Bob = new Bob(bs.Table, bs);
		}
		public LogPageTime(int LogPageTimeK, IBob Parent, object Column)
			: this()
		{
			Bob.GetBobFromParent(LogPageTimeK, Parent.Bob, Column, TablesEnum.LogPageTime);
		}
		public LogPageTime(int LogPageTimeK)
			: this()
		{
			Bob.GetBobFromPrimaryKey(LogPageTimeK);
		}
		#endregion

	}
	#endregion
	#region LogPageTimeTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region LogPageTime
	/// <summary>
	/// Log of each page load time and page reference
	/// </summary>
	[Serializable]
	public partial class LogPageTime 
	{
		
		#region Simple members
		/// <summary>
		/// Primary K
		/// </summary>
		public override int K
		{
			get { return (int)this[LogPageTime.Columns.K] as int? ?? 0 ; }
			set { this[LogPageTime.Columns.K] = value; }
		}
		/// <summary>
		/// Start time of page load
		/// </summary>
		public override DateTime StartDateTime
		{
			get { return (DateTime)this[LogPageTime.Columns.StartDateTime]; }
			set { this[LogPageTime.Columns.StartDateTime] = value; }
		}
		/// <summary>
		/// End time of page load
		/// </summary>
		public override DateTime EndDateTime
		{
			get { return (DateTime)this[LogPageTime.Columns.EndDateTime]; }
			set { this[LogPageTime.Columns.EndDateTime] = value; }
		}
		/// <summary>
		/// Current page filter
		/// </summary>
		public override string CurrentFilter
		{
			get { return (string)this[LogPageTime.Columns.CurrentFilter]; }
			set { this[LogPageTime.Columns.CurrentFilter] = value; }
		}
		/// <summary>
		/// Path of the master container page
		/// </summary>
		public override string MasterPath
		{
			get { return (string)this[LogPageTime.Columns.MasterPath]; }
			set { this[LogPageTime.Columns.MasterPath] = value; }
		}
		/// <summary>
		/// Page path
		/// </summary>
		public override string PagePath
		{
			get { return (string)this[LogPageTime.Columns.PagePath]; }
			set { this[LogPageTime.Columns.PagePath] = value; }
		}
		/// <summary>
		/// K of object referenced in the current filter
		/// </summary>
		public override int ObjectFilterK
		{
			get { return (int)this[LogPageTime.Columns.ObjectFilterK]; }
			set { this[LogPageTime.Columns.ObjectFilterK] = value; }
		}
		/// <summary>
		/// Type of object referenced in the current filter
		/// </summary>
		public override int ObjectFilterType
		{
			get { return (int)this[LogPageTime.Columns.ObjectFilterType]; }
			set { this[LogPageTime.Columns.ObjectFilterType] = value; }
		}
		/// <summary>
		/// Web server name
		/// </summary>
		public override string MachineName
		{
			get { return (string)this[LogPageTime.Columns.MachineName]; }
			set { this[LogPageTime.Columns.MachineName] = value; }
		}
		/// <summary>
		/// K of current user
		/// </summary>
		public override int UsrK
		{
			get { return (int)this[LogPageTime.Columns.UsrK]; }
			set { this[LogPageTime.Columns.UsrK] = value; }
		}
		/// <summary>
		/// Total Database select queries used to generate page
		/// </summary>
		public override int Selects
		{
			get { return (int)this[LogPageTime.Columns.Selects]; }
			set { this[LogPageTime.Columns.Selects] = value; }
		}
		/// <summary>
		/// Total Database update queries used to generate page
		/// </summary>
		public override int Updates
		{
			get { return (int)this[LogPageTime.Columns.Updates]; }
			set { this[LogPageTime.Columns.Updates] = value; }
		}
		/// <summary>
		/// Total Database insert queries used to generate page
		/// </summary>
		public override int Inserts
		{
			get { return (int)this[LogPageTime.Columns.Inserts]; }
			set { this[LogPageTime.Columns.Inserts] = value; }
		}
		/// <summary>
		/// Total Database delete queries used to generate page
		/// </summary>
		public override int Deletes
		{
			get { return (int)this[LogPageTime.Columns.Deletes]; }
			set { this[LogPageTime.Columns.Deletes] = value; }
		}
		/// <summary>
		/// Is page request a GET or POST. GET = true, POST = false
		/// </summary>
		public override bool IsGet
		{
			get { return (bool)this[LogPageTime.Columns.IsGet]; }
			set { this[LogPageTime.Columns.IsGet] = value; }
		}
		/// <summary>
		/// The Current Url
		/// </summary>
		public override string Url
		{
			get { return (string)this[LogPageTime.Columns.Url]; }
			set { this[LogPageTime.Columns.Url] = value; }
		}
		/// <summary>
		/// Post data of Request, if Request exceeded certain duration
		/// </summary>
		public override string PostData
		{
			get { return (string)this[LogPageTime.Columns.PostData]; }
			set { this[LogPageTime.Columns.PostData] = value; }
		}
		/// <summary>
		/// DSI Browser Guid
		/// </summary>
		public Guid	DsiGuid
		{
			get{ return Cambro.Misc.Db.GuidConvertor(this[LogPageTime.Columns.DsiGuid]);}		
			set{ this[LogPageTime.Columns.DsiGuid] = new System.Data.SqlTypes.SqlGuid(value);}
		}
		/// <summary>
		/// User's IP address
		/// </summary>
		public override string IpAddress
		{
			get { return (string)this[LogPageTime.Columns.IpAddress]; }
			set { this[LogPageTime.Columns.IpAddress] = value; }
		}
		/// <summary>
		/// Is the browser a crawler?
		/// </summary>
		public override bool? IsCrawler
		{
			get { return (bool?)this[LogPageTime.Columns.IsCrawler]; }
			set { this[LogPageTime.Columns.IsCrawler] = value; }
		}
		/// <summary>
		/// Is this an AJAX request?
		/// </summary>
		public override bool? IsAjaxRequest
		{
			get { return (bool?)this[LogPageTime.Columns.IsAjaxRequest]; }
			set { this[LogPageTime.Columns.IsAjaxRequest] = value; }
		}
		/// <summary>
		/// Has Page.Render fired?
		/// </summary>
		public override bool? IsRendered
		{
			get { return (bool?)this[LogPageTime.Columns.IsRendered]; }
			set { this[LogPageTime.Columns.IsRendered] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildLogPageTimes
	{
		CachedSqlSelect<LogPageTime> ChildLogPageTimes();
		CachedSqlSelect<LogPageTime> ChildLogPageTimes(Q where);
		CachedSqlSelect<LogPageTime> ChildLogPageTimes(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<LogPageTime> ChildLogPageTimes(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class LogPageTime 
		{
		}

	#region LogPageTimeDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region LogPageTimeDataHolder
	/// <summary>
	/// Log of each page load time and page referenceDataHolder
	/// </summary>
	[Serializable]
	public partial class LogPageTimeDataHolder : DataHolder<LogPageTime>
	{
		LogPageTime dataHolder;
		[NonSerializedAttribute] LogPageTime bob;

		public LogPageTimeDataHolder()
		{
			this.dataHolder = new LogPageTime();
		}
		
		void CopyValues(LogPageTime source, LogPageTime destination)
		{
			destination[Bobs.LogPageTime.Columns.K] = source[Bobs.LogPageTime.Columns.K];
			destination[Bobs.LogPageTime.Columns.StartDateTime] = source[Bobs.LogPageTime.Columns.StartDateTime];
			destination[Bobs.LogPageTime.Columns.EndDateTime] = source[Bobs.LogPageTime.Columns.EndDateTime];
			destination[Bobs.LogPageTime.Columns.CurrentFilter] = source[Bobs.LogPageTime.Columns.CurrentFilter];
			destination[Bobs.LogPageTime.Columns.MasterPath] = source[Bobs.LogPageTime.Columns.MasterPath];
			destination[Bobs.LogPageTime.Columns.PagePath] = source[Bobs.LogPageTime.Columns.PagePath];
			destination[Bobs.LogPageTime.Columns.ObjectFilterK] = source[Bobs.LogPageTime.Columns.ObjectFilterK];
			destination[Bobs.LogPageTime.Columns.ObjectFilterType] = source[Bobs.LogPageTime.Columns.ObjectFilterType];
			destination[Bobs.LogPageTime.Columns.MachineName] = source[Bobs.LogPageTime.Columns.MachineName];
			destination[Bobs.LogPageTime.Columns.UsrK] = source[Bobs.LogPageTime.Columns.UsrK];
			destination[Bobs.LogPageTime.Columns.Selects] = source[Bobs.LogPageTime.Columns.Selects];
			destination[Bobs.LogPageTime.Columns.Updates] = source[Bobs.LogPageTime.Columns.Updates];
			destination[Bobs.LogPageTime.Columns.Inserts] = source[Bobs.LogPageTime.Columns.Inserts];
			destination[Bobs.LogPageTime.Columns.Deletes] = source[Bobs.LogPageTime.Columns.Deletes];
			destination[Bobs.LogPageTime.Columns.IsGet] = source[Bobs.LogPageTime.Columns.IsGet];
			destination[Bobs.LogPageTime.Columns.Url] = source[Bobs.LogPageTime.Columns.Url];
			destination[Bobs.LogPageTime.Columns.PostData] = source[Bobs.LogPageTime.Columns.PostData];
			destination[Bobs.LogPageTime.Columns.DsiGuid] = source[Bobs.LogPageTime.Columns.DsiGuid];
			destination[Bobs.LogPageTime.Columns.IpAddress] = source[Bobs.LogPageTime.Columns.IpAddress];
			destination[Bobs.LogPageTime.Columns.IsCrawler] = source[Bobs.LogPageTime.Columns.IsCrawler];
			destination[Bobs.LogPageTime.Columns.IsAjaxRequest] = source[Bobs.LogPageTime.Columns.IsAjaxRequest];
			destination[Bobs.LogPageTime.Columns.IsRendered] = source[Bobs.LogPageTime.Columns.IsRendered];
		}
		
		public LogPageTimeDataHolder(LogPageTime bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// Primary K
		/// </summary>
		public int K
		{
			get { return dataHolder.K; }
			set { this.dataHolder.K = value; }
		}
		/// <summary>
		/// Start time of page load
		/// </summary>
		public DateTime StartDateTime
		{
			get { return dataHolder.StartDateTime; }
			set { this.dataHolder.StartDateTime = value; }
		}
		/// <summary>
		/// End time of page load
		/// </summary>
		public DateTime EndDateTime
		{
			get { return dataHolder.EndDateTime; }
			set { this.dataHolder.EndDateTime = value; }
		}
		/// <summary>
		/// Current page filter
		/// </summary>
		public string CurrentFilter
		{
			get { return dataHolder.CurrentFilter; }
			set { this.dataHolder.CurrentFilter = value; }
		}
		/// <summary>
		/// Path of the master container page
		/// </summary>
		public string MasterPath
		{
			get { return dataHolder.MasterPath; }
			set { this.dataHolder.MasterPath = value; }
		}
		/// <summary>
		/// Page path
		/// </summary>
		public string PagePath
		{
			get { return dataHolder.PagePath; }
			set { this.dataHolder.PagePath = value; }
		}
		/// <summary>
		/// K of object referenced in the current filter
		/// </summary>
		public int ObjectFilterK
		{
			get { return dataHolder.ObjectFilterK; }
			set { this.dataHolder.ObjectFilterK = value; }
		}
		/// <summary>
		/// Type of object referenced in the current filter
		/// </summary>
		public int ObjectFilterType
		{
			get { return dataHolder.ObjectFilterType; }
			set { this.dataHolder.ObjectFilterType = value; }
		}
		/// <summary>
		/// Web server name
		/// </summary>
		public string MachineName
		{
			get { return dataHolder.MachineName; }
			set { this.dataHolder.MachineName = value; }
		}
		/// <summary>
		/// K of current user
		/// </summary>
		public int UsrK
		{
			get { return dataHolder.UsrK; }
			set { this.dataHolder.UsrK = value; }
		}
		/// <summary>
		/// Total Database select queries used to generate page
		/// </summary>
		public int Selects
		{
			get { return dataHolder.Selects; }
			set { this.dataHolder.Selects = value; }
		}
		/// <summary>
		/// Total Database update queries used to generate page
		/// </summary>
		public int Updates
		{
			get { return dataHolder.Updates; }
			set { this.dataHolder.Updates = value; }
		}
		/// <summary>
		/// Total Database insert queries used to generate page
		/// </summary>
		public int Inserts
		{
			get { return dataHolder.Inserts; }
			set { this.dataHolder.Inserts = value; }
		}
		/// <summary>
		/// Total Database delete queries used to generate page
		/// </summary>
		public int Deletes
		{
			get { return dataHolder.Deletes; }
			set { this.dataHolder.Deletes = value; }
		}
		/// <summary>
		/// Is page request a GET or POST. GET = true, POST = false
		/// </summary>
		public bool IsGet
		{
			get { return dataHolder.IsGet; }
			set { this.dataHolder.IsGet = value; }
		}
		/// <summary>
		/// The Current Url
		/// </summary>
		public string Url
		{
			get { return dataHolder.Url; }
			set { this.dataHolder.Url = value; }
		}
		/// <summary>
		/// Post data of Request, if Request exceeded certain duration
		/// </summary>
		public string PostData
		{
			get { return dataHolder.PostData; }
			set { this.dataHolder.PostData = value; }
		}
		/// <summary>
		/// DSI Browser Guid
		/// </summary>
		public Guid DsiGuid
		{
			get { return dataHolder.DsiGuid; }
			set { this.dataHolder.DsiGuid = value; }
		}
		/// <summary>
		/// User's IP address
		/// </summary>
		public string IpAddress
		{
			get { return dataHolder.IpAddress; }
			set { this.dataHolder.IpAddress = value; }
		}
		/// <summary>
		/// Is the browser a crawler?
		/// </summary>
		public bool? IsCrawler
		{
			get { return dataHolder.IsCrawler; }
			set { this.dataHolder.IsCrawler = value; }
		}
		/// <summary>
		/// Is this an AJAX request?
		/// </summary>
		public bool? IsAjaxRequest
		{
			get { return dataHolder.IsAjaxRequest; }
			set { this.dataHolder.IsAjaxRequest = value; }
		}
		/// <summary>
		/// Has Page.Render fired?
		/// </summary>
		public bool? IsRendered
		{
			get { return dataHolder.IsRendered; }
			set { this.dataHolder.IsRendered = value; }
		}
		#endregion
		public LogPageTime LogPageTime
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new LogPageTime(K);
					}
					else
					{
						bob = new LogPageTime();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region LogPageTimeSet
	public partial class LogPageTimeSet : BobSet, IEnumerable<LogPageTime>
	{
		public LogPageTimeSet(Query query) : base(query) { }

		public LogPageTime this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new LogPageTime(this);
					((LogPageTime)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (LogPageTime)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new LogPageTimeTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<LogPageTime> ToList()
		{
			List<LogPageTime> list = new List<LogPageTime>();
			foreach (LogPageTime item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<LogPageTime> Members

		public new IEnumerator<LogPageTime> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region LogPageTimeTableDef
	public class LogPageTimeTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "LogPageTime";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "5A4210C2";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return LogPageTime.GetColumnName((LogPageTime.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.LogPageTime;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return true;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return LogPageTime.Columns.K;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			LogPageTime.Columns c = (LogPageTime.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case LogPageTime.Columns.K: ColumnStore[i] = new ColumnDef(c, "K", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey | SqlColumnFlag.AutoNumber, null); break;
					case LogPageTime.Columns.StartDateTime: ColumnStore[i] = new ColumnDef(c, "StartDateTime", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case LogPageTime.Columns.EndDateTime: ColumnStore[i] = new ColumnDef(c, "EndDateTime", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case LogPageTime.Columns.CurrentFilter: ColumnStore[i] = new ColumnDef(c, "CurrentFilter", SqlDbType.VarChar, 150, ""); break;
					case LogPageTime.Columns.MasterPath: ColumnStore[i] = new ColumnDef(c, "MasterPath", SqlDbType.VarChar, ""); break;
					case LogPageTime.Columns.PagePath: ColumnStore[i] = new ColumnDef(c, "PagePath", SqlDbType.VarChar, ""); break;
					case LogPageTime.Columns.ObjectFilterK: ColumnStore[i] = new ColumnDef(c, "ObjectFilterK", SqlDbType.Int, 0); break;
					case LogPageTime.Columns.ObjectFilterType: ColumnStore[i] = new ColumnDef(c, "ObjectFilterType", SqlDbType.Int, 0); break;
					case LogPageTime.Columns.MachineName: ColumnStore[i] = new ColumnDef(c, "MachineName", SqlDbType.VarChar, ""); break;
					case LogPageTime.Columns.UsrK: ColumnStore[i] = new ColumnDef(c, "UsrK", SqlDbType.Int, 0); break;
					case LogPageTime.Columns.Selects: ColumnStore[i] = new ColumnDef(c, "Selects", SqlDbType.Int, 0); break;
					case LogPageTime.Columns.Updates: ColumnStore[i] = new ColumnDef(c, "Updates", SqlDbType.Int, 0); break;
					case LogPageTime.Columns.Inserts: ColumnStore[i] = new ColumnDef(c, "Inserts", SqlDbType.Int, 0); break;
					case LogPageTime.Columns.Deletes: ColumnStore[i] = new ColumnDef(c, "Deletes", SqlDbType.Int, 0); break;
					case LogPageTime.Columns.IsGet: ColumnStore[i] = new ColumnDef(c, "IsGet", SqlDbType.Bit, false); break;
					case LogPageTime.Columns.Url: ColumnStore[i] = new ColumnDef(c, "Url", SqlDbType.VarChar, 150, ""); break;
					case LogPageTime.Columns.PostData: ColumnStore[i] = new ColumnDef(c, "PostData", SqlDbType.VarChar, 4000, ""); break;
					case LogPageTime.Columns.DsiGuid: ColumnStore[i] = new ColumnDef(c, "DsiGuid", SqlDbType.UniqueIdentifier, Guid.Empty); break;
					case LogPageTime.Columns.IpAddress: ColumnStore[i] = new ColumnDef(c, "IpAddress", SqlDbType.VarChar, 15, ""); break;
					case LogPageTime.Columns.IsCrawler: ColumnStore[i] = new ColumnDef(c, "IsCrawler", SqlDbType.Bit, null); break;
					case LogPageTime.Columns.IsAjaxRequest: ColumnStore[i] = new ColumnDef(c, "IsAjaxRequest", SqlDbType.Bit, null); break;
					case LogPageTime.Columns.IsRendered: ColumnStore[i] = new ColumnDef(c, "IsRendered", SqlDbType.Bit, null); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(LogPageTime.Columns.K);
						InitColumn(LogPageTime.Columns.StartDateTime);
						InitColumn(LogPageTime.Columns.EndDateTime);
						InitColumn(LogPageTime.Columns.CurrentFilter);
						InitColumn(LogPageTime.Columns.MasterPath);
						InitColumn(LogPageTime.Columns.PagePath);
						InitColumn(LogPageTime.Columns.ObjectFilterK);
						InitColumn(LogPageTime.Columns.ObjectFilterType);
						InitColumn(LogPageTime.Columns.MachineName);
						InitColumn(LogPageTime.Columns.UsrK);
						InitColumn(LogPageTime.Columns.Selects);
						InitColumn(LogPageTime.Columns.Updates);
						InitColumn(LogPageTime.Columns.Inserts);
						InitColumn(LogPageTime.Columns.Deletes);
						InitColumn(LogPageTime.Columns.IsGet);
						InitColumn(LogPageTime.Columns.Url);
						InitColumn(LogPageTime.Columns.PostData);
						InitColumn(LogPageTime.Columns.DsiGuid);
						InitColumn(LogPageTime.Columns.IpAddress);
						InitColumn(LogPageTime.Columns.IsCrawler);
						InitColumn(LogPageTime.Columns.IsAjaxRequest);
						InitColumn(LogPageTime.Columns.IsRendered);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region Lol
	/// <summary>
	/// When someone laughs on the forum
	/// </summary>
	public partial class Lol : Model.Entities.Lol, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// The primary key
			/// </summary>
			K = 0x00340001,
			/// <summary>
			/// The user that laughed
			/// </summary>
			UsrK = 0x00340002,
			/// <summary>
			/// The comment that they laughed at
			/// </summary>
			CommentK = 0x00340003,
			/// <summary>
			/// The Usr that posted the comment
			/// </summary>
			CommentUsrK = 0x00340004,
			/// <summary>
			/// The datetime that they laughed
			/// </summary>
			DateTime = 0x00340005,
		}
		#endregion
		public static string GetColumnName(Lol.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case Lol.Columns.K: return "K";
						case Lol.Columns.UsrK: return "UsrK";
						case Lol.Columns.CommentK: return "CommentK";
						case Lol.Columns.CommentUsrK: return "CommentUsrK";
						case Lol.Columns.DateTime: return "DateTime";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(Lol.Columns columnEnum)
		{
			switch (columnEnum)
			{
									default: return false;
			}
		}


		#region Common
 
		public Lol(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);  }
		public Lol()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.Lol);
		}
		public Lol(BobSet bs)
		{
			this.Bob = new Bob(bs.Table, bs);
		}
		public Lol(int LolK, IBob Parent, object Column)
			: this()
		{
			Bob.GetBobFromParent(LolK, Parent.Bob, Column, TablesEnum.Lol);
		}
		public Lol(int LolK)
			: this()
		{
			Bob.GetBobFromPrimaryKey(LolK);
		}
		#endregion

	}
	#endregion
	#region LolTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region Lol
	/// <summary>
	/// When someone laughs on the forum
	/// </summary>
	[Serializable]
	public partial class Lol 
	{
		
		#region Simple members
		/// <summary>
		/// The primary key
		/// </summary>
		public override int K
		{
			get { return (int)this[Lol.Columns.K] as int? ?? 0 ; }
			set { this[Lol.Columns.K] = value; }
		}
		/// <summary>
		/// The user that laughed
		/// </summary>
		public override int UsrK
		{
			get { return (int)this[Lol.Columns.UsrK]; }
			set { this[Lol.Columns.UsrK] = value; }
		}
		/// <summary>
		/// The comment that they laughed at
		/// </summary>
		public override int CommentK
		{
			get { return (int)this[Lol.Columns.CommentK]; }
			set { this[Lol.Columns.CommentK] = value; }
		}
		/// <summary>
		/// The Usr that posted the comment
		/// </summary>
		public override int CommentUsrK
		{
			get { return (int)this[Lol.Columns.CommentUsrK]; }
			set { this[Lol.Columns.CommentUsrK] = value; }
		}
		/// <summary>
		/// The datetime that they laughed
		/// </summary>
		public override DateTime DateTime
		{
			get { return (DateTime)this[Lol.Columns.DateTime]; }
			set { this[Lol.Columns.DateTime] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildLols
	{
		CachedSqlSelect<Lol> ChildLols();
		CachedSqlSelect<Lol> ChildLols(Q where);
		CachedSqlSelect<Lol> ChildLols(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<Lol> ChildLols(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class Lol 
		{
		}

	#region LolDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region LolDataHolder
	/// <summary>
	/// When someone laughs on the forumDataHolder
	/// </summary>
	[Serializable]
	public partial class LolDataHolder : DataHolder<Lol>
	{
		Lol dataHolder;
		[NonSerializedAttribute] Lol bob;

		public LolDataHolder()
		{
			this.dataHolder = new Lol();
		}
		
		void CopyValues(Lol source, Lol destination)
		{
			destination[Bobs.Lol.Columns.K] = source[Bobs.Lol.Columns.K];
			destination[Bobs.Lol.Columns.UsrK] = source[Bobs.Lol.Columns.UsrK];
			destination[Bobs.Lol.Columns.CommentK] = source[Bobs.Lol.Columns.CommentK];
			destination[Bobs.Lol.Columns.CommentUsrK] = source[Bobs.Lol.Columns.CommentUsrK];
			destination[Bobs.Lol.Columns.DateTime] = source[Bobs.Lol.Columns.DateTime];
		}
		
		public LolDataHolder(Lol bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// The primary key
		/// </summary>
		public int K
		{
			get { return dataHolder.K; }
			set { this.dataHolder.K = value; }
		}
		/// <summary>
		/// The user that laughed
		/// </summary>
		public int UsrK
		{
			get { return dataHolder.UsrK; }
			set { this.dataHolder.UsrK = value; }
		}
		/// <summary>
		/// The comment that they laughed at
		/// </summary>
		public int CommentK
		{
			get { return dataHolder.CommentK; }
			set { this.dataHolder.CommentK = value; }
		}
		/// <summary>
		/// The Usr that posted the comment
		/// </summary>
		public int CommentUsrK
		{
			get { return dataHolder.CommentUsrK; }
			set { this.dataHolder.CommentUsrK = value; }
		}
		/// <summary>
		/// The datetime that they laughed
		/// </summary>
		public DateTime DateTime
		{
			get { return dataHolder.DateTime; }
			set { this.dataHolder.DateTime = value; }
		}
		#endregion
		public Lol Lol
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new Lol(K);
					}
					else
					{
						bob = new Lol();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region LolSet
	public partial class LolSet : BobSet, IEnumerable<Lol>
	{
		public LolSet(Query query) : base(query) { }

		public Lol this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new Lol(this);
					((Lol)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (Lol)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new LolTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<Lol> ToList()
		{
			List<Lol> list = new List<Lol>();
			foreach (Lol item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<Lol> Members

		public new IEnumerator<Lol> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region LolTableDef
	public class LolTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "Lol";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "B9944A9A";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return Lol.GetColumnName((Lol.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.Lol;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return true;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return Lol.Columns.K;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			Lol.Columns c = (Lol.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case Lol.Columns.K: ColumnStore[i] = new ColumnDef(c, "K", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey | SqlColumnFlag.AutoNumber, null); break;
					case Lol.Columns.UsrK: ColumnStore[i] = new ColumnDef(c, "UsrK", SqlDbType.Int, 0); break;
					case Lol.Columns.CommentK: ColumnStore[i] = new ColumnDef(c, "CommentK", SqlDbType.Int, 0); break;
					case Lol.Columns.CommentUsrK: ColumnStore[i] = new ColumnDef(c, "CommentUsrK", SqlDbType.Int, 0); break;
					case Lol.Columns.DateTime: ColumnStore[i] = new ColumnDef(c, "DateTime", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(Lol.Columns.K);
						InitColumn(Lol.Columns.UsrK);
						InitColumn(Lol.Columns.CommentK);
						InitColumn(Lol.Columns.CommentUsrK);
						InitColumn(Lol.Columns.DateTime);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region Misc
	/// <summary>
	/// Misc files
	/// </summary>
	public partial class Misc : Model.Entities.Misc, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// The primary key
			/// </summary>
			K = 0x00350001,
			/// <summary>
			/// The name of the file stored on the fileserver
			/// </summary>
			Guid = 0x00350002,
			/// <summary>
			/// File extention
			/// </summary>
			Extention = 0x00350003,
			/// <summary>
			/// The owner of the file
			/// </summary>
			UsrK = 0x00350004,
			/// <summary>
			/// If this file was uploaded by a promoter, this is the promoter account
			/// </summary>
			PromoterK = 0x00350005,
			/// <summary>
			/// File size in bytes
			/// </summary>
			Size = 0x00350006,
			/// <summary>
			/// DateTime the file was added
			/// </summary>
			DateTime = 0x00350007,
			/// <summary>
			/// DateTime the file expires (for /popup/misc/x retreiver)
			/// </summary>
			DateTimeExpires = 0x00350008,
			/// <summary>
			/// A user can store files in folders
			/// </summary>
			Folder = 0x00350009,
			/// <summary>
			/// The original name of the file
			/// </summary>
			Name = 0x0035000a,
			/// <summary>
			/// A note that is added to the file - editable and readable by the user that uploaded the file
			/// </summary>
			Note = 0x0035000b,
			/// <summary>
			/// Xml meta data - e.g. banner admin verification data
			/// </summary>
			Xml = 0x0035000c,
			/// <summary>
			/// Is this file waiting for admin to authorise it?
			/// </summary>
			NeedsAuth = 0x0035000d,
			/// <summary>
			/// Does the flash banner use the LinkTag arguement to link to a URL?
			/// </summary>
			BannerLinkTag = 0x0035000e,
			/// <summary>
			/// Does the flash banner use the LinkTarget as the target when linking?
			/// </summary>
			BannerTargetTag = 0x0035000f,
			/// <summary>
			/// Width in pixels if it's an image
			/// </summary>
			Width = 0x00350010,
			/// <summary>
			/// Height in pixels if it's an image
			/// </summary>
			Height = 0x00350011,
			/// <summary>
			/// Override the required flash version for SWF's
			/// </summary>
			RequiredFlashVersion = 0x00350012,
			/// <summary>
			/// Manual flag that admin may set to disable banner artwork
			/// </summary>
			BannerBroken = 0x00350013,
			/// <summary>
			/// String entered by admin to communicate to the promoter why the banner is broken
			/// </summary>
			BannerBrokenReason = 0x00350014,
		}
		#endregion
		public static string GetColumnName(Misc.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case Misc.Columns.K: return "K";
						case Misc.Columns.Guid: return "Guid";
						case Misc.Columns.Extention: return "Extention";
						case Misc.Columns.UsrK: return "UsrK";
						case Misc.Columns.PromoterK: return "PromoterK";
						case Misc.Columns.Size: return "Size";
						case Misc.Columns.DateTime: return "DateTime";
						case Misc.Columns.DateTimeExpires: return "DateTimeExpires";
						case Misc.Columns.Folder: return "Folder";
						case Misc.Columns.Name: return "Name";
						case Misc.Columns.Note: return "Note";
						case Misc.Columns.Xml: return "Xml";
						case Misc.Columns.NeedsAuth: return "NeedsAuth";
						case Misc.Columns.BannerLinkTag: return "BannerLinkTag";
						case Misc.Columns.BannerTargetTag: return "BannerTargetTag";
						case Misc.Columns.Width: return "Width";
						case Misc.Columns.Height: return "Height";
						case Misc.Columns.RequiredFlashVersion: return "RequiredFlashVersion";
						case Misc.Columns.BannerBroken: return "BannerBroken";
						case Misc.Columns.BannerBrokenReason: return "BannerBrokenReason";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(Misc.Columns columnEnum)
		{
			switch (columnEnum)
			{
																								default: return false;
			}
		}


		#region Common
 
		public Misc(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);  }
		public Misc()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.Misc);
		}
		public Misc(BobSet bs)
		{
			this.Bob = new Bob(bs.Table, bs);
		}
		public Misc(int MiscK, IBob Parent, object Column)
			: this()
		{
			Bob.GetBobFromParent(MiscK, Parent.Bob, Column, TablesEnum.Misc);
		}
		public Misc(int MiscK)
			: this()
		{
			Bob.GetBobFromPrimaryKey(MiscK);
		}
		#endregion

	}
	#endregion
	#region MiscTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region Misc
	/// <summary>
	/// Misc files
	/// </summary>
	[Serializable]
	public partial class Misc 
	{
		
		#region Simple members
		/// <summary>
		/// The primary key
		/// </summary>
		public override int K
		{
			get { return (int)this[Misc.Columns.K] as int? ?? 0 ; }
			set { this[Misc.Columns.K] = value; }
		}
		/// <summary>
		/// The name of the file stored on the fileserver
		/// </summary>
		public Guid	Guid
		{
			get{ return Cambro.Misc.Db.GuidConvertor(this[Misc.Columns.Guid]);}		
			set{ this[Misc.Columns.Guid] = new System.Data.SqlTypes.SqlGuid(value);}
		}
		/// <summary>
		/// File extention
		/// </summary>
		public override string Extention
		{
			get { return (string)this[Misc.Columns.Extention]; }
			set { this[Misc.Columns.Extention] = value; }
		}
		/// <summary>
		/// The owner of the file
		/// </summary>
		public override int UsrK
		{
			get { return (int)this[Misc.Columns.UsrK]; }
			set { this[Misc.Columns.UsrK] = value; }
		}
		/// <summary>
		/// If this file was uploaded by a promoter, this is the promoter account
		/// </summary>
		public override int PromoterK
		{
			get { return (int)this[Misc.Columns.PromoterK]; }
			set { this[Misc.Columns.PromoterK] = value; }
		}
		/// <summary>
		/// File size in bytes
		/// </summary>
		public override int Size
		{
			get { return (int)this[Misc.Columns.Size]; }
			set { this[Misc.Columns.Size] = value; }
		}
		/// <summary>
		/// DateTime the file was added
		/// </summary>
		public override DateTime DateTime
		{
			get { return (DateTime)this[Misc.Columns.DateTime]; }
			set { this[Misc.Columns.DateTime] = value; }
		}
		/// <summary>
		/// DateTime the file expires (for /popup/misc/x retreiver)
		/// </summary>
		public override DateTime DateTimeExpires
		{
			get { return (DateTime)this[Misc.Columns.DateTimeExpires]; }
			set { this[Misc.Columns.DateTimeExpires] = value; }
		}
		/// <summary>
		/// A user can store files in folders
		/// </summary>
		public override string Folder
		{
			get { return (string)this[Misc.Columns.Folder]; }
			set { this[Misc.Columns.Folder] = value; }
		}
		/// <summary>
		/// The original name of the file
		/// </summary>
		public override string Name
		{
			get { return (string)this[Misc.Columns.Name]; }
			set { this[Misc.Columns.Name] = value; }
		}
		/// <summary>
		/// A note that is added to the file - editable and readable by the user that uploaded the file
		/// </summary>
		public override string Note
		{
			get { return (string)this[Misc.Columns.Note]; }
			set { this[Misc.Columns.Note] = value; }
		}
		/// <summary>
		/// Xml meta data - e.g. banner admin verification data
		/// </summary>
		public override string Xml
		{
			get { return (string)this[Misc.Columns.Xml]; }
			set { this[Misc.Columns.Xml] = value; }
		}
		/// <summary>
		/// Is this file waiting for admin to authorise it?
		/// </summary>
		public override bool NeedsAuth
		{
			get { return (bool)this[Misc.Columns.NeedsAuth]; }
			set { this[Misc.Columns.NeedsAuth] = value; }
		}
		/// <summary>
		/// Does the flash banner use the LinkTag arguement to link to a URL?
		/// </summary>
		public override bool BannerLinkTag
		{
			get { return (bool)this[Misc.Columns.BannerLinkTag]; }
			set { this[Misc.Columns.BannerLinkTag] = value; }
		}
		/// <summary>
		/// Does the flash banner use the LinkTarget as the target when linking?
		/// </summary>
		public override bool BannerTargetTag
		{
			get { return (bool)this[Misc.Columns.BannerTargetTag]; }
			set { this[Misc.Columns.BannerTargetTag] = value; }
		}
		/// <summary>
		/// Width in pixels if it's an image
		/// </summary>
		public override int Width
		{
			get { return (int)this[Misc.Columns.Width]; }
			set { this[Misc.Columns.Width] = value; }
		}
		/// <summary>
		/// Height in pixels if it's an image
		/// </summary>
		public override int Height
		{
			get { return (int)this[Misc.Columns.Height]; }
			set { this[Misc.Columns.Height] = value; }
		}
		/// <summary>
		/// Override the required flash version for SWF's
		/// </summary>
		public override string RequiredFlashVersion
		{
			get { return (string)this[Misc.Columns.RequiredFlashVersion]; }
			set { this[Misc.Columns.RequiredFlashVersion] = value; }
		}
		/// <summary>
		/// Manual flag that admin may set to disable banner artwork
		/// </summary>
		public override bool BannerBroken
		{
			get { return (bool)this[Misc.Columns.BannerBroken]; }
			set { this[Misc.Columns.BannerBroken] = value; }
		}
		/// <summary>
		/// String entered by admin to communicate to the promoter why the banner is broken
		/// </summary>
		public override string BannerBrokenReason
		{
			get { return (string)this[Misc.Columns.BannerBrokenReason]; }
			set { this[Misc.Columns.BannerBrokenReason] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildMiscs
	{
		CachedSqlSelect<Misc> ChildMiscs();
		CachedSqlSelect<Misc> ChildMiscs(Q where);
		CachedSqlSelect<Misc> ChildMiscs(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<Misc> ChildMiscs(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class Misc 
	 : 
	Bobs.ChildInterfaces.IHasChildBanners
	,
	Bobs.ChildInterfaces.IHasChildFlyers
		{
			public CachedSqlSelect<Banner> ChildBanners()
		{
			return this.ChildBanners(null, null);
		}
		public CachedSqlSelect<Banner> ChildBanners(Q where)
		{
			return this.ChildBanners(where, null);
		}
		public CachedSqlSelect<Banner> ChildBanners(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildBanners(null, orderBy);
		}
		public CachedSqlSelect<Banner> ChildBanners(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<Banner>
			(
				new Children<Banner>
				(
					TablesEnum.Misc, 
					this.K, 
					TablesEnum.Banner, 
					dr => 
					{ 
						Banner newBanner = new Banner(); 
						newBanner.Initialise(dr); 
						return newBanner;
					},
					"73D8C33D",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<Flyer> ChildFlyers()
		{
			return this.ChildFlyers(null, null);
		}
		public CachedSqlSelect<Flyer> ChildFlyers(Q where)
		{
			return this.ChildFlyers(where, null);
		}
		public CachedSqlSelect<Flyer> ChildFlyers(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildFlyers(null, orderBy);
		}
		public CachedSqlSelect<Flyer> ChildFlyers(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<Flyer>
			(
				new Children<Flyer>
				(
					TablesEnum.Misc, 
					this.K, 
					TablesEnum.Flyer, 
					dr => 
					{ 
						Flyer newFlyer = new Flyer(); 
						newFlyer.Initialise(dr); 
						return newFlyer;
					},
					"1933EADE",
					where,
					orderBy
				)
			);
		}
		}

	#region MiscDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region MiscDataHolder
	/// <summary>
	/// Misc filesDataHolder
	/// </summary>
	[Serializable]
	public partial class MiscDataHolder : DataHolder<Misc>
	{
		Misc dataHolder;
		[NonSerializedAttribute] Misc bob;

		public MiscDataHolder()
		{
			this.dataHolder = new Misc();
		}
		
		void CopyValues(Misc source, Misc destination)
		{
			destination[Bobs.Misc.Columns.K] = source[Bobs.Misc.Columns.K];
			destination[Bobs.Misc.Columns.Guid] = source[Bobs.Misc.Columns.Guid];
			destination[Bobs.Misc.Columns.Extention] = source[Bobs.Misc.Columns.Extention];
			destination[Bobs.Misc.Columns.UsrK] = source[Bobs.Misc.Columns.UsrK];
			destination[Bobs.Misc.Columns.PromoterK] = source[Bobs.Misc.Columns.PromoterK];
			destination[Bobs.Misc.Columns.Size] = source[Bobs.Misc.Columns.Size];
			destination[Bobs.Misc.Columns.DateTime] = source[Bobs.Misc.Columns.DateTime];
			destination[Bobs.Misc.Columns.DateTimeExpires] = source[Bobs.Misc.Columns.DateTimeExpires];
			destination[Bobs.Misc.Columns.Folder] = source[Bobs.Misc.Columns.Folder];
			destination[Bobs.Misc.Columns.Name] = source[Bobs.Misc.Columns.Name];
			destination[Bobs.Misc.Columns.Note] = source[Bobs.Misc.Columns.Note];
			destination[Bobs.Misc.Columns.Xml] = source[Bobs.Misc.Columns.Xml];
			destination[Bobs.Misc.Columns.NeedsAuth] = source[Bobs.Misc.Columns.NeedsAuth];
			destination[Bobs.Misc.Columns.BannerLinkTag] = source[Bobs.Misc.Columns.BannerLinkTag];
			destination[Bobs.Misc.Columns.BannerTargetTag] = source[Bobs.Misc.Columns.BannerTargetTag];
			destination[Bobs.Misc.Columns.Width] = source[Bobs.Misc.Columns.Width];
			destination[Bobs.Misc.Columns.Height] = source[Bobs.Misc.Columns.Height];
			destination[Bobs.Misc.Columns.RequiredFlashVersion] = source[Bobs.Misc.Columns.RequiredFlashVersion];
			destination[Bobs.Misc.Columns.BannerBroken] = source[Bobs.Misc.Columns.BannerBroken];
			destination[Bobs.Misc.Columns.BannerBrokenReason] = source[Bobs.Misc.Columns.BannerBrokenReason];
		}
		
		public MiscDataHolder(Misc bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// The primary key
		/// </summary>
		public int K
		{
			get { return dataHolder.K; }
			set { this.dataHolder.K = value; }
		}
		/// <summary>
		/// The name of the file stored on the fileserver
		/// </summary>
		public Guid Guid
		{
			get { return dataHolder.Guid; }
			set { this.dataHolder.Guid = value; }
		}
		/// <summary>
		/// File extention
		/// </summary>
		public string Extention
		{
			get { return dataHolder.Extention; }
			set { this.dataHolder.Extention = value; }
		}
		/// <summary>
		/// The owner of the file
		/// </summary>
		public int UsrK
		{
			get { return dataHolder.UsrK; }
			set { this.dataHolder.UsrK = value; }
		}
		/// <summary>
		/// If this file was uploaded by a promoter, this is the promoter account
		/// </summary>
		public int PromoterK
		{
			get { return dataHolder.PromoterK; }
			set { this.dataHolder.PromoterK = value; }
		}
		/// <summary>
		/// File size in bytes
		/// </summary>
		public int Size
		{
			get { return dataHolder.Size; }
			set { this.dataHolder.Size = value; }
		}
		/// <summary>
		/// DateTime the file was added
		/// </summary>
		public DateTime DateTime
		{
			get { return dataHolder.DateTime; }
			set { this.dataHolder.DateTime = value; }
		}
		/// <summary>
		/// DateTime the file expires (for /popup/misc/x retreiver)
		/// </summary>
		public DateTime DateTimeExpires
		{
			get { return dataHolder.DateTimeExpires; }
			set { this.dataHolder.DateTimeExpires = value; }
		}
		/// <summary>
		/// A user can store files in folders
		/// </summary>
		public string Folder
		{
			get { return dataHolder.Folder; }
			set { this.dataHolder.Folder = value; }
		}
		/// <summary>
		/// The original name of the file
		/// </summary>
		public string Name
		{
			get { return dataHolder.Name; }
			set { this.dataHolder.Name = value; }
		}
		/// <summary>
		/// A note that is added to the file - editable and readable by the user that uploaded the file
		/// </summary>
		public string Note
		{
			get { return dataHolder.Note; }
			set { this.dataHolder.Note = value; }
		}
		/// <summary>
		/// Xml meta data - e.g. banner admin verification data
		/// </summary>
		public string Xml
		{
			get { return dataHolder.Xml; }
			set { this.dataHolder.Xml = value; }
		}
		/// <summary>
		/// Is this file waiting for admin to authorise it?
		/// </summary>
		public bool NeedsAuth
		{
			get { return dataHolder.NeedsAuth; }
			set { this.dataHolder.NeedsAuth = value; }
		}
		/// <summary>
		/// Does the flash banner use the LinkTag arguement to link to a URL?
		/// </summary>
		public bool BannerLinkTag
		{
			get { return dataHolder.BannerLinkTag; }
			set { this.dataHolder.BannerLinkTag = value; }
		}
		/// <summary>
		/// Does the flash banner use the LinkTarget as the target when linking?
		/// </summary>
		public bool BannerTargetTag
		{
			get { return dataHolder.BannerTargetTag; }
			set { this.dataHolder.BannerTargetTag = value; }
		}
		/// <summary>
		/// Width in pixels if it's an image
		/// </summary>
		public int Width
		{
			get { return dataHolder.Width; }
			set { this.dataHolder.Width = value; }
		}
		/// <summary>
		/// Height in pixels if it's an image
		/// </summary>
		public int Height
		{
			get { return dataHolder.Height; }
			set { this.dataHolder.Height = value; }
		}
		/// <summary>
		/// Override the required flash version for SWF's
		/// </summary>
		public string RequiredFlashVersion
		{
			get { return dataHolder.RequiredFlashVersion; }
			set { this.dataHolder.RequiredFlashVersion = value; }
		}
		/// <summary>
		/// Manual flag that admin may set to disable banner artwork
		/// </summary>
		public bool BannerBroken
		{
			get { return dataHolder.BannerBroken; }
			set { this.dataHolder.BannerBroken = value; }
		}
		/// <summary>
		/// String entered by admin to communicate to the promoter why the banner is broken
		/// </summary>
		public string BannerBrokenReason
		{
			get { return dataHolder.BannerBrokenReason; }
			set { this.dataHolder.BannerBrokenReason = value; }
		}
		#endregion
		public Misc Misc
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new Misc(K);
					}
					else
					{
						bob = new Misc();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region MiscSet
	public partial class MiscSet : BobSet, IEnumerable<Misc>
	{
		public MiscSet(Query query) : base(query) { }

		public Misc this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new Misc(this);
					((Misc)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (Misc)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new MiscTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<Misc> ToList()
		{
			List<Misc> list = new List<Misc>();
			foreach (Misc item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<Misc> Members

		public new IEnumerator<Misc> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region MiscTableDef
	public class MiscTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "Misc";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "DEDF0D0A";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return Misc.GetColumnName((Misc.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.Misc;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return true;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return Misc.Columns.K;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			Misc.Columns c = (Misc.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case Misc.Columns.K: ColumnStore[i] = new ColumnDef(c, "K", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey | SqlColumnFlag.AutoNumber, null); break;
					case Misc.Columns.Guid: ColumnStore[i] = new ColumnDef(c, "Guid", SqlDbType.UniqueIdentifier, Guid.Empty); break;
					case Misc.Columns.Extention: ColumnStore[i] = new ColumnDef(c, "Extention", SqlDbType.VarChar, ""); break;
					case Misc.Columns.UsrK: ColumnStore[i] = new ColumnDef(c, "UsrK", SqlDbType.Int, 0); break;
					case Misc.Columns.PromoterK: ColumnStore[i] = new ColumnDef(c, "PromoterK", SqlDbType.Int, 0); break;
					case Misc.Columns.Size: ColumnStore[i] = new ColumnDef(c, "Size", SqlDbType.Int, 0); break;
					case Misc.Columns.DateTime: ColumnStore[i] = new ColumnDef(c, "DateTime", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case Misc.Columns.DateTimeExpires: ColumnStore[i] = new ColumnDef(c, "DateTimeExpires", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case Misc.Columns.Folder: ColumnStore[i] = new ColumnDef(c, "Folder", SqlDbType.VarChar, 255, ""); break;
					case Misc.Columns.Name: ColumnStore[i] = new ColumnDef(c, "Name", SqlDbType.VarChar, 255, ""); break;
					case Misc.Columns.Note: ColumnStore[i] = new ColumnDef(c, "Note", SqlDbType.Text, ""); break;
					case Misc.Columns.Xml: ColumnStore[i] = new ColumnDef(c, "Xml", SqlDbType.Text, ""); break;
					case Misc.Columns.NeedsAuth: ColumnStore[i] = new ColumnDef(c, "NeedsAuth", SqlDbType.Bit, false); break;
					case Misc.Columns.BannerLinkTag: ColumnStore[i] = new ColumnDef(c, "BannerLinkTag", SqlDbType.Bit, false); break;
					case Misc.Columns.BannerTargetTag: ColumnStore[i] = new ColumnDef(c, "BannerTargetTag", SqlDbType.Bit, false); break;
					case Misc.Columns.Width: ColumnStore[i] = new ColumnDef(c, "Width", SqlDbType.Int, 0); break;
					case Misc.Columns.Height: ColumnStore[i] = new ColumnDef(c, "Height", SqlDbType.Int, 0); break;
					case Misc.Columns.RequiredFlashVersion: ColumnStore[i] = new ColumnDef(c, "RequiredFlashVersion", SqlDbType.VarChar, 15, ""); break;
					case Misc.Columns.BannerBroken: ColumnStore[i] = new ColumnDef(c, "BannerBroken", SqlDbType.Bit, false); break;
					case Misc.Columns.BannerBrokenReason: ColumnStore[i] = new ColumnDef(c, "BannerBrokenReason", SqlDbType.VarChar, ""); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(Misc.Columns.K);
						InitColumn(Misc.Columns.Guid);
						InitColumn(Misc.Columns.Extention);
						InitColumn(Misc.Columns.UsrK);
						InitColumn(Misc.Columns.PromoterK);
						InitColumn(Misc.Columns.Size);
						InitColumn(Misc.Columns.DateTime);
						InitColumn(Misc.Columns.DateTimeExpires);
						InitColumn(Misc.Columns.Folder);
						InitColumn(Misc.Columns.Name);
						InitColumn(Misc.Columns.Note);
						InitColumn(Misc.Columns.Xml);
						InitColumn(Misc.Columns.NeedsAuth);
						InitColumn(Misc.Columns.BannerLinkTag);
						InitColumn(Misc.Columns.BannerTargetTag);
						InitColumn(Misc.Columns.Width);
						InitColumn(Misc.Columns.Height);
						InitColumn(Misc.Columns.RequiredFlashVersion);
						InitColumn(Misc.Columns.BannerBroken);
						InitColumn(Misc.Columns.BannerBrokenReason);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region MixmagEntry
	/// <summary>
	/// Each entry into the Mixmag Vote competition has a record in here
	/// </summary>
	public partial class MixmagEntry : Model.Entities.MixmagEntry, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// Primary key
			/// </summary>
			K = 0x00360001,
			/// <summary>
			/// Comp K
			/// </summary>
			MixmagCompK = 0x00360002,
			/// <summary>
			/// Facebook UID (can by null if votes come before the entry)
			/// </summary>
			FacebookUid = 0x00360003,
			/// <summary>
			/// Date / time of the entry
			/// </summary>
			DateTime = 0x00360004,
			/// <summary>
			/// Url of the image entered
			/// </summary>
			ImageUrl = 0x00360005,
			/// <summary>
			/// Email
			/// </summary>
			Email = 0x00360006,
			/// <summary>
			/// First name
			/// </summary>
			FirstName = 0x00360007,
			/// <summary>
			/// Last name
			/// </summary>
			LastName = 0x00360008,
			/// <summary>
			/// Send daily vote update emails?
			/// </summary>
			SendDailyEmails = 0x00360009,
		}
		#endregion
		public static string GetColumnName(MixmagEntry.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case MixmagEntry.Columns.K: return "K";
						case MixmagEntry.Columns.MixmagCompK: return "MixmagCompK";
						case MixmagEntry.Columns.FacebookUid: return "FacebookUid";
						case MixmagEntry.Columns.DateTime: return "DateTime";
						case MixmagEntry.Columns.ImageUrl: return "ImageUrl";
						case MixmagEntry.Columns.Email: return "Email";
						case MixmagEntry.Columns.FirstName: return "FirstName";
						case MixmagEntry.Columns.LastName: return "LastName";
						case MixmagEntry.Columns.SendDailyEmails: return "SendDailyEmails";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(MixmagEntry.Columns columnEnum)
		{
			switch (columnEnum)
			{
													default: return false;
			}
		}


		#region Common
 
		public MixmagEntry(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);  }
		public MixmagEntry()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.MixmagEntry);
		}
		public MixmagEntry(BobSet bs)
		{
			this.Bob = new Bob(bs.Table, bs);
		}
		public MixmagEntry(int MixmagEntryK, IBob Parent, object Column)
			: this()
		{
			Bob.GetBobFromParent(MixmagEntryK, Parent.Bob, Column, TablesEnum.MixmagEntry);
		}
		public MixmagEntry(int MixmagEntryK)
			: this()
		{
			Bob.GetBobFromPrimaryKey(MixmagEntryK);
		}
		#endregion

	}
	#endregion
	#region MixmagEntryTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region MixmagEntry
	/// <summary>
	/// Each entry into the Mixmag Vote competition has a record in here
	/// </summary>
	[Serializable]
	public partial class MixmagEntry 
	{
		
		#region Simple members
		/// <summary>
		/// Primary key
		/// </summary>
		public override int K
		{
			get { return (int)this[MixmagEntry.Columns.K] as int? ?? 0 ; }
			set { this[MixmagEntry.Columns.K] = value; }
		}
		/// <summary>
		/// Comp K
		/// </summary>
		public override int MixmagCompK
		{
			get { return (int)this[MixmagEntry.Columns.MixmagCompK]; }
			set { this[MixmagEntry.Columns.MixmagCompK] = value; }
		}
		/// <summary>
		/// Facebook UID (can by null if votes come before the entry)
		/// </summary>
		public override long? FacebookUid
		{
			get { return (long?)this[MixmagEntry.Columns.FacebookUid]; }
			set { this[MixmagEntry.Columns.FacebookUid] = value; }
		}
		/// <summary>
		/// Date / time of the entry
		/// </summary>
		public override DateTime? DateTime
		{
			get { return (DateTime?)this[MixmagEntry.Columns.DateTime]; }
			set { this[MixmagEntry.Columns.DateTime] = value; }
		}
		/// <summary>
		/// Url of the image entered
		/// </summary>
		public override string ImageUrl
		{
			get { return (string)this[MixmagEntry.Columns.ImageUrl]; }
			set { this[MixmagEntry.Columns.ImageUrl] = value; }
		}
		/// <summary>
		/// Email
		/// </summary>
		public override string Email
		{
			get { return (string)this[MixmagEntry.Columns.Email]; }
			set { this[MixmagEntry.Columns.Email] = value; }
		}
		/// <summary>
		/// First name
		/// </summary>
		public override string FirstName
		{
			get { return (string)this[MixmagEntry.Columns.FirstName]; }
			set { this[MixmagEntry.Columns.FirstName] = value; }
		}
		/// <summary>
		/// Last name
		/// </summary>
		public override string LastName
		{
			get { return (string)this[MixmagEntry.Columns.LastName]; }
			set { this[MixmagEntry.Columns.LastName] = value; }
		}
		/// <summary>
		/// Send daily vote update emails?
		/// </summary>
		public override bool SendDailyEmails
		{
			get { return (bool)this[MixmagEntry.Columns.SendDailyEmails]; }
			set { this[MixmagEntry.Columns.SendDailyEmails] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildMixmagEntrys
	{
		CachedSqlSelect<MixmagEntry> ChildMixmagEntrys();
		CachedSqlSelect<MixmagEntry> ChildMixmagEntrys(Q where);
		CachedSqlSelect<MixmagEntry> ChildMixmagEntrys(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<MixmagEntry> ChildMixmagEntrys(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class MixmagEntry 
	 : 
	Bobs.ChildInterfaces.IHasChildMixmagVotes
		{
			public CachedSqlSelect<MixmagVote> ChildMixmagVotes()
		{
			return this.ChildMixmagVotes(null, null);
		}
		public CachedSqlSelect<MixmagVote> ChildMixmagVotes(Q where)
		{
			return this.ChildMixmagVotes(where, null);
		}
		public CachedSqlSelect<MixmagVote> ChildMixmagVotes(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildMixmagVotes(null, orderBy);
		}
		public CachedSqlSelect<MixmagVote> ChildMixmagVotes(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<MixmagVote>
			(
				new Children<MixmagVote>
				(
					TablesEnum.MixmagEntry, 
					this.K, 
					TablesEnum.MixmagVote, 
					dr => 
					{ 
						MixmagVote newMixmagVote = new MixmagVote(); 
						newMixmagVote.Initialise(dr); 
						return newMixmagVote;
					},
					"10B5EA57",
					where,
					orderBy
				)
			);
		}
		}

	#region MixmagEntryDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region MixmagEntryDataHolder
	/// <summary>
	/// Each entry into the Mixmag Vote competition has a record in hereDataHolder
	/// </summary>
	[Serializable]
	public partial class MixmagEntryDataHolder : DataHolder<MixmagEntry>
	{
		MixmagEntry dataHolder;
		[NonSerializedAttribute] MixmagEntry bob;

		public MixmagEntryDataHolder()
		{
			this.dataHolder = new MixmagEntry();
		}
		
		void CopyValues(MixmagEntry source, MixmagEntry destination)
		{
			destination[Bobs.MixmagEntry.Columns.K] = source[Bobs.MixmagEntry.Columns.K];
			destination[Bobs.MixmagEntry.Columns.MixmagCompK] = source[Bobs.MixmagEntry.Columns.MixmagCompK];
			destination[Bobs.MixmagEntry.Columns.FacebookUid] = source[Bobs.MixmagEntry.Columns.FacebookUid];
			destination[Bobs.MixmagEntry.Columns.DateTime] = source[Bobs.MixmagEntry.Columns.DateTime];
			destination[Bobs.MixmagEntry.Columns.ImageUrl] = source[Bobs.MixmagEntry.Columns.ImageUrl];
			destination[Bobs.MixmagEntry.Columns.Email] = source[Bobs.MixmagEntry.Columns.Email];
			destination[Bobs.MixmagEntry.Columns.FirstName] = source[Bobs.MixmagEntry.Columns.FirstName];
			destination[Bobs.MixmagEntry.Columns.LastName] = source[Bobs.MixmagEntry.Columns.LastName];
			destination[Bobs.MixmagEntry.Columns.SendDailyEmails] = source[Bobs.MixmagEntry.Columns.SendDailyEmails];
		}
		
		public MixmagEntryDataHolder(MixmagEntry bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// Primary key
		/// </summary>
		public int K
		{
			get { return dataHolder.K; }
			set { this.dataHolder.K = value; }
		}
		/// <summary>
		/// Comp K
		/// </summary>
		public int MixmagCompK
		{
			get { return dataHolder.MixmagCompK; }
			set { this.dataHolder.MixmagCompK = value; }
		}
		/// <summary>
		/// Facebook UID (can by null if votes come before the entry)
		/// </summary>
		public long? FacebookUid
		{
			get { return dataHolder.FacebookUid; }
			set { this.dataHolder.FacebookUid = value; }
		}
		/// <summary>
		/// Date / time of the entry
		/// </summary>
		public DateTime? DateTime
		{
			get { return dataHolder.DateTime; }
			set { this.dataHolder.DateTime = value; }
		}
		/// <summary>
		/// Url of the image entered
		/// </summary>
		public string ImageUrl
		{
			get { return dataHolder.ImageUrl; }
			set { this.dataHolder.ImageUrl = value; }
		}
		/// <summary>
		/// Email
		/// </summary>
		public string Email
		{
			get { return dataHolder.Email; }
			set { this.dataHolder.Email = value; }
		}
		/// <summary>
		/// First name
		/// </summary>
		public string FirstName
		{
			get { return dataHolder.FirstName; }
			set { this.dataHolder.FirstName = value; }
		}
		/// <summary>
		/// Last name
		/// </summary>
		public string LastName
		{
			get { return dataHolder.LastName; }
			set { this.dataHolder.LastName = value; }
		}
		/// <summary>
		/// Send daily vote update emails?
		/// </summary>
		public bool SendDailyEmails
		{
			get { return dataHolder.SendDailyEmails; }
			set { this.dataHolder.SendDailyEmails = value; }
		}
		#endregion
		public MixmagEntry MixmagEntry
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new MixmagEntry(K);
					}
					else
					{
						bob = new MixmagEntry();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region MixmagEntrySet
	public partial class MixmagEntrySet : BobSet, IEnumerable<MixmagEntry>
	{
		public MixmagEntrySet(Query query) : base(query) { }

		public MixmagEntry this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new MixmagEntry(this);
					((MixmagEntry)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (MixmagEntry)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new MixmagEntryTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<MixmagEntry> ToList()
		{
			List<MixmagEntry> list = new List<MixmagEntry>();
			foreach (MixmagEntry item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<MixmagEntry> Members

		public new IEnumerator<MixmagEntry> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region MixmagEntryTableDef
	public class MixmagEntryTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "MixmagEntry";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "2F19DDF0";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return MixmagEntry.GetColumnName((MixmagEntry.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.MixmagEntry;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return true;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return MixmagEntry.Columns.K;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			MixmagEntry.Columns c = (MixmagEntry.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case MixmagEntry.Columns.K: ColumnStore[i] = new ColumnDef(c, "K", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey | SqlColumnFlag.AutoNumber, null); break;
					case MixmagEntry.Columns.MixmagCompK: ColumnStore[i] = new ColumnDef(c, "MixmagCompK", SqlDbType.Int, null); break;
					case MixmagEntry.Columns.FacebookUid: ColumnStore[i] = new ColumnDef(c, "FacebookUid", SqlDbType.BigInt, null); break;
					case MixmagEntry.Columns.DateTime: ColumnStore[i] = new ColumnDef(c, "DateTime", SqlDbType.DateTime, 16, null); break;
					case MixmagEntry.Columns.ImageUrl: ColumnStore[i] = new ColumnDef(c, "ImageUrl", SqlDbType.VarChar, 500, null); break;
					case MixmagEntry.Columns.Email: ColumnStore[i] = new ColumnDef(c, "Email", SqlDbType.VarChar, 255, null); break;
					case MixmagEntry.Columns.FirstName: ColumnStore[i] = new ColumnDef(c, "FirstName", SqlDbType.VarChar, 255, null); break;
					case MixmagEntry.Columns.LastName: ColumnStore[i] = new ColumnDef(c, "LastName", SqlDbType.VarChar, 255, null); break;
					case MixmagEntry.Columns.SendDailyEmails: ColumnStore[i] = new ColumnDef(c, "SendDailyEmails", SqlDbType.Bit, false); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(MixmagEntry.Columns.K);
						InitColumn(MixmagEntry.Columns.MixmagCompK);
						InitColumn(MixmagEntry.Columns.FacebookUid);
						InitColumn(MixmagEntry.Columns.DateTime);
						InitColumn(MixmagEntry.Columns.ImageUrl);
						InitColumn(MixmagEntry.Columns.Email);
						InitColumn(MixmagEntry.Columns.FirstName);
						InitColumn(MixmagEntry.Columns.LastName);
						InitColumn(MixmagEntry.Columns.SendDailyEmails);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region MixmagGreatestDj
	/// <summary>
	/// DJs in the Greatest DJ poll
	/// </summary>
	public partial class MixmagGreatestDj : Model.Entities.MixmagGreatestDj, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// Key
			/// </summary>
			K = 0x00370001,
			/// <summary>
			/// Name in the url
			/// </summary>
			UrlName = 0x00370002,
			/// <summary>
			/// Name of the DJ
			/// </summary>
			Name = 0x00370003,
			/// <summary>
			/// Url of a small image
			/// </summary>
			ImageUrl = 0x00370004,
			/// <summary>
			/// Youtube id of the video
			/// </summary>
			YoutubeId = 0x00370005,
			/// <summary>
			/// Description
			/// </summary>
			Description = 0x00370006,
			/// <summary>
			/// Long description
			/// </summary>
			LongDescription = 0x00370007,
			/// <summary>
			/// Short description
			/// </summary>
			ShortDescription = 0x00370008,
			/// <summary>
			/// Large image - should be 200px square
			/// </summary>
			LargeImageUrl = 0x00370009,
			/// <summary>
			/// Image of the interviewer
			/// </summary>
			InterviewImageUrl = 0x0037000a,
			/// <summary>
			/// Twitter name of the artist
			/// </summary>
			TwitterName = 0x0037000b,
			/// <summary>
			/// Second youtube clip
			/// </summary>
			YoutubeId2 = 0x0037000c,
			/// <summary>
			/// Total votes
			/// </summary>
			TotalVotes = 0x0037000d,
			/// <summary>
			/// Is this in the public nominated section?
			/// </summary>
			IsPublicNominated = 0x0037000e,
			/// <summary>
			/// Plural word - is / are
			/// </summary>
			PluralWord = 0x0037000f,
			/// <summary>
			/// Name short version
			/// </summary>
			ShortName = 0x00370010,
			/// <summary>
			/// Stealth mode for wildly unpopular acts
			/// </summary>
			StealthMode = 0x00370011,
		}
		#endregion
		public static string GetColumnName(MixmagGreatestDj.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case MixmagGreatestDj.Columns.K: return "K";
						case MixmagGreatestDj.Columns.UrlName: return "UrlName";
						case MixmagGreatestDj.Columns.Name: return "Name";
						case MixmagGreatestDj.Columns.ImageUrl: return "ImageUrl";
						case MixmagGreatestDj.Columns.YoutubeId: return "YoutubeId";
						case MixmagGreatestDj.Columns.Description: return "Description";
						case MixmagGreatestDj.Columns.LongDescription: return "LongDescription";
						case MixmagGreatestDj.Columns.ShortDescription: return "ShortDescription";
						case MixmagGreatestDj.Columns.LargeImageUrl: return "LargeImageUrl";
						case MixmagGreatestDj.Columns.InterviewImageUrl: return "InterviewImageUrl";
						case MixmagGreatestDj.Columns.TwitterName: return "TwitterName";
						case MixmagGreatestDj.Columns.YoutubeId2: return "YoutubeId2";
						case MixmagGreatestDj.Columns.TotalVotes: return "TotalVotes";
						case MixmagGreatestDj.Columns.IsPublicNominated: return "IsPublicNominated";
						case MixmagGreatestDj.Columns.PluralWord: return "PluralWord";
						case MixmagGreatestDj.Columns.ShortName: return "ShortName";
						case MixmagGreatestDj.Columns.StealthMode: return "StealthMode";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(MixmagGreatestDj.Columns columnEnum)
		{
			switch (columnEnum)
			{
																					default: return false;
			}
		}


		#region Common
 
		public MixmagGreatestDj(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);  }
		public MixmagGreatestDj()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.MixmagGreatestDj);
		}
		public MixmagGreatestDj(BobSet bs)
		{
			this.Bob = new Bob(bs.Table, bs);
		}
		public MixmagGreatestDj(int MixmagGreatestDjK, IBob Parent, object Column)
			: this()
		{
			Bob.GetBobFromParent(MixmagGreatestDjK, Parent.Bob, Column, TablesEnum.MixmagGreatestDj);
		}
		public MixmagGreatestDj(int MixmagGreatestDjK)
			: this()
		{
			Bob.GetBobFromPrimaryKey(MixmagGreatestDjK);
		}
		#endregion

	}
	#endregion
	#region MixmagGreatestDjTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region MixmagGreatestDj
	/// <summary>
	/// DJs in the Greatest DJ poll
	/// </summary>
	[Serializable]
	public partial class MixmagGreatestDj 
	{
		
		#region Simple members
		/// <summary>
		/// Key
		/// </summary>
		public override int K
		{
			get { return (int)this[MixmagGreatestDj.Columns.K] as int? ?? 0 ; }
			set { this[MixmagGreatestDj.Columns.K] = value; }
		}
		/// <summary>
		/// Name in the url
		/// </summary>
		public override string UrlName
		{
			get { return (string)this[MixmagGreatestDj.Columns.UrlName]; }
			set { this[MixmagGreatestDj.Columns.UrlName] = value; }
		}
		/// <summary>
		/// Name of the DJ
		/// </summary>
		public override string Name
		{
			get { return (string)this[MixmagGreatestDj.Columns.Name]; }
			set { this[MixmagGreatestDj.Columns.Name] = value; }
		}
		/// <summary>
		/// Url of a small image
		/// </summary>
		public override string ImageUrl
		{
			get { return (string)this[MixmagGreatestDj.Columns.ImageUrl]; }
			set { this[MixmagGreatestDj.Columns.ImageUrl] = value; }
		}
		/// <summary>
		/// Youtube id of the video
		/// </summary>
		public override string YoutubeId
		{
			get { return (string)this[MixmagGreatestDj.Columns.YoutubeId]; }
			set { this[MixmagGreatestDj.Columns.YoutubeId] = value; }
		}
		/// <summary>
		/// Description
		/// </summary>
		public override string Description
		{
			get { return (string)this[MixmagGreatestDj.Columns.Description]; }
			set { this[MixmagGreatestDj.Columns.Description] = value; }
		}
		/// <summary>
		/// Long description
		/// </summary>
		public override string LongDescription
		{
			get { return (string)this[MixmagGreatestDj.Columns.LongDescription]; }
			set { this[MixmagGreatestDj.Columns.LongDescription] = value; }
		}
		/// <summary>
		/// Short description
		/// </summary>
		public override string ShortDescription
		{
			get { return (string)this[MixmagGreatestDj.Columns.ShortDescription]; }
			set { this[MixmagGreatestDj.Columns.ShortDescription] = value; }
		}
		/// <summary>
		/// Large image - should be 200px square
		/// </summary>
		public override string LargeImageUrl
		{
			get { return (string)this[MixmagGreatestDj.Columns.LargeImageUrl]; }
			set { this[MixmagGreatestDj.Columns.LargeImageUrl] = value; }
		}
		/// <summary>
		/// Image of the interviewer
		/// </summary>
		public override string InterviewImageUrl
		{
			get { return (string)this[MixmagGreatestDj.Columns.InterviewImageUrl]; }
			set { this[MixmagGreatestDj.Columns.InterviewImageUrl] = value; }
		}
		/// <summary>
		/// Twitter name of the artist
		/// </summary>
		public override string TwitterName
		{
			get { return (string)this[MixmagGreatestDj.Columns.TwitterName]; }
			set { this[MixmagGreatestDj.Columns.TwitterName] = value; }
		}
		/// <summary>
		/// Second youtube clip
		/// </summary>
		public override string YoutubeId2
		{
			get { return (string)this[MixmagGreatestDj.Columns.YoutubeId2]; }
			set { this[MixmagGreatestDj.Columns.YoutubeId2] = value; }
		}
		/// <summary>
		/// Total votes
		/// </summary>
		public override int? TotalVotes
		{
			get { return (int?)this[MixmagGreatestDj.Columns.TotalVotes]; }
			set { this[MixmagGreatestDj.Columns.TotalVotes] = value; }
		}
		/// <summary>
		/// Is this in the public nominated section?
		/// </summary>
		public override bool? IsPublicNominated
		{
			get { return (bool?)this[MixmagGreatestDj.Columns.IsPublicNominated]; }
			set { this[MixmagGreatestDj.Columns.IsPublicNominated] = value; }
		}
		/// <summary>
		/// Plural word - is / are
		/// </summary>
		public override string PluralWord
		{
			get { return (string)this[MixmagGreatestDj.Columns.PluralWord]; }
			set { this[MixmagGreatestDj.Columns.PluralWord] = value; }
		}
		/// <summary>
		/// Name short version
		/// </summary>
		public override string ShortName
		{
			get { return (string)this[MixmagGreatestDj.Columns.ShortName]; }
			set { this[MixmagGreatestDj.Columns.ShortName] = value; }
		}
		/// <summary>
		/// Stealth mode for wildly unpopular acts
		/// </summary>
		public override bool StealthMode
		{
			get { return (bool)this[MixmagGreatestDj.Columns.StealthMode]; }
			set { this[MixmagGreatestDj.Columns.StealthMode] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildMixmagGreatestDjs
	{
		CachedSqlSelect<MixmagGreatestDj> ChildMixmagGreatestDjs();
		CachedSqlSelect<MixmagGreatestDj> ChildMixmagGreatestDjs(Q where);
		CachedSqlSelect<MixmagGreatestDj> ChildMixmagGreatestDjs(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<MixmagGreatestDj> ChildMixmagGreatestDjs(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class MixmagGreatestDj 
	 : 
	Bobs.ChildInterfaces.IHasChildMixmagGreatestVotes
		{
			public CachedSqlSelect<MixmagGreatestVote> ChildMixmagGreatestVotes()
		{
			return this.ChildMixmagGreatestVotes(null, null);
		}
		public CachedSqlSelect<MixmagGreatestVote> ChildMixmagGreatestVotes(Q where)
		{
			return this.ChildMixmagGreatestVotes(where, null);
		}
		public CachedSqlSelect<MixmagGreatestVote> ChildMixmagGreatestVotes(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildMixmagGreatestVotes(null, orderBy);
		}
		public CachedSqlSelect<MixmagGreatestVote> ChildMixmagGreatestVotes(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<MixmagGreatestVote>
			(
				new Children<MixmagGreatestVote>
				(
					TablesEnum.MixmagGreatestDj, 
					this.K, 
					TablesEnum.MixmagGreatestVote, 
					dr => 
					{ 
						MixmagGreatestVote newMixmagGreatestVote = new MixmagGreatestVote(); 
						newMixmagGreatestVote.Initialise(dr); 
						return newMixmagGreatestVote;
					},
					"2BE68CF2",
					where,
					orderBy
				)
			);
		}
		}

	#region MixmagGreatestDjDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region MixmagGreatestDjDataHolder
	/// <summary>
	/// DJs in the Greatest DJ pollDataHolder
	/// </summary>
	[Serializable]
	public partial class MixmagGreatestDjDataHolder : DataHolder<MixmagGreatestDj>
	{
		MixmagGreatestDj dataHolder;
		[NonSerializedAttribute] MixmagGreatestDj bob;

		public MixmagGreatestDjDataHolder()
		{
			this.dataHolder = new MixmagGreatestDj();
		}
		
		void CopyValues(MixmagGreatestDj source, MixmagGreatestDj destination)
		{
			destination[Bobs.MixmagGreatestDj.Columns.K] = source[Bobs.MixmagGreatestDj.Columns.K];
			destination[Bobs.MixmagGreatestDj.Columns.UrlName] = source[Bobs.MixmagGreatestDj.Columns.UrlName];
			destination[Bobs.MixmagGreatestDj.Columns.Name] = source[Bobs.MixmagGreatestDj.Columns.Name];
			destination[Bobs.MixmagGreatestDj.Columns.ImageUrl] = source[Bobs.MixmagGreatestDj.Columns.ImageUrl];
			destination[Bobs.MixmagGreatestDj.Columns.YoutubeId] = source[Bobs.MixmagGreatestDj.Columns.YoutubeId];
			destination[Bobs.MixmagGreatestDj.Columns.Description] = source[Bobs.MixmagGreatestDj.Columns.Description];
			destination[Bobs.MixmagGreatestDj.Columns.LongDescription] = source[Bobs.MixmagGreatestDj.Columns.LongDescription];
			destination[Bobs.MixmagGreatestDj.Columns.ShortDescription] = source[Bobs.MixmagGreatestDj.Columns.ShortDescription];
			destination[Bobs.MixmagGreatestDj.Columns.LargeImageUrl] = source[Bobs.MixmagGreatestDj.Columns.LargeImageUrl];
			destination[Bobs.MixmagGreatestDj.Columns.InterviewImageUrl] = source[Bobs.MixmagGreatestDj.Columns.InterviewImageUrl];
			destination[Bobs.MixmagGreatestDj.Columns.TwitterName] = source[Bobs.MixmagGreatestDj.Columns.TwitterName];
			destination[Bobs.MixmagGreatestDj.Columns.YoutubeId2] = source[Bobs.MixmagGreatestDj.Columns.YoutubeId2];
			destination[Bobs.MixmagGreatestDj.Columns.TotalVotes] = source[Bobs.MixmagGreatestDj.Columns.TotalVotes];
			destination[Bobs.MixmagGreatestDj.Columns.IsPublicNominated] = source[Bobs.MixmagGreatestDj.Columns.IsPublicNominated];
			destination[Bobs.MixmagGreatestDj.Columns.PluralWord] = source[Bobs.MixmagGreatestDj.Columns.PluralWord];
			destination[Bobs.MixmagGreatestDj.Columns.ShortName] = source[Bobs.MixmagGreatestDj.Columns.ShortName];
			destination[Bobs.MixmagGreatestDj.Columns.StealthMode] = source[Bobs.MixmagGreatestDj.Columns.StealthMode];
		}
		
		public MixmagGreatestDjDataHolder(MixmagGreatestDj bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// Key
		/// </summary>
		public int K
		{
			get { return dataHolder.K; }
			set { this.dataHolder.K = value; }
		}
		/// <summary>
		/// Name in the url
		/// </summary>
		public string UrlName
		{
			get { return dataHolder.UrlName; }
			set { this.dataHolder.UrlName = value; }
		}
		/// <summary>
		/// Name of the DJ
		/// </summary>
		public string Name
		{
			get { return dataHolder.Name; }
			set { this.dataHolder.Name = value; }
		}
		/// <summary>
		/// Url of a small image
		/// </summary>
		public string ImageUrl
		{
			get { return dataHolder.ImageUrl; }
			set { this.dataHolder.ImageUrl = value; }
		}
		/// <summary>
		/// Youtube id of the video
		/// </summary>
		public string YoutubeId
		{
			get { return dataHolder.YoutubeId; }
			set { this.dataHolder.YoutubeId = value; }
		}
		/// <summary>
		/// Description
		/// </summary>
		public string Description
		{
			get { return dataHolder.Description; }
			set { this.dataHolder.Description = value; }
		}
		/// <summary>
		/// Long description
		/// </summary>
		public string LongDescription
		{
			get { return dataHolder.LongDescription; }
			set { this.dataHolder.LongDescription = value; }
		}
		/// <summary>
		/// Short description
		/// </summary>
		public string ShortDescription
		{
			get { return dataHolder.ShortDescription; }
			set { this.dataHolder.ShortDescription = value; }
		}
		/// <summary>
		/// Large image - should be 200px square
		/// </summary>
		public string LargeImageUrl
		{
			get { return dataHolder.LargeImageUrl; }
			set { this.dataHolder.LargeImageUrl = value; }
		}
		/// <summary>
		/// Image of the interviewer
		/// </summary>
		public string InterviewImageUrl
		{
			get { return dataHolder.InterviewImageUrl; }
			set { this.dataHolder.InterviewImageUrl = value; }
		}
		/// <summary>
		/// Twitter name of the artist
		/// </summary>
		public string TwitterName
		{
			get { return dataHolder.TwitterName; }
			set { this.dataHolder.TwitterName = value; }
		}
		/// <summary>
		/// Second youtube clip
		/// </summary>
		public string YoutubeId2
		{
			get { return dataHolder.YoutubeId2; }
			set { this.dataHolder.YoutubeId2 = value; }
		}
		/// <summary>
		/// Total votes
		/// </summary>
		public int? TotalVotes
		{
			get { return dataHolder.TotalVotes; }
			set { this.dataHolder.TotalVotes = value; }
		}
		/// <summary>
		/// Is this in the public nominated section?
		/// </summary>
		public bool? IsPublicNominated
		{
			get { return dataHolder.IsPublicNominated; }
			set { this.dataHolder.IsPublicNominated = value; }
		}
		/// <summary>
		/// Plural word - is / are
		/// </summary>
		public string PluralWord
		{
			get { return dataHolder.PluralWord; }
			set { this.dataHolder.PluralWord = value; }
		}
		/// <summary>
		/// Name short version
		/// </summary>
		public string ShortName
		{
			get { return dataHolder.ShortName; }
			set { this.dataHolder.ShortName = value; }
		}
		/// <summary>
		/// Stealth mode for wildly unpopular acts
		/// </summary>
		public bool StealthMode
		{
			get { return dataHolder.StealthMode; }
			set { this.dataHolder.StealthMode = value; }
		}
		#endregion
		public MixmagGreatestDj MixmagGreatestDj
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new MixmagGreatestDj(K);
					}
					else
					{
						bob = new MixmagGreatestDj();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region MixmagGreatestDjSet
	public partial class MixmagGreatestDjSet : BobSet, IEnumerable<MixmagGreatestDj>
	{
		public MixmagGreatestDjSet(Query query) : base(query) { }

		public MixmagGreatestDj this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new MixmagGreatestDj(this);
					((MixmagGreatestDj)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (MixmagGreatestDj)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new MixmagGreatestDjTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<MixmagGreatestDj> ToList()
		{
			List<MixmagGreatestDj> list = new List<MixmagGreatestDj>();
			foreach (MixmagGreatestDj item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<MixmagGreatestDj> Members

		public new IEnumerator<MixmagGreatestDj> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region MixmagGreatestDjTableDef
	public class MixmagGreatestDjTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "MixmagGreatestDj";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "517C0CA5";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return MixmagGreatestDj.GetColumnName((MixmagGreatestDj.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.MixmagGreatestDj;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return true;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return MixmagGreatestDj.Columns.K;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			MixmagGreatestDj.Columns c = (MixmagGreatestDj.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case MixmagGreatestDj.Columns.K: ColumnStore[i] = new ColumnDef(c, "K", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey | SqlColumnFlag.AutoNumber, null); break;
					case MixmagGreatestDj.Columns.UrlName: ColumnStore[i] = new ColumnDef(c, "UrlName", SqlDbType.VarChar, 255, null); break;
					case MixmagGreatestDj.Columns.Name: ColumnStore[i] = new ColumnDef(c, "Name", SqlDbType.VarChar, 255, null); break;
					case MixmagGreatestDj.Columns.ImageUrl: ColumnStore[i] = new ColumnDef(c, "ImageUrl", SqlDbType.VarChar, 255, null); break;
					case MixmagGreatestDj.Columns.YoutubeId: ColumnStore[i] = new ColumnDef(c, "YoutubeId", SqlDbType.VarChar, 255, null); break;
					case MixmagGreatestDj.Columns.Description: ColumnStore[i] = new ColumnDef(c, "Description", SqlDbType.Text, null); break;
					case MixmagGreatestDj.Columns.LongDescription: ColumnStore[i] = new ColumnDef(c, "LongDescription", SqlDbType.Text, null); break;
					case MixmagGreatestDj.Columns.ShortDescription: ColumnStore[i] = new ColumnDef(c, "ShortDescription", SqlDbType.Text, null); break;
					case MixmagGreatestDj.Columns.LargeImageUrl: ColumnStore[i] = new ColumnDef(c, "LargeImageUrl", SqlDbType.VarChar, 200, null); break;
					case MixmagGreatestDj.Columns.InterviewImageUrl: ColumnStore[i] = new ColumnDef(c, "InterviewImageUrl", SqlDbType.VarChar, 200, null); break;
					case MixmagGreatestDj.Columns.TwitterName: ColumnStore[i] = new ColumnDef(c, "TwitterName", SqlDbType.VarChar, 255, null); break;
					case MixmagGreatestDj.Columns.YoutubeId2: ColumnStore[i] = new ColumnDef(c, "YoutubeId2", SqlDbType.VarChar, 255, null); break;
					case MixmagGreatestDj.Columns.TotalVotes: ColumnStore[i] = new ColumnDef(c, "TotalVotes", SqlDbType.Int, null); break;
					case MixmagGreatestDj.Columns.IsPublicNominated: ColumnStore[i] = new ColumnDef(c, "IsPublicNominated", SqlDbType.Bit, null); break;
					case MixmagGreatestDj.Columns.PluralWord: ColumnStore[i] = new ColumnDef(c, "PluralWord", SqlDbType.VarChar, 255, null); break;
					case MixmagGreatestDj.Columns.ShortName: ColumnStore[i] = new ColumnDef(c, "ShortName", SqlDbType.VarChar, 255, null); break;
					case MixmagGreatestDj.Columns.StealthMode: ColumnStore[i] = new ColumnDef(c, "StealthMode", SqlDbType.Bit, false); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(MixmagGreatestDj.Columns.K);
						InitColumn(MixmagGreatestDj.Columns.UrlName);
						InitColumn(MixmagGreatestDj.Columns.Name);
						InitColumn(MixmagGreatestDj.Columns.ImageUrl);
						InitColumn(MixmagGreatestDj.Columns.YoutubeId);
						InitColumn(MixmagGreatestDj.Columns.Description);
						InitColumn(MixmagGreatestDj.Columns.LongDescription);
						InitColumn(MixmagGreatestDj.Columns.ShortDescription);
						InitColumn(MixmagGreatestDj.Columns.LargeImageUrl);
						InitColumn(MixmagGreatestDj.Columns.InterviewImageUrl);
						InitColumn(MixmagGreatestDj.Columns.TwitterName);
						InitColumn(MixmagGreatestDj.Columns.YoutubeId2);
						InitColumn(MixmagGreatestDj.Columns.TotalVotes);
						InitColumn(MixmagGreatestDj.Columns.IsPublicNominated);
						InitColumn(MixmagGreatestDj.Columns.PluralWord);
						InitColumn(MixmagGreatestDj.Columns.ShortName);
						InitColumn(MixmagGreatestDj.Columns.StealthMode);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region MixmagGreatestVote
	/// <summary>
	/// Vote for the mixmag greatest DJ competition
	/// </summary>
	public partial class MixmagGreatestVote : Model.Entities.MixmagGreatestVote, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// Facebook unique id
			/// </summary>
			FacebookUid = 0x00380001,
			/// <summary>
			/// DJ that they voted for
			/// </summary>
			MixmagGreatestDjK = 0x00380002,
			/// <summary>
			/// Date time they voted
			/// </summary>
			DateTime = 0x00380003,
			/// <summary>
			/// Did we post to their facebook wall?
			/// </summary>
			DidWallPost = 0x00380004,
			/// <summary>
			/// Their email address from Facebook
			/// </summary>
			FacebookEmail = 0x00380005,
			/// <summary>
			/// Do we have wall post permission?
			/// </summary>
			WallPostPermission = 0x00380006,
			/// <summary>
			/// Do we have email send permission?
			/// </summary>
			EmailPermission = 0x00380007,
			/// <summary>
			/// Did this vote come from a facebook wall post?
			/// </summary>
			FacebookSource = 0x00380008,
		}
		#endregion
		public static string GetColumnName(MixmagGreatestVote.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case MixmagGreatestVote.Columns.FacebookUid: return "FacebookUid";
						case MixmagGreatestVote.Columns.MixmagGreatestDjK: return "MixmagGreatestDjK";
						case MixmagGreatestVote.Columns.DateTime: return "DateTime";
						case MixmagGreatestVote.Columns.DidWallPost: return "DidWallPost";
						case MixmagGreatestVote.Columns.FacebookEmail: return "FacebookEmail";
						case MixmagGreatestVote.Columns.WallPostPermission: return "WallPostPermission";
						case MixmagGreatestVote.Columns.EmailPermission: return "EmailPermission";
						case MixmagGreatestVote.Columns.FacebookSource: return "FacebookSource";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(MixmagGreatestVote.Columns columnEnum)
		{
			switch (columnEnum)
			{
												default: return false;
			}
		}


		#region Common
 
		public MixmagGreatestVote(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);  }
		public MixmagGreatestVote()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.MixmagGreatestVote);
		}
		public MixmagGreatestVote(BobSet bs)
		{
			this.Bob = new Bob(bs.Table, bs);
		}
		public MixmagGreatestVote(long MixmagGreatestVoteFacebookUid, IBob Parent, object Column)
			: this()
		{
			Bob.GetBobFromParent(MixmagGreatestVoteFacebookUid, Parent.Bob, Column, TablesEnum.MixmagGreatestVote);
		}
		public MixmagGreatestVote(long MixmagGreatestVoteFacebookUid)
			: this()
		{
			Bob.GetBobFromPrimaryKey(MixmagGreatestVoteFacebookUid);
		}
		#endregion

	}
	#endregion
	#region MixmagGreatestVoteTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region MixmagGreatestVote
	/// <summary>
	/// Vote for the mixmag greatest DJ competition
	/// </summary>
	[Serializable]
	public partial class MixmagGreatestVote 
	{
		
		#region Simple members
		/// <summary>
		/// Facebook unique id
		/// </summary>
		public override long FacebookUid
		{
			get { return (long)this[MixmagGreatestVote.Columns.FacebookUid]; }
			set { this[MixmagGreatestVote.Columns.FacebookUid] = value; }
		}
		/// <summary>
		/// DJ that they voted for
		/// </summary>
		public override int MixmagGreatestDjK
		{
			get { return (int)this[MixmagGreatestVote.Columns.MixmagGreatestDjK]; }
			set { this[MixmagGreatestVote.Columns.MixmagGreatestDjK] = value; }
		}
		/// <summary>
		/// Date time they voted
		/// </summary>
		public override DateTime? DateTime
		{
			get { return (DateTime?)this[MixmagGreatestVote.Columns.DateTime]; }
			set { this[MixmagGreatestVote.Columns.DateTime] = value; }
		}
		/// <summary>
		/// Did we post to their facebook wall?
		/// </summary>
		public override bool? DidWallPost
		{
			get { return (bool?)this[MixmagGreatestVote.Columns.DidWallPost]; }
			set { this[MixmagGreatestVote.Columns.DidWallPost] = value; }
		}
		/// <summary>
		/// Their email address from Facebook
		/// </summary>
		public override string FacebookEmail
		{
			get { return (string)this[MixmagGreatestVote.Columns.FacebookEmail]; }
			set { this[MixmagGreatestVote.Columns.FacebookEmail] = value; }
		}
		/// <summary>
		/// Do we have wall post permission?
		/// </summary>
		public override bool? WallPostPermission
		{
			get { return (bool?)this[MixmagGreatestVote.Columns.WallPostPermission]; }
			set { this[MixmagGreatestVote.Columns.WallPostPermission] = value; }
		}
		/// <summary>
		/// Do we have email send permission?
		/// </summary>
		public override bool? EmailPermission
		{
			get { return (bool?)this[MixmagGreatestVote.Columns.EmailPermission]; }
			set { this[MixmagGreatestVote.Columns.EmailPermission] = value; }
		}
		/// <summary>
		/// Did this vote come from a facebook wall post?
		/// </summary>
		public override bool? FacebookSource
		{
			get { return (bool?)this[MixmagGreatestVote.Columns.FacebookSource]; }
			set { this[MixmagGreatestVote.Columns.FacebookSource] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildMixmagGreatestVotes
	{
		CachedSqlSelect<MixmagGreatestVote> ChildMixmagGreatestVotes();
		CachedSqlSelect<MixmagGreatestVote> ChildMixmagGreatestVotes(Q where);
		CachedSqlSelect<MixmagGreatestVote> ChildMixmagGreatestVotes(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<MixmagGreatestVote> ChildMixmagGreatestVotes(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class MixmagGreatestVote 
		{
		}

	#region MixmagGreatestVoteDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region MixmagGreatestVoteDataHolder
	/// <summary>
	/// Vote for the mixmag greatest DJ competitionDataHolder
	/// </summary>
	[Serializable]
	public partial class MixmagGreatestVoteDataHolder : DataHolder<MixmagGreatestVote>
	{
		MixmagGreatestVote dataHolder;
		[NonSerializedAttribute] MixmagGreatestVote bob;

		public MixmagGreatestVoteDataHolder()
		{
			this.dataHolder = new MixmagGreatestVote();
		}
		
		void CopyValues(MixmagGreatestVote source, MixmagGreatestVote destination)
		{
			destination[Bobs.MixmagGreatestVote.Columns.FacebookUid] = source[Bobs.MixmagGreatestVote.Columns.FacebookUid];
			destination[Bobs.MixmagGreatestVote.Columns.MixmagGreatestDjK] = source[Bobs.MixmagGreatestVote.Columns.MixmagGreatestDjK];
			destination[Bobs.MixmagGreatestVote.Columns.DateTime] = source[Bobs.MixmagGreatestVote.Columns.DateTime];
			destination[Bobs.MixmagGreatestVote.Columns.DidWallPost] = source[Bobs.MixmagGreatestVote.Columns.DidWallPost];
			destination[Bobs.MixmagGreatestVote.Columns.FacebookEmail] = source[Bobs.MixmagGreatestVote.Columns.FacebookEmail];
			destination[Bobs.MixmagGreatestVote.Columns.WallPostPermission] = source[Bobs.MixmagGreatestVote.Columns.WallPostPermission];
			destination[Bobs.MixmagGreatestVote.Columns.EmailPermission] = source[Bobs.MixmagGreatestVote.Columns.EmailPermission];
			destination[Bobs.MixmagGreatestVote.Columns.FacebookSource] = source[Bobs.MixmagGreatestVote.Columns.FacebookSource];
		}
		
		public MixmagGreatestVoteDataHolder(MixmagGreatestVote bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// Facebook unique id
		/// </summary>
		public long FacebookUid
		{
			get { return dataHolder.FacebookUid; }
			set { this.dataHolder.FacebookUid = value; }
		}
		/// <summary>
		/// DJ that they voted for
		/// </summary>
		public int MixmagGreatestDjK
		{
			get { return dataHolder.MixmagGreatestDjK; }
			set { this.dataHolder.MixmagGreatestDjK = value; }
		}
		/// <summary>
		/// Date time they voted
		/// </summary>
		public DateTime? DateTime
		{
			get { return dataHolder.DateTime; }
			set { this.dataHolder.DateTime = value; }
		}
		/// <summary>
		/// Did we post to their facebook wall?
		/// </summary>
		public bool? DidWallPost
		{
			get { return dataHolder.DidWallPost; }
			set { this.dataHolder.DidWallPost = value; }
		}
		/// <summary>
		/// Their email address from Facebook
		/// </summary>
		public string FacebookEmail
		{
			get { return dataHolder.FacebookEmail; }
			set { this.dataHolder.FacebookEmail = value; }
		}
		/// <summary>
		/// Do we have wall post permission?
		/// </summary>
		public bool? WallPostPermission
		{
			get { return dataHolder.WallPostPermission; }
			set { this.dataHolder.WallPostPermission = value; }
		}
		/// <summary>
		/// Do we have email send permission?
		/// </summary>
		public bool? EmailPermission
		{
			get { return dataHolder.EmailPermission; }
			set { this.dataHolder.EmailPermission = value; }
		}
		/// <summary>
		/// Did this vote come from a facebook wall post?
		/// </summary>
		public bool? FacebookSource
		{
			get { return dataHolder.FacebookSource; }
			set { this.dataHolder.FacebookSource = value; }
		}
		#endregion
		public MixmagGreatestVote MixmagGreatestVote
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new MixmagGreatestVote(K);
					}
					else
					{
						bob = new MixmagGreatestVote();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region MixmagGreatestVoteSet
	public partial class MixmagGreatestVoteSet : BobSet, IEnumerable<MixmagGreatestVote>
	{
		public MixmagGreatestVoteSet(Query query) : base(query) { }

		public MixmagGreatestVote this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new MixmagGreatestVote(this);
					((MixmagGreatestVote)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (MixmagGreatestVote)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new MixmagGreatestVoteTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<MixmagGreatestVote> ToList()
		{
			List<MixmagGreatestVote> list = new List<MixmagGreatestVote>();
			foreach (MixmagGreatestVote item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<MixmagGreatestVote> Members

		public new IEnumerator<MixmagGreatestVote> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region MixmagGreatestVoteTableDef
	public class MixmagGreatestVoteTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "MixmagGreatestVote";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "2BE68CF2";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return MixmagGreatestVote.GetColumnName((MixmagGreatestVote.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.MixmagGreatestVote;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return true;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return MixmagGreatestVote.Columns.FacebookUid;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			MixmagGreatestVote.Columns c = (MixmagGreatestVote.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case MixmagGreatestVote.Columns.FacebookUid: ColumnStore[i] = new ColumnDef(c, "FacebookUid", SqlDbType.BigInt, 8, SqlColumnFlag.PrimaryKey, null); break;
					case MixmagGreatestVote.Columns.MixmagGreatestDjK: ColumnStore[i] = new ColumnDef(c, "MixmagGreatestDjK", SqlDbType.Int, null); break;
					case MixmagGreatestVote.Columns.DateTime: ColumnStore[i] = new ColumnDef(c, "DateTime", SqlDbType.DateTime, 16, null); break;
					case MixmagGreatestVote.Columns.DidWallPost: ColumnStore[i] = new ColumnDef(c, "DidWallPost", SqlDbType.Bit, null); break;
					case MixmagGreatestVote.Columns.FacebookEmail: ColumnStore[i] = new ColumnDef(c, "FacebookEmail", SqlDbType.VarChar, 255, null); break;
					case MixmagGreatestVote.Columns.WallPostPermission: ColumnStore[i] = new ColumnDef(c, "WallPostPermission", SqlDbType.Bit, null); break;
					case MixmagGreatestVote.Columns.EmailPermission: ColumnStore[i] = new ColumnDef(c, "EmailPermission", SqlDbType.Bit, null); break;
					case MixmagGreatestVote.Columns.FacebookSource: ColumnStore[i] = new ColumnDef(c, "FacebookSource", SqlDbType.Bit, null); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(MixmagGreatestVote.Columns.FacebookUid);
						InitColumn(MixmagGreatestVote.Columns.MixmagGreatestDjK);
						InitColumn(MixmagGreatestVote.Columns.DateTime);
						InitColumn(MixmagGreatestVote.Columns.DidWallPost);
						InitColumn(MixmagGreatestVote.Columns.FacebookEmail);
						InitColumn(MixmagGreatestVote.Columns.WallPostPermission);
						InitColumn(MixmagGreatestVote.Columns.EmailPermission);
						InitColumn(MixmagGreatestVote.Columns.FacebookSource);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region MixmagIssue
	/// <summary>
	/// Each Mixmag issue has a record in here
	/// </summary>
	public partial class MixmagIssue : Model.Entities.MixmagIssue, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// Primary key
			/// </summary>
			K = 0x00390001,
			/// <summary>
			/// URL of the Ceros content
			/// </summary>
			CerosUrl = 0x00390002,
			/// <summary>
			/// If this is not set, the email won't send and it won't be available as a back-issue
			/// </summary>
			Ready = 0x00390003,
			/// <summary>
			/// When we're queued to send the email, and make available as a back-issue
			/// </summary>
			DateTimeSend = 0x00390004,
			/// <summary>
			/// The date on the cover (usually the month after when it's sent)
			/// </summary>
			IssueCoverDate = 0x00390005,
			/// <summary>
			/// Total sends
			/// </summary>
			TotalSent = 0x00390006,
			/// <summary>
			/// Total reads
			/// </summary>
			TotalRead = 0x00390007,
			/// <summary>
			/// Is the issue currently sending?
			/// </summary>
			SendingNow = 0x00390008,
			/// <summary>
			/// Has the issue finished sending?
			/// </summary>
			SendingFinished = 0x00390009,
			/// <summary>
			/// Date / time of the last send
			/// </summary>
			LastSendDateTime = 0x0039000a,
			/// <summary>
			/// Short text description of the contents
			/// </summary>
			Summary = 0x0039000b,
			/// <summary>
			/// Url of an image of the cover. MUST be 194px x 254px.
			/// </summary>
			CoverImageUrl = 0x0039000c,
			/// <summary>
			/// Data used to show the contents.
			/// </summary>
			ContentsData = 0x0039000d,
			/// <summary>
			/// Note shown under the link on the listings page
			/// </summary>
			IssueNote = 0x0039000e,
			/// <summary>
			/// If there are multiple covers, this is the ID
			/// </summary>
			IssueCoverId = 0x0039000f,
		}
		#endregion
		public static string GetColumnName(MixmagIssue.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case MixmagIssue.Columns.K: return "K";
						case MixmagIssue.Columns.CerosUrl: return "CerosUrl";
						case MixmagIssue.Columns.Ready: return "Ready";
						case MixmagIssue.Columns.DateTimeSend: return "DateTimeSend";
						case MixmagIssue.Columns.IssueCoverDate: return "IssueCoverDate";
						case MixmagIssue.Columns.TotalSent: return "TotalSent";
						case MixmagIssue.Columns.TotalRead: return "TotalRead";
						case MixmagIssue.Columns.SendingNow: return "SendingNow";
						case MixmagIssue.Columns.SendingFinished: return "SendingFinished";
						case MixmagIssue.Columns.LastSendDateTime: return "LastSendDateTime";
						case MixmagIssue.Columns.Summary: return "Summary";
						case MixmagIssue.Columns.CoverImageUrl: return "CoverImageUrl";
						case MixmagIssue.Columns.ContentsData: return "ContentsData";
						case MixmagIssue.Columns.IssueNote: return "IssueNote";
						case MixmagIssue.Columns.IssueCoverId: return "IssueCoverId";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(MixmagIssue.Columns columnEnum)
		{
			switch (columnEnum)
			{
																			default: return false;
			}
		}


		#region Common
 
		public MixmagIssue(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);  }
		public MixmagIssue()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.MixmagIssue);
		}
		public MixmagIssue(BobSet bs)
		{
			this.Bob = new Bob(bs.Table, bs);
		}
		public MixmagIssue(int MixmagIssueK, IBob Parent, object Column)
			: this()
		{
			Bob.GetBobFromParent(MixmagIssueK, Parent.Bob, Column, TablesEnum.MixmagIssue);
		}
		public MixmagIssue(int MixmagIssueK)
			: this()
		{
			Bob.GetBobFromPrimaryKey(MixmagIssueK);
		}
		#endregion

	}
	#endregion
	#region MixmagIssueTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region MixmagIssue
	/// <summary>
	/// Each Mixmag issue has a record in here
	/// </summary>
	[Serializable]
	public partial class MixmagIssue 
	{
		
		#region Simple members
		/// <summary>
		/// Primary key
		/// </summary>
		public override int K
		{
			get { return (int)this[MixmagIssue.Columns.K] as int? ?? 0 ; }
			set { this[MixmagIssue.Columns.K] = value; }
		}
		/// <summary>
		/// URL of the Ceros content
		/// </summary>
		public override string CerosUrl
		{
			get { return (string)this[MixmagIssue.Columns.CerosUrl]; }
			set { this[MixmagIssue.Columns.CerosUrl] = value; }
		}
		/// <summary>
		/// If this is not set, the email won't send and it won't be available as a back-issue
		/// </summary>
		public override bool? Ready
		{
			get { return (bool?)this[MixmagIssue.Columns.Ready]; }
			set { this[MixmagIssue.Columns.Ready] = value; }
		}
		/// <summary>
		/// When we're queued to send the email, and make available as a back-issue
		/// </summary>
		public override DateTime? DateTimeSend
		{
			get { return (DateTime?)this[MixmagIssue.Columns.DateTimeSend]; }
			set { this[MixmagIssue.Columns.DateTimeSend] = value; }
		}
		/// <summary>
		/// The date on the cover (usually the month after when it's sent)
		/// </summary>
		public override DateTime? IssueCoverDate
		{
			get { return (DateTime?)this[MixmagIssue.Columns.IssueCoverDate]; }
			set { this[MixmagIssue.Columns.IssueCoverDate] = value; }
		}
		/// <summary>
		/// Total sends
		/// </summary>
		public override int? TotalSent
		{
			get { return (int?)this[MixmagIssue.Columns.TotalSent]; }
			set { this[MixmagIssue.Columns.TotalSent] = value; }
		}
		/// <summary>
		/// Total reads
		/// </summary>
		public override int? TotalRead
		{
			get { return (int?)this[MixmagIssue.Columns.TotalRead]; }
			set { this[MixmagIssue.Columns.TotalRead] = value; }
		}
		/// <summary>
		/// Is the issue currently sending?
		/// </summary>
		public override bool? SendingNow
		{
			get { return (bool?)this[MixmagIssue.Columns.SendingNow]; }
			set { this[MixmagIssue.Columns.SendingNow] = value; }
		}
		/// <summary>
		/// Has the issue finished sending?
		/// </summary>
		public override bool? SendingFinished
		{
			get { return (bool?)this[MixmagIssue.Columns.SendingFinished]; }
			set { this[MixmagIssue.Columns.SendingFinished] = value; }
		}
		/// <summary>
		/// Date / time of the last send
		/// </summary>
		public override DateTime? LastSendDateTime
		{
			get { return (DateTime?)this[MixmagIssue.Columns.LastSendDateTime]; }
			set { this[MixmagIssue.Columns.LastSendDateTime] = value; }
		}
		/// <summary>
		/// Short text description of the contents
		/// </summary>
		public override string Summary
		{
			get { return (string)this[MixmagIssue.Columns.Summary]; }
			set { this[MixmagIssue.Columns.Summary] = value; }
		}
		/// <summary>
		/// Url of an image of the cover. MUST be 194px x 254px.
		/// </summary>
		public override string CoverImageUrl
		{
			get { return (string)this[MixmagIssue.Columns.CoverImageUrl]; }
			set { this[MixmagIssue.Columns.CoverImageUrl] = value; }
		}
		/// <summary>
		/// Data used to show the contents.
		/// </summary>
		public override string ContentsData
		{
			get { return (string)this[MixmagIssue.Columns.ContentsData]; }
			set { this[MixmagIssue.Columns.ContentsData] = value; }
		}
		/// <summary>
		/// Note shown under the link on the listings page
		/// </summary>
		public override string IssueNote
		{
			get { return (string)this[MixmagIssue.Columns.IssueNote]; }
			set { this[MixmagIssue.Columns.IssueNote] = value; }
		}
		/// <summary>
		/// If there are multiple covers, this is the ID
		/// </summary>
		public override int? IssueCoverId
		{
			get { return (int?)this[MixmagIssue.Columns.IssueCoverId]; }
			set { this[MixmagIssue.Columns.IssueCoverId] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildMixmagIssues
	{
		CachedSqlSelect<MixmagIssue> ChildMixmagIssues();
		CachedSqlSelect<MixmagIssue> ChildMixmagIssues(Q where);
		CachedSqlSelect<MixmagIssue> ChildMixmagIssues(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<MixmagIssue> ChildMixmagIssues(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class MixmagIssue 
	 : 
	Bobs.ChildInterfaces.IHasChildMixmagReads
		{
			public CachedSqlSelect<MixmagRead> ChildMixmagReads()
		{
			return this.ChildMixmagReads(null, null);
		}
		public CachedSqlSelect<MixmagRead> ChildMixmagReads(Q where)
		{
			return this.ChildMixmagReads(where, null);
		}
		public CachedSqlSelect<MixmagRead> ChildMixmagReads(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildMixmagReads(null, orderBy);
		}
		public CachedSqlSelect<MixmagRead> ChildMixmagReads(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<MixmagRead>
			(
				new Children<MixmagRead>
				(
					TablesEnum.MixmagIssue, 
					this.K, 
					TablesEnum.MixmagRead, 
					dr => 
					{ 
						MixmagRead newMixmagRead = new MixmagRead(); 
						newMixmagRead.Initialise(dr); 
						return newMixmagRead;
					},
					"6BC24996",
					where,
					orderBy
				)
			);
		}
		}

	#region MixmagIssueDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region MixmagIssueDataHolder
	/// <summary>
	/// Each Mixmag issue has a record in hereDataHolder
	/// </summary>
	[Serializable]
	public partial class MixmagIssueDataHolder : DataHolder<MixmagIssue>
	{
		MixmagIssue dataHolder;
		[NonSerializedAttribute] MixmagIssue bob;

		public MixmagIssueDataHolder()
		{
			this.dataHolder = new MixmagIssue();
		}
		
		void CopyValues(MixmagIssue source, MixmagIssue destination)
		{
			destination[Bobs.MixmagIssue.Columns.K] = source[Bobs.MixmagIssue.Columns.K];
			destination[Bobs.MixmagIssue.Columns.CerosUrl] = source[Bobs.MixmagIssue.Columns.CerosUrl];
			destination[Bobs.MixmagIssue.Columns.Ready] = source[Bobs.MixmagIssue.Columns.Ready];
			destination[Bobs.MixmagIssue.Columns.DateTimeSend] = source[Bobs.MixmagIssue.Columns.DateTimeSend];
			destination[Bobs.MixmagIssue.Columns.IssueCoverDate] = source[Bobs.MixmagIssue.Columns.IssueCoverDate];
			destination[Bobs.MixmagIssue.Columns.TotalSent] = source[Bobs.MixmagIssue.Columns.TotalSent];
			destination[Bobs.MixmagIssue.Columns.TotalRead] = source[Bobs.MixmagIssue.Columns.TotalRead];
			destination[Bobs.MixmagIssue.Columns.SendingNow] = source[Bobs.MixmagIssue.Columns.SendingNow];
			destination[Bobs.MixmagIssue.Columns.SendingFinished] = source[Bobs.MixmagIssue.Columns.SendingFinished];
			destination[Bobs.MixmagIssue.Columns.LastSendDateTime] = source[Bobs.MixmagIssue.Columns.LastSendDateTime];
			destination[Bobs.MixmagIssue.Columns.Summary] = source[Bobs.MixmagIssue.Columns.Summary];
			destination[Bobs.MixmagIssue.Columns.CoverImageUrl] = source[Bobs.MixmagIssue.Columns.CoverImageUrl];
			destination[Bobs.MixmagIssue.Columns.ContentsData] = source[Bobs.MixmagIssue.Columns.ContentsData];
			destination[Bobs.MixmagIssue.Columns.IssueNote] = source[Bobs.MixmagIssue.Columns.IssueNote];
			destination[Bobs.MixmagIssue.Columns.IssueCoverId] = source[Bobs.MixmagIssue.Columns.IssueCoverId];
		}
		
		public MixmagIssueDataHolder(MixmagIssue bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// Primary key
		/// </summary>
		public int K
		{
			get { return dataHolder.K; }
			set { this.dataHolder.K = value; }
		}
		/// <summary>
		/// URL of the Ceros content
		/// </summary>
		public string CerosUrl
		{
			get { return dataHolder.CerosUrl; }
			set { this.dataHolder.CerosUrl = value; }
		}
		/// <summary>
		/// If this is not set, the email won't send and it won't be available as a back-issue
		/// </summary>
		public bool? Ready
		{
			get { return dataHolder.Ready; }
			set { this.dataHolder.Ready = value; }
		}
		/// <summary>
		/// When we're queued to send the email, and make available as a back-issue
		/// </summary>
		public DateTime? DateTimeSend
		{
			get { return dataHolder.DateTimeSend; }
			set { this.dataHolder.DateTimeSend = value; }
		}
		/// <summary>
		/// The date on the cover (usually the month after when it's sent)
		/// </summary>
		public DateTime? IssueCoverDate
		{
			get { return dataHolder.IssueCoverDate; }
			set { this.dataHolder.IssueCoverDate = value; }
		}
		/// <summary>
		/// Total sends
		/// </summary>
		public int? TotalSent
		{
			get { return dataHolder.TotalSent; }
			set { this.dataHolder.TotalSent = value; }
		}
		/// <summary>
		/// Total reads
		/// </summary>
		public int? TotalRead
		{
			get { return dataHolder.TotalRead; }
			set { this.dataHolder.TotalRead = value; }
		}
		/// <summary>
		/// Is the issue currently sending?
		/// </summary>
		public bool? SendingNow
		{
			get { return dataHolder.SendingNow; }
			set { this.dataHolder.SendingNow = value; }
		}
		/// <summary>
		/// Has the issue finished sending?
		/// </summary>
		public bool? SendingFinished
		{
			get { return dataHolder.SendingFinished; }
			set { this.dataHolder.SendingFinished = value; }
		}
		/// <summary>
		/// Date / time of the last send
		/// </summary>
		public DateTime? LastSendDateTime
		{
			get { return dataHolder.LastSendDateTime; }
			set { this.dataHolder.LastSendDateTime = value; }
		}
		/// <summary>
		/// Short text description of the contents
		/// </summary>
		public string Summary
		{
			get { return dataHolder.Summary; }
			set { this.dataHolder.Summary = value; }
		}
		/// <summary>
		/// Url of an image of the cover. MUST be 194px x 254px.
		/// </summary>
		public string CoverImageUrl
		{
			get { return dataHolder.CoverImageUrl; }
			set { this.dataHolder.CoverImageUrl = value; }
		}
		/// <summary>
		/// Data used to show the contents.
		/// </summary>
		public string ContentsData
		{
			get { return dataHolder.ContentsData; }
			set { this.dataHolder.ContentsData = value; }
		}
		/// <summary>
		/// Note shown under the link on the listings page
		/// </summary>
		public string IssueNote
		{
			get { return dataHolder.IssueNote; }
			set { this.dataHolder.IssueNote = value; }
		}
		/// <summary>
		/// If there are multiple covers, this is the ID
		/// </summary>
		public int? IssueCoverId
		{
			get { return dataHolder.IssueCoverId; }
			set { this.dataHolder.IssueCoverId = value; }
		}
		#endregion
		public MixmagIssue MixmagIssue
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new MixmagIssue(K);
					}
					else
					{
						bob = new MixmagIssue();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region MixmagIssueSet
	public partial class MixmagIssueSet : BobSet, IEnumerable<MixmagIssue>
	{
		public MixmagIssueSet(Query query) : base(query) { }

		public MixmagIssue this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new MixmagIssue(this);
					((MixmagIssue)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (MixmagIssue)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new MixmagIssueTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<MixmagIssue> ToList()
		{
			List<MixmagIssue> list = new List<MixmagIssue>();
			foreach (MixmagIssue item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<MixmagIssue> Members

		public new IEnumerator<MixmagIssue> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region MixmagIssueTableDef
	public class MixmagIssueTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "MixmagIssue";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "96A53D9E";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return MixmagIssue.GetColumnName((MixmagIssue.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.MixmagIssue;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return true;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return MixmagIssue.Columns.K;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			MixmagIssue.Columns c = (MixmagIssue.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case MixmagIssue.Columns.K: ColumnStore[i] = new ColumnDef(c, "K", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey | SqlColumnFlag.AutoNumber, null); break;
					case MixmagIssue.Columns.CerosUrl: ColumnStore[i] = new ColumnDef(c, "CerosUrl", SqlDbType.VarChar, 255, null); break;
					case MixmagIssue.Columns.Ready: ColumnStore[i] = new ColumnDef(c, "Ready", SqlDbType.Bit, null); break;
					case MixmagIssue.Columns.DateTimeSend: ColumnStore[i] = new ColumnDef(c, "DateTimeSend", SqlDbType.DateTime, 16, null); break;
					case MixmagIssue.Columns.IssueCoverDate: ColumnStore[i] = new ColumnDef(c, "IssueCoverDate", SqlDbType.DateTime, 16, null); break;
					case MixmagIssue.Columns.TotalSent: ColumnStore[i] = new ColumnDef(c, "TotalSent", SqlDbType.Int, null); break;
					case MixmagIssue.Columns.TotalRead: ColumnStore[i] = new ColumnDef(c, "TotalRead", SqlDbType.Int, null); break;
					case MixmagIssue.Columns.SendingNow: ColumnStore[i] = new ColumnDef(c, "SendingNow", SqlDbType.Bit, null); break;
					case MixmagIssue.Columns.SendingFinished: ColumnStore[i] = new ColumnDef(c, "SendingFinished", SqlDbType.Bit, null); break;
					case MixmagIssue.Columns.LastSendDateTime: ColumnStore[i] = new ColumnDef(c, "LastSendDateTime", SqlDbType.DateTime, 16, null); break;
					case MixmagIssue.Columns.Summary: ColumnStore[i] = new ColumnDef(c, "Summary", SqlDbType.VarChar, 255, null); break;
					case MixmagIssue.Columns.CoverImageUrl: ColumnStore[i] = new ColumnDef(c, "CoverImageUrl", SqlDbType.VarChar, 255, null); break;
					case MixmagIssue.Columns.ContentsData: ColumnStore[i] = new ColumnDef(c, "ContentsData", SqlDbType.Text, null); break;
					case MixmagIssue.Columns.IssueNote: ColumnStore[i] = new ColumnDef(c, "IssueNote", SqlDbType.VarChar, 1000, null); break;
					case MixmagIssue.Columns.IssueCoverId: ColumnStore[i] = new ColumnDef(c, "IssueCoverId", SqlDbType.Int, null); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(MixmagIssue.Columns.K);
						InitColumn(MixmagIssue.Columns.CerosUrl);
						InitColumn(MixmagIssue.Columns.Ready);
						InitColumn(MixmagIssue.Columns.DateTimeSend);
						InitColumn(MixmagIssue.Columns.IssueCoverDate);
						InitColumn(MixmagIssue.Columns.TotalSent);
						InitColumn(MixmagIssue.Columns.TotalRead);
						InitColumn(MixmagIssue.Columns.SendingNow);
						InitColumn(MixmagIssue.Columns.SendingFinished);
						InitColumn(MixmagIssue.Columns.LastSendDateTime);
						InitColumn(MixmagIssue.Columns.Summary);
						InitColumn(MixmagIssue.Columns.CoverImageUrl);
						InitColumn(MixmagIssue.Columns.ContentsData);
						InitColumn(MixmagIssue.Columns.IssueNote);
						InitColumn(MixmagIssue.Columns.IssueCoverId);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region MixmagRead
	/// <summary>
	/// Each read of an issue
	/// </summary>
	public partial class MixmagRead : Model.Entities.MixmagRead, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// Subscriber key
			/// </summary>
			MixmagSubscriberK = 0x003a0001,
			/// <summary>
			/// Issue key
			/// </summary>
			MixmagIssueK = 0x003a0002,
			/// <summary>
			/// Date time of the read
			/// </summary>
			DateTimeRead = 0x003a0003,
			/// <summary>
			/// Was a story published to Facebook?
			/// </summary>
			StoryPublished = 0x003a0004,
			/// <summary>
			/// Date/time the issue was last read.
			/// </summary>
			DateTimeLastRead = 0x003a0005,
			/// <summary>
			/// Total number of reads.
			/// </summary>
			TotalReads = 0x003a0006,
			/// <summary>
			/// Date/time that the last stream story was published.
			/// </summary>
			DateTimeLastStoryPublished = 0x003a0007,
		}
		#endregion
		public static string GetColumnName(MixmagRead.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case MixmagRead.Columns.MixmagSubscriberK: return "MixmagSubscriberK";
						case MixmagRead.Columns.MixmagIssueK: return "MixmagIssueK";
						case MixmagRead.Columns.DateTimeRead: return "DateTimeRead";
						case MixmagRead.Columns.StoryPublished: return "StoryPublished";
						case MixmagRead.Columns.DateTimeLastRead: return "DateTimeLastRead";
						case MixmagRead.Columns.TotalReads: return "TotalReads";
						case MixmagRead.Columns.DateTimeLastStoryPublished: return "DateTimeLastStoryPublished";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(MixmagRead.Columns columnEnum)
		{
			switch (columnEnum)
			{
											default: return false;
			}
		}


		#region Common
	 
		public MixmagRead(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);}
		public MixmagRead()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.MixmagRead);
		}
		public MixmagRead(BobSet bs)
		{
			this.Bob = new Bob(Bobs.Tables.Defs.MixmagRead, bs);
		}
		public MixmagRead(IBob Parent, object Column) : this()
		{
			this.Bob.GetBobFromParentSimple(Parent, Column, TablesEnum.MixmagRead);
		}
		public MixmagRead(int MixmagSubscriberK, int MixmagIssueK) : this()
		{
			this.Bob.GetBobFromPrimaryKeyArray(new Q[] {new Q(MixmagRead.Columns.MixmagSubscriberK,MixmagSubscriberK), new Q(MixmagRead.Columns.MixmagIssueK,MixmagIssueK)});
		} 
		#endregion

	}
	#endregion
	#region MixmagReadTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region MixmagRead
	/// <summary>
	/// Each read of an issue
	/// </summary>
	[Serializable]
	public partial class MixmagRead 
	{
		
		#region Simple members
		/// <summary>
		/// Subscriber key
		/// </summary>
		public override int MixmagSubscriberK
		{
			get { return (int)this[MixmagRead.Columns.MixmagSubscriberK]; }
			set { this[MixmagRead.Columns.MixmagSubscriberK] = value; }
		}
		/// <summary>
		/// Issue key
		/// </summary>
		public override int MixmagIssueK
		{
			get { return (int)this[MixmagRead.Columns.MixmagIssueK]; }
			set { this[MixmagRead.Columns.MixmagIssueK] = value; }
		}
		/// <summary>
		/// Date time of the read
		/// </summary>
		public override DateTime? DateTimeRead
		{
			get { return (DateTime?)this[MixmagRead.Columns.DateTimeRead]; }
			set { this[MixmagRead.Columns.DateTimeRead] = value; }
		}
		/// <summary>
		/// Was a story published to Facebook?
		/// </summary>
		public override bool? StoryPublished
		{
			get { return (bool?)this[MixmagRead.Columns.StoryPublished]; }
			set { this[MixmagRead.Columns.StoryPublished] = value; }
		}
		/// <summary>
		/// Date/time the issue was last read.
		/// </summary>
		public override DateTime? DateTimeLastRead
		{
			get { return (DateTime?)this[MixmagRead.Columns.DateTimeLastRead]; }
			set { this[MixmagRead.Columns.DateTimeLastRead] = value; }
		}
		/// <summary>
		/// Total number of reads.
		/// </summary>
		public override int? TotalReads
		{
			get { return (int?)this[MixmagRead.Columns.TotalReads]; }
			set { this[MixmagRead.Columns.TotalReads] = value; }
		}
		/// <summary>
		/// Date/time that the last stream story was published.
		/// </summary>
		public override DateTime? DateTimeLastStoryPublished
		{
			get { return (DateTime?)this[MixmagRead.Columns.DateTimeLastStoryPublished]; }
			set { this[MixmagRead.Columns.DateTimeLastStoryPublished] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildMixmagReads
	{
		CachedSqlSelect<MixmagRead> ChildMixmagReads();
		CachedSqlSelect<MixmagRead> ChildMixmagReads(Q where);
		CachedSqlSelect<MixmagRead> ChildMixmagReads(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<MixmagRead> ChildMixmagReads(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class MixmagRead 
		{
		}

	#region MixmagReadDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region MixmagReadDataHolder
	/// <summary>
	/// Each read of an issueDataHolder
	/// </summary>
	[Serializable]
	public partial class MixmagReadDataHolder : DataHolder<MixmagRead>
	{
		MixmagRead dataHolder;
		[NonSerializedAttribute] MixmagRead bob;

		public MixmagReadDataHolder()
		{
			this.dataHolder = new MixmagRead();
		}
		
		void CopyValues(MixmagRead source, MixmagRead destination)
		{
			destination[Bobs.MixmagRead.Columns.MixmagSubscriberK] = source[Bobs.MixmagRead.Columns.MixmagSubscriberK];
			destination[Bobs.MixmagRead.Columns.MixmagIssueK] = source[Bobs.MixmagRead.Columns.MixmagIssueK];
			destination[Bobs.MixmagRead.Columns.DateTimeRead] = source[Bobs.MixmagRead.Columns.DateTimeRead];
			destination[Bobs.MixmagRead.Columns.StoryPublished] = source[Bobs.MixmagRead.Columns.StoryPublished];
			destination[Bobs.MixmagRead.Columns.DateTimeLastRead] = source[Bobs.MixmagRead.Columns.DateTimeLastRead];
			destination[Bobs.MixmagRead.Columns.TotalReads] = source[Bobs.MixmagRead.Columns.TotalReads];
			destination[Bobs.MixmagRead.Columns.DateTimeLastStoryPublished] = source[Bobs.MixmagRead.Columns.DateTimeLastStoryPublished];
		}
		
		public MixmagReadDataHolder(MixmagRead bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// Subscriber key
		/// </summary>
		public int MixmagSubscriberK
		{
			get { return dataHolder.MixmagSubscriberK; }
			set { this.dataHolder.MixmagSubscriberK = value; }
		}
		/// <summary>
		/// Issue key
		/// </summary>
		public int MixmagIssueK
		{
			get { return dataHolder.MixmagIssueK; }
			set { this.dataHolder.MixmagIssueK = value; }
		}
		/// <summary>
		/// Date time of the read
		/// </summary>
		public DateTime? DateTimeRead
		{
			get { return dataHolder.DateTimeRead; }
			set { this.dataHolder.DateTimeRead = value; }
		}
		/// <summary>
		/// Was a story published to Facebook?
		/// </summary>
		public bool? StoryPublished
		{
			get { return dataHolder.StoryPublished; }
			set { this.dataHolder.StoryPublished = value; }
		}
		/// <summary>
		/// Date/time the issue was last read.
		/// </summary>
		public DateTime? DateTimeLastRead
		{
			get { return dataHolder.DateTimeLastRead; }
			set { this.dataHolder.DateTimeLastRead = value; }
		}
		/// <summary>
		/// Total number of reads.
		/// </summary>
		public int? TotalReads
		{
			get { return dataHolder.TotalReads; }
			set { this.dataHolder.TotalReads = value; }
		}
		/// <summary>
		/// Date/time that the last stream story was published.
		/// </summary>
		public DateTime? DateTimeLastStoryPublished
		{
			get { return dataHolder.DateTimeLastStoryPublished; }
			set { this.dataHolder.DateTimeLastStoryPublished = value; }
		}
		#endregion
		public MixmagRead MixmagRead
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new MixmagRead(K);
					}
					else
					{
						bob = new MixmagRead();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region MixmagReadSet
	public partial class MixmagReadSet : BobSet, IEnumerable<MixmagRead>
	{
		public MixmagReadSet(Query query) : base(query) { }

		public MixmagRead this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new MixmagRead(this);
					((MixmagRead)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (MixmagRead)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new MixmagReadTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<MixmagRead> ToList()
		{
			List<MixmagRead> list = new List<MixmagRead>();
			foreach (MixmagRead item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<MixmagRead> Members

		public new IEnumerator<MixmagRead> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region MixmagReadTableDef
	public class MixmagReadTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "MixmagRead";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "6BC24996";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return MixmagRead.GetColumnName((MixmagRead.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.MixmagRead;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return false;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return null;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			MixmagRead.Columns c = (MixmagRead.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case MixmagRead.Columns.MixmagSubscriberK: ColumnStore[i] = new ColumnDef(c, "MixmagSubscriberK", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey, null); break;
					case MixmagRead.Columns.MixmagIssueK: ColumnStore[i] = new ColumnDef(c, "MixmagIssueK", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey, null); break;
					case MixmagRead.Columns.DateTimeRead: ColumnStore[i] = new ColumnDef(c, "DateTimeRead", SqlDbType.DateTime, 16, null); break;
					case MixmagRead.Columns.StoryPublished: ColumnStore[i] = new ColumnDef(c, "StoryPublished", SqlDbType.Bit, null); break;
					case MixmagRead.Columns.DateTimeLastRead: ColumnStore[i] = new ColumnDef(c, "DateTimeLastRead", SqlDbType.DateTime, 16, null); break;
					case MixmagRead.Columns.TotalReads: ColumnStore[i] = new ColumnDef(c, "TotalReads", SqlDbType.Int, null); break;
					case MixmagRead.Columns.DateTimeLastStoryPublished: ColumnStore[i] = new ColumnDef(c, "DateTimeLastStoryPublished", SqlDbType.DateTime, 16, null); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(MixmagRead.Columns.MixmagSubscriberK);
						InitColumn(MixmagRead.Columns.MixmagIssueK);
						InitColumn(MixmagRead.Columns.DateTimeRead);
						InitColumn(MixmagRead.Columns.StoryPublished);
						InitColumn(MixmagRead.Columns.DateTimeLastRead);
						InitColumn(MixmagRead.Columns.TotalReads);
						InitColumn(MixmagRead.Columns.DateTimeLastStoryPublished);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region MixmagSubscription
	/// <summary>
	/// Subscribers to the Mixmag-by-email service
	/// </summary>
	public partial class MixmagSubscription : Model.Entities.MixmagSubscription, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// Primary key
			/// </summary>
			K = 0x003b0001,
			/// <summary>
			/// Facebook user ID
			/// </summary>
			FacebookUID = 0x003b0002,
			/// <summary>
			/// Facebook email extended permission
			/// </summary>
			FacebookPermissionEmail = 0x003b0003,
			/// <summary>
			/// Facebook publish_stream extended permission
			/// </summary>
			FacebookPermissionPublish = 0x003b0004,
			/// <summary>
			/// Date / time the subscription was created
			/// </summary>
			DateTimeCreated = 0x003b0005,
			/// <summary>
			/// Do we send mixmag by email?
			/// </summary>
			SendMixmag = 0x003b0006,
			/// <summary>
			/// Do we publish to their wall when they read?
			/// </summary>
			PublishStoryOnRead = 0x003b0007,
			/// <summary>
			/// Total number of issues we have sent this user
			/// </summary>
			TotalSent = 0x003b0008,
			/// <summary>
			/// Total number of issues this user has opened
			/// </summary>
			TotalRead = 0x003b0009,
			/// <summary>
			/// First name
			/// </summary>
			FirstName = 0x003b000a,
			/// <summary>
			/// Last name
			/// </summary>
			LastName = 0x003b000b,
			/// <summary>
			/// First line of the postal address.
			/// </summary>
			AddressFirstLine = 0x003b000c,
			/// <summary>
			/// Postal code.
			/// </summary>
			AddressPostCode = 0x003b000d,
			/// <summary>
			/// Country
			/// </summary>
			AddressCountryK = 0x003b000e,
			/// <summary>
			/// Has the name and address been completed
			/// </summary>
			IsAddressComplete = 0x003b000f,
			/// <summary>
			/// Is the email verified
			/// </summary>
			IsEmailVerified = 0x003b0010,
			/// <summary>
			/// Email address
			/// </summary>
			Email = 0x003b0011,
			/// <summary>
			/// Has the email been provided
			/// </summary>
			IsEmailComplete = 0x003b0012,
			/// <summary>
			/// Email verification secret
			/// </summary>
			EmailVerificationSecret = 0x003b0013,
			/// <summary>
			/// Have we received a bounce message for this email?
			/// </summary>
			IsEmailBroken = 0x003b0014,
			/// <summary>
			/// When did we receive the bounce?
			/// </summary>
			EmailBrokenDateTime = 0x003b0015,
			/// <summary>
			/// Is this email address from Facebook?
			/// </summary>
			IsEmailFromFacebook = 0x003b0016,
		}
		#endregion
		public static string GetColumnName(MixmagSubscription.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case MixmagSubscription.Columns.K: return "K";
						case MixmagSubscription.Columns.FacebookUID: return "FacebookUID";
						case MixmagSubscription.Columns.FacebookPermissionEmail: return "FacebookPermissionEmail";
						case MixmagSubscription.Columns.FacebookPermissionPublish: return "FacebookPermissionPublish";
						case MixmagSubscription.Columns.DateTimeCreated: return "DateTimeCreated";
						case MixmagSubscription.Columns.SendMixmag: return "SendMixmag";
						case MixmagSubscription.Columns.PublishStoryOnRead: return "PublishStoryOnRead";
						case MixmagSubscription.Columns.TotalSent: return "TotalSent";
						case MixmagSubscription.Columns.TotalRead: return "TotalRead";
						case MixmagSubscription.Columns.FirstName: return "FirstName";
						case MixmagSubscription.Columns.LastName: return "LastName";
						case MixmagSubscription.Columns.AddressFirstLine: return "AddressFirstLine";
						case MixmagSubscription.Columns.AddressPostCode: return "AddressPostCode";
						case MixmagSubscription.Columns.AddressCountryK: return "AddressCountryK";
						case MixmagSubscription.Columns.IsAddressComplete: return "IsAddressComplete";
						case MixmagSubscription.Columns.IsEmailVerified: return "IsEmailVerified";
						case MixmagSubscription.Columns.Email: return "Email";
						case MixmagSubscription.Columns.IsEmailComplete: return "IsEmailComplete";
						case MixmagSubscription.Columns.EmailVerificationSecret: return "EmailVerificationSecret";
						case MixmagSubscription.Columns.IsEmailBroken: return "IsEmailBroken";
						case MixmagSubscription.Columns.EmailBrokenDateTime: return "EmailBrokenDateTime";
						case MixmagSubscription.Columns.IsEmailFromFacebook: return "IsEmailFromFacebook";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(MixmagSubscription.Columns columnEnum)
		{
			switch (columnEnum)
			{
																										default: return false;
			}
		}


		#region Common
 
		public MixmagSubscription(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);  }
		public MixmagSubscription()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.MixmagSubscription);
		}
		public MixmagSubscription(BobSet bs)
		{
			this.Bob = new Bob(bs.Table, bs);
		}
		public MixmagSubscription(int MixmagSubscriptionK, IBob Parent, object Column)
			: this()
		{
			Bob.GetBobFromParent(MixmagSubscriptionK, Parent.Bob, Column, TablesEnum.MixmagSubscription);
		}
		public MixmagSubscription(int MixmagSubscriptionK)
			: this()
		{
			Bob.GetBobFromPrimaryKey(MixmagSubscriptionK);
		}
		#endregion

	}
	#endregion
	#region MixmagSubscriptionTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region MixmagSubscription
	/// <summary>
	/// Subscribers to the Mixmag-by-email service
	/// </summary>
	[Serializable]
	public partial class MixmagSubscription 
	{
		
		#region Simple members
		/// <summary>
		/// Primary key
		/// </summary>
		public override int K
		{
			get { return (int)this[MixmagSubscription.Columns.K] as int? ?? 0 ; }
			set { this[MixmagSubscription.Columns.K] = value; }
		}
		/// <summary>
		/// Facebook user ID
		/// </summary>
		public override long FacebookUID
		{
			get { return (long)this[MixmagSubscription.Columns.FacebookUID]; }
			set { this[MixmagSubscription.Columns.FacebookUID] = value; }
		}
		/// <summary>
		/// Facebook email extended permission
		/// </summary>
		public override bool? FacebookPermissionEmail
		{
			get { return (bool?)this[MixmagSubscription.Columns.FacebookPermissionEmail]; }
			set { this[MixmagSubscription.Columns.FacebookPermissionEmail] = value; }
		}
		/// <summary>
		/// Facebook publish_stream extended permission
		/// </summary>
		public override bool? FacebookPermissionPublish
		{
			get { return (bool?)this[MixmagSubscription.Columns.FacebookPermissionPublish]; }
			set { this[MixmagSubscription.Columns.FacebookPermissionPublish] = value; }
		}
		/// <summary>
		/// Date / time the subscription was created
		/// </summary>
		public override DateTime? DateTimeCreated
		{
			get { return (DateTime?)this[MixmagSubscription.Columns.DateTimeCreated]; }
			set { this[MixmagSubscription.Columns.DateTimeCreated] = value; }
		}
		/// <summary>
		/// Do we send mixmag by email?
		/// </summary>
		public override bool? SendMixmag
		{
			get { return (bool?)this[MixmagSubscription.Columns.SendMixmag]; }
			set { this[MixmagSubscription.Columns.SendMixmag] = value; }
		}
		/// <summary>
		/// Do we publish to their wall when they read?
		/// </summary>
		public override bool? PublishStoryOnRead
		{
			get { return (bool?)this[MixmagSubscription.Columns.PublishStoryOnRead]; }
			set { this[MixmagSubscription.Columns.PublishStoryOnRead] = value; }
		}
		/// <summary>
		/// Total number of issues we have sent this user
		/// </summary>
		public override int? TotalSent
		{
			get { return (int?)this[MixmagSubscription.Columns.TotalSent]; }
			set { this[MixmagSubscription.Columns.TotalSent] = value; }
		}
		/// <summary>
		/// Total number of issues this user has opened
		/// </summary>
		public override int? TotalRead
		{
			get { return (int?)this[MixmagSubscription.Columns.TotalRead]; }
			set { this[MixmagSubscription.Columns.TotalRead] = value; }
		}
		/// <summary>
		/// First name
		/// </summary>
		public override string FirstName
		{
			get { return (string)this[MixmagSubscription.Columns.FirstName]; }
			set { this[MixmagSubscription.Columns.FirstName] = value; }
		}
		/// <summary>
		/// Last name
		/// </summary>
		public override string LastName
		{
			get { return (string)this[MixmagSubscription.Columns.LastName]; }
			set { this[MixmagSubscription.Columns.LastName] = value; }
		}
		/// <summary>
		/// First line of the postal address.
		/// </summary>
		public override string AddressFirstLine
		{
			get { return (string)this[MixmagSubscription.Columns.AddressFirstLine]; }
			set { this[MixmagSubscription.Columns.AddressFirstLine] = value; }
		}
		/// <summary>
		/// Postal code.
		/// </summary>
		public override string AddressPostCode
		{
			get { return (string)this[MixmagSubscription.Columns.AddressPostCode]; }
			set { this[MixmagSubscription.Columns.AddressPostCode] = value; }
		}
		/// <summary>
		/// Country
		/// </summary>
		public override int? AddressCountryK
		{
			get { return (int?)this[MixmagSubscription.Columns.AddressCountryK]; }
			set { this[MixmagSubscription.Columns.AddressCountryK] = value; }
		}
		/// <summary>
		/// Has the name and address been completed
		/// </summary>
		public override bool? IsAddressComplete
		{
			get { return (bool?)this[MixmagSubscription.Columns.IsAddressComplete]; }
			set { this[MixmagSubscription.Columns.IsAddressComplete] = value; }
		}
		/// <summary>
		/// Is the email verified
		/// </summary>
		public override bool? IsEmailVerified
		{
			get { return (bool?)this[MixmagSubscription.Columns.IsEmailVerified]; }
			set { this[MixmagSubscription.Columns.IsEmailVerified] = value; }
		}
		/// <summary>
		/// Email address
		/// </summary>
		public override string Email
		{
			get { return (string)this[MixmagSubscription.Columns.Email]; }
			set { this[MixmagSubscription.Columns.Email] = value; }
		}
		/// <summary>
		/// Has the email been provided
		/// </summary>
		public override bool? IsEmailComplete
		{
			get { return (bool?)this[MixmagSubscription.Columns.IsEmailComplete]; }
			set { this[MixmagSubscription.Columns.IsEmailComplete] = value; }
		}
		/// <summary>
		/// Email verification secret
		/// </summary>
		public override string EmailVerificationSecret
		{
			get { return (string)this[MixmagSubscription.Columns.EmailVerificationSecret]; }
			set { this[MixmagSubscription.Columns.EmailVerificationSecret] = value; }
		}
		/// <summary>
		/// Have we received a bounce message for this email?
		/// </summary>
		public override bool? IsEmailBroken
		{
			get { return (bool?)this[MixmagSubscription.Columns.IsEmailBroken]; }
			set { this[MixmagSubscription.Columns.IsEmailBroken] = value; }
		}
		/// <summary>
		/// When did we receive the bounce?
		/// </summary>
		public override DateTime? EmailBrokenDateTime
		{
			get { return (DateTime?)this[MixmagSubscription.Columns.EmailBrokenDateTime]; }
			set { this[MixmagSubscription.Columns.EmailBrokenDateTime] = value; }
		}
		/// <summary>
		/// Is this email address from Facebook?
		/// </summary>
		public override bool? IsEmailFromFacebook
		{
			get { return (bool?)this[MixmagSubscription.Columns.IsEmailFromFacebook]; }
			set { this[MixmagSubscription.Columns.IsEmailFromFacebook] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildMixmagSubscriptions
	{
		CachedSqlSelect<MixmagSubscription> ChildMixmagSubscriptions();
		CachedSqlSelect<MixmagSubscription> ChildMixmagSubscriptions(Q where);
		CachedSqlSelect<MixmagSubscription> ChildMixmagSubscriptions(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<MixmagSubscription> ChildMixmagSubscriptions(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class MixmagSubscription 
		{
		}

	#region MixmagSubscriptionDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region MixmagSubscriptionDataHolder
	/// <summary>
	/// Subscribers to the Mixmag-by-email serviceDataHolder
	/// </summary>
	[Serializable]
	public partial class MixmagSubscriptionDataHolder : DataHolder<MixmagSubscription>
	{
		MixmagSubscription dataHolder;
		[NonSerializedAttribute] MixmagSubscription bob;

		public MixmagSubscriptionDataHolder()
		{
			this.dataHolder = new MixmagSubscription();
		}
		
		void CopyValues(MixmagSubscription source, MixmagSubscription destination)
		{
			destination[Bobs.MixmagSubscription.Columns.K] = source[Bobs.MixmagSubscription.Columns.K];
			destination[Bobs.MixmagSubscription.Columns.FacebookUID] = source[Bobs.MixmagSubscription.Columns.FacebookUID];
			destination[Bobs.MixmagSubscription.Columns.FacebookPermissionEmail] = source[Bobs.MixmagSubscription.Columns.FacebookPermissionEmail];
			destination[Bobs.MixmagSubscription.Columns.FacebookPermissionPublish] = source[Bobs.MixmagSubscription.Columns.FacebookPermissionPublish];
			destination[Bobs.MixmagSubscription.Columns.DateTimeCreated] = source[Bobs.MixmagSubscription.Columns.DateTimeCreated];
			destination[Bobs.MixmagSubscription.Columns.SendMixmag] = source[Bobs.MixmagSubscription.Columns.SendMixmag];
			destination[Bobs.MixmagSubscription.Columns.PublishStoryOnRead] = source[Bobs.MixmagSubscription.Columns.PublishStoryOnRead];
			destination[Bobs.MixmagSubscription.Columns.TotalSent] = source[Bobs.MixmagSubscription.Columns.TotalSent];
			destination[Bobs.MixmagSubscription.Columns.TotalRead] = source[Bobs.MixmagSubscription.Columns.TotalRead];
			destination[Bobs.MixmagSubscription.Columns.FirstName] = source[Bobs.MixmagSubscription.Columns.FirstName];
			destination[Bobs.MixmagSubscription.Columns.LastName] = source[Bobs.MixmagSubscription.Columns.LastName];
			destination[Bobs.MixmagSubscription.Columns.AddressFirstLine] = source[Bobs.MixmagSubscription.Columns.AddressFirstLine];
			destination[Bobs.MixmagSubscription.Columns.AddressPostCode] = source[Bobs.MixmagSubscription.Columns.AddressPostCode];
			destination[Bobs.MixmagSubscription.Columns.AddressCountryK] = source[Bobs.MixmagSubscription.Columns.AddressCountryK];
			destination[Bobs.MixmagSubscription.Columns.IsAddressComplete] = source[Bobs.MixmagSubscription.Columns.IsAddressComplete];
			destination[Bobs.MixmagSubscription.Columns.IsEmailVerified] = source[Bobs.MixmagSubscription.Columns.IsEmailVerified];
			destination[Bobs.MixmagSubscription.Columns.Email] = source[Bobs.MixmagSubscription.Columns.Email];
			destination[Bobs.MixmagSubscription.Columns.IsEmailComplete] = source[Bobs.MixmagSubscription.Columns.IsEmailComplete];
			destination[Bobs.MixmagSubscription.Columns.EmailVerificationSecret] = source[Bobs.MixmagSubscription.Columns.EmailVerificationSecret];
			destination[Bobs.MixmagSubscription.Columns.IsEmailBroken] = source[Bobs.MixmagSubscription.Columns.IsEmailBroken];
			destination[Bobs.MixmagSubscription.Columns.EmailBrokenDateTime] = source[Bobs.MixmagSubscription.Columns.EmailBrokenDateTime];
			destination[Bobs.MixmagSubscription.Columns.IsEmailFromFacebook] = source[Bobs.MixmagSubscription.Columns.IsEmailFromFacebook];
		}
		
		public MixmagSubscriptionDataHolder(MixmagSubscription bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// Primary key
		/// </summary>
		public int K
		{
			get { return dataHolder.K; }
			set { this.dataHolder.K = value; }
		}
		/// <summary>
		/// Facebook user ID
		/// </summary>
		public long FacebookUID
		{
			get { return dataHolder.FacebookUID; }
			set { this.dataHolder.FacebookUID = value; }
		}
		/// <summary>
		/// Facebook email extended permission
		/// </summary>
		public bool? FacebookPermissionEmail
		{
			get { return dataHolder.FacebookPermissionEmail; }
			set { this.dataHolder.FacebookPermissionEmail = value; }
		}
		/// <summary>
		/// Facebook publish_stream extended permission
		/// </summary>
		public bool? FacebookPermissionPublish
		{
			get { return dataHolder.FacebookPermissionPublish; }
			set { this.dataHolder.FacebookPermissionPublish = value; }
		}
		/// <summary>
		/// Date / time the subscription was created
		/// </summary>
		public DateTime? DateTimeCreated
		{
			get { return dataHolder.DateTimeCreated; }
			set { this.dataHolder.DateTimeCreated = value; }
		}
		/// <summary>
		/// Do we send mixmag by email?
		/// </summary>
		public bool? SendMixmag
		{
			get { return dataHolder.SendMixmag; }
			set { this.dataHolder.SendMixmag = value; }
		}
		/// <summary>
		/// Do we publish to their wall when they read?
		/// </summary>
		public bool? PublishStoryOnRead
		{
			get { return dataHolder.PublishStoryOnRead; }
			set { this.dataHolder.PublishStoryOnRead = value; }
		}
		/// <summary>
		/// Total number of issues we have sent this user
		/// </summary>
		public int? TotalSent
		{
			get { return dataHolder.TotalSent; }
			set { this.dataHolder.TotalSent = value; }
		}
		/// <summary>
		/// Total number of issues this user has opened
		/// </summary>
		public int? TotalRead
		{
			get { return dataHolder.TotalRead; }
			set { this.dataHolder.TotalRead = value; }
		}
		/// <summary>
		/// First name
		/// </summary>
		public string FirstName
		{
			get { return dataHolder.FirstName; }
			set { this.dataHolder.FirstName = value; }
		}
		/// <summary>
		/// Last name
		/// </summary>
		public string LastName
		{
			get { return dataHolder.LastName; }
			set { this.dataHolder.LastName = value; }
		}
		/// <summary>
		/// First line of the postal address.
		/// </summary>
		public string AddressFirstLine
		{
			get { return dataHolder.AddressFirstLine; }
			set { this.dataHolder.AddressFirstLine = value; }
		}
		/// <summary>
		/// Postal code.
		/// </summary>
		public string AddressPostCode
		{
			get { return dataHolder.AddressPostCode; }
			set { this.dataHolder.AddressPostCode = value; }
		}
		/// <summary>
		/// Country
		/// </summary>
		public int? AddressCountryK
		{
			get { return dataHolder.AddressCountryK; }
			set { this.dataHolder.AddressCountryK = value; }
		}
		/// <summary>
		/// Has the name and address been completed
		/// </summary>
		public bool? IsAddressComplete
		{
			get { return dataHolder.IsAddressComplete; }
			set { this.dataHolder.IsAddressComplete = value; }
		}
		/// <summary>
		/// Is the email verified
		/// </summary>
		public bool? IsEmailVerified
		{
			get { return dataHolder.IsEmailVerified; }
			set { this.dataHolder.IsEmailVerified = value; }
		}
		/// <summary>
		/// Email address
		/// </summary>
		public string Email
		{
			get { return dataHolder.Email; }
			set { this.dataHolder.Email = value; }
		}
		/// <summary>
		/// Has the email been provided
		/// </summary>
		public bool? IsEmailComplete
		{
			get { return dataHolder.IsEmailComplete; }
			set { this.dataHolder.IsEmailComplete = value; }
		}
		/// <summary>
		/// Email verification secret
		/// </summary>
		public string EmailVerificationSecret
		{
			get { return dataHolder.EmailVerificationSecret; }
			set { this.dataHolder.EmailVerificationSecret = value; }
		}
		/// <summary>
		/// Have we received a bounce message for this email?
		/// </summary>
		public bool? IsEmailBroken
		{
			get { return dataHolder.IsEmailBroken; }
			set { this.dataHolder.IsEmailBroken = value; }
		}
		/// <summary>
		/// When did we receive the bounce?
		/// </summary>
		public DateTime? EmailBrokenDateTime
		{
			get { return dataHolder.EmailBrokenDateTime; }
			set { this.dataHolder.EmailBrokenDateTime = value; }
		}
		/// <summary>
		/// Is this email address from Facebook?
		/// </summary>
		public bool? IsEmailFromFacebook
		{
			get { return dataHolder.IsEmailFromFacebook; }
			set { this.dataHolder.IsEmailFromFacebook = value; }
		}
		#endregion
		public MixmagSubscription MixmagSubscription
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new MixmagSubscription(K);
					}
					else
					{
						bob = new MixmagSubscription();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region MixmagSubscriptionSet
	public partial class MixmagSubscriptionSet : BobSet, IEnumerable<MixmagSubscription>
	{
		public MixmagSubscriptionSet(Query query) : base(query) { }

		public MixmagSubscription this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new MixmagSubscription(this);
					((MixmagSubscription)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (MixmagSubscription)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new MixmagSubscriptionTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<MixmagSubscription> ToList()
		{
			List<MixmagSubscription> list = new List<MixmagSubscription>();
			foreach (MixmagSubscription item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<MixmagSubscription> Members

		public new IEnumerator<MixmagSubscription> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region MixmagSubscriptionTableDef
	public class MixmagSubscriptionTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "MixmagSubscription";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "2AB10F32";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return MixmagSubscription.GetColumnName((MixmagSubscription.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.MixmagSubscription;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return true;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return MixmagSubscription.Columns.K;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			MixmagSubscription.Columns c = (MixmagSubscription.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case MixmagSubscription.Columns.K: ColumnStore[i] = new ColumnDef(c, "K", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey | SqlColumnFlag.AutoNumber, null); break;
					case MixmagSubscription.Columns.FacebookUID: ColumnStore[i] = new ColumnDef(c, "FacebookUID", SqlDbType.BigInt, 8, SqlColumnFlag.PrimaryKey, null); break;
					case MixmagSubscription.Columns.FacebookPermissionEmail: ColumnStore[i] = new ColumnDef(c, "FacebookPermissionEmail", SqlDbType.Bit, null); break;
					case MixmagSubscription.Columns.FacebookPermissionPublish: ColumnStore[i] = new ColumnDef(c, "FacebookPermissionPublish", SqlDbType.Bit, null); break;
					case MixmagSubscription.Columns.DateTimeCreated: ColumnStore[i] = new ColumnDef(c, "DateTimeCreated", SqlDbType.DateTime, 16, null); break;
					case MixmagSubscription.Columns.SendMixmag: ColumnStore[i] = new ColumnDef(c, "SendMixmag", SqlDbType.Bit, null); break;
					case MixmagSubscription.Columns.PublishStoryOnRead: ColumnStore[i] = new ColumnDef(c, "PublishStoryOnRead", SqlDbType.Bit, null); break;
					case MixmagSubscription.Columns.TotalSent: ColumnStore[i] = new ColumnDef(c, "TotalSent", SqlDbType.Int, null); break;
					case MixmagSubscription.Columns.TotalRead: ColumnStore[i] = new ColumnDef(c, "TotalRead", SqlDbType.Int, null); break;
					case MixmagSubscription.Columns.FirstName: ColumnStore[i] = new ColumnDef(c, "FirstName", SqlDbType.VarChar, 100, null); break;
					case MixmagSubscription.Columns.LastName: ColumnStore[i] = new ColumnDef(c, "LastName", SqlDbType.VarChar, 100, null); break;
					case MixmagSubscription.Columns.AddressFirstLine: ColumnStore[i] = new ColumnDef(c, "AddressFirstLine", SqlDbType.VarChar, 100, null); break;
					case MixmagSubscription.Columns.AddressPostCode: ColumnStore[i] = new ColumnDef(c, "AddressPostCode", SqlDbType.VarChar, 100, null); break;
					case MixmagSubscription.Columns.AddressCountryK: ColumnStore[i] = new ColumnDef(c, "AddressCountryK", SqlDbType.Int, null); break;
					case MixmagSubscription.Columns.IsAddressComplete: ColumnStore[i] = new ColumnDef(c, "IsAddressComplete", SqlDbType.Bit, null); break;
					case MixmagSubscription.Columns.IsEmailVerified: ColumnStore[i] = new ColumnDef(c, "IsEmailVerified", SqlDbType.Bit, null); break;
					case MixmagSubscription.Columns.Email: ColumnStore[i] = new ColumnDef(c, "Email", SqlDbType.VarChar, 100, null); break;
					case MixmagSubscription.Columns.IsEmailComplete: ColumnStore[i] = new ColumnDef(c, "IsEmailComplete", SqlDbType.Bit, null); break;
					case MixmagSubscription.Columns.EmailVerificationSecret: ColumnStore[i] = new ColumnDef(c, "EmailVerificationSecret", SqlDbType.VarChar, 10, null); break;
					case MixmagSubscription.Columns.IsEmailBroken: ColumnStore[i] = new ColumnDef(c, "IsEmailBroken", SqlDbType.Bit, null); break;
					case MixmagSubscription.Columns.EmailBrokenDateTime: ColumnStore[i] = new ColumnDef(c, "EmailBrokenDateTime", SqlDbType.DateTime, 16, null); break;
					case MixmagSubscription.Columns.IsEmailFromFacebook: ColumnStore[i] = new ColumnDef(c, "IsEmailFromFacebook", SqlDbType.Bit, null); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(MixmagSubscription.Columns.K);
						InitColumn(MixmagSubscription.Columns.FacebookUID);
						InitColumn(MixmagSubscription.Columns.FacebookPermissionEmail);
						InitColumn(MixmagSubscription.Columns.FacebookPermissionPublish);
						InitColumn(MixmagSubscription.Columns.DateTimeCreated);
						InitColumn(MixmagSubscription.Columns.SendMixmag);
						InitColumn(MixmagSubscription.Columns.PublishStoryOnRead);
						InitColumn(MixmagSubscription.Columns.TotalSent);
						InitColumn(MixmagSubscription.Columns.TotalRead);
						InitColumn(MixmagSubscription.Columns.FirstName);
						InitColumn(MixmagSubscription.Columns.LastName);
						InitColumn(MixmagSubscription.Columns.AddressFirstLine);
						InitColumn(MixmagSubscription.Columns.AddressPostCode);
						InitColumn(MixmagSubscription.Columns.AddressCountryK);
						InitColumn(MixmagSubscription.Columns.IsAddressComplete);
						InitColumn(MixmagSubscription.Columns.IsEmailVerified);
						InitColumn(MixmagSubscription.Columns.Email);
						InitColumn(MixmagSubscription.Columns.IsEmailComplete);
						InitColumn(MixmagSubscription.Columns.EmailVerificationSecret);
						InitColumn(MixmagSubscription.Columns.IsEmailBroken);
						InitColumn(MixmagSubscription.Columns.EmailBrokenDateTime);
						InitColumn(MixmagSubscription.Columns.IsEmailFromFacebook);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region MixmagVote
	/// <summary>
	/// Votes in the Mixmag Vote system
	/// </summary>
	public partial class MixmagVote : Model.Entities.MixmagVote, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// Primary key
			/// </summary>
			K = 0x003c0001,
			/// <summary>
			/// Facebook user ID
			/// </summary>
			FacebookUID = 0x003c0002,
			/// <summary>
			/// Entry K
			/// </summary>
			MixmagEntryK = 0x003c0003,
			/// <summary>
			/// When the vote was cast
			/// </summary>
			DateTime = 0x003c0004,
			/// <summary>
			/// Custom text field
			/// </summary>
			TextField1 = 0x003c0005,
		}
		#endregion
		public static string GetColumnName(MixmagVote.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case MixmagVote.Columns.K: return "K";
						case MixmagVote.Columns.FacebookUID: return "FacebookUID";
						case MixmagVote.Columns.MixmagEntryK: return "MixmagEntryK";
						case MixmagVote.Columns.DateTime: return "DateTime";
						case MixmagVote.Columns.TextField1: return "TextField1";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(MixmagVote.Columns columnEnum)
		{
			switch (columnEnum)
			{
									default: return false;
			}
		}


		#region Common
 
		public MixmagVote(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);  }
		public MixmagVote()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.MixmagVote);
		}
		public MixmagVote(BobSet bs)
		{
			this.Bob = new Bob(bs.Table, bs);
		}
		public MixmagVote(int MixmagVoteK, IBob Parent, object Column)
			: this()
		{
			Bob.GetBobFromParent(MixmagVoteK, Parent.Bob, Column, TablesEnum.MixmagVote);
		}
		public MixmagVote(int MixmagVoteK)
			: this()
		{
			Bob.GetBobFromPrimaryKey(MixmagVoteK);
		}
		#endregion

	}
	#endregion
	#region MixmagVoteTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region MixmagVote
	/// <summary>
	/// Votes in the Mixmag Vote system
	/// </summary>
	[Serializable]
	public partial class MixmagVote 
	{
		
		#region Simple members
		/// <summary>
		/// Primary key
		/// </summary>
		public override int K
		{
			get { return (int)this[MixmagVote.Columns.K] as int? ?? 0 ; }
			set { this[MixmagVote.Columns.K] = value; }
		}
		/// <summary>
		/// Facebook user ID
		/// </summary>
		public override long FacebookUID
		{
			get { return (long)this[MixmagVote.Columns.FacebookUID]; }
			set { this[MixmagVote.Columns.FacebookUID] = value; }
		}
		/// <summary>
		/// Entry K
		/// </summary>
		public override int? MixmagEntryK
		{
			get { return (int?)this[MixmagVote.Columns.MixmagEntryK]; }
			set { this[MixmagVote.Columns.MixmagEntryK] = value; }
		}
		/// <summary>
		/// When the vote was cast
		/// </summary>
		public override DateTime? DateTime
		{
			get { return (DateTime?)this[MixmagVote.Columns.DateTime]; }
			set { this[MixmagVote.Columns.DateTime] = value; }
		}
		/// <summary>
		/// Custom text field
		/// </summary>
		public override string TextField1
		{
			get { return (string)this[MixmagVote.Columns.TextField1]; }
			set { this[MixmagVote.Columns.TextField1] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildMixmagVotes
	{
		CachedSqlSelect<MixmagVote> ChildMixmagVotes();
		CachedSqlSelect<MixmagVote> ChildMixmagVotes(Q where);
		CachedSqlSelect<MixmagVote> ChildMixmagVotes(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<MixmagVote> ChildMixmagVotes(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class MixmagVote 
		{
		}

	#region MixmagVoteDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region MixmagVoteDataHolder
	/// <summary>
	/// Votes in the Mixmag Vote systemDataHolder
	/// </summary>
	[Serializable]
	public partial class MixmagVoteDataHolder : DataHolder<MixmagVote>
	{
		MixmagVote dataHolder;
		[NonSerializedAttribute] MixmagVote bob;

		public MixmagVoteDataHolder()
		{
			this.dataHolder = new MixmagVote();
		}
		
		void CopyValues(MixmagVote source, MixmagVote destination)
		{
			destination[Bobs.MixmagVote.Columns.K] = source[Bobs.MixmagVote.Columns.K];
			destination[Bobs.MixmagVote.Columns.FacebookUID] = source[Bobs.MixmagVote.Columns.FacebookUID];
			destination[Bobs.MixmagVote.Columns.MixmagEntryK] = source[Bobs.MixmagVote.Columns.MixmagEntryK];
			destination[Bobs.MixmagVote.Columns.DateTime] = source[Bobs.MixmagVote.Columns.DateTime];
			destination[Bobs.MixmagVote.Columns.TextField1] = source[Bobs.MixmagVote.Columns.TextField1];
		}
		
		public MixmagVoteDataHolder(MixmagVote bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// Primary key
		/// </summary>
		public int K
		{
			get { return dataHolder.K; }
			set { this.dataHolder.K = value; }
		}
		/// <summary>
		/// Facebook user ID
		/// </summary>
		public long FacebookUID
		{
			get { return dataHolder.FacebookUID; }
			set { this.dataHolder.FacebookUID = value; }
		}
		/// <summary>
		/// Entry K
		/// </summary>
		public int? MixmagEntryK
		{
			get { return dataHolder.MixmagEntryK; }
			set { this.dataHolder.MixmagEntryK = value; }
		}
		/// <summary>
		/// When the vote was cast
		/// </summary>
		public DateTime? DateTime
		{
			get { return dataHolder.DateTime; }
			set { this.dataHolder.DateTime = value; }
		}
		/// <summary>
		/// Custom text field
		/// </summary>
		public string TextField1
		{
			get { return dataHolder.TextField1; }
			set { this.dataHolder.TextField1 = value; }
		}
		#endregion
		public MixmagVote MixmagVote
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new MixmagVote(K);
					}
					else
					{
						bob = new MixmagVote();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region MixmagVoteSet
	public partial class MixmagVoteSet : BobSet, IEnumerable<MixmagVote>
	{
		public MixmagVoteSet(Query query) : base(query) { }

		public MixmagVote this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new MixmagVote(this);
					((MixmagVote)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (MixmagVote)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new MixmagVoteTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<MixmagVote> ToList()
		{
			List<MixmagVote> list = new List<MixmagVote>();
			foreach (MixmagVote item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<MixmagVote> Members

		public new IEnumerator<MixmagVote> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region MixmagVoteTableDef
	public class MixmagVoteTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "MixmagVote";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "10B5EA57";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return MixmagVote.GetColumnName((MixmagVote.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.MixmagVote;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return true;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return MixmagVote.Columns.K;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			MixmagVote.Columns c = (MixmagVote.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case MixmagVote.Columns.K: ColumnStore[i] = new ColumnDef(c, "K", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey | SqlColumnFlag.AutoNumber, null); break;
					case MixmagVote.Columns.FacebookUID: ColumnStore[i] = new ColumnDef(c, "FacebookUID", SqlDbType.BigInt, 8, SqlColumnFlag.PrimaryKey, null); break;
					case MixmagVote.Columns.MixmagEntryK: ColumnStore[i] = new ColumnDef(c, "MixmagEntryK", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey, null); break;
					case MixmagVote.Columns.DateTime: ColumnStore[i] = new ColumnDef(c, "DateTime", SqlDbType.DateTime, 16, null); break;
					case MixmagVote.Columns.TextField1: ColumnStore[i] = new ColumnDef(c, "TextField1", SqlDbType.VarChar, 255, null); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(MixmagVote.Columns.K);
						InitColumn(MixmagVote.Columns.FacebookUID);
						InitColumn(MixmagVote.Columns.MixmagEntryK);
						InitColumn(MixmagVote.Columns.DateTime);
						InitColumn(MixmagVote.Columns.TextField1);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region Mobile
	/// <summary>
	/// A mobile number (tracks vaious stats)
	/// </summary>
	public partial class Mobile : Model.Entities.Mobile, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// The primary key
			/// </summary>
			K = 0x003d0001,
			/// <summary>
			/// Link to the Usr table if this mobile number has been linked to a user.
			/// </summary>
			UsrK = 0x003d0002,
			/// <summary>
			/// The mobile number, incluting the 2 digit country code, and excluding the leading zero.
			/// </summary>
			Number = 0x003d0003,
			/// <summary>
			/// The 2-digit int network id - 10=O2, 15=Vodaphone, 30=T-Mobile/Virgin, 33=Orange
			/// </summary>
			Network = 0x003d0004,
			/// <summary>
			/// Total number of incoming messages
			/// </summary>
			TotalIncoming = 0x003d0005,
			/// <summary>
			/// Total number of outgoing messages
			/// </summary>
			TotalOutgoing = 0x003d0006,
			/// <summary>
			/// DateTime that the forst incoming was received, and the account was created.
			/// </summary>
			DateTimeCreated = 0x003d0007,
			/// <summary>
			/// DateTime that the last message arrived
			/// </summary>
			DateTimeLastIncoming = 0x003d0008,
		}
		#endregion
		public static string GetColumnName(Mobile.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case Mobile.Columns.K: return "K";
						case Mobile.Columns.UsrK: return "UsrK";
						case Mobile.Columns.Number: return "Number";
						case Mobile.Columns.Network: return "Network";
						case Mobile.Columns.TotalIncoming: return "TotalIncoming";
						case Mobile.Columns.TotalOutgoing: return "TotalOutgoing";
						case Mobile.Columns.DateTimeCreated: return "DateTimeCreated";
						case Mobile.Columns.DateTimeLastIncoming: return "DateTimeLastIncoming";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(Mobile.Columns columnEnum)
		{
			switch (columnEnum)
			{
												default: return false;
			}
		}


		#region Common
 
		public Mobile(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);  }
		public Mobile()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.Mobile);
		}
		public Mobile(BobSet bs)
		{
			this.Bob = new Bob(bs.Table, bs);
		}
		public Mobile(int MobileK, IBob Parent, object Column)
			: this()
		{
			Bob.GetBobFromParent(MobileK, Parent.Bob, Column, TablesEnum.Mobile);
		}
		public Mobile(int MobileK)
			: this()
		{
			Bob.GetBobFromPrimaryKey(MobileK);
		}
		#endregion

	}
	#endregion
	#region MobileTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region Mobile
	/// <summary>
	/// A mobile number (tracks vaious stats)
	/// </summary>
	[Serializable]
	public partial class Mobile 
	{
		
		#region Simple members
		/// <summary>
		/// The primary key
		/// </summary>
		public override int K
		{
			get { return (int)this[Mobile.Columns.K] as int? ?? 0 ; }
			set { this[Mobile.Columns.K] = value; }
		}
		/// <summary>
		/// Link to the Usr table if this mobile number has been linked to a user.
		/// </summary>
		public override int UsrK
		{
			get { return (int)this[Mobile.Columns.UsrK]; }
			set { this[Mobile.Columns.UsrK] = value; }
		}
		/// <summary>
		/// The mobile number, incluting the 2 digit country code, and excluding the leading zero.
		/// </summary>
		public override string Number
		{
			get { return (string)this[Mobile.Columns.Number]; }
			set { this[Mobile.Columns.Number] = value; }
		}
		/// <summary>
		/// The 2-digit int network id - 10=O2, 15=Vodaphone, 30=T-Mobile/Virgin, 33=Orange
		/// </summary>
		public override int Network
		{
			get { return (int)this[Mobile.Columns.Network]; }
			set { this[Mobile.Columns.Network] = value; }
		}
		/// <summary>
		/// Total number of incoming messages
		/// </summary>
		public override int TotalIncoming
		{
			get { return (int)this[Mobile.Columns.TotalIncoming]; }
			set { this[Mobile.Columns.TotalIncoming] = value; }
		}
		/// <summary>
		/// Total number of outgoing messages
		/// </summary>
		public override int TotalOutgoing
		{
			get { return (int)this[Mobile.Columns.TotalOutgoing]; }
			set { this[Mobile.Columns.TotalOutgoing] = value; }
		}
		/// <summary>
		/// DateTime that the forst incoming was received, and the account was created.
		/// </summary>
		public override DateTime DateTimeCreated
		{
			get { return (DateTime)this[Mobile.Columns.DateTimeCreated]; }
			set { this[Mobile.Columns.DateTimeCreated] = value; }
		}
		/// <summary>
		/// DateTime that the last message arrived
		/// </summary>
		public override DateTime DateTimeLastIncoming
		{
			get { return (DateTime)this[Mobile.Columns.DateTimeLastIncoming]; }
			set { this[Mobile.Columns.DateTimeLastIncoming] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildMobiles
	{
		CachedSqlSelect<Mobile> ChildMobiles();
		CachedSqlSelect<Mobile> ChildMobiles(Q where);
		CachedSqlSelect<Mobile> ChildMobiles(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<Mobile> ChildMobiles(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class Mobile 
	 : 
	Bobs.ChildInterfaces.IHasChildIncomingSmss
	,
	Bobs.ChildInterfaces.IHasChildOutgoingSmss
	,
	Bobs.ChildInterfaces.IHasChildPhotos
		{
			public CachedSqlSelect<IncomingSms> ChildIncomingSmss()
		{
			return this.ChildIncomingSmss(null, null);
		}
		public CachedSqlSelect<IncomingSms> ChildIncomingSmss(Q where)
		{
			return this.ChildIncomingSmss(where, null);
		}
		public CachedSqlSelect<IncomingSms> ChildIncomingSmss(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildIncomingSmss(null, orderBy);
		}
		public CachedSqlSelect<IncomingSms> ChildIncomingSmss(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<IncomingSms>
			(
				new Children<IncomingSms>
				(
					TablesEnum.Mobile, 
					this.K, 
					TablesEnum.IncomingSms, 
					dr => 
					{ 
						IncomingSms newIncomingSms = new IncomingSms(); 
						newIncomingSms.Initialise(dr); 
						return newIncomingSms;
					},
					"3B819721",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<OutgoingSms> ChildOutgoingSmss()
		{
			return this.ChildOutgoingSmss(null, null);
		}
		public CachedSqlSelect<OutgoingSms> ChildOutgoingSmss(Q where)
		{
			return this.ChildOutgoingSmss(where, null);
		}
		public CachedSqlSelect<OutgoingSms> ChildOutgoingSmss(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildOutgoingSmss(null, orderBy);
		}
		public CachedSqlSelect<OutgoingSms> ChildOutgoingSmss(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<OutgoingSms>
			(
				new Children<OutgoingSms>
				(
					TablesEnum.Mobile, 
					this.K, 
					TablesEnum.OutgoingSms, 
					dr => 
					{ 
						OutgoingSms newOutgoingSms = new OutgoingSms(); 
						newOutgoingSms.Initialise(dr); 
						return newOutgoingSms;
					},
					"35F6F63C",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<Photo> ChildPhotos()
		{
			return this.ChildPhotos(null, null);
		}
		public CachedSqlSelect<Photo> ChildPhotos(Q where)
		{
			return this.ChildPhotos(where, null);
		}
		public CachedSqlSelect<Photo> ChildPhotos(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildPhotos(null, orderBy);
		}
		public CachedSqlSelect<Photo> ChildPhotos(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<Photo>
			(
				new Children<Photo>
				(
					TablesEnum.Mobile, 
					this.K, 
					TablesEnum.Photo, 
					dr => 
					{ 
						Photo newPhoto = new Photo(); 
						newPhoto.Initialise(dr); 
						return newPhoto;
					},
					"71653456",
					where,
					orderBy
				)
			);
		}
		}

	#region MobileDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region MobileDataHolder
	/// <summary>
	/// A mobile number (tracks vaious stats)DataHolder
	/// </summary>
	[Serializable]
	public partial class MobileDataHolder : DataHolder<Mobile>
	{
		Mobile dataHolder;
		[NonSerializedAttribute] Mobile bob;

		public MobileDataHolder()
		{
			this.dataHolder = new Mobile();
		}
		
		void CopyValues(Mobile source, Mobile destination)
		{
			destination[Bobs.Mobile.Columns.K] = source[Bobs.Mobile.Columns.K];
			destination[Bobs.Mobile.Columns.UsrK] = source[Bobs.Mobile.Columns.UsrK];
			destination[Bobs.Mobile.Columns.Number] = source[Bobs.Mobile.Columns.Number];
			destination[Bobs.Mobile.Columns.Network] = source[Bobs.Mobile.Columns.Network];
			destination[Bobs.Mobile.Columns.TotalIncoming] = source[Bobs.Mobile.Columns.TotalIncoming];
			destination[Bobs.Mobile.Columns.TotalOutgoing] = source[Bobs.Mobile.Columns.TotalOutgoing];
			destination[Bobs.Mobile.Columns.DateTimeCreated] = source[Bobs.Mobile.Columns.DateTimeCreated];
			destination[Bobs.Mobile.Columns.DateTimeLastIncoming] = source[Bobs.Mobile.Columns.DateTimeLastIncoming];
		}
		
		public MobileDataHolder(Mobile bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// The primary key
		/// </summary>
		public int K
		{
			get { return dataHolder.K; }
			set { this.dataHolder.K = value; }
		}
		/// <summary>
		/// Link to the Usr table if this mobile number has been linked to a user.
		/// </summary>
		public int UsrK
		{
			get { return dataHolder.UsrK; }
			set { this.dataHolder.UsrK = value; }
		}
		/// <summary>
		/// The mobile number, incluting the 2 digit country code, and excluding the leading zero.
		/// </summary>
		public string Number
		{
			get { return dataHolder.Number; }
			set { this.dataHolder.Number = value; }
		}
		/// <summary>
		/// The 2-digit int network id - 10=O2, 15=Vodaphone, 30=T-Mobile/Virgin, 33=Orange
		/// </summary>
		public int Network
		{
			get { return dataHolder.Network; }
			set { this.dataHolder.Network = value; }
		}
		/// <summary>
		/// Total number of incoming messages
		/// </summary>
		public int TotalIncoming
		{
			get { return dataHolder.TotalIncoming; }
			set { this.dataHolder.TotalIncoming = value; }
		}
		/// <summary>
		/// Total number of outgoing messages
		/// </summary>
		public int TotalOutgoing
		{
			get { return dataHolder.TotalOutgoing; }
			set { this.dataHolder.TotalOutgoing = value; }
		}
		/// <summary>
		/// DateTime that the forst incoming was received, and the account was created.
		/// </summary>
		public DateTime DateTimeCreated
		{
			get { return dataHolder.DateTimeCreated; }
			set { this.dataHolder.DateTimeCreated = value; }
		}
		/// <summary>
		/// DateTime that the last message arrived
		/// </summary>
		public DateTime DateTimeLastIncoming
		{
			get { return dataHolder.DateTimeLastIncoming; }
			set { this.dataHolder.DateTimeLastIncoming = value; }
		}
		#endregion
		public Mobile Mobile
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new Mobile(K);
					}
					else
					{
						bob = new Mobile();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region MobileSet
	public partial class MobileSet : BobSet, IEnumerable<Mobile>
	{
		public MobileSet(Query query) : base(query) { }

		public Mobile this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new Mobile(this);
					((Mobile)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (Mobile)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new MobileTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<Mobile> ToList()
		{
			List<Mobile> list = new List<Mobile>();
			foreach (Mobile item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<Mobile> Members

		public new IEnumerator<Mobile> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region MobileTableDef
	public class MobileTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "Mobile";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "45E0E482";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return Mobile.GetColumnName((Mobile.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.Mobile;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return true;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return Mobile.Columns.K;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			Mobile.Columns c = (Mobile.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case Mobile.Columns.K: ColumnStore[i] = new ColumnDef(c, "K", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey | SqlColumnFlag.AutoNumber, null); break;
					case Mobile.Columns.UsrK: ColumnStore[i] = new ColumnDef(c, "UsrK", SqlDbType.Int, 0); break;
					case Mobile.Columns.Number: ColumnStore[i] = new ColumnDef(c, "Number", SqlDbType.VarChar, 20, ""); break;
					case Mobile.Columns.Network: ColumnStore[i] = new ColumnDef(c, "Network", SqlDbType.Int, 0); break;
					case Mobile.Columns.TotalIncoming: ColumnStore[i] = new ColumnDef(c, "TotalIncoming", SqlDbType.Int, 0); break;
					case Mobile.Columns.TotalOutgoing: ColumnStore[i] = new ColumnDef(c, "TotalOutgoing", SqlDbType.Int, 0); break;
					case Mobile.Columns.DateTimeCreated: ColumnStore[i] = new ColumnDef(c, "DateTimeCreated", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case Mobile.Columns.DateTimeLastIncoming: ColumnStore[i] = new ColumnDef(c, "DateTimeLastIncoming", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(Mobile.Columns.K);
						InitColumn(Mobile.Columns.UsrK);
						InitColumn(Mobile.Columns.Number);
						InitColumn(Mobile.Columns.Network);
						InitColumn(Mobile.Columns.TotalIncoming);
						InitColumn(Mobile.Columns.TotalOutgoing);
						InitColumn(Mobile.Columns.DateTimeCreated);
						InitColumn(Mobile.Columns.DateTimeLastIncoming);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region MusicType
	/// <summary>
	/// Music types (heirachy)
	/// </summary>
	public partial class MusicType : Model.Entities.MusicType, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// The primary key
			/// </summary>
			K = 0x003e0001,
			/// <summary>
			/// Name - e.g. House, Techno, Drum'n'Bass
			/// </summary>
			Name = 0x003e0002,
			/// <summary>
			/// Link to parent MusicType
			/// </summary>
			ParentK = 0x003e0003,
			/// <summary>
			/// Generic name - e.g. Name="All Techno" GenericName="Techno"
			/// </summary>
			GenericName = 0x003e0004,
			/// <summary>
			/// Order - list order
			/// </summary>
			Order = 0x003e0005,
			/// <summary>
			/// Music type codesd used in incoming sms's
			/// </summary>
			SmsCode = 0x003e0006,
			/// <summary>
			/// Sort names used in outgoing sms's
			/// </summary>
			SmsName = 0x003e0007,
			/// <summary>
			/// Description for main music types
			/// </summary>
			Description = 0x003e0008,
		}
		#endregion
		public static string GetColumnName(MusicType.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case MusicType.Columns.K: return "K";
						case MusicType.Columns.Name: return "Name";
						case MusicType.Columns.ParentK: return "ParentK";
						case MusicType.Columns.GenericName: return "GenericName";
						case MusicType.Columns.Order: return "Order";
						case MusicType.Columns.SmsCode: return "SmsCode";
						case MusicType.Columns.SmsName: return "SmsName";
						case MusicType.Columns.Description: return "Description";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(MusicType.Columns columnEnum)
		{
			switch (columnEnum)
			{
												default: return false;
			}
		}


		#region Common
 
		public MusicType(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);  }
		public MusicType()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.MusicType);
		}
		public MusicType(BobSet bs)
		{
			this.Bob = new Bob(bs.Table, bs);
		}
		public MusicType(int MusicTypeK, IBob Parent, object Column)
			: this()
		{
			Bob.GetBobFromParent(MusicTypeK, Parent.Bob, Column, TablesEnum.MusicType);
		}
		public MusicType(int MusicTypeK)
			: this()
		{
			Bob.GetBobFromPrimaryKey(MusicTypeK);
		}
		#endregion

	}
	#endregion
	#region MusicTypeTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region MusicType
	/// <summary>
	/// Music types (heirachy)
	/// </summary>
	[Serializable]
	public partial class MusicType 
	{
		
		#region Simple members
		/// <summary>
		/// The primary key
		/// </summary>
		public override int K
		{
			get { return (int)this[MusicType.Columns.K] as int? ?? 0 ; }
			set { this[MusicType.Columns.K] = value; }
		}
		/// <summary>
		/// Name - e.g. House, Techno, Drum'n'Bass
		/// </summary>
		public override string Name
		{
			get { return (string)this[MusicType.Columns.Name]; }
			set { this[MusicType.Columns.Name] = value; }
		}
		/// <summary>
		/// Link to parent MusicType
		/// </summary>
		public override int ParentK
		{
			get { return (int)this[MusicType.Columns.ParentK]; }
			set { this[MusicType.Columns.ParentK] = value; }
		}
		/// <summary>
		/// Generic name - e.g. Name="All Techno" GenericName="Techno"
		/// </summary>
		public override string GenericName
		{
			get { return (string)this[MusicType.Columns.GenericName]; }
			set { this[MusicType.Columns.GenericName] = value; }
		}
		/// <summary>
		/// Order - list order
		/// </summary>
		public override double Order
		{
			get { return (double)this[MusicType.Columns.Order]; }
			set { this[MusicType.Columns.Order] = value; }
		}
		/// <summary>
		/// Music type codesd used in incoming sms's
		/// </summary>
		public override string SmsCode
		{
			get { return (string)this[MusicType.Columns.SmsCode]; }
			set { this[MusicType.Columns.SmsCode] = value; }
		}
		/// <summary>
		/// Sort names used in outgoing sms's
		/// </summary>
		public override string SmsName
		{
			get { return (string)this[MusicType.Columns.SmsName]; }
			set { this[MusicType.Columns.SmsName] = value; }
		}
		/// <summary>
		/// Description for main music types
		/// </summary>
		public override string Description
		{
			get { return (string)this[MusicType.Columns.Description]; }
			set { this[MusicType.Columns.Description] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildMusicTypes
	{
		CachedSqlSelect<MusicType> ChildMusicTypes();
		CachedSqlSelect<MusicType> ChildMusicTypes(Q where);
		CachedSqlSelect<MusicType> ChildMusicTypes(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<MusicType> ChildMusicTypes(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class MusicType 
	 : 
	Bobs.ChildInterfaces.IHasChildBannerMusicTypes
	,
	Bobs.ChildInterfaces.IHasChildEventMusicTypes
	,
	Bobs.ChildInterfaces.IHasChildGroups
	,
	Bobs.ChildInterfaces.IHasChildThreads
	,
	Bobs.ChildInterfaces.IHasChildUsrMusicTypeFavourites
		{
			public CachedSqlSelect<BannerMusicType> ChildBannerMusicTypes()
		{
			return this.ChildBannerMusicTypes(null, null);
		}
		public CachedSqlSelect<BannerMusicType> ChildBannerMusicTypes(Q where)
		{
			return this.ChildBannerMusicTypes(where, null);
		}
		public CachedSqlSelect<BannerMusicType> ChildBannerMusicTypes(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildBannerMusicTypes(null, orderBy);
		}
		public CachedSqlSelect<BannerMusicType> ChildBannerMusicTypes(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<BannerMusicType>
			(
				new Children<BannerMusicType>
				(
					TablesEnum.MusicType, 
					this.K, 
					TablesEnum.BannerMusicType, 
					dr => 
					{ 
						BannerMusicType newBannerMusicType = new BannerMusicType(); 
						newBannerMusicType.Initialise(dr); 
						return newBannerMusicType;
					},
					"11F97371",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<EventMusicType> ChildEventMusicTypes()
		{
			return this.ChildEventMusicTypes(null, null);
		}
		public CachedSqlSelect<EventMusicType> ChildEventMusicTypes(Q where)
		{
			return this.ChildEventMusicTypes(where, null);
		}
		public CachedSqlSelect<EventMusicType> ChildEventMusicTypes(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildEventMusicTypes(null, orderBy);
		}
		public CachedSqlSelect<EventMusicType> ChildEventMusicTypes(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<EventMusicType>
			(
				new Children<EventMusicType>
				(
					TablesEnum.MusicType, 
					this.K, 
					TablesEnum.EventMusicType, 
					dr => 
					{ 
						EventMusicType newEventMusicType = new EventMusicType(); 
						newEventMusicType.Initialise(dr); 
						return newEventMusicType;
					},
					"D9782475",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<Group> ChildGroups()
		{
			return this.ChildGroups(null, null);
		}
		public CachedSqlSelect<Group> ChildGroups(Q where)
		{
			return this.ChildGroups(where, null);
		}
		public CachedSqlSelect<Group> ChildGroups(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildGroups(null, orderBy);
		}
		public CachedSqlSelect<Group> ChildGroups(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<Group>
			(
				new Children<Group>
				(
					TablesEnum.MusicType, 
					this.K, 
					TablesEnum.Group, 
					dr => 
					{ 
						Group newGroup = new Group(); 
						newGroup.Initialise(dr); 
						return newGroup;
					},
					"81294206",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<Thread> ChildThreads()
		{
			return this.ChildThreads(null, null);
		}
		public CachedSqlSelect<Thread> ChildThreads(Q where)
		{
			return this.ChildThreads(where, null);
		}
		public CachedSqlSelect<Thread> ChildThreads(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildThreads(null, orderBy);
		}
		public CachedSqlSelect<Thread> ChildThreads(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<Thread>
			(
				new Children<Thread>
				(
					TablesEnum.MusicType, 
					this.K, 
					TablesEnum.Thread, 
					dr => 
					{ 
						Thread newThread = new Thread(); 
						newThread.Initialise(dr); 
						return newThread;
					},
					"4576C3F1",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<UsrMusicTypeFavourite> ChildUsrMusicTypeFavourites()
		{
			return this.ChildUsrMusicTypeFavourites(null, null);
		}
		public CachedSqlSelect<UsrMusicTypeFavourite> ChildUsrMusicTypeFavourites(Q where)
		{
			return this.ChildUsrMusicTypeFavourites(where, null);
		}
		public CachedSqlSelect<UsrMusicTypeFavourite> ChildUsrMusicTypeFavourites(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildUsrMusicTypeFavourites(null, orderBy);
		}
		public CachedSqlSelect<UsrMusicTypeFavourite> ChildUsrMusicTypeFavourites(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<UsrMusicTypeFavourite>
			(
				new Children<UsrMusicTypeFavourite>
				(
					TablesEnum.MusicType, 
					this.K, 
					TablesEnum.UsrMusicTypeFavourite, 
					dr => 
					{ 
						UsrMusicTypeFavourite newUsrMusicTypeFavourite = new UsrMusicTypeFavourite(); 
						newUsrMusicTypeFavourite.Initialise(dr); 
						return newUsrMusicTypeFavourite;
					},
					"48E84A36",
					where,
					orderBy
				)
			);
		}
		}

	#region MusicTypeDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region MusicTypeDataHolder
	/// <summary>
	/// Music types (heirachy)DataHolder
	/// </summary>
	[Serializable]
	public partial class MusicTypeDataHolder : DataHolder<MusicType>
	{
		MusicType dataHolder;
		[NonSerializedAttribute] MusicType bob;

		public MusicTypeDataHolder()
		{
			this.dataHolder = new MusicType();
		}
		
		void CopyValues(MusicType source, MusicType destination)
		{
			destination[Bobs.MusicType.Columns.K] = source[Bobs.MusicType.Columns.K];
			destination[Bobs.MusicType.Columns.Name] = source[Bobs.MusicType.Columns.Name];
			destination[Bobs.MusicType.Columns.ParentK] = source[Bobs.MusicType.Columns.ParentK];
			destination[Bobs.MusicType.Columns.GenericName] = source[Bobs.MusicType.Columns.GenericName];
			destination[Bobs.MusicType.Columns.Order] = source[Bobs.MusicType.Columns.Order];
			destination[Bobs.MusicType.Columns.SmsCode] = source[Bobs.MusicType.Columns.SmsCode];
			destination[Bobs.MusicType.Columns.SmsName] = source[Bobs.MusicType.Columns.SmsName];
			destination[Bobs.MusicType.Columns.Description] = source[Bobs.MusicType.Columns.Description];
		}
		
		public MusicTypeDataHolder(MusicType bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// The primary key
		/// </summary>
		public int K
		{
			get { return dataHolder.K; }
			set { this.dataHolder.K = value; }
		}
		/// <summary>
		/// Name - e.g. House, Techno, Drum'n'Bass
		/// </summary>
		public string Name
		{
			get { return dataHolder.Name; }
			set { this.dataHolder.Name = value; }
		}
		/// <summary>
		/// Link to parent MusicType
		/// </summary>
		public int ParentK
		{
			get { return dataHolder.ParentK; }
			set { this.dataHolder.ParentK = value; }
		}
		/// <summary>
		/// Generic name - e.g. Name="All Techno" GenericName="Techno"
		/// </summary>
		public string GenericName
		{
			get { return dataHolder.GenericName; }
			set { this.dataHolder.GenericName = value; }
		}
		/// <summary>
		/// Order - list order
		/// </summary>
		public double Order
		{
			get { return dataHolder.Order; }
			set { this.dataHolder.Order = value; }
		}
		/// <summary>
		/// Music type codesd used in incoming sms's
		/// </summary>
		public string SmsCode
		{
			get { return dataHolder.SmsCode; }
			set { this.dataHolder.SmsCode = value; }
		}
		/// <summary>
		/// Sort names used in outgoing sms's
		/// </summary>
		public string SmsName
		{
			get { return dataHolder.SmsName; }
			set { this.dataHolder.SmsName = value; }
		}
		/// <summary>
		/// Description for main music types
		/// </summary>
		public string Description
		{
			get { return dataHolder.Description; }
			set { this.dataHolder.Description = value; }
		}
		#endregion
		public MusicType MusicType
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new MusicType(K);
					}
					else
					{
						bob = new MusicType();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region MusicTypeSet
	public partial class MusicTypeSet : BobSet, IEnumerable<MusicType>
	{
		public MusicTypeSet(Query query) : base(query) { }

		public MusicType this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new MusicType(this);
					((MusicType)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (MusicType)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new MusicTypeTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<MusicType> ToList()
		{
			List<MusicType> list = new List<MusicType>();
			foreach (MusicType item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<MusicType> Members

		public new IEnumerator<MusicType> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region MusicTypeTableDef
	public class MusicTypeTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "MusicType";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "548B4966";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return MusicType.GetColumnName((MusicType.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.MusicType;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return true;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return MusicType.Columns.K;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			MusicType.Columns c = (MusicType.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case MusicType.Columns.K: ColumnStore[i] = new ColumnDef(c, "K", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey | SqlColumnFlag.AutoNumber, null); break;
					case MusicType.Columns.Name: ColumnStore[i] = new ColumnDef(c, "Name", SqlDbType.VarChar, ""); break;
					case MusicType.Columns.ParentK: ColumnStore[i] = new ColumnDef(c, "ParentK", SqlDbType.Int, 0); break;
					case MusicType.Columns.GenericName: ColumnStore[i] = new ColumnDef(c, "GenericName", SqlDbType.VarChar, ""); break;
					case MusicType.Columns.Order: ColumnStore[i] = new ColumnDef(c, "Order", SqlDbType.Float, 0.0); break;
					case MusicType.Columns.SmsCode: ColumnStore[i] = new ColumnDef(c, "SmsCode", SqlDbType.VarChar, 20, ""); break;
					case MusicType.Columns.SmsName: ColumnStore[i] = new ColumnDef(c, "SmsName", SqlDbType.VarChar, 20, ""); break;
					case MusicType.Columns.Description: ColumnStore[i] = new ColumnDef(c, "Description", SqlDbType.VarChar, ""); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(MusicType.Columns.K);
						InitColumn(MusicType.Columns.Name);
						InitColumn(MusicType.Columns.ParentK);
						InitColumn(MusicType.Columns.GenericName);
						InitColumn(MusicType.Columns.Order);
						InitColumn(MusicType.Columns.SmsCode);
						InitColumn(MusicType.Columns.SmsName);
						InitColumn(MusicType.Columns.Description);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region OutgoingSms
	/// <summary>
	/// Table where all outgoing sms's are logged
	/// </summary>
	public partial class OutgoingSms : Model.Entities.OutgoingSms, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// The primary key
			/// </summary>
			K = 0x003f0001,
			/// <summary>
			/// The datetime that the message was sent
			/// </summary>
			DateTime = 0x003f0002,
			/// <summary>
			/// Type - the type of response
			/// </summary>
			Type = 0x003f0003,
			/// <summary>
			/// If theis sms was triggered by an incoming sms, this is the link to the IncomingSms table.
			/// </summary>
			IncomingSmsK = 0x003f0004,
			/// <summary>
			/// This is the full string that was posted to iTagg to send the message
			/// </summary>
			PostString = 0x003f0005,
			/// <summary>
			/// The message
			/// </summary>
			Message = 0x003f0006,
			/// <summary>
			/// Did the sms send OK? 0=OK, !0=Error
			/// </summary>
			ErrorCode = 0x003f0007,
			/// <summary>
			/// Error string returned
			/// </summary>
			ErrorText = 0x003f0008,
			/// <summary>
			/// Submission reference returned by the sms server
			/// </summary>
			SubmissionReference = 0x003f0009,
			/// <summary>
			/// How is this outgoing sms charged?
			/// </summary>
			ChargeType = 0x003f000a,
			/// <summary>
			/// Has the text been sent to the sms server properly?
			/// </summary>
			Sent = 0x003f000b,
			/// <summary>
			/// The mobile that the message is being sent to
			/// </summary>
			MobileK = 0x003f000c,
			/// <summary>
			/// Incoming type - Tonight or Pllay
			/// </summary>
			ServiceType = 0x003f000d,
			/// <summary>
			/// The message was successfully delivered (and charged if it is a premium rate sms)
			/// </summary>
			Delivered = 0x003f000e,
		}
		#endregion
		public static string GetColumnName(OutgoingSms.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case OutgoingSms.Columns.K: return "K";
						case OutgoingSms.Columns.DateTime: return "DateTime";
						case OutgoingSms.Columns.Type: return "Type";
						case OutgoingSms.Columns.IncomingSmsK: return "IncomingSmsK";
						case OutgoingSms.Columns.PostString: return "PostString";
						case OutgoingSms.Columns.Message: return "Message";
						case OutgoingSms.Columns.ErrorCode: return "ErrorCode";
						case OutgoingSms.Columns.ErrorText: return "ErrorText";
						case OutgoingSms.Columns.SubmissionReference: return "SubmissionReference";
						case OutgoingSms.Columns.ChargeType: return "ChargeType";
						case OutgoingSms.Columns.Sent: return "Sent";
						case OutgoingSms.Columns.MobileK: return "MobileK";
						case OutgoingSms.Columns.ServiceType: return "ServiceType";
						case OutgoingSms.Columns.Delivered: return "Delivered";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(OutgoingSms.Columns columnEnum)
		{
			switch (columnEnum)
			{
																		default: return false;
			}
		}


		#region Common
 
		public OutgoingSms(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);  }
		public OutgoingSms()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.OutgoingSms);
		}
		public OutgoingSms(BobSet bs)
		{
			this.Bob = new Bob(bs.Table, bs);
		}
		public OutgoingSms(int OutgoingSmsK, IBob Parent, object Column)
			: this()
		{
			Bob.GetBobFromParent(OutgoingSmsK, Parent.Bob, Column, TablesEnum.OutgoingSms);
		}
		public OutgoingSms(int OutgoingSmsK)
			: this()
		{
			Bob.GetBobFromPrimaryKey(OutgoingSmsK);
		}
		#endregion

	}
	#endregion
	#region OutgoingSmsTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region OutgoingSms
	/// <summary>
	/// Table where all outgoing sms's are logged
	/// </summary>
	[Serializable]
	public partial class OutgoingSms 
	{
		
		#region Simple members
		/// <summary>
		/// The primary key
		/// </summary>
		public override int K
		{
			get { return (int)this[OutgoingSms.Columns.K] as int? ?? 0 ; }
			set { this[OutgoingSms.Columns.K] = value; }
		}
		/// <summary>
		/// The datetime that the message was sent
		/// </summary>
		public override DateTime DateTime
		{
			get { return (DateTime)this[OutgoingSms.Columns.DateTime]; }
			set { this[OutgoingSms.Columns.DateTime] = value; }
		}
		/// <summary>
		/// Type - the type of response
		/// </summary>
		public override int? Type
		{
			get { return (int?)this[OutgoingSms.Columns.Type]; }
			set { this[OutgoingSms.Columns.Type] = value; }
		}
		/// <summary>
		/// If theis sms was triggered by an incoming sms, this is the link to the IncomingSms table.
		/// </summary>
		public override int? IncomingSmsK
		{
			get { return (int?)this[OutgoingSms.Columns.IncomingSmsK]; }
			set { this[OutgoingSms.Columns.IncomingSmsK] = value; }
		}
		/// <summary>
		/// This is the full string that was posted to iTagg to send the message
		/// </summary>
		public override string PostString
		{
			get { return (string)this[OutgoingSms.Columns.PostString]; }
			set { this[OutgoingSms.Columns.PostString] = value; }
		}
		/// <summary>
		/// The message
		/// </summary>
		public override string Message
		{
			get { return (string)this[OutgoingSms.Columns.Message]; }
			set { this[OutgoingSms.Columns.Message] = value; }
		}
		/// <summary>
		/// Did the sms send OK? 0=OK, !0=Error
		/// </summary>
		public override int ErrorCode
		{
			get { return (int)this[OutgoingSms.Columns.ErrorCode]; }
			set { this[OutgoingSms.Columns.ErrorCode] = value; }
		}
		/// <summary>
		/// Error string returned
		/// </summary>
		public override string ErrorText
		{
			get { return (string)this[OutgoingSms.Columns.ErrorText]; }
			set { this[OutgoingSms.Columns.ErrorText] = value; }
		}
		/// <summary>
		/// Submission reference returned by the sms server
		/// </summary>
		public override string SubmissionReference
		{
			get { return (string)this[OutgoingSms.Columns.SubmissionReference]; }
			set { this[OutgoingSms.Columns.SubmissionReference] = value; }
		}
		/// <summary>
		/// How is this outgoing sms charged?
		/// </summary>
		public override int? ChargeType
		{
			get { return (int?)this[OutgoingSms.Columns.ChargeType]; }
			set { this[OutgoingSms.Columns.ChargeType] = value; }
		}
		/// <summary>
		/// Has the text been sent to the sms server properly?
		/// </summary>
		public override bool Sent
		{
			get { return (bool)this[OutgoingSms.Columns.Sent]; }
			set { this[OutgoingSms.Columns.Sent] = value; }
		}
		/// <summary>
		/// The mobile that the message is being sent to
		/// </summary>
		public override int MobileK
		{
			get { return (int)this[OutgoingSms.Columns.MobileK]; }
			set { this[OutgoingSms.Columns.MobileK] = value; }
		}
		/// <summary>
		/// Incoming type - Tonight or Pllay
		/// </summary>
		public override int? ServiceType
		{
			get { return (int?)this[OutgoingSms.Columns.ServiceType]; }
			set { this[OutgoingSms.Columns.ServiceType] = value; }
		}
		/// <summary>
		/// The message was successfully delivered (and charged if it is a premium rate sms)
		/// </summary>
		public override bool Delivered
		{
			get { return (bool)this[OutgoingSms.Columns.Delivered]; }
			set { this[OutgoingSms.Columns.Delivered] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildOutgoingSmss
	{
		CachedSqlSelect<OutgoingSms> ChildOutgoingSmss();
		CachedSqlSelect<OutgoingSms> ChildOutgoingSmss(Q where);
		CachedSqlSelect<OutgoingSms> ChildOutgoingSmss(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<OutgoingSms> ChildOutgoingSmss(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class OutgoingSms 
		{
		}

	#region OutgoingSmsDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region OutgoingSmsDataHolder
	/// <summary>
	/// Table where all outgoing sms's are loggedDataHolder
	/// </summary>
	[Serializable]
	public partial class OutgoingSmsDataHolder : DataHolder<OutgoingSms>
	{
		OutgoingSms dataHolder;
		[NonSerializedAttribute] OutgoingSms bob;

		public OutgoingSmsDataHolder()
		{
			this.dataHolder = new OutgoingSms();
		}
		
		void CopyValues(OutgoingSms source, OutgoingSms destination)
		{
			destination[Bobs.OutgoingSms.Columns.K] = source[Bobs.OutgoingSms.Columns.K];
			destination[Bobs.OutgoingSms.Columns.DateTime] = source[Bobs.OutgoingSms.Columns.DateTime];
			destination[Bobs.OutgoingSms.Columns.Type] = source[Bobs.OutgoingSms.Columns.Type];
			destination[Bobs.OutgoingSms.Columns.IncomingSmsK] = source[Bobs.OutgoingSms.Columns.IncomingSmsK];
			destination[Bobs.OutgoingSms.Columns.PostString] = source[Bobs.OutgoingSms.Columns.PostString];
			destination[Bobs.OutgoingSms.Columns.Message] = source[Bobs.OutgoingSms.Columns.Message];
			destination[Bobs.OutgoingSms.Columns.ErrorCode] = source[Bobs.OutgoingSms.Columns.ErrorCode];
			destination[Bobs.OutgoingSms.Columns.ErrorText] = source[Bobs.OutgoingSms.Columns.ErrorText];
			destination[Bobs.OutgoingSms.Columns.SubmissionReference] = source[Bobs.OutgoingSms.Columns.SubmissionReference];
			destination[Bobs.OutgoingSms.Columns.ChargeType] = source[Bobs.OutgoingSms.Columns.ChargeType];
			destination[Bobs.OutgoingSms.Columns.Sent] = source[Bobs.OutgoingSms.Columns.Sent];
			destination[Bobs.OutgoingSms.Columns.MobileK] = source[Bobs.OutgoingSms.Columns.MobileK];
			destination[Bobs.OutgoingSms.Columns.ServiceType] = source[Bobs.OutgoingSms.Columns.ServiceType];
			destination[Bobs.OutgoingSms.Columns.Delivered] = source[Bobs.OutgoingSms.Columns.Delivered];
		}
		
		public OutgoingSmsDataHolder(OutgoingSms bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// The primary key
		/// </summary>
		public int K
		{
			get { return dataHolder.K; }
			set { this.dataHolder.K = value; }
		}
		/// <summary>
		/// The datetime that the message was sent
		/// </summary>
		public DateTime DateTime
		{
			get { return dataHolder.DateTime; }
			set { this.dataHolder.DateTime = value; }
		}
		/// <summary>
		/// Type - the type of response
		/// </summary>
		public int? Type
		{
			get { return dataHolder.Type; }
			set { this.dataHolder.Type = value; }
		}
		/// <summary>
		/// If theis sms was triggered by an incoming sms, this is the link to the IncomingSms table.
		/// </summary>
		public int? IncomingSmsK
		{
			get { return dataHolder.IncomingSmsK; }
			set { this.dataHolder.IncomingSmsK = value; }
		}
		/// <summary>
		/// This is the full string that was posted to iTagg to send the message
		/// </summary>
		public string PostString
		{
			get { return dataHolder.PostString; }
			set { this.dataHolder.PostString = value; }
		}
		/// <summary>
		/// The message
		/// </summary>
		public string Message
		{
			get { return dataHolder.Message; }
			set { this.dataHolder.Message = value; }
		}
		/// <summary>
		/// Did the sms send OK? 0=OK, !0=Error
		/// </summary>
		public int ErrorCode
		{
			get { return dataHolder.ErrorCode; }
			set { this.dataHolder.ErrorCode = value; }
		}
		/// <summary>
		/// Error string returned
		/// </summary>
		public string ErrorText
		{
			get { return dataHolder.ErrorText; }
			set { this.dataHolder.ErrorText = value; }
		}
		/// <summary>
		/// Submission reference returned by the sms server
		/// </summary>
		public string SubmissionReference
		{
			get { return dataHolder.SubmissionReference; }
			set { this.dataHolder.SubmissionReference = value; }
		}
		/// <summary>
		/// How is this outgoing sms charged?
		/// </summary>
		public int? ChargeType
		{
			get { return dataHolder.ChargeType; }
			set { this.dataHolder.ChargeType = value; }
		}
		/// <summary>
		/// Has the text been sent to the sms server properly?
		/// </summary>
		public bool Sent
		{
			get { return dataHolder.Sent; }
			set { this.dataHolder.Sent = value; }
		}
		/// <summary>
		/// The mobile that the message is being sent to
		/// </summary>
		public int MobileK
		{
			get { return dataHolder.MobileK; }
			set { this.dataHolder.MobileK = value; }
		}
		/// <summary>
		/// Incoming type - Tonight or Pllay
		/// </summary>
		public int? ServiceType
		{
			get { return dataHolder.ServiceType; }
			set { this.dataHolder.ServiceType = value; }
		}
		/// <summary>
		/// The message was successfully delivered (and charged if it is a premium rate sms)
		/// </summary>
		public bool Delivered
		{
			get { return dataHolder.Delivered; }
			set { this.dataHolder.Delivered = value; }
		}
		#endregion
		public OutgoingSms OutgoingSms
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new OutgoingSms(K);
					}
					else
					{
						bob = new OutgoingSms();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region OutgoingSmsSet
	public partial class OutgoingSmsSet : BobSet, IEnumerable<OutgoingSms>
	{
		public OutgoingSmsSet(Query query) : base(query) { }

		public OutgoingSms this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new OutgoingSms(this);
					((OutgoingSms)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (OutgoingSms)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new OutgoingSmsTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<OutgoingSms> ToList()
		{
			List<OutgoingSms> list = new List<OutgoingSms>();
			foreach (OutgoingSms item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<OutgoingSms> Members

		public new IEnumerator<OutgoingSms> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region OutgoingSmsTableDef
	public class OutgoingSmsTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "OutgoingSms";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "35F6F63C";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return OutgoingSms.GetColumnName((OutgoingSms.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.OutgoingSms;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return true;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return OutgoingSms.Columns.K;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			OutgoingSms.Columns c = (OutgoingSms.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case OutgoingSms.Columns.K: ColumnStore[i] = new ColumnDef(c, "K", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey | SqlColumnFlag.AutoNumber, null); break;
					case OutgoingSms.Columns.DateTime: ColumnStore[i] = new ColumnDef(c, "DateTime", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case OutgoingSms.Columns.Type: ColumnStore[i] = new ColumnDef(c, "Type", SqlDbType.Int, null); break;
					case OutgoingSms.Columns.IncomingSmsK: ColumnStore[i] = new ColumnDef(c, "IncomingSmsK", SqlDbType.Int, null); break;
					case OutgoingSms.Columns.PostString: ColumnStore[i] = new ColumnDef(c, "PostString", SqlDbType.VarChar, 500, null); break;
					case OutgoingSms.Columns.Message: ColumnStore[i] = new ColumnDef(c, "Message", SqlDbType.VarChar, 400, null); break;
					case OutgoingSms.Columns.ErrorCode: ColumnStore[i] = new ColumnDef(c, "ErrorCode", SqlDbType.Int, 0); break;
					case OutgoingSms.Columns.ErrorText: ColumnStore[i] = new ColumnDef(c, "ErrorText", SqlDbType.VarChar, 100, null); break;
					case OutgoingSms.Columns.SubmissionReference: ColumnStore[i] = new ColumnDef(c, "SubmissionReference", SqlDbType.VarChar, 100, null); break;
					case OutgoingSms.Columns.ChargeType: ColumnStore[i] = new ColumnDef(c, "ChargeType", SqlDbType.Int, null); break;
					case OutgoingSms.Columns.Sent: ColumnStore[i] = new ColumnDef(c, "Sent", SqlDbType.Bit, false); break;
					case OutgoingSms.Columns.MobileK: ColumnStore[i] = new ColumnDef(c, "MobileK", SqlDbType.Int, 0); break;
					case OutgoingSms.Columns.ServiceType: ColumnStore[i] = new ColumnDef(c, "ServiceType", SqlDbType.Int, null); break;
					case OutgoingSms.Columns.Delivered: ColumnStore[i] = new ColumnDef(c, "Delivered", SqlDbType.Bit, false); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(OutgoingSms.Columns.K);
						InitColumn(OutgoingSms.Columns.DateTime);
						InitColumn(OutgoingSms.Columns.Type);
						InitColumn(OutgoingSms.Columns.IncomingSmsK);
						InitColumn(OutgoingSms.Columns.PostString);
						InitColumn(OutgoingSms.Columns.Message);
						InitColumn(OutgoingSms.Columns.ErrorCode);
						InitColumn(OutgoingSms.Columns.ErrorText);
						InitColumn(OutgoingSms.Columns.SubmissionReference);
						InitColumn(OutgoingSms.Columns.ChargeType);
						InitColumn(OutgoingSms.Columns.Sent);
						InitColumn(OutgoingSms.Columns.MobileK);
						InitColumn(OutgoingSms.Columns.ServiceType);
						InitColumn(OutgoingSms.Columns.Delivered);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region PageTime
	/// <summary>
	/// Used to log the performance of the indevidual pages on the site.
	/// </summary>
	public partial class PageTime : Model.Entities.PageTime, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// The primary key
			/// </summary>
			K = 0x00400001,
			/// <summary>
			/// Link to the Cob table - the page in question
			/// </summary>
			CobK = 0x00400002,
			/// <summary>
			/// Date when these hits took place
			/// </summary>
			Date = 0x00400003,
			/// <summary>
			/// Total number of impressions that this page got during the day
			/// </summary>
			Impressions = 0x00400004,
			/// <summary>
			/// Total time taken to serve this page (used to work out the average page generation time)
			/// </summary>
			TotalTime = 0x00400005,
			/// <summary>
			/// The maximum time taken to generate a page during the day
			/// </summary>
			MaxTime = 0x00400006,
			/// <summary>
			/// The minimum time taken to generate a page during the day
			/// </summary>
			MinTime = 0x00400007,
			/// <summary>
			/// The full URL when the maximum time was recorded
			/// </summary>
			MaxUrl = 0x00400008,
			/// <summary>
			/// The full URL when the minimum time was recorded
			/// </summary>
			MinUrl = 0x00400009,
			/// <summary>
			/// Name of cust page
			/// </summary>
			CustPage = 0x0040000a,
			/// <summary>
			/// Log item
			/// </summary>
			LogItem = 0x0040000b,
		}
		#endregion
		public static string GetColumnName(PageTime.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case PageTime.Columns.K: return "K";
						case PageTime.Columns.CobK: return "CobK";
						case PageTime.Columns.Date: return "Date";
						case PageTime.Columns.Impressions: return "Impressions";
						case PageTime.Columns.TotalTime: return "TotalTime";
						case PageTime.Columns.MaxTime: return "MaxTime";
						case PageTime.Columns.MinTime: return "MinTime";
						case PageTime.Columns.MaxUrl: return "MaxUrl";
						case PageTime.Columns.MinUrl: return "MinUrl";
						case PageTime.Columns.CustPage: return "CustPage";
						case PageTime.Columns.LogItem: return "LogItem";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(PageTime.Columns columnEnum)
		{
			switch (columnEnum)
			{
															default: return false;
			}
		}


		#region Common
 
		public PageTime(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);  }
		public PageTime()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.PageTime);
		}
		public PageTime(BobSet bs)
		{
			this.Bob = new Bob(bs.Table, bs);
		}
		public PageTime(int PageTimeK, IBob Parent, object Column)
			: this()
		{
			Bob.GetBobFromParent(PageTimeK, Parent.Bob, Column, TablesEnum.PageTime);
		}
		public PageTime(int PageTimeK)
			: this()
		{
			Bob.GetBobFromPrimaryKey(PageTimeK);
		}
		#endregion

	}
	#endregion
	#region PageTimeTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region PageTime
	/// <summary>
	/// Used to log the performance of the indevidual pages on the site.
	/// </summary>
	[Serializable]
	public partial class PageTime 
	{
		
		#region Simple members
		/// <summary>
		/// The primary key
		/// </summary>
		public override int K
		{
			get { return (int)this[PageTime.Columns.K] as int? ?? 0 ; }
			set { this[PageTime.Columns.K] = value; }
		}
		/// <summary>
		/// Link to the Cob table - the page in question
		/// </summary>
		public override int CobK
		{
			get { return (int)this[PageTime.Columns.CobK]; }
			set { this[PageTime.Columns.CobK] = value; }
		}
		/// <summary>
		/// Date when these hits took place
		/// </summary>
		public override DateTime Date
		{
			get { return (DateTime)this[PageTime.Columns.Date]; }
			set { this[PageTime.Columns.Date] = value; }
		}
		/// <summary>
		/// Total number of impressions that this page got during the day
		/// </summary>
		public override int Impressions
		{
			get { return (int)this[PageTime.Columns.Impressions]; }
			set { this[PageTime.Columns.Impressions] = value; }
		}
		/// <summary>
		/// Total time taken to serve this page (used to work out the average page generation time)
		/// </summary>
		public override int TotalTime
		{
			get { return (int)this[PageTime.Columns.TotalTime]; }
			set { this[PageTime.Columns.TotalTime] = value; }
		}
		/// <summary>
		/// The maximum time taken to generate a page during the day
		/// </summary>
		public override int MaxTime
		{
			get { return (int)this[PageTime.Columns.MaxTime]; }
			set { this[PageTime.Columns.MaxTime] = value; }
		}
		/// <summary>
		/// The minimum time taken to generate a page during the day
		/// </summary>
		public override int MinTime
		{
			get { return (int)this[PageTime.Columns.MinTime]; }
			set { this[PageTime.Columns.MinTime] = value; }
		}
		/// <summary>
		/// The full URL when the maximum time was recorded
		/// </summary>
		public override string MaxUrl
		{
			get { return (string)this[PageTime.Columns.MaxUrl]; }
			set { this[PageTime.Columns.MaxUrl] = value; }
		}
		/// <summary>
		/// The full URL when the minimum time was recorded
		/// </summary>
		public override string MinUrl
		{
			get { return (string)this[PageTime.Columns.MinUrl]; }
			set { this[PageTime.Columns.MinUrl] = value; }
		}
		/// <summary>
		/// Name of cust page
		/// </summary>
		public override string CustPage
		{
			get { return (string)this[PageTime.Columns.CustPage]; }
			set { this[PageTime.Columns.CustPage] = value; }
		}
		/// <summary>
		/// Log item
		/// </summary>
		public override int LogItem
		{
			get { return (int)this[PageTime.Columns.LogItem]; }
			set { this[PageTime.Columns.LogItem] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildPageTimes
	{
		CachedSqlSelect<PageTime> ChildPageTimes();
		CachedSqlSelect<PageTime> ChildPageTimes(Q where);
		CachedSqlSelect<PageTime> ChildPageTimes(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<PageTime> ChildPageTimes(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class PageTime 
		{
		}

	#region PageTimeDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region PageTimeDataHolder
	/// <summary>
	/// Used to log the performance of the indevidual pages on the site.DataHolder
	/// </summary>
	[Serializable]
	public partial class PageTimeDataHolder : DataHolder<PageTime>
	{
		PageTime dataHolder;
		[NonSerializedAttribute] PageTime bob;

		public PageTimeDataHolder()
		{
			this.dataHolder = new PageTime();
		}
		
		void CopyValues(PageTime source, PageTime destination)
		{
			destination[Bobs.PageTime.Columns.K] = source[Bobs.PageTime.Columns.K];
			destination[Bobs.PageTime.Columns.CobK] = source[Bobs.PageTime.Columns.CobK];
			destination[Bobs.PageTime.Columns.Date] = source[Bobs.PageTime.Columns.Date];
			destination[Bobs.PageTime.Columns.Impressions] = source[Bobs.PageTime.Columns.Impressions];
			destination[Bobs.PageTime.Columns.TotalTime] = source[Bobs.PageTime.Columns.TotalTime];
			destination[Bobs.PageTime.Columns.MaxTime] = source[Bobs.PageTime.Columns.MaxTime];
			destination[Bobs.PageTime.Columns.MinTime] = source[Bobs.PageTime.Columns.MinTime];
			destination[Bobs.PageTime.Columns.MaxUrl] = source[Bobs.PageTime.Columns.MaxUrl];
			destination[Bobs.PageTime.Columns.MinUrl] = source[Bobs.PageTime.Columns.MinUrl];
			destination[Bobs.PageTime.Columns.CustPage] = source[Bobs.PageTime.Columns.CustPage];
			destination[Bobs.PageTime.Columns.LogItem] = source[Bobs.PageTime.Columns.LogItem];
		}
		
		public PageTimeDataHolder(PageTime bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// The primary key
		/// </summary>
		public int K
		{
			get { return dataHolder.K; }
			set { this.dataHolder.K = value; }
		}
		/// <summary>
		/// Link to the Cob table - the page in question
		/// </summary>
		public int CobK
		{
			get { return dataHolder.CobK; }
			set { this.dataHolder.CobK = value; }
		}
		/// <summary>
		/// Date when these hits took place
		/// </summary>
		public DateTime Date
		{
			get { return dataHolder.Date; }
			set { this.dataHolder.Date = value; }
		}
		/// <summary>
		/// Total number of impressions that this page got during the day
		/// </summary>
		public int Impressions
		{
			get { return dataHolder.Impressions; }
			set { this.dataHolder.Impressions = value; }
		}
		/// <summary>
		/// Total time taken to serve this page (used to work out the average page generation time)
		/// </summary>
		public int TotalTime
		{
			get { return dataHolder.TotalTime; }
			set { this.dataHolder.TotalTime = value; }
		}
		/// <summary>
		/// The maximum time taken to generate a page during the day
		/// </summary>
		public int MaxTime
		{
			get { return dataHolder.MaxTime; }
			set { this.dataHolder.MaxTime = value; }
		}
		/// <summary>
		/// The minimum time taken to generate a page during the day
		/// </summary>
		public int MinTime
		{
			get { return dataHolder.MinTime; }
			set { this.dataHolder.MinTime = value; }
		}
		/// <summary>
		/// The full URL when the maximum time was recorded
		/// </summary>
		public string MaxUrl
		{
			get { return dataHolder.MaxUrl; }
			set { this.dataHolder.MaxUrl = value; }
		}
		/// <summary>
		/// The full URL when the minimum time was recorded
		/// </summary>
		public string MinUrl
		{
			get { return dataHolder.MinUrl; }
			set { this.dataHolder.MinUrl = value; }
		}
		/// <summary>
		/// Name of cust page
		/// </summary>
		public string CustPage
		{
			get { return dataHolder.CustPage; }
			set { this.dataHolder.CustPage = value; }
		}
		/// <summary>
		/// Log item
		/// </summary>
		public int LogItem
		{
			get { return dataHolder.LogItem; }
			set { this.dataHolder.LogItem = value; }
		}
		#endregion
		public PageTime PageTime
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new PageTime(K);
					}
					else
					{
						bob = new PageTime();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region PageTimeSet
	public partial class PageTimeSet : BobSet, IEnumerable<PageTime>
	{
		public PageTimeSet(Query query) : base(query) { }

		public PageTime this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new PageTime(this);
					((PageTime)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (PageTime)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new PageTimeTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<PageTime> ToList()
		{
			List<PageTime> list = new List<PageTime>();
			foreach (PageTime item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<PageTime> Members

		public new IEnumerator<PageTime> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region PageTimeTableDef
	public class PageTimeTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "PageTime";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "F6344C1B";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return PageTime.GetColumnName((PageTime.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.PageTime;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return true;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return PageTime.Columns.K;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			PageTime.Columns c = (PageTime.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case PageTime.Columns.K: ColumnStore[i] = new ColumnDef(c, "K", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey | SqlColumnFlag.AutoNumber, null); break;
					case PageTime.Columns.CobK: ColumnStore[i] = new ColumnDef(c, "CobK", SqlDbType.Int, 0); break;
					case PageTime.Columns.Date: ColumnStore[i] = new ColumnDef(c, "Date", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case PageTime.Columns.Impressions: ColumnStore[i] = new ColumnDef(c, "Impressions", SqlDbType.Int, 0); break;
					case PageTime.Columns.TotalTime: ColumnStore[i] = new ColumnDef(c, "TotalTime", SqlDbType.Int, 0); break;
					case PageTime.Columns.MaxTime: ColumnStore[i] = new ColumnDef(c, "MaxTime", SqlDbType.Int, 0); break;
					case PageTime.Columns.MinTime: ColumnStore[i] = new ColumnDef(c, "MinTime", SqlDbType.Int, 0); break;
					case PageTime.Columns.MaxUrl: ColumnStore[i] = new ColumnDef(c, "MaxUrl", SqlDbType.VarChar, 1000, ""); break;
					case PageTime.Columns.MinUrl: ColumnStore[i] = new ColumnDef(c, "MinUrl", SqlDbType.VarChar, 1000, ""); break;
					case PageTime.Columns.CustPage: ColumnStore[i] = new ColumnDef(c, "CustPage", SqlDbType.VarChar, ""); break;
					case PageTime.Columns.LogItem: ColumnStore[i] = new ColumnDef(c, "LogItem", SqlDbType.Int, 0); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(PageTime.Columns.K);
						InitColumn(PageTime.Columns.CobK);
						InitColumn(PageTime.Columns.Date);
						InitColumn(PageTime.Columns.Impressions);
						InitColumn(PageTime.Columns.TotalTime);
						InitColumn(PageTime.Columns.MaxTime);
						InitColumn(PageTime.Columns.MinTime);
						InitColumn(PageTime.Columns.MaxUrl);
						InitColumn(PageTime.Columns.MinUrl);
						InitColumn(PageTime.Columns.CustPage);
						InitColumn(PageTime.Columns.LogItem);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region Para
	/// <summary>
	/// Each article contains many paragraphs.
	/// </summary>
	public partial class Para : Model.Entities.Para, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// The primary key
			/// </summary>
			K = 0x00410001,
			/// <summary>
			/// Link to the article
			/// </summary>
			ArticleK = 0x00410002,
			/// <summary>
			/// What page is the paragraph on? (Starts at 1)
			/// </summary>
			Page = 0x00410003,
			/// <summary>
			/// Relative order of the paragraphs on the page 0 is at the top
			/// </summary>
			Order = 0x00410004,
			/// <summary>
			/// Paragraph type - 1=Title, 2=Paragraph, 3=Photo
			/// </summary>
			Type = 0x00410005,
			/// <summary>
			/// If the paragraph is a photo, or has a photo linked to it
			/// </summary>
			PhotoK = 0x00410006,
			/// <summary>
			/// The text of the paragraph
			/// </summary>
			Text = 0x00410007,
			/// <summary>
			/// The thread attached to this paragraph.
			/// </summary>
			ThreadK = 0x00410008,
			/// <summary>
			/// Photo align type - 1=Left, 2=Right, 3=Center
			/// </summary>
			PhotoAlign = 0x00410009,
			/// <summary>
			/// Cropped image 100*100
			/// </summary>
			Pic = 0x0041000a,
			/// <summary>
			/// PhotoType - photo type - 0=None, 1=Icon, 2=Thumb, 3=Web, 4=Custom (file referenced by Pic)
			/// </summary>
			PhotoType = 0x0041000b,
			/// <summary>
			/// Caption for the photo - 100 chars or less.
			/// </summary>
			Caption = 0x0041000c,
			/// <summary>
			/// Width of the image in pixels if PhotoType=Custom.
			/// </summary>
			PicWidth = 0x0041000d,
			/// <summary>
			/// Height of the image in pixels if PhotoType=Custom.
			/// </summary>
			PicHeight = 0x0041000e,
			/// <summary>
			/// State var used to reconstruct cropper when re-cropping
			/// </summary>
			PicState = 0x0041000f,
			/// <summary>
			/// The Photo that was used to create the Pic.
			/// </summary>
			PicPhotoK = 0x00410010,
			/// <summary>
			/// The Misc that was used to create the Pic.
			/// </summary>
			PicMiscK = 0x00410011,
		}
		#endregion
		public static string GetColumnName(Para.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case Para.Columns.K: return "K";
						case Para.Columns.ArticleK: return "ArticleK";
						case Para.Columns.Page: return "Page";
						case Para.Columns.Order: return "Order";
						case Para.Columns.Type: return "Type";
						case Para.Columns.PhotoK: return "PhotoK";
						case Para.Columns.Text: return "Text";
						case Para.Columns.ThreadK: return "ThreadK";
						case Para.Columns.PhotoAlign: return "PhotoAlign";
						case Para.Columns.Pic: return "Pic";
						case Para.Columns.PhotoType: return "PhotoType";
						case Para.Columns.Caption: return "Caption";
						case Para.Columns.PicWidth: return "PicWidth";
						case Para.Columns.PicHeight: return "PicHeight";
						case Para.Columns.PicState: return "PicState";
						case Para.Columns.PicPhotoK: return "PicPhotoK";
						case Para.Columns.PicMiscK: return "PicMiscK";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(Para.Columns columnEnum)
		{
			switch (columnEnum)
			{
																					default: return false;
			}
		}


		#region Common
 
		public Para(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);  }
		public Para()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.Para);
		}
		public Para(BobSet bs)
		{
			this.Bob = new Bob(bs.Table, bs);
		}
		public Para(int ParaK, IBob Parent, object Column)
			: this()
		{
			Bob.GetBobFromParent(ParaK, Parent.Bob, Column, TablesEnum.Para);
		}
		public Para(int ParaK)
			: this()
		{
			Bob.GetBobFromPrimaryKey(ParaK);
		}
		#endregion

	}
	#endregion
	#region ParaTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region Para
	/// <summary>
	/// Each article contains many paragraphs.
	/// </summary>
	[Serializable]
	public partial class Para 
	{
		
		#region Simple members
		/// <summary>
		/// The primary key
		/// </summary>
		public override int K
		{
			get { return (int)this[Para.Columns.K] as int? ?? 0 ; }
			set { this[Para.Columns.K] = value; }
		}
		/// <summary>
		/// Link to the article
		/// </summary>
		public override int ArticleK
		{
			get { return (int)this[Para.Columns.ArticleK]; }
			set { this[Para.Columns.ArticleK] = value; }
		}
		/// <summary>
		/// What page is the paragraph on? (Starts at 1)
		/// </summary>
		public override int Page
		{
			get { return (int)this[Para.Columns.Page]; }
			set { this[Para.Columns.Page] = value; }
		}
		/// <summary>
		/// Relative order of the paragraphs on the page 0 is at the top
		/// </summary>
		public override double Order
		{
			get { return (double)this[Para.Columns.Order]; }
			set { this[Para.Columns.Order] = value; }
		}
		/// <summary>
		/// Paragraph type - 1=Title, 2=Paragraph, 3=Photo
		/// </summary>
		public override int Type
		{
			get { return (int)this[Para.Columns.Type]; }
			set { this[Para.Columns.Type] = value; }
		}
		/// <summary>
		/// If the paragraph is a photo, or has a photo linked to it
		/// </summary>
		public override int PhotoK
		{
			get { return (int)this[Para.Columns.PhotoK]; }
			set { this[Para.Columns.PhotoK] = value; }
		}
		/// <summary>
		/// The text of the paragraph
		/// </summary>
		public override string Text
		{
			get { return (string)this[Para.Columns.Text]; }
			set { this[Para.Columns.Text] = value; }
		}
		/// <summary>
		/// The thread attached to this paragraph.
		/// </summary>
		public override int ThreadK
		{
			get { return (int)this[Para.Columns.ThreadK]; }
			set { this[Para.Columns.ThreadK] = value; }
		}
		/// <summary>
		/// Photo align type - 1=Left, 2=Right, 3=Center
		/// </summary>
		public override int PhotoAlign
		{
			get { return (int)this[Para.Columns.PhotoAlign]; }
			set { this[Para.Columns.PhotoAlign] = value; }
		}
		/// <summary>
		/// Cropped image 100*100
		/// </summary>
		public Guid	Pic
		{
			get{ return Cambro.Misc.Db.GuidConvertor(this[Para.Columns.Pic]);}		
			set{ this[Para.Columns.Pic] = new System.Data.SqlTypes.SqlGuid(value);}
		}
		/// <summary>
		/// PhotoType - photo type - 0=None, 1=Icon, 2=Thumb, 3=Web, 4=Custom (file referenced by Pic)
		/// </summary>
		public override int PhotoType
		{
			get { return (int)this[Para.Columns.PhotoType]; }
			set { this[Para.Columns.PhotoType] = value; }
		}
		/// <summary>
		/// Caption for the photo - 100 chars or less.
		/// </summary>
		public override string Caption
		{
			get { return (string)this[Para.Columns.Caption]; }
			set { this[Para.Columns.Caption] = value; }
		}
		/// <summary>
		/// Width of the image in pixels if PhotoType=Custom.
		/// </summary>
		public override int PicWidth
		{
			get { return (int)this[Para.Columns.PicWidth]; }
			set { this[Para.Columns.PicWidth] = value; }
		}
		/// <summary>
		/// Height of the image in pixels if PhotoType=Custom.
		/// </summary>
		public override int PicHeight
		{
			get { return (int)this[Para.Columns.PicHeight]; }
			set { this[Para.Columns.PicHeight] = value; }
		}
		/// <summary>
		/// State var used to reconstruct cropper when re-cropping
		/// </summary>
		public override string PicState
		{
			get { return (string)this[Para.Columns.PicState]; }
			set { this[Para.Columns.PicState] = value; }
		}
		/// <summary>
		/// The Photo that was used to create the Pic.
		/// </summary>
		public override int PicPhotoK
		{
			get { return (int)this[Para.Columns.PicPhotoK]; }
			set { this[Para.Columns.PicPhotoK] = value; }
		}
		/// <summary>
		/// The Misc that was used to create the Pic.
		/// </summary>
		public override int PicMiscK
		{
			get { return (int)this[Para.Columns.PicMiscK]; }
			set { this[Para.Columns.PicMiscK] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildParas
	{
		CachedSqlSelect<Para> ChildParas();
		CachedSqlSelect<Para> ChildParas(Q where);
		CachedSqlSelect<Para> ChildParas(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<Para> ChildParas(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class Para 
		{
		}

	#region ParaDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region ParaDataHolder
	/// <summary>
	/// Each article contains many paragraphs.DataHolder
	/// </summary>
	[Serializable]
	public partial class ParaDataHolder : DataHolder<Para>
	{
		Para dataHolder;
		[NonSerializedAttribute] Para bob;

		public ParaDataHolder()
		{
			this.dataHolder = new Para();
		}
		
		void CopyValues(Para source, Para destination)
		{
			destination[Bobs.Para.Columns.K] = source[Bobs.Para.Columns.K];
			destination[Bobs.Para.Columns.ArticleK] = source[Bobs.Para.Columns.ArticleK];
			destination[Bobs.Para.Columns.Page] = source[Bobs.Para.Columns.Page];
			destination[Bobs.Para.Columns.Order] = source[Bobs.Para.Columns.Order];
			destination[Bobs.Para.Columns.Type] = source[Bobs.Para.Columns.Type];
			destination[Bobs.Para.Columns.PhotoK] = source[Bobs.Para.Columns.PhotoK];
			destination[Bobs.Para.Columns.Text] = source[Bobs.Para.Columns.Text];
			destination[Bobs.Para.Columns.ThreadK] = source[Bobs.Para.Columns.ThreadK];
			destination[Bobs.Para.Columns.PhotoAlign] = source[Bobs.Para.Columns.PhotoAlign];
			destination[Bobs.Para.Columns.Pic] = source[Bobs.Para.Columns.Pic];
			destination[Bobs.Para.Columns.PhotoType] = source[Bobs.Para.Columns.PhotoType];
			destination[Bobs.Para.Columns.Caption] = source[Bobs.Para.Columns.Caption];
			destination[Bobs.Para.Columns.PicWidth] = source[Bobs.Para.Columns.PicWidth];
			destination[Bobs.Para.Columns.PicHeight] = source[Bobs.Para.Columns.PicHeight];
			destination[Bobs.Para.Columns.PicState] = source[Bobs.Para.Columns.PicState];
			destination[Bobs.Para.Columns.PicPhotoK] = source[Bobs.Para.Columns.PicPhotoK];
			destination[Bobs.Para.Columns.PicMiscK] = source[Bobs.Para.Columns.PicMiscK];
		}
		
		public ParaDataHolder(Para bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// The primary key
		/// </summary>
		public int K
		{
			get { return dataHolder.K; }
			set { this.dataHolder.K = value; }
		}
		/// <summary>
		/// Link to the article
		/// </summary>
		public int ArticleK
		{
			get { return dataHolder.ArticleK; }
			set { this.dataHolder.ArticleK = value; }
		}
		/// <summary>
		/// What page is the paragraph on? (Starts at 1)
		/// </summary>
		public int Page
		{
			get { return dataHolder.Page; }
			set { this.dataHolder.Page = value; }
		}
		/// <summary>
		/// Relative order of the paragraphs on the page 0 is at the top
		/// </summary>
		public double Order
		{
			get { return dataHolder.Order; }
			set { this.dataHolder.Order = value; }
		}
		/// <summary>
		/// Paragraph type - 1=Title, 2=Paragraph, 3=Photo
		/// </summary>
		public int Type
		{
			get { return dataHolder.Type; }
			set { this.dataHolder.Type = value; }
		}
		/// <summary>
		/// If the paragraph is a photo, or has a photo linked to it
		/// </summary>
		public int PhotoK
		{
			get { return dataHolder.PhotoK; }
			set { this.dataHolder.PhotoK = value; }
		}
		/// <summary>
		/// The text of the paragraph
		/// </summary>
		public string Text
		{
			get { return dataHolder.Text; }
			set { this.dataHolder.Text = value; }
		}
		/// <summary>
		/// The thread attached to this paragraph.
		/// </summary>
		public int ThreadK
		{
			get { return dataHolder.ThreadK; }
			set { this.dataHolder.ThreadK = value; }
		}
		/// <summary>
		/// Photo align type - 1=Left, 2=Right, 3=Center
		/// </summary>
		public int PhotoAlign
		{
			get { return dataHolder.PhotoAlign; }
			set { this.dataHolder.PhotoAlign = value; }
		}
		/// <summary>
		/// Cropped image 100*100
		/// </summary>
		public Guid Pic
		{
			get { return dataHolder.Pic; }
			set { this.dataHolder.Pic = value; }
		}
		/// <summary>
		/// PhotoType - photo type - 0=None, 1=Icon, 2=Thumb, 3=Web, 4=Custom (file referenced by Pic)
		/// </summary>
		public int PhotoType
		{
			get { return dataHolder.PhotoType; }
			set { this.dataHolder.PhotoType = value; }
		}
		/// <summary>
		/// Caption for the photo - 100 chars or less.
		/// </summary>
		public string Caption
		{
			get { return dataHolder.Caption; }
			set { this.dataHolder.Caption = value; }
		}
		/// <summary>
		/// Width of the image in pixels if PhotoType=Custom.
		/// </summary>
		public int PicWidth
		{
			get { return dataHolder.PicWidth; }
			set { this.dataHolder.PicWidth = value; }
		}
		/// <summary>
		/// Height of the image in pixels if PhotoType=Custom.
		/// </summary>
		public int PicHeight
		{
			get { return dataHolder.PicHeight; }
			set { this.dataHolder.PicHeight = value; }
		}
		/// <summary>
		/// State var used to reconstruct cropper when re-cropping
		/// </summary>
		public string PicState
		{
			get { return dataHolder.PicState; }
			set { this.dataHolder.PicState = value; }
		}
		/// <summary>
		/// The Photo that was used to create the Pic.
		/// </summary>
		public int PicPhotoK
		{
			get { return dataHolder.PicPhotoK; }
			set { this.dataHolder.PicPhotoK = value; }
		}
		/// <summary>
		/// The Misc that was used to create the Pic.
		/// </summary>
		public int PicMiscK
		{
			get { return dataHolder.PicMiscK; }
			set { this.dataHolder.PicMiscK = value; }
		}
		#endregion
		public Para Para
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new Para(K);
					}
					else
					{
						bob = new Para();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region ParaSet
	public partial class ParaSet : BobSet, IEnumerable<Para>
	{
		public ParaSet(Query query) : base(query) { }

		public Para this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new Para(this);
					((Para)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (Para)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new ParaTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<Para> ToList()
		{
			List<Para> list = new List<Para>();
			foreach (Para item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<Para> Members

		public new IEnumerator<Para> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region ParaTableDef
	public class ParaTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "Para";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "325990B0";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return Para.GetColumnName((Para.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.Para;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return true;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return Para.Columns.K;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			Para.Columns c = (Para.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case Para.Columns.K: ColumnStore[i] = new ColumnDef(c, "K", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey | SqlColumnFlag.AutoNumber, null); break;
					case Para.Columns.ArticleK: ColumnStore[i] = new ColumnDef(c, "ArticleK", SqlDbType.Int, 0); break;
					case Para.Columns.Page: ColumnStore[i] = new ColumnDef(c, "Page", SqlDbType.Int, 0); break;
					case Para.Columns.Order: ColumnStore[i] = new ColumnDef(c, "Order", SqlDbType.Float, 0.0); break;
					case Para.Columns.Type: ColumnStore[i] = new ColumnDef(c, "Type", SqlDbType.Int, 0); break;
					case Para.Columns.PhotoK: ColumnStore[i] = new ColumnDef(c, "PhotoK", SqlDbType.Int, 0); break;
					case Para.Columns.Text: ColumnStore[i] = new ColumnDef(c, "Text", SqlDbType.Text, ""); break;
					case Para.Columns.ThreadK: ColumnStore[i] = new ColumnDef(c, "ThreadK", SqlDbType.Int, 0); break;
					case Para.Columns.PhotoAlign: ColumnStore[i] = new ColumnDef(c, "PhotoAlign", SqlDbType.Int, 0); break;
					case Para.Columns.Pic: ColumnStore[i] = new ColumnDef(c, "Pic", SqlDbType.UniqueIdentifier, Guid.Empty); break;
					case Para.Columns.PhotoType: ColumnStore[i] = new ColumnDef(c, "PhotoType", SqlDbType.Int, 0); break;
					case Para.Columns.Caption: ColumnStore[i] = new ColumnDef(c, "Caption", SqlDbType.VarChar, 200, ""); break;
					case Para.Columns.PicWidth: ColumnStore[i] = new ColumnDef(c, "PicWidth", SqlDbType.Int, 0); break;
					case Para.Columns.PicHeight: ColumnStore[i] = new ColumnDef(c, "PicHeight", SqlDbType.Int, 0); break;
					case Para.Columns.PicState: ColumnStore[i] = new ColumnDef(c, "PicState", SqlDbType.VarChar, 100, ""); break;
					case Para.Columns.PicPhotoK: ColumnStore[i] = new ColumnDef(c, "PicPhotoK", SqlDbType.Int, 0); break;
					case Para.Columns.PicMiscK: ColumnStore[i] = new ColumnDef(c, "PicMiscK", SqlDbType.Int, 0); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(Para.Columns.K);
						InitColumn(Para.Columns.ArticleK);
						InitColumn(Para.Columns.Page);
						InitColumn(Para.Columns.Order);
						InitColumn(Para.Columns.Type);
						InitColumn(Para.Columns.PhotoK);
						InitColumn(Para.Columns.Text);
						InitColumn(Para.Columns.ThreadK);
						InitColumn(Para.Columns.PhotoAlign);
						InitColumn(Para.Columns.Pic);
						InitColumn(Para.Columns.PhotoType);
						InitColumn(Para.Columns.Caption);
						InitColumn(Para.Columns.PicWidth);
						InitColumn(Para.Columns.PicHeight);
						InitColumn(Para.Columns.PicState);
						InitColumn(Para.Columns.PicPhotoK);
						InitColumn(Para.Columns.PicMiscK);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region Phone
	/// <summary>
	/// Phone handset settings helper
	/// </summary>
	public partial class Phone : Model.Entities.Phone, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// Key
			/// </summary>
			K = 0x00420001,
			/// <summary>
			/// Link to usr
			/// </summary>
			UsrK = 0x00420002,
			/// <summary>
			/// Phone extention - e.g. 200 or 201 etc.
			/// </summary>
			Extention = 0x00420003,
			/// <summary>
			/// Mac address of the phone handset
			/// </summary>
			Mac = 0x00420004,
			/// <summary>
			/// The external internet IP of the phone
			/// </summary>
			IpAddress = 0x00420005,
			/// <summary>
			/// The IP of the phone on the local network
			/// </summary>
			LocalIpAddress = 0x00420006,
			/// <summary>
			/// The default gateway on the local network
			/// </summary>
			LocalGateway = 0x00420007,
			/// <summary>
			/// The dns server on the local network
			/// </summary>
			LocalDns = 0x00420008,
			/// <summary>
			/// The nat redirect port
			/// </summary>
			NatPort = 0x00420009,
			/// <summary>
			/// Test column - not used
			/// </summary>
			TestColumn = 0x0042000a,
			/// <summary>
			/// Test column 1 - not used
			/// </summary>
			TestColumn1 = 0x0042000b,
			/// <summary>
			/// Test column 2 - not used
			/// </summary>
			TestColumn2 = 0x0042000c,
		}
		#endregion
		public static string GetColumnName(Phone.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case Phone.Columns.K: return "K";
						case Phone.Columns.UsrK: return "UsrK";
						case Phone.Columns.Extention: return "Extention";
						case Phone.Columns.Mac: return "Mac";
						case Phone.Columns.IpAddress: return "IpAddress";
						case Phone.Columns.LocalIpAddress: return "LocalIpAddress";
						case Phone.Columns.LocalGateway: return "LocalGateway";
						case Phone.Columns.LocalDns: return "LocalDns";
						case Phone.Columns.NatPort: return "NatPort";
						case Phone.Columns.TestColumn: return "TestColumn";
						case Phone.Columns.TestColumn1: return "TestColumn1";
						case Phone.Columns.TestColumn2: return "TestColumn2";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(Phone.Columns columnEnum)
		{
			switch (columnEnum)
			{
																default: return false;
			}
		}


		#region Common
 
		public Phone(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);  }
		public Phone()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.Phone);
		}
		public Phone(BobSet bs)
		{
			this.Bob = new Bob(bs.Table, bs);
		}
		public Phone(int PhoneK, IBob Parent, object Column)
			: this()
		{
			Bob.GetBobFromParent(PhoneK, Parent.Bob, Column, TablesEnum.Phone);
		}
		public Phone(int PhoneK)
			: this()
		{
			Bob.GetBobFromPrimaryKey(PhoneK);
		}
		#endregion

	}
	#endregion
	#region PhoneTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region Phone
	/// <summary>
	/// Phone handset settings helper
	/// </summary>
	[Serializable]
	public partial class Phone 
	{
		
		#region Simple members
		/// <summary>
		/// Key
		/// </summary>
		public override int K
		{
			get { return (int)this[Phone.Columns.K] as int? ?? 0 ; }
			set { this[Phone.Columns.K] = value; }
		}
		/// <summary>
		/// Link to usr
		/// </summary>
		public override int UsrK
		{
			get { return (int)this[Phone.Columns.UsrK]; }
			set { this[Phone.Columns.UsrK] = value; }
		}
		/// <summary>
		/// Phone extention - e.g. 200 or 201 etc.
		/// </summary>
		public override int Extention
		{
			get { return (int)this[Phone.Columns.Extention]; }
			set { this[Phone.Columns.Extention] = value; }
		}
		/// <summary>
		/// Mac address of the phone handset
		/// </summary>
		public override string Mac
		{
			get { return (string)this[Phone.Columns.Mac]; }
			set { this[Phone.Columns.Mac] = value; }
		}
		/// <summary>
		/// The external internet IP of the phone
		/// </summary>
		public override string IpAddress
		{
			get { return (string)this[Phone.Columns.IpAddress]; }
			set { this[Phone.Columns.IpAddress] = value; }
		}
		/// <summary>
		/// The IP of the phone on the local network
		/// </summary>
		public override string LocalIpAddress
		{
			get { return (string)this[Phone.Columns.LocalIpAddress]; }
			set { this[Phone.Columns.LocalIpAddress] = value; }
		}
		/// <summary>
		/// The default gateway on the local network
		/// </summary>
		public override string LocalGateway
		{
			get { return (string)this[Phone.Columns.LocalGateway]; }
			set { this[Phone.Columns.LocalGateway] = value; }
		}
		/// <summary>
		/// The dns server on the local network
		/// </summary>
		public override string LocalDns
		{
			get { return (string)this[Phone.Columns.LocalDns]; }
			set { this[Phone.Columns.LocalDns] = value; }
		}
		/// <summary>
		/// The nat redirect port
		/// </summary>
		public override string NatPort
		{
			get { return (string)this[Phone.Columns.NatPort]; }
			set { this[Phone.Columns.NatPort] = value; }
		}
		/// <summary>
		/// Test column - not used
		/// </summary>
		public override string TestColumn
		{
			get { return (string)this[Phone.Columns.TestColumn]; }
			set { this[Phone.Columns.TestColumn] = value; }
		}
		/// <summary>
		/// Test column 1 - not used
		/// </summary>
		public override string TestColumn1
		{
			get { return (string)this[Phone.Columns.TestColumn1]; }
			set { this[Phone.Columns.TestColumn1] = value; }
		}
		/// <summary>
		/// Test column 2 - not used
		/// </summary>
		public override string TestColumn2
		{
			get { return (string)this[Phone.Columns.TestColumn2]; }
			set { this[Phone.Columns.TestColumn2] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildPhones
	{
		CachedSqlSelect<Phone> ChildPhones();
		CachedSqlSelect<Phone> ChildPhones(Q where);
		CachedSqlSelect<Phone> ChildPhones(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<Phone> ChildPhones(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class Phone 
		{
		}

	#region PhoneDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region PhoneDataHolder
	/// <summary>
	/// Phone handset settings helperDataHolder
	/// </summary>
	[Serializable]
	public partial class PhoneDataHolder : DataHolder<Phone>
	{
		Phone dataHolder;
		[NonSerializedAttribute] Phone bob;

		public PhoneDataHolder()
		{
			this.dataHolder = new Phone();
		}
		
		void CopyValues(Phone source, Phone destination)
		{
			destination[Bobs.Phone.Columns.K] = source[Bobs.Phone.Columns.K];
			destination[Bobs.Phone.Columns.UsrK] = source[Bobs.Phone.Columns.UsrK];
			destination[Bobs.Phone.Columns.Extention] = source[Bobs.Phone.Columns.Extention];
			destination[Bobs.Phone.Columns.Mac] = source[Bobs.Phone.Columns.Mac];
			destination[Bobs.Phone.Columns.IpAddress] = source[Bobs.Phone.Columns.IpAddress];
			destination[Bobs.Phone.Columns.LocalIpAddress] = source[Bobs.Phone.Columns.LocalIpAddress];
			destination[Bobs.Phone.Columns.LocalGateway] = source[Bobs.Phone.Columns.LocalGateway];
			destination[Bobs.Phone.Columns.LocalDns] = source[Bobs.Phone.Columns.LocalDns];
			destination[Bobs.Phone.Columns.NatPort] = source[Bobs.Phone.Columns.NatPort];
			destination[Bobs.Phone.Columns.TestColumn] = source[Bobs.Phone.Columns.TestColumn];
			destination[Bobs.Phone.Columns.TestColumn1] = source[Bobs.Phone.Columns.TestColumn1];
			destination[Bobs.Phone.Columns.TestColumn2] = source[Bobs.Phone.Columns.TestColumn2];
		}
		
		public PhoneDataHolder(Phone bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// Key
		/// </summary>
		public int K
		{
			get { return dataHolder.K; }
			set { this.dataHolder.K = value; }
		}
		/// <summary>
		/// Link to usr
		/// </summary>
		public int UsrK
		{
			get { return dataHolder.UsrK; }
			set { this.dataHolder.UsrK = value; }
		}
		/// <summary>
		/// Phone extention - e.g. 200 or 201 etc.
		/// </summary>
		public int Extention
		{
			get { return dataHolder.Extention; }
			set { this.dataHolder.Extention = value; }
		}
		/// <summary>
		/// Mac address of the phone handset
		/// </summary>
		public string Mac
		{
			get { return dataHolder.Mac; }
			set { this.dataHolder.Mac = value; }
		}
		/// <summary>
		/// The external internet IP of the phone
		/// </summary>
		public string IpAddress
		{
			get { return dataHolder.IpAddress; }
			set { this.dataHolder.IpAddress = value; }
		}
		/// <summary>
		/// The IP of the phone on the local network
		/// </summary>
		public string LocalIpAddress
		{
			get { return dataHolder.LocalIpAddress; }
			set { this.dataHolder.LocalIpAddress = value; }
		}
		/// <summary>
		/// The default gateway on the local network
		/// </summary>
		public string LocalGateway
		{
			get { return dataHolder.LocalGateway; }
			set { this.dataHolder.LocalGateway = value; }
		}
		/// <summary>
		/// The dns server on the local network
		/// </summary>
		public string LocalDns
		{
			get { return dataHolder.LocalDns; }
			set { this.dataHolder.LocalDns = value; }
		}
		/// <summary>
		/// The nat redirect port
		/// </summary>
		public string NatPort
		{
			get { return dataHolder.NatPort; }
			set { this.dataHolder.NatPort = value; }
		}
		/// <summary>
		/// Test column - not used
		/// </summary>
		public string TestColumn
		{
			get { return dataHolder.TestColumn; }
			set { this.dataHolder.TestColumn = value; }
		}
		/// <summary>
		/// Test column 1 - not used
		/// </summary>
		public string TestColumn1
		{
			get { return dataHolder.TestColumn1; }
			set { this.dataHolder.TestColumn1 = value; }
		}
		/// <summary>
		/// Test column 2 - not used
		/// </summary>
		public string TestColumn2
		{
			get { return dataHolder.TestColumn2; }
			set { this.dataHolder.TestColumn2 = value; }
		}
		#endregion
		public Phone Phone
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new Phone(K);
					}
					else
					{
						bob = new Phone();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region PhoneSet
	public partial class PhoneSet : BobSet, IEnumerable<Phone>
	{
		public PhoneSet(Query query) : base(query) { }

		public Phone this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new Phone(this);
					((Phone)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (Phone)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new PhoneTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<Phone> ToList()
		{
			List<Phone> list = new List<Phone>();
			foreach (Phone item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<Phone> Members

		public new IEnumerator<Phone> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region PhoneTableDef
	public class PhoneTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "Phone";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "A40108A6";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return Phone.GetColumnName((Phone.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.Phone;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return true;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return Phone.Columns.K;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			Phone.Columns c = (Phone.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case Phone.Columns.K: ColumnStore[i] = new ColumnDef(c, "K", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey | SqlColumnFlag.AutoNumber, null); break;
					case Phone.Columns.UsrK: ColumnStore[i] = new ColumnDef(c, "UsrK", SqlDbType.Int, 0); break;
					case Phone.Columns.Extention: ColumnStore[i] = new ColumnDef(c, "Extention", SqlDbType.Int, 0); break;
					case Phone.Columns.Mac: ColumnStore[i] = new ColumnDef(c, "Mac", SqlDbType.VarChar, ""); break;
					case Phone.Columns.IpAddress: ColumnStore[i] = new ColumnDef(c, "IpAddress", SqlDbType.VarChar, 100, null); break;
					case Phone.Columns.LocalIpAddress: ColumnStore[i] = new ColumnDef(c, "LocalIpAddress", SqlDbType.VarChar, 100, null); break;
					case Phone.Columns.LocalGateway: ColumnStore[i] = new ColumnDef(c, "LocalGateway", SqlDbType.VarChar, 100, null); break;
					case Phone.Columns.LocalDns: ColumnStore[i] = new ColumnDef(c, "LocalDns", SqlDbType.VarChar, 100, null); break;
					case Phone.Columns.NatPort: ColumnStore[i] = new ColumnDef(c, "NatPort", SqlDbType.VarChar, 100, null); break;
					case Phone.Columns.TestColumn: ColumnStore[i] = new ColumnDef(c, "TestColumn", SqlDbType.VarChar, 100, null); break;
					case Phone.Columns.TestColumn1: ColumnStore[i] = new ColumnDef(c, "TestColumn1", SqlDbType.VarChar, 100, null); break;
					case Phone.Columns.TestColumn2: ColumnStore[i] = new ColumnDef(c, "TestColumn2", SqlDbType.VarChar, 100, null); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(Phone.Columns.K);
						InitColumn(Phone.Columns.UsrK);
						InitColumn(Phone.Columns.Extention);
						InitColumn(Phone.Columns.Mac);
						InitColumn(Phone.Columns.IpAddress);
						InitColumn(Phone.Columns.LocalIpAddress);
						InitColumn(Phone.Columns.LocalGateway);
						InitColumn(Phone.Columns.LocalDns);
						InitColumn(Phone.Columns.NatPort);
						InitColumn(Phone.Columns.TestColumn);
						InitColumn(Phone.Columns.TestColumn1);
						InitColumn(Phone.Columns.TestColumn2);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region Photo
	/// <summary>
	/// Photo taken at an event
	/// </summary>
	public partial class Photo : Model.Entities.Photo, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// The primary key
			/// </summary>
			K = 0x00430001,
			/// <summary>
			/// Link to the gallery table - the gallery that this photo is in.
			/// </summary>
			GalleryK = 0x00430002,
			/// <summary>
			/// Links to one Event
			/// </summary>
			EventK = 0x00430003,
			/// <summary>
			/// Link to the article if this photo is in a gallery that is in an event
			/// </summary>
			ArticleK = 0x00430004,
			/// <summary>
			/// The usr that uploaded the photo
			/// </summary>
			UsrK = 0x00430005,
			/// <summary>
			/// The mobile that sent the photo
			/// </summary>
			MobileK = 0x00430006,
			/// <summary>
			/// Order
			/// </summary>
			Order = 0x00430007,
			/// <summary>
			/// Discussion thread about this photo - only created when first message is posted?
			/// </summary>
			ThreadK = 0x00430008,
			/// <summary>
			/// Date / time the photo was taken (from exif data)
			/// </summary>
			DateTime = 0x00430009,
			/// <summary>
			/// Number of views
			/// </summary>
			Views = 0x0043000a,
			/// <summary>
			/// Average cool rating
			/// </summary>
			AverageCoolRating = 0x0043000b,
			/// <summary>
			/// Average sexy rating
			/// </summary>
			AverageSexyRating = 0x0043000c,
			/// <summary>
			/// Total number of cool ratings
			/// </summary>
			TotalCoolRatings = 0x0043000d,
			/// <summary>
			/// Total number of sexy ratings
			/// </summary>
			TotalSexyRatings = 0x0043000e,
			/// <summary>
			/// Weighted cool rating = ( sum(Ratings) + 50 ) / ( count(Ratings) + 10 )
			/// </summary>
			WeightedCoolRating = 0x0043000f,
			/// <summary>
			/// Weighted sexy rating = ( sum(Ratings) + 50 ) / ( count(Ratings) + 10 )
			/// </summary>
			WeightedSexyRating = 0x00430010,
			/// <summary>
			/// Filename of master original image (without logo)
			/// </summary>
			Master = 0x00430011,
			/// <summary>
			/// Filename of original image
			/// </summary>
			Original = 0x00430012,
			/// <summary>
			/// Filename of icon (35*26)
			/// </summary>
			Icon = 0x00430013,
			/// <summary>
			/// Filename of thumbnail (106*80)
			/// </summary>
			Thumb = 0x00430014,
			/// <summary>
			/// Filename of web-res (640*480)
			/// </summary>
			Web = 0x00430015,
			/// <summary>
			/// Width of the original image
			/// </summary>
			OriginalWidth = 0x00430016,
			/// <summary>
			/// Height of the original image
			/// </summary>
			OriginalHeight = 0x00430017,
			/// <summary>
			/// Width of the web image
			/// </summary>
			WebWidth = 0x00430018,
			/// <summary>
			/// Height of the web image
			/// </summary>
			WebHeight = 0x00430019,
			/// <summary>
			/// Width of the thumbnail image
			/// </summary>
			ThumbWidth = 0x0043001a,
			/// <summary>
			/// Height of the thumbnail image
			/// </summary>
			ThumbHeight = 0x0043001b,
			/// <summary>
			/// Is the image in landscae orientation? (If the image is square, this is true)
			/// </summary>
			IsLandscape = 0x0043001c,
			/// <summary>
			/// Note for admin
			/// </summary>
			AdminNote = 0x0043001d,
			/// <summary>
			/// EquipmentMake from exif data
			/// </summary>
			EquipmentMake = 0x0043001e,
			/// <summary>
			/// CameraModel from exif data
			/// </summary>
			CameraModel = 0x0043001f,
			/// <summary>
			/// Size of original file in bytes
			/// </summary>
			OriginalFileSize = 0x00430020,
			/// <summary>
			/// Size of master original file in bytes
			/// </summary>
			MasterFileSize = 0x00430021,
			/// <summary>
			/// Total number of comments
			/// </summary>
			TotalComments = 0x00430022,
			/// <summary>
			/// The date/time of the last post that was posted in this board (including child objects)
			/// </summary>
			LastPost = 0x00430023,
			/// <summary>
			/// The average date.time of all comments posted in this board (including child objects)
			/// </summary>
			AverageCommentDateTime = 0x00430024,
			/// <summary>
			/// Filename of cropping image (max side=1000, no logo)
			/// </summary>
			Crop = 0x00430025,
			/// <summary>
			/// Has the photo been converted to dsi logos?
			/// </summary>
			DsiConverted = 0x00430026,
			/// <summary>
			/// Should this photo go on the Photo of the Week section?
			/// </summary>
			PhotoOfWeek = 0x00430027,
			/// <summary>
			/// The latest 3 photos of the week are displayed... This is the datetime
			/// </summary>
			PhotoOfWeekDateTime = 0x00430028,
			/// <summary>
			/// This is the caption for the photo of the week section
			/// </summary>
			PhotoOfWeekCaption = 0x00430029,
			/// <summary>
			/// Random float less than 1 used for fast pseudo-random ordering
			/// </summary>
			RandomNumber = 0x0043002a,
			/// <summary>
			/// True if the content has been disabled because of a complaint
			/// </summary>
			ContentDisabled = 0x0043002b,
			/// <summary>
			/// 1=New, 2=Enabled, 3=Disabled
			/// </summary>
			Status = 0x0043002c,
			/// <summary>
			/// Order in the gallery when ordered by datetime
			/// </summary>
			GalleryTimeOrder = 0x0043002d,
			/// <summary>
			/// Order in the gallery when ordered by rating
			/// </summary>
			GalleryRatingOrder = 0x0043002e,
			/// <summary>
			/// Which admin user enabled this photo?
			/// </summary>
			EnabledByUsrK = 0x0043002f,
			/// <summary>
			/// When was this photo enabled?
			/// </summary>
			EnabledDateTime = 0x00430030,
			/// <summary>
			/// The DateTime of the parent object - e.g. datetime of event, or createdate of the article
			/// </summary>
			ParentDateTime = 0x00430031,
			/// <summary>
			/// The next photo in the gallery (1)
			/// </summary>
			NextPhoto1K = 0x00430032,
			/// <summary>
			/// The next photo in the gallery (2)
			/// </summary>
			NextPhoto2K = 0x00430033,
			/// <summary>
			/// The next photo in the gallery (3)
			/// </summary>
			NextPhoto3K = 0x00430034,
			/// <summary>
			/// The Previous photo in the gallery (1)
			/// </summary>
			PreviousPhoto1K = 0x00430035,
			/// <summary>
			/// The Previous photo in the gallery (2)
			/// </summary>
			PreviousPhoto2K = 0x00430036,
			/// <summary>
			/// The Previous photo in the gallery (3)
			/// </summary>
			PreviousPhoto3K = 0x00430037,
			/// <summary>
			/// The url fragment - so that the url can be generated without accessing parent database records
			/// </summary>
			UrlFragment = 0x00430038,
			/// <summary>
			/// Number of users in this photo - read this before accessing UsrsInThisPhoto UsrSet!
			/// </summary>
			UsrCount = 0x00430039,
			/// <summary>
			/// The first usr that's in this photo
			/// </summary>
			FirstUsrK = 0x0043003a,
			/// <summary>
			/// Has the master Jpg been compressed?
			/// </summary>
			IsMasterCompressed = 0x0043003b,
			/// <summary>
			/// Has the processing started?
			/// </summary>
			IsProcessing = 0x0043003c,
			/// <summary>
			/// Media type - Image, Video or Audio
			/// </summary>
			MediaType = 0x0043003d,
			/// <summary>
			/// Estimated percentage complete
			/// </summary>
			ProcessingProgress = 0x0043003e,
			/// <summary>
			/// When the processing started
			/// </summary>
			ProcessingStartDateTime = 0x0043003f,
			/// <summary>
			/// Guid filename of the 256Kb/sec video FLV
			/// </summary>
			VideoLo = 0x00430040,
			/// <summary>
			/// Guid filename of the 512Kb/sec video FLV
			/// </summary>
			VideoMed = 0x00430041,
			/// <summary>
			/// Guid filename of the 1024Kb/sec video FLV
			/// </summary>
			VideoHi = 0x00430042,
			/// <summary>
			/// Guid filename of the 64Kb/sec audio FLV
			/// </summary>
			AudioLo = 0x00430043,
			/// <summary>
			/// Guid filename of the 128Kb/sec audio FLV
			/// </summary>
			AudioMed = 0x00430044,
			/// <summary>
			/// Guid filename of the 192Kb/sec audio FLV
			/// </summary>
			AudioHi = 0x00430045,
			/// <summary>
			/// Guid filename of the audio master file
			/// </summary>
			AudioMaster = 0x00430046,
			/// <summary>
			/// Guid filename of the video master file
			/// </summary>
			VideoMaster = 0x00430047,
			/// <summary>
			/// File extention of the audio master file
			/// </summary>
			AudioFileExtention = 0x00430048,
			/// <summary>
			/// File extention of the video master file
			/// </summary>
			VideoFileExtention = 0x00430049,
			/// <summary>
			/// Video master file size in bytes
			/// </summary>
			VideoMasterFileSize = 0x0043004a,
			/// <summary>
			/// Audio master file size in bytes
			/// </summary>
			AudioMasterFileSize = 0x0043004b,
			/// <summary>
			/// Video frames per second
			/// </summary>
			VideoMasterFramerate = 0x0043004c,
			/// <summary>
			/// Video height in pixels
			/// </summary>
			VideoMasterHeight = 0x0043004d,
			/// <summary>
			/// Video width in pixels
			/// </summary>
			VideoMasterWidth = 0x0043004e,
			/// <summary>
			/// Duration of the video in miliseconds
			/// </summary>
			VideoDuration = 0x0043004f,
			/// <summary>
			/// Duration of the audio in miliseconds
			/// </summary>
			AudioDuration = 0x00430050,
			/// <summary>
			/// DateTime that the media processing progress last changed (for abort timeout)
			/// </summary>
			ProcessingLastChange = 0x00430051,
			/// <summary>
			/// Framerate of the 256Kb/sec video FLV
			/// </summary>
			VideoLoFramerate = 0x00430052,
			/// <summary>
			/// Framerate of the 512Kb/sec video FLV
			/// </summary>
			VideoMedFramerate = 0x00430053,
			/// <summary>
			/// Framerate of the 1024Kb/sec video FLV
			/// </summary>
			VideoHiFramerate = 0x00430054,
			/// <summary>
			/// Height of the 256Kb/sec video FLV
			/// </summary>
			VideoLoHeight = 0x00430055,
			/// <summary>
			/// Height of the 512Kb/sec video FLV
			/// </summary>
			VideoMedHeight = 0x00430056,
			/// <summary>
			/// Height of the 1024Kb/sec video FLV
			/// </summary>
			VideoHiHeight = 0x00430057,
			/// <summary>
			/// Width of the 256Kb/sec video FLV
			/// </summary>
			VideoLoWidth = 0x00430058,
			/// <summary>
			/// Width of the 512Kb/sec video FLV
			/// </summary>
			VideoMedWidth = 0x00430059,
			/// <summary>
			/// Width of the 1024Kb/sec video FLV
			/// </summary>
			VideoHiWidth = 0x0043005a,
			/// <summary>
			/// How many times has the encoder tried to encode this file?
			/// </summary>
			ProcessingAttempts = 0x0043005b,
			/// <summary>
			/// How many times has the original image been generated today?
			/// </summary>
			OriginalHitsToday = 0x0043005c,
			/// <summary>
			/// Original image generator hit counter date
			/// </summary>
			OriginalHitsDate = 0x0043005d,
			/// <summary>
			/// Which server is processing the video?
			/// </summary>
			ProcessingServerName = 0x0043005e,
			/// <summary>
			/// Was this photo taken with a Sony K800i?
			/// </summary>
			IsSonyK800i = 0x0043005f,
			/// <summary>
			/// Is this thread in a caption competition?
			/// </summary>
			IsInCaptionCompetition = 0x00430060,
			/// <summary>
			/// Rotation transformation when the photo was uploaded
			/// </summary>
			Rotate = 0x00430061,
			/// <summary>
			/// Location of the temporary uploaded file (in PixMaster)
			/// </summary>
			UploadTemporary = 0x00430062,
			/// <summary>
			/// Extention of the temporary uploaded file
			/// </summary>
			UploadTemporaryExtention = 0x00430063,
			/// <summary>
			/// Enum for photo overlays
			/// </summary>
			Overlay = 0x00430064,
			/// <summary>
			/// Tags from the uploader control - prior to processing
			/// </summary>
			UploadTemporaryTags = 0x00430065,
			/// <summary>
			/// Have the PixMaster files been uploaded to Amazon?
			/// </summary>
			DoneAmazonPixMaster = 0x00430066,
			/// <summary>
			/// Was this photo taken with the C902?
			/// </summary>
			IsSonyC902 = 0x00430067,
			/// <summary>
			/// Photo of week selected by users
			/// </summary>
			PhotoOfWeekUser = 0x00430068,
			/// <summary>
			/// Photo of week selected by users caption
			/// </summary>
			PhotoOfWeekUserCaption = 0x00430069,
			/// <summary>
			/// Photo of week selected by users date time
			/// </summary>
			PhotoOfWeekUserDateTime = 0x0043006a,
			/// <summary>
			/// Has this photo been blocked from being User Photo of the week?
			/// </summary>
			BlockedFromPhotoOfWeekUser = 0x0043006b,
			/// <summary>
			/// Pic for the front page (600 x 250) image.
			/// </summary>
			FrontPagePic = 0x0043006c,
			/// <summary>
			/// Cropper state for the front page pic.
			/// </summary>
			FrontPagePicState = 0x0043006d,
			/// <summary>
			/// CSS class for the front page caption - for colour, alignment etc.
			/// </summary>
			FrontPageCaptionClass = 0x0043006e,
		}
		#endregion
		public static string GetColumnName(Photo.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case Photo.Columns.K: return "K";
						case Photo.Columns.GalleryK: return "GalleryK";
						case Photo.Columns.EventK: return "EventK";
						case Photo.Columns.ArticleK: return "ArticleK";
						case Photo.Columns.UsrK: return "UsrK";
						case Photo.Columns.MobileK: return "MobileK";
						case Photo.Columns.Order: return "Order";
						case Photo.Columns.ThreadK: return "ThreadK";
						case Photo.Columns.DateTime: return "DateTime";
						case Photo.Columns.Views: return "Views";
						case Photo.Columns.AverageCoolRating: return "AverageCoolRating";
						case Photo.Columns.AverageSexyRating: return "AverageSexyRating";
						case Photo.Columns.TotalCoolRatings: return "TotalCoolRatings";
						case Photo.Columns.TotalSexyRatings: return "TotalSexyRatings";
						case Photo.Columns.WeightedCoolRating: return "WeightedCoolRating";
						case Photo.Columns.WeightedSexyRating: return "WeightedSexyRating";
						case Photo.Columns.Master: return "Master";
						case Photo.Columns.Original: return "Original";
						case Photo.Columns.Icon: return "Icon";
						case Photo.Columns.Thumb: return "Thumb";
						case Photo.Columns.Web: return "Web";
						case Photo.Columns.OriginalWidth: return "OriginalWidth";
						case Photo.Columns.OriginalHeight: return "OriginalHeight";
						case Photo.Columns.WebWidth: return "WebWidth";
						case Photo.Columns.WebHeight: return "WebHeight";
						case Photo.Columns.ThumbWidth: return "ThumbWidth";
						case Photo.Columns.ThumbHeight: return "ThumbHeight";
						case Photo.Columns.IsLandscape: return "IsLandscape";
						case Photo.Columns.AdminNote: return "AdminNote";
						case Photo.Columns.EquipmentMake: return "EquipmentMake";
						case Photo.Columns.CameraModel: return "CameraModel";
						case Photo.Columns.OriginalFileSize: return "OriginalFileSize";
						case Photo.Columns.MasterFileSize: return "MasterFileSize";
						case Photo.Columns.TotalComments: return "TotalComments";
						case Photo.Columns.LastPost: return "LastPost";
						case Photo.Columns.AverageCommentDateTime: return "AverageCommentDateTime";
						case Photo.Columns.Crop: return "Crop";
						case Photo.Columns.DsiConverted: return "DsiConverted";
						case Photo.Columns.PhotoOfWeek: return "PhotoOfWeek";
						case Photo.Columns.PhotoOfWeekDateTime: return "PhotoOfWeekDateTime";
						case Photo.Columns.PhotoOfWeekCaption: return "PhotoOfWeekCaption";
						case Photo.Columns.RandomNumber: return "RandomNumber";
						case Photo.Columns.ContentDisabled: return "ContentDisabled";
						case Photo.Columns.Status: return "Status";
						case Photo.Columns.GalleryTimeOrder: return "GalleryTimeOrder";
						case Photo.Columns.GalleryRatingOrder: return "GalleryRatingOrder";
						case Photo.Columns.EnabledByUsrK: return "EnabledByUsrK";
						case Photo.Columns.EnabledDateTime: return "EnabledDateTime";
						case Photo.Columns.ParentDateTime: return "ParentDateTime";
						case Photo.Columns.NextPhoto1K: return "NextPhoto1K";
						case Photo.Columns.NextPhoto2K: return "NextPhoto2K";
						case Photo.Columns.NextPhoto3K: return "NextPhoto3K";
						case Photo.Columns.PreviousPhoto1K: return "PreviousPhoto1K";
						case Photo.Columns.PreviousPhoto2K: return "PreviousPhoto2K";
						case Photo.Columns.PreviousPhoto3K: return "PreviousPhoto3K";
						case Photo.Columns.UrlFragment: return "UrlFragment";
						case Photo.Columns.UsrCount: return "UsrCount";
						case Photo.Columns.FirstUsrK: return "FirstUsrK";
						case Photo.Columns.IsMasterCompressed: return "IsMasterCompressed";
						case Photo.Columns.IsProcessing: return "IsProcessing";
						case Photo.Columns.MediaType: return "MediaType";
						case Photo.Columns.ProcessingProgress: return "ProcessingProgress";
						case Photo.Columns.ProcessingStartDateTime: return "ProcessingStartDateTime";
						case Photo.Columns.VideoLo: return "VideoLo";
						case Photo.Columns.VideoMed: return "VideoMed";
						case Photo.Columns.VideoHi: return "VideoHi";
						case Photo.Columns.AudioLo: return "AudioLo";
						case Photo.Columns.AudioMed: return "AudioMed";
						case Photo.Columns.AudioHi: return "AudioHi";
						case Photo.Columns.AudioMaster: return "AudioMaster";
						case Photo.Columns.VideoMaster: return "VideoMaster";
						case Photo.Columns.AudioFileExtention: return "AudioFileExtention";
						case Photo.Columns.VideoFileExtention: return "VideoFileExtention";
						case Photo.Columns.VideoMasterFileSize: return "VideoMasterFileSize";
						case Photo.Columns.AudioMasterFileSize: return "AudioMasterFileSize";
						case Photo.Columns.VideoMasterFramerate: return "VideoMasterFramerate";
						case Photo.Columns.VideoMasterHeight: return "VideoMasterHeight";
						case Photo.Columns.VideoMasterWidth: return "VideoMasterWidth";
						case Photo.Columns.VideoDuration: return "VideoDuration";
						case Photo.Columns.AudioDuration: return "AudioDuration";
						case Photo.Columns.ProcessingLastChange: return "ProcessingLastChange";
						case Photo.Columns.VideoLoFramerate: return "VideoLoFramerate";
						case Photo.Columns.VideoMedFramerate: return "VideoMedFramerate";
						case Photo.Columns.VideoHiFramerate: return "VideoHiFramerate";
						case Photo.Columns.VideoLoHeight: return "VideoLoHeight";
						case Photo.Columns.VideoMedHeight: return "VideoMedHeight";
						case Photo.Columns.VideoHiHeight: return "VideoHiHeight";
						case Photo.Columns.VideoLoWidth: return "VideoLoWidth";
						case Photo.Columns.VideoMedWidth: return "VideoMedWidth";
						case Photo.Columns.VideoHiWidth: return "VideoHiWidth";
						case Photo.Columns.ProcessingAttempts: return "ProcessingAttempts";
						case Photo.Columns.OriginalHitsToday: return "OriginalHitsToday";
						case Photo.Columns.OriginalHitsDate: return "OriginalHitsDate";
						case Photo.Columns.ProcessingServerName: return "ProcessingServerName";
						case Photo.Columns.IsSonyK800i: return "IsSonyK800i";
						case Photo.Columns.IsInCaptionCompetition: return "IsInCaptionCompetition";
						case Photo.Columns.Rotate: return "Rotate";
						case Photo.Columns.UploadTemporary: return "UploadTemporary";
						case Photo.Columns.UploadTemporaryExtention: return "UploadTemporaryExtention";
						case Photo.Columns.Overlay: return "Overlay";
						case Photo.Columns.UploadTemporaryTags: return "UploadTemporaryTags";
						case Photo.Columns.DoneAmazonPixMaster: return "DoneAmazonPixMaster";
						case Photo.Columns.IsSonyC902: return "IsSonyC902";
						case Photo.Columns.PhotoOfWeekUser: return "PhotoOfWeekUser";
						case Photo.Columns.PhotoOfWeekUserCaption: return "PhotoOfWeekUserCaption";
						case Photo.Columns.PhotoOfWeekUserDateTime: return "PhotoOfWeekUserDateTime";
						case Photo.Columns.BlockedFromPhotoOfWeekUser: return "BlockedFromPhotoOfWeekUser";
						case Photo.Columns.FrontPagePic: return "FrontPagePic";
						case Photo.Columns.FrontPagePicState: return "FrontPagePicState";
						case Photo.Columns.FrontPageCaptionClass: return "FrontPageCaptionClass";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(Photo.Columns columnEnum)
		{
			switch (columnEnum)
			{
									case Photo.Columns.UsrK: return true;
																																												case Photo.Columns.Status: return true;
																																																									case Photo.Columns.IsInCaptionCompetition: return true;
																			default: return false;
			}
		}


		#region Common
 
		public Photo(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);  }
		public Photo()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.Photo);
		}
		public Photo(BobSet bs)
		{
			this.Bob = new Bob(bs.Table, bs);
		}
		public Photo(int PhotoK, IBob Parent, object Column)
			: this()
		{
			Bob.GetBobFromParent(PhotoK, Parent.Bob, Column, TablesEnum.Photo);
		}
		public Photo(int PhotoK)
			: this()
		{
			Bob.GetBobFromPrimaryKey(PhotoK);
		}
		#endregion

	}
	#endregion
	#region PhotoTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region Photo
	/// <summary>
	/// Photo taken at an event
	/// </summary>
	[Serializable]
	public partial class Photo 
	{
		
		#region Simple members
		/// <summary>
		/// The primary key
		/// </summary>
		public override int K
		{
			get { return (int)this[Photo.Columns.K] as int? ?? 0 ; }
			set { this[Photo.Columns.K] = value; }
		}
		/// <summary>
		/// Link to the gallery table - the gallery that this photo is in.
		/// </summary>
		public override int GalleryK
		{
			get { return (int)this[Photo.Columns.GalleryK]; }
			set { this[Photo.Columns.GalleryK] = value; }
		}
		/// <summary>
		/// Links to one Event
		/// </summary>
		public override int EventK
		{
			get { return (int)this[Photo.Columns.EventK]; }
			set { this[Photo.Columns.EventK] = value; }
		}
		/// <summary>
		/// Link to the article if this photo is in a gallery that is in an event
		/// </summary>
		public override int ArticleK
		{
			get { return (int)this[Photo.Columns.ArticleK]; }
			set { this[Photo.Columns.ArticleK] = value; }
		}
		/// <summary>
		/// The usr that uploaded the photo
		/// </summary>
		public override int UsrK
		{
			get { return (int)this[Photo.Columns.UsrK]; }
			set { this[Photo.Columns.UsrK] = value; }
		}
		/// <summary>
		/// The mobile that sent the photo
		/// </summary>
		public override int MobileK
		{
			get { return (int)this[Photo.Columns.MobileK]; }
			set { this[Photo.Columns.MobileK] = value; }
		}
		/// <summary>
		/// Order
		/// </summary>
		public override double Order
		{
			get { return (double)this[Photo.Columns.Order]; }
			set { this[Photo.Columns.Order] = value; }
		}
		/// <summary>
		/// Discussion thread about this photo - only created when first message is posted?
		/// </summary>
		public override int? ThreadK
		{
			get { return (int?)this[Photo.Columns.ThreadK]; }
			set { this[Photo.Columns.ThreadK] = value; }
		}
		/// <summary>
		/// Date / time the photo was taken (from exif data)
		/// </summary>
		public override DateTime DateTime
		{
			get { return (DateTime)this[Photo.Columns.DateTime]; }
			set { this[Photo.Columns.DateTime] = value; }
		}
		/// <summary>
		/// Number of views
		/// </summary>
		public override int Views
		{
			get { return (int)this[Photo.Columns.Views]; }
			set { this[Photo.Columns.Views] = value; }
		}
		/// <summary>
		/// Average cool rating
		/// </summary>
		public override double AverageCoolRating
		{
			get { return (double)this[Photo.Columns.AverageCoolRating]; }
			set { this[Photo.Columns.AverageCoolRating] = value; }
		}
		/// <summary>
		/// Average sexy rating
		/// </summary>
		public override double AverageSexyRating
		{
			get { return (double)this[Photo.Columns.AverageSexyRating]; }
			set { this[Photo.Columns.AverageSexyRating] = value; }
		}
		/// <summary>
		/// Total number of cool ratings
		/// </summary>
		public override int TotalCoolRatings
		{
			get { return (int)this[Photo.Columns.TotalCoolRatings]; }
			set { this[Photo.Columns.TotalCoolRatings] = value; }
		}
		/// <summary>
		/// Total number of sexy ratings
		/// </summary>
		public override int TotalSexyRatings
		{
			get { return (int)this[Photo.Columns.TotalSexyRatings]; }
			set { this[Photo.Columns.TotalSexyRatings] = value; }
		}
		/// <summary>
		/// Weighted cool rating = ( sum(Ratings) + 50 ) / ( count(Ratings) + 10 )
		/// </summary>
		public override double WeightedCoolRating
		{
			get { return (double)this[Photo.Columns.WeightedCoolRating]; }
			set { this[Photo.Columns.WeightedCoolRating] = value; }
		}
		/// <summary>
		/// Weighted sexy rating = ( sum(Ratings) + 50 ) / ( count(Ratings) + 10 )
		/// </summary>
		public override double WeightedSexyRating
		{
			get { return (double)this[Photo.Columns.WeightedSexyRating]; }
			set { this[Photo.Columns.WeightedSexyRating] = value; }
		}
		/// <summary>
		/// Filename of master original image (without logo)
		/// </summary>
		public Guid	Master
		{
			get{ return Cambro.Misc.Db.GuidConvertor(this[Photo.Columns.Master]);}		
			set{ this[Photo.Columns.Master] = new System.Data.SqlTypes.SqlGuid(value);}
		}
		/// <summary>
		/// Filename of original image
		/// </summary>
		public Guid	Original
		{
			get{ return Cambro.Misc.Db.GuidConvertor(this[Photo.Columns.Original]);}		
			set{ this[Photo.Columns.Original] = new System.Data.SqlTypes.SqlGuid(value);}
		}
		/// <summary>
		/// Filename of icon (35*26)
		/// </summary>
		public Guid	Icon
		{
			get{ return Cambro.Misc.Db.GuidConvertor(this[Photo.Columns.Icon]);}		
			set{ this[Photo.Columns.Icon] = new System.Data.SqlTypes.SqlGuid(value);}
		}
		/// <summary>
		/// Filename of thumbnail (106*80)
		/// </summary>
		public Guid	Thumb
		{
			get{ return Cambro.Misc.Db.GuidConvertor(this[Photo.Columns.Thumb]);}		
			set{ this[Photo.Columns.Thumb] = new System.Data.SqlTypes.SqlGuid(value);}
		}
		/// <summary>
		/// Filename of web-res (640*480)
		/// </summary>
		public Guid	Web
		{
			get{ return Cambro.Misc.Db.GuidConvertor(this[Photo.Columns.Web]);}		
			set{ this[Photo.Columns.Web] = new System.Data.SqlTypes.SqlGuid(value);}
		}
		/// <summary>
		/// Width of the original image
		/// </summary>
		public override int OriginalWidth
		{
			get { return (int)this[Photo.Columns.OriginalWidth]; }
			set { this[Photo.Columns.OriginalWidth] = value; }
		}
		/// <summary>
		/// Height of the original image
		/// </summary>
		public override int OriginalHeight
		{
			get { return (int)this[Photo.Columns.OriginalHeight]; }
			set { this[Photo.Columns.OriginalHeight] = value; }
		}
		/// <summary>
		/// Width of the web image
		/// </summary>
		public override int WebWidth
		{
			get { return (int)this[Photo.Columns.WebWidth]; }
			set { this[Photo.Columns.WebWidth] = value; }
		}
		/// <summary>
		/// Height of the web image
		/// </summary>
		public override int WebHeight
		{
			get { return (int)this[Photo.Columns.WebHeight]; }
			set { this[Photo.Columns.WebHeight] = value; }
		}
		/// <summary>
		/// Width of the thumbnail image
		/// </summary>
		public override int ThumbWidth
		{
			get { return (int)this[Photo.Columns.ThumbWidth]; }
			set { this[Photo.Columns.ThumbWidth] = value; }
		}
		/// <summary>
		/// Height of the thumbnail image
		/// </summary>
		public override int ThumbHeight
		{
			get { return (int)this[Photo.Columns.ThumbHeight]; }
			set { this[Photo.Columns.ThumbHeight] = value; }
		}
		/// <summary>
		/// Is the image in landscae orientation? (If the image is square, this is true)
		/// </summary>
		public override bool IsLandscape
		{
			get { return (bool)this[Photo.Columns.IsLandscape]; }
			set { this[Photo.Columns.IsLandscape] = value; }
		}
		/// <summary>
		/// Note for admin
		/// </summary>
		public override string AdminNote
		{
			get { return (string)this[Photo.Columns.AdminNote]; }
			set { this[Photo.Columns.AdminNote] = value; }
		}
		/// <summary>
		/// EquipmentMake from exif data
		/// </summary>
		public override string EquipmentMake
		{
			get { return (string)this[Photo.Columns.EquipmentMake]; }
			set { this[Photo.Columns.EquipmentMake] = value; }
		}
		/// <summary>
		/// CameraModel from exif data
		/// </summary>
		public override string CameraModel
		{
			get { return (string)this[Photo.Columns.CameraModel]; }
			set { this[Photo.Columns.CameraModel] = value; }
		}
		/// <summary>
		/// Size of original file in bytes
		/// </summary>
		public override int OriginalFileSize
		{
			get { return (int)this[Photo.Columns.OriginalFileSize]; }
			set { this[Photo.Columns.OriginalFileSize] = value; }
		}
		/// <summary>
		/// Size of master original file in bytes
		/// </summary>
		public override int MasterFileSize
		{
			get { return (int)this[Photo.Columns.MasterFileSize]; }
			set { this[Photo.Columns.MasterFileSize] = value; }
		}
		/// <summary>
		/// Total number of comments
		/// </summary>
		public override int TotalComments
		{
			get { return (int)this[Photo.Columns.TotalComments]; }
			set { this[Photo.Columns.TotalComments] = value; }
		}
		/// <summary>
		/// The date/time of the last post that was posted in this board (including child objects)
		/// </summary>
		public override DateTime LastPost
		{
			get { return (DateTime)this[Photo.Columns.LastPost]; }
			set { this[Photo.Columns.LastPost] = value; }
		}
		/// <summary>
		/// The average date.time of all comments posted in this board (including child objects)
		/// </summary>
		public override DateTime AverageCommentDateTime
		{
			get { return (DateTime)this[Photo.Columns.AverageCommentDateTime]; }
			set { this[Photo.Columns.AverageCommentDateTime] = value; }
		}
		/// <summary>
		/// Filename of cropping image (max side=1000, no logo)
		/// </summary>
		public Guid	Crop
		{
			get{ return Cambro.Misc.Db.GuidConvertor(this[Photo.Columns.Crop]);}		
			set{ this[Photo.Columns.Crop] = new System.Data.SqlTypes.SqlGuid(value);}
		}
		/// <summary>
		/// Has the photo been converted to dsi logos?
		/// </summary>
		public override bool DsiConverted
		{
			get { return (bool)this[Photo.Columns.DsiConverted]; }
			set { this[Photo.Columns.DsiConverted] = value; }
		}
		/// <summary>
		/// Should this photo go on the Photo of the Week section?
		/// </summary>
		public override bool PhotoOfWeek
		{
			get { return (bool)this[Photo.Columns.PhotoOfWeek]; }
			set { this[Photo.Columns.PhotoOfWeek] = value; }
		}
		/// <summary>
		/// The latest 3 photos of the week are displayed... This is the datetime
		/// </summary>
		public override DateTime PhotoOfWeekDateTime
		{
			get { return (DateTime)this[Photo.Columns.PhotoOfWeekDateTime]; }
			set { this[Photo.Columns.PhotoOfWeekDateTime] = value; }
		}
		/// <summary>
		/// This is the caption for the photo of the week section
		/// </summary>
		public override string PhotoOfWeekCaption
		{
			get { return (string)this[Photo.Columns.PhotoOfWeekCaption]; }
			set { this[Photo.Columns.PhotoOfWeekCaption] = value; }
		}
		/// <summary>
		/// Random float less than 1 used for fast pseudo-random ordering
		/// </summary>
		public override double RandomNumber
		{
			get { return (double)this[Photo.Columns.RandomNumber]; }
			set { this[Photo.Columns.RandomNumber] = value; }
		}
		/// <summary>
		/// True if the content has been disabled because of a complaint
		/// </summary>
		public override bool ContentDisabled
		{
			get { return (bool)this[Photo.Columns.ContentDisabled]; }
			set { this[Photo.Columns.ContentDisabled] = value; }
		}
		/// <summary>
		/// 1=New, 2=Enabled, 3=Disabled
		/// </summary>
		public override int Status
		{
			get { return (int)this[Photo.Columns.Status]; }
			set { this[Photo.Columns.Status] = value; }
		}
		/// <summary>
		/// Order in the gallery when ordered by datetime
		/// </summary>
		public override int GalleryTimeOrder
		{
			get { return (int)this[Photo.Columns.GalleryTimeOrder]; }
			set { this[Photo.Columns.GalleryTimeOrder] = value; }
		}
		/// <summary>
		/// Order in the gallery when ordered by rating
		/// </summary>
		public override int GalleryRatingOrder
		{
			get { return (int)this[Photo.Columns.GalleryRatingOrder]; }
			set { this[Photo.Columns.GalleryRatingOrder] = value; }
		}
		/// <summary>
		/// Which admin user enabled this photo?
		/// </summary>
		public override int EnabledByUsrK
		{
			get { return (int)this[Photo.Columns.EnabledByUsrK]; }
			set { this[Photo.Columns.EnabledByUsrK] = value; }
		}
		/// <summary>
		/// When was this photo enabled?
		/// </summary>
		public override DateTime EnabledDateTime
		{
			get { return (DateTime)this[Photo.Columns.EnabledDateTime]; }
			set { this[Photo.Columns.EnabledDateTime] = value; }
		}
		/// <summary>
		/// The DateTime of the parent object - e.g. datetime of event, or createdate of the article
		/// </summary>
		public override DateTime ParentDateTime
		{
			get { return (DateTime)this[Photo.Columns.ParentDateTime]; }
			set { this[Photo.Columns.ParentDateTime] = value; }
		}
		/// <summary>
		/// The next photo in the gallery (1)
		/// </summary>
		public override int NextPhoto1K
		{
			get { return (int)this[Photo.Columns.NextPhoto1K]; }
			set { this[Photo.Columns.NextPhoto1K] = value; }
		}
		/// <summary>
		/// The next photo in the gallery (2)
		/// </summary>
		public override int NextPhoto2K
		{
			get { return (int)this[Photo.Columns.NextPhoto2K]; }
			set { this[Photo.Columns.NextPhoto2K] = value; }
		}
		/// <summary>
		/// The next photo in the gallery (3)
		/// </summary>
		public override int NextPhoto3K
		{
			get { return (int)this[Photo.Columns.NextPhoto3K]; }
			set { this[Photo.Columns.NextPhoto3K] = value; }
		}
		/// <summary>
		/// The Previous photo in the gallery (1)
		/// </summary>
		public override int PreviousPhoto1K
		{
			get { return (int)this[Photo.Columns.PreviousPhoto1K]; }
			set { this[Photo.Columns.PreviousPhoto1K] = value; }
		}
		/// <summary>
		/// The Previous photo in the gallery (2)
		/// </summary>
		public override int PreviousPhoto2K
		{
			get { return (int)this[Photo.Columns.PreviousPhoto2K]; }
			set { this[Photo.Columns.PreviousPhoto2K] = value; }
		}
		/// <summary>
		/// The Previous photo in the gallery (3)
		/// </summary>
		public override int PreviousPhoto3K
		{
			get { return (int)this[Photo.Columns.PreviousPhoto3K]; }
			set { this[Photo.Columns.PreviousPhoto3K] = value; }
		}
		/// <summary>
		/// The url fragment - so that the url can be generated without accessing parent database records
		/// </summary>
		public override string UrlFragment
		{
			get { return (string)this[Photo.Columns.UrlFragment]; }
			set { this[Photo.Columns.UrlFragment] = value; }
		}
		/// <summary>
		/// Number of users in this photo - read this before accessing UsrsInThisPhoto UsrSet!
		/// </summary>
		public override int UsrCount
		{
			get { return (int)this[Photo.Columns.UsrCount]; }
			set { this[Photo.Columns.UsrCount] = value; }
		}
		/// <summary>
		/// The first usr that's in this photo
		/// </summary>
		public override int FirstUsrK
		{
			get { return (int)this[Photo.Columns.FirstUsrK]; }
			set { this[Photo.Columns.FirstUsrK] = value; }
		}
		/// <summary>
		/// Has the master Jpg been compressed?
		/// </summary>
		public override bool IsMasterCompressed
		{
			get { return (bool)this[Photo.Columns.IsMasterCompressed]; }
			set { this[Photo.Columns.IsMasterCompressed] = value; }
		}
		/// <summary>
		/// Has the processing started?
		/// </summary>
		public override bool IsProcessing
		{
			get { return (bool)this[Photo.Columns.IsProcessing]; }
			set { this[Photo.Columns.IsProcessing] = value; }
		}
		/// <summary>
		/// Media type - Image, Video or Audio
		/// </summary>
		public override int MediaType
		{
			get { return (int)this[Photo.Columns.MediaType]; }
			set { this[Photo.Columns.MediaType] = value; }
		}
		/// <summary>
		/// Estimated percentage complete
		/// </summary>
		public override int ProcessingProgress
		{
			get { return (int)this[Photo.Columns.ProcessingProgress]; }
			set { this[Photo.Columns.ProcessingProgress] = value; }
		}
		/// <summary>
		/// When the processing started
		/// </summary>
		public override DateTime? ProcessingStartDateTime
		{
			get { return (DateTime?)this[Photo.Columns.ProcessingStartDateTime]; }
			set { this[Photo.Columns.ProcessingStartDateTime] = value; }
		}
		/// <summary>
		/// Guid filename of the 256Kb/sec video FLV
		/// </summary>
		public Guid	VideoLo
		{
			get{ return Cambro.Misc.Db.GuidConvertor(this[Photo.Columns.VideoLo]);}		
			set{ this[Photo.Columns.VideoLo] = new System.Data.SqlTypes.SqlGuid(value);}
		}
		/// <summary>
		/// Guid filename of the 512Kb/sec video FLV
		/// </summary>
		public Guid	VideoMed
		{
			get{ return Cambro.Misc.Db.GuidConvertor(this[Photo.Columns.VideoMed]);}		
			set{ this[Photo.Columns.VideoMed] = new System.Data.SqlTypes.SqlGuid(value);}
		}
		/// <summary>
		/// Guid filename of the 1024Kb/sec video FLV
		/// </summary>
		public Guid	VideoHi
		{
			get{ return Cambro.Misc.Db.GuidConvertor(this[Photo.Columns.VideoHi]);}		
			set{ this[Photo.Columns.VideoHi] = new System.Data.SqlTypes.SqlGuid(value);}
		}
		/// <summary>
		/// Guid filename of the 64Kb/sec audio FLV
		/// </summary>
		public Guid	AudioLo
		{
			get{ return Cambro.Misc.Db.GuidConvertor(this[Photo.Columns.AudioLo]);}		
			set{ this[Photo.Columns.AudioLo] = new System.Data.SqlTypes.SqlGuid(value);}
		}
		/// <summary>
		/// Guid filename of the 128Kb/sec audio FLV
		/// </summary>
		public Guid	AudioMed
		{
			get{ return Cambro.Misc.Db.GuidConvertor(this[Photo.Columns.AudioMed]);}		
			set{ this[Photo.Columns.AudioMed] = new System.Data.SqlTypes.SqlGuid(value);}
		}
		/// <summary>
		/// Guid filename of the 192Kb/sec audio FLV
		/// </summary>
		public Guid	AudioHi
		{
			get{ return Cambro.Misc.Db.GuidConvertor(this[Photo.Columns.AudioHi]);}		
			set{ this[Photo.Columns.AudioHi] = new System.Data.SqlTypes.SqlGuid(value);}
		}
		/// <summary>
		/// Guid filename of the audio master file
		/// </summary>
		public Guid	AudioMaster
		{
			get{ return Cambro.Misc.Db.GuidConvertor(this[Photo.Columns.AudioMaster]);}		
			set{ this[Photo.Columns.AudioMaster] = new System.Data.SqlTypes.SqlGuid(value);}
		}
		/// <summary>
		/// Guid filename of the video master file
		/// </summary>
		public Guid	VideoMaster
		{
			get{ return Cambro.Misc.Db.GuidConvertor(this[Photo.Columns.VideoMaster]);}		
			set{ this[Photo.Columns.VideoMaster] = new System.Data.SqlTypes.SqlGuid(value);}
		}
		/// <summary>
		/// File extention of the audio master file
		/// </summary>
		public override string AudioFileExtention
		{
			get { return (string)this[Photo.Columns.AudioFileExtention]; }
			set { this[Photo.Columns.AudioFileExtention] = value; }
		}
		/// <summary>
		/// File extention of the video master file
		/// </summary>
		public override string VideoFileExtention
		{
			get { return (string)this[Photo.Columns.VideoFileExtention]; }
			set { this[Photo.Columns.VideoFileExtention] = value; }
		}
		/// <summary>
		/// Video master file size in bytes
		/// </summary>
		public override int VideoMasterFileSize
		{
			get { return (int)this[Photo.Columns.VideoMasterFileSize]; }
			set { this[Photo.Columns.VideoMasterFileSize] = value; }
		}
		/// <summary>
		/// Audio master file size in bytes
		/// </summary>
		public override int AudioMasterFileSize
		{
			get { return (int)this[Photo.Columns.AudioMasterFileSize]; }
			set { this[Photo.Columns.AudioMasterFileSize] = value; }
		}
		/// <summary>
		/// Video frames per second
		/// </summary>
		public override double VideoMasterFramerate
		{
			get { return (double)this[Photo.Columns.VideoMasterFramerate]; }
			set { this[Photo.Columns.VideoMasterFramerate] = value; }
		}
		/// <summary>
		/// Video height in pixels
		/// </summary>
		public override int VideoMasterHeight
		{
			get { return (int)this[Photo.Columns.VideoMasterHeight]; }
			set { this[Photo.Columns.VideoMasterHeight] = value; }
		}
		/// <summary>
		/// Video width in pixels
		/// </summary>
		public override int VideoMasterWidth
		{
			get { return (int)this[Photo.Columns.VideoMasterWidth]; }
			set { this[Photo.Columns.VideoMasterWidth] = value; }
		}
		/// <summary>
		/// Duration of the video in miliseconds
		/// </summary>
		public override int VideoDuration
		{
			get { return (int)this[Photo.Columns.VideoDuration]; }
			set { this[Photo.Columns.VideoDuration] = value; }
		}
		/// <summary>
		/// Duration of the audio in miliseconds
		/// </summary>
		public override int AudioDuration
		{
			get { return (int)this[Photo.Columns.AudioDuration]; }
			set { this[Photo.Columns.AudioDuration] = value; }
		}
		/// <summary>
		/// DateTime that the media processing progress last changed (for abort timeout)
		/// </summary>
		public override DateTime? ProcessingLastChange
		{
			get { return (DateTime?)this[Photo.Columns.ProcessingLastChange]; }
			set { this[Photo.Columns.ProcessingLastChange] = value; }
		}
		/// <summary>
		/// Framerate of the 256Kb/sec video FLV
		/// </summary>
		public override double VideoLoFramerate
		{
			get { return (double)this[Photo.Columns.VideoLoFramerate]; }
			set { this[Photo.Columns.VideoLoFramerate] = value; }
		}
		/// <summary>
		/// Framerate of the 512Kb/sec video FLV
		/// </summary>
		public override double VideoMedFramerate
		{
			get { return (double)this[Photo.Columns.VideoMedFramerate]; }
			set { this[Photo.Columns.VideoMedFramerate] = value; }
		}
		/// <summary>
		/// Framerate of the 1024Kb/sec video FLV
		/// </summary>
		public override double VideoHiFramerate
		{
			get { return (double)this[Photo.Columns.VideoHiFramerate]; }
			set { this[Photo.Columns.VideoHiFramerate] = value; }
		}
		/// <summary>
		/// Height of the 256Kb/sec video FLV
		/// </summary>
		public override int VideoLoHeight
		{
			get { return (int)this[Photo.Columns.VideoLoHeight]; }
			set { this[Photo.Columns.VideoLoHeight] = value; }
		}
		/// <summary>
		/// Height of the 512Kb/sec video FLV
		/// </summary>
		public override int VideoMedHeight
		{
			get { return (int)this[Photo.Columns.VideoMedHeight]; }
			set { this[Photo.Columns.VideoMedHeight] = value; }
		}
		/// <summary>
		/// Height of the 1024Kb/sec video FLV
		/// </summary>
		public override int VideoHiHeight
		{
			get { return (int)this[Photo.Columns.VideoHiHeight]; }
			set { this[Photo.Columns.VideoHiHeight] = value; }
		}
		/// <summary>
		/// Width of the 256Kb/sec video FLV
		/// </summary>
		public override int VideoLoWidth
		{
			get { return (int)this[Photo.Columns.VideoLoWidth]; }
			set { this[Photo.Columns.VideoLoWidth] = value; }
		}
		/// <summary>
		/// Width of the 512Kb/sec video FLV
		/// </summary>
		public override int VideoMedWidth
		{
			get { return (int)this[Photo.Columns.VideoMedWidth]; }
			set { this[Photo.Columns.VideoMedWidth] = value; }
		}
		/// <summary>
		/// Width of the 1024Kb/sec video FLV
		/// </summary>
		public override int VideoHiWidth
		{
			get { return (int)this[Photo.Columns.VideoHiWidth]; }
			set { this[Photo.Columns.VideoHiWidth] = value; }
		}
		/// <summary>
		/// How many times has the encoder tried to encode this file?
		/// </summary>
		public override int ProcessingAttempts
		{
			get { return (int)this[Photo.Columns.ProcessingAttempts]; }
			set { this[Photo.Columns.ProcessingAttempts] = value; }
		}
		/// <summary>
		/// How many times has the original image been generated today?
		/// </summary>
		public override int OriginalHitsToday
		{
			get { return (int)this[Photo.Columns.OriginalHitsToday]; }
			set { this[Photo.Columns.OriginalHitsToday] = value; }
		}
		/// <summary>
		/// Original image generator hit counter date
		/// </summary>
		public override DateTime OriginalHitsDate
		{
			get { return (DateTime)this[Photo.Columns.OriginalHitsDate]; }
			set { this[Photo.Columns.OriginalHitsDate] = value; }
		}
		/// <summary>
		/// Which server is processing the video?
		/// </summary>
		public override string ProcessingServerName
		{
			get { return (string)this[Photo.Columns.ProcessingServerName]; }
			set { this[Photo.Columns.ProcessingServerName] = value; }
		}
		/// <summary>
		/// Was this photo taken with a Sony K800i?
		/// </summary>
		public override bool IsSonyK800i
		{
			get { return (bool)this[Photo.Columns.IsSonyK800i]; }
			set { this[Photo.Columns.IsSonyK800i] = value; }
		}
		/// <summary>
		/// Is this thread in a caption competition?
		/// </summary>
		public override bool IsInCaptionCompetition
		{
			get { return (bool)this[Photo.Columns.IsInCaptionCompetition]; }
			set { this[Photo.Columns.IsInCaptionCompetition] = value; }
		}
		/// <summary>
		/// Rotation transformation when the photo was uploaded
		/// </summary>
		public override int Rotate
		{
			get { return (int)this[Photo.Columns.Rotate]; }
			set { this[Photo.Columns.Rotate] = value; }
		}
		/// <summary>
		/// Location of the temporary uploaded file (in PixMaster)
		/// </summary>
		public Guid	UploadTemporary
		{
			get{ return Cambro.Misc.Db.GuidConvertor(this[Photo.Columns.UploadTemporary]);}		
			set{ this[Photo.Columns.UploadTemporary] = new System.Data.SqlTypes.SqlGuid(value);}
		}
		/// <summary>
		/// Extention of the temporary uploaded file
		/// </summary>
		public override string UploadTemporaryExtention
		{
			get { return (string)this[Photo.Columns.UploadTemporaryExtention]; }
			set { this[Photo.Columns.UploadTemporaryExtention] = value; }
		}
		/// <summary>
		/// Enum for photo overlays
		/// </summary>
		public override int Overlay
		{
			get { return (int)this[Photo.Columns.Overlay]; }
			set { this[Photo.Columns.Overlay] = value; }
		}
		/// <summary>
		/// Tags from the uploader control - prior to processing
		/// </summary>
		public override string UploadTemporaryTags
		{
			get { return (string)this[Photo.Columns.UploadTemporaryTags]; }
			set { this[Photo.Columns.UploadTemporaryTags] = value; }
		}
		/// <summary>
		/// Have the PixMaster files been uploaded to Amazon?
		/// </summary>
		public override bool DoneAmazonPixMaster
		{
			get { return (bool)this[Photo.Columns.DoneAmazonPixMaster]; }
			set { this[Photo.Columns.DoneAmazonPixMaster] = value; }
		}
		/// <summary>
		/// Was this photo taken with the C902?
		/// </summary>
		public override bool IsSonyC902
		{
			get { return (bool)this[Photo.Columns.IsSonyC902]; }
			set { this[Photo.Columns.IsSonyC902] = value; }
		}
		/// <summary>
		/// Photo of week selected by users
		/// </summary>
		public override bool PhotoOfWeekUser
		{
			get { return (bool)this[Photo.Columns.PhotoOfWeekUser]; }
			set { this[Photo.Columns.PhotoOfWeekUser] = value; }
		}
		/// <summary>
		/// Photo of week selected by users caption
		/// </summary>
		public override string PhotoOfWeekUserCaption
		{
			get { return (string)this[Photo.Columns.PhotoOfWeekUserCaption]; }
			set { this[Photo.Columns.PhotoOfWeekUserCaption] = value; }
		}
		/// <summary>
		/// Photo of week selected by users date time
		/// </summary>
		public override DateTime? PhotoOfWeekUserDateTime
		{
			get { return (DateTime?)this[Photo.Columns.PhotoOfWeekUserDateTime]; }
			set { this[Photo.Columns.PhotoOfWeekUserDateTime] = value; }
		}
		/// <summary>
		/// Has this photo been blocked from being User Photo of the week?
		/// </summary>
		public override bool BlockedFromPhotoOfWeekUser
		{
			get { return (bool)this[Photo.Columns.BlockedFromPhotoOfWeekUser]; }
			set { this[Photo.Columns.BlockedFromPhotoOfWeekUser] = value; }
		}
		/// <summary>
		/// Pic for the front page (600 x 250) image.
		/// </summary>
		public override Guid? FrontPagePic
		{
			get { return (Guid?)this[Photo.Columns.FrontPagePic]; }
			set { this[Photo.Columns.FrontPagePic] = value; }
		}
		/// <summary>
		/// Cropper state for the front page pic.
		/// </summary>
		public override string FrontPagePicState
		{
			get { return (string)this[Photo.Columns.FrontPagePicState]; }
			set { this[Photo.Columns.FrontPagePicState] = value; }
		}
		/// <summary>
		/// CSS class for the front page caption - for colour, alignment etc.
		/// </summary>
		public override string FrontPageCaptionClass
		{
			get { return (string)this[Photo.Columns.FrontPageCaptionClass]; }
			set { this[Photo.Columns.FrontPageCaptionClass] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildPhotos
	{
		CachedSqlSelect<Photo> ChildPhotos();
		CachedSqlSelect<Photo> ChildPhotos(Q where);
		CachedSqlSelect<Photo> ChildPhotos(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<Photo> ChildPhotos(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class Photo 
	 : 
	Bobs.ChildInterfaces.IHasChildGroupPhotos
	,
	Bobs.ChildInterfaces.IHasChildParas
	,
	Bobs.ChildInterfaces.IHasChildPhotoReviews
	,
	Bobs.ChildInterfaces.IHasChildTagPhotos
	,
	Bobs.ChildInterfaces.IHasChildThreads
	,
	Bobs.ChildInterfaces.IHasChildUsrPhotoFavourites
	,
	Bobs.ChildInterfaces.IHasChildUsrPhotoMes
		{
			public CachedSqlSelect<GroupPhoto> ChildGroupPhotos()
		{
			return this.ChildGroupPhotos(null, null);
		}
		public CachedSqlSelect<GroupPhoto> ChildGroupPhotos(Q where)
		{
			return this.ChildGroupPhotos(where, null);
		}
		public CachedSqlSelect<GroupPhoto> ChildGroupPhotos(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildGroupPhotos(null, orderBy);
		}
		public CachedSqlSelect<GroupPhoto> ChildGroupPhotos(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<GroupPhoto>
			(
				new Children<GroupPhoto>
				(
					TablesEnum.Photo, 
					this.K, 
					TablesEnum.GroupPhoto, 
					dr => 
					{ 
						GroupPhoto newGroupPhoto = new GroupPhoto(); 
						newGroupPhoto.Initialise(dr); 
						return newGroupPhoto;
					},
					"90DFAF32",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<Para> ChildParas()
		{
			return this.ChildParas(null, null);
		}
		public CachedSqlSelect<Para> ChildParas(Q where)
		{
			return this.ChildParas(where, null);
		}
		public CachedSqlSelect<Para> ChildParas(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildParas(null, orderBy);
		}
		public CachedSqlSelect<Para> ChildParas(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<Para>
			(
				new Children<Para>
				(
					TablesEnum.Photo, 
					this.K, 
					TablesEnum.Para, 
					dr => 
					{ 
						Para newPara = new Para(); 
						newPara.Initialise(dr); 
						return newPara;
					},
					"325990B0",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<PhotoReview> ChildPhotoReviews()
		{
			return this.ChildPhotoReviews(null, null);
		}
		public CachedSqlSelect<PhotoReview> ChildPhotoReviews(Q where)
		{
			return this.ChildPhotoReviews(where, null);
		}
		public CachedSqlSelect<PhotoReview> ChildPhotoReviews(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildPhotoReviews(null, orderBy);
		}
		public CachedSqlSelect<PhotoReview> ChildPhotoReviews(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<PhotoReview>
			(
				new Children<PhotoReview>
				(
					TablesEnum.Photo, 
					this.K, 
					TablesEnum.PhotoReview, 
					dr => 
					{ 
						PhotoReview newPhotoReview = new PhotoReview(); 
						newPhotoReview.Initialise(dr); 
						return newPhotoReview;
					},
					"BAD94C7E",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<TagPhoto> ChildTagPhotos()
		{
			return this.ChildTagPhotos(null, null);
		}
		public CachedSqlSelect<TagPhoto> ChildTagPhotos(Q where)
		{
			return this.ChildTagPhotos(where, null);
		}
		public CachedSqlSelect<TagPhoto> ChildTagPhotos(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildTagPhotos(null, orderBy);
		}
		public CachedSqlSelect<TagPhoto> ChildTagPhotos(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<TagPhoto>
			(
				new Children<TagPhoto>
				(
					TablesEnum.Photo, 
					this.K, 
					TablesEnum.TagPhoto, 
					dr => 
					{ 
						TagPhoto newTagPhoto = new TagPhoto(); 
						newTagPhoto.Initialise(dr); 
						return newTagPhoto;
					},
					"9D98A21D",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<Thread> ChildThreads()
		{
			return this.ChildThreads(null, null);
		}
		public CachedSqlSelect<Thread> ChildThreads(Q where)
		{
			return this.ChildThreads(where, null);
		}
		public CachedSqlSelect<Thread> ChildThreads(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildThreads(null, orderBy);
		}
		public CachedSqlSelect<Thread> ChildThreads(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<Thread>
			(
				new Children<Thread>
				(
					TablesEnum.Photo, 
					this.K, 
					TablesEnum.Thread, 
					dr => 
					{ 
						Thread newThread = new Thread(); 
						newThread.Initialise(dr); 
						return newThread;
					},
					"4576C3F1",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<UsrPhotoFavourite> ChildUsrPhotoFavourites()
		{
			return this.ChildUsrPhotoFavourites(null, null);
		}
		public CachedSqlSelect<UsrPhotoFavourite> ChildUsrPhotoFavourites(Q where)
		{
			return this.ChildUsrPhotoFavourites(where, null);
		}
		public CachedSqlSelect<UsrPhotoFavourite> ChildUsrPhotoFavourites(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildUsrPhotoFavourites(null, orderBy);
		}
		public CachedSqlSelect<UsrPhotoFavourite> ChildUsrPhotoFavourites(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<UsrPhotoFavourite>
			(
				new Children<UsrPhotoFavourite>
				(
					TablesEnum.Photo, 
					this.K, 
					TablesEnum.UsrPhotoFavourite, 
					dr => 
					{ 
						UsrPhotoFavourite newUsrPhotoFavourite = new UsrPhotoFavourite(); 
						newUsrPhotoFavourite.Initialise(dr); 
						return newUsrPhotoFavourite;
					},
					"9743B94F",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<UsrPhotoMe> ChildUsrPhotoMes()
		{
			return this.ChildUsrPhotoMes(null, null);
		}
		public CachedSqlSelect<UsrPhotoMe> ChildUsrPhotoMes(Q where)
		{
			return this.ChildUsrPhotoMes(where, null);
		}
		public CachedSqlSelect<UsrPhotoMe> ChildUsrPhotoMes(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildUsrPhotoMes(null, orderBy);
		}
		public CachedSqlSelect<UsrPhotoMe> ChildUsrPhotoMes(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<UsrPhotoMe>
			(
				new Children<UsrPhotoMe>
				(
					TablesEnum.Photo, 
					this.K, 
					TablesEnum.UsrPhotoMe, 
					dr => 
					{ 
						UsrPhotoMe newUsrPhotoMe = new UsrPhotoMe(); 
						newUsrPhotoMe.Initialise(dr); 
						return newUsrPhotoMe;
					},
					"4CE926B4",
					where,
					orderBy
				)
			);
		}
		}

	#region PhotoDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region PhotoDataHolder
	/// <summary>
	/// Photo taken at an eventDataHolder
	/// </summary>
	[Serializable]
	public partial class PhotoDataHolder : DataHolder<Photo>
	{
		Photo dataHolder;
		[NonSerializedAttribute] Photo bob;

		public PhotoDataHolder()
		{
			this.dataHolder = new Photo();
		}
		
		void CopyValues(Photo source, Photo destination)
		{
			destination[Bobs.Photo.Columns.K] = source[Bobs.Photo.Columns.K];
			destination[Bobs.Photo.Columns.GalleryK] = source[Bobs.Photo.Columns.GalleryK];
			destination[Bobs.Photo.Columns.EventK] = source[Bobs.Photo.Columns.EventK];
			destination[Bobs.Photo.Columns.ArticleK] = source[Bobs.Photo.Columns.ArticleK];
			destination[Bobs.Photo.Columns.UsrK] = source[Bobs.Photo.Columns.UsrK];
			destination[Bobs.Photo.Columns.MobileK] = source[Bobs.Photo.Columns.MobileK];
			destination[Bobs.Photo.Columns.Order] = source[Bobs.Photo.Columns.Order];
			destination[Bobs.Photo.Columns.ThreadK] = source[Bobs.Photo.Columns.ThreadK];
			destination[Bobs.Photo.Columns.DateTime] = source[Bobs.Photo.Columns.DateTime];
			destination[Bobs.Photo.Columns.Views] = source[Bobs.Photo.Columns.Views];
			destination[Bobs.Photo.Columns.AverageCoolRating] = source[Bobs.Photo.Columns.AverageCoolRating];
			destination[Bobs.Photo.Columns.AverageSexyRating] = source[Bobs.Photo.Columns.AverageSexyRating];
			destination[Bobs.Photo.Columns.TotalCoolRatings] = source[Bobs.Photo.Columns.TotalCoolRatings];
			destination[Bobs.Photo.Columns.TotalSexyRatings] = source[Bobs.Photo.Columns.TotalSexyRatings];
			destination[Bobs.Photo.Columns.WeightedCoolRating] = source[Bobs.Photo.Columns.WeightedCoolRating];
			destination[Bobs.Photo.Columns.WeightedSexyRating] = source[Bobs.Photo.Columns.WeightedSexyRating];
			destination[Bobs.Photo.Columns.Master] = source[Bobs.Photo.Columns.Master];
			destination[Bobs.Photo.Columns.Original] = source[Bobs.Photo.Columns.Original];
			destination[Bobs.Photo.Columns.Icon] = source[Bobs.Photo.Columns.Icon];
			destination[Bobs.Photo.Columns.Thumb] = source[Bobs.Photo.Columns.Thumb];
			destination[Bobs.Photo.Columns.Web] = source[Bobs.Photo.Columns.Web];
			destination[Bobs.Photo.Columns.OriginalWidth] = source[Bobs.Photo.Columns.OriginalWidth];
			destination[Bobs.Photo.Columns.OriginalHeight] = source[Bobs.Photo.Columns.OriginalHeight];
			destination[Bobs.Photo.Columns.WebWidth] = source[Bobs.Photo.Columns.WebWidth];
			destination[Bobs.Photo.Columns.WebHeight] = source[Bobs.Photo.Columns.WebHeight];
			destination[Bobs.Photo.Columns.ThumbWidth] = source[Bobs.Photo.Columns.ThumbWidth];
			destination[Bobs.Photo.Columns.ThumbHeight] = source[Bobs.Photo.Columns.ThumbHeight];
			destination[Bobs.Photo.Columns.IsLandscape] = source[Bobs.Photo.Columns.IsLandscape];
			destination[Bobs.Photo.Columns.AdminNote] = source[Bobs.Photo.Columns.AdminNote];
			destination[Bobs.Photo.Columns.EquipmentMake] = source[Bobs.Photo.Columns.EquipmentMake];
			destination[Bobs.Photo.Columns.CameraModel] = source[Bobs.Photo.Columns.CameraModel];
			destination[Bobs.Photo.Columns.OriginalFileSize] = source[Bobs.Photo.Columns.OriginalFileSize];
			destination[Bobs.Photo.Columns.MasterFileSize] = source[Bobs.Photo.Columns.MasterFileSize];
			destination[Bobs.Photo.Columns.TotalComments] = source[Bobs.Photo.Columns.TotalComments];
			destination[Bobs.Photo.Columns.LastPost] = source[Bobs.Photo.Columns.LastPost];
			destination[Bobs.Photo.Columns.AverageCommentDateTime] = source[Bobs.Photo.Columns.AverageCommentDateTime];
			destination[Bobs.Photo.Columns.Crop] = source[Bobs.Photo.Columns.Crop];
			destination[Bobs.Photo.Columns.DsiConverted] = source[Bobs.Photo.Columns.DsiConverted];
			destination[Bobs.Photo.Columns.PhotoOfWeek] = source[Bobs.Photo.Columns.PhotoOfWeek];
			destination[Bobs.Photo.Columns.PhotoOfWeekDateTime] = source[Bobs.Photo.Columns.PhotoOfWeekDateTime];
			destination[Bobs.Photo.Columns.PhotoOfWeekCaption] = source[Bobs.Photo.Columns.PhotoOfWeekCaption];
			destination[Bobs.Photo.Columns.RandomNumber] = source[Bobs.Photo.Columns.RandomNumber];
			destination[Bobs.Photo.Columns.ContentDisabled] = source[Bobs.Photo.Columns.ContentDisabled];
			destination[Bobs.Photo.Columns.Status] = source[Bobs.Photo.Columns.Status];
			destination[Bobs.Photo.Columns.GalleryTimeOrder] = source[Bobs.Photo.Columns.GalleryTimeOrder];
			destination[Bobs.Photo.Columns.GalleryRatingOrder] = source[Bobs.Photo.Columns.GalleryRatingOrder];
			destination[Bobs.Photo.Columns.EnabledByUsrK] = source[Bobs.Photo.Columns.EnabledByUsrK];
			destination[Bobs.Photo.Columns.EnabledDateTime] = source[Bobs.Photo.Columns.EnabledDateTime];
			destination[Bobs.Photo.Columns.ParentDateTime] = source[Bobs.Photo.Columns.ParentDateTime];
			destination[Bobs.Photo.Columns.NextPhoto1K] = source[Bobs.Photo.Columns.NextPhoto1K];
			destination[Bobs.Photo.Columns.NextPhoto2K] = source[Bobs.Photo.Columns.NextPhoto2K];
			destination[Bobs.Photo.Columns.NextPhoto3K] = source[Bobs.Photo.Columns.NextPhoto3K];
			destination[Bobs.Photo.Columns.PreviousPhoto1K] = source[Bobs.Photo.Columns.PreviousPhoto1K];
			destination[Bobs.Photo.Columns.PreviousPhoto2K] = source[Bobs.Photo.Columns.PreviousPhoto2K];
			destination[Bobs.Photo.Columns.PreviousPhoto3K] = source[Bobs.Photo.Columns.PreviousPhoto3K];
			destination[Bobs.Photo.Columns.UrlFragment] = source[Bobs.Photo.Columns.UrlFragment];
			destination[Bobs.Photo.Columns.UsrCount] = source[Bobs.Photo.Columns.UsrCount];
			destination[Bobs.Photo.Columns.FirstUsrK] = source[Bobs.Photo.Columns.FirstUsrK];
			destination[Bobs.Photo.Columns.IsMasterCompressed] = source[Bobs.Photo.Columns.IsMasterCompressed];
			destination[Bobs.Photo.Columns.IsProcessing] = source[Bobs.Photo.Columns.IsProcessing];
			destination[Bobs.Photo.Columns.MediaType] = source[Bobs.Photo.Columns.MediaType];
			destination[Bobs.Photo.Columns.ProcessingProgress] = source[Bobs.Photo.Columns.ProcessingProgress];
			destination[Bobs.Photo.Columns.ProcessingStartDateTime] = source[Bobs.Photo.Columns.ProcessingStartDateTime];
			destination[Bobs.Photo.Columns.VideoLo] = source[Bobs.Photo.Columns.VideoLo];
			destination[Bobs.Photo.Columns.VideoMed] = source[Bobs.Photo.Columns.VideoMed];
			destination[Bobs.Photo.Columns.VideoHi] = source[Bobs.Photo.Columns.VideoHi];
			destination[Bobs.Photo.Columns.AudioLo] = source[Bobs.Photo.Columns.AudioLo];
			destination[Bobs.Photo.Columns.AudioMed] = source[Bobs.Photo.Columns.AudioMed];
			destination[Bobs.Photo.Columns.AudioHi] = source[Bobs.Photo.Columns.AudioHi];
			destination[Bobs.Photo.Columns.AudioMaster] = source[Bobs.Photo.Columns.AudioMaster];
			destination[Bobs.Photo.Columns.VideoMaster] = source[Bobs.Photo.Columns.VideoMaster];
			destination[Bobs.Photo.Columns.AudioFileExtention] = source[Bobs.Photo.Columns.AudioFileExtention];
			destination[Bobs.Photo.Columns.VideoFileExtention] = source[Bobs.Photo.Columns.VideoFileExtention];
			destination[Bobs.Photo.Columns.VideoMasterFileSize] = source[Bobs.Photo.Columns.VideoMasterFileSize];
			destination[Bobs.Photo.Columns.AudioMasterFileSize] = source[Bobs.Photo.Columns.AudioMasterFileSize];
			destination[Bobs.Photo.Columns.VideoMasterFramerate] = source[Bobs.Photo.Columns.VideoMasterFramerate];
			destination[Bobs.Photo.Columns.VideoMasterHeight] = source[Bobs.Photo.Columns.VideoMasterHeight];
			destination[Bobs.Photo.Columns.VideoMasterWidth] = source[Bobs.Photo.Columns.VideoMasterWidth];
			destination[Bobs.Photo.Columns.VideoDuration] = source[Bobs.Photo.Columns.VideoDuration];
			destination[Bobs.Photo.Columns.AudioDuration] = source[Bobs.Photo.Columns.AudioDuration];
			destination[Bobs.Photo.Columns.ProcessingLastChange] = source[Bobs.Photo.Columns.ProcessingLastChange];
			destination[Bobs.Photo.Columns.VideoLoFramerate] = source[Bobs.Photo.Columns.VideoLoFramerate];
			destination[Bobs.Photo.Columns.VideoMedFramerate] = source[Bobs.Photo.Columns.VideoMedFramerate];
			destination[Bobs.Photo.Columns.VideoHiFramerate] = source[Bobs.Photo.Columns.VideoHiFramerate];
			destination[Bobs.Photo.Columns.VideoLoHeight] = source[Bobs.Photo.Columns.VideoLoHeight];
			destination[Bobs.Photo.Columns.VideoMedHeight] = source[Bobs.Photo.Columns.VideoMedHeight];
			destination[Bobs.Photo.Columns.VideoHiHeight] = source[Bobs.Photo.Columns.VideoHiHeight];
			destination[Bobs.Photo.Columns.VideoLoWidth] = source[Bobs.Photo.Columns.VideoLoWidth];
			destination[Bobs.Photo.Columns.VideoMedWidth] = source[Bobs.Photo.Columns.VideoMedWidth];
			destination[Bobs.Photo.Columns.VideoHiWidth] = source[Bobs.Photo.Columns.VideoHiWidth];
			destination[Bobs.Photo.Columns.ProcessingAttempts] = source[Bobs.Photo.Columns.ProcessingAttempts];
			destination[Bobs.Photo.Columns.OriginalHitsToday] = source[Bobs.Photo.Columns.OriginalHitsToday];
			destination[Bobs.Photo.Columns.OriginalHitsDate] = source[Bobs.Photo.Columns.OriginalHitsDate];
			destination[Bobs.Photo.Columns.ProcessingServerName] = source[Bobs.Photo.Columns.ProcessingServerName];
			destination[Bobs.Photo.Columns.IsSonyK800i] = source[Bobs.Photo.Columns.IsSonyK800i];
			destination[Bobs.Photo.Columns.IsInCaptionCompetition] = source[Bobs.Photo.Columns.IsInCaptionCompetition];
			destination[Bobs.Photo.Columns.Rotate] = source[Bobs.Photo.Columns.Rotate];
			destination[Bobs.Photo.Columns.UploadTemporary] = source[Bobs.Photo.Columns.UploadTemporary];
			destination[Bobs.Photo.Columns.UploadTemporaryExtention] = source[Bobs.Photo.Columns.UploadTemporaryExtention];
			destination[Bobs.Photo.Columns.Overlay] = source[Bobs.Photo.Columns.Overlay];
			destination[Bobs.Photo.Columns.UploadTemporaryTags] = source[Bobs.Photo.Columns.UploadTemporaryTags];
			destination[Bobs.Photo.Columns.DoneAmazonPixMaster] = source[Bobs.Photo.Columns.DoneAmazonPixMaster];
			destination[Bobs.Photo.Columns.IsSonyC902] = source[Bobs.Photo.Columns.IsSonyC902];
			destination[Bobs.Photo.Columns.PhotoOfWeekUser] = source[Bobs.Photo.Columns.PhotoOfWeekUser];
			destination[Bobs.Photo.Columns.PhotoOfWeekUserCaption] = source[Bobs.Photo.Columns.PhotoOfWeekUserCaption];
			destination[Bobs.Photo.Columns.PhotoOfWeekUserDateTime] = source[Bobs.Photo.Columns.PhotoOfWeekUserDateTime];
			destination[Bobs.Photo.Columns.BlockedFromPhotoOfWeekUser] = source[Bobs.Photo.Columns.BlockedFromPhotoOfWeekUser];
			destination[Bobs.Photo.Columns.FrontPagePic] = source[Bobs.Photo.Columns.FrontPagePic];
			destination[Bobs.Photo.Columns.FrontPagePicState] = source[Bobs.Photo.Columns.FrontPagePicState];
			destination[Bobs.Photo.Columns.FrontPageCaptionClass] = source[Bobs.Photo.Columns.FrontPageCaptionClass];
		}
		
		public PhotoDataHolder(Photo bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// The primary key
		/// </summary>
		public int K
		{
			get { return dataHolder.K; }
			set { this.dataHolder.K = value; }
		}
		/// <summary>
		/// Link to the gallery table - the gallery that this photo is in.
		/// </summary>
		public int GalleryK
		{
			get { return dataHolder.GalleryK; }
			set { this.dataHolder.GalleryK = value; }
		}
		/// <summary>
		/// Links to one Event
		/// </summary>
		public int EventK
		{
			get { return dataHolder.EventK; }
			set { this.dataHolder.EventK = value; }
		}
		/// <summary>
		/// Link to the article if this photo is in a gallery that is in an event
		/// </summary>
		public int ArticleK
		{
			get { return dataHolder.ArticleK; }
			set { this.dataHolder.ArticleK = value; }
		}
		/// <summary>
		/// The usr that uploaded the photo
		/// </summary>
		public int UsrK
		{
			get { return dataHolder.UsrK; }
			set { this.dataHolder.UsrK = value; }
		}
		/// <summary>
		/// The mobile that sent the photo
		/// </summary>
		public int MobileK
		{
			get { return dataHolder.MobileK; }
			set { this.dataHolder.MobileK = value; }
		}
		/// <summary>
		/// Order
		/// </summary>
		public double Order
		{
			get { return dataHolder.Order; }
			set { this.dataHolder.Order = value; }
		}
		/// <summary>
		/// Discussion thread about this photo - only created when first message is posted?
		/// </summary>
		public int? ThreadK
		{
			get { return dataHolder.ThreadK; }
			set { this.dataHolder.ThreadK = value; }
		}
		/// <summary>
		/// Date / time the photo was taken (from exif data)
		/// </summary>
		public DateTime DateTime
		{
			get { return dataHolder.DateTime; }
			set { this.dataHolder.DateTime = value; }
		}
		/// <summary>
		/// Number of views
		/// </summary>
		public int Views
		{
			get { return dataHolder.Views; }
			set { this.dataHolder.Views = value; }
		}
		/// <summary>
		/// Average cool rating
		/// </summary>
		public double AverageCoolRating
		{
			get { return dataHolder.AverageCoolRating; }
			set { this.dataHolder.AverageCoolRating = value; }
		}
		/// <summary>
		/// Average sexy rating
		/// </summary>
		public double AverageSexyRating
		{
			get { return dataHolder.AverageSexyRating; }
			set { this.dataHolder.AverageSexyRating = value; }
		}
		/// <summary>
		/// Total number of cool ratings
		/// </summary>
		public int TotalCoolRatings
		{
			get { return dataHolder.TotalCoolRatings; }
			set { this.dataHolder.TotalCoolRatings = value; }
		}
		/// <summary>
		/// Total number of sexy ratings
		/// </summary>
		public int TotalSexyRatings
		{
			get { return dataHolder.TotalSexyRatings; }
			set { this.dataHolder.TotalSexyRatings = value; }
		}
		/// <summary>
		/// Weighted cool rating = ( sum(Ratings) + 50 ) / ( count(Ratings) + 10 )
		/// </summary>
		public double WeightedCoolRating
		{
			get { return dataHolder.WeightedCoolRating; }
			set { this.dataHolder.WeightedCoolRating = value; }
		}
		/// <summary>
		/// Weighted sexy rating = ( sum(Ratings) + 50 ) / ( count(Ratings) + 10 )
		/// </summary>
		public double WeightedSexyRating
		{
			get { return dataHolder.WeightedSexyRating; }
			set { this.dataHolder.WeightedSexyRating = value; }
		}
		/// <summary>
		/// Filename of master original image (without logo)
		/// </summary>
		public Guid Master
		{
			get { return dataHolder.Master; }
			set { this.dataHolder.Master = value; }
		}
		/// <summary>
		/// Filename of original image
		/// </summary>
		public Guid Original
		{
			get { return dataHolder.Original; }
			set { this.dataHolder.Original = value; }
		}
		/// <summary>
		/// Filename of icon (35*26)
		/// </summary>
		public Guid Icon
		{
			get { return dataHolder.Icon; }
			set { this.dataHolder.Icon = value; }
		}
		/// <summary>
		/// Filename of thumbnail (106*80)
		/// </summary>
		public Guid Thumb
		{
			get { return dataHolder.Thumb; }
			set { this.dataHolder.Thumb = value; }
		}
		/// <summary>
		/// Filename of web-res (640*480)
		/// </summary>
		public Guid Web
		{
			get { return dataHolder.Web; }
			set { this.dataHolder.Web = value; }
		}
		/// <summary>
		/// Width of the original image
		/// </summary>
		public int OriginalWidth
		{
			get { return dataHolder.OriginalWidth; }
			set { this.dataHolder.OriginalWidth = value; }
		}
		/// <summary>
		/// Height of the original image
		/// </summary>
		public int OriginalHeight
		{
			get { return dataHolder.OriginalHeight; }
			set { this.dataHolder.OriginalHeight = value; }
		}
		/// <summary>
		/// Width of the web image
		/// </summary>
		public int WebWidth
		{
			get { return dataHolder.WebWidth; }
			set { this.dataHolder.WebWidth = value; }
		}
		/// <summary>
		/// Height of the web image
		/// </summary>
		public int WebHeight
		{
			get { return dataHolder.WebHeight; }
			set { this.dataHolder.WebHeight = value; }
		}
		/// <summary>
		/// Width of the thumbnail image
		/// </summary>
		public int ThumbWidth
		{
			get { return dataHolder.ThumbWidth; }
			set { this.dataHolder.ThumbWidth = value; }
		}
		/// <summary>
		/// Height of the thumbnail image
		/// </summary>
		public int ThumbHeight
		{
			get { return dataHolder.ThumbHeight; }
			set { this.dataHolder.ThumbHeight = value; }
		}
		/// <summary>
		/// Is the image in landscae orientation? (If the image is square, this is true)
		/// </summary>
		public bool IsLandscape
		{
			get { return dataHolder.IsLandscape; }
			set { this.dataHolder.IsLandscape = value; }
		}
		/// <summary>
		/// Note for admin
		/// </summary>
		public string AdminNote
		{
			get { return dataHolder.AdminNote; }
			set { this.dataHolder.AdminNote = value; }
		}
		/// <summary>
		/// EquipmentMake from exif data
		/// </summary>
		public string EquipmentMake
		{
			get { return dataHolder.EquipmentMake; }
			set { this.dataHolder.EquipmentMake = value; }
		}
		/// <summary>
		/// CameraModel from exif data
		/// </summary>
		public string CameraModel
		{
			get { return dataHolder.CameraModel; }
			set { this.dataHolder.CameraModel = value; }
		}
		/// <summary>
		/// Size of original file in bytes
		/// </summary>
		public int OriginalFileSize
		{
			get { return dataHolder.OriginalFileSize; }
			set { this.dataHolder.OriginalFileSize = value; }
		}
		/// <summary>
		/// Size of master original file in bytes
		/// </summary>
		public int MasterFileSize
		{
			get { return dataHolder.MasterFileSize; }
			set { this.dataHolder.MasterFileSize = value; }
		}
		/// <summary>
		/// Total number of comments
		/// </summary>
		public int TotalComments
		{
			get { return dataHolder.TotalComments; }
			set { this.dataHolder.TotalComments = value; }
		}
		/// <summary>
		/// The date/time of the last post that was posted in this board (including child objects)
		/// </summary>
		public DateTime LastPost
		{
			get { return dataHolder.LastPost; }
			set { this.dataHolder.LastPost = value; }
		}
		/// <summary>
		/// The average date.time of all comments posted in this board (including child objects)
		/// </summary>
		public DateTime AverageCommentDateTime
		{
			get { return dataHolder.AverageCommentDateTime; }
			set { this.dataHolder.AverageCommentDateTime = value; }
		}
		/// <summary>
		/// Filename of cropping image (max side=1000, no logo)
		/// </summary>
		public Guid Crop
		{
			get { return dataHolder.Crop; }
			set { this.dataHolder.Crop = value; }
		}
		/// <summary>
		/// Has the photo been converted to dsi logos?
		/// </summary>
		public bool DsiConverted
		{
			get { return dataHolder.DsiConverted; }
			set { this.dataHolder.DsiConverted = value; }
		}
		/// <summary>
		/// Should this photo go on the Photo of the Week section?
		/// </summary>
		public bool PhotoOfWeek
		{
			get { return dataHolder.PhotoOfWeek; }
			set { this.dataHolder.PhotoOfWeek = value; }
		}
		/// <summary>
		/// The latest 3 photos of the week are displayed... This is the datetime
		/// </summary>
		public DateTime PhotoOfWeekDateTime
		{
			get { return dataHolder.PhotoOfWeekDateTime; }
			set { this.dataHolder.PhotoOfWeekDateTime = value; }
		}
		/// <summary>
		/// This is the caption for the photo of the week section
		/// </summary>
		public string PhotoOfWeekCaption
		{
			get { return dataHolder.PhotoOfWeekCaption; }
			set { this.dataHolder.PhotoOfWeekCaption = value; }
		}
		/// <summary>
		/// Random float less than 1 used for fast pseudo-random ordering
		/// </summary>
		public double RandomNumber
		{
			get { return dataHolder.RandomNumber; }
			set { this.dataHolder.RandomNumber = value; }
		}
		/// <summary>
		/// True if the content has been disabled because of a complaint
		/// </summary>
		public bool ContentDisabled
		{
			get { return dataHolder.ContentDisabled; }
			set { this.dataHolder.ContentDisabled = value; }
		}
		/// <summary>
		/// 1=New, 2=Enabled, 3=Disabled
		/// </summary>
		public int Status
		{
			get { return dataHolder.Status; }
			set { this.dataHolder.Status = value; }
		}
		/// <summary>
		/// Order in the gallery when ordered by datetime
		/// </summary>
		public int GalleryTimeOrder
		{
			get { return dataHolder.GalleryTimeOrder; }
			set { this.dataHolder.GalleryTimeOrder = value; }
		}
		/// <summary>
		/// Order in the gallery when ordered by rating
		/// </summary>
		public int GalleryRatingOrder
		{
			get { return dataHolder.GalleryRatingOrder; }
			set { this.dataHolder.GalleryRatingOrder = value; }
		}
		/// <summary>
		/// Which admin user enabled this photo?
		/// </summary>
		public int EnabledByUsrK
		{
			get { return dataHolder.EnabledByUsrK; }
			set { this.dataHolder.EnabledByUsrK = value; }
		}
		/// <summary>
		/// When was this photo enabled?
		/// </summary>
		public DateTime EnabledDateTime
		{
			get { return dataHolder.EnabledDateTime; }
			set { this.dataHolder.EnabledDateTime = value; }
		}
		/// <summary>
		/// The DateTime of the parent object - e.g. datetime of event, or createdate of the article
		/// </summary>
		public DateTime ParentDateTime
		{
			get { return dataHolder.ParentDateTime; }
			set { this.dataHolder.ParentDateTime = value; }
		}
		/// <summary>
		/// The next photo in the gallery (1)
		/// </summary>
		public int NextPhoto1K
		{
			get { return dataHolder.NextPhoto1K; }
			set { this.dataHolder.NextPhoto1K = value; }
		}
		/// <summary>
		/// The next photo in the gallery (2)
		/// </summary>
		public int NextPhoto2K
		{
			get { return dataHolder.NextPhoto2K; }
			set { this.dataHolder.NextPhoto2K = value; }
		}
		/// <summary>
		/// The next photo in the gallery (3)
		/// </summary>
		public int NextPhoto3K
		{
			get { return dataHolder.NextPhoto3K; }
			set { this.dataHolder.NextPhoto3K = value; }
		}
		/// <summary>
		/// The Previous photo in the gallery (1)
		/// </summary>
		public int PreviousPhoto1K
		{
			get { return dataHolder.PreviousPhoto1K; }
			set { this.dataHolder.PreviousPhoto1K = value; }
		}
		/// <summary>
		/// The Previous photo in the gallery (2)
		/// </summary>
		public int PreviousPhoto2K
		{
			get { return dataHolder.PreviousPhoto2K; }
			set { this.dataHolder.PreviousPhoto2K = value; }
		}
		/// <summary>
		/// The Previous photo in the gallery (3)
		/// </summary>
		public int PreviousPhoto3K
		{
			get { return dataHolder.PreviousPhoto3K; }
			set { this.dataHolder.PreviousPhoto3K = value; }
		}
		/// <summary>
		/// The url fragment - so that the url can be generated without accessing parent database records
		/// </summary>
		public string UrlFragment
		{
			get { return dataHolder.UrlFragment; }
			set { this.dataHolder.UrlFragment = value; }
		}
		/// <summary>
		/// Number of users in this photo - read this before accessing UsrsInThisPhoto UsrSet!
		/// </summary>
		public int UsrCount
		{
			get { return dataHolder.UsrCount; }
			set { this.dataHolder.UsrCount = value; }
		}
		/// <summary>
		/// The first usr that's in this photo
		/// </summary>
		public int FirstUsrK
		{
			get { return dataHolder.FirstUsrK; }
			set { this.dataHolder.FirstUsrK = value; }
		}
		/// <summary>
		/// Has the master Jpg been compressed?
		/// </summary>
		public bool IsMasterCompressed
		{
			get { return dataHolder.IsMasterCompressed; }
			set { this.dataHolder.IsMasterCompressed = value; }
		}
		/// <summary>
		/// Has the processing started?
		/// </summary>
		public bool IsProcessing
		{
			get { return dataHolder.IsProcessing; }
			set { this.dataHolder.IsProcessing = value; }
		}
		/// <summary>
		/// Media type - Image, Video or Audio
		/// </summary>
		public int MediaType
		{
			get { return dataHolder.MediaType; }
			set { this.dataHolder.MediaType = value; }
		}
		/// <summary>
		/// Estimated percentage complete
		/// </summary>
		public int ProcessingProgress
		{
			get { return dataHolder.ProcessingProgress; }
			set { this.dataHolder.ProcessingProgress = value; }
		}
		/// <summary>
		/// When the processing started
		/// </summary>
		public DateTime? ProcessingStartDateTime
		{
			get { return dataHolder.ProcessingStartDateTime; }
			set { this.dataHolder.ProcessingStartDateTime = value; }
		}
		/// <summary>
		/// Guid filename of the 256Kb/sec video FLV
		/// </summary>
		public Guid VideoLo
		{
			get { return dataHolder.VideoLo; }
			set { this.dataHolder.VideoLo = value; }
		}
		/// <summary>
		/// Guid filename of the 512Kb/sec video FLV
		/// </summary>
		public Guid VideoMed
		{
			get { return dataHolder.VideoMed; }
			set { this.dataHolder.VideoMed = value; }
		}
		/// <summary>
		/// Guid filename of the 1024Kb/sec video FLV
		/// </summary>
		public Guid VideoHi
		{
			get { return dataHolder.VideoHi; }
			set { this.dataHolder.VideoHi = value; }
		}
		/// <summary>
		/// Guid filename of the 64Kb/sec audio FLV
		/// </summary>
		public Guid AudioLo
		{
			get { return dataHolder.AudioLo; }
			set { this.dataHolder.AudioLo = value; }
		}
		/// <summary>
		/// Guid filename of the 128Kb/sec audio FLV
		/// </summary>
		public Guid AudioMed
		{
			get { return dataHolder.AudioMed; }
			set { this.dataHolder.AudioMed = value; }
		}
		/// <summary>
		/// Guid filename of the 192Kb/sec audio FLV
		/// </summary>
		public Guid AudioHi
		{
			get { return dataHolder.AudioHi; }
			set { this.dataHolder.AudioHi = value; }
		}
		/// <summary>
		/// Guid filename of the audio master file
		/// </summary>
		public Guid AudioMaster
		{
			get { return dataHolder.AudioMaster; }
			set { this.dataHolder.AudioMaster = value; }
		}
		/// <summary>
		/// Guid filename of the video master file
		/// </summary>
		public Guid VideoMaster
		{
			get { return dataHolder.VideoMaster; }
			set { this.dataHolder.VideoMaster = value; }
		}
		/// <summary>
		/// File extention of the audio master file
		/// </summary>
		public string AudioFileExtention
		{
			get { return dataHolder.AudioFileExtention; }
			set { this.dataHolder.AudioFileExtention = value; }
		}
		/// <summary>
		/// File extention of the video master file
		/// </summary>
		public string VideoFileExtention
		{
			get { return dataHolder.VideoFileExtention; }
			set { this.dataHolder.VideoFileExtention = value; }
		}
		/// <summary>
		/// Video master file size in bytes
		/// </summary>
		public int VideoMasterFileSize
		{
			get { return dataHolder.VideoMasterFileSize; }
			set { this.dataHolder.VideoMasterFileSize = value; }
		}
		/// <summary>
		/// Audio master file size in bytes
		/// </summary>
		public int AudioMasterFileSize
		{
			get { return dataHolder.AudioMasterFileSize; }
			set { this.dataHolder.AudioMasterFileSize = value; }
		}
		/// <summary>
		/// Video frames per second
		/// </summary>
		public double VideoMasterFramerate
		{
			get { return dataHolder.VideoMasterFramerate; }
			set { this.dataHolder.VideoMasterFramerate = value; }
		}
		/// <summary>
		/// Video height in pixels
		/// </summary>
		public int VideoMasterHeight
		{
			get { return dataHolder.VideoMasterHeight; }
			set { this.dataHolder.VideoMasterHeight = value; }
		}
		/// <summary>
		/// Video width in pixels
		/// </summary>
		public int VideoMasterWidth
		{
			get { return dataHolder.VideoMasterWidth; }
			set { this.dataHolder.VideoMasterWidth = value; }
		}
		/// <summary>
		/// Duration of the video in miliseconds
		/// </summary>
		public int VideoDuration
		{
			get { return dataHolder.VideoDuration; }
			set { this.dataHolder.VideoDuration = value; }
		}
		/// <summary>
		/// Duration of the audio in miliseconds
		/// </summary>
		public int AudioDuration
		{
			get { return dataHolder.AudioDuration; }
			set { this.dataHolder.AudioDuration = value; }
		}
		/// <summary>
		/// DateTime that the media processing progress last changed (for abort timeout)
		/// </summary>
		public DateTime? ProcessingLastChange
		{
			get { return dataHolder.ProcessingLastChange; }
			set { this.dataHolder.ProcessingLastChange = value; }
		}
		/// <summary>
		/// Framerate of the 256Kb/sec video FLV
		/// </summary>
		public double VideoLoFramerate
		{
			get { return dataHolder.VideoLoFramerate; }
			set { this.dataHolder.VideoLoFramerate = value; }
		}
		/// <summary>
		/// Framerate of the 512Kb/sec video FLV
		/// </summary>
		public double VideoMedFramerate
		{
			get { return dataHolder.VideoMedFramerate; }
			set { this.dataHolder.VideoMedFramerate = value; }
		}
		/// <summary>
		/// Framerate of the 1024Kb/sec video FLV
		/// </summary>
		public double VideoHiFramerate
		{
			get { return dataHolder.VideoHiFramerate; }
			set { this.dataHolder.VideoHiFramerate = value; }
		}
		/// <summary>
		/// Height of the 256Kb/sec video FLV
		/// </summary>
		public int VideoLoHeight
		{
			get { return dataHolder.VideoLoHeight; }
			set { this.dataHolder.VideoLoHeight = value; }
		}
		/// <summary>
		/// Height of the 512Kb/sec video FLV
		/// </summary>
		public int VideoMedHeight
		{
			get { return dataHolder.VideoMedHeight; }
			set { this.dataHolder.VideoMedHeight = value; }
		}
		/// <summary>
		/// Height of the 1024Kb/sec video FLV
		/// </summary>
		public int VideoHiHeight
		{
			get { return dataHolder.VideoHiHeight; }
			set { this.dataHolder.VideoHiHeight = value; }
		}
		/// <summary>
		/// Width of the 256Kb/sec video FLV
		/// </summary>
		public int VideoLoWidth
		{
			get { return dataHolder.VideoLoWidth; }
			set { this.dataHolder.VideoLoWidth = value; }
		}
		/// <summary>
		/// Width of the 512Kb/sec video FLV
		/// </summary>
		public int VideoMedWidth
		{
			get { return dataHolder.VideoMedWidth; }
			set { this.dataHolder.VideoMedWidth = value; }
		}
		/// <summary>
		/// Width of the 1024Kb/sec video FLV
		/// </summary>
		public int VideoHiWidth
		{
			get { return dataHolder.VideoHiWidth; }
			set { this.dataHolder.VideoHiWidth = value; }
		}
		/// <summary>
		/// How many times has the encoder tried to encode this file?
		/// </summary>
		public int ProcessingAttempts
		{
			get { return dataHolder.ProcessingAttempts; }
			set { this.dataHolder.ProcessingAttempts = value; }
		}
		/// <summary>
		/// How many times has the original image been generated today?
		/// </summary>
		public int OriginalHitsToday
		{
			get { return dataHolder.OriginalHitsToday; }
			set { this.dataHolder.OriginalHitsToday = value; }
		}
		/// <summary>
		/// Original image generator hit counter date
		/// </summary>
		public DateTime OriginalHitsDate
		{
			get { return dataHolder.OriginalHitsDate; }
			set { this.dataHolder.OriginalHitsDate = value; }
		}
		/// <summary>
		/// Which server is processing the video?
		/// </summary>
		public string ProcessingServerName
		{
			get { return dataHolder.ProcessingServerName; }
			set { this.dataHolder.ProcessingServerName = value; }
		}
		/// <summary>
		/// Was this photo taken with a Sony K800i?
		/// </summary>
		public bool IsSonyK800i
		{
			get { return dataHolder.IsSonyK800i; }
			set { this.dataHolder.IsSonyK800i = value; }
		}
		/// <summary>
		/// Is this thread in a caption competition?
		/// </summary>
		public bool IsInCaptionCompetition
		{
			get { return dataHolder.IsInCaptionCompetition; }
			set { this.dataHolder.IsInCaptionCompetition = value; }
		}
		/// <summary>
		/// Rotation transformation when the photo was uploaded
		/// </summary>
		public int Rotate
		{
			get { return dataHolder.Rotate; }
			set { this.dataHolder.Rotate = value; }
		}
		/// <summary>
		/// Location of the temporary uploaded file (in PixMaster)
		/// </summary>
		public Guid UploadTemporary
		{
			get { return dataHolder.UploadTemporary; }
			set { this.dataHolder.UploadTemporary = value; }
		}
		/// <summary>
		/// Extention of the temporary uploaded file
		/// </summary>
		public string UploadTemporaryExtention
		{
			get { return dataHolder.UploadTemporaryExtention; }
			set { this.dataHolder.UploadTemporaryExtention = value; }
		}
		/// <summary>
		/// Enum for photo overlays
		/// </summary>
		public int Overlay
		{
			get { return dataHolder.Overlay; }
			set { this.dataHolder.Overlay = value; }
		}
		/// <summary>
		/// Tags from the uploader control - prior to processing
		/// </summary>
		public string UploadTemporaryTags
		{
			get { return dataHolder.UploadTemporaryTags; }
			set { this.dataHolder.UploadTemporaryTags = value; }
		}
		/// <summary>
		/// Have the PixMaster files been uploaded to Amazon?
		/// </summary>
		public bool DoneAmazonPixMaster
		{
			get { return dataHolder.DoneAmazonPixMaster; }
			set { this.dataHolder.DoneAmazonPixMaster = value; }
		}
		/// <summary>
		/// Was this photo taken with the C902?
		/// </summary>
		public bool IsSonyC902
		{
			get { return dataHolder.IsSonyC902; }
			set { this.dataHolder.IsSonyC902 = value; }
		}
		/// <summary>
		/// Photo of week selected by users
		/// </summary>
		public bool PhotoOfWeekUser
		{
			get { return dataHolder.PhotoOfWeekUser; }
			set { this.dataHolder.PhotoOfWeekUser = value; }
		}
		/// <summary>
		/// Photo of week selected by users caption
		/// </summary>
		public string PhotoOfWeekUserCaption
		{
			get { return dataHolder.PhotoOfWeekUserCaption; }
			set { this.dataHolder.PhotoOfWeekUserCaption = value; }
		}
		/// <summary>
		/// Photo of week selected by users date time
		/// </summary>
		public DateTime? PhotoOfWeekUserDateTime
		{
			get { return dataHolder.PhotoOfWeekUserDateTime; }
			set { this.dataHolder.PhotoOfWeekUserDateTime = value; }
		}
		/// <summary>
		/// Has this photo been blocked from being User Photo of the week?
		/// </summary>
		public bool BlockedFromPhotoOfWeekUser
		{
			get { return dataHolder.BlockedFromPhotoOfWeekUser; }
			set { this.dataHolder.BlockedFromPhotoOfWeekUser = value; }
		}
		/// <summary>
		/// Pic for the front page (600 x 250) image.
		/// </summary>
		public Guid? FrontPagePic
		{
			get { return dataHolder.FrontPagePic; }
			set { this.dataHolder.FrontPagePic = value; }
		}
		/// <summary>
		/// Cropper state for the front page pic.
		/// </summary>
		public string FrontPagePicState
		{
			get { return dataHolder.FrontPagePicState; }
			set { this.dataHolder.FrontPagePicState = value; }
		}
		/// <summary>
		/// CSS class for the front page caption - for colour, alignment etc.
		/// </summary>
		public string FrontPageCaptionClass
		{
			get { return dataHolder.FrontPageCaptionClass; }
			set { this.dataHolder.FrontPageCaptionClass = value; }
		}
		#endregion
		public Photo Photo
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new Photo(K);
					}
					else
					{
						bob = new Photo();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region PhotoSet
	public partial class PhotoSet : BobSet, IEnumerable<Photo>
	{
		public PhotoSet(Query query) : base(query) { }

		public Photo this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new Photo(this);
					((Photo)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (Photo)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new PhotoTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<Photo> ToList()
		{
			List<Photo> list = new List<Photo>();
			foreach (Photo item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<Photo> Members

		public new IEnumerator<Photo> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region PhotoTableDef
	public class PhotoTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "Photo";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "71653456";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return Photo.GetColumnName((Photo.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.Photo;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return true;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return Photo.Columns.K;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			Photo.Columns c = (Photo.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case Photo.Columns.K: ColumnStore[i] = new ColumnDef(c, "K", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey | SqlColumnFlag.AutoNumber, null); break;
					case Photo.Columns.GalleryK: ColumnStore[i] = new ColumnDef(c, "GalleryK", SqlDbType.Int, 0); break;
					case Photo.Columns.EventK: ColumnStore[i] = new ColumnDef(c, "EventK", SqlDbType.Int, 0); break;
					case Photo.Columns.ArticleK: ColumnStore[i] = new ColumnDef(c, "ArticleK", SqlDbType.Int, 0); break;
					case Photo.Columns.UsrK: ColumnStore[i] = new ColumnDef(c, "UsrK", SqlDbType.Int, 0); break;
					case Photo.Columns.MobileK: ColumnStore[i] = new ColumnDef(c, "MobileK", SqlDbType.Int, 0); break;
					case Photo.Columns.Order: ColumnStore[i] = new ColumnDef(c, "Order", SqlDbType.Float, 0.0); break;
					case Photo.Columns.ThreadK: ColumnStore[i] = new ColumnDef(c, "ThreadK", SqlDbType.Int, null); break;
					case Photo.Columns.DateTime: ColumnStore[i] = new ColumnDef(c, "DateTime", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case Photo.Columns.Views: ColumnStore[i] = new ColumnDef(c, "Views", SqlDbType.Int, 0); break;
					case Photo.Columns.AverageCoolRating: ColumnStore[i] = new ColumnDef(c, "AverageCoolRating", SqlDbType.Float, 0.0); break;
					case Photo.Columns.AverageSexyRating: ColumnStore[i] = new ColumnDef(c, "AverageSexyRating", SqlDbType.Float, 0.0); break;
					case Photo.Columns.TotalCoolRatings: ColumnStore[i] = new ColumnDef(c, "TotalCoolRatings", SqlDbType.Int, 0); break;
					case Photo.Columns.TotalSexyRatings: ColumnStore[i] = new ColumnDef(c, "TotalSexyRatings", SqlDbType.Int, 0); break;
					case Photo.Columns.WeightedCoolRating: ColumnStore[i] = new ColumnDef(c, "WeightedCoolRating", SqlDbType.Float, 0.0); break;
					case Photo.Columns.WeightedSexyRating: ColumnStore[i] = new ColumnDef(c, "WeightedSexyRating", SqlDbType.Float, 0.0); break;
					case Photo.Columns.Master: ColumnStore[i] = new ColumnDef(c, "Master", SqlDbType.UniqueIdentifier, Guid.Empty); break;
					case Photo.Columns.Original: ColumnStore[i] = new ColumnDef(c, "Original", SqlDbType.UniqueIdentifier, Guid.Empty); break;
					case Photo.Columns.Icon: ColumnStore[i] = new ColumnDef(c, "Icon", SqlDbType.UniqueIdentifier, Guid.Empty); break;
					case Photo.Columns.Thumb: ColumnStore[i] = new ColumnDef(c, "Thumb", SqlDbType.UniqueIdentifier, Guid.Empty); break;
					case Photo.Columns.Web: ColumnStore[i] = new ColumnDef(c, "Web", SqlDbType.UniqueIdentifier, Guid.Empty); break;
					case Photo.Columns.OriginalWidth: ColumnStore[i] = new ColumnDef(c, "OriginalWidth", SqlDbType.Int, 0); break;
					case Photo.Columns.OriginalHeight: ColumnStore[i] = new ColumnDef(c, "OriginalHeight", SqlDbType.Int, 0); break;
					case Photo.Columns.WebWidth: ColumnStore[i] = new ColumnDef(c, "WebWidth", SqlDbType.Int, 0); break;
					case Photo.Columns.WebHeight: ColumnStore[i] = new ColumnDef(c, "WebHeight", SqlDbType.Int, 0); break;
					case Photo.Columns.ThumbWidth: ColumnStore[i] = new ColumnDef(c, "ThumbWidth", SqlDbType.Int, 0); break;
					case Photo.Columns.ThumbHeight: ColumnStore[i] = new ColumnDef(c, "ThumbHeight", SqlDbType.Int, 0); break;
					case Photo.Columns.IsLandscape: ColumnStore[i] = new ColumnDef(c, "IsLandscape", SqlDbType.Bit, false); break;
					case Photo.Columns.AdminNote: ColumnStore[i] = new ColumnDef(c, "AdminNote", SqlDbType.Text, ""); break;
					case Photo.Columns.EquipmentMake: ColumnStore[i] = new ColumnDef(c, "EquipmentMake", SqlDbType.VarChar, 100, ""); break;
					case Photo.Columns.CameraModel: ColumnStore[i] = new ColumnDef(c, "CameraModel", SqlDbType.VarChar, 100, ""); break;
					case Photo.Columns.OriginalFileSize: ColumnStore[i] = new ColumnDef(c, "OriginalFileSize", SqlDbType.Int, 0); break;
					case Photo.Columns.MasterFileSize: ColumnStore[i] = new ColumnDef(c, "MasterFileSize", SqlDbType.Int, 0); break;
					case Photo.Columns.TotalComments: ColumnStore[i] = new ColumnDef(c, "TotalComments", SqlDbType.Int, 0); break;
					case Photo.Columns.LastPost: ColumnStore[i] = new ColumnDef(c, "LastPost", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case Photo.Columns.AverageCommentDateTime: ColumnStore[i] = new ColumnDef(c, "AverageCommentDateTime", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case Photo.Columns.Crop: ColumnStore[i] = new ColumnDef(c, "Crop", SqlDbType.UniqueIdentifier, Guid.Empty); break;
					case Photo.Columns.DsiConverted: ColumnStore[i] = new ColumnDef(c, "DsiConverted", SqlDbType.Bit, false); break;
					case Photo.Columns.PhotoOfWeek: ColumnStore[i] = new ColumnDef(c, "PhotoOfWeek", SqlDbType.Bit, false); break;
					case Photo.Columns.PhotoOfWeekDateTime: ColumnStore[i] = new ColumnDef(c, "PhotoOfWeekDateTime", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case Photo.Columns.PhotoOfWeekCaption: ColumnStore[i] = new ColumnDef(c, "PhotoOfWeekCaption", SqlDbType.VarChar, 255, ""); break;
					case Photo.Columns.RandomNumber: ColumnStore[i] = new ColumnDef(c, "RandomNumber", SqlDbType.Float, 0.0); break;
					case Photo.Columns.ContentDisabled: ColumnStore[i] = new ColumnDef(c, "ContentDisabled", SqlDbType.Bit, false); break;
					case Photo.Columns.Status: ColumnStore[i] = new ColumnDef(c, "Status", SqlDbType.Int, 0); break;
					case Photo.Columns.GalleryTimeOrder: ColumnStore[i] = new ColumnDef(c, "GalleryTimeOrder", SqlDbType.Int, 0); break;
					case Photo.Columns.GalleryRatingOrder: ColumnStore[i] = new ColumnDef(c, "GalleryRatingOrder", SqlDbType.Int, 0); break;
					case Photo.Columns.EnabledByUsrK: ColumnStore[i] = new ColumnDef(c, "EnabledByUsrK", SqlDbType.Int, 0); break;
					case Photo.Columns.EnabledDateTime: ColumnStore[i] = new ColumnDef(c, "EnabledDateTime", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case Photo.Columns.ParentDateTime: ColumnStore[i] = new ColumnDef(c, "ParentDateTime", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case Photo.Columns.NextPhoto1K: ColumnStore[i] = new ColumnDef(c, "NextPhoto1K", SqlDbType.Int, 0); break;
					case Photo.Columns.NextPhoto2K: ColumnStore[i] = new ColumnDef(c, "NextPhoto2K", SqlDbType.Int, 0); break;
					case Photo.Columns.NextPhoto3K: ColumnStore[i] = new ColumnDef(c, "NextPhoto3K", SqlDbType.Int, 0); break;
					case Photo.Columns.PreviousPhoto1K: ColumnStore[i] = new ColumnDef(c, "PreviousPhoto1K", SqlDbType.Int, 0); break;
					case Photo.Columns.PreviousPhoto2K: ColumnStore[i] = new ColumnDef(c, "PreviousPhoto2K", SqlDbType.Int, 0); break;
					case Photo.Columns.PreviousPhoto3K: ColumnStore[i] = new ColumnDef(c, "PreviousPhoto3K", SqlDbType.Int, 0); break;
					case Photo.Columns.UrlFragment: ColumnStore[i] = new ColumnDef(c, "UrlFragment", SqlDbType.VarChar, 255, ""); break;
					case Photo.Columns.UsrCount: ColumnStore[i] = new ColumnDef(c, "UsrCount", SqlDbType.Int, 0); break;
					case Photo.Columns.FirstUsrK: ColumnStore[i] = new ColumnDef(c, "FirstUsrK", SqlDbType.Int, 0); break;
					case Photo.Columns.IsMasterCompressed: ColumnStore[i] = new ColumnDef(c, "IsMasterCompressed", SqlDbType.Bit, false); break;
					case Photo.Columns.IsProcessing: ColumnStore[i] = new ColumnDef(c, "IsProcessing", SqlDbType.Bit, false); break;
					case Photo.Columns.MediaType: ColumnStore[i] = new ColumnDef(c, "MediaType", SqlDbType.Int, 0); break;
					case Photo.Columns.ProcessingProgress: ColumnStore[i] = new ColumnDef(c, "ProcessingProgress", SqlDbType.Int, 0); break;
					case Photo.Columns.ProcessingStartDateTime: ColumnStore[i] = new ColumnDef(c, "ProcessingStartDateTime", SqlDbType.DateTime, 16, null); break;
					case Photo.Columns.VideoLo: ColumnStore[i] = new ColumnDef(c, "VideoLo", SqlDbType.UniqueIdentifier, Guid.Empty); break;
					case Photo.Columns.VideoMed: ColumnStore[i] = new ColumnDef(c, "VideoMed", SqlDbType.UniqueIdentifier, Guid.Empty); break;
					case Photo.Columns.VideoHi: ColumnStore[i] = new ColumnDef(c, "VideoHi", SqlDbType.UniqueIdentifier, Guid.Empty); break;
					case Photo.Columns.AudioLo: ColumnStore[i] = new ColumnDef(c, "AudioLo", SqlDbType.UniqueIdentifier, Guid.Empty); break;
					case Photo.Columns.AudioMed: ColumnStore[i] = new ColumnDef(c, "AudioMed", SqlDbType.UniqueIdentifier, Guid.Empty); break;
					case Photo.Columns.AudioHi: ColumnStore[i] = new ColumnDef(c, "AudioHi", SqlDbType.UniqueIdentifier, Guid.Empty); break;
					case Photo.Columns.AudioMaster: ColumnStore[i] = new ColumnDef(c, "AudioMaster", SqlDbType.UniqueIdentifier, Guid.Empty); break;
					case Photo.Columns.VideoMaster: ColumnStore[i] = new ColumnDef(c, "VideoMaster", SqlDbType.UniqueIdentifier, Guid.Empty); break;
					case Photo.Columns.AudioFileExtention: ColumnStore[i] = new ColumnDef(c, "AudioFileExtention", SqlDbType.VarChar, 4, ""); break;
					case Photo.Columns.VideoFileExtention: ColumnStore[i] = new ColumnDef(c, "VideoFileExtention", SqlDbType.VarChar, 4, ""); break;
					case Photo.Columns.VideoMasterFileSize: ColumnStore[i] = new ColumnDef(c, "VideoMasterFileSize", SqlDbType.Int, 0); break;
					case Photo.Columns.AudioMasterFileSize: ColumnStore[i] = new ColumnDef(c, "AudioMasterFileSize", SqlDbType.Int, 0); break;
					case Photo.Columns.VideoMasterFramerate: ColumnStore[i] = new ColumnDef(c, "VideoMasterFramerate", SqlDbType.Float, 0.0); break;
					case Photo.Columns.VideoMasterHeight: ColumnStore[i] = new ColumnDef(c, "VideoMasterHeight", SqlDbType.Int, 0); break;
					case Photo.Columns.VideoMasterWidth: ColumnStore[i] = new ColumnDef(c, "VideoMasterWidth", SqlDbType.Int, 0); break;
					case Photo.Columns.VideoDuration: ColumnStore[i] = new ColumnDef(c, "VideoDuration", SqlDbType.Int, 0); break;
					case Photo.Columns.AudioDuration: ColumnStore[i] = new ColumnDef(c, "AudioDuration", SqlDbType.Int, 0); break;
					case Photo.Columns.ProcessingLastChange: ColumnStore[i] = new ColumnDef(c, "ProcessingLastChange", SqlDbType.DateTime, 16, null); break;
					case Photo.Columns.VideoLoFramerate: ColumnStore[i] = new ColumnDef(c, "VideoLoFramerate", SqlDbType.Float, 0.0); break;
					case Photo.Columns.VideoMedFramerate: ColumnStore[i] = new ColumnDef(c, "VideoMedFramerate", SqlDbType.Float, 0.0); break;
					case Photo.Columns.VideoHiFramerate: ColumnStore[i] = new ColumnDef(c, "VideoHiFramerate", SqlDbType.Float, 0.0); break;
					case Photo.Columns.VideoLoHeight: ColumnStore[i] = new ColumnDef(c, "VideoLoHeight", SqlDbType.Int, 0); break;
					case Photo.Columns.VideoMedHeight: ColumnStore[i] = new ColumnDef(c, "VideoMedHeight", SqlDbType.Int, 0); break;
					case Photo.Columns.VideoHiHeight: ColumnStore[i] = new ColumnDef(c, "VideoHiHeight", SqlDbType.Int, 0); break;
					case Photo.Columns.VideoLoWidth: ColumnStore[i] = new ColumnDef(c, "VideoLoWidth", SqlDbType.Int, 0); break;
					case Photo.Columns.VideoMedWidth: ColumnStore[i] = new ColumnDef(c, "VideoMedWidth", SqlDbType.Int, 0); break;
					case Photo.Columns.VideoHiWidth: ColumnStore[i] = new ColumnDef(c, "VideoHiWidth", SqlDbType.Int, 0); break;
					case Photo.Columns.ProcessingAttempts: ColumnStore[i] = new ColumnDef(c, "ProcessingAttempts", SqlDbType.Int, 0); break;
					case Photo.Columns.OriginalHitsToday: ColumnStore[i] = new ColumnDef(c, "OriginalHitsToday", SqlDbType.Int, 0); break;
					case Photo.Columns.OriginalHitsDate: ColumnStore[i] = new ColumnDef(c, "OriginalHitsDate", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case Photo.Columns.ProcessingServerName: ColumnStore[i] = new ColumnDef(c, "ProcessingServerName", SqlDbType.VarChar, ""); break;
					case Photo.Columns.IsSonyK800i: ColumnStore[i] = new ColumnDef(c, "IsSonyK800i", SqlDbType.Bit, false); break;
					case Photo.Columns.IsInCaptionCompetition: ColumnStore[i] = new ColumnDef(c, "IsInCaptionCompetition", SqlDbType.Bit, false); break;
					case Photo.Columns.Rotate: ColumnStore[i] = new ColumnDef(c, "Rotate", SqlDbType.Int, 0); break;
					case Photo.Columns.UploadTemporary: ColumnStore[i] = new ColumnDef(c, "UploadTemporary", SqlDbType.UniqueIdentifier, Guid.Empty); break;
					case Photo.Columns.UploadTemporaryExtention: ColumnStore[i] = new ColumnDef(c, "UploadTemporaryExtention", SqlDbType.VarChar, 10, ""); break;
					case Photo.Columns.Overlay: ColumnStore[i] = new ColumnDef(c, "Overlay", SqlDbType.Int, 0); break;
					case Photo.Columns.UploadTemporaryTags: ColumnStore[i] = new ColumnDef(c, "UploadTemporaryTags", SqlDbType.VarChar, 512, ""); break;
					case Photo.Columns.DoneAmazonPixMaster: ColumnStore[i] = new ColumnDef(c, "DoneAmazonPixMaster", SqlDbType.Bit, false); break;
					case Photo.Columns.IsSonyC902: ColumnStore[i] = new ColumnDef(c, "IsSonyC902", SqlDbType.Bit, false); break;
					case Photo.Columns.PhotoOfWeekUser: ColumnStore[i] = new ColumnDef(c, "PhotoOfWeekUser", SqlDbType.Bit, false); break;
					case Photo.Columns.PhotoOfWeekUserCaption: ColumnStore[i] = new ColumnDef(c, "PhotoOfWeekUserCaption", SqlDbType.VarChar, 200, null); break;
					case Photo.Columns.PhotoOfWeekUserDateTime: ColumnStore[i] = new ColumnDef(c, "PhotoOfWeekUserDateTime", SqlDbType.DateTime, 16, null); break;
					case Photo.Columns.BlockedFromPhotoOfWeekUser: ColumnStore[i] = new ColumnDef(c, "BlockedFromPhotoOfWeekUser", SqlDbType.Bit, false); break;
					case Photo.Columns.FrontPagePic: ColumnStore[i] = new ColumnDef(c, "FrontPagePic", SqlDbType.UniqueIdentifier, null); break;
					case Photo.Columns.FrontPagePicState: ColumnStore[i] = new ColumnDef(c, "FrontPagePicState", SqlDbType.VarChar, 100, null); break;
					case Photo.Columns.FrontPageCaptionClass: ColumnStore[i] = new ColumnDef(c, "FrontPageCaptionClass", SqlDbType.VarChar, null); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(Photo.Columns.K);
						InitColumn(Photo.Columns.GalleryK);
						InitColumn(Photo.Columns.EventK);
						InitColumn(Photo.Columns.ArticleK);
						InitColumn(Photo.Columns.UsrK);
						InitColumn(Photo.Columns.MobileK);
						InitColumn(Photo.Columns.Order);
						InitColumn(Photo.Columns.ThreadK);
						InitColumn(Photo.Columns.DateTime);
						InitColumn(Photo.Columns.Views);
						InitColumn(Photo.Columns.AverageCoolRating);
						InitColumn(Photo.Columns.AverageSexyRating);
						InitColumn(Photo.Columns.TotalCoolRatings);
						InitColumn(Photo.Columns.TotalSexyRatings);
						InitColumn(Photo.Columns.WeightedCoolRating);
						InitColumn(Photo.Columns.WeightedSexyRating);
						InitColumn(Photo.Columns.Master);
						InitColumn(Photo.Columns.Original);
						InitColumn(Photo.Columns.Icon);
						InitColumn(Photo.Columns.Thumb);
						InitColumn(Photo.Columns.Web);
						InitColumn(Photo.Columns.OriginalWidth);
						InitColumn(Photo.Columns.OriginalHeight);
						InitColumn(Photo.Columns.WebWidth);
						InitColumn(Photo.Columns.WebHeight);
						InitColumn(Photo.Columns.ThumbWidth);
						InitColumn(Photo.Columns.ThumbHeight);
						InitColumn(Photo.Columns.IsLandscape);
						InitColumn(Photo.Columns.AdminNote);
						InitColumn(Photo.Columns.EquipmentMake);
						InitColumn(Photo.Columns.CameraModel);
						InitColumn(Photo.Columns.OriginalFileSize);
						InitColumn(Photo.Columns.MasterFileSize);
						InitColumn(Photo.Columns.TotalComments);
						InitColumn(Photo.Columns.LastPost);
						InitColumn(Photo.Columns.AverageCommentDateTime);
						InitColumn(Photo.Columns.Crop);
						InitColumn(Photo.Columns.DsiConverted);
						InitColumn(Photo.Columns.PhotoOfWeek);
						InitColumn(Photo.Columns.PhotoOfWeekDateTime);
						InitColumn(Photo.Columns.PhotoOfWeekCaption);
						InitColumn(Photo.Columns.RandomNumber);
						InitColumn(Photo.Columns.ContentDisabled);
						InitColumn(Photo.Columns.Status);
						InitColumn(Photo.Columns.GalleryTimeOrder);
						InitColumn(Photo.Columns.GalleryRatingOrder);
						InitColumn(Photo.Columns.EnabledByUsrK);
						InitColumn(Photo.Columns.EnabledDateTime);
						InitColumn(Photo.Columns.ParentDateTime);
						InitColumn(Photo.Columns.NextPhoto1K);
						InitColumn(Photo.Columns.NextPhoto2K);
						InitColumn(Photo.Columns.NextPhoto3K);
						InitColumn(Photo.Columns.PreviousPhoto1K);
						InitColumn(Photo.Columns.PreviousPhoto2K);
						InitColumn(Photo.Columns.PreviousPhoto3K);
						InitColumn(Photo.Columns.UrlFragment);
						InitColumn(Photo.Columns.UsrCount);
						InitColumn(Photo.Columns.FirstUsrK);
						InitColumn(Photo.Columns.IsMasterCompressed);
						InitColumn(Photo.Columns.IsProcessing);
						InitColumn(Photo.Columns.MediaType);
						InitColumn(Photo.Columns.ProcessingProgress);
						InitColumn(Photo.Columns.ProcessingStartDateTime);
						InitColumn(Photo.Columns.VideoLo);
						InitColumn(Photo.Columns.VideoMed);
						InitColumn(Photo.Columns.VideoHi);
						InitColumn(Photo.Columns.AudioLo);
						InitColumn(Photo.Columns.AudioMed);
						InitColumn(Photo.Columns.AudioHi);
						InitColumn(Photo.Columns.AudioMaster);
						InitColumn(Photo.Columns.VideoMaster);
						InitColumn(Photo.Columns.AudioFileExtention);
						InitColumn(Photo.Columns.VideoFileExtention);
						InitColumn(Photo.Columns.VideoMasterFileSize);
						InitColumn(Photo.Columns.AudioMasterFileSize);
						InitColumn(Photo.Columns.VideoMasterFramerate);
						InitColumn(Photo.Columns.VideoMasterHeight);
						InitColumn(Photo.Columns.VideoMasterWidth);
						InitColumn(Photo.Columns.VideoDuration);
						InitColumn(Photo.Columns.AudioDuration);
						InitColumn(Photo.Columns.ProcessingLastChange);
						InitColumn(Photo.Columns.VideoLoFramerate);
						InitColumn(Photo.Columns.VideoMedFramerate);
						InitColumn(Photo.Columns.VideoHiFramerate);
						InitColumn(Photo.Columns.VideoLoHeight);
						InitColumn(Photo.Columns.VideoMedHeight);
						InitColumn(Photo.Columns.VideoHiHeight);
						InitColumn(Photo.Columns.VideoLoWidth);
						InitColumn(Photo.Columns.VideoMedWidth);
						InitColumn(Photo.Columns.VideoHiWidth);
						InitColumn(Photo.Columns.ProcessingAttempts);
						InitColumn(Photo.Columns.OriginalHitsToday);
						InitColumn(Photo.Columns.OriginalHitsDate);
						InitColumn(Photo.Columns.ProcessingServerName);
						InitColumn(Photo.Columns.IsSonyK800i);
						InitColumn(Photo.Columns.IsInCaptionCompetition);
						InitColumn(Photo.Columns.Rotate);
						InitColumn(Photo.Columns.UploadTemporary);
						InitColumn(Photo.Columns.UploadTemporaryExtention);
						InitColumn(Photo.Columns.Overlay);
						InitColumn(Photo.Columns.UploadTemporaryTags);
						InitColumn(Photo.Columns.DoneAmazonPixMaster);
						InitColumn(Photo.Columns.IsSonyC902);
						InitColumn(Photo.Columns.PhotoOfWeekUser);
						InitColumn(Photo.Columns.PhotoOfWeekUserCaption);
						InitColumn(Photo.Columns.PhotoOfWeekUserDateTime);
						InitColumn(Photo.Columns.BlockedFromPhotoOfWeekUser);
						InitColumn(Photo.Columns.FrontPagePic);
						InitColumn(Photo.Columns.FrontPagePicState);
						InitColumn(Photo.Columns.FrontPageCaptionClass);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region PhotoReview
	/// <summary>
	/// Rating of a photo
	/// </summary>
	public partial class PhotoReview : Model.Entities.PhotoReview, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// The primary key
			/// </summary>
			K = 0x00440001,
			/// <summary>
			/// Link to one user - the user that submitted the review
			/// </summary>
			UsrK = 0x00440002,
			/// <summary>
			/// Link to one photo
			/// </summary>
			PhotoK = 0x00440003,
			/// <summary>
			/// Date/time the review was added
			/// </summary>
			DateTime = 0x00440004,
			/// <summary>
			/// Rate the photo 0-9 on...
			/// </summary>
			Rating = 0x00440005,
			/// <summary>
			/// 1=Cool, 2=Sexy, 3=Sexy (any more?)
			/// </summary>
			RatingType = 0x00440006,
		}
		#endregion
		public static string GetColumnName(PhotoReview.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case PhotoReview.Columns.K: return "K";
						case PhotoReview.Columns.UsrK: return "UsrK";
						case PhotoReview.Columns.PhotoK: return "PhotoK";
						case PhotoReview.Columns.DateTime: return "DateTime";
						case PhotoReview.Columns.Rating: return "Rating";
						case PhotoReview.Columns.RatingType: return "RatingType";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(PhotoReview.Columns columnEnum)
		{
			switch (columnEnum)
			{
										default: return false;
			}
		}


		#region Common
 
		public PhotoReview(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);  }
		public PhotoReview()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.PhotoReview);
		}
		public PhotoReview(BobSet bs)
		{
			this.Bob = new Bob(bs.Table, bs);
		}
		public PhotoReview(int PhotoReviewK, IBob Parent, object Column)
			: this()
		{
			Bob.GetBobFromParent(PhotoReviewK, Parent.Bob, Column, TablesEnum.PhotoReview);
		}
		public PhotoReview(int PhotoReviewK)
			: this()
		{
			Bob.GetBobFromPrimaryKey(PhotoReviewK);
		}
		#endregion

	}
	#endregion
	#region PhotoReviewTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region PhotoReview
	/// <summary>
	/// Rating of a photo
	/// </summary>
	[Serializable]
	public partial class PhotoReview 
	{
		
		#region Simple members
		/// <summary>
		/// The primary key
		/// </summary>
		public override int K
		{
			get { return (int)this[PhotoReview.Columns.K] as int? ?? 0 ; }
			set { this[PhotoReview.Columns.K] = value; }
		}
		/// <summary>
		/// Link to one user - the user that submitted the review
		/// </summary>
		public override int UsrK
		{
			get { return (int)this[PhotoReview.Columns.UsrK]; }
			set { this[PhotoReview.Columns.UsrK] = value; }
		}
		/// <summary>
		/// Link to one photo
		/// </summary>
		public override int PhotoK
		{
			get { return (int)this[PhotoReview.Columns.PhotoK]; }
			set { this[PhotoReview.Columns.PhotoK] = value; }
		}
		/// <summary>
		/// Date/time the review was added
		/// </summary>
		public override DateTime DateTime
		{
			get { return (DateTime)this[PhotoReview.Columns.DateTime]; }
			set { this[PhotoReview.Columns.DateTime] = value; }
		}
		/// <summary>
		/// Rate the photo 0-9 on...
		/// </summary>
		public override int Rating
		{
			get { return (int)this[PhotoReview.Columns.Rating]; }
			set { this[PhotoReview.Columns.Rating] = value; }
		}
		/// <summary>
		/// 1=Cool, 2=Sexy, 3=Sexy (any more?)
		/// </summary>
		public override int RatingType
		{
			get { return (int)this[PhotoReview.Columns.RatingType]; }
			set { this[PhotoReview.Columns.RatingType] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildPhotoReviews
	{
		CachedSqlSelect<PhotoReview> ChildPhotoReviews();
		CachedSqlSelect<PhotoReview> ChildPhotoReviews(Q where);
		CachedSqlSelect<PhotoReview> ChildPhotoReviews(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<PhotoReview> ChildPhotoReviews(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class PhotoReview 
		{
		}

	#region PhotoReviewDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region PhotoReviewDataHolder
	/// <summary>
	/// Rating of a photoDataHolder
	/// </summary>
	[Serializable]
	public partial class PhotoReviewDataHolder : DataHolder<PhotoReview>
	{
		PhotoReview dataHolder;
		[NonSerializedAttribute] PhotoReview bob;

		public PhotoReviewDataHolder()
		{
			this.dataHolder = new PhotoReview();
		}
		
		void CopyValues(PhotoReview source, PhotoReview destination)
		{
			destination[Bobs.PhotoReview.Columns.K] = source[Bobs.PhotoReview.Columns.K];
			destination[Bobs.PhotoReview.Columns.UsrK] = source[Bobs.PhotoReview.Columns.UsrK];
			destination[Bobs.PhotoReview.Columns.PhotoK] = source[Bobs.PhotoReview.Columns.PhotoK];
			destination[Bobs.PhotoReview.Columns.DateTime] = source[Bobs.PhotoReview.Columns.DateTime];
			destination[Bobs.PhotoReview.Columns.Rating] = source[Bobs.PhotoReview.Columns.Rating];
			destination[Bobs.PhotoReview.Columns.RatingType] = source[Bobs.PhotoReview.Columns.RatingType];
		}
		
		public PhotoReviewDataHolder(PhotoReview bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// The primary key
		/// </summary>
		public int K
		{
			get { return dataHolder.K; }
			set { this.dataHolder.K = value; }
		}
		/// <summary>
		/// Link to one user - the user that submitted the review
		/// </summary>
		public int UsrK
		{
			get { return dataHolder.UsrK; }
			set { this.dataHolder.UsrK = value; }
		}
		/// <summary>
		/// Link to one photo
		/// </summary>
		public int PhotoK
		{
			get { return dataHolder.PhotoK; }
			set { this.dataHolder.PhotoK = value; }
		}
		/// <summary>
		/// Date/time the review was added
		/// </summary>
		public DateTime DateTime
		{
			get { return dataHolder.DateTime; }
			set { this.dataHolder.DateTime = value; }
		}
		/// <summary>
		/// Rate the photo 0-9 on...
		/// </summary>
		public int Rating
		{
			get { return dataHolder.Rating; }
			set { this.dataHolder.Rating = value; }
		}
		/// <summary>
		/// 1=Cool, 2=Sexy, 3=Sexy (any more?)
		/// </summary>
		public int RatingType
		{
			get { return dataHolder.RatingType; }
			set { this.dataHolder.RatingType = value; }
		}
		#endregion
		public PhotoReview PhotoReview
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new PhotoReview(K);
					}
					else
					{
						bob = new PhotoReview();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region PhotoReviewSet
	public partial class PhotoReviewSet : BobSet, IEnumerable<PhotoReview>
	{
		public PhotoReviewSet(Query query) : base(query) { }

		public PhotoReview this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new PhotoReview(this);
					((PhotoReview)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (PhotoReview)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new PhotoReviewTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<PhotoReview> ToList()
		{
			List<PhotoReview> list = new List<PhotoReview>();
			foreach (PhotoReview item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<PhotoReview> Members

		public new IEnumerator<PhotoReview> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region PhotoReviewTableDef
	public class PhotoReviewTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "PhotoReview";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "BAD94C7E";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return PhotoReview.GetColumnName((PhotoReview.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.PhotoReview;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return true;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return PhotoReview.Columns.K;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			PhotoReview.Columns c = (PhotoReview.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case PhotoReview.Columns.K: ColumnStore[i] = new ColumnDef(c, "K", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey | SqlColumnFlag.AutoNumber, null); break;
					case PhotoReview.Columns.UsrK: ColumnStore[i] = new ColumnDef(c, "UsrK", SqlDbType.Int, 0); break;
					case PhotoReview.Columns.PhotoK: ColumnStore[i] = new ColumnDef(c, "PhotoK", SqlDbType.Int, 0); break;
					case PhotoReview.Columns.DateTime: ColumnStore[i] = new ColumnDef(c, "DateTime", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case PhotoReview.Columns.Rating: ColumnStore[i] = new ColumnDef(c, "Rating", SqlDbType.Int, 0); break;
					case PhotoReview.Columns.RatingType: ColumnStore[i] = new ColumnDef(c, "RatingType", SqlDbType.Int, 0); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(PhotoReview.Columns.K);
						InitColumn(PhotoReview.Columns.UsrK);
						InitColumn(PhotoReview.Columns.PhotoK);
						InitColumn(PhotoReview.Columns.DateTime);
						InitColumn(PhotoReview.Columns.Rating);
						InitColumn(PhotoReview.Columns.RatingType);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region Place
	/// <summary>
	/// e.g. Southampton, London
	/// </summary>
	public partial class Place : Model.Entities.Place, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// The primary key
			/// </summary>
			K = 0x00450001,
			/// <summary>
			/// Place name
			/// </summary>
			Name = 0x00450002,
			/// <summary>
			/// Unique place name e.g. Springfield TX
			/// </summary>
			UniqueName = 0x00450003,
			/// <summary>
			/// Population of the place in 1000's
			/// </summary>
			Population = 0x00450004,
			/// <summary>
			/// Latitude (degrees north)
			/// </summary>
			LatitudeDegreesNorth = 0x00450005,
			/// <summary>
			/// Longitude (degrees west)
			/// </summary>
			LongitudeDegreesWest = 0x00450006,
			/// <summary>
			/// Country (1=England, 2=Scotland, 3=Wales, 4=Northern Ireland)
			/// </summary>
			SubCountry = 0x00450007,
			/// <summary>
			/// Link to the country table
			/// </summary>
			CountryK = 0x00450008,
			/// <summary>
			/// Whether the place is displayed in the full place list.
			/// </summary>
			Enabled = 0x00450009,
			/// <summary>
			/// Cropped image between 75*75 and 100*100
			/// </summary>
			Pic = 0x0045000a,
			/// <summary>
			/// Details displayed on the place page
			/// </summary>
			DetailsHtml = 0x0045000b,
			/// <summary>
			/// The total number of events
			/// </summary>
			TotalEvents = 0x0045000c,
			/// <summary>
			/// The total number of comments
			/// </summary>
			TotalComments = 0x0045000d,
			/// <summary>
			/// The date/time of the last post that was posted in this board (including child objects)
			/// </summary>
			LastPost = 0x0045000e,
			/// <summary>
			/// The average date.time of all comments posted in this board (including child objects)
			/// </summary>
			AverageCommentDateTime = 0x0045000f,
			/// <summary>
			/// Appended to end of FriendlyName. Usually US State abbreviation.
			/// </summary>
			RegionAbbreviation = 0x00450010,
			/// <summary>
			/// Link to Region table
			/// </summary>
			RegionK = 0x00450011,
			/// <summary>
			/// Any regional place code (e.g. US FIPS code)
			/// </summary>
			Code = 0x00450012,
			/// <summary>
			/// Place type - e.g. US CDP/Town/City
			/// </summary>
			Type = 0x00450013,
			/// <summary>
			/// Is this the capital of the region?
			/// </summary>
			IsRegionCapital = 0x00450014,
			/// <summary>
			/// Is this the capital of the country?
			/// </summary>
			IsCountryCapital = 0x00450015,
			/// <summary>
			/// Leave this place off when drawing the map? (Usefull for outlying islands)
			/// </summary>
			ExcludeFromMap = 0x00450016,
			/// <summary>
			/// Name used in the URL...
			/// </summary>
			UrlName = 0x00450017,
			/// <summary>
			/// State var used to reconstruct cropper when re-cropping
			/// </summary>
			PicState = 0x00450018,
			/// <summary>
			/// The Photo that was used to create the Pic.
			/// </summary>
			PicPhotoK = 0x00450019,
			/// <summary>
			/// The Misc that was used to create the Pic.
			/// </summary>
			PicMiscK = 0x0045001a,
			/// <summary>
			/// The url fragment - so that the url can be generated without accessing parent database records
			/// </summary>
			UrlFragment = 0x0045001b,
			/// <summary>
			/// FeatureId in MeridianWorldData database
			/// </summary>
			MeridianFeatureId = 0x0045001c,
			/// <summary>
			/// Latitude
			/// </summary>
			Lat = 0x0045001d,
			/// <summary>
			/// Longitude
			/// </summary>
			Lon = 0x0045001e,
		}
		#endregion
		public static string GetColumnName(Place.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case Place.Columns.K: return "K";
						case Place.Columns.Name: return "Name";
						case Place.Columns.UniqueName: return "UniqueName";
						case Place.Columns.Population: return "Population";
						case Place.Columns.LatitudeDegreesNorth: return "LatitudeDegreesNorth";
						case Place.Columns.LongitudeDegreesWest: return "LongitudeDegreesWest";
						case Place.Columns.SubCountry: return "SubCountry";
						case Place.Columns.CountryK: return "CountryK";
						case Place.Columns.Enabled: return "Enabled";
						case Place.Columns.Pic: return "Pic";
						case Place.Columns.DetailsHtml: return "DetailsHtml";
						case Place.Columns.TotalEvents: return "TotalEvents";
						case Place.Columns.TotalComments: return "TotalComments";
						case Place.Columns.LastPost: return "LastPost";
						case Place.Columns.AverageCommentDateTime: return "AverageCommentDateTime";
						case Place.Columns.RegionAbbreviation: return "RegionAbbreviation";
						case Place.Columns.RegionK: return "RegionK";
						case Place.Columns.Code: return "Code";
						case Place.Columns.Type: return "Type";
						case Place.Columns.IsRegionCapital: return "IsRegionCapital";
						case Place.Columns.IsCountryCapital: return "IsCountryCapital";
						case Place.Columns.ExcludeFromMap: return "ExcludeFromMap";
						case Place.Columns.UrlName: return "UrlName";
						case Place.Columns.PicState: return "PicState";
						case Place.Columns.PicPhotoK: return "PicPhotoK";
						case Place.Columns.PicMiscK: return "PicMiscK";
						case Place.Columns.UrlFragment: return "UrlFragment";
						case Place.Columns.MeridianFeatureId: return "MeridianFeatureId";
						case Place.Columns.Lat: return "Lat";
						case Place.Columns.Lon: return "Lon";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(Place.Columns columnEnum)
		{
			switch (columnEnum)
			{
																																		default: return false;
			}
		}


		#region Common
 
		public Place(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);  }
		public Place()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.Place);
		}
		public Place(BobSet bs)
		{
			this.Bob = new Bob(bs.Table, bs);
		}
		public Place(int PlaceK, IBob Parent, object Column)
			: this()
		{
			Bob.GetBobFromParent(PlaceK, Parent.Bob, Column, TablesEnum.Place);
		}
		public Place(int PlaceK)
			: this()
		{
			Bob.GetBobFromPrimaryKey(PlaceK);
		}
		#endregion

	}
	#endregion
	#region PlaceTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region Place
	/// <summary>
	/// e.g. Southampton, London
	/// </summary>
	[Serializable]
	public partial class Place 
	{
		
		#region Simple members
		/// <summary>
		/// The primary key
		/// </summary>
		public override int K
		{
			get { return (int)this[Place.Columns.K] as int? ?? 0 ; }
			set { this[Place.Columns.K] = value; }
		}
		/// <summary>
		/// Place name
		/// </summary>
		public override string Name
		{
			get { return (string)this[Place.Columns.Name]; }
			set { this[Place.Columns.Name] = value; }
		}
		/// <summary>
		/// Unique place name e.g. Springfield TX
		/// </summary>
		public override string UniqueName
		{
			get { return (string)this[Place.Columns.UniqueName]; }
			set { this[Place.Columns.UniqueName] = value; }
		}
		/// <summary>
		/// Population of the place in 1000's
		/// </summary>
		public override double Population
		{
			get { return (double)this[Place.Columns.Population]; }
			set { this[Place.Columns.Population] = value; }
		}
		/// <summary>
		/// Latitude (degrees north)
		/// </summary>
		public override double LatitudeDegreesNorth
		{
			get { return (double)this[Place.Columns.LatitudeDegreesNorth]; }
			set { this[Place.Columns.LatitudeDegreesNorth] = value; }
		}
		/// <summary>
		/// Longitude (degrees west)
		/// </summary>
		public override double LongitudeDegreesWest
		{
			get { return (double)this[Place.Columns.LongitudeDegreesWest]; }
			set { this[Place.Columns.LongitudeDegreesWest] = value; }
		}
		/// <summary>
		/// Country (1=England, 2=Scotland, 3=Wales, 4=Northern Ireland)
		/// </summary>
		public override int SubCountry
		{
			get { return (int)this[Place.Columns.SubCountry]; }
			set { this[Place.Columns.SubCountry] = value; }
		}
		/// <summary>
		/// Link to the country table
		/// </summary>
		public override int CountryK
		{
			get { return (int)this[Place.Columns.CountryK]; }
			set { this[Place.Columns.CountryK] = value; }
		}
		/// <summary>
		/// Whether the place is displayed in the full place list.
		/// </summary>
		public override bool Enabled
		{
			get { return (bool)this[Place.Columns.Enabled]; }
			set { this[Place.Columns.Enabled] = value; }
		}
		/// <summary>
		/// Cropped image between 75*75 and 100*100
		/// </summary>
		public Guid	Pic
		{
			get{ return Cambro.Misc.Db.GuidConvertor(this[Place.Columns.Pic]);}		
			set{ this[Place.Columns.Pic] = new System.Data.SqlTypes.SqlGuid(value);}
		}
		/// <summary>
		/// Details displayed on the place page
		/// </summary>
		public override string DetailsHtml
		{
			get { return (string)this[Place.Columns.DetailsHtml]; }
			set { this[Place.Columns.DetailsHtml] = value; }
		}
		/// <summary>
		/// The total number of events
		/// </summary>
		public override int TotalEvents
		{
			get { return (int)this[Place.Columns.TotalEvents]; }
			set { this[Place.Columns.TotalEvents] = value; }
		}
		/// <summary>
		/// The total number of comments
		/// </summary>
		public override int TotalComments
		{
			get { return (int)this[Place.Columns.TotalComments]; }
			set { this[Place.Columns.TotalComments] = value; }
		}
		/// <summary>
		/// The date/time of the last post that was posted in this board (including child objects)
		/// </summary>
		public override DateTime LastPost
		{
			get { return (DateTime)this[Place.Columns.LastPost]; }
			set { this[Place.Columns.LastPost] = value; }
		}
		/// <summary>
		/// The average date.time of all comments posted in this board (including child objects)
		/// </summary>
		public override DateTime AverageCommentDateTime
		{
			get { return (DateTime)this[Place.Columns.AverageCommentDateTime]; }
			set { this[Place.Columns.AverageCommentDateTime] = value; }
		}
		/// <summary>
		/// Appended to end of FriendlyName. Usually US State abbreviation.
		/// </summary>
		public override string RegionAbbreviation
		{
			get { return (string)this[Place.Columns.RegionAbbreviation]; }
			set { this[Place.Columns.RegionAbbreviation] = value; }
		}
		/// <summary>
		/// Link to Region table
		/// </summary>
		public override int RegionK
		{
			get { return (int)this[Place.Columns.RegionK]; }
			set { this[Place.Columns.RegionK] = value; }
		}
		/// <summary>
		/// Any regional place code (e.g. US FIPS code)
		/// </summary>
		public override string Code
		{
			get { return (string)this[Place.Columns.Code]; }
			set { this[Place.Columns.Code] = value; }
		}
		/// <summary>
		/// Place type - e.g. US CDP/Town/City
		/// </summary>
		public override string Type
		{
			get { return (string)this[Place.Columns.Type]; }
			set { this[Place.Columns.Type] = value; }
		}
		/// <summary>
		/// Is this the capital of the region?
		/// </summary>
		public override bool IsRegionCapital
		{
			get { return (bool)this[Place.Columns.IsRegionCapital]; }
			set { this[Place.Columns.IsRegionCapital] = value; }
		}
		/// <summary>
		/// Is this the capital of the country?
		/// </summary>
		public override bool IsCountryCapital
		{
			get { return (bool)this[Place.Columns.IsCountryCapital]; }
			set { this[Place.Columns.IsCountryCapital] = value; }
		}
		/// <summary>
		/// Leave this place off when drawing the map? (Usefull for outlying islands)
		/// </summary>
		public override bool ExcludeFromMap
		{
			get { return (bool)this[Place.Columns.ExcludeFromMap]; }
			set { this[Place.Columns.ExcludeFromMap] = value; }
		}
		/// <summary>
		/// Name used in the URL...
		/// </summary>
		public override string UrlName
		{
			get { return (string)this[Place.Columns.UrlName]; }
			set { this[Place.Columns.UrlName] = value; }
		}
		/// <summary>
		/// State var used to reconstruct cropper when re-cropping
		/// </summary>
		public override string PicState
		{
			get { return (string)this[Place.Columns.PicState]; }
			set { this[Place.Columns.PicState] = value; }
		}
		/// <summary>
		/// The Photo that was used to create the Pic.
		/// </summary>
		public override int PicPhotoK
		{
			get { return (int)this[Place.Columns.PicPhotoK]; }
			set { this[Place.Columns.PicPhotoK] = value; }
		}
		/// <summary>
		/// The Misc that was used to create the Pic.
		/// </summary>
		public override int PicMiscK
		{
			get { return (int)this[Place.Columns.PicMiscK]; }
			set { this[Place.Columns.PicMiscK] = value; }
		}
		/// <summary>
		/// The url fragment - so that the url can be generated without accessing parent database records
		/// </summary>
		public override string UrlFragment
		{
			get { return (string)this[Place.Columns.UrlFragment]; }
			set { this[Place.Columns.UrlFragment] = value; }
		}
		/// <summary>
		/// FeatureId in MeridianWorldData database
		/// </summary>
		public override int MeridianFeatureId
		{
			get { return (int)this[Place.Columns.MeridianFeatureId]; }
			set { this[Place.Columns.MeridianFeatureId] = value; }
		}
		/// <summary>
		/// Latitude
		/// </summary>
		public override double Lat
		{
			get { return (double)this[Place.Columns.Lat]; }
			set { this[Place.Columns.Lat] = value; }
		}
		/// <summary>
		/// Longitude
		/// </summary>
		public override double Lon
		{
			get { return (double)this[Place.Columns.Lon]; }
			set { this[Place.Columns.Lon] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildPlaces
	{
		CachedSqlSelect<Place> ChildPlaces();
		CachedSqlSelect<Place> ChildPlaces(Q where);
		CachedSqlSelect<Place> ChildPlaces(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<Place> ChildPlaces(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class Place 
	 : 
	Bobs.ChildInterfaces.IHasChildArticles
	,
	Bobs.ChildInterfaces.IHasChildBannerPlaces
	,
	Bobs.ChildInterfaces.IHasChildGroups
	,
	Bobs.ChildInterfaces.IHasChildThreads
	,
	Bobs.ChildInterfaces.IHasChildUsrPlaceVisits
	,
	Bobs.ChildInterfaces.IHasChildVenues
		{
			public CachedSqlSelect<Article> ChildArticles()
		{
			return this.ChildArticles(null, null);
		}
		public CachedSqlSelect<Article> ChildArticles(Q where)
		{
			return this.ChildArticles(where, null);
		}
		public CachedSqlSelect<Article> ChildArticles(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildArticles(null, orderBy);
		}
		public CachedSqlSelect<Article> ChildArticles(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<Article>
			(
				new Children<Article>
				(
					TablesEnum.Place, 
					this.K, 
					TablesEnum.Article, 
					dr => 
					{ 
						Article newArticle = new Article(); 
						newArticle.Initialise(dr); 
						return newArticle;
					},
					"D389F153",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<BannerPlace> ChildBannerPlaces()
		{
			return this.ChildBannerPlaces(null, null);
		}
		public CachedSqlSelect<BannerPlace> ChildBannerPlaces(Q where)
		{
			return this.ChildBannerPlaces(where, null);
		}
		public CachedSqlSelect<BannerPlace> ChildBannerPlaces(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildBannerPlaces(null, orderBy);
		}
		public CachedSqlSelect<BannerPlace> ChildBannerPlaces(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<BannerPlace>
			(
				new Children<BannerPlace>
				(
					TablesEnum.Place, 
					this.K, 
					TablesEnum.BannerPlace, 
					dr => 
					{ 
						BannerPlace newBannerPlace = new BannerPlace(); 
						newBannerPlace.Initialise(dr); 
						return newBannerPlace;
					},
					"D5DF14E0",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<Group> ChildGroups()
		{
			return this.ChildGroups(null, null);
		}
		public CachedSqlSelect<Group> ChildGroups(Q where)
		{
			return this.ChildGroups(where, null);
		}
		public CachedSqlSelect<Group> ChildGroups(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildGroups(null, orderBy);
		}
		public CachedSqlSelect<Group> ChildGroups(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<Group>
			(
				new Children<Group>
				(
					TablesEnum.Place, 
					this.K, 
					TablesEnum.Group, 
					dr => 
					{ 
						Group newGroup = new Group(); 
						newGroup.Initialise(dr); 
						return newGroup;
					},
					"81294206",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<Thread> ChildThreads()
		{
			return this.ChildThreads(null, null);
		}
		public CachedSqlSelect<Thread> ChildThreads(Q where)
		{
			return this.ChildThreads(where, null);
		}
		public CachedSqlSelect<Thread> ChildThreads(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildThreads(null, orderBy);
		}
		public CachedSqlSelect<Thread> ChildThreads(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<Thread>
			(
				new Children<Thread>
				(
					TablesEnum.Place, 
					this.K, 
					TablesEnum.Thread, 
					dr => 
					{ 
						Thread newThread = new Thread(); 
						newThread.Initialise(dr); 
						return newThread;
					},
					"4576C3F1",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<UsrPlaceVisit> ChildUsrPlaceVisits()
		{
			return this.ChildUsrPlaceVisits(null, null);
		}
		public CachedSqlSelect<UsrPlaceVisit> ChildUsrPlaceVisits(Q where)
		{
			return this.ChildUsrPlaceVisits(where, null);
		}
		public CachedSqlSelect<UsrPlaceVisit> ChildUsrPlaceVisits(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildUsrPlaceVisits(null, orderBy);
		}
		public CachedSqlSelect<UsrPlaceVisit> ChildUsrPlaceVisits(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<UsrPlaceVisit>
			(
				new Children<UsrPlaceVisit>
				(
					TablesEnum.Place, 
					this.K, 
					TablesEnum.UsrPlaceVisit, 
					dr => 
					{ 
						UsrPlaceVisit newUsrPlaceVisit = new UsrPlaceVisit(); 
						newUsrPlaceVisit.Initialise(dr); 
						return newUsrPlaceVisit;
					},
					"0DF9F093",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<Venue> ChildVenues()
		{
			return this.ChildVenues(null, null);
		}
		public CachedSqlSelect<Venue> ChildVenues(Q where)
		{
			return this.ChildVenues(where, null);
		}
		public CachedSqlSelect<Venue> ChildVenues(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildVenues(null, orderBy);
		}
		public CachedSqlSelect<Venue> ChildVenues(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<Venue>
			(
				new Children<Venue>
				(
					TablesEnum.Place, 
					this.K, 
					TablesEnum.Venue, 
					dr => 
					{ 
						Venue newVenue = new Venue(); 
						newVenue.Initialise(dr); 
						return newVenue;
					},
					"B5C142C8",
					where,
					orderBy
				)
			);
		}
		}

	#region PlaceDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region PlaceDataHolder
	/// <summary>
	/// e.g. Southampton, LondonDataHolder
	/// </summary>
	[Serializable]
	public partial class PlaceDataHolder : DataHolder<Place>
	{
		Place dataHolder;
		[NonSerializedAttribute] Place bob;

		public PlaceDataHolder()
		{
			this.dataHolder = new Place();
		}
		
		void CopyValues(Place source, Place destination)
		{
			destination[Bobs.Place.Columns.K] = source[Bobs.Place.Columns.K];
			destination[Bobs.Place.Columns.Name] = source[Bobs.Place.Columns.Name];
			destination[Bobs.Place.Columns.UniqueName] = source[Bobs.Place.Columns.UniqueName];
			destination[Bobs.Place.Columns.Population] = source[Bobs.Place.Columns.Population];
			destination[Bobs.Place.Columns.LatitudeDegreesNorth] = source[Bobs.Place.Columns.LatitudeDegreesNorth];
			destination[Bobs.Place.Columns.LongitudeDegreesWest] = source[Bobs.Place.Columns.LongitudeDegreesWest];
			destination[Bobs.Place.Columns.SubCountry] = source[Bobs.Place.Columns.SubCountry];
			destination[Bobs.Place.Columns.CountryK] = source[Bobs.Place.Columns.CountryK];
			destination[Bobs.Place.Columns.Enabled] = source[Bobs.Place.Columns.Enabled];
			destination[Bobs.Place.Columns.Pic] = source[Bobs.Place.Columns.Pic];
			destination[Bobs.Place.Columns.DetailsHtml] = source[Bobs.Place.Columns.DetailsHtml];
			destination[Bobs.Place.Columns.TotalEvents] = source[Bobs.Place.Columns.TotalEvents];
			destination[Bobs.Place.Columns.TotalComments] = source[Bobs.Place.Columns.TotalComments];
			destination[Bobs.Place.Columns.LastPost] = source[Bobs.Place.Columns.LastPost];
			destination[Bobs.Place.Columns.AverageCommentDateTime] = source[Bobs.Place.Columns.AverageCommentDateTime];
			destination[Bobs.Place.Columns.RegionAbbreviation] = source[Bobs.Place.Columns.RegionAbbreviation];
			destination[Bobs.Place.Columns.RegionK] = source[Bobs.Place.Columns.RegionK];
			destination[Bobs.Place.Columns.Code] = source[Bobs.Place.Columns.Code];
			destination[Bobs.Place.Columns.Type] = source[Bobs.Place.Columns.Type];
			destination[Bobs.Place.Columns.IsRegionCapital] = source[Bobs.Place.Columns.IsRegionCapital];
			destination[Bobs.Place.Columns.IsCountryCapital] = source[Bobs.Place.Columns.IsCountryCapital];
			destination[Bobs.Place.Columns.ExcludeFromMap] = source[Bobs.Place.Columns.ExcludeFromMap];
			destination[Bobs.Place.Columns.UrlName] = source[Bobs.Place.Columns.UrlName];
			destination[Bobs.Place.Columns.PicState] = source[Bobs.Place.Columns.PicState];
			destination[Bobs.Place.Columns.PicPhotoK] = source[Bobs.Place.Columns.PicPhotoK];
			destination[Bobs.Place.Columns.PicMiscK] = source[Bobs.Place.Columns.PicMiscK];
			destination[Bobs.Place.Columns.UrlFragment] = source[Bobs.Place.Columns.UrlFragment];
			destination[Bobs.Place.Columns.MeridianFeatureId] = source[Bobs.Place.Columns.MeridianFeatureId];
			destination[Bobs.Place.Columns.Lat] = source[Bobs.Place.Columns.Lat];
			destination[Bobs.Place.Columns.Lon] = source[Bobs.Place.Columns.Lon];
		}
		
		public PlaceDataHolder(Place bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// The primary key
		/// </summary>
		public int K
		{
			get { return dataHolder.K; }
			set { this.dataHolder.K = value; }
		}
		/// <summary>
		/// Place name
		/// </summary>
		public string Name
		{
			get { return dataHolder.Name; }
			set { this.dataHolder.Name = value; }
		}
		/// <summary>
		/// Unique place name e.g. Springfield TX
		/// </summary>
		public string UniqueName
		{
			get { return dataHolder.UniqueName; }
			set { this.dataHolder.UniqueName = value; }
		}
		/// <summary>
		/// Population of the place in 1000's
		/// </summary>
		public double Population
		{
			get { return dataHolder.Population; }
			set { this.dataHolder.Population = value; }
		}
		/// <summary>
		/// Latitude (degrees north)
		/// </summary>
		public double LatitudeDegreesNorth
		{
			get { return dataHolder.LatitudeDegreesNorth; }
			set { this.dataHolder.LatitudeDegreesNorth = value; }
		}
		/// <summary>
		/// Longitude (degrees west)
		/// </summary>
		public double LongitudeDegreesWest
		{
			get { return dataHolder.LongitudeDegreesWest; }
			set { this.dataHolder.LongitudeDegreesWest = value; }
		}
		/// <summary>
		/// Country (1=England, 2=Scotland, 3=Wales, 4=Northern Ireland)
		/// </summary>
		public int SubCountry
		{
			get { return dataHolder.SubCountry; }
			set { this.dataHolder.SubCountry = value; }
		}
		/// <summary>
		/// Link to the country table
		/// </summary>
		public int CountryK
		{
			get { return dataHolder.CountryK; }
			set { this.dataHolder.CountryK = value; }
		}
		/// <summary>
		/// Whether the place is displayed in the full place list.
		/// </summary>
		public bool Enabled
		{
			get { return dataHolder.Enabled; }
			set { this.dataHolder.Enabled = value; }
		}
		/// <summary>
		/// Cropped image between 75*75 and 100*100
		/// </summary>
		public Guid Pic
		{
			get { return dataHolder.Pic; }
			set { this.dataHolder.Pic = value; }
		}
		/// <summary>
		/// Details displayed on the place page
		/// </summary>
		public string DetailsHtml
		{
			get { return dataHolder.DetailsHtml; }
			set { this.dataHolder.DetailsHtml = value; }
		}
		/// <summary>
		/// The total number of events
		/// </summary>
		public int TotalEvents
		{
			get { return dataHolder.TotalEvents; }
			set { this.dataHolder.TotalEvents = value; }
		}
		/// <summary>
		/// The total number of comments
		/// </summary>
		public int TotalComments
		{
			get { return dataHolder.TotalComments; }
			set { this.dataHolder.TotalComments = value; }
		}
		/// <summary>
		/// The date/time of the last post that was posted in this board (including child objects)
		/// </summary>
		public DateTime LastPost
		{
			get { return dataHolder.LastPost; }
			set { this.dataHolder.LastPost = value; }
		}
		/// <summary>
		/// The average date.time of all comments posted in this board (including child objects)
		/// </summary>
		public DateTime AverageCommentDateTime
		{
			get { return dataHolder.AverageCommentDateTime; }
			set { this.dataHolder.AverageCommentDateTime = value; }
		}
		/// <summary>
		/// Appended to end of FriendlyName. Usually US State abbreviation.
		/// </summary>
		public string RegionAbbreviation
		{
			get { return dataHolder.RegionAbbreviation; }
			set { this.dataHolder.RegionAbbreviation = value; }
		}
		/// <summary>
		/// Link to Region table
		/// </summary>
		public int RegionK
		{
			get { return dataHolder.RegionK; }
			set { this.dataHolder.RegionK = value; }
		}
		/// <summary>
		/// Any regional place code (e.g. US FIPS code)
		/// </summary>
		public string Code
		{
			get { return dataHolder.Code; }
			set { this.dataHolder.Code = value; }
		}
		/// <summary>
		/// Place type - e.g. US CDP/Town/City
		/// </summary>
		public string Type
		{
			get { return dataHolder.Type; }
			set { this.dataHolder.Type = value; }
		}
		/// <summary>
		/// Is this the capital of the region?
		/// </summary>
		public bool IsRegionCapital
		{
			get { return dataHolder.IsRegionCapital; }
			set { this.dataHolder.IsRegionCapital = value; }
		}
		/// <summary>
		/// Is this the capital of the country?
		/// </summary>
		public bool IsCountryCapital
		{
			get { return dataHolder.IsCountryCapital; }
			set { this.dataHolder.IsCountryCapital = value; }
		}
		/// <summary>
		/// Leave this place off when drawing the map? (Usefull for outlying islands)
		/// </summary>
		public bool ExcludeFromMap
		{
			get { return dataHolder.ExcludeFromMap; }
			set { this.dataHolder.ExcludeFromMap = value; }
		}
		/// <summary>
		/// Name used in the URL...
		/// </summary>
		public string UrlName
		{
			get { return dataHolder.UrlName; }
			set { this.dataHolder.UrlName = value; }
		}
		/// <summary>
		/// State var used to reconstruct cropper when re-cropping
		/// </summary>
		public string PicState
		{
			get { return dataHolder.PicState; }
			set { this.dataHolder.PicState = value; }
		}
		/// <summary>
		/// The Photo that was used to create the Pic.
		/// </summary>
		public int PicPhotoK
		{
			get { return dataHolder.PicPhotoK; }
			set { this.dataHolder.PicPhotoK = value; }
		}
		/// <summary>
		/// The Misc that was used to create the Pic.
		/// </summary>
		public int PicMiscK
		{
			get { return dataHolder.PicMiscK; }
			set { this.dataHolder.PicMiscK = value; }
		}
		/// <summary>
		/// The url fragment - so that the url can be generated without accessing parent database records
		/// </summary>
		public string UrlFragment
		{
			get { return dataHolder.UrlFragment; }
			set { this.dataHolder.UrlFragment = value; }
		}
		/// <summary>
		/// FeatureId in MeridianWorldData database
		/// </summary>
		public int MeridianFeatureId
		{
			get { return dataHolder.MeridianFeatureId; }
			set { this.dataHolder.MeridianFeatureId = value; }
		}
		/// <summary>
		/// Latitude
		/// </summary>
		public double Lat
		{
			get { return dataHolder.Lat; }
			set { this.dataHolder.Lat = value; }
		}
		/// <summary>
		/// Longitude
		/// </summary>
		public double Lon
		{
			get { return dataHolder.Lon; }
			set { this.dataHolder.Lon = value; }
		}
		#endregion
		public Place Place
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new Place(K);
					}
					else
					{
						bob = new Place();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region PlaceSet
	public partial class PlaceSet : BobSet, IEnumerable<Place>
	{
		public PlaceSet(Query query) : base(query) { }

		public Place this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new Place(this);
					((Place)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (Place)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new PlaceTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<Place> ToList()
		{
			List<Place> list = new List<Place>();
			foreach (Place item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<Place> Members

		public new IEnumerator<Place> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region PlaceTableDef
	public class PlaceTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "Place";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "E6E58561";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return Place.GetColumnName((Place.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.Place;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return true;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return Place.Columns.K;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			Place.Columns c = (Place.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case Place.Columns.K: ColumnStore[i] = new ColumnDef(c, "K", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey | SqlColumnFlag.AutoNumber, null); break;
					case Place.Columns.Name: ColumnStore[i] = new ColumnDef(c, "Name", SqlDbType.VarChar, 100, ""); break;
					case Place.Columns.UniqueName: ColumnStore[i] = new ColumnDef(c, "UniqueName", SqlDbType.VarChar, 111, SqlColumnFlag.IsComputed, null); break;
					case Place.Columns.Population: ColumnStore[i] = new ColumnDef(c, "Population", SqlDbType.Float, 0.0); break;
					case Place.Columns.LatitudeDegreesNorth: ColumnStore[i] = new ColumnDef(c, "LatitudeDegreesNorth", SqlDbType.Float, 0.0); break;
					case Place.Columns.LongitudeDegreesWest: ColumnStore[i] = new ColumnDef(c, "LongitudeDegreesWest", SqlDbType.Float, 0.0); break;
					case Place.Columns.SubCountry: ColumnStore[i] = new ColumnDef(c, "SubCountry", SqlDbType.Int, 0); break;
					case Place.Columns.CountryK: ColumnStore[i] = new ColumnDef(c, "CountryK", SqlDbType.Int, 0); break;
					case Place.Columns.Enabled: ColumnStore[i] = new ColumnDef(c, "Enabled", SqlDbType.Bit, false); break;
					case Place.Columns.Pic: ColumnStore[i] = new ColumnDef(c, "Pic", SqlDbType.UniqueIdentifier, Guid.Empty); break;
					case Place.Columns.DetailsHtml: ColumnStore[i] = new ColumnDef(c, "DetailsHtml", SqlDbType.Text, ""); break;
					case Place.Columns.TotalEvents: ColumnStore[i] = new ColumnDef(c, "TotalEvents", SqlDbType.Int, 0); break;
					case Place.Columns.TotalComments: ColumnStore[i] = new ColumnDef(c, "TotalComments", SqlDbType.Int, 0); break;
					case Place.Columns.LastPost: ColumnStore[i] = new ColumnDef(c, "LastPost", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case Place.Columns.AverageCommentDateTime: ColumnStore[i] = new ColumnDef(c, "AverageCommentDateTime", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case Place.Columns.RegionAbbreviation: ColumnStore[i] = new ColumnDef(c, "RegionAbbreviation", SqlDbType.VarChar, 10, ""); break;
					case Place.Columns.RegionK: ColumnStore[i] = new ColumnDef(c, "RegionK", SqlDbType.Int, 0); break;
					case Place.Columns.Code: ColumnStore[i] = new ColumnDef(c, "Code", SqlDbType.VarChar, 10, ""); break;
					case Place.Columns.Type: ColumnStore[i] = new ColumnDef(c, "Type", SqlDbType.VarChar, 10, ""); break;
					case Place.Columns.IsRegionCapital: ColumnStore[i] = new ColumnDef(c, "IsRegionCapital", SqlDbType.Bit, false); break;
					case Place.Columns.IsCountryCapital: ColumnStore[i] = new ColumnDef(c, "IsCountryCapital", SqlDbType.Bit, false); break;
					case Place.Columns.ExcludeFromMap: ColumnStore[i] = new ColumnDef(c, "ExcludeFromMap", SqlDbType.Bit, false); break;
					case Place.Columns.UrlName: ColumnStore[i] = new ColumnDef(c, "UrlName", SqlDbType.VarChar, 100, ""); break;
					case Place.Columns.PicState: ColumnStore[i] = new ColumnDef(c, "PicState", SqlDbType.VarChar, 100, ""); break;
					case Place.Columns.PicPhotoK: ColumnStore[i] = new ColumnDef(c, "PicPhotoK", SqlDbType.Int, 0); break;
					case Place.Columns.PicMiscK: ColumnStore[i] = new ColumnDef(c, "PicMiscK", SqlDbType.Int, 0); break;
					case Place.Columns.UrlFragment: ColumnStore[i] = new ColumnDef(c, "UrlFragment", SqlDbType.VarChar, 255, ""); break;
					case Place.Columns.MeridianFeatureId: ColumnStore[i] = new ColumnDef(c, "MeridianFeatureId", SqlDbType.Int, 0); break;
					case Place.Columns.Lat: ColumnStore[i] = new ColumnDef(c, "Lat", SqlDbType.Float, null); break;
					case Place.Columns.Lon: ColumnStore[i] = new ColumnDef(c, "Lon", SqlDbType.Float, null); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(Place.Columns.K);
						InitColumn(Place.Columns.Name);
						InitColumn(Place.Columns.UniqueName);
						InitColumn(Place.Columns.Population);
						InitColumn(Place.Columns.LatitudeDegreesNorth);
						InitColumn(Place.Columns.LongitudeDegreesWest);
						InitColumn(Place.Columns.SubCountry);
						InitColumn(Place.Columns.CountryK);
						InitColumn(Place.Columns.Enabled);
						InitColumn(Place.Columns.Pic);
						InitColumn(Place.Columns.DetailsHtml);
						InitColumn(Place.Columns.TotalEvents);
						InitColumn(Place.Columns.TotalComments);
						InitColumn(Place.Columns.LastPost);
						InitColumn(Place.Columns.AverageCommentDateTime);
						InitColumn(Place.Columns.RegionAbbreviation);
						InitColumn(Place.Columns.RegionK);
						InitColumn(Place.Columns.Code);
						InitColumn(Place.Columns.Type);
						InitColumn(Place.Columns.IsRegionCapital);
						InitColumn(Place.Columns.IsCountryCapital);
						InitColumn(Place.Columns.ExcludeFromMap);
						InitColumn(Place.Columns.UrlName);
						InitColumn(Place.Columns.PicState);
						InitColumn(Place.Columns.PicPhotoK);
						InitColumn(Place.Columns.PicMiscK);
						InitColumn(Place.Columns.UrlFragment);
						InitColumn(Place.Columns.MeridianFeatureId);
						InitColumn(Place.Columns.Lat);
						InitColumn(Place.Columns.Lon);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region Prefs
	/// <summary>
	/// Prefs settings for browser guid
	/// </summary>
	public partial class Prefs : Model.Entities.Prefs, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// Browser guid
			/// </summary>
			Guid = 0x00460001,
			/// <summary>
			/// Prefs string
			/// </summary>
			PrefsString = 0x00460002,
		}
		#endregion
		public static string GetColumnName(Prefs.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case Prefs.Columns.Guid: return "Guid";
						case Prefs.Columns.PrefsString: return "PrefsString";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(Prefs.Columns columnEnum)
		{
			switch (columnEnum)
			{
						default: return false;
			}
		}


		#region Common
 
		public Prefs(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);  }
		public Prefs()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.Prefs);
		}
		public Prefs(BobSet bs)
		{
			this.Bob = new Bob(bs.Table, bs);
		}
		public Prefs(Guid PrefsGuid, IBob Parent, object Column)
			: this()
		{
			Bob.GetBobFromParent(PrefsGuid, Parent.Bob, Column, TablesEnum.Prefs);
		}
		public Prefs(Guid PrefsGuid)
			: this()
		{
			Bob.GetBobFromPrimaryKey(PrefsGuid);
		}
		#endregion

	}
	#endregion
	#region PrefsTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region Prefs
	/// <summary>
	/// Prefs settings for browser guid
	/// </summary>
	[Serializable]
	public partial class Prefs 
	{
		
		#region Simple members
		/// <summary>
		/// Browser guid
		/// </summary>
		public Guid	Guid
		{
			get{ return Cambro.Misc.Db.GuidConvertor(this[Prefs.Columns.Guid]);}		
			set{ this[Prefs.Columns.Guid] = new System.Data.SqlTypes.SqlGuid(value);}
		}
		/// <summary>
		/// Prefs string
		/// </summary>
		public override string PrefsString
		{
			get { return (string)this[Prefs.Columns.PrefsString]; }
			set { this[Prefs.Columns.PrefsString] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildPrefss
	{
		CachedSqlSelect<Prefs> ChildPrefss();
		CachedSqlSelect<Prefs> ChildPrefss(Q where);
		CachedSqlSelect<Prefs> ChildPrefss(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<Prefs> ChildPrefss(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class Prefs 
		{
		}

	#region PrefsDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region PrefsDataHolder
	/// <summary>
	/// Prefs settings for browser guidDataHolder
	/// </summary>
	[Serializable]
	public partial class PrefsDataHolder : DataHolder<Prefs>
	{
		Prefs dataHolder;
		[NonSerializedAttribute] Prefs bob;

		public PrefsDataHolder()
		{
			this.dataHolder = new Prefs();
		}
		
		void CopyValues(Prefs source, Prefs destination)
		{
			destination[Bobs.Prefs.Columns.Guid] = source[Bobs.Prefs.Columns.Guid];
			destination[Bobs.Prefs.Columns.PrefsString] = source[Bobs.Prefs.Columns.PrefsString];
		}
		
		public PrefsDataHolder(Prefs bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// Browser guid
		/// </summary>
		public Guid Guid
		{
			get { return dataHolder.Guid; }
			set { this.dataHolder.Guid = value; }
		}
		/// <summary>
		/// Prefs string
		/// </summary>
		public string PrefsString
		{
			get { return dataHolder.PrefsString; }
			set { this.dataHolder.PrefsString = value; }
		}
		#endregion
		public Prefs Prefs
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new Prefs(K);
					}
					else
					{
						bob = new Prefs();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region PrefsSet
	public partial class PrefsSet : BobSet, IEnumerable<Prefs>
	{
		public PrefsSet(Query query) : base(query) { }

		public Prefs this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new Prefs(this);
					((Prefs)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (Prefs)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new PrefsTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<Prefs> ToList()
		{
			List<Prefs> list = new List<Prefs>();
			foreach (Prefs item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<Prefs> Members

		public new IEnumerator<Prefs> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region PrefsTableDef
	public class PrefsTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "Prefs";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "AB118EEF";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return Prefs.GetColumnName((Prefs.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.Prefs;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return true;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return Prefs.Columns.Guid;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			Prefs.Columns c = (Prefs.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case Prefs.Columns.Guid: ColumnStore[i] = new ColumnDef(c, "Guid", SqlDbType.UniqueIdentifier, 16, SqlColumnFlag.PrimaryKey, Guid.Empty); break;
					case Prefs.Columns.PrefsString: ColumnStore[i] = new ColumnDef(c, "PrefsString", SqlDbType.Text, ""); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(Prefs.Columns.Guid);
						InitColumn(Prefs.Columns.PrefsString);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region Promoter
	/// <summary>
	/// A client who either operates clubbing brands or places adverts on dsi
	/// </summary>
	public partial class Promoter : Model.Entities.Promoter, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// The primary key
			/// </summary>
			K = 0x00470001,
			/// <summary>
			/// Name of the Promoter / Event Promoter
			/// </summary>
			Name = 0x00470002,
			/// <summary>
			/// Cropped image 100*100
			/// </summary>
			Pic = 0x00470003,
			/// <summary>
			/// The user that first signed up this promoter
			/// </summary>
			PrimaryUsrK = 0x00470004,
			/// <summary>
			/// Name of primary contact
			/// </summary>
			ContactName = 0x00470005,
			/// <summary>
			/// Name of the company for billing purpouses
			/// </summary>
			CompanyName = 0x00470006,
			/// <summary>
			/// The email address to send paypal payments to
			/// </summary>
			PayPalAddress = 0x00470007,
			/// <summary>
			/// Contact phone number
			/// </summary>
			PhoneNumber = 0x00470008,
			/// <summary>
			/// Billing address street
			/// </summary>
			AddressStreet = 0x00470009,
			/// <summary>
			/// Billing address area
			/// </summary>
			AddressArea = 0x0047000a,
			/// <summary>
			/// Billing address town
			/// </summary>
			AddressTown = 0x0047000b,
			/// <summary>
			/// Billing address county
			/// </summary>
			AddressCounty = 0x0047000c,
			/// <summary>
			/// Billing address postcode
			/// </summary>
			AddressPostcode = 0x0047000d,
			/// <summary>
			/// Billing address country
			/// </summary>
			AddressCountryK = 0x0047000e,
			/// <summary>
			/// Base pricng is multiplied by this figure.
			/// </summary>
			PricingMultiplier = 0x0047000f,
			/// <summary>
			/// When the promoter first signed up
			/// </summary>
			DateTimeSignUp = 0x00470010,
			/// <summary>
			/// Status - AwaitingQuote=1, AwaitingPayment=2, Enabled=3, Disabled=4
			/// </summary>
			Status = 0x00470011,
			/// <summary>
			/// The total paid by this promoter for services
			/// </summary>
			TotalPaid = 0x00470012,
			/// <summary>
			/// The date that the promoters account expires and drops to limited functionality.
			/// </summary>
			DateExpires = 0x00470013,
			/// <summary>
			/// The fee for renewing membership
			/// </summary>
			RenewalFee = 0x00470014,
			/// <summary>
			/// The number of months that the renewal fee is for
			/// </summary>
			RenewalMonths = 0x00470015,
			/// <summary>
			/// Admin note
			/// </summary>
			AdminNote = 0x00470016,
			/// <summary>
			/// Private message thread
			/// </summary>
			QuestionsThreadK = 0x00470017,
			/// <summary>
			/// Guid used to ensure duplicate promoters don't get posted if the user refreshes the page after saving.
			/// </summary>
			DuplicateGuid = 0x00470018,
			/// <summary>
			/// Unique name used in the url
			/// </summary>
			UrlName = 0x00470019,
			/// <summary>
			/// Can the promoter set up guestlist?
			/// </summary>
			HasGuestlist = 0x0047001a,
			/// <summary>
			/// Charge per name on the guestlist...
			/// </summary>
			GuestlistCharge = 0x0047001b,
			/// <summary>
			/// Number of guestlist credits that the promoter has
			/// </summary>
			GuestlistCredit = 0x0047001c,
			/// <summary>
			/// Amount that the promoter is alowed to go overdrawn on their guestlist credits
			/// </summary>
			GuestlistCreditLimit = 0x0047001d,
			/// <summary>
			/// State var used to reconstruct cropper when re-cropping
			/// </summary>
			PicState = 0x0047001e,
			/// <summary>
			/// The Photo that was used to create the Pic.
			/// </summary>
			PicPhotoK = 0x0047001f,
			/// <summary>
			/// The Misc that was used to create the Pic.
			/// </summary>
			PicMiscK = 0x00470020,
			/// <summary>
			/// Calculated number of clients per month through the door
			/// </summary>
			ClientsPerMonth = 0x00470021,
			/// <summary>
			/// Id of the last message that was successfully sent to this promoter (used in case PM sender fails)
			/// </summary>
			LastMessage = 0x00470022,
			/// <summary>
			/// Plain text editable by sales person, only used when idle or proactive
			/// </summary>
			ManualNote = 0x00470023,
			/// <summary>
			/// Credit limit in pounds
			/// </summary>
			CreditLimit = 0x00470024,
			/// <summary>
			/// When are invoices due (days) 0 = default
			/// </summary>
			InvoiceDueDays = 0x00470025,
			/// <summary>
			/// When was this promoter first enabled?
			/// </summary>
			EnabledDateTime = 0x00470026,
			/// <summary>
			/// Whick admin user enabled this promoter?
			/// </summary>
			EnabledByUsrK = 0x00470027,
			/// <summary>
			/// The sales person who owns the account / owned this account before expires date
			/// </summary>
			SalesUsrK = 0x00470028,
			/// <summary>
			/// Status of this client before expires date (1 = New, 2 = Idle, 3 = Proactive, 4 = Active)
			/// </summary>
			SalesStatus = 0x00470029,
			/// <summary>
			/// Date time when this client's sales status expires, and they become idle
			/// </summary>
			SalesStatusExpires = 0x0047002a,
			/// <summary>
			/// When to make the next call - used when someone requests to be called back in a month or something
			/// </summary>
			SalesNextCall = 0x0047002b,
			/// <summary>
			/// What type of letter are we about to send this promoter? 1 = CurrentNewPromoter, 2 = CurrentIdlePromoter, 3 = CurrentActivePromoter, 4 = AutoVenue
			/// </summary>
			LetterType = 0x0047002c,
			/// <summary>
			/// What is the printing status? 1 = New, 2 = Printing, 3 = Posted
			/// </summary>
			LetterStatus = 0x0047002d,
			/// <summary>
			/// Is the account a skeleton account? (missing some contact details)
			/// </summary>
			IsSkeleton = 0x0047002e,
			/// <summary>
			/// Four digit random number used to auth access code
			/// </summary>
			AccessCodeRandom = 0x0047002f,
			/// <summary>
			/// Which offer type are we showing?
			/// </summary>
			OfferType = 0x00470030,
			/// <summary>
			/// When does the offer expire?
			/// </summary>
			OfferExpireDateTime = 0x00470031,
			/// <summary>
			/// Estimation of how good the client will be 0=not rated, 1=crap, 2=ok, 3=good, 4=excellent
			/// </summary>
			SalesEstimate = 0x00470032,
			/// <summary>
			/// Is this promoter account on hold? (No sales calls)
			/// </summary>
			SalesHold = 0x00470033,
			/// <summary>
			/// Number of future events, updated overnight and when brands are added...
			/// </summary>
			FutureEvents = 0x00470034,
			/// <summary>
			/// To disable the redirect when promoter account has overdue invoices for an extended period
			/// </summary>
			DisableOverdueRedirect = 0x00470035,
			/// <summary>
			/// Email of primary contact
			/// </summary>
			ContactEmail = 0x00470036,
			/// <summary>
			/// Title of primary contact
			/// </summary>
			ContactTitle = 0x00470037,
			/// <summary>
			/// Personal title of primary contact
			/// </summary>
			ContactPersonalTitle = 0x00470038,
			/// <summary>
			/// Promoter's 2nd phone number
			/// </summary>
			PhoneNumber2 = 0x00470039,
			/// <summary>
			/// Promoter's primary website address
			/// </summary>
			WebAddress = 0x0047003a,
			/// <summary>
			/// Alarm for SalesUsr when next call time arrives
			/// </summary>
			Alarm = 0x0047003b,
			/// <summary>
			/// Name of accounts contact
			/// </summary>
			AccountsName = 0x0047003c,
			/// <summary>
			/// Email of accounts contact
			/// </summary>
			AccountsEmail = 0x0047003d,
			/// <summary>
			/// Phone number of accounts contact
			/// </summary>
			AccountsPhone = 0x0047003e,
			/// <summary>
			/// Client Sector: Promoter, Agency, Mobile operator, etc.
			/// </summary>
			ClientSector = 0x0047003f,
			/// <summary>
			/// Has Promoter completed tickets/credit application form and been approved
			/// </summary>
			EnableTickets = 0x00470040,
			/// <summary>
			/// Enum for Promoter's VAT status: 0 = unknown, 1 = not registered, 2 = registered
			/// </summary>
			VatStatus = 0x00470041,
			/// <summary>
			/// Promoter's VAT number
			/// </summary>
			VatNumber = 0x00470042,
			/// <summary>
			/// Country K in which the Promoter is VAT registered
			/// </summary>
			VatCountryK = 0x00470043,
			/// <summary>
			/// Who was the promoter added by (e.g. for sales admins)
			/// </summary>
			AddedByUsrK = 0x00470044,
			/// <summary>
			/// How was this promoter added to the site (1=By end user on the site, 2=By sales user in the backend, 3=By automated import)
			/// </summary>
			AddedMethod = 0x00470045,
			/// <summary>
			/// Promoter's bank name
			/// </summary>
			BankName = 0x00470046,
			/// <summary>
			/// Promoter's bank account name
			/// </summary>
			BankAccountName = 0x00470047,
			/// <summary>
			/// Promoter's bank account sort code
			/// </summary>
			BankAccountSortCode = 0x00470048,
			/// <summary>
			/// Promoter's bank account number
			/// </summary>
			BankAccountNumber = 0x00470049,
			/// <summary>
			/// Override applying of ticket funds to unpaid invoices
			/// </summary>
			OverrideApplyTicketFundsToInvoices = 0x0047004a,
			/// <summary>
			/// Number of sales calls made to this promoter
			/// </summary>
			SalesCallCount = 0x0047004b,
			/// <summary>
			/// Has this promoter been recently transferred to this sales user?
			/// </summary>
			RecentlyTransferred = 0x0047004c,
			/// <summary>
			/// if the promoter is an agency or not
			/// </summary>
			IsAgency = 0x0047004d,
			/// <summary>
			/// Discount percentage as an integer
			/// </summary>
			Discount = 0x0047004e,
			/// <summary>
			/// Add a random code to tickets, to be displayed on doorlists
			/// </summary>
			AddRandomCodeToTickets = 0x0047004f,
			/// <summary>
			/// Does this promoter want to confirm card details with us to avoid responsibility for card payments?
			/// </summary>
			WillCheckCardsForPurchasedTickets = 0x00470050,
			/// <summary>
			/// If this promoter was added in a sales campaign, this is it
			/// </summary>
			SalesCampaignK = 0x00470051,
			/// <summary>
			/// Cost per campaign credit
			/// </summary>
			CostPerCampaignCredit = 0x00470052,
			/// <summary>
			/// Dont send this promoter reminder emails when they havent paid
			/// </summary>
			SuspendReminderEmails = 0x00470053,
		}
		#endregion
		public static string GetColumnName(Promoter.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case Promoter.Columns.K: return "K";
						case Promoter.Columns.Name: return "Name";
						case Promoter.Columns.Pic: return "Pic";
						case Promoter.Columns.PrimaryUsrK: return "PrimaryUsrK";
						case Promoter.Columns.ContactName: return "ContactName";
						case Promoter.Columns.CompanyName: return "CompanyName";
						case Promoter.Columns.PayPalAddress: return "PayPalAddress";
						case Promoter.Columns.PhoneNumber: return "PhoneNumber";
						case Promoter.Columns.AddressStreet: return "AddressStreet";
						case Promoter.Columns.AddressArea: return "AddressArea";
						case Promoter.Columns.AddressTown: return "AddressTown";
						case Promoter.Columns.AddressCounty: return "AddressCounty";
						case Promoter.Columns.AddressPostcode: return "AddressPostcode";
						case Promoter.Columns.AddressCountryK: return "AddressCountryK";
						case Promoter.Columns.PricingMultiplier: return "PricingMultiplier";
						case Promoter.Columns.DateTimeSignUp: return "DateTimeSignUp";
						case Promoter.Columns.Status: return "Status";
						case Promoter.Columns.TotalPaid: return "TotalPaid";
						case Promoter.Columns.DateExpires: return "DateExpires";
						case Promoter.Columns.RenewalFee: return "RenewalFee";
						case Promoter.Columns.RenewalMonths: return "RenewalMonths";
						case Promoter.Columns.AdminNote: return "AdminNote";
						case Promoter.Columns.QuestionsThreadK: return "QuestionsThreadK";
						case Promoter.Columns.DuplicateGuid: return "DuplicateGuid";
						case Promoter.Columns.UrlName: return "UrlName";
						case Promoter.Columns.HasGuestlist: return "HasGuestlist";
						case Promoter.Columns.GuestlistCharge: return "GuestlistCharge";
						case Promoter.Columns.GuestlistCredit: return "GuestlistCredit";
						case Promoter.Columns.GuestlistCreditLimit: return "GuestlistCreditLimit";
						case Promoter.Columns.PicState: return "PicState";
						case Promoter.Columns.PicPhotoK: return "PicPhotoK";
						case Promoter.Columns.PicMiscK: return "PicMiscK";
						case Promoter.Columns.ClientsPerMonth: return "ClientsPerMonth";
						case Promoter.Columns.LastMessage: return "LastMessage";
						case Promoter.Columns.ManualNote: return "ManualNote";
						case Promoter.Columns.CreditLimit: return "CreditLimit";
						case Promoter.Columns.InvoiceDueDays: return "InvoiceDueDays";
						case Promoter.Columns.EnabledDateTime: return "EnabledDateTime";
						case Promoter.Columns.EnabledByUsrK: return "EnabledByUsrK";
						case Promoter.Columns.SalesUsrK: return "SalesUsrK";
						case Promoter.Columns.SalesStatus: return "SalesStatus";
						case Promoter.Columns.SalesStatusExpires: return "SalesStatusExpires";
						case Promoter.Columns.SalesNextCall: return "SalesNextCall";
						case Promoter.Columns.LetterType: return "LetterType";
						case Promoter.Columns.LetterStatus: return "LetterStatus";
						case Promoter.Columns.IsSkeleton: return "IsSkeleton";
						case Promoter.Columns.AccessCodeRandom: return "AccessCodeRandom";
						case Promoter.Columns.OfferType: return "OfferType";
						case Promoter.Columns.OfferExpireDateTime: return "OfferExpireDateTime";
						case Promoter.Columns.SalesEstimate: return "SalesEstimate";
						case Promoter.Columns.SalesHold: return "SalesHold";
						case Promoter.Columns.FutureEvents: return "FutureEvents";
						case Promoter.Columns.DisableOverdueRedirect: return "DisableOverdueRedirect";
						case Promoter.Columns.ContactEmail: return "ContactEmail";
						case Promoter.Columns.ContactTitle: return "ContactTitle";
						case Promoter.Columns.ContactPersonalTitle: return "ContactPersonalTitle";
						case Promoter.Columns.PhoneNumber2: return "PhoneNumber2";
						case Promoter.Columns.WebAddress: return "WebAddress";
						case Promoter.Columns.Alarm: return "Alarm";
						case Promoter.Columns.AccountsName: return "AccountsName";
						case Promoter.Columns.AccountsEmail: return "AccountsEmail";
						case Promoter.Columns.AccountsPhone: return "AccountsPhone";
						case Promoter.Columns.ClientSector: return "ClientSector";
						case Promoter.Columns.EnableTickets: return "EnableTickets";
						case Promoter.Columns.VatStatus: return "VatStatus";
						case Promoter.Columns.VatNumber: return "VatNumber";
						case Promoter.Columns.VatCountryK: return "VatCountryK";
						case Promoter.Columns.AddedByUsrK: return "AddedByUsrK";
						case Promoter.Columns.AddedMethod: return "AddedMethod";
						case Promoter.Columns.BankName: return "BankName";
						case Promoter.Columns.BankAccountName: return "BankAccountName";
						case Promoter.Columns.BankAccountSortCode: return "BankAccountSortCode";
						case Promoter.Columns.BankAccountNumber: return "BankAccountNumber";
						case Promoter.Columns.OverrideApplyTicketFundsToInvoices: return "OverrideApplyTicketFundsToInvoices";
						case Promoter.Columns.SalesCallCount: return "SalesCallCount";
						case Promoter.Columns.RecentlyTransferred: return "RecentlyTransferred";
						case Promoter.Columns.IsAgency: return "IsAgency";
						case Promoter.Columns.Discount: return "Discount";
						case Promoter.Columns.AddRandomCodeToTickets: return "AddRandomCodeToTickets";
						case Promoter.Columns.WillCheckCardsForPurchasedTickets: return "WillCheckCardsForPurchasedTickets";
						case Promoter.Columns.SalesCampaignK: return "SalesCampaignK";
						case Promoter.Columns.CostPerCampaignCredit: return "CostPerCampaignCredit";
						case Promoter.Columns.SuspendReminderEmails: return "SuspendReminderEmails";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(Promoter.Columns columnEnum)
		{
			switch (columnEnum)
			{
																																																																																							default: return false;
			}
		}


		#region Common
 
		public Promoter(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);  }
		public Promoter()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.Promoter);
		}
		public Promoter(BobSet bs)
		{
			this.Bob = new Bob(bs.Table, bs);
		}
		public Promoter(int PromoterK, IBob Parent, object Column)
			: this()
		{
			Bob.GetBobFromParent(PromoterK, Parent.Bob, Column, TablesEnum.Promoter);
		}
		public Promoter(int PromoterK)
			: this()
		{
			Bob.GetBobFromPrimaryKey(PromoterK);
		}
		#endregion

	}
	#endregion
	#region PromoterTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region Promoter
	/// <summary>
	/// A client who either operates clubbing brands or places adverts on dsi
	/// </summary>
	[Serializable]
	public partial class Promoter 
	{
		
		#region Simple members
		/// <summary>
		/// The primary key
		/// </summary>
		public override int K
		{
			get { return (int)this[Promoter.Columns.K] as int? ?? 0 ; }
			set { this[Promoter.Columns.K] = value; }
		}
		/// <summary>
		/// Name of the Promoter / Event Promoter
		/// </summary>
		public override string Name
		{
			get { return (string)this[Promoter.Columns.Name]; }
			set { this[Promoter.Columns.Name] = value; }
		}
		/// <summary>
		/// Cropped image 100*100
		/// </summary>
		public Guid	Pic
		{
			get{ return Cambro.Misc.Db.GuidConvertor(this[Promoter.Columns.Pic]);}		
			set{ this[Promoter.Columns.Pic] = new System.Data.SqlTypes.SqlGuid(value);}
		}
		/// <summary>
		/// The user that first signed up this promoter
		/// </summary>
		public override int PrimaryUsrK
		{
			get { return (int)this[Promoter.Columns.PrimaryUsrK]; }
			set { this[Promoter.Columns.PrimaryUsrK] = value; }
		}
		/// <summary>
		/// Name of primary contact
		/// </summary>
		public override string ContactName
		{
			get { return (string)this[Promoter.Columns.ContactName]; }
			set { this[Promoter.Columns.ContactName] = value; }
		}
		/// <summary>
		/// Name of the company for billing purpouses
		/// </summary>
		public override string CompanyName
		{
			get { return (string)this[Promoter.Columns.CompanyName]; }
			set { this[Promoter.Columns.CompanyName] = value; }
		}
		/// <summary>
		/// The email address to send paypal payments to
		/// </summary>
		public override string PayPalAddress
		{
			get { return (string)this[Promoter.Columns.PayPalAddress]; }
			set { this[Promoter.Columns.PayPalAddress] = value; }
		}
		/// <summary>
		/// Contact phone number
		/// </summary>
		public override string PhoneNumber
		{
			get { return (string)this[Promoter.Columns.PhoneNumber]; }
			set { this[Promoter.Columns.PhoneNumber] = value; }
		}
		/// <summary>
		/// Billing address street
		/// </summary>
		public override string AddressStreet
		{
			get { return (string)this[Promoter.Columns.AddressStreet]; }
			set { this[Promoter.Columns.AddressStreet] = value; }
		}
		/// <summary>
		/// Billing address area
		/// </summary>
		public override string AddressArea
		{
			get { return (string)this[Promoter.Columns.AddressArea]; }
			set { this[Promoter.Columns.AddressArea] = value; }
		}
		/// <summary>
		/// Billing address town
		/// </summary>
		public override string AddressTown
		{
			get { return (string)this[Promoter.Columns.AddressTown]; }
			set { this[Promoter.Columns.AddressTown] = value; }
		}
		/// <summary>
		/// Billing address county
		/// </summary>
		public override string AddressCounty
		{
			get { return (string)this[Promoter.Columns.AddressCounty]; }
			set { this[Promoter.Columns.AddressCounty] = value; }
		}
		/// <summary>
		/// Billing address postcode
		/// </summary>
		public override string AddressPostcode
		{
			get { return (string)this[Promoter.Columns.AddressPostcode]; }
			set { this[Promoter.Columns.AddressPostcode] = value; }
		}
		/// <summary>
		/// Billing address country
		/// </summary>
		public override int AddressCountryK
		{
			get { return (int)this[Promoter.Columns.AddressCountryK]; }
			set { this[Promoter.Columns.AddressCountryK] = value; }
		}
		/// <summary>
		/// Base pricng is multiplied by this figure.
		/// </summary>
		public override double PricingMultiplier
		{
			get { return (double)this[Promoter.Columns.PricingMultiplier]; }
			set { this[Promoter.Columns.PricingMultiplier] = value; }
		}
		/// <summary>
		/// When the promoter first signed up
		/// </summary>
		public override DateTime DateTimeSignUp
		{
			get { return (DateTime)this[Promoter.Columns.DateTimeSignUp]; }
			set { this[Promoter.Columns.DateTimeSignUp] = value; }
		}
		/// <summary>
		/// Status - AwaitingQuote=1, AwaitingPayment=2, Enabled=3, Disabled=4
		/// </summary>
		public override int Status
		{
			get { return (int)this[Promoter.Columns.Status]; }
			set { this[Promoter.Columns.Status] = value; }
		}
		/// <summary>
		/// The total paid by this promoter for services
		/// </summary>
		public override decimal TotalPaid
		{
			get { return (decimal)this[Promoter.Columns.TotalPaid]; }
			set { this[Promoter.Columns.TotalPaid] = value; }
		}
		/// <summary>
		/// The date that the promoters account expires and drops to limited functionality.
		/// </summary>
		public override DateTime DateExpires
		{
			get { return (DateTime)this[Promoter.Columns.DateExpires]; }
			set { this[Promoter.Columns.DateExpires] = value; }
		}
		/// <summary>
		/// The fee for renewing membership
		/// </summary>
		public override decimal RenewalFee
		{
			get { return (decimal)this[Promoter.Columns.RenewalFee]; }
			set { this[Promoter.Columns.RenewalFee] = value; }
		}
		/// <summary>
		/// The number of months that the renewal fee is for
		/// </summary>
		public override int RenewalMonths
		{
			get { return (int)this[Promoter.Columns.RenewalMonths]; }
			set { this[Promoter.Columns.RenewalMonths] = value; }
		}
		/// <summary>
		/// Admin note
		/// </summary>
		public override string AdminNote
		{
			get { return (string)this[Promoter.Columns.AdminNote]; }
			set { this[Promoter.Columns.AdminNote] = value; }
		}
		/// <summary>
		/// Private message thread
		/// </summary>
		public override int QuestionsThreadK
		{
			get { return (int)this[Promoter.Columns.QuestionsThreadK]; }
			set { this[Promoter.Columns.QuestionsThreadK] = value; }
		}
		/// <summary>
		/// Guid used to ensure duplicate promoters don't get posted if the user refreshes the page after saving.
		/// </summary>
		public Guid	DuplicateGuid
		{
			get{ return Cambro.Misc.Db.GuidConvertor(this[Promoter.Columns.DuplicateGuid]);}		
			set{ this[Promoter.Columns.DuplicateGuid] = new System.Data.SqlTypes.SqlGuid(value);}
		}
		/// <summary>
		/// Unique name used in the url
		/// </summary>
		public override string UrlName
		{
			get { return (string)this[Promoter.Columns.UrlName]; }
			set { this[Promoter.Columns.UrlName] = value; }
		}
		/// <summary>
		/// Can the promoter set up guestlist?
		/// </summary>
		public override bool HasGuestlist
		{
			get { return (bool)this[Promoter.Columns.HasGuestlist]; }
			set { this[Promoter.Columns.HasGuestlist] = value; }
		}
		/// <summary>
		/// Charge per name on the guestlist...
		/// </summary>
		public override decimal GuestlistCharge
		{
			get { return (decimal)this[Promoter.Columns.GuestlistCharge]; }
			set { this[Promoter.Columns.GuestlistCharge] = value; }
		}
		/// <summary>
		/// Number of guestlist credits that the promoter has
		/// </summary>
		public override int GuestlistCredit
		{
			get { return (int)this[Promoter.Columns.GuestlistCredit]; }
			set { this[Promoter.Columns.GuestlistCredit] = value; }
		}
		/// <summary>
		/// Amount that the promoter is alowed to go overdrawn on their guestlist credits
		/// </summary>
		public override int GuestlistCreditLimit
		{
			get { return (int)this[Promoter.Columns.GuestlistCreditLimit]; }
			set { this[Promoter.Columns.GuestlistCreditLimit] = value; }
		}
		/// <summary>
		/// State var used to reconstruct cropper when re-cropping
		/// </summary>
		public override string PicState
		{
			get { return (string)this[Promoter.Columns.PicState]; }
			set { this[Promoter.Columns.PicState] = value; }
		}
		/// <summary>
		/// The Photo that was used to create the Pic.
		/// </summary>
		public override int PicPhotoK
		{
			get { return (int)this[Promoter.Columns.PicPhotoK]; }
			set { this[Promoter.Columns.PicPhotoK] = value; }
		}
		/// <summary>
		/// The Misc that was used to create the Pic.
		/// </summary>
		public override int PicMiscK
		{
			get { return (int)this[Promoter.Columns.PicMiscK]; }
			set { this[Promoter.Columns.PicMiscK] = value; }
		}
		/// <summary>
		/// Calculated number of clients per month through the door
		/// </summary>
		public override int ClientsPerMonth
		{
			get { return (int)this[Promoter.Columns.ClientsPerMonth]; }
			set { this[Promoter.Columns.ClientsPerMonth] = value; }
		}
		/// <summary>
		/// Id of the last message that was successfully sent to this promoter (used in case PM sender fails)
		/// </summary>
		public override int LastMessage
		{
			get { return (int)this[Promoter.Columns.LastMessage]; }
			set { this[Promoter.Columns.LastMessage] = value; }
		}
		/// <summary>
		/// Plain text editable by sales person, only used when idle or proactive
		/// </summary>
		public override string ManualNote
		{
			get { return (string)this[Promoter.Columns.ManualNote]; }
			set { this[Promoter.Columns.ManualNote] = value; }
		}
		/// <summary>
		/// Credit limit in pounds
		/// </summary>
		public override decimal CreditLimit
		{
			get { return (decimal)this[Promoter.Columns.CreditLimit]; }
			set { this[Promoter.Columns.CreditLimit] = value; }
		}
		/// <summary>
		/// When are invoices due (days) 0 = default
		/// </summary>
		public override int InvoiceDueDays
		{
			get { return (int)this[Promoter.Columns.InvoiceDueDays]; }
			set { this[Promoter.Columns.InvoiceDueDays] = value; }
		}
		/// <summary>
		/// When was this promoter first enabled?
		/// </summary>
		public override DateTime EnabledDateTime
		{
			get { return (DateTime)this[Promoter.Columns.EnabledDateTime]; }
			set { this[Promoter.Columns.EnabledDateTime] = value; }
		}
		/// <summary>
		/// Whick admin user enabled this promoter?
		/// </summary>
		public override int EnabledByUsrK
		{
			get { return (int)this[Promoter.Columns.EnabledByUsrK]; }
			set { this[Promoter.Columns.EnabledByUsrK] = value; }
		}
		/// <summary>
		/// The sales person who owns the account / owned this account before expires date
		/// </summary>
		public override int SalesUsrK
		{
			get { return (int)this[Promoter.Columns.SalesUsrK]; }
			set { this[Promoter.Columns.SalesUsrK] = value; }
		}
		/// <summary>
		/// Status of this client before expires date (1 = New, 2 = Idle, 3 = Proactive, 4 = Active)
		/// </summary>
		public override int SalesStatus
		{
			get { return (int)this[Promoter.Columns.SalesStatus]; }
			set { this[Promoter.Columns.SalesStatus] = value; }
		}
		/// <summary>
		/// Date time when this client's sales status expires, and they become idle
		/// </summary>
		public override DateTime? SalesStatusExpires
		{
			get { return (DateTime?)this[Promoter.Columns.SalesStatusExpires]; }
			set { this[Promoter.Columns.SalesStatusExpires] = value; }
		}
		/// <summary>
		/// When to make the next call - used when someone requests to be called back in a month or something
		/// </summary>
		public override DateTime SalesNextCall
		{
			get { return (DateTime)this[Promoter.Columns.SalesNextCall]; }
			set { this[Promoter.Columns.SalesNextCall] = value; }
		}
		/// <summary>
		/// What type of letter are we about to send this promoter? 1 = CurrentNewPromoter, 2 = CurrentIdlePromoter, 3 = CurrentActivePromoter, 4 = AutoVenue
		/// </summary>
		public override int LetterType
		{
			get { return (int)this[Promoter.Columns.LetterType]; }
			set { this[Promoter.Columns.LetterType] = value; }
		}
		/// <summary>
		/// What is the printing status? 1 = New, 2 = Printing, 3 = Posted
		/// </summary>
		public override int LetterStatus
		{
			get { return (int)this[Promoter.Columns.LetterStatus]; }
			set { this[Promoter.Columns.LetterStatus] = value; }
		}
		/// <summary>
		/// Is the account a skeleton account? (missing some contact details)
		/// </summary>
		public override bool IsSkeleton
		{
			get { return (bool)this[Promoter.Columns.IsSkeleton]; }
			set { this[Promoter.Columns.IsSkeleton] = value; }
		}
		/// <summary>
		/// Four digit random number used to auth access code
		/// </summary>
		public override string AccessCodeRandom
		{
			get { return (string)this[Promoter.Columns.AccessCodeRandom]; }
			set { this[Promoter.Columns.AccessCodeRandom] = value; }
		}
		/// <summary>
		/// Which offer type are we showing?
		/// </summary>
		public override int OfferType
		{
			get { return (int)this[Promoter.Columns.OfferType]; }
			set { this[Promoter.Columns.OfferType] = value; }
		}
		/// <summary>
		/// When does the offer expire?
		/// </summary>
		public override DateTime OfferExpireDateTime
		{
			get { return (DateTime)this[Promoter.Columns.OfferExpireDateTime]; }
			set { this[Promoter.Columns.OfferExpireDateTime] = value; }
		}
		/// <summary>
		/// Estimation of how good the client will be 0=not rated, 1=crap, 2=ok, 3=good, 4=excellent
		/// </summary>
		public override int SalesEstimate
		{
			get { return (int)this[Promoter.Columns.SalesEstimate]; }
			set { this[Promoter.Columns.SalesEstimate] = value; }
		}
		/// <summary>
		/// Is this promoter account on hold? (No sales calls)
		/// </summary>
		public override bool SalesHold
		{
			get { return (bool)this[Promoter.Columns.SalesHold]; }
			set { this[Promoter.Columns.SalesHold] = value; }
		}
		/// <summary>
		/// Number of future events, updated overnight and when brands are added...
		/// </summary>
		public override int FutureEvents
		{
			get { return (int)this[Promoter.Columns.FutureEvents]; }
			set { this[Promoter.Columns.FutureEvents] = value; }
		}
		/// <summary>
		/// To disable the redirect when promoter account has overdue invoices for an extended period
		/// </summary>
		public override bool DisableOverdueRedirect
		{
			get { return (bool)this[Promoter.Columns.DisableOverdueRedirect]; }
			set { this[Promoter.Columns.DisableOverdueRedirect] = value; }
		}
		/// <summary>
		/// Email of primary contact
		/// </summary>
		public override string ContactEmail
		{
			get { return (string)this[Promoter.Columns.ContactEmail]; }
			set { this[Promoter.Columns.ContactEmail] = value; }
		}
		/// <summary>
		/// Title of primary contact
		/// </summary>
		public override string ContactTitle
		{
			get { return (string)this[Promoter.Columns.ContactTitle]; }
			set { this[Promoter.Columns.ContactTitle] = value; }
		}
		/// <summary>
		/// Personal title of primary contact
		/// </summary>
		public override string ContactPersonalTitle
		{
			get { return (string)this[Promoter.Columns.ContactPersonalTitle]; }
			set { this[Promoter.Columns.ContactPersonalTitle] = value; }
		}
		/// <summary>
		/// Promoter's 2nd phone number
		/// </summary>
		public override string PhoneNumber2
		{
			get { return (string)this[Promoter.Columns.PhoneNumber2]; }
			set { this[Promoter.Columns.PhoneNumber2] = value; }
		}
		/// <summary>
		/// Promoter's primary website address
		/// </summary>
		public override string WebAddress
		{
			get { return (string)this[Promoter.Columns.WebAddress]; }
			set { this[Promoter.Columns.WebAddress] = value; }
		}
		/// <summary>
		/// Alarm for SalesUsr when next call time arrives
		/// </summary>
		public override bool Alarm
		{
			get { return (bool)this[Promoter.Columns.Alarm]; }
			set { this[Promoter.Columns.Alarm] = value; }
		}
		/// <summary>
		/// Name of accounts contact
		/// </summary>
		public override string AccountsName
		{
			get { return (string)this[Promoter.Columns.AccountsName]; }
			set { this[Promoter.Columns.AccountsName] = value; }
		}
		/// <summary>
		/// Email of accounts contact
		/// </summary>
		public override string AccountsEmail
		{
			get { return (string)this[Promoter.Columns.AccountsEmail]; }
			set { this[Promoter.Columns.AccountsEmail] = value; }
		}
		/// <summary>
		/// Phone number of accounts contact
		/// </summary>
		public override string AccountsPhone
		{
			get { return (string)this[Promoter.Columns.AccountsPhone]; }
			set { this[Promoter.Columns.AccountsPhone] = value; }
		}
		/// <summary>
		/// Client Sector: Promoter, Agency, Mobile operator, etc.
		/// </summary>
		public override int ClientSector
		{
			get { return (int)this[Promoter.Columns.ClientSector]; }
			set { this[Promoter.Columns.ClientSector] = value; }
		}
		/// <summary>
		/// Has Promoter completed tickets/credit application form and been approved
		/// </summary>
		public override bool EnableTickets
		{
			get { return (bool)this[Promoter.Columns.EnableTickets]; }
			set { this[Promoter.Columns.EnableTickets] = value; }
		}
		/// <summary>
		/// Enum for Promoter's VAT status: 0 = unknown, 1 = not registered, 2 = registered
		/// </summary>
		public override int VatStatus
		{
			get { return (int)this[Promoter.Columns.VatStatus]; }
			set { this[Promoter.Columns.VatStatus] = value; }
		}
		/// <summary>
		/// Promoter's VAT number
		/// </summary>
		public override string VatNumber
		{
			get { return (string)this[Promoter.Columns.VatNumber]; }
			set { this[Promoter.Columns.VatNumber] = value; }
		}
		/// <summary>
		/// Country K in which the Promoter is VAT registered
		/// </summary>
		public override int VatCountryK
		{
			get { return (int)this[Promoter.Columns.VatCountryK]; }
			set { this[Promoter.Columns.VatCountryK] = value; }
		}
		/// <summary>
		/// Who was the promoter added by (e.g. for sales admins)
		/// </summary>
		public override int AddedByUsrK
		{
			get { return (int)this[Promoter.Columns.AddedByUsrK]; }
			set { this[Promoter.Columns.AddedByUsrK] = value; }
		}
		/// <summary>
		/// How was this promoter added to the site (1=By end user on the site, 2=By sales user in the backend, 3=By automated import)
		/// </summary>
		public override int AddedMethod
		{
			get { return (int)this[Promoter.Columns.AddedMethod]; }
			set { this[Promoter.Columns.AddedMethod] = value; }
		}
		/// <summary>
		/// Promoter's bank name
		/// </summary>
		public override string BankName
		{
			get { return (string)this[Promoter.Columns.BankName]; }
			set { this[Promoter.Columns.BankName] = value; }
		}
		/// <summary>
		/// Promoter's bank account name
		/// </summary>
		public override string BankAccountName
		{
			get { return (string)this[Promoter.Columns.BankAccountName]; }
			set { this[Promoter.Columns.BankAccountName] = value; }
		}
		/// <summary>
		/// Promoter's bank account sort code
		/// </summary>
		public override string BankAccountSortCode
		{
			get { return (string)this[Promoter.Columns.BankAccountSortCode]; }
			set { this[Promoter.Columns.BankAccountSortCode] = value; }
		}
		/// <summary>
		/// Promoter's bank account number
		/// </summary>
		public override string BankAccountNumber
		{
			get { return (string)this[Promoter.Columns.BankAccountNumber]; }
			set { this[Promoter.Columns.BankAccountNumber] = value; }
		}
		/// <summary>
		/// Override applying of ticket funds to unpaid invoices
		/// </summary>
		public override bool OverrideApplyTicketFundsToInvoices
		{
			get { return (bool)this[Promoter.Columns.OverrideApplyTicketFundsToInvoices]; }
			set { this[Promoter.Columns.OverrideApplyTicketFundsToInvoices] = value; }
		}
		/// <summary>
		/// Number of sales calls made to this promoter
		/// </summary>
		public override int SalesCallCount
		{
			get { return (int)this[Promoter.Columns.SalesCallCount]; }
			set { this[Promoter.Columns.SalesCallCount] = value; }
		}
		/// <summary>
		/// Has this promoter been recently transferred to this sales user?
		/// </summary>
		public override bool RecentlyTransferred
		{
			get { return (bool)this[Promoter.Columns.RecentlyTransferred]; }
			set { this[Promoter.Columns.RecentlyTransferred] = value; }
		}
		/// <summary>
		/// if the promoter is an agency or not
		/// </summary>
		public override bool IsAgency
		{
			get { return (bool)this[Promoter.Columns.IsAgency]; }
			set { this[Promoter.Columns.IsAgency] = value; }
		}
		/// <summary>
		/// Discount percentage as an integer
		/// </summary>
		public override int Discount
		{
			get { return (int)this[Promoter.Columns.Discount]; }
			set { this[Promoter.Columns.Discount] = value; }
		}
		/// <summary>
		/// Add a random code to tickets, to be displayed on doorlists
		/// </summary>
		public override bool AddRandomCodeToTickets
		{
			get { return (bool)this[Promoter.Columns.AddRandomCodeToTickets]; }
			set { this[Promoter.Columns.AddRandomCodeToTickets] = value; }
		}
		/// <summary>
		/// Does this promoter want to confirm card details with us to avoid responsibility for card payments?
		/// </summary>
		public override bool WillCheckCardsForPurchasedTickets
		{
			get { return (bool)this[Promoter.Columns.WillCheckCardsForPurchasedTickets]; }
			set { this[Promoter.Columns.WillCheckCardsForPurchasedTickets] = value; }
		}
		/// <summary>
		/// If this promoter was added in a sales campaign, this is it
		/// </summary>
		public override int SalesCampaignK
		{
			get { return (int)this[Promoter.Columns.SalesCampaignK]; }
			set { this[Promoter.Columns.SalesCampaignK] = value; }
		}
		/// <summary>
		/// Cost per campaign credit
		/// </summary>
		public override decimal CostPerCampaignCredit
		{
			get { return (decimal)this[Promoter.Columns.CostPerCampaignCredit]; }
			set { this[Promoter.Columns.CostPerCampaignCredit] = value; }
		}
		/// <summary>
		/// Dont send this promoter reminder emails when they havent paid
		/// </summary>
		public override bool SuspendReminderEmails
		{
			get { return (bool)this[Promoter.Columns.SuspendReminderEmails]; }
			set { this[Promoter.Columns.SuspendReminderEmails] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildPromoters
	{
		CachedSqlSelect<Promoter> ChildPromoters();
		CachedSqlSelect<Promoter> ChildPromoters(Q where);
		CachedSqlSelect<Promoter> ChildPromoters(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<Promoter> ChildPromoters(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class Promoter 
	 : 
	Bobs.ChildInterfaces.IHasChildBankExports
	,
	Bobs.ChildInterfaces.IHasChildBanners
	,
	Bobs.ChildInterfaces.IHasChildBannerFolders
	,
	Bobs.ChildInterfaces.IHasChildBrands
	,
	Bobs.ChildInterfaces.IHasChildCampaignCredits
	,
	Bobs.ChildInterfaces.IHasChildClubDetailss
	,
	Bobs.ChildInterfaces.IHasChildComps
	,
	Bobs.ChildInterfaces.IHasChildDomains
	,
	Bobs.ChildInterfaces.IHasChildFlyers
	,
	Bobs.ChildInterfaces.IHasChildGuestlistCredits
	,
	Bobs.ChildInterfaces.IHasChildInsertionOrders
	,
	Bobs.ChildInterfaces.IHasChildInvoices
	,
	Bobs.ChildInterfaces.IHasChildMiscs
	,
	Bobs.ChildInterfaces.IHasChildPromoterUsrs
	,
	Bobs.ChildInterfaces.IHasChildSalesCalls
	,
	Bobs.ChildInterfaces.IHasChildSalesStatusChanges
	,
	Bobs.ChildInterfaces.IHasChildTicketPromoterEvents
	,
	Bobs.ChildInterfaces.IHasChildTicketRuns
	,
	Bobs.ChildInterfaces.IHasChildTransfers
	,
	Bobs.ChildInterfaces.IHasChildVenues
		{
			public CachedSqlSelect<BankExport> ChildBankExports()
		{
			return this.ChildBankExports(null, null);
		}
		public CachedSqlSelect<BankExport> ChildBankExports(Q where)
		{
			return this.ChildBankExports(where, null);
		}
		public CachedSqlSelect<BankExport> ChildBankExports(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildBankExports(null, orderBy);
		}
		public CachedSqlSelect<BankExport> ChildBankExports(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<BankExport>
			(
				new Children<BankExport>
				(
					TablesEnum.Promoter, 
					this.K, 
					TablesEnum.BankExport, 
					dr => 
					{ 
						BankExport newBankExport = new BankExport(); 
						newBankExport.Initialise(dr); 
						return newBankExport;
					},
					"9471DF4D",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<Banner> ChildBanners()
		{
			return this.ChildBanners(null, null);
		}
		public CachedSqlSelect<Banner> ChildBanners(Q where)
		{
			return this.ChildBanners(where, null);
		}
		public CachedSqlSelect<Banner> ChildBanners(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildBanners(null, orderBy);
		}
		public CachedSqlSelect<Banner> ChildBanners(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<Banner>
			(
				new Children<Banner>
				(
					TablesEnum.Promoter, 
					this.K, 
					TablesEnum.Banner, 
					dr => 
					{ 
						Banner newBanner = new Banner(); 
						newBanner.Initialise(dr); 
						return newBanner;
					},
					"73D8C33D",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<BannerFolder> ChildBannerFolders()
		{
			return this.ChildBannerFolders(null, null);
		}
		public CachedSqlSelect<BannerFolder> ChildBannerFolders(Q where)
		{
			return this.ChildBannerFolders(where, null);
		}
		public CachedSqlSelect<BannerFolder> ChildBannerFolders(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildBannerFolders(null, orderBy);
		}
		public CachedSqlSelect<BannerFolder> ChildBannerFolders(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<BannerFolder>
			(
				new Children<BannerFolder>
				(
					TablesEnum.Promoter, 
					this.K, 
					TablesEnum.BannerFolder, 
					dr => 
					{ 
						BannerFolder newBannerFolder = new BannerFolder(); 
						newBannerFolder.Initialise(dr); 
						return newBannerFolder;
					},
					"F4A4B2D6",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<Brand> ChildBrands()
		{
			return this.ChildBrands(null, null);
		}
		public CachedSqlSelect<Brand> ChildBrands(Q where)
		{
			return this.ChildBrands(where, null);
		}
		public CachedSqlSelect<Brand> ChildBrands(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildBrands(null, orderBy);
		}
		public CachedSqlSelect<Brand> ChildBrands(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<Brand>
			(
				new Children<Brand>
				(
					TablesEnum.Promoter, 
					this.K, 
					TablesEnum.Brand, 
					dr => 
					{ 
						Brand newBrand = new Brand(); 
						newBrand.Initialise(dr); 
						return newBrand;
					},
					"7CDA01A4",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<CampaignCredit> ChildCampaignCredits()
		{
			return this.ChildCampaignCredits(null, null);
		}
		public CachedSqlSelect<CampaignCredit> ChildCampaignCredits(Q where)
		{
			return this.ChildCampaignCredits(where, null);
		}
		public CachedSqlSelect<CampaignCredit> ChildCampaignCredits(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildCampaignCredits(null, orderBy);
		}
		public CachedSqlSelect<CampaignCredit> ChildCampaignCredits(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<CampaignCredit>
			(
				new Children<CampaignCredit>
				(
					TablesEnum.Promoter, 
					this.K, 
					TablesEnum.CampaignCredit, 
					dr => 
					{ 
						CampaignCredit newCampaignCredit = new CampaignCredit(); 
						newCampaignCredit.Initialise(dr); 
						return newCampaignCredit;
					},
					"CDCF195E",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<ClubDetails> ChildClubDetailss()
		{
			return this.ChildClubDetailss(null, null);
		}
		public CachedSqlSelect<ClubDetails> ChildClubDetailss(Q where)
		{
			return this.ChildClubDetailss(where, null);
		}
		public CachedSqlSelect<ClubDetails> ChildClubDetailss(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildClubDetailss(null, orderBy);
		}
		public CachedSqlSelect<ClubDetails> ChildClubDetailss(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<ClubDetails>
			(
				new Children<ClubDetails>
				(
					TablesEnum.Promoter, 
					this.K, 
					TablesEnum.ClubDetails, 
					dr => 
					{ 
						ClubDetails newClubDetails = new ClubDetails(); 
						newClubDetails.Initialise(dr); 
						return newClubDetails;
					},
					"8E6B772A",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<Comp> ChildComps()
		{
			return this.ChildComps(null, null);
		}
		public CachedSqlSelect<Comp> ChildComps(Q where)
		{
			return this.ChildComps(where, null);
		}
		public CachedSqlSelect<Comp> ChildComps(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildComps(null, orderBy);
		}
		public CachedSqlSelect<Comp> ChildComps(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<Comp>
			(
				new Children<Comp>
				(
					TablesEnum.Promoter, 
					this.K, 
					TablesEnum.Comp, 
					dr => 
					{ 
						Comp newComp = new Comp(); 
						newComp.Initialise(dr); 
						return newComp;
					},
					"61E0C58E",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<Domain> ChildDomains()
		{
			return this.ChildDomains(null, null);
		}
		public CachedSqlSelect<Domain> ChildDomains(Q where)
		{
			return this.ChildDomains(where, null);
		}
		public CachedSqlSelect<Domain> ChildDomains(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildDomains(null, orderBy);
		}
		public CachedSqlSelect<Domain> ChildDomains(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<Domain>
			(
				new Children<Domain>
				(
					TablesEnum.Promoter, 
					this.K, 
					TablesEnum.Domain, 
					dr => 
					{ 
						Domain newDomain = new Domain(); 
						newDomain.Initialise(dr); 
						return newDomain;
					},
					"6F78DD45",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<Flyer> ChildFlyers()
		{
			return this.ChildFlyers(null, null);
		}
		public CachedSqlSelect<Flyer> ChildFlyers(Q where)
		{
			return this.ChildFlyers(where, null);
		}
		public CachedSqlSelect<Flyer> ChildFlyers(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildFlyers(null, orderBy);
		}
		public CachedSqlSelect<Flyer> ChildFlyers(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<Flyer>
			(
				new Children<Flyer>
				(
					TablesEnum.Promoter, 
					this.K, 
					TablesEnum.Flyer, 
					dr => 
					{ 
						Flyer newFlyer = new Flyer(); 
						newFlyer.Initialise(dr); 
						return newFlyer;
					},
					"1933EADE",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<GuestlistCredit> ChildGuestlistCredits()
		{
			return this.ChildGuestlistCredits(null, null);
		}
		public CachedSqlSelect<GuestlistCredit> ChildGuestlistCredits(Q where)
		{
			return this.ChildGuestlistCredits(where, null);
		}
		public CachedSqlSelect<GuestlistCredit> ChildGuestlistCredits(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildGuestlistCredits(null, orderBy);
		}
		public CachedSqlSelect<GuestlistCredit> ChildGuestlistCredits(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<GuestlistCredit>
			(
				new Children<GuestlistCredit>
				(
					TablesEnum.Promoter, 
					this.K, 
					TablesEnum.GuestlistCredit, 
					dr => 
					{ 
						GuestlistCredit newGuestlistCredit = new GuestlistCredit(); 
						newGuestlistCredit.Initialise(dr); 
						return newGuestlistCredit;
					},
					"7BD67FFA",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<InsertionOrder> ChildInsertionOrders()
		{
			return this.ChildInsertionOrders(null, null);
		}
		public CachedSqlSelect<InsertionOrder> ChildInsertionOrders(Q where)
		{
			return this.ChildInsertionOrders(where, null);
		}
		public CachedSqlSelect<InsertionOrder> ChildInsertionOrders(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildInsertionOrders(null, orderBy);
		}
		public CachedSqlSelect<InsertionOrder> ChildInsertionOrders(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<InsertionOrder>
			(
				new Children<InsertionOrder>
				(
					TablesEnum.Promoter, 
					this.K, 
					TablesEnum.InsertionOrder, 
					dr => 
					{ 
						InsertionOrder newInsertionOrder = new InsertionOrder(); 
						newInsertionOrder.Initialise(dr); 
						return newInsertionOrder;
					},
					"050AA86B",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<Invoice> ChildInvoices()
		{
			return this.ChildInvoices(null, null);
		}
		public CachedSqlSelect<Invoice> ChildInvoices(Q where)
		{
			return this.ChildInvoices(where, null);
		}
		public CachedSqlSelect<Invoice> ChildInvoices(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildInvoices(null, orderBy);
		}
		public CachedSqlSelect<Invoice> ChildInvoices(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<Invoice>
			(
				new Children<Invoice>
				(
					TablesEnum.Promoter, 
					this.K, 
					TablesEnum.Invoice, 
					dr => 
					{ 
						Invoice newInvoice = new Invoice(); 
						newInvoice.Initialise(dr); 
						return newInvoice;
					},
					"E3B130F4",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<Misc> ChildMiscs()
		{
			return this.ChildMiscs(null, null);
		}
		public CachedSqlSelect<Misc> ChildMiscs(Q where)
		{
			return this.ChildMiscs(where, null);
		}
		public CachedSqlSelect<Misc> ChildMiscs(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildMiscs(null, orderBy);
		}
		public CachedSqlSelect<Misc> ChildMiscs(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<Misc>
			(
				new Children<Misc>
				(
					TablesEnum.Promoter, 
					this.K, 
					TablesEnum.Misc, 
					dr => 
					{ 
						Misc newMisc = new Misc(); 
						newMisc.Initialise(dr); 
						return newMisc;
					},
					"DEDF0D0A",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<PromoterUsr> ChildPromoterUsrs()
		{
			return this.ChildPromoterUsrs(null, null);
		}
		public CachedSqlSelect<PromoterUsr> ChildPromoterUsrs(Q where)
		{
			return this.ChildPromoterUsrs(where, null);
		}
		public CachedSqlSelect<PromoterUsr> ChildPromoterUsrs(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildPromoterUsrs(null, orderBy);
		}
		public CachedSqlSelect<PromoterUsr> ChildPromoterUsrs(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<PromoterUsr>
			(
				new Children<PromoterUsr>
				(
					TablesEnum.Promoter, 
					this.K, 
					TablesEnum.PromoterUsr, 
					dr => 
					{ 
						PromoterUsr newPromoterUsr = new PromoterUsr(); 
						newPromoterUsr.Initialise(dr); 
						return newPromoterUsr;
					},
					"6F1F45E8",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<SalesCall> ChildSalesCalls()
		{
			return this.ChildSalesCalls(null, null);
		}
		public CachedSqlSelect<SalesCall> ChildSalesCalls(Q where)
		{
			return this.ChildSalesCalls(where, null);
		}
		public CachedSqlSelect<SalesCall> ChildSalesCalls(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildSalesCalls(null, orderBy);
		}
		public CachedSqlSelect<SalesCall> ChildSalesCalls(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<SalesCall>
			(
				new Children<SalesCall>
				(
					TablesEnum.Promoter, 
					this.K, 
					TablesEnum.SalesCall, 
					dr => 
					{ 
						SalesCall newSalesCall = new SalesCall(); 
						newSalesCall.Initialise(dr); 
						return newSalesCall;
					},
					"A041F5A2",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<SalesStatusChange> ChildSalesStatusChanges()
		{
			return this.ChildSalesStatusChanges(null, null);
		}
		public CachedSqlSelect<SalesStatusChange> ChildSalesStatusChanges(Q where)
		{
			return this.ChildSalesStatusChanges(where, null);
		}
		public CachedSqlSelect<SalesStatusChange> ChildSalesStatusChanges(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildSalesStatusChanges(null, orderBy);
		}
		public CachedSqlSelect<SalesStatusChange> ChildSalesStatusChanges(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<SalesStatusChange>
			(
				new Children<SalesStatusChange>
				(
					TablesEnum.Promoter, 
					this.K, 
					TablesEnum.SalesStatusChange, 
					dr => 
					{ 
						SalesStatusChange newSalesStatusChange = new SalesStatusChange(); 
						newSalesStatusChange.Initialise(dr); 
						return newSalesStatusChange;
					},
					"5BA6B3C1",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<TicketPromoterEvent> ChildTicketPromoterEvents()
		{
			return this.ChildTicketPromoterEvents(null, null);
		}
		public CachedSqlSelect<TicketPromoterEvent> ChildTicketPromoterEvents(Q where)
		{
			return this.ChildTicketPromoterEvents(where, null);
		}
		public CachedSqlSelect<TicketPromoterEvent> ChildTicketPromoterEvents(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildTicketPromoterEvents(null, orderBy);
		}
		public CachedSqlSelect<TicketPromoterEvent> ChildTicketPromoterEvents(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<TicketPromoterEvent>
			(
				new Children<TicketPromoterEvent>
				(
					TablesEnum.Promoter, 
					this.K, 
					TablesEnum.TicketPromoterEvent, 
					dr => 
					{ 
						TicketPromoterEvent newTicketPromoterEvent = new TicketPromoterEvent(); 
						newTicketPromoterEvent.Initialise(dr); 
						return newTicketPromoterEvent;
					},
					"4A1C9197",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<TicketRun> ChildTicketRuns()
		{
			return this.ChildTicketRuns(null, null);
		}
		public CachedSqlSelect<TicketRun> ChildTicketRuns(Q where)
		{
			return this.ChildTicketRuns(where, null);
		}
		public CachedSqlSelect<TicketRun> ChildTicketRuns(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildTicketRuns(null, orderBy);
		}
		public CachedSqlSelect<TicketRun> ChildTicketRuns(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<TicketRun>
			(
				new Children<TicketRun>
				(
					TablesEnum.Promoter, 
					this.K, 
					TablesEnum.TicketRun, 
					dr => 
					{ 
						TicketRun newTicketRun = new TicketRun(); 
						newTicketRun.Initialise(dr); 
						return newTicketRun;
					},
					"D8F98D64",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<Transfer> ChildTransfers()
		{
			return this.ChildTransfers(null, null);
		}
		public CachedSqlSelect<Transfer> ChildTransfers(Q where)
		{
			return this.ChildTransfers(where, null);
		}
		public CachedSqlSelect<Transfer> ChildTransfers(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildTransfers(null, orderBy);
		}
		public CachedSqlSelect<Transfer> ChildTransfers(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<Transfer>
			(
				new Children<Transfer>
				(
					TablesEnum.Promoter, 
					this.K, 
					TablesEnum.Transfer, 
					dr => 
					{ 
						Transfer newTransfer = new Transfer(); 
						newTransfer.Initialise(dr); 
						return newTransfer;
					},
					"B7FD3576",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<Venue> ChildVenues()
		{
			return this.ChildVenues(null, null);
		}
		public CachedSqlSelect<Venue> ChildVenues(Q where)
		{
			return this.ChildVenues(where, null);
		}
		public CachedSqlSelect<Venue> ChildVenues(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildVenues(null, orderBy);
		}
		public CachedSqlSelect<Venue> ChildVenues(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<Venue>
			(
				new Children<Venue>
				(
					TablesEnum.Promoter, 
					this.K, 
					TablesEnum.Venue, 
					dr => 
					{ 
						Venue newVenue = new Venue(); 
						newVenue.Initialise(dr); 
						return newVenue;
					},
					"B5C142C8",
					where,
					orderBy
				)
			);
		}
		}

	#region PromoterDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region PromoterDataHolder
	/// <summary>
	/// A client who either operates clubbing brands or places adverts on dsiDataHolder
	/// </summary>
	[Serializable]
	public partial class PromoterDataHolder : DataHolder<Promoter>
	{
		Promoter dataHolder;
		[NonSerializedAttribute] Promoter bob;

		public PromoterDataHolder()
		{
			this.dataHolder = new Promoter();
		}
		
		void CopyValues(Promoter source, Promoter destination)
		{
			destination[Bobs.Promoter.Columns.K] = source[Bobs.Promoter.Columns.K];
			destination[Bobs.Promoter.Columns.Name] = source[Bobs.Promoter.Columns.Name];
			destination[Bobs.Promoter.Columns.Pic] = source[Bobs.Promoter.Columns.Pic];
			destination[Bobs.Promoter.Columns.PrimaryUsrK] = source[Bobs.Promoter.Columns.PrimaryUsrK];
			destination[Bobs.Promoter.Columns.ContactName] = source[Bobs.Promoter.Columns.ContactName];
			destination[Bobs.Promoter.Columns.CompanyName] = source[Bobs.Promoter.Columns.CompanyName];
			destination[Bobs.Promoter.Columns.PayPalAddress] = source[Bobs.Promoter.Columns.PayPalAddress];
			destination[Bobs.Promoter.Columns.PhoneNumber] = source[Bobs.Promoter.Columns.PhoneNumber];
			destination[Bobs.Promoter.Columns.AddressStreet] = source[Bobs.Promoter.Columns.AddressStreet];
			destination[Bobs.Promoter.Columns.AddressArea] = source[Bobs.Promoter.Columns.AddressArea];
			destination[Bobs.Promoter.Columns.AddressTown] = source[Bobs.Promoter.Columns.AddressTown];
			destination[Bobs.Promoter.Columns.AddressCounty] = source[Bobs.Promoter.Columns.AddressCounty];
			destination[Bobs.Promoter.Columns.AddressPostcode] = source[Bobs.Promoter.Columns.AddressPostcode];
			destination[Bobs.Promoter.Columns.AddressCountryK] = source[Bobs.Promoter.Columns.AddressCountryK];
			destination[Bobs.Promoter.Columns.PricingMultiplier] = source[Bobs.Promoter.Columns.PricingMultiplier];
			destination[Bobs.Promoter.Columns.DateTimeSignUp] = source[Bobs.Promoter.Columns.DateTimeSignUp];
			destination[Bobs.Promoter.Columns.Status] = source[Bobs.Promoter.Columns.Status];
			destination[Bobs.Promoter.Columns.TotalPaid] = source[Bobs.Promoter.Columns.TotalPaid];
			destination[Bobs.Promoter.Columns.DateExpires] = source[Bobs.Promoter.Columns.DateExpires];
			destination[Bobs.Promoter.Columns.RenewalFee] = source[Bobs.Promoter.Columns.RenewalFee];
			destination[Bobs.Promoter.Columns.RenewalMonths] = source[Bobs.Promoter.Columns.RenewalMonths];
			destination[Bobs.Promoter.Columns.AdminNote] = source[Bobs.Promoter.Columns.AdminNote];
			destination[Bobs.Promoter.Columns.QuestionsThreadK] = source[Bobs.Promoter.Columns.QuestionsThreadK];
			destination[Bobs.Promoter.Columns.DuplicateGuid] = source[Bobs.Promoter.Columns.DuplicateGuid];
			destination[Bobs.Promoter.Columns.UrlName] = source[Bobs.Promoter.Columns.UrlName];
			destination[Bobs.Promoter.Columns.HasGuestlist] = source[Bobs.Promoter.Columns.HasGuestlist];
			destination[Bobs.Promoter.Columns.GuestlistCharge] = source[Bobs.Promoter.Columns.GuestlistCharge];
			destination[Bobs.Promoter.Columns.GuestlistCredit] = source[Bobs.Promoter.Columns.GuestlistCredit];
			destination[Bobs.Promoter.Columns.GuestlistCreditLimit] = source[Bobs.Promoter.Columns.GuestlistCreditLimit];
			destination[Bobs.Promoter.Columns.PicState] = source[Bobs.Promoter.Columns.PicState];
			destination[Bobs.Promoter.Columns.PicPhotoK] = source[Bobs.Promoter.Columns.PicPhotoK];
			destination[Bobs.Promoter.Columns.PicMiscK] = source[Bobs.Promoter.Columns.PicMiscK];
			destination[Bobs.Promoter.Columns.ClientsPerMonth] = source[Bobs.Promoter.Columns.ClientsPerMonth];
			destination[Bobs.Promoter.Columns.LastMessage] = source[Bobs.Promoter.Columns.LastMessage];
			destination[Bobs.Promoter.Columns.ManualNote] = source[Bobs.Promoter.Columns.ManualNote];
			destination[Bobs.Promoter.Columns.CreditLimit] = source[Bobs.Promoter.Columns.CreditLimit];
			destination[Bobs.Promoter.Columns.InvoiceDueDays] = source[Bobs.Promoter.Columns.InvoiceDueDays];
			destination[Bobs.Promoter.Columns.EnabledDateTime] = source[Bobs.Promoter.Columns.EnabledDateTime];
			destination[Bobs.Promoter.Columns.EnabledByUsrK] = source[Bobs.Promoter.Columns.EnabledByUsrK];
			destination[Bobs.Promoter.Columns.SalesUsrK] = source[Bobs.Promoter.Columns.SalesUsrK];
			destination[Bobs.Promoter.Columns.SalesStatus] = source[Bobs.Promoter.Columns.SalesStatus];
			destination[Bobs.Promoter.Columns.SalesStatusExpires] = source[Bobs.Promoter.Columns.SalesStatusExpires];
			destination[Bobs.Promoter.Columns.SalesNextCall] = source[Bobs.Promoter.Columns.SalesNextCall];
			destination[Bobs.Promoter.Columns.LetterType] = source[Bobs.Promoter.Columns.LetterType];
			destination[Bobs.Promoter.Columns.LetterStatus] = source[Bobs.Promoter.Columns.LetterStatus];
			destination[Bobs.Promoter.Columns.IsSkeleton] = source[Bobs.Promoter.Columns.IsSkeleton];
			destination[Bobs.Promoter.Columns.AccessCodeRandom] = source[Bobs.Promoter.Columns.AccessCodeRandom];
			destination[Bobs.Promoter.Columns.OfferType] = source[Bobs.Promoter.Columns.OfferType];
			destination[Bobs.Promoter.Columns.OfferExpireDateTime] = source[Bobs.Promoter.Columns.OfferExpireDateTime];
			destination[Bobs.Promoter.Columns.SalesEstimate] = source[Bobs.Promoter.Columns.SalesEstimate];
			destination[Bobs.Promoter.Columns.SalesHold] = source[Bobs.Promoter.Columns.SalesHold];
			destination[Bobs.Promoter.Columns.FutureEvents] = source[Bobs.Promoter.Columns.FutureEvents];
			destination[Bobs.Promoter.Columns.DisableOverdueRedirect] = source[Bobs.Promoter.Columns.DisableOverdueRedirect];
			destination[Bobs.Promoter.Columns.ContactEmail] = source[Bobs.Promoter.Columns.ContactEmail];
			destination[Bobs.Promoter.Columns.ContactTitle] = source[Bobs.Promoter.Columns.ContactTitle];
			destination[Bobs.Promoter.Columns.ContactPersonalTitle] = source[Bobs.Promoter.Columns.ContactPersonalTitle];
			destination[Bobs.Promoter.Columns.PhoneNumber2] = source[Bobs.Promoter.Columns.PhoneNumber2];
			destination[Bobs.Promoter.Columns.WebAddress] = source[Bobs.Promoter.Columns.WebAddress];
			destination[Bobs.Promoter.Columns.Alarm] = source[Bobs.Promoter.Columns.Alarm];
			destination[Bobs.Promoter.Columns.AccountsName] = source[Bobs.Promoter.Columns.AccountsName];
			destination[Bobs.Promoter.Columns.AccountsEmail] = source[Bobs.Promoter.Columns.AccountsEmail];
			destination[Bobs.Promoter.Columns.AccountsPhone] = source[Bobs.Promoter.Columns.AccountsPhone];
			destination[Bobs.Promoter.Columns.ClientSector] = source[Bobs.Promoter.Columns.ClientSector];
			destination[Bobs.Promoter.Columns.EnableTickets] = source[Bobs.Promoter.Columns.EnableTickets];
			destination[Bobs.Promoter.Columns.VatStatus] = source[Bobs.Promoter.Columns.VatStatus];
			destination[Bobs.Promoter.Columns.VatNumber] = source[Bobs.Promoter.Columns.VatNumber];
			destination[Bobs.Promoter.Columns.VatCountryK] = source[Bobs.Promoter.Columns.VatCountryK];
			destination[Bobs.Promoter.Columns.AddedByUsrK] = source[Bobs.Promoter.Columns.AddedByUsrK];
			destination[Bobs.Promoter.Columns.AddedMethod] = source[Bobs.Promoter.Columns.AddedMethod];
			destination[Bobs.Promoter.Columns.BankName] = source[Bobs.Promoter.Columns.BankName];
			destination[Bobs.Promoter.Columns.BankAccountName] = source[Bobs.Promoter.Columns.BankAccountName];
			destination[Bobs.Promoter.Columns.BankAccountSortCode] = source[Bobs.Promoter.Columns.BankAccountSortCode];
			destination[Bobs.Promoter.Columns.BankAccountNumber] = source[Bobs.Promoter.Columns.BankAccountNumber];
			destination[Bobs.Promoter.Columns.OverrideApplyTicketFundsToInvoices] = source[Bobs.Promoter.Columns.OverrideApplyTicketFundsToInvoices];
			destination[Bobs.Promoter.Columns.SalesCallCount] = source[Bobs.Promoter.Columns.SalesCallCount];
			destination[Bobs.Promoter.Columns.RecentlyTransferred] = source[Bobs.Promoter.Columns.RecentlyTransferred];
			destination[Bobs.Promoter.Columns.IsAgency] = source[Bobs.Promoter.Columns.IsAgency];
			destination[Bobs.Promoter.Columns.Discount] = source[Bobs.Promoter.Columns.Discount];
			destination[Bobs.Promoter.Columns.AddRandomCodeToTickets] = source[Bobs.Promoter.Columns.AddRandomCodeToTickets];
			destination[Bobs.Promoter.Columns.WillCheckCardsForPurchasedTickets] = source[Bobs.Promoter.Columns.WillCheckCardsForPurchasedTickets];
			destination[Bobs.Promoter.Columns.SalesCampaignK] = source[Bobs.Promoter.Columns.SalesCampaignK];
			destination[Bobs.Promoter.Columns.CostPerCampaignCredit] = source[Bobs.Promoter.Columns.CostPerCampaignCredit];
			destination[Bobs.Promoter.Columns.SuspendReminderEmails] = source[Bobs.Promoter.Columns.SuspendReminderEmails];
		}
		
		public PromoterDataHolder(Promoter bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// The primary key
		/// </summary>
		public int K
		{
			get { return dataHolder.K; }
			set { this.dataHolder.K = value; }
		}
		/// <summary>
		/// Name of the Promoter / Event Promoter
		/// </summary>
		public string Name
		{
			get { return dataHolder.Name; }
			set { this.dataHolder.Name = value; }
		}
		/// <summary>
		/// Cropped image 100*100
		/// </summary>
		public Guid Pic
		{
			get { return dataHolder.Pic; }
			set { this.dataHolder.Pic = value; }
		}
		/// <summary>
		/// The user that first signed up this promoter
		/// </summary>
		public int PrimaryUsrK
		{
			get { return dataHolder.PrimaryUsrK; }
			set { this.dataHolder.PrimaryUsrK = value; }
		}
		/// <summary>
		/// Name of primary contact
		/// </summary>
		public string ContactName
		{
			get { return dataHolder.ContactName; }
			set { this.dataHolder.ContactName = value; }
		}
		/// <summary>
		/// Name of the company for billing purpouses
		/// </summary>
		public string CompanyName
		{
			get { return dataHolder.CompanyName; }
			set { this.dataHolder.CompanyName = value; }
		}
		/// <summary>
		/// The email address to send paypal payments to
		/// </summary>
		public string PayPalAddress
		{
			get { return dataHolder.PayPalAddress; }
			set { this.dataHolder.PayPalAddress = value; }
		}
		/// <summary>
		/// Contact phone number
		/// </summary>
		public string PhoneNumber
		{
			get { return dataHolder.PhoneNumber; }
			set { this.dataHolder.PhoneNumber = value; }
		}
		/// <summary>
		/// Billing address street
		/// </summary>
		public string AddressStreet
		{
			get { return dataHolder.AddressStreet; }
			set { this.dataHolder.AddressStreet = value; }
		}
		/// <summary>
		/// Billing address area
		/// </summary>
		public string AddressArea
		{
			get { return dataHolder.AddressArea; }
			set { this.dataHolder.AddressArea = value; }
		}
		/// <summary>
		/// Billing address town
		/// </summary>
		public string AddressTown
		{
			get { return dataHolder.AddressTown; }
			set { this.dataHolder.AddressTown = value; }
		}
		/// <summary>
		/// Billing address county
		/// </summary>
		public string AddressCounty
		{
			get { return dataHolder.AddressCounty; }
			set { this.dataHolder.AddressCounty = value; }
		}
		/// <summary>
		/// Billing address postcode
		/// </summary>
		public string AddressPostcode
		{
			get { return dataHolder.AddressPostcode; }
			set { this.dataHolder.AddressPostcode = value; }
		}
		/// <summary>
		/// Billing address country
		/// </summary>
		public int AddressCountryK
		{
			get { return dataHolder.AddressCountryK; }
			set { this.dataHolder.AddressCountryK = value; }
		}
		/// <summary>
		/// Base pricng is multiplied by this figure.
		/// </summary>
		public double PricingMultiplier
		{
			get { return dataHolder.PricingMultiplier; }
			set { this.dataHolder.PricingMultiplier = value; }
		}
		/// <summary>
		/// When the promoter first signed up
		/// </summary>
		public DateTime DateTimeSignUp
		{
			get { return dataHolder.DateTimeSignUp; }
			set { this.dataHolder.DateTimeSignUp = value; }
		}
		/// <summary>
		/// Status - AwaitingQuote=1, AwaitingPayment=2, Enabled=3, Disabled=4
		/// </summary>
		public int Status
		{
			get { return dataHolder.Status; }
			set { this.dataHolder.Status = value; }
		}
		/// <summary>
		/// The total paid by this promoter for services
		/// </summary>
		public decimal TotalPaid
		{
			get { return dataHolder.TotalPaid; }
			set { this.dataHolder.TotalPaid = value; }
		}
		/// <summary>
		/// The date that the promoters account expires and drops to limited functionality.
		/// </summary>
		public DateTime DateExpires
		{
			get { return dataHolder.DateExpires; }
			set { this.dataHolder.DateExpires = value; }
		}
		/// <summary>
		/// The fee for renewing membership
		/// </summary>
		public decimal RenewalFee
		{
			get { return dataHolder.RenewalFee; }
			set { this.dataHolder.RenewalFee = value; }
		}
		/// <summary>
		/// The number of months that the renewal fee is for
		/// </summary>
		public int RenewalMonths
		{
			get { return dataHolder.RenewalMonths; }
			set { this.dataHolder.RenewalMonths = value; }
		}
		/// <summary>
		/// Admin note
		/// </summary>
		public string AdminNote
		{
			get { return dataHolder.AdminNote; }
			set { this.dataHolder.AdminNote = value; }
		}
		/// <summary>
		/// Private message thread
		/// </summary>
		public int QuestionsThreadK
		{
			get { return dataHolder.QuestionsThreadK; }
			set { this.dataHolder.QuestionsThreadK = value; }
		}
		/// <summary>
		/// Guid used to ensure duplicate promoters don't get posted if the user refreshes the page after saving.
		/// </summary>
		public Guid DuplicateGuid
		{
			get { return dataHolder.DuplicateGuid; }
			set { this.dataHolder.DuplicateGuid = value; }
		}
		/// <summary>
		/// Unique name used in the url
		/// </summary>
		public string UrlName
		{
			get { return dataHolder.UrlName; }
			set { this.dataHolder.UrlName = value; }
		}
		/// <summary>
		/// Can the promoter set up guestlist?
		/// </summary>
		public bool HasGuestlist
		{
			get { return dataHolder.HasGuestlist; }
			set { this.dataHolder.HasGuestlist = value; }
		}
		/// <summary>
		/// Charge per name on the guestlist...
		/// </summary>
		public decimal GuestlistCharge
		{
			get { return dataHolder.GuestlistCharge; }
			set { this.dataHolder.GuestlistCharge = value; }
		}
		/// <summary>
		/// Number of guestlist credits that the promoter has
		/// </summary>
		public int GuestlistCredit
		{
			get { return dataHolder.GuestlistCredit; }
			set { this.dataHolder.GuestlistCredit = value; }
		}
		/// <summary>
		/// Amount that the promoter is alowed to go overdrawn on their guestlist credits
		/// </summary>
		public int GuestlistCreditLimit
		{
			get { return dataHolder.GuestlistCreditLimit; }
			set { this.dataHolder.GuestlistCreditLimit = value; }
		}
		/// <summary>
		/// State var used to reconstruct cropper when re-cropping
		/// </summary>
		public string PicState
		{
			get { return dataHolder.PicState; }
			set { this.dataHolder.PicState = value; }
		}
		/// <summary>
		/// The Photo that was used to create the Pic.
		/// </summary>
		public int PicPhotoK
		{
			get { return dataHolder.PicPhotoK; }
			set { this.dataHolder.PicPhotoK = value; }
		}
		/// <summary>
		/// The Misc that was used to create the Pic.
		/// </summary>
		public int PicMiscK
		{
			get { return dataHolder.PicMiscK; }
			set { this.dataHolder.PicMiscK = value; }
		}
		/// <summary>
		/// Calculated number of clients per month through the door
		/// </summary>
		public int ClientsPerMonth
		{
			get { return dataHolder.ClientsPerMonth; }
			set { this.dataHolder.ClientsPerMonth = value; }
		}
		/// <summary>
		/// Id of the last message that was successfully sent to this promoter (used in case PM sender fails)
		/// </summary>
		public int LastMessage
		{
			get { return dataHolder.LastMessage; }
			set { this.dataHolder.LastMessage = value; }
		}
		/// <summary>
		/// Plain text editable by sales person, only used when idle or proactive
		/// </summary>
		public string ManualNote
		{
			get { return dataHolder.ManualNote; }
			set { this.dataHolder.ManualNote = value; }
		}
		/// <summary>
		/// Credit limit in pounds
		/// </summary>
		public decimal CreditLimit
		{
			get { return dataHolder.CreditLimit; }
			set { this.dataHolder.CreditLimit = value; }
		}
		/// <summary>
		/// When are invoices due (days) 0 = default
		/// </summary>
		public int InvoiceDueDays
		{
			get { return dataHolder.InvoiceDueDays; }
			set { this.dataHolder.InvoiceDueDays = value; }
		}
		/// <summary>
		/// When was this promoter first enabled?
		/// </summary>
		public DateTime EnabledDateTime
		{
			get { return dataHolder.EnabledDateTime; }
			set { this.dataHolder.EnabledDateTime = value; }
		}
		/// <summary>
		/// Whick admin user enabled this promoter?
		/// </summary>
		public int EnabledByUsrK
		{
			get { return dataHolder.EnabledByUsrK; }
			set { this.dataHolder.EnabledByUsrK = value; }
		}
		/// <summary>
		/// The sales person who owns the account / owned this account before expires date
		/// </summary>
		public int SalesUsrK
		{
			get { return dataHolder.SalesUsrK; }
			set { this.dataHolder.SalesUsrK = value; }
		}
		/// <summary>
		/// Status of this client before expires date (1 = New, 2 = Idle, 3 = Proactive, 4 = Active)
		/// </summary>
		public int SalesStatus
		{
			get { return dataHolder.SalesStatus; }
			set { this.dataHolder.SalesStatus = value; }
		}
		/// <summary>
		/// Date time when this client's sales status expires, and they become idle
		/// </summary>
		public DateTime? SalesStatusExpires
		{
			get { return dataHolder.SalesStatusExpires; }
			set { this.dataHolder.SalesStatusExpires = value; }
		}
		/// <summary>
		/// When to make the next call - used when someone requests to be called back in a month or something
		/// </summary>
		public DateTime SalesNextCall
		{
			get { return dataHolder.SalesNextCall; }
			set { this.dataHolder.SalesNextCall = value; }
		}
		/// <summary>
		/// What type of letter are we about to send this promoter? 1 = CurrentNewPromoter, 2 = CurrentIdlePromoter, 3 = CurrentActivePromoter, 4 = AutoVenue
		/// </summary>
		public int LetterType
		{
			get { return dataHolder.LetterType; }
			set { this.dataHolder.LetterType = value; }
		}
		/// <summary>
		/// What is the printing status? 1 = New, 2 = Printing, 3 = Posted
		/// </summary>
		public int LetterStatus
		{
			get { return dataHolder.LetterStatus; }
			set { this.dataHolder.LetterStatus = value; }
		}
		/// <summary>
		/// Is the account a skeleton account? (missing some contact details)
		/// </summary>
		public bool IsSkeleton
		{
			get { return dataHolder.IsSkeleton; }
			set { this.dataHolder.IsSkeleton = value; }
		}
		/// <summary>
		/// Four digit random number used to auth access code
		/// </summary>
		public string AccessCodeRandom
		{
			get { return dataHolder.AccessCodeRandom; }
			set { this.dataHolder.AccessCodeRandom = value; }
		}
		/// <summary>
		/// Which offer type are we showing?
		/// </summary>
		public int OfferType
		{
			get { return dataHolder.OfferType; }
			set { this.dataHolder.OfferType = value; }
		}
		/// <summary>
		/// When does the offer expire?
		/// </summary>
		public DateTime OfferExpireDateTime
		{
			get { return dataHolder.OfferExpireDateTime; }
			set { this.dataHolder.OfferExpireDateTime = value; }
		}
		/// <summary>
		/// Estimation of how good the client will be 0=not rated, 1=crap, 2=ok, 3=good, 4=excellent
		/// </summary>
		public int SalesEstimate
		{
			get { return dataHolder.SalesEstimate; }
			set { this.dataHolder.SalesEstimate = value; }
		}
		/// <summary>
		/// Is this promoter account on hold? (No sales calls)
		/// </summary>
		public bool SalesHold
		{
			get { return dataHolder.SalesHold; }
			set { this.dataHolder.SalesHold = value; }
		}
		/// <summary>
		/// Number of future events, updated overnight and when brands are added...
		/// </summary>
		public int FutureEvents
		{
			get { return dataHolder.FutureEvents; }
			set { this.dataHolder.FutureEvents = value; }
		}
		/// <summary>
		/// To disable the redirect when promoter account has overdue invoices for an extended period
		/// </summary>
		public bool DisableOverdueRedirect
		{
			get { return dataHolder.DisableOverdueRedirect; }
			set { this.dataHolder.DisableOverdueRedirect = value; }
		}
		/// <summary>
		/// Email of primary contact
		/// </summary>
		public string ContactEmail
		{
			get { return dataHolder.ContactEmail; }
			set { this.dataHolder.ContactEmail = value; }
		}
		/// <summary>
		/// Title of primary contact
		/// </summary>
		public string ContactTitle
		{
			get { return dataHolder.ContactTitle; }
			set { this.dataHolder.ContactTitle = value; }
		}
		/// <summary>
		/// Personal title of primary contact
		/// </summary>
		public string ContactPersonalTitle
		{
			get { return dataHolder.ContactPersonalTitle; }
			set { this.dataHolder.ContactPersonalTitle = value; }
		}
		/// <summary>
		/// Promoter's 2nd phone number
		/// </summary>
		public string PhoneNumber2
		{
			get { return dataHolder.PhoneNumber2; }
			set { this.dataHolder.PhoneNumber2 = value; }
		}
		/// <summary>
		/// Promoter's primary website address
		/// </summary>
		public string WebAddress
		{
			get { return dataHolder.WebAddress; }
			set { this.dataHolder.WebAddress = value; }
		}
		/// <summary>
		/// Alarm for SalesUsr when next call time arrives
		/// </summary>
		public bool Alarm
		{
			get { return dataHolder.Alarm; }
			set { this.dataHolder.Alarm = value; }
		}
		/// <summary>
		/// Name of accounts contact
		/// </summary>
		public string AccountsName
		{
			get { return dataHolder.AccountsName; }
			set { this.dataHolder.AccountsName = value; }
		}
		/// <summary>
		/// Email of accounts contact
		/// </summary>
		public string AccountsEmail
		{
			get { return dataHolder.AccountsEmail; }
			set { this.dataHolder.AccountsEmail = value; }
		}
		/// <summary>
		/// Phone number of accounts contact
		/// </summary>
		public string AccountsPhone
		{
			get { return dataHolder.AccountsPhone; }
			set { this.dataHolder.AccountsPhone = value; }
		}
		/// <summary>
		/// Client Sector: Promoter, Agency, Mobile operator, etc.
		/// </summary>
		public int ClientSector
		{
			get { return dataHolder.ClientSector; }
			set { this.dataHolder.ClientSector = value; }
		}
		/// <summary>
		/// Has Promoter completed tickets/credit application form and been approved
		/// </summary>
		public bool EnableTickets
		{
			get { return dataHolder.EnableTickets; }
			set { this.dataHolder.EnableTickets = value; }
		}
		/// <summary>
		/// Enum for Promoter's VAT status: 0 = unknown, 1 = not registered, 2 = registered
		/// </summary>
		public int VatStatus
		{
			get { return dataHolder.VatStatus; }
			set { this.dataHolder.VatStatus = value; }
		}
		/// <summary>
		/// Promoter's VAT number
		/// </summary>
		public string VatNumber
		{
			get { return dataHolder.VatNumber; }
			set { this.dataHolder.VatNumber = value; }
		}
		/// <summary>
		/// Country K in which the Promoter is VAT registered
		/// </summary>
		public int VatCountryK
		{
			get { return dataHolder.VatCountryK; }
			set { this.dataHolder.VatCountryK = value; }
		}
		/// <summary>
		/// Who was the promoter added by (e.g. for sales admins)
		/// </summary>
		public int AddedByUsrK
		{
			get { return dataHolder.AddedByUsrK; }
			set { this.dataHolder.AddedByUsrK = value; }
		}
		/// <summary>
		/// How was this promoter added to the site (1=By end user on the site, 2=By sales user in the backend, 3=By automated import)
		/// </summary>
		public int AddedMethod
		{
			get { return dataHolder.AddedMethod; }
			set { this.dataHolder.AddedMethod = value; }
		}
		/// <summary>
		/// Promoter's bank name
		/// </summary>
		public string BankName
		{
			get { return dataHolder.BankName; }
			set { this.dataHolder.BankName = value; }
		}
		/// <summary>
		/// Promoter's bank account name
		/// </summary>
		public string BankAccountName
		{
			get { return dataHolder.BankAccountName; }
			set { this.dataHolder.BankAccountName = value; }
		}
		/// <summary>
		/// Promoter's bank account sort code
		/// </summary>
		public string BankAccountSortCode
		{
			get { return dataHolder.BankAccountSortCode; }
			set { this.dataHolder.BankAccountSortCode = value; }
		}
		/// <summary>
		/// Promoter's bank account number
		/// </summary>
		public string BankAccountNumber
		{
			get { return dataHolder.BankAccountNumber; }
			set { this.dataHolder.BankAccountNumber = value; }
		}
		/// <summary>
		/// Override applying of ticket funds to unpaid invoices
		/// </summary>
		public bool OverrideApplyTicketFundsToInvoices
		{
			get { return dataHolder.OverrideApplyTicketFundsToInvoices; }
			set { this.dataHolder.OverrideApplyTicketFundsToInvoices = value; }
		}
		/// <summary>
		/// Number of sales calls made to this promoter
		/// </summary>
		public int SalesCallCount
		{
			get { return dataHolder.SalesCallCount; }
			set { this.dataHolder.SalesCallCount = value; }
		}
		/// <summary>
		/// Has this promoter been recently transferred to this sales user?
		/// </summary>
		public bool RecentlyTransferred
		{
			get { return dataHolder.RecentlyTransferred; }
			set { this.dataHolder.RecentlyTransferred = value; }
		}
		/// <summary>
		/// if the promoter is an agency or not
		/// </summary>
		public bool IsAgency
		{
			get { return dataHolder.IsAgency; }
			set { this.dataHolder.IsAgency = value; }
		}
		/// <summary>
		/// Discount percentage as an integer
		/// </summary>
		public int Discount
		{
			get { return dataHolder.Discount; }
			set { this.dataHolder.Discount = value; }
		}
		/// <summary>
		/// Add a random code to tickets, to be displayed on doorlists
		/// </summary>
		public bool AddRandomCodeToTickets
		{
			get { return dataHolder.AddRandomCodeToTickets; }
			set { this.dataHolder.AddRandomCodeToTickets = value; }
		}
		/// <summary>
		/// Does this promoter want to confirm card details with us to avoid responsibility for card payments?
		/// </summary>
		public bool WillCheckCardsForPurchasedTickets
		{
			get { return dataHolder.WillCheckCardsForPurchasedTickets; }
			set { this.dataHolder.WillCheckCardsForPurchasedTickets = value; }
		}
		/// <summary>
		/// If this promoter was added in a sales campaign, this is it
		/// </summary>
		public int SalesCampaignK
		{
			get { return dataHolder.SalesCampaignK; }
			set { this.dataHolder.SalesCampaignK = value; }
		}
		/// <summary>
		/// Cost per campaign credit
		/// </summary>
		public decimal CostPerCampaignCredit
		{
			get { return dataHolder.CostPerCampaignCredit; }
			set { this.dataHolder.CostPerCampaignCredit = value; }
		}
		/// <summary>
		/// Dont send this promoter reminder emails when they havent paid
		/// </summary>
		public bool SuspendReminderEmails
		{
			get { return dataHolder.SuspendReminderEmails; }
			set { this.dataHolder.SuspendReminderEmails = value; }
		}
		#endregion
		public Promoter Promoter
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new Promoter(K);
					}
					else
					{
						bob = new Promoter();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region PromoterSet
	public partial class PromoterSet : BobSet, IEnumerable<Promoter>
	{
		public PromoterSet(Query query) : base(query) { }

		public Promoter this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new Promoter(this);
					((Promoter)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (Promoter)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new PromoterTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<Promoter> ToList()
		{
			List<Promoter> list = new List<Promoter>();
			foreach (Promoter item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<Promoter> Members

		public new IEnumerator<Promoter> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region PromoterTableDef
	public class PromoterTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "Promoter";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "3B1D9CDA";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return Promoter.GetColumnName((Promoter.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.Promoter;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return true;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return Promoter.Columns.K;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			Promoter.Columns c = (Promoter.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case Promoter.Columns.K: ColumnStore[i] = new ColumnDef(c, "K", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey | SqlColumnFlag.AutoNumber, null); break;
					case Promoter.Columns.Name: ColumnStore[i] = new ColumnDef(c, "Name", SqlDbType.VarChar, 200, ""); break;
					case Promoter.Columns.Pic: ColumnStore[i] = new ColumnDef(c, "Pic", SqlDbType.UniqueIdentifier, Guid.Empty); break;
					case Promoter.Columns.PrimaryUsrK: ColumnStore[i] = new ColumnDef(c, "PrimaryUsrK", SqlDbType.Int, 0); break;
					case Promoter.Columns.ContactName: ColumnStore[i] = new ColumnDef(c, "ContactName", SqlDbType.VarChar, 200, ""); break;
					case Promoter.Columns.CompanyName: ColumnStore[i] = new ColumnDef(c, "CompanyName", SqlDbType.VarChar, 200, ""); break;
					case Promoter.Columns.PayPalAddress: ColumnStore[i] = new ColumnDef(c, "PayPalAddress", SqlDbType.VarChar, 200, ""); break;
					case Promoter.Columns.PhoneNumber: ColumnStore[i] = new ColumnDef(c, "PhoneNumber", SqlDbType.VarChar, 200, ""); break;
					case Promoter.Columns.AddressStreet: ColumnStore[i] = new ColumnDef(c, "AddressStreet", SqlDbType.VarChar, 200, ""); break;
					case Promoter.Columns.AddressArea: ColumnStore[i] = new ColumnDef(c, "AddressArea", SqlDbType.VarChar, 200, ""); break;
					case Promoter.Columns.AddressTown: ColumnStore[i] = new ColumnDef(c, "AddressTown", SqlDbType.VarChar, 200, ""); break;
					case Promoter.Columns.AddressCounty: ColumnStore[i] = new ColumnDef(c, "AddressCounty", SqlDbType.VarChar, 200, ""); break;
					case Promoter.Columns.AddressPostcode: ColumnStore[i] = new ColumnDef(c, "AddressPostcode", SqlDbType.VarChar, 200, ""); break;
					case Promoter.Columns.AddressCountryK: ColumnStore[i] = new ColumnDef(c, "AddressCountryK", SqlDbType.Int, 0); break;
					case Promoter.Columns.PricingMultiplier: ColumnStore[i] = new ColumnDef(c, "PricingMultiplier", SqlDbType.Float, 0.0); break;
					case Promoter.Columns.DateTimeSignUp: ColumnStore[i] = new ColumnDef(c, "DateTimeSignUp", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case Promoter.Columns.Status: ColumnStore[i] = new ColumnDef(c, "Status", SqlDbType.Int, 0); break;
					case Promoter.Columns.TotalPaid: ColumnStore[i] = new ColumnDef(c, "TotalPaid", SqlDbType.Decimal, 20, 0m); break;
					case Promoter.Columns.DateExpires: ColumnStore[i] = new ColumnDef(c, "DateExpires", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case Promoter.Columns.RenewalFee: ColumnStore[i] = new ColumnDef(c, "RenewalFee", SqlDbType.Decimal, 20, 0m); break;
					case Promoter.Columns.RenewalMonths: ColumnStore[i] = new ColumnDef(c, "RenewalMonths", SqlDbType.Int, 0); break;
					case Promoter.Columns.AdminNote: ColumnStore[i] = new ColumnDef(c, "AdminNote", SqlDbType.Text, ""); break;
					case Promoter.Columns.QuestionsThreadK: ColumnStore[i] = new ColumnDef(c, "QuestionsThreadK", SqlDbType.Int, 0); break;
					case Promoter.Columns.DuplicateGuid: ColumnStore[i] = new ColumnDef(c, "DuplicateGuid", SqlDbType.UniqueIdentifier, Guid.Empty); break;
					case Promoter.Columns.UrlName: ColumnStore[i] = new ColumnDef(c, "UrlName", SqlDbType.VarChar, 200, ""); break;
					case Promoter.Columns.HasGuestlist: ColumnStore[i] = new ColumnDef(c, "HasGuestlist", SqlDbType.Bit, false); break;
					case Promoter.Columns.GuestlistCharge: ColumnStore[i] = new ColumnDef(c, "GuestlistCharge", SqlDbType.Decimal, 20, 0m); break;
					case Promoter.Columns.GuestlistCredit: ColumnStore[i] = new ColumnDef(c, "GuestlistCredit", SqlDbType.Int, 0); break;
					case Promoter.Columns.GuestlistCreditLimit: ColumnStore[i] = new ColumnDef(c, "GuestlistCreditLimit", SqlDbType.Int, 0); break;
					case Promoter.Columns.PicState: ColumnStore[i] = new ColumnDef(c, "PicState", SqlDbType.VarChar, 100, ""); break;
					case Promoter.Columns.PicPhotoK: ColumnStore[i] = new ColumnDef(c, "PicPhotoK", SqlDbType.Int, 0); break;
					case Promoter.Columns.PicMiscK: ColumnStore[i] = new ColumnDef(c, "PicMiscK", SqlDbType.Int, 0); break;
					case Promoter.Columns.ClientsPerMonth: ColumnStore[i] = new ColumnDef(c, "ClientsPerMonth", SqlDbType.Int, 0); break;
					case Promoter.Columns.LastMessage: ColumnStore[i] = new ColumnDef(c, "LastMessage", SqlDbType.Int, 0); break;
					case Promoter.Columns.ManualNote: ColumnStore[i] = new ColumnDef(c, "ManualNote", SqlDbType.Text, ""); break;
					case Promoter.Columns.CreditLimit: ColumnStore[i] = new ColumnDef(c, "CreditLimit", SqlDbType.Decimal, 20, 0m); break;
					case Promoter.Columns.InvoiceDueDays: ColumnStore[i] = new ColumnDef(c, "InvoiceDueDays", SqlDbType.Int, 0); break;
					case Promoter.Columns.EnabledDateTime: ColumnStore[i] = new ColumnDef(c, "EnabledDateTime", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case Promoter.Columns.EnabledByUsrK: ColumnStore[i] = new ColumnDef(c, "EnabledByUsrK", SqlDbType.Int, 0); break;
					case Promoter.Columns.SalesUsrK: ColumnStore[i] = new ColumnDef(c, "SalesUsrK", SqlDbType.Int, 0); break;
					case Promoter.Columns.SalesStatus: ColumnStore[i] = new ColumnDef(c, "SalesStatus", SqlDbType.Int, 0); break;
					case Promoter.Columns.SalesStatusExpires: ColumnStore[i] = new ColumnDef(c, "SalesStatusExpires", SqlDbType.DateTime, 16, null); break;
					case Promoter.Columns.SalesNextCall: ColumnStore[i] = new ColumnDef(c, "SalesNextCall", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case Promoter.Columns.LetterType: ColumnStore[i] = new ColumnDef(c, "LetterType", SqlDbType.Int, 0); break;
					case Promoter.Columns.LetterStatus: ColumnStore[i] = new ColumnDef(c, "LetterStatus", SqlDbType.Int, 0); break;
					case Promoter.Columns.IsSkeleton: ColumnStore[i] = new ColumnDef(c, "IsSkeleton", SqlDbType.Bit, false); break;
					case Promoter.Columns.AccessCodeRandom: ColumnStore[i] = new ColumnDef(c, "AccessCodeRandom", SqlDbType.VarChar, ""); break;
					case Promoter.Columns.OfferType: ColumnStore[i] = new ColumnDef(c, "OfferType", SqlDbType.Int, 0); break;
					case Promoter.Columns.OfferExpireDateTime: ColumnStore[i] = new ColumnDef(c, "OfferExpireDateTime", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case Promoter.Columns.SalesEstimate: ColumnStore[i] = new ColumnDef(c, "SalesEstimate", SqlDbType.Int, 0); break;
					case Promoter.Columns.SalesHold: ColumnStore[i] = new ColumnDef(c, "SalesHold", SqlDbType.Bit, false); break;
					case Promoter.Columns.FutureEvents: ColumnStore[i] = new ColumnDef(c, "FutureEvents", SqlDbType.Int, 0); break;
					case Promoter.Columns.DisableOverdueRedirect: ColumnStore[i] = new ColumnDef(c, "DisableOverdueRedirect", SqlDbType.Bit, false); break;
					case Promoter.Columns.ContactEmail: ColumnStore[i] = new ColumnDef(c, "ContactEmail", SqlDbType.VarChar, 200, ""); break;
					case Promoter.Columns.ContactTitle: ColumnStore[i] = new ColumnDef(c, "ContactTitle", SqlDbType.VarChar, 200, ""); break;
					case Promoter.Columns.ContactPersonalTitle: ColumnStore[i] = new ColumnDef(c, "ContactPersonalTitle", SqlDbType.VarChar, ""); break;
					case Promoter.Columns.PhoneNumber2: ColumnStore[i] = new ColumnDef(c, "PhoneNumber2", SqlDbType.VarChar, 200, ""); break;
					case Promoter.Columns.WebAddress: ColumnStore[i] = new ColumnDef(c, "WebAddress", SqlDbType.VarChar, 200, ""); break;
					case Promoter.Columns.Alarm: ColumnStore[i] = new ColumnDef(c, "Alarm", SqlDbType.Bit, false); break;
					case Promoter.Columns.AccountsName: ColumnStore[i] = new ColumnDef(c, "AccountsName", SqlDbType.VarChar, 200, ""); break;
					case Promoter.Columns.AccountsEmail: ColumnStore[i] = new ColumnDef(c, "AccountsEmail", SqlDbType.VarChar, 200, ""); break;
					case Promoter.Columns.AccountsPhone: ColumnStore[i] = new ColumnDef(c, "AccountsPhone", SqlDbType.VarChar, 200, ""); break;
					case Promoter.Columns.ClientSector: ColumnStore[i] = new ColumnDef(c, "ClientSector", SqlDbType.Int, 0); break;
					case Promoter.Columns.EnableTickets: ColumnStore[i] = new ColumnDef(c, "EnableTickets", SqlDbType.Bit, false); break;
					case Promoter.Columns.VatStatus: ColumnStore[i] = new ColumnDef(c, "VatStatus", SqlDbType.Int, 0); break;
					case Promoter.Columns.VatNumber: ColumnStore[i] = new ColumnDef(c, "VatNumber", SqlDbType.VarChar, ""); break;
					case Promoter.Columns.VatCountryK: ColumnStore[i] = new ColumnDef(c, "VatCountryK", SqlDbType.Int, 0); break;
					case Promoter.Columns.AddedByUsrK: ColumnStore[i] = new ColumnDef(c, "AddedByUsrK", SqlDbType.Int, 0); break;
					case Promoter.Columns.AddedMethod: ColumnStore[i] = new ColumnDef(c, "AddedMethod", SqlDbType.Int, 0); break;
					case Promoter.Columns.BankName: ColumnStore[i] = new ColumnDef(c, "BankName", SqlDbType.VarChar, 100, ""); break;
					case Promoter.Columns.BankAccountName: ColumnStore[i] = new ColumnDef(c, "BankAccountName", SqlDbType.VarChar, 100, ""); break;
					case Promoter.Columns.BankAccountSortCode: ColumnStore[i] = new ColumnDef(c, "BankAccountSortCode", SqlDbType.VarChar, ""); break;
					case Promoter.Columns.BankAccountNumber: ColumnStore[i] = new ColumnDef(c, "BankAccountNumber", SqlDbType.VarChar, ""); break;
					case Promoter.Columns.OverrideApplyTicketFundsToInvoices: ColumnStore[i] = new ColumnDef(c, "OverrideApplyTicketFundsToInvoices", SqlDbType.Bit, false); break;
					case Promoter.Columns.SalesCallCount: ColumnStore[i] = new ColumnDef(c, "SalesCallCount", SqlDbType.Int, 0); break;
					case Promoter.Columns.RecentlyTransferred: ColumnStore[i] = new ColumnDef(c, "RecentlyTransferred", SqlDbType.Bit, false); break;
					case Promoter.Columns.IsAgency: ColumnStore[i] = new ColumnDef(c, "IsAgency", SqlDbType.Bit, false); break;
					case Promoter.Columns.Discount: ColumnStore[i] = new ColumnDef(c, "Discount", SqlDbType.Int, 0); break;
					case Promoter.Columns.AddRandomCodeToTickets: ColumnStore[i] = new ColumnDef(c, "AddRandomCodeToTickets", SqlDbType.Bit, false); break;
					case Promoter.Columns.WillCheckCardsForPurchasedTickets: ColumnStore[i] = new ColumnDef(c, "WillCheckCardsForPurchasedTickets", SqlDbType.Bit, false); break;
					case Promoter.Columns.SalesCampaignK: ColumnStore[i] = new ColumnDef(c, "SalesCampaignK", SqlDbType.Int, 0); break;
					case Promoter.Columns.CostPerCampaignCredit: ColumnStore[i] = new ColumnDef(c, "CostPerCampaignCredit", SqlDbType.Decimal, 20, 0m); break;
					case Promoter.Columns.SuspendReminderEmails: ColumnStore[i] = new ColumnDef(c, "SuspendReminderEmails", SqlDbType.Bit, false); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(Promoter.Columns.K);
						InitColumn(Promoter.Columns.Name);
						InitColumn(Promoter.Columns.Pic);
						InitColumn(Promoter.Columns.PrimaryUsrK);
						InitColumn(Promoter.Columns.ContactName);
						InitColumn(Promoter.Columns.CompanyName);
						InitColumn(Promoter.Columns.PayPalAddress);
						InitColumn(Promoter.Columns.PhoneNumber);
						InitColumn(Promoter.Columns.AddressStreet);
						InitColumn(Promoter.Columns.AddressArea);
						InitColumn(Promoter.Columns.AddressTown);
						InitColumn(Promoter.Columns.AddressCounty);
						InitColumn(Promoter.Columns.AddressPostcode);
						InitColumn(Promoter.Columns.AddressCountryK);
						InitColumn(Promoter.Columns.PricingMultiplier);
						InitColumn(Promoter.Columns.DateTimeSignUp);
						InitColumn(Promoter.Columns.Status);
						InitColumn(Promoter.Columns.TotalPaid);
						InitColumn(Promoter.Columns.DateExpires);
						InitColumn(Promoter.Columns.RenewalFee);
						InitColumn(Promoter.Columns.RenewalMonths);
						InitColumn(Promoter.Columns.AdminNote);
						InitColumn(Promoter.Columns.QuestionsThreadK);
						InitColumn(Promoter.Columns.DuplicateGuid);
						InitColumn(Promoter.Columns.UrlName);
						InitColumn(Promoter.Columns.HasGuestlist);
						InitColumn(Promoter.Columns.GuestlistCharge);
						InitColumn(Promoter.Columns.GuestlistCredit);
						InitColumn(Promoter.Columns.GuestlistCreditLimit);
						InitColumn(Promoter.Columns.PicState);
						InitColumn(Promoter.Columns.PicPhotoK);
						InitColumn(Promoter.Columns.PicMiscK);
						InitColumn(Promoter.Columns.ClientsPerMonth);
						InitColumn(Promoter.Columns.LastMessage);
						InitColumn(Promoter.Columns.ManualNote);
						InitColumn(Promoter.Columns.CreditLimit);
						InitColumn(Promoter.Columns.InvoiceDueDays);
						InitColumn(Promoter.Columns.EnabledDateTime);
						InitColumn(Promoter.Columns.EnabledByUsrK);
						InitColumn(Promoter.Columns.SalesUsrK);
						InitColumn(Promoter.Columns.SalesStatus);
						InitColumn(Promoter.Columns.SalesStatusExpires);
						InitColumn(Promoter.Columns.SalesNextCall);
						InitColumn(Promoter.Columns.LetterType);
						InitColumn(Promoter.Columns.LetterStatus);
						InitColumn(Promoter.Columns.IsSkeleton);
						InitColumn(Promoter.Columns.AccessCodeRandom);
						InitColumn(Promoter.Columns.OfferType);
						InitColumn(Promoter.Columns.OfferExpireDateTime);
						InitColumn(Promoter.Columns.SalesEstimate);
						InitColumn(Promoter.Columns.SalesHold);
						InitColumn(Promoter.Columns.FutureEvents);
						InitColumn(Promoter.Columns.DisableOverdueRedirect);
						InitColumn(Promoter.Columns.ContactEmail);
						InitColumn(Promoter.Columns.ContactTitle);
						InitColumn(Promoter.Columns.ContactPersonalTitle);
						InitColumn(Promoter.Columns.PhoneNumber2);
						InitColumn(Promoter.Columns.WebAddress);
						InitColumn(Promoter.Columns.Alarm);
						InitColumn(Promoter.Columns.AccountsName);
						InitColumn(Promoter.Columns.AccountsEmail);
						InitColumn(Promoter.Columns.AccountsPhone);
						InitColumn(Promoter.Columns.ClientSector);
						InitColumn(Promoter.Columns.EnableTickets);
						InitColumn(Promoter.Columns.VatStatus);
						InitColumn(Promoter.Columns.VatNumber);
						InitColumn(Promoter.Columns.VatCountryK);
						InitColumn(Promoter.Columns.AddedByUsrK);
						InitColumn(Promoter.Columns.AddedMethod);
						InitColumn(Promoter.Columns.BankName);
						InitColumn(Promoter.Columns.BankAccountName);
						InitColumn(Promoter.Columns.BankAccountSortCode);
						InitColumn(Promoter.Columns.BankAccountNumber);
						InitColumn(Promoter.Columns.OverrideApplyTicketFundsToInvoices);
						InitColumn(Promoter.Columns.SalesCallCount);
						InitColumn(Promoter.Columns.RecentlyTransferred);
						InitColumn(Promoter.Columns.IsAgency);
						InitColumn(Promoter.Columns.Discount);
						InitColumn(Promoter.Columns.AddRandomCodeToTickets);
						InitColumn(Promoter.Columns.WillCheckCardsForPurchasedTickets);
						InitColumn(Promoter.Columns.SalesCampaignK);
						InitColumn(Promoter.Columns.CostPerCampaignCredit);
						InitColumn(Promoter.Columns.SuspendReminderEmails);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region PromoterUsr
	/// <summary>
	/// Lines promoter accounts to users
	/// </summary>
	public partial class PromoterUsr : Model.Entities.PromoterUsr, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// Link to Promoter table
			/// </summary>
			PromoterK = 0x00480001,
			/// <summary>
			/// Link to the Usr table
			/// </summary>
			UsrK = 0x00480002,
		}
		#endregion
		public static string GetColumnName(PromoterUsr.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case PromoterUsr.Columns.PromoterK: return "PromoterK";
						case PromoterUsr.Columns.UsrK: return "UsrK";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(PromoterUsr.Columns columnEnum)
		{
			switch (columnEnum)
			{
						default: return false;
			}
		}


		#region Common
	 
		public PromoterUsr(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);}
		public PromoterUsr()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.PromoterUsr);
		}
		public PromoterUsr(BobSet bs)
		{
			this.Bob = new Bob(Bobs.Tables.Defs.PromoterUsr, bs);
		}
		public PromoterUsr(IBob Parent, object Column) : this()
		{
			this.Bob.GetBobFromParentSimple(Parent, Column, TablesEnum.PromoterUsr);
		}
		public PromoterUsr(int PromoterK, int UsrK) : this()
		{
			this.Bob.GetBobFromPrimaryKeyArray(new Q[] {new Q(PromoterUsr.Columns.PromoterK,PromoterK), new Q(PromoterUsr.Columns.UsrK,UsrK)});
		} 
		#endregion

	}
	#endregion
	#region PromoterUsrTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region PromoterUsr
	/// <summary>
	/// Lines promoter accounts to users
	/// </summary>
	[Serializable]
	public partial class PromoterUsr 
	{
		
		#region Simple members
		/// <summary>
		/// Link to Promoter table
		/// </summary>
		public override int PromoterK
		{
			get { return (int)this[PromoterUsr.Columns.PromoterK]; }
			set { this[PromoterUsr.Columns.PromoterK] = value; }
		}
		/// <summary>
		/// Link to the Usr table
		/// </summary>
		public override int UsrK
		{
			get { return (int)this[PromoterUsr.Columns.UsrK]; }
			set { this[PromoterUsr.Columns.UsrK] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildPromoterUsrs
	{
		CachedSqlSelect<PromoterUsr> ChildPromoterUsrs();
		CachedSqlSelect<PromoterUsr> ChildPromoterUsrs(Q where);
		CachedSqlSelect<PromoterUsr> ChildPromoterUsrs(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<PromoterUsr> ChildPromoterUsrs(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class PromoterUsr 
		{
		}

	#region PromoterUsrDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region PromoterUsrDataHolder
	/// <summary>
	/// Lines promoter accounts to usersDataHolder
	/// </summary>
	[Serializable]
	public partial class PromoterUsrDataHolder : DataHolder<PromoterUsr>
	{
		PromoterUsr dataHolder;
		[NonSerializedAttribute] PromoterUsr bob;

		public PromoterUsrDataHolder()
		{
			this.dataHolder = new PromoterUsr();
		}
		
		void CopyValues(PromoterUsr source, PromoterUsr destination)
		{
			destination[Bobs.PromoterUsr.Columns.PromoterK] = source[Bobs.PromoterUsr.Columns.PromoterK];
			destination[Bobs.PromoterUsr.Columns.UsrK] = source[Bobs.PromoterUsr.Columns.UsrK];
		}
		
		public PromoterUsrDataHolder(PromoterUsr bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// Link to Promoter table
		/// </summary>
		public int PromoterK
		{
			get { return dataHolder.PromoterK; }
			set { this.dataHolder.PromoterK = value; }
		}
		/// <summary>
		/// Link to the Usr table
		/// </summary>
		public int UsrK
		{
			get { return dataHolder.UsrK; }
			set { this.dataHolder.UsrK = value; }
		}
		#endregion
		public PromoterUsr PromoterUsr
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new PromoterUsr(K);
					}
					else
					{
						bob = new PromoterUsr();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region PromoterUsrSet
	public partial class PromoterUsrSet : BobSet, IEnumerable<PromoterUsr>
	{
		public PromoterUsrSet(Query query) : base(query) { }

		public PromoterUsr this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new PromoterUsr(this);
					((PromoterUsr)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (PromoterUsr)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new PromoterUsrTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<PromoterUsr> ToList()
		{
			List<PromoterUsr> list = new List<PromoterUsr>();
			foreach (PromoterUsr item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<PromoterUsr> Members

		public new IEnumerator<PromoterUsr> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region PromoterUsrTableDef
	public class PromoterUsrTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "PromoterUsr";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "6F1F45E8";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return PromoterUsr.GetColumnName((PromoterUsr.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.PromoterUsr;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return false;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return null;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			PromoterUsr.Columns c = (PromoterUsr.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case PromoterUsr.Columns.PromoterK: ColumnStore[i] = new ColumnDef(c, "PromoterK", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey, 0); break;
					case PromoterUsr.Columns.UsrK: ColumnStore[i] = new ColumnDef(c, "UsrK", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey, 0); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(PromoterUsr.Columns.PromoterK);
						InitColumn(PromoterUsr.Columns.UsrK);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region Region
	/// <summary>
	/// A region is a sub-country - e.g. England/Scotland in the UK, or the States in the US.
	/// </summary>
	public partial class Region : Model.Entities.Region, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// The primary key
			/// </summary>
			K = 0x00490001,
			/// <summary>
			/// Link to the country table
			/// </summary>
			CountryK = 0x00490002,
			/// <summary>
			/// SubCountry in the Places table
			/// </summary>
			SubCountry = 0x00490003,
			/// <summary>
			/// Name
			/// </summary>
			Name = 0x00490004,
			/// <summary>
			/// Abbreviation (usually US state code)
			/// </summary>
			Abbreviation = 0x00490005,
			/// <summary>
			/// Population in thousands
			/// </summary>
			Population = 0x00490006,
			/// <summary>
			/// Area in sq km
			/// </summary>
			Area = 0x00490007,
		}
		#endregion
		public static string GetColumnName(Region.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case Region.Columns.K: return "K";
						case Region.Columns.CountryK: return "CountryK";
						case Region.Columns.SubCountry: return "SubCountry";
						case Region.Columns.Name: return "Name";
						case Region.Columns.Abbreviation: return "Abbreviation";
						case Region.Columns.Population: return "Population";
						case Region.Columns.Area: return "Area";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(Region.Columns columnEnum)
		{
			switch (columnEnum)
			{
											default: return false;
			}
		}


		#region Common
 
		public Region(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);  }
		public Region()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.Region);
		}
		public Region(BobSet bs)
		{
			this.Bob = new Bob(bs.Table, bs);
		}
		public Region(int RegionK, IBob Parent, object Column)
			: this()
		{
			Bob.GetBobFromParent(RegionK, Parent.Bob, Column, TablesEnum.Region);
		}
		public Region(int RegionK)
			: this()
		{
			Bob.GetBobFromPrimaryKey(RegionK);
		}
		#endregion

	}
	#endregion
	#region RegionTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region Region
	/// <summary>
	/// A region is a sub-country - e.g. England/Scotland in the UK, or the States in the US.
	/// </summary>
	[Serializable]
	public partial class Region 
	{
		
		#region Simple members
		/// <summary>
		/// The primary key
		/// </summary>
		public override int K
		{
			get { return (int)this[Region.Columns.K] as int? ?? 0 ; }
			set { this[Region.Columns.K] = value; }
		}
		/// <summary>
		/// Link to the country table
		/// </summary>
		public override int CountryK
		{
			get { return (int)this[Region.Columns.CountryK]; }
			set { this[Region.Columns.CountryK] = value; }
		}
		/// <summary>
		/// SubCountry in the Places table
		/// </summary>
		public override int SubCountry
		{
			get { return (int)this[Region.Columns.SubCountry]; }
			set { this[Region.Columns.SubCountry] = value; }
		}
		/// <summary>
		/// Name
		/// </summary>
		public override string Name
		{
			get { return (string)this[Region.Columns.Name]; }
			set { this[Region.Columns.Name] = value; }
		}
		/// <summary>
		/// Abbreviation (usually US state code)
		/// </summary>
		public override string Abbreviation
		{
			get { return (string)this[Region.Columns.Abbreviation]; }
			set { this[Region.Columns.Abbreviation] = value; }
		}
		/// <summary>
		/// Population in thousands
		/// </summary>
		public override double Population
		{
			get { return (double)this[Region.Columns.Population]; }
			set { this[Region.Columns.Population] = value; }
		}
		/// <summary>
		/// Area in sq km
		/// </summary>
		public override double Area
		{
			get { return (double)this[Region.Columns.Area]; }
			set { this[Region.Columns.Area] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildRegions
	{
		CachedSqlSelect<Region> ChildRegions();
		CachedSqlSelect<Region> ChildRegions(Q where);
		CachedSqlSelect<Region> ChildRegions(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<Region> ChildRegions(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class Region 
	 : 
	Bobs.ChildInterfaces.IHasChildPlaces
	,
	Bobs.ChildInterfaces.IHasChildThreads
		{
			public CachedSqlSelect<Place> ChildPlaces()
		{
			return this.ChildPlaces(null, null);
		}
		public CachedSqlSelect<Place> ChildPlaces(Q where)
		{
			return this.ChildPlaces(where, null);
		}
		public CachedSqlSelect<Place> ChildPlaces(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildPlaces(null, orderBy);
		}
		public CachedSqlSelect<Place> ChildPlaces(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<Place>
			(
				new Children<Place>
				(
					TablesEnum.Region, 
					this.K, 
					TablesEnum.Place, 
					dr => 
					{ 
						Place newPlace = new Place(); 
						newPlace.Initialise(dr); 
						return newPlace;
					},
					"E6E58561",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<Thread> ChildThreads()
		{
			return this.ChildThreads(null, null);
		}
		public CachedSqlSelect<Thread> ChildThreads(Q where)
		{
			return this.ChildThreads(where, null);
		}
		public CachedSqlSelect<Thread> ChildThreads(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildThreads(null, orderBy);
		}
		public CachedSqlSelect<Thread> ChildThreads(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<Thread>
			(
				new Children<Thread>
				(
					TablesEnum.Region, 
					this.K, 
					TablesEnum.Thread, 
					dr => 
					{ 
						Thread newThread = new Thread(); 
						newThread.Initialise(dr); 
						return newThread;
					},
					"4576C3F1",
					where,
					orderBy
				)
			);
		}
		}

	#region RegionDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region RegionDataHolder
	/// <summary>
	/// A region is a sub-country - e.g. England/Scotland in the UK, or the States in the US.DataHolder
	/// </summary>
	[Serializable]
	public partial class RegionDataHolder : DataHolder<Region>
	{
		Region dataHolder;
		[NonSerializedAttribute] Region bob;

		public RegionDataHolder()
		{
			this.dataHolder = new Region();
		}
		
		void CopyValues(Region source, Region destination)
		{
			destination[Bobs.Region.Columns.K] = source[Bobs.Region.Columns.K];
			destination[Bobs.Region.Columns.CountryK] = source[Bobs.Region.Columns.CountryK];
			destination[Bobs.Region.Columns.SubCountry] = source[Bobs.Region.Columns.SubCountry];
			destination[Bobs.Region.Columns.Name] = source[Bobs.Region.Columns.Name];
			destination[Bobs.Region.Columns.Abbreviation] = source[Bobs.Region.Columns.Abbreviation];
			destination[Bobs.Region.Columns.Population] = source[Bobs.Region.Columns.Population];
			destination[Bobs.Region.Columns.Area] = source[Bobs.Region.Columns.Area];
		}
		
		public RegionDataHolder(Region bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// The primary key
		/// </summary>
		public int K
		{
			get { return dataHolder.K; }
			set { this.dataHolder.K = value; }
		}
		/// <summary>
		/// Link to the country table
		/// </summary>
		public int CountryK
		{
			get { return dataHolder.CountryK; }
			set { this.dataHolder.CountryK = value; }
		}
		/// <summary>
		/// SubCountry in the Places table
		/// </summary>
		public int SubCountry
		{
			get { return dataHolder.SubCountry; }
			set { this.dataHolder.SubCountry = value; }
		}
		/// <summary>
		/// Name
		/// </summary>
		public string Name
		{
			get { return dataHolder.Name; }
			set { this.dataHolder.Name = value; }
		}
		/// <summary>
		/// Abbreviation (usually US state code)
		/// </summary>
		public string Abbreviation
		{
			get { return dataHolder.Abbreviation; }
			set { this.dataHolder.Abbreviation = value; }
		}
		/// <summary>
		/// Population in thousands
		/// </summary>
		public double Population
		{
			get { return dataHolder.Population; }
			set { this.dataHolder.Population = value; }
		}
		/// <summary>
		/// Area in sq km
		/// </summary>
		public double Area
		{
			get { return dataHolder.Area; }
			set { this.dataHolder.Area = value; }
		}
		#endregion
		public Region Region
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new Region(K);
					}
					else
					{
						bob = new Region();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region RegionSet
	public partial class RegionSet : BobSet, IEnumerable<Region>
	{
		public RegionSet(Query query) : base(query) { }

		public Region this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new Region(this);
					((Region)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (Region)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new RegionTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<Region> ToList()
		{
			List<Region> list = new List<Region>();
			foreach (Region item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<Region> Members

		public new IEnumerator<Region> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region RegionTableDef
	public class RegionTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "Region";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "5C2A5A71";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return Region.GetColumnName((Region.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.Region;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return true;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return Region.Columns.K;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			Region.Columns c = (Region.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case Region.Columns.K: ColumnStore[i] = new ColumnDef(c, "K", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey | SqlColumnFlag.AutoNumber, null); break;
					case Region.Columns.CountryK: ColumnStore[i] = new ColumnDef(c, "CountryK", SqlDbType.Int, 0); break;
					case Region.Columns.SubCountry: ColumnStore[i] = new ColumnDef(c, "SubCountry", SqlDbType.Int, 0); break;
					case Region.Columns.Name: ColumnStore[i] = new ColumnDef(c, "Name", SqlDbType.VarChar, 100, ""); break;
					case Region.Columns.Abbreviation: ColumnStore[i] = new ColumnDef(c, "Abbreviation", SqlDbType.VarChar, 10, ""); break;
					case Region.Columns.Population: ColumnStore[i] = new ColumnDef(c, "Population", SqlDbType.Float, 0.0); break;
					case Region.Columns.Area: ColumnStore[i] = new ColumnDef(c, "Area", SqlDbType.Float, 0.0); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(Region.Columns.K);
						InitColumn(Region.Columns.CountryK);
						InitColumn(Region.Columns.SubCountry);
						InitColumn(Region.Columns.Name);
						InitColumn(Region.Columns.Abbreviation);
						InitColumn(Region.Columns.Population);
						InitColumn(Region.Columns.Area);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region RoomPin
	/// <summary>
	/// Chat rooms pinned by users
	/// </summary>
	public partial class RoomPin : Model.Entities.RoomPin, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// Usr
			/// </summary>
			UsrK = 0x004a0001,
			/// <summary>
			/// Room
			/// </summary>
			RoomGuid = 0x004a0002,
			/// <summary>
			/// Date/time the room was last pinned
			/// </summary>
			DateTime = 0x004a0003,
			/// <summary>
			/// Order in this users list
			/// </summary>
			ListOrder = 0x004a0004,
			/// <summary>
			/// Set to false if the room is un-pinned
			/// </summary>
			Pinned = 0x004a0005,
			/// <summary>
			/// True if the pinned room expires
			/// </summary>
			Expires = 0x004a0006,
			/// <summary>
			/// If the pinned room expires, this is the expiry time
			/// </summary>
			DateTimeExpires = 0x004a0007,
			/// <summary>
			/// Is the room starred?
			/// </summary>
			Starred = 0x004a0008,
			/// <summary>
			/// The persisted room state
			/// </summary>
			StateStub = 0x004a0009,
		}
		#endregion
		public static string GetColumnName(RoomPin.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case RoomPin.Columns.UsrK: return "UsrK";
						case RoomPin.Columns.RoomGuid: return "RoomGuid";
						case RoomPin.Columns.DateTime: return "DateTime";
						case RoomPin.Columns.ListOrder: return "ListOrder";
						case RoomPin.Columns.Pinned: return "Pinned";
						case RoomPin.Columns.Expires: return "Expires";
						case RoomPin.Columns.DateTimeExpires: return "DateTimeExpires";
						case RoomPin.Columns.Starred: return "Starred";
						case RoomPin.Columns.StateStub: return "StateStub";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(RoomPin.Columns columnEnum)
		{
			switch (columnEnum)
			{
													default: return false;
			}
		}


		#region Common
	 
		public RoomPin(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);}
		public RoomPin()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.RoomPin);
		}
		public RoomPin(BobSet bs)
		{
			this.Bob = new Bob(Bobs.Tables.Defs.RoomPin, bs);
		}
		public RoomPin(IBob Parent, object Column) : this()
		{
			this.Bob.GetBobFromParentSimple(Parent, Column, TablesEnum.RoomPin);
		}
		public RoomPin(int UsrK, Guid RoomGuid) : this()
		{
			this.Bob.GetBobFromPrimaryKeyArray(new Q[] {new Q(RoomPin.Columns.UsrK,UsrK), new Q(RoomPin.Columns.RoomGuid,RoomGuid)});
		} 
		#endregion

	}
	#endregion
	#region RoomPinTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region RoomPin
	/// <summary>
	/// Chat rooms pinned by users
	/// </summary>
	[Serializable]
	public partial class RoomPin 
	{
		
		#region Simple members
		/// <summary>
		/// Usr
		/// </summary>
		public override int UsrK
		{
			get { return (int)this[RoomPin.Columns.UsrK]; }
			set { this[RoomPin.Columns.UsrK] = value; }
		}
		/// <summary>
		/// Room
		/// </summary>
		public Guid	RoomGuid
		{
			get{ return Cambro.Misc.Db.GuidConvertor(this[RoomPin.Columns.RoomGuid]);}		
			set{ this[RoomPin.Columns.RoomGuid] = new System.Data.SqlTypes.SqlGuid(value);}
		}
		/// <summary>
		/// Date/time the room was last pinned
		/// </summary>
		public override DateTime DateTime
		{
			get { return (DateTime)this[RoomPin.Columns.DateTime]; }
			set { this[RoomPin.Columns.DateTime] = value; }
		}
		/// <summary>
		/// Order in this users list
		/// </summary>
		public override int ListOrder
		{
			get { return (int)this[RoomPin.Columns.ListOrder]; }
			set { this[RoomPin.Columns.ListOrder] = value; }
		}
		/// <summary>
		/// Set to false if the room is un-pinned
		/// </summary>
		public override bool Pinned
		{
			get { return (bool)this[RoomPin.Columns.Pinned]; }
			set { this[RoomPin.Columns.Pinned] = value; }
		}
		/// <summary>
		/// True if the pinned room expires
		/// </summary>
		public override bool Expires
		{
			get { return (bool)this[RoomPin.Columns.Expires]; }
			set { this[RoomPin.Columns.Expires] = value; }
		}
		/// <summary>
		/// If the pinned room expires, this is the expiry time
		/// </summary>
		public override DateTime DateTimeExpires
		{
			get { return (DateTime)this[RoomPin.Columns.DateTimeExpires]; }
			set { this[RoomPin.Columns.DateTimeExpires] = value; }
		}
		/// <summary>
		/// Is the room starred?
		/// </summary>
		public override bool? Starred
		{
			get { return (bool?)this[RoomPin.Columns.Starred]; }
			set { this[RoomPin.Columns.Starred] = value; }
		}
		/// <summary>
		/// The persisted room state
		/// </summary>
		public override string StateStub
		{
			get { return (string)this[RoomPin.Columns.StateStub]; }
			set { this[RoomPin.Columns.StateStub] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildRoomPins
	{
		CachedSqlSelect<RoomPin> ChildRoomPins();
		CachedSqlSelect<RoomPin> ChildRoomPins(Q where);
		CachedSqlSelect<RoomPin> ChildRoomPins(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<RoomPin> ChildRoomPins(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class RoomPin 
		{
		}

	#region RoomPinDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region RoomPinDataHolder
	/// <summary>
	/// Chat rooms pinned by usersDataHolder
	/// </summary>
	[Serializable]
	public partial class RoomPinDataHolder : DataHolder<RoomPin>
	{
		RoomPin dataHolder;
		[NonSerializedAttribute] RoomPin bob;

		public RoomPinDataHolder()
		{
			this.dataHolder = new RoomPin();
		}
		
		void CopyValues(RoomPin source, RoomPin destination)
		{
			destination[Bobs.RoomPin.Columns.UsrK] = source[Bobs.RoomPin.Columns.UsrK];
			destination[Bobs.RoomPin.Columns.RoomGuid] = source[Bobs.RoomPin.Columns.RoomGuid];
			destination[Bobs.RoomPin.Columns.DateTime] = source[Bobs.RoomPin.Columns.DateTime];
			destination[Bobs.RoomPin.Columns.ListOrder] = source[Bobs.RoomPin.Columns.ListOrder];
			destination[Bobs.RoomPin.Columns.Pinned] = source[Bobs.RoomPin.Columns.Pinned];
			destination[Bobs.RoomPin.Columns.Expires] = source[Bobs.RoomPin.Columns.Expires];
			destination[Bobs.RoomPin.Columns.DateTimeExpires] = source[Bobs.RoomPin.Columns.DateTimeExpires];
			destination[Bobs.RoomPin.Columns.Starred] = source[Bobs.RoomPin.Columns.Starred];
			destination[Bobs.RoomPin.Columns.StateStub] = source[Bobs.RoomPin.Columns.StateStub];
		}
		
		public RoomPinDataHolder(RoomPin bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// Usr
		/// </summary>
		public int UsrK
		{
			get { return dataHolder.UsrK; }
			set { this.dataHolder.UsrK = value; }
		}
		/// <summary>
		/// Room
		/// </summary>
		public Guid RoomGuid
		{
			get { return dataHolder.RoomGuid; }
			set { this.dataHolder.RoomGuid = value; }
		}
		/// <summary>
		/// Date/time the room was last pinned
		/// </summary>
		public DateTime DateTime
		{
			get { return dataHolder.DateTime; }
			set { this.dataHolder.DateTime = value; }
		}
		/// <summary>
		/// Order in this users list
		/// </summary>
		public int ListOrder
		{
			get { return dataHolder.ListOrder; }
			set { this.dataHolder.ListOrder = value; }
		}
		/// <summary>
		/// Set to false if the room is un-pinned
		/// </summary>
		public bool Pinned
		{
			get { return dataHolder.Pinned; }
			set { this.dataHolder.Pinned = value; }
		}
		/// <summary>
		/// True if the pinned room expires
		/// </summary>
		public bool Expires
		{
			get { return dataHolder.Expires; }
			set { this.dataHolder.Expires = value; }
		}
		/// <summary>
		/// If the pinned room expires, this is the expiry time
		/// </summary>
		public DateTime DateTimeExpires
		{
			get { return dataHolder.DateTimeExpires; }
			set { this.dataHolder.DateTimeExpires = value; }
		}
		/// <summary>
		/// Is the room starred?
		/// </summary>
		public bool? Starred
		{
			get { return dataHolder.Starred; }
			set { this.dataHolder.Starred = value; }
		}
		/// <summary>
		/// The persisted room state
		/// </summary>
		public string StateStub
		{
			get { return dataHolder.StateStub; }
			set { this.dataHolder.StateStub = value; }
		}
		#endregion
		public RoomPin RoomPin
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new RoomPin(K);
					}
					else
					{
						bob = new RoomPin();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region RoomPinSet
	public partial class RoomPinSet : BobSet, IEnumerable<RoomPin>
	{
		public RoomPinSet(Query query) : base(query) { }

		public RoomPin this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new RoomPin(this);
					((RoomPin)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (RoomPin)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new RoomPinTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<RoomPin> ToList()
		{
			List<RoomPin> list = new List<RoomPin>();
			foreach (RoomPin item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<RoomPin> Members

		public new IEnumerator<RoomPin> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region RoomPinTableDef
	public class RoomPinTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "RoomPin";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "92EE52CA";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return RoomPin.GetColumnName((RoomPin.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.RoomPin;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return false;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return null;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			RoomPin.Columns c = (RoomPin.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case RoomPin.Columns.UsrK: ColumnStore[i] = new ColumnDef(c, "UsrK", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey, 0); break;
					case RoomPin.Columns.RoomGuid: ColumnStore[i] = new ColumnDef(c, "RoomGuid", SqlDbType.UniqueIdentifier, 16, SqlColumnFlag.PrimaryKey, Guid.Empty); break;
					case RoomPin.Columns.DateTime: ColumnStore[i] = new ColumnDef(c, "DateTime", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case RoomPin.Columns.ListOrder: ColumnStore[i] = new ColumnDef(c, "ListOrder", SqlDbType.Int, 0); break;
					case RoomPin.Columns.Pinned: ColumnStore[i] = new ColumnDef(c, "Pinned", SqlDbType.Bit, false); break;
					case RoomPin.Columns.Expires: ColumnStore[i] = new ColumnDef(c, "Expires", SqlDbType.Bit, false); break;
					case RoomPin.Columns.DateTimeExpires: ColumnStore[i] = new ColumnDef(c, "DateTimeExpires", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case RoomPin.Columns.Starred: ColumnStore[i] = new ColumnDef(c, "Starred", SqlDbType.Bit, null); break;
					case RoomPin.Columns.StateStub: ColumnStore[i] = new ColumnDef(c, "StateStub", SqlDbType.VarChar, 4096, null); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(RoomPin.Columns.UsrK);
						InitColumn(RoomPin.Columns.RoomGuid);
						InitColumn(RoomPin.Columns.DateTime);
						InitColumn(RoomPin.Columns.ListOrder);
						InitColumn(RoomPin.Columns.Pinned);
						InitColumn(RoomPin.Columns.Expires);
						InitColumn(RoomPin.Columns.DateTimeExpires);
						InitColumn(RoomPin.Columns.Starred);
						InitColumn(RoomPin.Columns.StateStub);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region SalesCall
	/// <summary>
	/// Sales phone call made / received by a sales person
	/// </summary>
	public partial class SalesCall : Model.Entities.SalesCall, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// Key
			/// </summary>
			K = 0x004b0001,
			/// <summary>
			/// Duplicate guid
			/// </summary>
			DuplicateGuid = 0x004b0002,
			/// <summary>
			/// The sales person
			/// </summary>
			UsrK = 0x004b0003,
			/// <summary>
			/// The promoter
			/// </summary>
			PromoterK = 0x004b0004,
			/// <summary>
			/// Start of the call
			/// </summary>
			DateTimeStart = 0x004b0005,
			/// <summary>
			/// End of the call
			/// </summary>
			DateTimeEnd = 0x004b0006,
			/// <summary>
			/// Duration in minutes
			/// </summary>
			Duration = 0x004b0007,
			/// <summary>
			/// Is the call still in progress?
			/// </summary>
			InProgress = 0x004b0008,
			/// <summary>
			/// 1 = Outgoing, 2 = Incoming
			/// </summary>
			Direction = 0x004b0009,
			/// <summary>
			/// 1 = Cold, 2 = ProactiveFollowUp, 3 = Active
			/// </summary>
			Type = 0x004b000a,
			/// <summary>
			/// Has the call got through to the right person?
			/// </summary>
			Effective = 0x004b000b,
			/// <summary>
			/// Is this a call or just a note?
			/// </summary>
			IsCall = 0x004b000c,
			/// <summary>
			/// Text note added by the sales person
			/// </summary>
			Note = 0x004b000d,
			/// <summary>
			/// Has the "hang up" button been clicked?
			/// </summary>
			Dismissed = 0x004b000e,
			/// <summary>
			/// Flag for important notes
			/// </summary>
			IsImportant = 0x004b000f,
			/// <summary>
			/// Is this a call to a promoter that was recently added to the site by the sales user?
			/// </summary>
			IsCallToNewLead = 0x004b0010,
		}
		#endregion
		public static string GetColumnName(SalesCall.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case SalesCall.Columns.K: return "K";
						case SalesCall.Columns.DuplicateGuid: return "DuplicateGuid";
						case SalesCall.Columns.UsrK: return "UsrK";
						case SalesCall.Columns.PromoterK: return "PromoterK";
						case SalesCall.Columns.DateTimeStart: return "DateTimeStart";
						case SalesCall.Columns.DateTimeEnd: return "DateTimeEnd";
						case SalesCall.Columns.Duration: return "Duration";
						case SalesCall.Columns.InProgress: return "InProgress";
						case SalesCall.Columns.Direction: return "Direction";
						case SalesCall.Columns.Type: return "Type";
						case SalesCall.Columns.Effective: return "Effective";
						case SalesCall.Columns.IsCall: return "IsCall";
						case SalesCall.Columns.Note: return "Note";
						case SalesCall.Columns.Dismissed: return "Dismissed";
						case SalesCall.Columns.IsImportant: return "IsImportant";
						case SalesCall.Columns.IsCallToNewLead: return "IsCallToNewLead";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(SalesCall.Columns columnEnum)
		{
			switch (columnEnum)
			{
																				default: return false;
			}
		}


		#region Common
 
		public SalesCall(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);  }
		public SalesCall()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.SalesCall);
		}
		public SalesCall(BobSet bs)
		{
			this.Bob = new Bob(bs.Table, bs);
		}
		public SalesCall(int SalesCallK, IBob Parent, object Column)
			: this()
		{
			Bob.GetBobFromParent(SalesCallK, Parent.Bob, Column, TablesEnum.SalesCall);
		}
		public SalesCall(int SalesCallK)
			: this()
		{
			Bob.GetBobFromPrimaryKey(SalesCallK);
		}
		#endregion

	}
	#endregion
	#region SalesCallTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region SalesCall
	/// <summary>
	/// Sales phone call made / received by a sales person
	/// </summary>
	[Serializable]
	public partial class SalesCall 
	{
		
		#region Simple members
		/// <summary>
		/// Key
		/// </summary>
		public override int K
		{
			get { return (int)this[SalesCall.Columns.K] as int? ?? 0 ; }
			set { this[SalesCall.Columns.K] = value; }
		}
		/// <summary>
		/// Duplicate guid
		/// </summary>
		public Guid	DuplicateGuid
		{
			get{ return Cambro.Misc.Db.GuidConvertor(this[SalesCall.Columns.DuplicateGuid]);}		
			set{ this[SalesCall.Columns.DuplicateGuid] = new System.Data.SqlTypes.SqlGuid(value);}
		}
		/// <summary>
		/// The sales person
		/// </summary>
		public override int UsrK
		{
			get { return (int)this[SalesCall.Columns.UsrK]; }
			set { this[SalesCall.Columns.UsrK] = value; }
		}
		/// <summary>
		/// The promoter
		/// </summary>
		public override int PromoterK
		{
			get { return (int)this[SalesCall.Columns.PromoterK]; }
			set { this[SalesCall.Columns.PromoterK] = value; }
		}
		/// <summary>
		/// Start of the call
		/// </summary>
		public override DateTime DateTimeStart
		{
			get { return (DateTime)this[SalesCall.Columns.DateTimeStart]; }
			set { this[SalesCall.Columns.DateTimeStart] = value; }
		}
		/// <summary>
		/// End of the call
		/// </summary>
		public override DateTime DateTimeEnd
		{
			get { return (DateTime)this[SalesCall.Columns.DateTimeEnd]; }
			set { this[SalesCall.Columns.DateTimeEnd] = value; }
		}
		/// <summary>
		/// Duration in minutes
		/// </summary>
		public override double Duration
		{
			get { return (double)this[SalesCall.Columns.Duration]; }
			set { this[SalesCall.Columns.Duration] = value; }
		}
		/// <summary>
		/// Is the call still in progress?
		/// </summary>
		public override bool InProgress
		{
			get { return (bool)this[SalesCall.Columns.InProgress]; }
			set { this[SalesCall.Columns.InProgress] = value; }
		}
		/// <summary>
		/// 1 = Outgoing, 2 = Incoming
		/// </summary>
		public override int Direction
		{
			get { return (int)this[SalesCall.Columns.Direction]; }
			set { this[SalesCall.Columns.Direction] = value; }
		}
		/// <summary>
		/// 1 = Cold, 2 = ProactiveFollowUp, 3 = Active
		/// </summary>
		public override int Type
		{
			get { return (int)this[SalesCall.Columns.Type]; }
			set { this[SalesCall.Columns.Type] = value; }
		}
		/// <summary>
		/// Has the call got through to the right person?
		/// </summary>
		public override bool Effective
		{
			get { return (bool)this[SalesCall.Columns.Effective]; }
			set { this[SalesCall.Columns.Effective] = value; }
		}
		/// <summary>
		/// Is this a call or just a note?
		/// </summary>
		public override bool IsCall
		{
			get { return (bool)this[SalesCall.Columns.IsCall]; }
			set { this[SalesCall.Columns.IsCall] = value; }
		}
		/// <summary>
		/// Text note added by the sales person
		/// </summary>
		public override string Note
		{
			get { return (string)this[SalesCall.Columns.Note]; }
			set { this[SalesCall.Columns.Note] = value; }
		}
		/// <summary>
		/// Has the "hang up" button been clicked?
		/// </summary>
		public override bool Dismissed
		{
			get { return (bool)this[SalesCall.Columns.Dismissed]; }
			set { this[SalesCall.Columns.Dismissed] = value; }
		}
		/// <summary>
		/// Flag for important notes
		/// </summary>
		public override bool IsImportant
		{
			get { return (bool)this[SalesCall.Columns.IsImportant]; }
			set { this[SalesCall.Columns.IsImportant] = value; }
		}
		/// <summary>
		/// Is this a call to a promoter that was recently added to the site by the sales user?
		/// </summary>
		public override bool IsCallToNewLead
		{
			get { return (bool)this[SalesCall.Columns.IsCallToNewLead]; }
			set { this[SalesCall.Columns.IsCallToNewLead] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildSalesCalls
	{
		CachedSqlSelect<SalesCall> ChildSalesCalls();
		CachedSqlSelect<SalesCall> ChildSalesCalls(Q where);
		CachedSqlSelect<SalesCall> ChildSalesCalls(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<SalesCall> ChildSalesCalls(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class SalesCall 
		{
		}

	#region SalesCallDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region SalesCallDataHolder
	/// <summary>
	/// Sales phone call made / received by a sales personDataHolder
	/// </summary>
	[Serializable]
	public partial class SalesCallDataHolder : DataHolder<SalesCall>
	{
		SalesCall dataHolder;
		[NonSerializedAttribute] SalesCall bob;

		public SalesCallDataHolder()
		{
			this.dataHolder = new SalesCall();
		}
		
		void CopyValues(SalesCall source, SalesCall destination)
		{
			destination[Bobs.SalesCall.Columns.K] = source[Bobs.SalesCall.Columns.K];
			destination[Bobs.SalesCall.Columns.DuplicateGuid] = source[Bobs.SalesCall.Columns.DuplicateGuid];
			destination[Bobs.SalesCall.Columns.UsrK] = source[Bobs.SalesCall.Columns.UsrK];
			destination[Bobs.SalesCall.Columns.PromoterK] = source[Bobs.SalesCall.Columns.PromoterK];
			destination[Bobs.SalesCall.Columns.DateTimeStart] = source[Bobs.SalesCall.Columns.DateTimeStart];
			destination[Bobs.SalesCall.Columns.DateTimeEnd] = source[Bobs.SalesCall.Columns.DateTimeEnd];
			destination[Bobs.SalesCall.Columns.Duration] = source[Bobs.SalesCall.Columns.Duration];
			destination[Bobs.SalesCall.Columns.InProgress] = source[Bobs.SalesCall.Columns.InProgress];
			destination[Bobs.SalesCall.Columns.Direction] = source[Bobs.SalesCall.Columns.Direction];
			destination[Bobs.SalesCall.Columns.Type] = source[Bobs.SalesCall.Columns.Type];
			destination[Bobs.SalesCall.Columns.Effective] = source[Bobs.SalesCall.Columns.Effective];
			destination[Bobs.SalesCall.Columns.IsCall] = source[Bobs.SalesCall.Columns.IsCall];
			destination[Bobs.SalesCall.Columns.Note] = source[Bobs.SalesCall.Columns.Note];
			destination[Bobs.SalesCall.Columns.Dismissed] = source[Bobs.SalesCall.Columns.Dismissed];
			destination[Bobs.SalesCall.Columns.IsImportant] = source[Bobs.SalesCall.Columns.IsImportant];
			destination[Bobs.SalesCall.Columns.IsCallToNewLead] = source[Bobs.SalesCall.Columns.IsCallToNewLead];
		}
		
		public SalesCallDataHolder(SalesCall bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// Key
		/// </summary>
		public int K
		{
			get { return dataHolder.K; }
			set { this.dataHolder.K = value; }
		}
		/// <summary>
		/// Duplicate guid
		/// </summary>
		public Guid DuplicateGuid
		{
			get { return dataHolder.DuplicateGuid; }
			set { this.dataHolder.DuplicateGuid = value; }
		}
		/// <summary>
		/// The sales person
		/// </summary>
		public int UsrK
		{
			get { return dataHolder.UsrK; }
			set { this.dataHolder.UsrK = value; }
		}
		/// <summary>
		/// The promoter
		/// </summary>
		public int PromoterK
		{
			get { return dataHolder.PromoterK; }
			set { this.dataHolder.PromoterK = value; }
		}
		/// <summary>
		/// Start of the call
		/// </summary>
		public DateTime DateTimeStart
		{
			get { return dataHolder.DateTimeStart; }
			set { this.dataHolder.DateTimeStart = value; }
		}
		/// <summary>
		/// End of the call
		/// </summary>
		public DateTime DateTimeEnd
		{
			get { return dataHolder.DateTimeEnd; }
			set { this.dataHolder.DateTimeEnd = value; }
		}
		/// <summary>
		/// Duration in minutes
		/// </summary>
		public double Duration
		{
			get { return dataHolder.Duration; }
			set { this.dataHolder.Duration = value; }
		}
		/// <summary>
		/// Is the call still in progress?
		/// </summary>
		public bool InProgress
		{
			get { return dataHolder.InProgress; }
			set { this.dataHolder.InProgress = value; }
		}
		/// <summary>
		/// 1 = Outgoing, 2 = Incoming
		/// </summary>
		public int Direction
		{
			get { return dataHolder.Direction; }
			set { this.dataHolder.Direction = value; }
		}
		/// <summary>
		/// 1 = Cold, 2 = ProactiveFollowUp, 3 = Active
		/// </summary>
		public int Type
		{
			get { return dataHolder.Type; }
			set { this.dataHolder.Type = value; }
		}
		/// <summary>
		/// Has the call got through to the right person?
		/// </summary>
		public bool Effective
		{
			get { return dataHolder.Effective; }
			set { this.dataHolder.Effective = value; }
		}
		/// <summary>
		/// Is this a call or just a note?
		/// </summary>
		public bool IsCall
		{
			get { return dataHolder.IsCall; }
			set { this.dataHolder.IsCall = value; }
		}
		/// <summary>
		/// Text note added by the sales person
		/// </summary>
		public string Note
		{
			get { return dataHolder.Note; }
			set { this.dataHolder.Note = value; }
		}
		/// <summary>
		/// Has the "hang up" button been clicked?
		/// </summary>
		public bool Dismissed
		{
			get { return dataHolder.Dismissed; }
			set { this.dataHolder.Dismissed = value; }
		}
		/// <summary>
		/// Flag for important notes
		/// </summary>
		public bool IsImportant
		{
			get { return dataHolder.IsImportant; }
			set { this.dataHolder.IsImportant = value; }
		}
		/// <summary>
		/// Is this a call to a promoter that was recently added to the site by the sales user?
		/// </summary>
		public bool IsCallToNewLead
		{
			get { return dataHolder.IsCallToNewLead; }
			set { this.dataHolder.IsCallToNewLead = value; }
		}
		#endregion
		public SalesCall SalesCall
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new SalesCall(K);
					}
					else
					{
						bob = new SalesCall();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region SalesCallSet
	public partial class SalesCallSet : BobSet, IEnumerable<SalesCall>
	{
		public SalesCallSet(Query query) : base(query) { }

		public SalesCall this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new SalesCall(this);
					((SalesCall)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (SalesCall)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new SalesCallTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<SalesCall> ToList()
		{
			List<SalesCall> list = new List<SalesCall>();
			foreach (SalesCall item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<SalesCall> Members

		public new IEnumerator<SalesCall> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region SalesCallTableDef
	public class SalesCallTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "SalesCall";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "A041F5A2";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return SalesCall.GetColumnName((SalesCall.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.SalesCall;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return true;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return SalesCall.Columns.K;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			SalesCall.Columns c = (SalesCall.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case SalesCall.Columns.K: ColumnStore[i] = new ColumnDef(c, "K", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey | SqlColumnFlag.AutoNumber, null); break;
					case SalesCall.Columns.DuplicateGuid: ColumnStore[i] = new ColumnDef(c, "DuplicateGuid", SqlDbType.UniqueIdentifier, 16, SqlColumnFlag.PrimaryKey, Guid.Empty); break;
					case SalesCall.Columns.UsrK: ColumnStore[i] = new ColumnDef(c, "UsrK", SqlDbType.Int, 0); break;
					case SalesCall.Columns.PromoterK: ColumnStore[i] = new ColumnDef(c, "PromoterK", SqlDbType.Int, 0); break;
					case SalesCall.Columns.DateTimeStart: ColumnStore[i] = new ColumnDef(c, "DateTimeStart", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case SalesCall.Columns.DateTimeEnd: ColumnStore[i] = new ColumnDef(c, "DateTimeEnd", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case SalesCall.Columns.Duration: ColumnStore[i] = new ColumnDef(c, "Duration", SqlDbType.Float, 0.0); break;
					case SalesCall.Columns.InProgress: ColumnStore[i] = new ColumnDef(c, "InProgress", SqlDbType.Bit, false); break;
					case SalesCall.Columns.Direction: ColumnStore[i] = new ColumnDef(c, "Direction", SqlDbType.Int, 0); break;
					case SalesCall.Columns.Type: ColumnStore[i] = new ColumnDef(c, "Type", SqlDbType.Int, 0); break;
					case SalesCall.Columns.Effective: ColumnStore[i] = new ColumnDef(c, "Effective", SqlDbType.Bit, false); break;
					case SalesCall.Columns.IsCall: ColumnStore[i] = new ColumnDef(c, "IsCall", SqlDbType.Bit, false); break;
					case SalesCall.Columns.Note: ColumnStore[i] = new ColumnDef(c, "Note", SqlDbType.Text, ""); break;
					case SalesCall.Columns.Dismissed: ColumnStore[i] = new ColumnDef(c, "Dismissed", SqlDbType.Bit, false); break;
					case SalesCall.Columns.IsImportant: ColumnStore[i] = new ColumnDef(c, "IsImportant", SqlDbType.Bit, false); break;
					case SalesCall.Columns.IsCallToNewLead: ColumnStore[i] = new ColumnDef(c, "IsCallToNewLead", SqlDbType.Bit, false); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(SalesCall.Columns.K);
						InitColumn(SalesCall.Columns.DuplicateGuid);
						InitColumn(SalesCall.Columns.UsrK);
						InitColumn(SalesCall.Columns.PromoterK);
						InitColumn(SalesCall.Columns.DateTimeStart);
						InitColumn(SalesCall.Columns.DateTimeEnd);
						InitColumn(SalesCall.Columns.Duration);
						InitColumn(SalesCall.Columns.InProgress);
						InitColumn(SalesCall.Columns.Direction);
						InitColumn(SalesCall.Columns.Type);
						InitColumn(SalesCall.Columns.Effective);
						InitColumn(SalesCall.Columns.IsCall);
						InitColumn(SalesCall.Columns.Note);
						InitColumn(SalesCall.Columns.Dismissed);
						InitColumn(SalesCall.Columns.IsImportant);
						InitColumn(SalesCall.Columns.IsCallToNewLead);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region SalesCampaign
	/// <summary>
	/// Sales efforts in a particular demographic
	/// </summary>
	public partial class SalesCampaign : Model.Entities.SalesCampaign, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// K
			/// </summary>
			K = 0x004c0001,
			/// <summary>
			/// User that added the sales campaign
			/// </summary>
			UsrK = 0x004c0002,
			/// <summary>
			/// Name to identify this sales campaign
			/// </summary>
			Name = 0x004c0003,
			/// <summary>
			/// Description
			/// </summary>
			Description = 0x004c0004,
			/// <summary>
			/// Approximate start date - used for ordering and relative duration
			/// </summary>
			DateStart = 0x004c0005,
			/// <summary>
			/// Approximate end date - used for ordering and relative duration
			/// </summary>
			DateEnd = 0x004c0006,
		}
		#endregion
		public static string GetColumnName(SalesCampaign.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case SalesCampaign.Columns.K: return "K";
						case SalesCampaign.Columns.UsrK: return "UsrK";
						case SalesCampaign.Columns.Name: return "Name";
						case SalesCampaign.Columns.Description: return "Description";
						case SalesCampaign.Columns.DateStart: return "DateStart";
						case SalesCampaign.Columns.DateEnd: return "DateEnd";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(SalesCampaign.Columns columnEnum)
		{
			switch (columnEnum)
			{
										default: return false;
			}
		}


		#region Common
 
		public SalesCampaign(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);  }
		public SalesCampaign()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.SalesCampaign);
		}
		public SalesCampaign(BobSet bs)
		{
			this.Bob = new Bob(bs.Table, bs);
		}
		public SalesCampaign(int SalesCampaignK, IBob Parent, object Column)
			: this()
		{
			Bob.GetBobFromParent(SalesCampaignK, Parent.Bob, Column, TablesEnum.SalesCampaign);
		}
		public SalesCampaign(int SalesCampaignK)
			: this()
		{
			Bob.GetBobFromPrimaryKey(SalesCampaignK);
		}
		#endregion

	}
	#endregion
	#region SalesCampaignTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region SalesCampaign
	/// <summary>
	/// Sales efforts in a particular demographic
	/// </summary>
	[Serializable]
	public partial class SalesCampaign 
	{
		
		#region Simple members
		/// <summary>
		/// K
		/// </summary>
		public override int K
		{
			get { return (int)this[SalesCampaign.Columns.K] as int? ?? 0 ; }
			set { this[SalesCampaign.Columns.K] = value; }
		}
		/// <summary>
		/// User that added the sales campaign
		/// </summary>
		public override int UsrK
		{
			get { return (int)this[SalesCampaign.Columns.UsrK]; }
			set { this[SalesCampaign.Columns.UsrK] = value; }
		}
		/// <summary>
		/// Name to identify this sales campaign
		/// </summary>
		public override string Name
		{
			get { return (string)this[SalesCampaign.Columns.Name]; }
			set { this[SalesCampaign.Columns.Name] = value; }
		}
		/// <summary>
		/// Description
		/// </summary>
		public override string Description
		{
			get { return (string)this[SalesCampaign.Columns.Description]; }
			set { this[SalesCampaign.Columns.Description] = value; }
		}
		/// <summary>
		/// Approximate start date - used for ordering and relative duration
		/// </summary>
		public override DateTime DateStart
		{
			get { return (DateTime)this[SalesCampaign.Columns.DateStart]; }
			set { this[SalesCampaign.Columns.DateStart] = value; }
		}
		/// <summary>
		/// Approximate end date - used for ordering and relative duration
		/// </summary>
		public override DateTime DateEnd
		{
			get { return (DateTime)this[SalesCampaign.Columns.DateEnd]; }
			set { this[SalesCampaign.Columns.DateEnd] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildSalesCampaigns
	{
		CachedSqlSelect<SalesCampaign> ChildSalesCampaigns();
		CachedSqlSelect<SalesCampaign> ChildSalesCampaigns(Q where);
		CachedSqlSelect<SalesCampaign> ChildSalesCampaigns(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<SalesCampaign> ChildSalesCampaigns(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class SalesCampaign 
	 : 
	Bobs.ChildInterfaces.IHasChildPromoters
		{
			public CachedSqlSelect<Promoter> ChildPromoters()
		{
			return this.ChildPromoters(null, null);
		}
		public CachedSqlSelect<Promoter> ChildPromoters(Q where)
		{
			return this.ChildPromoters(where, null);
		}
		public CachedSqlSelect<Promoter> ChildPromoters(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildPromoters(null, orderBy);
		}
		public CachedSqlSelect<Promoter> ChildPromoters(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<Promoter>
			(
				new Children<Promoter>
				(
					TablesEnum.SalesCampaign, 
					this.K, 
					TablesEnum.Promoter, 
					dr => 
					{ 
						Promoter newPromoter = new Promoter(); 
						newPromoter.Initialise(dr); 
						return newPromoter;
					},
					"3B1D9CDA",
					where,
					orderBy
				)
			);
		}
		}

	#region SalesCampaignDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region SalesCampaignDataHolder
	/// <summary>
	/// Sales efforts in a particular demographicDataHolder
	/// </summary>
	[Serializable]
	public partial class SalesCampaignDataHolder : DataHolder<SalesCampaign>
	{
		SalesCampaign dataHolder;
		[NonSerializedAttribute] SalesCampaign bob;

		public SalesCampaignDataHolder()
		{
			this.dataHolder = new SalesCampaign();
		}
		
		void CopyValues(SalesCampaign source, SalesCampaign destination)
		{
			destination[Bobs.SalesCampaign.Columns.K] = source[Bobs.SalesCampaign.Columns.K];
			destination[Bobs.SalesCampaign.Columns.UsrK] = source[Bobs.SalesCampaign.Columns.UsrK];
			destination[Bobs.SalesCampaign.Columns.Name] = source[Bobs.SalesCampaign.Columns.Name];
			destination[Bobs.SalesCampaign.Columns.Description] = source[Bobs.SalesCampaign.Columns.Description];
			destination[Bobs.SalesCampaign.Columns.DateStart] = source[Bobs.SalesCampaign.Columns.DateStart];
			destination[Bobs.SalesCampaign.Columns.DateEnd] = source[Bobs.SalesCampaign.Columns.DateEnd];
		}
		
		public SalesCampaignDataHolder(SalesCampaign bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// K
		/// </summary>
		public int K
		{
			get { return dataHolder.K; }
			set { this.dataHolder.K = value; }
		}
		/// <summary>
		/// User that added the sales campaign
		/// </summary>
		public int UsrK
		{
			get { return dataHolder.UsrK; }
			set { this.dataHolder.UsrK = value; }
		}
		/// <summary>
		/// Name to identify this sales campaign
		/// </summary>
		public string Name
		{
			get { return dataHolder.Name; }
			set { this.dataHolder.Name = value; }
		}
		/// <summary>
		/// Description
		/// </summary>
		public string Description
		{
			get { return dataHolder.Description; }
			set { this.dataHolder.Description = value; }
		}
		/// <summary>
		/// Approximate start date - used for ordering and relative duration
		/// </summary>
		public DateTime DateStart
		{
			get { return dataHolder.DateStart; }
			set { this.dataHolder.DateStart = value; }
		}
		/// <summary>
		/// Approximate end date - used for ordering and relative duration
		/// </summary>
		public DateTime DateEnd
		{
			get { return dataHolder.DateEnd; }
			set { this.dataHolder.DateEnd = value; }
		}
		#endregion
		public SalesCampaign SalesCampaign
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new SalesCampaign(K);
					}
					else
					{
						bob = new SalesCampaign();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region SalesCampaignSet
	public partial class SalesCampaignSet : BobSet, IEnumerable<SalesCampaign>
	{
		public SalesCampaignSet(Query query) : base(query) { }

		public SalesCampaign this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new SalesCampaign(this);
					((SalesCampaign)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (SalesCampaign)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new SalesCampaignTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<SalesCampaign> ToList()
		{
			List<SalesCampaign> list = new List<SalesCampaign>();
			foreach (SalesCampaign item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<SalesCampaign> Members

		public new IEnumerator<SalesCampaign> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region SalesCampaignTableDef
	public class SalesCampaignTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "SalesCampaign";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "481F9D79";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return SalesCampaign.GetColumnName((SalesCampaign.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.SalesCampaign;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return true;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return SalesCampaign.Columns.K;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			SalesCampaign.Columns c = (SalesCampaign.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case SalesCampaign.Columns.K: ColumnStore[i] = new ColumnDef(c, "K", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey | SqlColumnFlag.AutoNumber, null); break;
					case SalesCampaign.Columns.UsrK: ColumnStore[i] = new ColumnDef(c, "UsrK", SqlDbType.Int, 0); break;
					case SalesCampaign.Columns.Name: ColumnStore[i] = new ColumnDef(c, "Name", SqlDbType.VarChar, 100, ""); break;
					case SalesCampaign.Columns.Description: ColumnStore[i] = new ColumnDef(c, "Description", SqlDbType.Text, ""); break;
					case SalesCampaign.Columns.DateStart: ColumnStore[i] = new ColumnDef(c, "DateStart", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case SalesCampaign.Columns.DateEnd: ColumnStore[i] = new ColumnDef(c, "DateEnd", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(SalesCampaign.Columns.K);
						InitColumn(SalesCampaign.Columns.UsrK);
						InitColumn(SalesCampaign.Columns.Name);
						InitColumn(SalesCampaign.Columns.Description);
						InitColumn(SalesCampaign.Columns.DateStart);
						InitColumn(SalesCampaign.Columns.DateEnd);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region SalesStatusChange
	/// <summary>
	/// Logs changes in sales status, required for reports
	/// </summary>
	public partial class SalesStatusChange : Model.Entities.SalesStatusChange, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// Key
			/// </summary>
			K = 0x004d0001,
			/// <summary>
			/// Duplicate guid
			/// </summary>
			DuplicateGuid = 0x004d0002,
			/// <summary>
			/// The sales person
			/// </summary>
			UsrK = 0x004d0003,
			/// <summary>
			/// The promoter
			/// </summary>
			PromoterK = 0x004d0004,
			/// <summary>
			/// Date time of the activity
			/// </summary>
			DateTime = 0x004d0005,
			/// <summary>
			/// 1 = NewProactiveClient, 2 = NewActiveClient
			/// </summary>
			Type = 0x004d0006,
		}
		#endregion
		public static string GetColumnName(SalesStatusChange.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case SalesStatusChange.Columns.K: return "K";
						case SalesStatusChange.Columns.DuplicateGuid: return "DuplicateGuid";
						case SalesStatusChange.Columns.UsrK: return "UsrK";
						case SalesStatusChange.Columns.PromoterK: return "PromoterK";
						case SalesStatusChange.Columns.DateTime: return "DateTime";
						case SalesStatusChange.Columns.Type: return "Type";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(SalesStatusChange.Columns columnEnum)
		{
			switch (columnEnum)
			{
										default: return false;
			}
		}


		#region Common
 
		public SalesStatusChange(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);  }
		public SalesStatusChange()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.SalesStatusChange);
		}
		public SalesStatusChange(BobSet bs)
		{
			this.Bob = new Bob(bs.Table, bs);
		}
		public SalesStatusChange(int SalesStatusChangeK, IBob Parent, object Column)
			: this()
		{
			Bob.GetBobFromParent(SalesStatusChangeK, Parent.Bob, Column, TablesEnum.SalesStatusChange);
		}
		public SalesStatusChange(int SalesStatusChangeK)
			: this()
		{
			Bob.GetBobFromPrimaryKey(SalesStatusChangeK);
		}
		#endregion

	}
	#endregion
	#region SalesStatusChangeTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region SalesStatusChange
	/// <summary>
	/// Logs changes in sales status, required for reports
	/// </summary>
	[Serializable]
	public partial class SalesStatusChange 
	{
		
		#region Simple members
		/// <summary>
		/// Key
		/// </summary>
		public override int K
		{
			get { return (int)this[SalesStatusChange.Columns.K] as int? ?? 0 ; }
			set { this[SalesStatusChange.Columns.K] = value; }
		}
		/// <summary>
		/// Duplicate guid
		/// </summary>
		public Guid	DuplicateGuid
		{
			get{ return Cambro.Misc.Db.GuidConvertor(this[SalesStatusChange.Columns.DuplicateGuid]);}		
			set{ this[SalesStatusChange.Columns.DuplicateGuid] = new System.Data.SqlTypes.SqlGuid(value);}
		}
		/// <summary>
		/// The sales person
		/// </summary>
		public override int UsrK
		{
			get { return (int)this[SalesStatusChange.Columns.UsrK]; }
			set { this[SalesStatusChange.Columns.UsrK] = value; }
		}
		/// <summary>
		/// The promoter
		/// </summary>
		public override int PromoterK
		{
			get { return (int)this[SalesStatusChange.Columns.PromoterK]; }
			set { this[SalesStatusChange.Columns.PromoterK] = value; }
		}
		/// <summary>
		/// Date time of the activity
		/// </summary>
		public override DateTime DateTime
		{
			get { return (DateTime)this[SalesStatusChange.Columns.DateTime]; }
			set { this[SalesStatusChange.Columns.DateTime] = value; }
		}
		/// <summary>
		/// 1 = NewProactiveClient, 2 = NewActiveClient
		/// </summary>
		public override int Type
		{
			get { return (int)this[SalesStatusChange.Columns.Type]; }
			set { this[SalesStatusChange.Columns.Type] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildSalesStatusChanges
	{
		CachedSqlSelect<SalesStatusChange> ChildSalesStatusChanges();
		CachedSqlSelect<SalesStatusChange> ChildSalesStatusChanges(Q where);
		CachedSqlSelect<SalesStatusChange> ChildSalesStatusChanges(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<SalesStatusChange> ChildSalesStatusChanges(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class SalesStatusChange 
		{
		}

	#region SalesStatusChangeDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region SalesStatusChangeDataHolder
	/// <summary>
	/// Logs changes in sales status, required for reportsDataHolder
	/// </summary>
	[Serializable]
	public partial class SalesStatusChangeDataHolder : DataHolder<SalesStatusChange>
	{
		SalesStatusChange dataHolder;
		[NonSerializedAttribute] SalesStatusChange bob;

		public SalesStatusChangeDataHolder()
		{
			this.dataHolder = new SalesStatusChange();
		}
		
		void CopyValues(SalesStatusChange source, SalesStatusChange destination)
		{
			destination[Bobs.SalesStatusChange.Columns.K] = source[Bobs.SalesStatusChange.Columns.K];
			destination[Bobs.SalesStatusChange.Columns.DuplicateGuid] = source[Bobs.SalesStatusChange.Columns.DuplicateGuid];
			destination[Bobs.SalesStatusChange.Columns.UsrK] = source[Bobs.SalesStatusChange.Columns.UsrK];
			destination[Bobs.SalesStatusChange.Columns.PromoterK] = source[Bobs.SalesStatusChange.Columns.PromoterK];
			destination[Bobs.SalesStatusChange.Columns.DateTime] = source[Bobs.SalesStatusChange.Columns.DateTime];
			destination[Bobs.SalesStatusChange.Columns.Type] = source[Bobs.SalesStatusChange.Columns.Type];
		}
		
		public SalesStatusChangeDataHolder(SalesStatusChange bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// Key
		/// </summary>
		public int K
		{
			get { return dataHolder.K; }
			set { this.dataHolder.K = value; }
		}
		/// <summary>
		/// Duplicate guid
		/// </summary>
		public Guid DuplicateGuid
		{
			get { return dataHolder.DuplicateGuid; }
			set { this.dataHolder.DuplicateGuid = value; }
		}
		/// <summary>
		/// The sales person
		/// </summary>
		public int UsrK
		{
			get { return dataHolder.UsrK; }
			set { this.dataHolder.UsrK = value; }
		}
		/// <summary>
		/// The promoter
		/// </summary>
		public int PromoterK
		{
			get { return dataHolder.PromoterK; }
			set { this.dataHolder.PromoterK = value; }
		}
		/// <summary>
		/// Date time of the activity
		/// </summary>
		public DateTime DateTime
		{
			get { return dataHolder.DateTime; }
			set { this.dataHolder.DateTime = value; }
		}
		/// <summary>
		/// 1 = NewProactiveClient, 2 = NewActiveClient
		/// </summary>
		public int Type
		{
			get { return dataHolder.Type; }
			set { this.dataHolder.Type = value; }
		}
		#endregion
		public SalesStatusChange SalesStatusChange
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new SalesStatusChange(K);
					}
					else
					{
						bob = new SalesStatusChange();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region SalesStatusChangeSet
	public partial class SalesStatusChangeSet : BobSet, IEnumerable<SalesStatusChange>
	{
		public SalesStatusChangeSet(Query query) : base(query) { }

		public SalesStatusChange this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new SalesStatusChange(this);
					((SalesStatusChange)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (SalesStatusChange)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new SalesStatusChangeTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<SalesStatusChange> ToList()
		{
			List<SalesStatusChange> list = new List<SalesStatusChange>();
			foreach (SalesStatusChange item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<SalesStatusChange> Members

		public new IEnumerator<SalesStatusChange> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region SalesStatusChangeTableDef
	public class SalesStatusChangeTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "SalesStatusChange";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "5BA6B3C1";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return SalesStatusChange.GetColumnName((SalesStatusChange.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.SalesStatusChange;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return true;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return SalesStatusChange.Columns.K;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			SalesStatusChange.Columns c = (SalesStatusChange.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case SalesStatusChange.Columns.K: ColumnStore[i] = new ColumnDef(c, "K", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey | SqlColumnFlag.AutoNumber, null); break;
					case SalesStatusChange.Columns.DuplicateGuid: ColumnStore[i] = new ColumnDef(c, "DuplicateGuid", SqlDbType.UniqueIdentifier, Guid.Empty); break;
					case SalesStatusChange.Columns.UsrK: ColumnStore[i] = new ColumnDef(c, "UsrK", SqlDbType.Int, 0); break;
					case SalesStatusChange.Columns.PromoterK: ColumnStore[i] = new ColumnDef(c, "PromoterK", SqlDbType.Int, 0); break;
					case SalesStatusChange.Columns.DateTime: ColumnStore[i] = new ColumnDef(c, "DateTime", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case SalesStatusChange.Columns.Type: ColumnStore[i] = new ColumnDef(c, "Type", SqlDbType.Int, 0); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(SalesStatusChange.Columns.K);
						InitColumn(SalesStatusChange.Columns.DuplicateGuid);
						InitColumn(SalesStatusChange.Columns.UsrK);
						InitColumn(SalesStatusChange.Columns.PromoterK);
						InitColumn(SalesStatusChange.Columns.DateTime);
						InitColumn(SalesStatusChange.Columns.Type);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region Setting
	/// <summary>
	/// Configuration settings
	/// </summary>
	public partial class Setting : Model.Entities.Setting, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// Name of the Setting
			/// </summary>
			Name = 0x004e0001,
			/// <summary>
			/// Value of the Setting
			/// </summary>
			Value = 0x004e0002,
		}
		#endregion
		public static string GetColumnName(Setting.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case Setting.Columns.Name: return "Name";
						case Setting.Columns.Value: return "Value";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(Setting.Columns columnEnum)
		{
			switch (columnEnum)
			{
						default: return false;
			}
		}


		#region Common
 
		public Setting(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);  }
		public Setting()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.Setting);
		}
		public Setting(BobSet bs)
		{
			this.Bob = new Bob(bs.Table, bs);
		}
		public Setting(string SettingName, IBob Parent, object Column)
			: this()
		{
			Bob.GetBobFromParent(SettingName, Parent.Bob, Column, TablesEnum.Setting);
		}
		public Setting(string SettingName)
			: this()
		{
			Bob.GetBobFromPrimaryKey(SettingName);
		}
		#endregion

	}
	#endregion
	#region SettingTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region Setting
	/// <summary>
	/// Configuration settings
	/// </summary>
	[Serializable]
	public partial class Setting 
	{
		
		#region Simple members
		/// <summary>
		/// Name of the Setting
		/// </summary>
		public override string Name
		{
			get { return (string)this[Setting.Columns.Name]; }
			set { this[Setting.Columns.Name] = value; }
		}
		/// <summary>
		/// Value of the Setting
		/// </summary>
		public override object Value
		{
			get { return (object)this[Setting.Columns.Value]; }
			set { this[Setting.Columns.Value] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildSettings
	{
		CachedSqlSelect<Setting> ChildSettings();
		CachedSqlSelect<Setting> ChildSettings(Q where);
		CachedSqlSelect<Setting> ChildSettings(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<Setting> ChildSettings(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class Setting 
		{
		}

	#region SettingDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region SettingDataHolder
	/// <summary>
	/// Configuration settingsDataHolder
	/// </summary>
	[Serializable]
	public partial class SettingDataHolder : DataHolder<Setting>
	{
		Setting dataHolder;
		[NonSerializedAttribute] Setting bob;

		public SettingDataHolder()
		{
			this.dataHolder = new Setting();
		}
		
		void CopyValues(Setting source, Setting destination)
		{
			destination[Bobs.Setting.Columns.Name] = source[Bobs.Setting.Columns.Name];
			destination[Bobs.Setting.Columns.Value] = source[Bobs.Setting.Columns.Value];
		}
		
		public SettingDataHolder(Setting bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// Name of the Setting
		/// </summary>
		public string Name
		{
			get { return dataHolder.Name; }
			set { this.dataHolder.Name = value; }
		}
		/// <summary>
		/// Value of the Setting
		/// </summary>
		public object Value
		{
			get { return dataHolder.Value; }
			set { this.dataHolder.Value = value; }
		}
		#endregion
		public Setting Setting
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new Setting(K);
					}
					else
					{
						bob = new Setting();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region SettingSet
	public partial class SettingSet : BobSet, IEnumerable<Setting>
	{
		public SettingSet(Query query) : base(query) { }

		public Setting this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new Setting(this);
					((Setting)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (Setting)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new SettingTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<Setting> ToList()
		{
			List<Setting> list = new List<Setting>();
			foreach (Setting item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<Setting> Members

		public new IEnumerator<Setting> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region SettingTableDef
	public class SettingTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "Setting";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "8520DB78";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return Setting.GetColumnName((Setting.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.Setting;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return true;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return Setting.Columns.Name;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			Setting.Columns c = (Setting.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case Setting.Columns.Name: ColumnStore[i] = new ColumnDef(c, "Name", SqlDbType.VarChar, 100, SqlColumnFlag.PrimaryKey, ""); break;
					case Setting.Columns.Value: ColumnStore[i] = new ColumnDef(c, "Value", SqlDbType.Variant, 8000, System.DBNull.Value); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(Setting.Columns.Name);
						InitColumn(Setting.Columns.Value);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region SpottedException
	/// <summary>
	/// Log of Exceptions thrown from the Spotted website
	/// </summary>
	public partial class SpottedException : Model.Entities.SpottedException, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// K of the Exception
			/// </summary>
			K = 0x004f0001,
			/// <summary>
			/// K of the parent Exception, when this is an InnerException
			/// </summary>
			ParentK = 0x004f0002,
			/// <summary>
			/// Time of logging Exception
			/// </summary>
			ExceptionDateTime = 0x004f0003,
			/// <summary>
			/// The type of Exception
			/// </summary>
			ExceptionType = 0x004f0004,
			/// <summary>
			/// Exception message
			/// </summary>
			Message = 0x004f0005,
			/// <summary>
			/// Exception source
			/// </summary>
			Source = 0x004f0006,
			/// <summary>
			/// Exception stack trace
			/// </summary>
			StackTrace = 0x004f0007,
			/// <summary>
			/// The Url which caused the Exception
			/// </summary>
			Url = 0x004f0008,
			/// <summary>
			/// Path of the master container page
			/// </summary>
			MasterPath = 0x004f0009,
			/// <summary>
			/// Page path
			/// </summary>
			PagePath = 0x004f000a,
			/// <summary>
			/// Current page filter
			/// </summary>
			CurrentFilter = 0x004f000b,
			/// <summary>
			/// K of object referenced in current filter
			/// </summary>
			ObjectFilterK = 0x004f000c,
			/// <summary>
			/// Type of object referenced in current filter
			/// </summary>
			ObjectFilterType = 0x004f000d,
			/// <summary>
			/// Machine name of the server on which this Exception was thrown
			/// </summary>
			MachineName = 0x004f000e,
			/// <summary>
			/// K of current Usr
			/// </summary>
			UsrK = 0x004f000f,
			/// <summary>
			/// Current browser guid
			/// </summary>
			DsiGuid = 0x004f0010,
			/// <summary>
			/// Contents of browser cookies
			/// </summary>
			Cookies = 0x004f0011,
			/// <summary>
			/// Post data of Request
			/// </summary>
			PostData = 0x004f0012,
			/// <summary>
			/// User's IP address
			/// </summary>
			IpAddress = 0x004f0013,
			/// <summary>
			/// Now according to current Common.Time context
			/// </summary>
			CommonTimeNow = 0x004f0014,
		}
		#endregion
		public static string GetColumnName(SpottedException.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case SpottedException.Columns.K: return "K";
						case SpottedException.Columns.ParentK: return "ParentK";
						case SpottedException.Columns.ExceptionDateTime: return "ExceptionDateTime";
						case SpottedException.Columns.ExceptionType: return "ExceptionType";
						case SpottedException.Columns.Message: return "Message";
						case SpottedException.Columns.Source: return "Source";
						case SpottedException.Columns.StackTrace: return "StackTrace";
						case SpottedException.Columns.Url: return "Url";
						case SpottedException.Columns.MasterPath: return "MasterPath";
						case SpottedException.Columns.PagePath: return "PagePath";
						case SpottedException.Columns.CurrentFilter: return "CurrentFilter";
						case SpottedException.Columns.ObjectFilterK: return "ObjectFilterK";
						case SpottedException.Columns.ObjectFilterType: return "ObjectFilterType";
						case SpottedException.Columns.MachineName: return "MachineName";
						case SpottedException.Columns.UsrK: return "UsrK";
						case SpottedException.Columns.DsiGuid: return "DsiGuid";
						case SpottedException.Columns.Cookies: return "Cookies";
						case SpottedException.Columns.PostData: return "PostData";
						case SpottedException.Columns.IpAddress: return "IpAddress";
						case SpottedException.Columns.CommonTimeNow: return "CommonTimeNow";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(SpottedException.Columns columnEnum)
		{
			switch (columnEnum)
			{
																								default: return false;
			}
		}


		#region Common
 
		public SpottedException(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);  }
		public SpottedException()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.SpottedException);
		}
		public SpottedException(BobSet bs)
		{
			this.Bob = new Bob(bs.Table, bs);
		}
		public SpottedException(int SpottedExceptionK, IBob Parent, object Column)
			: this()
		{
			Bob.GetBobFromParent(SpottedExceptionK, Parent.Bob, Column, TablesEnum.SpottedException);
		}
		public SpottedException(int SpottedExceptionK)
			: this()
		{
			Bob.GetBobFromPrimaryKey(SpottedExceptionK);
		}
		#endregion

	}
	#endregion
	#region SpottedExceptionTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region SpottedException
	/// <summary>
	/// Log of Exceptions thrown from the Spotted website
	/// </summary>
	[Serializable]
	public partial class SpottedException 
	{
		
		#region Simple members
		/// <summary>
		/// K of the Exception
		/// </summary>
		public override int K
		{
			get { return (int)this[SpottedException.Columns.K] as int? ?? 0 ; }
			set { this[SpottedException.Columns.K] = value; }
		}
		/// <summary>
		/// K of the parent Exception, when this is an InnerException
		/// </summary>
		public override int ParentK
		{
			get { return (int)this[SpottedException.Columns.ParentK]; }
			set { this[SpottedException.Columns.ParentK] = value; }
		}
		/// <summary>
		/// Time of logging Exception
		/// </summary>
		public override DateTime ExceptionDateTime
		{
			get { return (DateTime)this[SpottedException.Columns.ExceptionDateTime]; }
			set { this[SpottedException.Columns.ExceptionDateTime] = value; }
		}
		/// <summary>
		/// The type of Exception
		/// </summary>
		public override string ExceptionType
		{
			get { return (string)this[SpottedException.Columns.ExceptionType]; }
			set { this[SpottedException.Columns.ExceptionType] = value; }
		}
		/// <summary>
		/// Exception message
		/// </summary>
		public override string Message
		{
			get { return (string)this[SpottedException.Columns.Message]; }
			set { this[SpottedException.Columns.Message] = value; }
		}
		/// <summary>
		/// Exception source
		/// </summary>
		public override string Source
		{
			get { return (string)this[SpottedException.Columns.Source]; }
			set { this[SpottedException.Columns.Source] = value; }
		}
		/// <summary>
		/// Exception stack trace
		/// </summary>
		public override string StackTrace
		{
			get { return (string)this[SpottedException.Columns.StackTrace]; }
			set { this[SpottedException.Columns.StackTrace] = value; }
		}
		/// <summary>
		/// The Url which caused the Exception
		/// </summary>
		public override string Url
		{
			get { return (string)this[SpottedException.Columns.Url]; }
			set { this[SpottedException.Columns.Url] = value; }
		}
		/// <summary>
		/// Path of the master container page
		/// </summary>
		public override string MasterPath
		{
			get { return (string)this[SpottedException.Columns.MasterPath]; }
			set { this[SpottedException.Columns.MasterPath] = value; }
		}
		/// <summary>
		/// Page path
		/// </summary>
		public override string PagePath
		{
			get { return (string)this[SpottedException.Columns.PagePath]; }
			set { this[SpottedException.Columns.PagePath] = value; }
		}
		/// <summary>
		/// Current page filter
		/// </summary>
		public override string CurrentFilter
		{
			get { return (string)this[SpottedException.Columns.CurrentFilter]; }
			set { this[SpottedException.Columns.CurrentFilter] = value; }
		}
		/// <summary>
		/// K of object referenced in current filter
		/// </summary>
		public override int ObjectFilterK
		{
			get { return (int)this[SpottedException.Columns.ObjectFilterK]; }
			set { this[SpottedException.Columns.ObjectFilterK] = value; }
		}
		/// <summary>
		/// Type of object referenced in current filter
		/// </summary>
		public override int ObjectFilterType
		{
			get { return (int)this[SpottedException.Columns.ObjectFilterType]; }
			set { this[SpottedException.Columns.ObjectFilterType] = value; }
		}
		/// <summary>
		/// Machine name of the server on which this Exception was thrown
		/// </summary>
		public override string MachineName
		{
			get { return (string)this[SpottedException.Columns.MachineName]; }
			set { this[SpottedException.Columns.MachineName] = value; }
		}
		/// <summary>
		/// K of current Usr
		/// </summary>
		public override int UsrK
		{
			get { return (int)this[SpottedException.Columns.UsrK]; }
			set { this[SpottedException.Columns.UsrK] = value; }
		}
		/// <summary>
		/// Current browser guid
		/// </summary>
		public Guid	DsiGuid
		{
			get{ return Cambro.Misc.Db.GuidConvertor(this[SpottedException.Columns.DsiGuid]);}		
			set{ this[SpottedException.Columns.DsiGuid] = new System.Data.SqlTypes.SqlGuid(value);}
		}
		/// <summary>
		/// Contents of browser cookies
		/// </summary>
		public override string Cookies
		{
			get { return (string)this[SpottedException.Columns.Cookies]; }
			set { this[SpottedException.Columns.Cookies] = value; }
		}
		/// <summary>
		/// Post data of Request
		/// </summary>
		public override string PostData
		{
			get { return (string)this[SpottedException.Columns.PostData]; }
			set { this[SpottedException.Columns.PostData] = value; }
		}
		/// <summary>
		/// User's IP address
		/// </summary>
		public override string IpAddress
		{
			get { return (string)this[SpottedException.Columns.IpAddress]; }
			set { this[SpottedException.Columns.IpAddress] = value; }
		}
		/// <summary>
		/// Now according to current Common.Time context
		/// </summary>
		public override DateTime CommonTimeNow
		{
			get { return (DateTime)this[SpottedException.Columns.CommonTimeNow]; }
			set { this[SpottedException.Columns.CommonTimeNow] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildSpottedExceptions
	{
		CachedSqlSelect<SpottedException> ChildSpottedExceptions();
		CachedSqlSelect<SpottedException> ChildSpottedExceptions(Q where);
		CachedSqlSelect<SpottedException> ChildSpottedExceptions(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<SpottedException> ChildSpottedExceptions(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class SpottedException 
		{
		}

	#region SpottedExceptionDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region SpottedExceptionDataHolder
	/// <summary>
	/// Log of Exceptions thrown from the Spotted websiteDataHolder
	/// </summary>
	[Serializable]
	public partial class SpottedExceptionDataHolder : DataHolder<SpottedException>
	{
		SpottedException dataHolder;
		[NonSerializedAttribute] SpottedException bob;

		public SpottedExceptionDataHolder()
		{
			this.dataHolder = new SpottedException();
		}
		
		void CopyValues(SpottedException source, SpottedException destination)
		{
			destination[Bobs.SpottedException.Columns.K] = source[Bobs.SpottedException.Columns.K];
			destination[Bobs.SpottedException.Columns.ParentK] = source[Bobs.SpottedException.Columns.ParentK];
			destination[Bobs.SpottedException.Columns.ExceptionDateTime] = source[Bobs.SpottedException.Columns.ExceptionDateTime];
			destination[Bobs.SpottedException.Columns.ExceptionType] = source[Bobs.SpottedException.Columns.ExceptionType];
			destination[Bobs.SpottedException.Columns.Message] = source[Bobs.SpottedException.Columns.Message];
			destination[Bobs.SpottedException.Columns.Source] = source[Bobs.SpottedException.Columns.Source];
			destination[Bobs.SpottedException.Columns.StackTrace] = source[Bobs.SpottedException.Columns.StackTrace];
			destination[Bobs.SpottedException.Columns.Url] = source[Bobs.SpottedException.Columns.Url];
			destination[Bobs.SpottedException.Columns.MasterPath] = source[Bobs.SpottedException.Columns.MasterPath];
			destination[Bobs.SpottedException.Columns.PagePath] = source[Bobs.SpottedException.Columns.PagePath];
			destination[Bobs.SpottedException.Columns.CurrentFilter] = source[Bobs.SpottedException.Columns.CurrentFilter];
			destination[Bobs.SpottedException.Columns.ObjectFilterK] = source[Bobs.SpottedException.Columns.ObjectFilterK];
			destination[Bobs.SpottedException.Columns.ObjectFilterType] = source[Bobs.SpottedException.Columns.ObjectFilterType];
			destination[Bobs.SpottedException.Columns.MachineName] = source[Bobs.SpottedException.Columns.MachineName];
			destination[Bobs.SpottedException.Columns.UsrK] = source[Bobs.SpottedException.Columns.UsrK];
			destination[Bobs.SpottedException.Columns.DsiGuid] = source[Bobs.SpottedException.Columns.DsiGuid];
			destination[Bobs.SpottedException.Columns.Cookies] = source[Bobs.SpottedException.Columns.Cookies];
			destination[Bobs.SpottedException.Columns.PostData] = source[Bobs.SpottedException.Columns.PostData];
			destination[Bobs.SpottedException.Columns.IpAddress] = source[Bobs.SpottedException.Columns.IpAddress];
			destination[Bobs.SpottedException.Columns.CommonTimeNow] = source[Bobs.SpottedException.Columns.CommonTimeNow];
		}
		
		public SpottedExceptionDataHolder(SpottedException bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// K of the Exception
		/// </summary>
		public int K
		{
			get { return dataHolder.K; }
			set { this.dataHolder.K = value; }
		}
		/// <summary>
		/// K of the parent Exception, when this is an InnerException
		/// </summary>
		public int ParentK
		{
			get { return dataHolder.ParentK; }
			set { this.dataHolder.ParentK = value; }
		}
		/// <summary>
		/// Time of logging Exception
		/// </summary>
		public DateTime ExceptionDateTime
		{
			get { return dataHolder.ExceptionDateTime; }
			set { this.dataHolder.ExceptionDateTime = value; }
		}
		/// <summary>
		/// The type of Exception
		/// </summary>
		public string ExceptionType
		{
			get { return dataHolder.ExceptionType; }
			set { this.dataHolder.ExceptionType = value; }
		}
		/// <summary>
		/// Exception message
		/// </summary>
		public string Message
		{
			get { return dataHolder.Message; }
			set { this.dataHolder.Message = value; }
		}
		/// <summary>
		/// Exception source
		/// </summary>
		public string Source
		{
			get { return dataHolder.Source; }
			set { this.dataHolder.Source = value; }
		}
		/// <summary>
		/// Exception stack trace
		/// </summary>
		public string StackTrace
		{
			get { return dataHolder.StackTrace; }
			set { this.dataHolder.StackTrace = value; }
		}
		/// <summary>
		/// The Url which caused the Exception
		/// </summary>
		public string Url
		{
			get { return dataHolder.Url; }
			set { this.dataHolder.Url = value; }
		}
		/// <summary>
		/// Path of the master container page
		/// </summary>
		public string MasterPath
		{
			get { return dataHolder.MasterPath; }
			set { this.dataHolder.MasterPath = value; }
		}
		/// <summary>
		/// Page path
		/// </summary>
		public string PagePath
		{
			get { return dataHolder.PagePath; }
			set { this.dataHolder.PagePath = value; }
		}
		/// <summary>
		/// Current page filter
		/// </summary>
		public string CurrentFilter
		{
			get { return dataHolder.CurrentFilter; }
			set { this.dataHolder.CurrentFilter = value; }
		}
		/// <summary>
		/// K of object referenced in current filter
		/// </summary>
		public int ObjectFilterK
		{
			get { return dataHolder.ObjectFilterK; }
			set { this.dataHolder.ObjectFilterK = value; }
		}
		/// <summary>
		/// Type of object referenced in current filter
		/// </summary>
		public int ObjectFilterType
		{
			get { return dataHolder.ObjectFilterType; }
			set { this.dataHolder.ObjectFilterType = value; }
		}
		/// <summary>
		/// Machine name of the server on which this Exception was thrown
		/// </summary>
		public string MachineName
		{
			get { return dataHolder.MachineName; }
			set { this.dataHolder.MachineName = value; }
		}
		/// <summary>
		/// K of current Usr
		/// </summary>
		public int UsrK
		{
			get { return dataHolder.UsrK; }
			set { this.dataHolder.UsrK = value; }
		}
		/// <summary>
		/// Current browser guid
		/// </summary>
		public Guid DsiGuid
		{
			get { return dataHolder.DsiGuid; }
			set { this.dataHolder.DsiGuid = value; }
		}
		/// <summary>
		/// Contents of browser cookies
		/// </summary>
		public string Cookies
		{
			get { return dataHolder.Cookies; }
			set { this.dataHolder.Cookies = value; }
		}
		/// <summary>
		/// Post data of Request
		/// </summary>
		public string PostData
		{
			get { return dataHolder.PostData; }
			set { this.dataHolder.PostData = value; }
		}
		/// <summary>
		/// User's IP address
		/// </summary>
		public string IpAddress
		{
			get { return dataHolder.IpAddress; }
			set { this.dataHolder.IpAddress = value; }
		}
		/// <summary>
		/// Now according to current Common.Time context
		/// </summary>
		public DateTime CommonTimeNow
		{
			get { return dataHolder.CommonTimeNow; }
			set { this.dataHolder.CommonTimeNow = value; }
		}
		#endregion
		public SpottedException SpottedException
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new SpottedException(K);
					}
					else
					{
						bob = new SpottedException();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region SpottedExceptionSet
	public partial class SpottedExceptionSet : BobSet, IEnumerable<SpottedException>
	{
		public SpottedExceptionSet(Query query) : base(query) { }

		public SpottedException this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new SpottedException(this);
					((SpottedException)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (SpottedException)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new SpottedExceptionTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<SpottedException> ToList()
		{
			List<SpottedException> list = new List<SpottedException>();
			foreach (SpottedException item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<SpottedException> Members

		public new IEnumerator<SpottedException> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region SpottedExceptionTableDef
	public class SpottedExceptionTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "SpottedException";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "37CE92A7";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return SpottedException.GetColumnName((SpottedException.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.SpottedException;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return true;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return SpottedException.Columns.K;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			SpottedException.Columns c = (SpottedException.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case SpottedException.Columns.K: ColumnStore[i] = new ColumnDef(c, "K", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey | SqlColumnFlag.AutoNumber, null); break;
					case SpottedException.Columns.ParentK: ColumnStore[i] = new ColumnDef(c, "ParentK", SqlDbType.Int, 0); break;
					case SpottedException.Columns.ExceptionDateTime: ColumnStore[i] = new ColumnDef(c, "ExceptionDateTime", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case SpottedException.Columns.ExceptionType: ColumnStore[i] = new ColumnDef(c, "ExceptionType", SqlDbType.VarChar, ""); break;
					case SpottedException.Columns.Message: ColumnStore[i] = new ColumnDef(c, "Message", SqlDbType.VarChar, 4000, ""); break;
					case SpottedException.Columns.Source: ColumnStore[i] = new ColumnDef(c, "Source", SqlDbType.VarChar, ""); break;
					case SpottedException.Columns.StackTrace: ColumnStore[i] = new ColumnDef(c, "StackTrace", SqlDbType.VarChar, 4000, ""); break;
					case SpottedException.Columns.Url: ColumnStore[i] = new ColumnDef(c, "Url", SqlDbType.VarChar, 150, ""); break;
					case SpottedException.Columns.MasterPath: ColumnStore[i] = new ColumnDef(c, "MasterPath", SqlDbType.VarChar, ""); break;
					case SpottedException.Columns.PagePath: ColumnStore[i] = new ColumnDef(c, "PagePath", SqlDbType.VarChar, ""); break;
					case SpottedException.Columns.CurrentFilter: ColumnStore[i] = new ColumnDef(c, "CurrentFilter", SqlDbType.VarChar, 150, ""); break;
					case SpottedException.Columns.ObjectFilterK: ColumnStore[i] = new ColumnDef(c, "ObjectFilterK", SqlDbType.Int, 0); break;
					case SpottedException.Columns.ObjectFilterType: ColumnStore[i] = new ColumnDef(c, "ObjectFilterType", SqlDbType.Int, 0); break;
					case SpottedException.Columns.MachineName: ColumnStore[i] = new ColumnDef(c, "MachineName", SqlDbType.VarChar, ""); break;
					case SpottedException.Columns.UsrK: ColumnStore[i] = new ColumnDef(c, "UsrK", SqlDbType.Int, 0); break;
					case SpottedException.Columns.DsiGuid: ColumnStore[i] = new ColumnDef(c, "DsiGuid", SqlDbType.UniqueIdentifier, Guid.Empty); break;
					case SpottedException.Columns.Cookies: ColumnStore[i] = new ColumnDef(c, "Cookies", SqlDbType.VarChar, 4000, ""); break;
					case SpottedException.Columns.PostData: ColumnStore[i] = new ColumnDef(c, "PostData", SqlDbType.VarChar, 4000, ""); break;
					case SpottedException.Columns.IpAddress: ColumnStore[i] = new ColumnDef(c, "IpAddress", SqlDbType.VarChar, 15, ""); break;
					case SpottedException.Columns.CommonTimeNow: ColumnStore[i] = new ColumnDef(c, "CommonTimeNow", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(SpottedException.Columns.K);
						InitColumn(SpottedException.Columns.ParentK);
						InitColumn(SpottedException.Columns.ExceptionDateTime);
						InitColumn(SpottedException.Columns.ExceptionType);
						InitColumn(SpottedException.Columns.Message);
						InitColumn(SpottedException.Columns.Source);
						InitColumn(SpottedException.Columns.StackTrace);
						InitColumn(SpottedException.Columns.Url);
						InitColumn(SpottedException.Columns.MasterPath);
						InitColumn(SpottedException.Columns.PagePath);
						InitColumn(SpottedException.Columns.CurrentFilter);
						InitColumn(SpottedException.Columns.ObjectFilterK);
						InitColumn(SpottedException.Columns.ObjectFilterType);
						InitColumn(SpottedException.Columns.MachineName);
						InitColumn(SpottedException.Columns.UsrK);
						InitColumn(SpottedException.Columns.DsiGuid);
						InitColumn(SpottedException.Columns.Cookies);
						InitColumn(SpottedException.Columns.PostData);
						InitColumn(SpottedException.Columns.IpAddress);
						InitColumn(SpottedException.Columns.CommonTimeNow);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region Tag
	/// <summary>
	/// Tag definitions
	/// </summary>
	public partial class Tag : Model.Entities.Tag, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// The primary key
			/// </summary>
			K = 0x00500001,
			/// <summary>
			/// The actual tag itself
			/// </summary>
			TagText = 0x00500002,
			/// <summary>
			/// Used to block offensive terms
			/// </summary>
			Blocked = 0x00500003,
			/// <summary>
			/// Who blocked it
			/// </summary>
			BlockedByUsrK = 0x00500004,
			/// <summary>
			/// When it was blocked
			/// </summary>
			BlockedDateTime = 0x00500005,
			/// <summary>
			/// should this be shown in the tag cloud
			/// </summary>
			ShowInTagCloud = 0x00500006,
		}
		#endregion
		public static string GetColumnName(Tag.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case Tag.Columns.K: return "K";
						case Tag.Columns.TagText: return "TagText";
						case Tag.Columns.Blocked: return "Blocked";
						case Tag.Columns.BlockedByUsrK: return "BlockedByUsrK";
						case Tag.Columns.BlockedDateTime: return "BlockedDateTime";
						case Tag.Columns.ShowInTagCloud: return "ShowInTagCloud";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(Tag.Columns columnEnum)
		{
			switch (columnEnum)
			{
							case Tag.Columns.Blocked: return true;
								case Tag.Columns.ShowInTagCloud: return true;
					default: return false;
			}
		}


		#region Common
 
		public Tag(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);  }
		public Tag()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.Tag);
		}
		public Tag(BobSet bs)
		{
			this.Bob = new Bob(bs.Table, bs);
		}
		public Tag(int TagK, IBob Parent, object Column)
			: this()
		{
			Bob.GetBobFromParent(TagK, Parent.Bob, Column, TablesEnum.Tag);
		}
		public Tag(int TagK)
			: this()
		{
			Bob.GetBobFromPrimaryKey(TagK);
		}
		#endregion

	}
	#endregion
	#region TagTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region Tag
	/// <summary>
	/// Tag definitions
	/// </summary>
	[Serializable]
	public partial class Tag 
	{
		
		#region Simple members
		/// <summary>
		/// The primary key
		/// </summary>
		public override int K
		{
			get { return (int)this[Tag.Columns.K] as int? ?? 0 ; }
			set { this[Tag.Columns.K] = value; }
		}
		/// <summary>
		/// The actual tag itself
		/// </summary>
		public override string TagText
		{
			get { return (string)this[Tag.Columns.TagText]; }
			set { this[Tag.Columns.TagText] = value; }
		}
		/// <summary>
		/// Used to block offensive terms
		/// </summary>
		public override bool Blocked
		{
			get { return (bool)this[Tag.Columns.Blocked]; }
			set { this[Tag.Columns.Blocked] = value; }
		}
		/// <summary>
		/// Who blocked it
		/// </summary>
		public override int BlockedByUsrK
		{
			get { return (int)this[Tag.Columns.BlockedByUsrK]; }
			set { this[Tag.Columns.BlockedByUsrK] = value; }
		}
		/// <summary>
		/// When it was blocked
		/// </summary>
		public override DateTime BlockedDateTime
		{
			get { return (DateTime)this[Tag.Columns.BlockedDateTime]; }
			set { this[Tag.Columns.BlockedDateTime] = value; }
		}
		/// <summary>
		/// should this be shown in the tag cloud
		/// </summary>
		public override bool ShowInTagCloud
		{
			get { return (bool)this[Tag.Columns.ShowInTagCloud]; }
			set { this[Tag.Columns.ShowInTagCloud] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildTags
	{
		CachedSqlSelect<Tag> ChildTags();
		CachedSqlSelect<Tag> ChildTags(Q where);
		CachedSqlSelect<Tag> ChildTags(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<Tag> ChildTags(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class Tag 
	 : 
	Bobs.ChildInterfaces.IHasChildTagPhotos
		{
			public CachedSqlSelect<TagPhoto> ChildTagPhotos()
		{
			return this.ChildTagPhotos(null, null);
		}
		public CachedSqlSelect<TagPhoto> ChildTagPhotos(Q where)
		{
			return this.ChildTagPhotos(where, null);
		}
		public CachedSqlSelect<TagPhoto> ChildTagPhotos(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildTagPhotos(null, orderBy);
		}
		public CachedSqlSelect<TagPhoto> ChildTagPhotos(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<TagPhoto>
			(
				new Children<TagPhoto>
				(
					TablesEnum.Tag, 
					this.K, 
					TablesEnum.TagPhoto, 
					dr => 
					{ 
						TagPhoto newTagPhoto = new TagPhoto(); 
						newTagPhoto.Initialise(dr); 
						return newTagPhoto;
					},
					"9D98A21D",
					where,
					orderBy
				)
			);
		}
		}

	#region TagDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region TagDataHolder
	/// <summary>
	/// Tag definitionsDataHolder
	/// </summary>
	[Serializable]
	public partial class TagDataHolder : DataHolder<Tag>
	{
		Tag dataHolder;
		[NonSerializedAttribute] Tag bob;

		public TagDataHolder()
		{
			this.dataHolder = new Tag();
		}
		
		void CopyValues(Tag source, Tag destination)
		{
			destination[Bobs.Tag.Columns.K] = source[Bobs.Tag.Columns.K];
			destination[Bobs.Tag.Columns.TagText] = source[Bobs.Tag.Columns.TagText];
			destination[Bobs.Tag.Columns.Blocked] = source[Bobs.Tag.Columns.Blocked];
			destination[Bobs.Tag.Columns.BlockedByUsrK] = source[Bobs.Tag.Columns.BlockedByUsrK];
			destination[Bobs.Tag.Columns.BlockedDateTime] = source[Bobs.Tag.Columns.BlockedDateTime];
			destination[Bobs.Tag.Columns.ShowInTagCloud] = source[Bobs.Tag.Columns.ShowInTagCloud];
		}
		
		public TagDataHolder(Tag bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// The primary key
		/// </summary>
		public int K
		{
			get { return dataHolder.K; }
			set { this.dataHolder.K = value; }
		}
		/// <summary>
		/// The actual tag itself
		/// </summary>
		public string TagText
		{
			get { return dataHolder.TagText; }
			set { this.dataHolder.TagText = value; }
		}
		/// <summary>
		/// Used to block offensive terms
		/// </summary>
		public bool Blocked
		{
			get { return dataHolder.Blocked; }
			set { this.dataHolder.Blocked = value; }
		}
		/// <summary>
		/// Who blocked it
		/// </summary>
		public int BlockedByUsrK
		{
			get { return dataHolder.BlockedByUsrK; }
			set { this.dataHolder.BlockedByUsrK = value; }
		}
		/// <summary>
		/// When it was blocked
		/// </summary>
		public DateTime BlockedDateTime
		{
			get { return dataHolder.BlockedDateTime; }
			set { this.dataHolder.BlockedDateTime = value; }
		}
		/// <summary>
		/// should this be shown in the tag cloud
		/// </summary>
		public bool ShowInTagCloud
		{
			get { return dataHolder.ShowInTagCloud; }
			set { this.dataHolder.ShowInTagCloud = value; }
		}
		#endregion
		public Tag Tag
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new Tag(K);
					}
					else
					{
						bob = new Tag();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region TagSet
	public partial class TagSet : BobSet, IEnumerable<Tag>
	{
		public TagSet(Query query) : base(query) { }

		public Tag this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new Tag(this);
					((Tag)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (Tag)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new TagTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<Tag> ToList()
		{
			List<Tag> list = new List<Tag>();
			foreach (Tag item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<Tag> Members

		public new IEnumerator<Tag> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region TagTableDef
	public class TagTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "Tag";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "17E84D6B";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return Tag.GetColumnName((Tag.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.Tag;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return true;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return Tag.Columns.K;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			Tag.Columns c = (Tag.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case Tag.Columns.K: ColumnStore[i] = new ColumnDef(c, "K", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey | SqlColumnFlag.AutoNumber, null); break;
					case Tag.Columns.TagText: ColumnStore[i] = new ColumnDef(c, "TagText", SqlDbType.VarChar, ""); break;
					case Tag.Columns.Blocked: ColumnStore[i] = new ColumnDef(c, "Blocked", SqlDbType.Bit, false); break;
					case Tag.Columns.BlockedByUsrK: ColumnStore[i] = new ColumnDef(c, "BlockedByUsrK", SqlDbType.Int, 0); break;
					case Tag.Columns.BlockedDateTime: ColumnStore[i] = new ColumnDef(c, "BlockedDateTime", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case Tag.Columns.ShowInTagCloud: ColumnStore[i] = new ColumnDef(c, "ShowInTagCloud", SqlDbType.Bit, true); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(Tag.Columns.K);
						InitColumn(Tag.Columns.TagText);
						InitColumn(Tag.Columns.Blocked);
						InitColumn(Tag.Columns.BlockedByUsrK);
						InitColumn(Tag.Columns.BlockedDateTime);
						InitColumn(Tag.Columns.ShowInTagCloud);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region TagPhoto
	/// <summary>
	/// a table that links tags to photos
	/// </summary>
	public partial class TagPhoto : Model.Entities.TagPhoto, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// The primary key
			/// </summary>
			K = 0x00510001,
			/// <summary>
			/// the k of the tag
			/// </summary>
			TagK = 0x00510002,
			/// <summary>
			/// the k of the photo that is tagged
			/// </summary>
			PhotoK = 0x00510003,
			/// <summary>
			/// Indicates that a tag has been removed from an object
			/// </summary>
			Disabled = 0x00510004,
		}
		#endregion
		public static string GetColumnName(TagPhoto.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case TagPhoto.Columns.K: return "K";
						case TagPhoto.Columns.TagK: return "TagK";
						case TagPhoto.Columns.PhotoK: return "PhotoK";
						case TagPhoto.Columns.Disabled: return "Disabled";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(TagPhoto.Columns columnEnum)
		{
			switch (columnEnum)
			{
								case TagPhoto.Columns.Disabled: return true;
					default: return false;
			}
		}


		#region Common
 
		public TagPhoto(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);  }
		public TagPhoto()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.TagPhoto);
		}
		public TagPhoto(BobSet bs)
		{
			this.Bob = new Bob(bs.Table, bs);
		}
		public TagPhoto(int TagPhotoK, IBob Parent, object Column)
			: this()
		{
			Bob.GetBobFromParent(TagPhotoK, Parent.Bob, Column, TablesEnum.TagPhoto);
		}
		public TagPhoto(int TagPhotoK)
			: this()
		{
			Bob.GetBobFromPrimaryKey(TagPhotoK);
		}
		#endregion

	}
	#endregion
	#region TagPhotoTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region TagPhoto
	/// <summary>
	/// a table that links tags to photos
	/// </summary>
	[Serializable]
	public partial class TagPhoto 
	{
		
		#region Simple members
		/// <summary>
		/// The primary key
		/// </summary>
		public override int K
		{
			get { return (int)this[TagPhoto.Columns.K] as int? ?? 0 ; }
			set { this[TagPhoto.Columns.K] = value; }
		}
		/// <summary>
		/// the k of the tag
		/// </summary>
		public override int TagK
		{
			get { return (int)this[TagPhoto.Columns.TagK]; }
			set { this[TagPhoto.Columns.TagK] = value; }
		}
		/// <summary>
		/// the k of the photo that is tagged
		/// </summary>
		public override int PhotoK
		{
			get { return (int)this[TagPhoto.Columns.PhotoK]; }
			set { this[TagPhoto.Columns.PhotoK] = value; }
		}
		/// <summary>
		/// Indicates that a tag has been removed from an object
		/// </summary>
		public override bool Disabled
		{
			get { return (bool)this[TagPhoto.Columns.Disabled]; }
			set { this[TagPhoto.Columns.Disabled] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildTagPhotos
	{
		CachedSqlSelect<TagPhoto> ChildTagPhotos();
		CachedSqlSelect<TagPhoto> ChildTagPhotos(Q where);
		CachedSqlSelect<TagPhoto> ChildTagPhotos(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<TagPhoto> ChildTagPhotos(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class TagPhoto 
	 : 
	Bobs.ChildInterfaces.IHasChildTagPhotoHistorys
		{
			public CachedSqlSelect<TagPhotoHistory> ChildTagPhotoHistorys()
		{
			return this.ChildTagPhotoHistorys(null, null);
		}
		public CachedSqlSelect<TagPhotoHistory> ChildTagPhotoHistorys(Q where)
		{
			return this.ChildTagPhotoHistorys(where, null);
		}
		public CachedSqlSelect<TagPhotoHistory> ChildTagPhotoHistorys(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildTagPhotoHistorys(null, orderBy);
		}
		public CachedSqlSelect<TagPhotoHistory> ChildTagPhotoHistorys(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<TagPhotoHistory>
			(
				new Children<TagPhotoHistory>
				(
					TablesEnum.TagPhoto, 
					this.K, 
					TablesEnum.TagPhotoHistory, 
					dr => 
					{ 
						TagPhotoHistory newTagPhotoHistory = new TagPhotoHistory(); 
						newTagPhotoHistory.Initialise(dr); 
						return newTagPhotoHistory;
					},
					"CC32FE64",
					where,
					orderBy
				)
			);
		}
		}

	#region TagPhotoDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region TagPhotoDataHolder
	/// <summary>
	/// a table that links tags to photosDataHolder
	/// </summary>
	[Serializable]
	public partial class TagPhotoDataHolder : DataHolder<TagPhoto>
	{
		TagPhoto dataHolder;
		[NonSerializedAttribute] TagPhoto bob;

		public TagPhotoDataHolder()
		{
			this.dataHolder = new TagPhoto();
		}
		
		void CopyValues(TagPhoto source, TagPhoto destination)
		{
			destination[Bobs.TagPhoto.Columns.K] = source[Bobs.TagPhoto.Columns.K];
			destination[Bobs.TagPhoto.Columns.TagK] = source[Bobs.TagPhoto.Columns.TagK];
			destination[Bobs.TagPhoto.Columns.PhotoK] = source[Bobs.TagPhoto.Columns.PhotoK];
			destination[Bobs.TagPhoto.Columns.Disabled] = source[Bobs.TagPhoto.Columns.Disabled];
		}
		
		public TagPhotoDataHolder(TagPhoto bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// The primary key
		/// </summary>
		public int K
		{
			get { return dataHolder.K; }
			set { this.dataHolder.K = value; }
		}
		/// <summary>
		/// the k of the tag
		/// </summary>
		public int TagK
		{
			get { return dataHolder.TagK; }
			set { this.dataHolder.TagK = value; }
		}
		/// <summary>
		/// the k of the photo that is tagged
		/// </summary>
		public int PhotoK
		{
			get { return dataHolder.PhotoK; }
			set { this.dataHolder.PhotoK = value; }
		}
		/// <summary>
		/// Indicates that a tag has been removed from an object
		/// </summary>
		public bool Disabled
		{
			get { return dataHolder.Disabled; }
			set { this.dataHolder.Disabled = value; }
		}
		#endregion
		public TagPhoto TagPhoto
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new TagPhoto(K);
					}
					else
					{
						bob = new TagPhoto();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region TagPhotoSet
	public partial class TagPhotoSet : BobSet, IEnumerable<TagPhoto>
	{
		public TagPhotoSet(Query query) : base(query) { }

		public TagPhoto this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new TagPhoto(this);
					((TagPhoto)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (TagPhoto)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new TagPhotoTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<TagPhoto> ToList()
		{
			List<TagPhoto> list = new List<TagPhoto>();
			foreach (TagPhoto item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<TagPhoto> Members

		public new IEnumerator<TagPhoto> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region TagPhotoTableDef
	public class TagPhotoTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "TagPhoto";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "9D98A21D";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return TagPhoto.GetColumnName((TagPhoto.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.TagPhoto;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return true;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return TagPhoto.Columns.K;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			TagPhoto.Columns c = (TagPhoto.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case TagPhoto.Columns.K: ColumnStore[i] = new ColumnDef(c, "K", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey | SqlColumnFlag.AutoNumber, null); break;
					case TagPhoto.Columns.TagK: ColumnStore[i] = new ColumnDef(c, "TagK", SqlDbType.Int, 0); break;
					case TagPhoto.Columns.PhotoK: ColumnStore[i] = new ColumnDef(c, "PhotoK", SqlDbType.Int, 0); break;
					case TagPhoto.Columns.Disabled: ColumnStore[i] = new ColumnDef(c, "Disabled", SqlDbType.Bit, false); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(TagPhoto.Columns.K);
						InitColumn(TagPhoto.Columns.TagK);
						InitColumn(TagPhoto.Columns.PhotoK);
						InitColumn(TagPhoto.Columns.Disabled);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region TagPhotoHistory
	/// <summary>
	/// History of actions on a tag photo
	/// </summary>
	public partial class TagPhotoHistory : Model.Entities.TagPhotoHistory, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// Primary key
			/// </summary>
			K = 0x00520001,
			/// <summary>
			/// The tagPhoto that was edited
			/// </summary>
			TagPhotoK = 0x00520002,
			/// <summary>
			/// What the person did
			/// </summary>
			Action = 0x00520003,
			/// <summary>
			/// The usr that did it
			/// </summary>
			UsrK = 0x00520004,
			/// <summary>
			/// When they did it
			/// </summary>
			DateTime = 0x00520005,
		}
		#endregion
		public static string GetColumnName(TagPhotoHistory.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case TagPhotoHistory.Columns.K: return "K";
						case TagPhotoHistory.Columns.TagPhotoK: return "TagPhotoK";
						case TagPhotoHistory.Columns.Action: return "Action";
						case TagPhotoHistory.Columns.UsrK: return "UsrK";
						case TagPhotoHistory.Columns.DateTime: return "DateTime";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(TagPhotoHistory.Columns columnEnum)
		{
			switch (columnEnum)
			{
									default: return false;
			}
		}


		#region Common
 
		public TagPhotoHistory(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);  }
		public TagPhotoHistory()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.TagPhotoHistory);
		}
		public TagPhotoHistory(BobSet bs)
		{
			this.Bob = new Bob(bs.Table, bs);
		}
		public TagPhotoHistory(int TagPhotoHistoryK, IBob Parent, object Column)
			: this()
		{
			Bob.GetBobFromParent(TagPhotoHistoryK, Parent.Bob, Column, TablesEnum.TagPhotoHistory);
		}
		public TagPhotoHistory(int TagPhotoHistoryK)
			: this()
		{
			Bob.GetBobFromPrimaryKey(TagPhotoHistoryK);
		}
		#endregion

	}
	#endregion
	#region TagPhotoHistoryTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region TagPhotoHistory
	/// <summary>
	/// History of actions on a tag photo
	/// </summary>
	[Serializable]
	public partial class TagPhotoHistory 
	{
		
		#region Simple members
		/// <summary>
		/// Primary key
		/// </summary>
		public override int K
		{
			get { return (int)this[TagPhotoHistory.Columns.K] as int? ?? 0 ; }
			set { this[TagPhotoHistory.Columns.K] = value; }
		}
		/// <summary>
		/// The tagPhoto that was edited
		/// </summary>
		public override int TagPhotoK
		{
			get { return (int)this[TagPhotoHistory.Columns.TagPhotoK]; }
			set { this[TagPhotoHistory.Columns.TagPhotoK] = value; }
		}
		/// <summary>
		/// What the person did
		/// </summary>
		public override int Action
		{
			get { return (int)this[TagPhotoHistory.Columns.Action]; }
			set { this[TagPhotoHistory.Columns.Action] = value; }
		}
		/// <summary>
		/// The usr that did it
		/// </summary>
		public override int UsrK
		{
			get { return (int)this[TagPhotoHistory.Columns.UsrK]; }
			set { this[TagPhotoHistory.Columns.UsrK] = value; }
		}
		/// <summary>
		/// When they did it
		/// </summary>
		public override DateTime DateTime
		{
			get { return (DateTime)this[TagPhotoHistory.Columns.DateTime]; }
			set { this[TagPhotoHistory.Columns.DateTime] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildTagPhotoHistorys
	{
		CachedSqlSelect<TagPhotoHistory> ChildTagPhotoHistorys();
		CachedSqlSelect<TagPhotoHistory> ChildTagPhotoHistorys(Q where);
		CachedSqlSelect<TagPhotoHistory> ChildTagPhotoHistorys(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<TagPhotoHistory> ChildTagPhotoHistorys(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class TagPhotoHistory 
		{
		}

	#region TagPhotoHistoryDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region TagPhotoHistoryDataHolder
	/// <summary>
	/// History of actions on a tag photoDataHolder
	/// </summary>
	[Serializable]
	public partial class TagPhotoHistoryDataHolder : DataHolder<TagPhotoHistory>
	{
		TagPhotoHistory dataHolder;
		[NonSerializedAttribute] TagPhotoHistory bob;

		public TagPhotoHistoryDataHolder()
		{
			this.dataHolder = new TagPhotoHistory();
		}
		
		void CopyValues(TagPhotoHistory source, TagPhotoHistory destination)
		{
			destination[Bobs.TagPhotoHistory.Columns.K] = source[Bobs.TagPhotoHistory.Columns.K];
			destination[Bobs.TagPhotoHistory.Columns.TagPhotoK] = source[Bobs.TagPhotoHistory.Columns.TagPhotoK];
			destination[Bobs.TagPhotoHistory.Columns.Action] = source[Bobs.TagPhotoHistory.Columns.Action];
			destination[Bobs.TagPhotoHistory.Columns.UsrK] = source[Bobs.TagPhotoHistory.Columns.UsrK];
			destination[Bobs.TagPhotoHistory.Columns.DateTime] = source[Bobs.TagPhotoHistory.Columns.DateTime];
		}
		
		public TagPhotoHistoryDataHolder(TagPhotoHistory bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// Primary key
		/// </summary>
		public int K
		{
			get { return dataHolder.K; }
			set { this.dataHolder.K = value; }
		}
		/// <summary>
		/// The tagPhoto that was edited
		/// </summary>
		public int TagPhotoK
		{
			get { return dataHolder.TagPhotoK; }
			set { this.dataHolder.TagPhotoK = value; }
		}
		/// <summary>
		/// What the person did
		/// </summary>
		public int Action
		{
			get { return dataHolder.Action; }
			set { this.dataHolder.Action = value; }
		}
		/// <summary>
		/// The usr that did it
		/// </summary>
		public int UsrK
		{
			get { return dataHolder.UsrK; }
			set { this.dataHolder.UsrK = value; }
		}
		/// <summary>
		/// When they did it
		/// </summary>
		public DateTime DateTime
		{
			get { return dataHolder.DateTime; }
			set { this.dataHolder.DateTime = value; }
		}
		#endregion
		public TagPhotoHistory TagPhotoHistory
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new TagPhotoHistory(K);
					}
					else
					{
						bob = new TagPhotoHistory();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region TagPhotoHistorySet
	public partial class TagPhotoHistorySet : BobSet, IEnumerable<TagPhotoHistory>
	{
		public TagPhotoHistorySet(Query query) : base(query) { }

		public TagPhotoHistory this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new TagPhotoHistory(this);
					((TagPhotoHistory)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (TagPhotoHistory)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new TagPhotoHistoryTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<TagPhotoHistory> ToList()
		{
			List<TagPhotoHistory> list = new List<TagPhotoHistory>();
			foreach (TagPhotoHistory item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<TagPhotoHistory> Members

		public new IEnumerator<TagPhotoHistory> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region TagPhotoHistoryTableDef
	public class TagPhotoHistoryTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "TagPhotoHistory";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "CC32FE64";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return TagPhotoHistory.GetColumnName((TagPhotoHistory.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.TagPhotoHistory;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return true;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return TagPhotoHistory.Columns.K;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			TagPhotoHistory.Columns c = (TagPhotoHistory.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case TagPhotoHistory.Columns.K: ColumnStore[i] = new ColumnDef(c, "K", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey | SqlColumnFlag.AutoNumber, null); break;
					case TagPhotoHistory.Columns.TagPhotoK: ColumnStore[i] = new ColumnDef(c, "TagPhotoK", SqlDbType.Int, 0); break;
					case TagPhotoHistory.Columns.Action: ColumnStore[i] = new ColumnDef(c, "Action", SqlDbType.Int, 0); break;
					case TagPhotoHistory.Columns.UsrK: ColumnStore[i] = new ColumnDef(c, "UsrK", SqlDbType.Int, 0); break;
					case TagPhotoHistory.Columns.DateTime: ColumnStore[i] = new ColumnDef(c, "DateTime", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(TagPhotoHistory.Columns.K);
						InitColumn(TagPhotoHistory.Columns.TagPhotoK);
						InitColumn(TagPhotoHistory.Columns.Action);
						InitColumn(TagPhotoHistory.Columns.UsrK);
						InitColumn(TagPhotoHistory.Columns.DateTime);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region TeamTarget
	/// <summary>
	/// Monthly team targets used to calculate team bonus
	/// </summary>
	public partial class TeamTarget : Model.Entities.TeamTarget, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// Year
			/// </summary>
			Year = 0x00530001,
			/// <summary>
			/// Month
			/// </summary>
			Month = 0x00530002,
			/// <summary>
			/// Target that the sales people are aiming for
			/// </summary>
			Target = 0x00530003,
			/// <summary>
			/// Actual that the sales people got (null until the 15th)
			/// </summary>
			Actual = 0x00530004,
		}
		#endregion
		public static string GetColumnName(TeamTarget.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case TeamTarget.Columns.Year: return "Year";
						case TeamTarget.Columns.Month: return "Month";
						case TeamTarget.Columns.Target: return "Target";
						case TeamTarget.Columns.Actual: return "Actual";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(TeamTarget.Columns columnEnum)
		{
			switch (columnEnum)
			{
								default: return false;
			}
		}


		#region Common
	 
		public TeamTarget(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);}
		public TeamTarget()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.TeamTarget);
		}
		public TeamTarget(BobSet bs)
		{
			this.Bob = new Bob(Bobs.Tables.Defs.TeamTarget, bs);
		}
		public TeamTarget(IBob Parent, object Column) : this()
		{
			this.Bob.GetBobFromParentSimple(Parent, Column, TablesEnum.TeamTarget);
		}
		public TeamTarget(int Year, int Month) : this()
		{
			this.Bob.GetBobFromPrimaryKeyArray(new Q[] {new Q(TeamTarget.Columns.Year,Year), new Q(TeamTarget.Columns.Month,Month)});
		} 
		#endregion

	}
	#endregion
	#region TeamTargetTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region TeamTarget
	/// <summary>
	/// Monthly team targets used to calculate team bonus
	/// </summary>
	[Serializable]
	public partial class TeamTarget 
	{
		
		#region Simple members
		/// <summary>
		/// Year
		/// </summary>
		public override int Year
		{
			get { return (int)this[TeamTarget.Columns.Year]; }
			set { this[TeamTarget.Columns.Year] = value; }
		}
		/// <summary>
		/// Month
		/// </summary>
		public override int Month
		{
			get { return (int)this[TeamTarget.Columns.Month]; }
			set { this[TeamTarget.Columns.Month] = value; }
		}
		/// <summary>
		/// Target that the sales people are aiming for
		/// </summary>
		public override double Target
		{
			get { return (double)this[TeamTarget.Columns.Target]; }
			set { this[TeamTarget.Columns.Target] = value; }
		}
		/// <summary>
		/// Actual that the sales people got (null until the 15th)
		/// </summary>
		public override double Actual
		{
			get { return (double)this[TeamTarget.Columns.Actual]; }
			set { this[TeamTarget.Columns.Actual] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildTeamTargets
	{
		CachedSqlSelect<TeamTarget> ChildTeamTargets();
		CachedSqlSelect<TeamTarget> ChildTeamTargets(Q where);
		CachedSqlSelect<TeamTarget> ChildTeamTargets(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<TeamTarget> ChildTeamTargets(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class TeamTarget 
		{
		}

	#region TeamTargetDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region TeamTargetDataHolder
	/// <summary>
	/// Monthly team targets used to calculate team bonusDataHolder
	/// </summary>
	[Serializable]
	public partial class TeamTargetDataHolder : DataHolder<TeamTarget>
	{
		TeamTarget dataHolder;
		[NonSerializedAttribute] TeamTarget bob;

		public TeamTargetDataHolder()
		{
			this.dataHolder = new TeamTarget();
		}
		
		void CopyValues(TeamTarget source, TeamTarget destination)
		{
			destination[Bobs.TeamTarget.Columns.Year] = source[Bobs.TeamTarget.Columns.Year];
			destination[Bobs.TeamTarget.Columns.Month] = source[Bobs.TeamTarget.Columns.Month];
			destination[Bobs.TeamTarget.Columns.Target] = source[Bobs.TeamTarget.Columns.Target];
			destination[Bobs.TeamTarget.Columns.Actual] = source[Bobs.TeamTarget.Columns.Actual];
		}
		
		public TeamTargetDataHolder(TeamTarget bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// Year
		/// </summary>
		public int Year
		{
			get { return dataHolder.Year; }
			set { this.dataHolder.Year = value; }
		}
		/// <summary>
		/// Month
		/// </summary>
		public int Month
		{
			get { return dataHolder.Month; }
			set { this.dataHolder.Month = value; }
		}
		/// <summary>
		/// Target that the sales people are aiming for
		/// </summary>
		public double Target
		{
			get { return dataHolder.Target; }
			set { this.dataHolder.Target = value; }
		}
		/// <summary>
		/// Actual that the sales people got (null until the 15th)
		/// </summary>
		public double Actual
		{
			get { return dataHolder.Actual; }
			set { this.dataHolder.Actual = value; }
		}
		#endregion
		public TeamTarget TeamTarget
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new TeamTarget(K);
					}
					else
					{
						bob = new TeamTarget();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region TeamTargetSet
	public partial class TeamTargetSet : BobSet, IEnumerable<TeamTarget>
	{
		public TeamTargetSet(Query query) : base(query) { }

		public TeamTarget this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new TeamTarget(this);
					((TeamTarget)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (TeamTarget)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new TeamTargetTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<TeamTarget> ToList()
		{
			List<TeamTarget> list = new List<TeamTarget>();
			foreach (TeamTarget item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<TeamTarget> Members

		public new IEnumerator<TeamTarget> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region TeamTargetTableDef
	public class TeamTargetTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "TeamTarget";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "E0987D1E";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return TeamTarget.GetColumnName((TeamTarget.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.TeamTarget;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return false;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return null;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			TeamTarget.Columns c = (TeamTarget.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case TeamTarget.Columns.Year: ColumnStore[i] = new ColumnDef(c, "Year", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey, 0); break;
					case TeamTarget.Columns.Month: ColumnStore[i] = new ColumnDef(c, "Month", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey, 0); break;
					case TeamTarget.Columns.Target: ColumnStore[i] = new ColumnDef(c, "Target", SqlDbType.Float, 0.0); break;
					case TeamTarget.Columns.Actual: ColumnStore[i] = new ColumnDef(c, "Actual", SqlDbType.Float, 0.0); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(TeamTarget.Columns.Year);
						InitColumn(TeamTarget.Columns.Month);
						InitColumn(TeamTarget.Columns.Target);
						InitColumn(TeamTarget.Columns.Actual);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region Theme
	/// <summary>
	/// Themes of discussion used for groups
	/// </summary>
	public partial class Theme : Model.Entities.Theme, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// The primary key
			/// </summary>
			K = 0x00540001,
			/// <summary>
			/// Name for url's
			/// </summary>
			UrlName = 0x00540002,
			/// <summary>
			/// Proper name
			/// </summary>
			Name = 0x00540003,
			/// <summary>
			/// Short description
			/// </summary>
			Description = 0x00540004,
			/// <summary>
			/// Examples of topics in this theme... dollar seperated, all lower case.
			/// </summary>
			Examples = 0x00540005,
			/// <summary>
			/// Order in lists
			/// </summary>
			Order = 0x00540006,
		}
		#endregion
		public static string GetColumnName(Theme.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case Theme.Columns.K: return "K";
						case Theme.Columns.UrlName: return "UrlName";
						case Theme.Columns.Name: return "Name";
						case Theme.Columns.Description: return "Description";
						case Theme.Columns.Examples: return "Examples";
						case Theme.Columns.Order: return "Order";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(Theme.Columns columnEnum)
		{
			switch (columnEnum)
			{
										default: return false;
			}
		}


		#region Common
 
		public Theme(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);  }
		public Theme()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.Theme);
		}
		public Theme(BobSet bs)
		{
			this.Bob = new Bob(bs.Table, bs);
		}
		public Theme(int ThemeK, IBob Parent, object Column)
			: this()
		{
			Bob.GetBobFromParent(ThemeK, Parent.Bob, Column, TablesEnum.Theme);
		}
		public Theme(int ThemeK)
			: this()
		{
			Bob.GetBobFromPrimaryKey(ThemeK);
		}
		#endregion

	}
	#endregion
	#region ThemeTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region Theme
	/// <summary>
	/// Themes of discussion used for groups
	/// </summary>
	[Serializable]
	public partial class Theme 
	{
		
		#region Simple members
		/// <summary>
		/// The primary key
		/// </summary>
		public override int K
		{
			get { return (int)this[Theme.Columns.K] as int? ?? 0 ; }
			set { this[Theme.Columns.K] = value; }
		}
		/// <summary>
		/// Name for url's
		/// </summary>
		public override string UrlName
		{
			get { return (string)this[Theme.Columns.UrlName]; }
			set { this[Theme.Columns.UrlName] = value; }
		}
		/// <summary>
		/// Proper name
		/// </summary>
		public override string Name
		{
			get { return (string)this[Theme.Columns.Name]; }
			set { this[Theme.Columns.Name] = value; }
		}
		/// <summary>
		/// Short description
		/// </summary>
		public override string Description
		{
			get { return (string)this[Theme.Columns.Description]; }
			set { this[Theme.Columns.Description] = value; }
		}
		/// <summary>
		/// Examples of topics in this theme... dollar seperated, all lower case.
		/// </summary>
		public override string Examples
		{
			get { return (string)this[Theme.Columns.Examples]; }
			set { this[Theme.Columns.Examples] = value; }
		}
		/// <summary>
		/// Order in lists
		/// </summary>
		public override double Order
		{
			get { return (double)this[Theme.Columns.Order]; }
			set { this[Theme.Columns.Order] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildThemes
	{
		CachedSqlSelect<Theme> ChildThemes();
		CachedSqlSelect<Theme> ChildThemes(Q where);
		CachedSqlSelect<Theme> ChildThemes(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<Theme> ChildThemes(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class Theme 
	 : 
	Bobs.ChildInterfaces.IHasChildGroups
	,
	Bobs.ChildInterfaces.IHasChildThreads
		{
			public CachedSqlSelect<Group> ChildGroups()
		{
			return this.ChildGroups(null, null);
		}
		public CachedSqlSelect<Group> ChildGroups(Q where)
		{
			return this.ChildGroups(where, null);
		}
		public CachedSqlSelect<Group> ChildGroups(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildGroups(null, orderBy);
		}
		public CachedSqlSelect<Group> ChildGroups(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<Group>
			(
				new Children<Group>
				(
					TablesEnum.Theme, 
					this.K, 
					TablesEnum.Group, 
					dr => 
					{ 
						Group newGroup = new Group(); 
						newGroup.Initialise(dr); 
						return newGroup;
					},
					"81294206",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<Thread> ChildThreads()
		{
			return this.ChildThreads(null, null);
		}
		public CachedSqlSelect<Thread> ChildThreads(Q where)
		{
			return this.ChildThreads(where, null);
		}
		public CachedSqlSelect<Thread> ChildThreads(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildThreads(null, orderBy);
		}
		public CachedSqlSelect<Thread> ChildThreads(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<Thread>
			(
				new Children<Thread>
				(
					TablesEnum.Theme, 
					this.K, 
					TablesEnum.Thread, 
					dr => 
					{ 
						Thread newThread = new Thread(); 
						newThread.Initialise(dr); 
						return newThread;
					},
					"4576C3F1",
					where,
					orderBy
				)
			);
		}
		}

	#region ThemeDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region ThemeDataHolder
	/// <summary>
	/// Themes of discussion used for groupsDataHolder
	/// </summary>
	[Serializable]
	public partial class ThemeDataHolder : DataHolder<Theme>
	{
		Theme dataHolder;
		[NonSerializedAttribute] Theme bob;

		public ThemeDataHolder()
		{
			this.dataHolder = new Theme();
		}
		
		void CopyValues(Theme source, Theme destination)
		{
			destination[Bobs.Theme.Columns.K] = source[Bobs.Theme.Columns.K];
			destination[Bobs.Theme.Columns.UrlName] = source[Bobs.Theme.Columns.UrlName];
			destination[Bobs.Theme.Columns.Name] = source[Bobs.Theme.Columns.Name];
			destination[Bobs.Theme.Columns.Description] = source[Bobs.Theme.Columns.Description];
			destination[Bobs.Theme.Columns.Examples] = source[Bobs.Theme.Columns.Examples];
			destination[Bobs.Theme.Columns.Order] = source[Bobs.Theme.Columns.Order];
		}
		
		public ThemeDataHolder(Theme bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// The primary key
		/// </summary>
		public int K
		{
			get { return dataHolder.K; }
			set { this.dataHolder.K = value; }
		}
		/// <summary>
		/// Name for url's
		/// </summary>
		public string UrlName
		{
			get { return dataHolder.UrlName; }
			set { this.dataHolder.UrlName = value; }
		}
		/// <summary>
		/// Proper name
		/// </summary>
		public string Name
		{
			get { return dataHolder.Name; }
			set { this.dataHolder.Name = value; }
		}
		/// <summary>
		/// Short description
		/// </summary>
		public string Description
		{
			get { return dataHolder.Description; }
			set { this.dataHolder.Description = value; }
		}
		/// <summary>
		/// Examples of topics in this theme... dollar seperated, all lower case.
		/// </summary>
		public string Examples
		{
			get { return dataHolder.Examples; }
			set { this.dataHolder.Examples = value; }
		}
		/// <summary>
		/// Order in lists
		/// </summary>
		public double Order
		{
			get { return dataHolder.Order; }
			set { this.dataHolder.Order = value; }
		}
		#endregion
		public Theme Theme
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new Theme(K);
					}
					else
					{
						bob = new Theme();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region ThemeSet
	public partial class ThemeSet : BobSet, IEnumerable<Theme>
	{
		public ThemeSet(Query query) : base(query) { }

		public Theme this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new Theme(this);
					((Theme)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (Theme)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new ThemeTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<Theme> ToList()
		{
			List<Theme> list = new List<Theme>();
			foreach (Theme item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<Theme> Members

		public new IEnumerator<Theme> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region ThemeTableDef
	public class ThemeTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "Theme";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "02CCF83A";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return Theme.GetColumnName((Theme.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.Theme;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return true;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return Theme.Columns.K;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			Theme.Columns c = (Theme.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case Theme.Columns.K: ColumnStore[i] = new ColumnDef(c, "K", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey | SqlColumnFlag.AutoNumber, null); break;
					case Theme.Columns.UrlName: ColumnStore[i] = new ColumnDef(c, "UrlName", SqlDbType.VarChar, ""); break;
					case Theme.Columns.Name: ColumnStore[i] = new ColumnDef(c, "Name", SqlDbType.VarChar, ""); break;
					case Theme.Columns.Description: ColumnStore[i] = new ColumnDef(c, "Description", SqlDbType.VarChar, 255, ""); break;
					case Theme.Columns.Examples: ColumnStore[i] = new ColumnDef(c, "Examples", SqlDbType.VarChar, 255, ""); break;
					case Theme.Columns.Order: ColumnStore[i] = new ColumnDef(c, "Order", SqlDbType.Float, 0.0); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(Theme.Columns.K);
						InitColumn(Theme.Columns.UrlName);
						InitColumn(Theme.Columns.Name);
						InitColumn(Theme.Columns.Description);
						InitColumn(Theme.Columns.Examples);
						InitColumn(Theme.Columns.Order);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region Thread
	/// <summary>
	/// Contains many Comments
	/// </summary>
	public partial class Thread : Model.Entities.Thread, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// The primary key
			/// </summary>
			K = 0x00550001,
			/// <summary>
			/// Subject of the thread
			/// </summary>
			Subject = 0x00550002,
			/// <summary>
			/// Which type of object is the parent of this thread? Photo=1, Event=2, Venue=3, Place=4, None=5, Country=7
			/// </summary>
			ParentObjectType = 0x00550003,
			/// <summary>
			/// Key of record in parent table
			/// </summary>
			ParentObjectK = 0x00550004,
			/// <summary>
			/// Links to one User
			/// </summary>
			UsrK = 0x00550005,
			/// <summary>
			/// If this is set to false, the thread will not be displayed (for disabling offensive posts)
			/// </summary>
			Enabled = 0x00550006,
			/// <summary>
			/// Date/Time of last post - threads are ordered by this.
			/// </summary>
			LastPost = 0x00550007,
			/// <summary>
			/// Usr that posted the last comment
			/// </summary>
			LastPostUsrK = 0x00550008,
			/// <summary>
			/// Tracks the total number of comments in the thread
			/// </summary>
			TotalComments = 0x00550009,
			/// <summary>
			/// The average date.time of all comments posted in this thread
			/// </summary>
			AverageCommentDateTime = 0x0055000a,
			/// <summary>
			/// Private threads can only be viewed by linked users, and the thread poster
			/// </summary>
			Private = 0x0055000b,
			/// <summary>
			/// In a group, private threads can only be viewed by group members
			/// </summary>
			GroupPrivate = 0x0055000c,
			/// <summary>
			/// All threads in a private chat group have this flag set
			/// </summary>
			PrivateGroup = 0x0055000d,
			/// <summary>
			/// The theme of the article - mostly for groups
			/// </summary>
			ThemeK = 0x0055000e,
			/// <summary>
			/// The article that this thread is associated with
			/// </summary>
			ArticleK = 0x0055000f,
			/// <summary>
			/// If this thread is linked to a photo, this is the key
			/// </summary>
			PhotoK = 0x00550010,
			/// <summary>
			/// If this thread is linked to a event, this is the key
			/// </summary>
			EventK = 0x00550011,
			/// <summary>
			/// If this thread is linked to a venue, this is the key
			/// </summary>
			VenueK = 0x00550012,
			/// <summary>
			/// If this thread is linked to a place, this is the key
			/// </summary>
			PlaceK = 0x00550013,
			/// <summary>
			/// If this thread is linked to a country, this is the key
			/// </summary>
			CountryK = 0x00550014,
			/// <summary>
			/// If this thread is directly linked to a brand (not in an event), this is the K
			/// </summary>
			BrandK = 0x00550015,
			/// <summary>
			/// If this thread is in a group, this is the K
			/// </summary>
			GroupK = 0x00550016,
			/// <summary>
			/// If this thread is in a music specific group, this is the K
			/// </summary>
			MusicTypeK = 0x00550017,
			/// <summary>
			/// These are news threads posted by place admins... they show in bold in the discussions page, and the last 5 are displayed on the place home page.
			/// </summary>
			IsNews = 0x00550018,
			/// <summary>
			/// Date/time that the comment was posted
			/// </summary>
			DateTime = 0x00550019,
			/// <summary>
			/// These are news threads posted by country admins...
			/// </summary>
			IsNationwideNews = 0x0055001a,
			/// <summary>
			/// Is this an event review?
			/// </summary>
			IsReview = 0x0055001b,
			/// <summary>
			/// Is this a sticky thread?
			/// </summary>
			IsSticky = 0x0055001c,
			/// <summary>
			/// Is this a sticky thread?
			/// </summary>
			IsWorldwideNews = 0x0055001d,
			/// <summary>
			/// Total number of participants
			/// </summary>
			TotalParticipants = 0x0055001e,
			/// <summary>
			/// UsrK of the other participant (for private messages between 2 users)
			/// </summary>
			FirstParticipantUsrK = 0x0055001f,
			/// <summary>
			/// Do we hide this thread from the Hot Topics lists?
			/// </summary>
			HideFromHighlights = 0x00550020,
			/// <summary>
			/// DateTime used to order threads in the Latest "Hot topics" box: AverageDateTime.AddHours(TotalComments*2)
			/// </summary>
			HotTopicsOrder = 0x00550021,
			/// <summary>
			/// The url fragment - so that the url can be generated without accessing parent database records
			/// </summary>
			UrlFragment = 0x00550022,
			/// <summary>
			/// Only the owner may invite people to this thread (for private threads only)
			/// </summary>
			Sealed = 0x00550023,
			/// <summary>
			/// Posting disabled
			/// </summary>
			Closed = 0x00550024,
			/// <summary>
			/// News recommendation status - None=0, Recommended=1, Done=2
			/// </summary>
			NewsStatus = 0x00550025,
			/// <summary>
			/// News importance level
			/// </summary>
			NewsLevel = 0x00550026,
			/// <summary>
			/// News recommendation usr
			/// </summary>
			NewsUsrK = 0x00550027,
			/// <summary>
			/// Total number of users that are watching this thread
			/// </summary>
			TotalWatching = 0x00550028,
			/// <summary>
			/// News moderator assigned to moderate this news
			/// </summary>
			NewsModeratorUsrK = 0x00550029,
			/// <summary>
			/// Who actually moderated the news
			/// </summary>
			NewsModeratedByUsrK = 0x0055002a,
			/// <summary>
			/// Date/Time when the news was moderated
			/// </summary>
			NewsModerationDateTime = 0x0055002b,
			/// <summary>
			/// Is this thread in a caption competition?
			/// </summary>
			IsInCaptionCompetition = 0x0055002c,
		}
		#endregion
		public static string GetColumnName(Thread.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case Thread.Columns.K: return "K";
						case Thread.Columns.Subject: return "Subject";
						case Thread.Columns.ParentObjectType: return "ParentObjectType";
						case Thread.Columns.ParentObjectK: return "ParentObjectK";
						case Thread.Columns.UsrK: return "UsrK";
						case Thread.Columns.Enabled: return "Enabled";
						case Thread.Columns.LastPost: return "LastPost";
						case Thread.Columns.LastPostUsrK: return "LastPostUsrK";
						case Thread.Columns.TotalComments: return "TotalComments";
						case Thread.Columns.AverageCommentDateTime: return "AverageCommentDateTime";
						case Thread.Columns.Private: return "Private";
						case Thread.Columns.GroupPrivate: return "GroupPrivate";
						case Thread.Columns.PrivateGroup: return "PrivateGroup";
						case Thread.Columns.ThemeK: return "ThemeK";
						case Thread.Columns.ArticleK: return "ArticleK";
						case Thread.Columns.PhotoK: return "PhotoK";
						case Thread.Columns.EventK: return "EventK";
						case Thread.Columns.VenueK: return "VenueK";
						case Thread.Columns.PlaceK: return "PlaceK";
						case Thread.Columns.CountryK: return "CountryK";
						case Thread.Columns.BrandK: return "BrandK";
						case Thread.Columns.GroupK: return "GroupK";
						case Thread.Columns.MusicTypeK: return "MusicTypeK";
						case Thread.Columns.IsNews: return "IsNews";
						case Thread.Columns.DateTime: return "DateTime";
						case Thread.Columns.IsNationwideNews: return "IsNationwideNews";
						case Thread.Columns.IsReview: return "IsReview";
						case Thread.Columns.IsSticky: return "IsSticky";
						case Thread.Columns.IsWorldwideNews: return "IsWorldwideNews";
						case Thread.Columns.TotalParticipants: return "TotalParticipants";
						case Thread.Columns.FirstParticipantUsrK: return "FirstParticipantUsrK";
						case Thread.Columns.HideFromHighlights: return "HideFromHighlights";
						case Thread.Columns.HotTopicsOrder: return "HotTopicsOrder";
						case Thread.Columns.UrlFragment: return "UrlFragment";
						case Thread.Columns.Sealed: return "Sealed";
						case Thread.Columns.Closed: return "Closed";
						case Thread.Columns.NewsStatus: return "NewsStatus";
						case Thread.Columns.NewsLevel: return "NewsLevel";
						case Thread.Columns.NewsUsrK: return "NewsUsrK";
						case Thread.Columns.TotalWatching: return "TotalWatching";
						case Thread.Columns.NewsModeratorUsrK: return "NewsModeratorUsrK";
						case Thread.Columns.NewsModeratedByUsrK: return "NewsModeratedByUsrK";
						case Thread.Columns.NewsModerationDateTime: return "NewsModerationDateTime";
						case Thread.Columns.IsInCaptionCompetition: return "IsInCaptionCompetition";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(Thread.Columns columnEnum)
		{
			switch (columnEnum)
			{
										case Thread.Columns.Enabled: return true;
																																											default: return false;
			}
		}


		#region Common
 
		public Thread(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);  }
		public Thread()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.Thread);
		}
		public Thread(BobSet bs)
		{
			this.Bob = new Bob(bs.Table, bs);
		}
		public Thread(int ThreadK, IBob Parent, object Column)
			: this()
		{
			Bob.GetBobFromParent(ThreadK, Parent.Bob, Column, TablesEnum.Thread);
		}
		public Thread(int ThreadK)
			: this()
		{
			Bob.GetBobFromPrimaryKey(ThreadK);
		}
		#endregion

	}
	#endregion
	#region ThreadTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region Thread
	/// <summary>
	/// Contains many Comments
	/// </summary>
	[Serializable]
	public partial class Thread 
	{
		
		#region Simple members
		/// <summary>
		/// The primary key
		/// </summary>
		public override int K
		{
			get { return (int)this[Thread.Columns.K] as int? ?? 0 ; }
			set { this[Thread.Columns.K] = value; }
		}
		/// <summary>
		/// Subject of the thread
		/// </summary>
		public override string Subject
		{
			get { return (string)this[Thread.Columns.Subject]; }
			set { this[Thread.Columns.Subject] = value; }
		}
		/// <summary>
		/// Which type of object is the parent of this thread? Photo=1, Event=2, Venue=3, Place=4, None=5, Country=7
		/// </summary>
		public override int ParentObjectType
		{
			get { return (int)this[Thread.Columns.ParentObjectType]; }
			set { this[Thread.Columns.ParentObjectType] = value; }
		}
		/// <summary>
		/// Key of record in parent table
		/// </summary>
		public override int ParentObjectK
		{
			get { return (int)this[Thread.Columns.ParentObjectK]; }
			set { this[Thread.Columns.ParentObjectK] = value; }
		}
		/// <summary>
		/// Links to one User
		/// </summary>
		public override int UsrK
		{
			get { return (int)this[Thread.Columns.UsrK]; }
			set { this[Thread.Columns.UsrK] = value; }
		}
		/// <summary>
		/// If this is set to false, the thread will not be displayed (for disabling offensive posts)
		/// </summary>
		public override bool Enabled
		{
			get { return (bool)this[Thread.Columns.Enabled]; }
			set { this[Thread.Columns.Enabled] = value; }
		}
		/// <summary>
		/// Date/Time of last post - threads are ordered by this.
		/// </summary>
		public override DateTime LastPost
		{
			get { return (DateTime)this[Thread.Columns.LastPost]; }
			set { this[Thread.Columns.LastPost] = value; }
		}
		/// <summary>
		/// Usr that posted the last comment
		/// </summary>
		public override int LastPostUsrK
		{
			get { return (int)this[Thread.Columns.LastPostUsrK]; }
			set { this[Thread.Columns.LastPostUsrK] = value; }
		}
		/// <summary>
		/// Tracks the total number of comments in the thread
		/// </summary>
		public override int TotalComments
		{
			get { return (int)this[Thread.Columns.TotalComments]; }
			set { this[Thread.Columns.TotalComments] = value; }
		}
		/// <summary>
		/// The average date.time of all comments posted in this thread
		/// </summary>
		public override DateTime AverageCommentDateTime
		{
			get { return (DateTime)this[Thread.Columns.AverageCommentDateTime]; }
			set { this[Thread.Columns.AverageCommentDateTime] = value; }
		}
		/// <summary>
		/// Private threads can only be viewed by linked users, and the thread poster
		/// </summary>
		public override bool Private
		{
			get { return (bool)this[Thread.Columns.Private]; }
			set { this[Thread.Columns.Private] = value; }
		}
		/// <summary>
		/// In a group, private threads can only be viewed by group members
		/// </summary>
		public override bool GroupPrivate
		{
			get { return (bool)this[Thread.Columns.GroupPrivate]; }
			set { this[Thread.Columns.GroupPrivate] = value; }
		}
		/// <summary>
		/// All threads in a private chat group have this flag set
		/// </summary>
		public override bool PrivateGroup
		{
			get { return (bool)this[Thread.Columns.PrivateGroup]; }
			set { this[Thread.Columns.PrivateGroup] = value; }
		}
		/// <summary>
		/// The theme of the article - mostly for groups
		/// </summary>
		public override int ThemeK
		{
			get { return (int)this[Thread.Columns.ThemeK]; }
			set { this[Thread.Columns.ThemeK] = value; }
		}
		/// <summary>
		/// The article that this thread is associated with
		/// </summary>
		public override int ArticleK
		{
			get { return (int)this[Thread.Columns.ArticleK]; }
			set { this[Thread.Columns.ArticleK] = value; }
		}
		/// <summary>
		/// If this thread is linked to a photo, this is the key
		/// </summary>
		public override int PhotoK
		{
			get { return (int)this[Thread.Columns.PhotoK]; }
			set { this[Thread.Columns.PhotoK] = value; }
		}
		/// <summary>
		/// If this thread is linked to a event, this is the key
		/// </summary>
		public override int EventK
		{
			get { return (int)this[Thread.Columns.EventK]; }
			set { this[Thread.Columns.EventK] = value; }
		}
		/// <summary>
		/// If this thread is linked to a venue, this is the key
		/// </summary>
		public override int VenueK
		{
			get { return (int)this[Thread.Columns.VenueK]; }
			set { this[Thread.Columns.VenueK] = value; }
		}
		/// <summary>
		/// If this thread is linked to a place, this is the key
		/// </summary>
		public override int PlaceK
		{
			get { return (int)this[Thread.Columns.PlaceK]; }
			set { this[Thread.Columns.PlaceK] = value; }
		}
		/// <summary>
		/// If this thread is linked to a country, this is the key
		/// </summary>
		public override int CountryK
		{
			get { return (int)this[Thread.Columns.CountryK]; }
			set { this[Thread.Columns.CountryK] = value; }
		}
		/// <summary>
		/// If this thread is directly linked to a brand (not in an event), this is the K
		/// </summary>
		public override int BrandK
		{
			get { return (int)this[Thread.Columns.BrandK]; }
			set { this[Thread.Columns.BrandK] = value; }
		}
		/// <summary>
		/// If this thread is in a group, this is the K
		/// </summary>
		public override int GroupK
		{
			get { return (int)this[Thread.Columns.GroupK]; }
			set { this[Thread.Columns.GroupK] = value; }
		}
		/// <summary>
		/// If this thread is in a music specific group, this is the K
		/// </summary>
		public override int MusicTypeK
		{
			get { return (int)this[Thread.Columns.MusicTypeK]; }
			set { this[Thread.Columns.MusicTypeK] = value; }
		}
		/// <summary>
		/// These are news threads posted by place admins... they show in bold in the discussions page, and the last 5 are displayed on the place home page.
		/// </summary>
		public override bool IsNews
		{
			get { return (bool)this[Thread.Columns.IsNews]; }
			set { this[Thread.Columns.IsNews] = value; }
		}
		/// <summary>
		/// Date/time that the comment was posted
		/// </summary>
		public override DateTime DateTime
		{
			get { return (DateTime)this[Thread.Columns.DateTime]; }
			set { this[Thread.Columns.DateTime] = value; }
		}
		/// <summary>
		/// These are news threads posted by country admins...
		/// </summary>
		public override bool IsNationwideNews
		{
			get { return (bool)this[Thread.Columns.IsNationwideNews]; }
			set { this[Thread.Columns.IsNationwideNews] = value; }
		}
		/// <summary>
		/// Is this an event review?
		/// </summary>
		public override bool IsReview
		{
			get { return (bool)this[Thread.Columns.IsReview]; }
			set { this[Thread.Columns.IsReview] = value; }
		}
		/// <summary>
		/// Is this a sticky thread?
		/// </summary>
		public override bool IsSticky
		{
			get { return (bool)this[Thread.Columns.IsSticky]; }
			set { this[Thread.Columns.IsSticky] = value; }
		}
		/// <summary>
		/// Is this a sticky thread?
		/// </summary>
		public override bool IsWorldwideNews
		{
			get { return (bool)this[Thread.Columns.IsWorldwideNews]; }
			set { this[Thread.Columns.IsWorldwideNews] = value; }
		}
		/// <summary>
		/// Total number of participants
		/// </summary>
		public override int TotalParticipants
		{
			get { return (int)this[Thread.Columns.TotalParticipants]; }
			set { this[Thread.Columns.TotalParticipants] = value; }
		}
		/// <summary>
		/// UsrK of the other participant (for private messages between 2 users)
		/// </summary>
		public override int FirstParticipantUsrK
		{
			get { return (int)this[Thread.Columns.FirstParticipantUsrK]; }
			set { this[Thread.Columns.FirstParticipantUsrK] = value; }
		}
		/// <summary>
		/// Do we hide this thread from the Hot Topics lists?
		/// </summary>
		public override bool HideFromHighlights
		{
			get { return (bool)this[Thread.Columns.HideFromHighlights]; }
			set { this[Thread.Columns.HideFromHighlights] = value; }
		}
		/// <summary>
		/// DateTime used to order threads in the Latest "Hot topics" box: AverageDateTime.AddHours(TotalComments*2)
		/// </summary>
		public override DateTime HotTopicsOrder
		{
			get { return (DateTime)this[Thread.Columns.HotTopicsOrder]; }
			set { this[Thread.Columns.HotTopicsOrder] = value; }
		}
		/// <summary>
		/// The url fragment - so that the url can be generated without accessing parent database records
		/// </summary>
		public override string UrlFragment
		{
			get { return (string)this[Thread.Columns.UrlFragment]; }
			set { this[Thread.Columns.UrlFragment] = value; }
		}
		/// <summary>
		/// Only the owner may invite people to this thread (for private threads only)
		/// </summary>
		public override bool Sealed
		{
			get { return (bool)this[Thread.Columns.Sealed]; }
			set { this[Thread.Columns.Sealed] = value; }
		}
		/// <summary>
		/// Posting disabled
		/// </summary>
		public override bool Closed
		{
			get { return (bool)this[Thread.Columns.Closed]; }
			set { this[Thread.Columns.Closed] = value; }
		}
		/// <summary>
		/// News recommendation status - None=0, Recommended=1, Done=2
		/// </summary>
		public override int NewsStatus
		{
			get { return (int)this[Thread.Columns.NewsStatus]; }
			set { this[Thread.Columns.NewsStatus] = value; }
		}
		/// <summary>
		/// News importance level
		/// </summary>
		public override int NewsLevel
		{
			get { return (int)this[Thread.Columns.NewsLevel]; }
			set { this[Thread.Columns.NewsLevel] = value; }
		}
		/// <summary>
		/// News recommendation usr
		/// </summary>
		public override int NewsUsrK
		{
			get { return (int)this[Thread.Columns.NewsUsrK]; }
			set { this[Thread.Columns.NewsUsrK] = value; }
		}
		/// <summary>
		/// Total number of users that are watching this thread
		/// </summary>
		public override int TotalWatching
		{
			get { return (int)this[Thread.Columns.TotalWatching]; }
			set { this[Thread.Columns.TotalWatching] = value; }
		}
		/// <summary>
		/// News moderator assigned to moderate this news
		/// </summary>
		public override int NewsModeratorUsrK
		{
			get { return (int)this[Thread.Columns.NewsModeratorUsrK]; }
			set { this[Thread.Columns.NewsModeratorUsrK] = value; }
		}
		/// <summary>
		/// Who actually moderated the news
		/// </summary>
		public override int NewsModeratedByUsrK
		{
			get { return (int)this[Thread.Columns.NewsModeratedByUsrK]; }
			set { this[Thread.Columns.NewsModeratedByUsrK] = value; }
		}
		/// <summary>
		/// Date/Time when the news was moderated
		/// </summary>
		public override DateTime NewsModerationDateTime
		{
			get { return (DateTime)this[Thread.Columns.NewsModerationDateTime]; }
			set { this[Thread.Columns.NewsModerationDateTime] = value; }
		}
		/// <summary>
		/// Is this thread in a caption competition?
		/// </summary>
		public override bool IsInCaptionCompetition
		{
			get { return (bool)this[Thread.Columns.IsInCaptionCompetition]; }
			set { this[Thread.Columns.IsInCaptionCompetition] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildThreads
	{
		CachedSqlSelect<Thread> ChildThreads();
		CachedSqlSelect<Thread> ChildThreads(Q where);
		CachedSqlSelect<Thread> ChildThreads(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<Thread> ChildThreads(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class Thread 
	 : 
	Bobs.ChildInterfaces.IHasChildArticles
	,
	Bobs.ChildInterfaces.IHasChildComments
	,
	Bobs.ChildInterfaces.IHasChildDonationIcons
	,
	Bobs.ChildInterfaces.IHasChildParas
	,
	Bobs.ChildInterfaces.IHasChildPhotos
	,
	Bobs.ChildInterfaces.IHasChildThreadUsrs
		{
			public CachedSqlSelect<Article> ChildArticles()
		{
			return this.ChildArticles(null, null);
		}
		public CachedSqlSelect<Article> ChildArticles(Q where)
		{
			return this.ChildArticles(where, null);
		}
		public CachedSqlSelect<Article> ChildArticles(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildArticles(null, orderBy);
		}
		public CachedSqlSelect<Article> ChildArticles(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<Article>
			(
				new Children<Article>
				(
					TablesEnum.Thread, 
					this.K, 
					TablesEnum.Article, 
					dr => 
					{ 
						Article newArticle = new Article(); 
						newArticle.Initialise(dr); 
						return newArticle;
					},
					"D389F153",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<Comment> ChildComments()
		{
			return this.ChildComments(null, null);
		}
		public CachedSqlSelect<Comment> ChildComments(Q where)
		{
			return this.ChildComments(where, null);
		}
		public CachedSqlSelect<Comment> ChildComments(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildComments(null, orderBy);
		}
		public CachedSqlSelect<Comment> ChildComments(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<Comment>
			(
				new Children<Comment>
				(
					TablesEnum.Thread, 
					this.K, 
					TablesEnum.Comment, 
					dr => 
					{ 
						Comment newComment = new Comment(); 
						newComment.Initialise(dr); 
						return newComment;
					},
					"B51CFA22",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<DonationIcon> ChildDonationIcons()
		{
			return this.ChildDonationIcons(null, null);
		}
		public CachedSqlSelect<DonationIcon> ChildDonationIcons(Q where)
		{
			return this.ChildDonationIcons(where, null);
		}
		public CachedSqlSelect<DonationIcon> ChildDonationIcons(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildDonationIcons(null, orderBy);
		}
		public CachedSqlSelect<DonationIcon> ChildDonationIcons(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<DonationIcon>
			(
				new Children<DonationIcon>
				(
					TablesEnum.Thread, 
					this.K, 
					TablesEnum.DonationIcon, 
					dr => 
					{ 
						DonationIcon newDonationIcon = new DonationIcon(); 
						newDonationIcon.Initialise(dr); 
						return newDonationIcon;
					},
					"DCDBA406",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<Para> ChildParas()
		{
			return this.ChildParas(null, null);
		}
		public CachedSqlSelect<Para> ChildParas(Q where)
		{
			return this.ChildParas(where, null);
		}
		public CachedSqlSelect<Para> ChildParas(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildParas(null, orderBy);
		}
		public CachedSqlSelect<Para> ChildParas(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<Para>
			(
				new Children<Para>
				(
					TablesEnum.Thread, 
					this.K, 
					TablesEnum.Para, 
					dr => 
					{ 
						Para newPara = new Para(); 
						newPara.Initialise(dr); 
						return newPara;
					},
					"325990B0",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<Photo> ChildPhotos()
		{
			return this.ChildPhotos(null, null);
		}
		public CachedSqlSelect<Photo> ChildPhotos(Q where)
		{
			return this.ChildPhotos(where, null);
		}
		public CachedSqlSelect<Photo> ChildPhotos(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildPhotos(null, orderBy);
		}
		public CachedSqlSelect<Photo> ChildPhotos(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<Photo>
			(
				new Children<Photo>
				(
					TablesEnum.Thread, 
					this.K, 
					TablesEnum.Photo, 
					dr => 
					{ 
						Photo newPhoto = new Photo(); 
						newPhoto.Initialise(dr); 
						return newPhoto;
					},
					"71653456",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<ThreadUsr> ChildThreadUsrs()
		{
			return this.ChildThreadUsrs(null, null);
		}
		public CachedSqlSelect<ThreadUsr> ChildThreadUsrs(Q where)
		{
			return this.ChildThreadUsrs(where, null);
		}
		public CachedSqlSelect<ThreadUsr> ChildThreadUsrs(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildThreadUsrs(null, orderBy);
		}
		public CachedSqlSelect<ThreadUsr> ChildThreadUsrs(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<ThreadUsr>
			(
				new Children<ThreadUsr>
				(
					TablesEnum.Thread, 
					this.K, 
					TablesEnum.ThreadUsr, 
					dr => 
					{ 
						ThreadUsr newThreadUsr = new ThreadUsr(); 
						newThreadUsr.Initialise(dr); 
						return newThreadUsr;
					},
					"02B49E6F",
					where,
					orderBy
				)
			);
		}
		}

	#region ThreadDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region ThreadDataHolder
	/// <summary>
	/// Contains many CommentsDataHolder
	/// </summary>
	[Serializable]
	public partial class ThreadDataHolder : DataHolder<Thread>
	{
		Thread dataHolder;
		[NonSerializedAttribute] Thread bob;

		public ThreadDataHolder()
		{
			this.dataHolder = new Thread();
		}
		
		void CopyValues(Thread source, Thread destination)
		{
			destination[Bobs.Thread.Columns.K] = source[Bobs.Thread.Columns.K];
			destination[Bobs.Thread.Columns.Subject] = source[Bobs.Thread.Columns.Subject];
			destination[Bobs.Thread.Columns.ParentObjectType] = source[Bobs.Thread.Columns.ParentObjectType];
			destination[Bobs.Thread.Columns.ParentObjectK] = source[Bobs.Thread.Columns.ParentObjectK];
			destination[Bobs.Thread.Columns.UsrK] = source[Bobs.Thread.Columns.UsrK];
			destination[Bobs.Thread.Columns.Enabled] = source[Bobs.Thread.Columns.Enabled];
			destination[Bobs.Thread.Columns.LastPost] = source[Bobs.Thread.Columns.LastPost];
			destination[Bobs.Thread.Columns.LastPostUsrK] = source[Bobs.Thread.Columns.LastPostUsrK];
			destination[Bobs.Thread.Columns.TotalComments] = source[Bobs.Thread.Columns.TotalComments];
			destination[Bobs.Thread.Columns.AverageCommentDateTime] = source[Bobs.Thread.Columns.AverageCommentDateTime];
			destination[Bobs.Thread.Columns.Private] = source[Bobs.Thread.Columns.Private];
			destination[Bobs.Thread.Columns.GroupPrivate] = source[Bobs.Thread.Columns.GroupPrivate];
			destination[Bobs.Thread.Columns.PrivateGroup] = source[Bobs.Thread.Columns.PrivateGroup];
			destination[Bobs.Thread.Columns.ThemeK] = source[Bobs.Thread.Columns.ThemeK];
			destination[Bobs.Thread.Columns.ArticleK] = source[Bobs.Thread.Columns.ArticleK];
			destination[Bobs.Thread.Columns.PhotoK] = source[Bobs.Thread.Columns.PhotoK];
			destination[Bobs.Thread.Columns.EventK] = source[Bobs.Thread.Columns.EventK];
			destination[Bobs.Thread.Columns.VenueK] = source[Bobs.Thread.Columns.VenueK];
			destination[Bobs.Thread.Columns.PlaceK] = source[Bobs.Thread.Columns.PlaceK];
			destination[Bobs.Thread.Columns.CountryK] = source[Bobs.Thread.Columns.CountryK];
			destination[Bobs.Thread.Columns.BrandK] = source[Bobs.Thread.Columns.BrandK];
			destination[Bobs.Thread.Columns.GroupK] = source[Bobs.Thread.Columns.GroupK];
			destination[Bobs.Thread.Columns.MusicTypeK] = source[Bobs.Thread.Columns.MusicTypeK];
			destination[Bobs.Thread.Columns.IsNews] = source[Bobs.Thread.Columns.IsNews];
			destination[Bobs.Thread.Columns.DateTime] = source[Bobs.Thread.Columns.DateTime];
			destination[Bobs.Thread.Columns.IsNationwideNews] = source[Bobs.Thread.Columns.IsNationwideNews];
			destination[Bobs.Thread.Columns.IsReview] = source[Bobs.Thread.Columns.IsReview];
			destination[Bobs.Thread.Columns.IsSticky] = source[Bobs.Thread.Columns.IsSticky];
			destination[Bobs.Thread.Columns.IsWorldwideNews] = source[Bobs.Thread.Columns.IsWorldwideNews];
			destination[Bobs.Thread.Columns.TotalParticipants] = source[Bobs.Thread.Columns.TotalParticipants];
			destination[Bobs.Thread.Columns.FirstParticipantUsrK] = source[Bobs.Thread.Columns.FirstParticipantUsrK];
			destination[Bobs.Thread.Columns.HideFromHighlights] = source[Bobs.Thread.Columns.HideFromHighlights];
			destination[Bobs.Thread.Columns.HotTopicsOrder] = source[Bobs.Thread.Columns.HotTopicsOrder];
			destination[Bobs.Thread.Columns.UrlFragment] = source[Bobs.Thread.Columns.UrlFragment];
			destination[Bobs.Thread.Columns.Sealed] = source[Bobs.Thread.Columns.Sealed];
			destination[Bobs.Thread.Columns.Closed] = source[Bobs.Thread.Columns.Closed];
			destination[Bobs.Thread.Columns.NewsStatus] = source[Bobs.Thread.Columns.NewsStatus];
			destination[Bobs.Thread.Columns.NewsLevel] = source[Bobs.Thread.Columns.NewsLevel];
			destination[Bobs.Thread.Columns.NewsUsrK] = source[Bobs.Thread.Columns.NewsUsrK];
			destination[Bobs.Thread.Columns.TotalWatching] = source[Bobs.Thread.Columns.TotalWatching];
			destination[Bobs.Thread.Columns.NewsModeratorUsrK] = source[Bobs.Thread.Columns.NewsModeratorUsrK];
			destination[Bobs.Thread.Columns.NewsModeratedByUsrK] = source[Bobs.Thread.Columns.NewsModeratedByUsrK];
			destination[Bobs.Thread.Columns.NewsModerationDateTime] = source[Bobs.Thread.Columns.NewsModerationDateTime];
			destination[Bobs.Thread.Columns.IsInCaptionCompetition] = source[Bobs.Thread.Columns.IsInCaptionCompetition];
		}
		
		public ThreadDataHolder(Thread bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// The primary key
		/// </summary>
		public int K
		{
			get { return dataHolder.K; }
			set { this.dataHolder.K = value; }
		}
		/// <summary>
		/// Subject of the thread
		/// </summary>
		public string Subject
		{
			get { return dataHolder.Subject; }
			set { this.dataHolder.Subject = value; }
		}
		/// <summary>
		/// Which type of object is the parent of this thread? Photo=1, Event=2, Venue=3, Place=4, None=5, Country=7
		/// </summary>
		public int ParentObjectType
		{
			get { return dataHolder.ParentObjectType; }
			set { this.dataHolder.ParentObjectType = value; }
		}
		/// <summary>
		/// Key of record in parent table
		/// </summary>
		public int ParentObjectK
		{
			get { return dataHolder.ParentObjectK; }
			set { this.dataHolder.ParentObjectK = value; }
		}
		/// <summary>
		/// Links to one User
		/// </summary>
		public int UsrK
		{
			get { return dataHolder.UsrK; }
			set { this.dataHolder.UsrK = value; }
		}
		/// <summary>
		/// If this is set to false, the thread will not be displayed (for disabling offensive posts)
		/// </summary>
		public bool Enabled
		{
			get { return dataHolder.Enabled; }
			set { this.dataHolder.Enabled = value; }
		}
		/// <summary>
		/// Date/Time of last post - threads are ordered by this.
		/// </summary>
		public DateTime LastPost
		{
			get { return dataHolder.LastPost; }
			set { this.dataHolder.LastPost = value; }
		}
		/// <summary>
		/// Usr that posted the last comment
		/// </summary>
		public int LastPostUsrK
		{
			get { return dataHolder.LastPostUsrK; }
			set { this.dataHolder.LastPostUsrK = value; }
		}
		/// <summary>
		/// Tracks the total number of comments in the thread
		/// </summary>
		public int TotalComments
		{
			get { return dataHolder.TotalComments; }
			set { this.dataHolder.TotalComments = value; }
		}
		/// <summary>
		/// The average date.time of all comments posted in this thread
		/// </summary>
		public DateTime AverageCommentDateTime
		{
			get { return dataHolder.AverageCommentDateTime; }
			set { this.dataHolder.AverageCommentDateTime = value; }
		}
		/// <summary>
		/// Private threads can only be viewed by linked users, and the thread poster
		/// </summary>
		public bool Private
		{
			get { return dataHolder.Private; }
			set { this.dataHolder.Private = value; }
		}
		/// <summary>
		/// In a group, private threads can only be viewed by group members
		/// </summary>
		public bool GroupPrivate
		{
			get { return dataHolder.GroupPrivate; }
			set { this.dataHolder.GroupPrivate = value; }
		}
		/// <summary>
		/// All threads in a private chat group have this flag set
		/// </summary>
		public bool PrivateGroup
		{
			get { return dataHolder.PrivateGroup; }
			set { this.dataHolder.PrivateGroup = value; }
		}
		/// <summary>
		/// The theme of the article - mostly for groups
		/// </summary>
		public int ThemeK
		{
			get { return dataHolder.ThemeK; }
			set { this.dataHolder.ThemeK = value; }
		}
		/// <summary>
		/// The article that this thread is associated with
		/// </summary>
		public int ArticleK
		{
			get { return dataHolder.ArticleK; }
			set { this.dataHolder.ArticleK = value; }
		}
		/// <summary>
		/// If this thread is linked to a photo, this is the key
		/// </summary>
		public int PhotoK
		{
			get { return dataHolder.PhotoK; }
			set { this.dataHolder.PhotoK = value; }
		}
		/// <summary>
		/// If this thread is linked to a event, this is the key
		/// </summary>
		public int EventK
		{
			get { return dataHolder.EventK; }
			set { this.dataHolder.EventK = value; }
		}
		/// <summary>
		/// If this thread is linked to a venue, this is the key
		/// </summary>
		public int VenueK
		{
			get { return dataHolder.VenueK; }
			set { this.dataHolder.VenueK = value; }
		}
		/// <summary>
		/// If this thread is linked to a place, this is the key
		/// </summary>
		public int PlaceK
		{
			get { return dataHolder.PlaceK; }
			set { this.dataHolder.PlaceK = value; }
		}
		/// <summary>
		/// If this thread is linked to a country, this is the key
		/// </summary>
		public int CountryK
		{
			get { return dataHolder.CountryK; }
			set { this.dataHolder.CountryK = value; }
		}
		/// <summary>
		/// If this thread is directly linked to a brand (not in an event), this is the K
		/// </summary>
		public int BrandK
		{
			get { return dataHolder.BrandK; }
			set { this.dataHolder.BrandK = value; }
		}
		/// <summary>
		/// If this thread is in a group, this is the K
		/// </summary>
		public int GroupK
		{
			get { return dataHolder.GroupK; }
			set { this.dataHolder.GroupK = value; }
		}
		/// <summary>
		/// If this thread is in a music specific group, this is the K
		/// </summary>
		public int MusicTypeK
		{
			get { return dataHolder.MusicTypeK; }
			set { this.dataHolder.MusicTypeK = value; }
		}
		/// <summary>
		/// These are news threads posted by place admins... they show in bold in the discussions page, and the last 5 are displayed on the place home page.
		/// </summary>
		public bool IsNews
		{
			get { return dataHolder.IsNews; }
			set { this.dataHolder.IsNews = value; }
		}
		/// <summary>
		/// Date/time that the comment was posted
		/// </summary>
		public DateTime DateTime
		{
			get { return dataHolder.DateTime; }
			set { this.dataHolder.DateTime = value; }
		}
		/// <summary>
		/// These are news threads posted by country admins...
		/// </summary>
		public bool IsNationwideNews
		{
			get { return dataHolder.IsNationwideNews; }
			set { this.dataHolder.IsNationwideNews = value; }
		}
		/// <summary>
		/// Is this an event review?
		/// </summary>
		public bool IsReview
		{
			get { return dataHolder.IsReview; }
			set { this.dataHolder.IsReview = value; }
		}
		/// <summary>
		/// Is this a sticky thread?
		/// </summary>
		public bool IsSticky
		{
			get { return dataHolder.IsSticky; }
			set { this.dataHolder.IsSticky = value; }
		}
		/// <summary>
		/// Is this a sticky thread?
		/// </summary>
		public bool IsWorldwideNews
		{
			get { return dataHolder.IsWorldwideNews; }
			set { this.dataHolder.IsWorldwideNews = value; }
		}
		/// <summary>
		/// Total number of participants
		/// </summary>
		public int TotalParticipants
		{
			get { return dataHolder.TotalParticipants; }
			set { this.dataHolder.TotalParticipants = value; }
		}
		/// <summary>
		/// UsrK of the other participant (for private messages between 2 users)
		/// </summary>
		public int FirstParticipantUsrK
		{
			get { return dataHolder.FirstParticipantUsrK; }
			set { this.dataHolder.FirstParticipantUsrK = value; }
		}
		/// <summary>
		/// Do we hide this thread from the Hot Topics lists?
		/// </summary>
		public bool HideFromHighlights
		{
			get { return dataHolder.HideFromHighlights; }
			set { this.dataHolder.HideFromHighlights = value; }
		}
		/// <summary>
		/// DateTime used to order threads in the Latest "Hot topics" box: AverageDateTime.AddHours(TotalComments*2)
		/// </summary>
		public DateTime HotTopicsOrder
		{
			get { return dataHolder.HotTopicsOrder; }
			set { this.dataHolder.HotTopicsOrder = value; }
		}
		/// <summary>
		/// The url fragment - so that the url can be generated without accessing parent database records
		/// </summary>
		public string UrlFragment
		{
			get { return dataHolder.UrlFragment; }
			set { this.dataHolder.UrlFragment = value; }
		}
		/// <summary>
		/// Only the owner may invite people to this thread (for private threads only)
		/// </summary>
		public bool Sealed
		{
			get { return dataHolder.Sealed; }
			set { this.dataHolder.Sealed = value; }
		}
		/// <summary>
		/// Posting disabled
		/// </summary>
		public bool Closed
		{
			get { return dataHolder.Closed; }
			set { this.dataHolder.Closed = value; }
		}
		/// <summary>
		/// News recommendation status - None=0, Recommended=1, Done=2
		/// </summary>
		public int NewsStatus
		{
			get { return dataHolder.NewsStatus; }
			set { this.dataHolder.NewsStatus = value; }
		}
		/// <summary>
		/// News importance level
		/// </summary>
		public int NewsLevel
		{
			get { return dataHolder.NewsLevel; }
			set { this.dataHolder.NewsLevel = value; }
		}
		/// <summary>
		/// News recommendation usr
		/// </summary>
		public int NewsUsrK
		{
			get { return dataHolder.NewsUsrK; }
			set { this.dataHolder.NewsUsrK = value; }
		}
		/// <summary>
		/// Total number of users that are watching this thread
		/// </summary>
		public int TotalWatching
		{
			get { return dataHolder.TotalWatching; }
			set { this.dataHolder.TotalWatching = value; }
		}
		/// <summary>
		/// News moderator assigned to moderate this news
		/// </summary>
		public int NewsModeratorUsrK
		{
			get { return dataHolder.NewsModeratorUsrK; }
			set { this.dataHolder.NewsModeratorUsrK = value; }
		}
		/// <summary>
		/// Who actually moderated the news
		/// </summary>
		public int NewsModeratedByUsrK
		{
			get { return dataHolder.NewsModeratedByUsrK; }
			set { this.dataHolder.NewsModeratedByUsrK = value; }
		}
		/// <summary>
		/// Date/Time when the news was moderated
		/// </summary>
		public DateTime NewsModerationDateTime
		{
			get { return dataHolder.NewsModerationDateTime; }
			set { this.dataHolder.NewsModerationDateTime = value; }
		}
		/// <summary>
		/// Is this thread in a caption competition?
		/// </summary>
		public bool IsInCaptionCompetition
		{
			get { return dataHolder.IsInCaptionCompetition; }
			set { this.dataHolder.IsInCaptionCompetition = value; }
		}
		#endregion
		public Thread Thread
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new Thread(K);
					}
					else
					{
						bob = new Thread();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region ThreadSet
	public partial class ThreadSet : BobSet, IEnumerable<Thread>
	{
		public ThreadSet(Query query) : base(query) { }

		public Thread this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new Thread(this);
					((Thread)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (Thread)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new ThreadTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<Thread> ToList()
		{
			List<Thread> list = new List<Thread>();
			foreach (Thread item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<Thread> Members

		public new IEnumerator<Thread> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region ThreadTableDef
	public class ThreadTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "Thread";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "4576C3F1";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return Thread.GetColumnName((Thread.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.Thread;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return true;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return Thread.Columns.K;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			Thread.Columns c = (Thread.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case Thread.Columns.K: ColumnStore[i] = new ColumnDef(c, "K", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey | SqlColumnFlag.AutoNumber, null); break;
					case Thread.Columns.Subject: ColumnStore[i] = new ColumnDef(c, "Subject", SqlDbType.VarChar, 200, ""); break;
					case Thread.Columns.ParentObjectType: ColumnStore[i] = new ColumnDef(c, "ParentObjectType", SqlDbType.Int, 0); break;
					case Thread.Columns.ParentObjectK: ColumnStore[i] = new ColumnDef(c, "ParentObjectK", SqlDbType.Int, 0); break;
					case Thread.Columns.UsrK: ColumnStore[i] = new ColumnDef(c, "UsrK", SqlDbType.Int, 0); break;
					case Thread.Columns.Enabled: ColumnStore[i] = new ColumnDef(c, "Enabled", SqlDbType.Bit, false); break;
					case Thread.Columns.LastPost: ColumnStore[i] = new ColumnDef(c, "LastPost", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case Thread.Columns.LastPostUsrK: ColumnStore[i] = new ColumnDef(c, "LastPostUsrK", SqlDbType.Int, 0); break;
					case Thread.Columns.TotalComments: ColumnStore[i] = new ColumnDef(c, "TotalComments", SqlDbType.Int, 0); break;
					case Thread.Columns.AverageCommentDateTime: ColumnStore[i] = new ColumnDef(c, "AverageCommentDateTime", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case Thread.Columns.Private: ColumnStore[i] = new ColumnDef(c, "Private", SqlDbType.Bit, false); break;
					case Thread.Columns.GroupPrivate: ColumnStore[i] = new ColumnDef(c, "GroupPrivate", SqlDbType.Bit, false); break;
					case Thread.Columns.PrivateGroup: ColumnStore[i] = new ColumnDef(c, "PrivateGroup", SqlDbType.Bit, false); break;
					case Thread.Columns.ThemeK: ColumnStore[i] = new ColumnDef(c, "ThemeK", SqlDbType.Int, 0); break;
					case Thread.Columns.ArticleK: ColumnStore[i] = new ColumnDef(c, "ArticleK", SqlDbType.Int, 0); break;
					case Thread.Columns.PhotoK: ColumnStore[i] = new ColumnDef(c, "PhotoK", SqlDbType.Int, 0); break;
					case Thread.Columns.EventK: ColumnStore[i] = new ColumnDef(c, "EventK", SqlDbType.Int, 0); break;
					case Thread.Columns.VenueK: ColumnStore[i] = new ColumnDef(c, "VenueK", SqlDbType.Int, 0); break;
					case Thread.Columns.PlaceK: ColumnStore[i] = new ColumnDef(c, "PlaceK", SqlDbType.Int, 0); break;
					case Thread.Columns.CountryK: ColumnStore[i] = new ColumnDef(c, "CountryK", SqlDbType.Int, 0); break;
					case Thread.Columns.BrandK: ColumnStore[i] = new ColumnDef(c, "BrandK", SqlDbType.Int, 0); break;
					case Thread.Columns.GroupK: ColumnStore[i] = new ColumnDef(c, "GroupK", SqlDbType.Int, 0); break;
					case Thread.Columns.MusicTypeK: ColumnStore[i] = new ColumnDef(c, "MusicTypeK", SqlDbType.Int, 0); break;
					case Thread.Columns.IsNews: ColumnStore[i] = new ColumnDef(c, "IsNews", SqlDbType.Bit, false); break;
					case Thread.Columns.DateTime: ColumnStore[i] = new ColumnDef(c, "DateTime", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case Thread.Columns.IsNationwideNews: ColumnStore[i] = new ColumnDef(c, "IsNationwideNews", SqlDbType.Bit, false); break;
					case Thread.Columns.IsReview: ColumnStore[i] = new ColumnDef(c, "IsReview", SqlDbType.Bit, false); break;
					case Thread.Columns.IsSticky: ColumnStore[i] = new ColumnDef(c, "IsSticky", SqlDbType.Bit, false); break;
					case Thread.Columns.IsWorldwideNews: ColumnStore[i] = new ColumnDef(c, "IsWorldwideNews", SqlDbType.Bit, false); break;
					case Thread.Columns.TotalParticipants: ColumnStore[i] = new ColumnDef(c, "TotalParticipants", SqlDbType.Int, 0); break;
					case Thread.Columns.FirstParticipantUsrK: ColumnStore[i] = new ColumnDef(c, "FirstParticipantUsrK", SqlDbType.Int, 0); break;
					case Thread.Columns.HideFromHighlights: ColumnStore[i] = new ColumnDef(c, "HideFromHighlights", SqlDbType.Bit, false); break;
					case Thread.Columns.HotTopicsOrder: ColumnStore[i] = new ColumnDef(c, "HotTopicsOrder", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case Thread.Columns.UrlFragment: ColumnStore[i] = new ColumnDef(c, "UrlFragment", SqlDbType.VarChar, 255, ""); break;
					case Thread.Columns.Sealed: ColumnStore[i] = new ColumnDef(c, "Sealed", SqlDbType.Bit, false); break;
					case Thread.Columns.Closed: ColumnStore[i] = new ColumnDef(c, "Closed", SqlDbType.Bit, false); break;
					case Thread.Columns.NewsStatus: ColumnStore[i] = new ColumnDef(c, "NewsStatus", SqlDbType.Int, 0); break;
					case Thread.Columns.NewsLevel: ColumnStore[i] = new ColumnDef(c, "NewsLevel", SqlDbType.Int, 0); break;
					case Thread.Columns.NewsUsrK: ColumnStore[i] = new ColumnDef(c, "NewsUsrK", SqlDbType.Int, 0); break;
					case Thread.Columns.TotalWatching: ColumnStore[i] = new ColumnDef(c, "TotalWatching", SqlDbType.Int, 0); break;
					case Thread.Columns.NewsModeratorUsrK: ColumnStore[i] = new ColumnDef(c, "NewsModeratorUsrK", SqlDbType.Int, 0); break;
					case Thread.Columns.NewsModeratedByUsrK: ColumnStore[i] = new ColumnDef(c, "NewsModeratedByUsrK", SqlDbType.Int, 0); break;
					case Thread.Columns.NewsModerationDateTime: ColumnStore[i] = new ColumnDef(c, "NewsModerationDateTime", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case Thread.Columns.IsInCaptionCompetition: ColumnStore[i] = new ColumnDef(c, "IsInCaptionCompetition", SqlDbType.Bit, false); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(Thread.Columns.K);
						InitColumn(Thread.Columns.Subject);
						InitColumn(Thread.Columns.ParentObjectType);
						InitColumn(Thread.Columns.ParentObjectK);
						InitColumn(Thread.Columns.UsrK);
						InitColumn(Thread.Columns.Enabled);
						InitColumn(Thread.Columns.LastPost);
						InitColumn(Thread.Columns.LastPostUsrK);
						InitColumn(Thread.Columns.TotalComments);
						InitColumn(Thread.Columns.AverageCommentDateTime);
						InitColumn(Thread.Columns.Private);
						InitColumn(Thread.Columns.GroupPrivate);
						InitColumn(Thread.Columns.PrivateGroup);
						InitColumn(Thread.Columns.ThemeK);
						InitColumn(Thread.Columns.ArticleK);
						InitColumn(Thread.Columns.PhotoK);
						InitColumn(Thread.Columns.EventK);
						InitColumn(Thread.Columns.VenueK);
						InitColumn(Thread.Columns.PlaceK);
						InitColumn(Thread.Columns.CountryK);
						InitColumn(Thread.Columns.BrandK);
						InitColumn(Thread.Columns.GroupK);
						InitColumn(Thread.Columns.MusicTypeK);
						InitColumn(Thread.Columns.IsNews);
						InitColumn(Thread.Columns.DateTime);
						InitColumn(Thread.Columns.IsNationwideNews);
						InitColumn(Thread.Columns.IsReview);
						InitColumn(Thread.Columns.IsSticky);
						InitColumn(Thread.Columns.IsWorldwideNews);
						InitColumn(Thread.Columns.TotalParticipants);
						InitColumn(Thread.Columns.FirstParticipantUsrK);
						InitColumn(Thread.Columns.HideFromHighlights);
						InitColumn(Thread.Columns.HotTopicsOrder);
						InitColumn(Thread.Columns.UrlFragment);
						InitColumn(Thread.Columns.Sealed);
						InitColumn(Thread.Columns.Closed);
						InitColumn(Thread.Columns.NewsStatus);
						InitColumn(Thread.Columns.NewsLevel);
						InitColumn(Thread.Columns.NewsUsrK);
						InitColumn(Thread.Columns.TotalWatching);
						InitColumn(Thread.Columns.NewsModeratorUsrK);
						InitColumn(Thread.Columns.NewsModeratedByUsrK);
						InitColumn(Thread.Columns.NewsModerationDateTime);
						InitColumn(Thread.Columns.IsInCaptionCompetition);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region ThreadUsr
	/// <summary>
	/// Links a private thread to many users
	/// </summary>
	public partial class ThreadUsr : Model.Entities.ThreadUsr, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// The thread
			/// </summary>
			ThreadK = 0x00560001,
			/// <summary>
			/// The user that has been invited
			/// </summary>
			UsrK = 0x00560002,
			/// <summary>
			/// The user that made the invitation
			/// </summary>
			InvitingUsrK = 0x00560003,
			/// <summary>
			/// 0=New, 1=Accepted
			/// </summary>
			Status = 0x00560004,
			/// <summary>
			/// Datetime invitation made
			/// </summary>
			DateTime = 0x00560005,
			/// <summary>
			/// Type of private chat alert
			/// </summary>
			PrivateChatType = 0x00560006,
			/// <summary>
			/// Favourite topic?
			/// </summary>
			Favourite = 0x00560007,
			/// <summary>
			/// Deleted invitation?
			/// </summary>
			Deleted = 0x00560008,
			/// <summary>
			/// The datetime that the thread was last viewed
			/// </summary>
			ViewDateTime = 0x00560009,
			/// <summary>
			/// The new datetime (when this is set, it's value is copied to the DateTime if it is more than 5 mins ago) 
			/// </summary>
			ViewDateTimeLatest = 0x0056000a,
			/// <summary>
			/// The number of comments that have been viewed at the time of the ViewDateTime
			/// </summary>
			ViewComments = 0x0056000b,
			/// <summary>
			/// The number of comments that have been viewed at the time of the ViewDateTimeLatest
			/// </summary>
			ViewCommentsLatest = 0x0056000c,
			/// <summary>
			/// Datetime of last status change
			/// </summary>
			StatusChangeDateTime = 0x0056000d,
			/// <summary>
			/// Type of object that caused the previous status change
			/// </summary>
			StatusChangeObjectType = 0x0056000e,
			/// <summary>
			/// Key of the object that caused the previous status change
			/// </summary>
			StatusChangeObjectK = 0x0056000f,
		}
		#endregion
		public static string GetColumnName(ThreadUsr.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case ThreadUsr.Columns.ThreadK: return "ThreadK";
						case ThreadUsr.Columns.UsrK: return "UsrK";
						case ThreadUsr.Columns.InvitingUsrK: return "InvitingUsrK";
						case ThreadUsr.Columns.Status: return "Status";
						case ThreadUsr.Columns.DateTime: return "DateTime";
						case ThreadUsr.Columns.PrivateChatType: return "PrivateChatType";
						case ThreadUsr.Columns.Favourite: return "Favourite";
						case ThreadUsr.Columns.Deleted: return "Deleted";
						case ThreadUsr.Columns.ViewDateTime: return "ViewDateTime";
						case ThreadUsr.Columns.ViewDateTimeLatest: return "ViewDateTimeLatest";
						case ThreadUsr.Columns.ViewComments: return "ViewComments";
						case ThreadUsr.Columns.ViewCommentsLatest: return "ViewCommentsLatest";
						case ThreadUsr.Columns.StatusChangeDateTime: return "StatusChangeDateTime";
						case ThreadUsr.Columns.StatusChangeObjectType: return "StatusChangeObjectType";
						case ThreadUsr.Columns.StatusChangeObjectK: return "StatusChangeObjectK";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(ThreadUsr.Columns columnEnum)
		{
			switch (columnEnum)
			{
																			default: return false;
			}
		}


		#region Common
	 
		public ThreadUsr(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);}
		public ThreadUsr()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.ThreadUsr);
		}
		public ThreadUsr(BobSet bs)
		{
			this.Bob = new Bob(Bobs.Tables.Defs.ThreadUsr, bs);
		}
		public ThreadUsr(IBob Parent, object Column) : this()
		{
			this.Bob.GetBobFromParentSimple(Parent, Column, TablesEnum.ThreadUsr);
		}
		public ThreadUsr(int ThreadK, int UsrK) : this()
		{
			this.Bob.GetBobFromPrimaryKeyArray(new Q[] {new Q(ThreadUsr.Columns.ThreadK,ThreadK), new Q(ThreadUsr.Columns.UsrK,UsrK)});
		} 
		#endregion

	}
	#endregion
	#region ThreadUsrTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region ThreadUsr
	/// <summary>
	/// Links a private thread to many users
	/// </summary>
	[Serializable]
	public partial class ThreadUsr 
	{
		
		#region Simple members
		/// <summary>
		/// The thread
		/// </summary>
		public override int ThreadK
		{
			get { return (int)this[ThreadUsr.Columns.ThreadK]; }
			set { this[ThreadUsr.Columns.ThreadK] = value; }
		}
		/// <summary>
		/// The user that has been invited
		/// </summary>
		public override int UsrK
		{
			get { return (int)this[ThreadUsr.Columns.UsrK]; }
			set { this[ThreadUsr.Columns.UsrK] = value; }
		}
		/// <summary>
		/// The user that made the invitation
		/// </summary>
		public override int InvitingUsrK
		{
			get { return (int)this[ThreadUsr.Columns.InvitingUsrK]; }
			set { this[ThreadUsr.Columns.InvitingUsrK] = value; }
		}
		/// <summary>
		/// 0=New, 1=Accepted
		/// </summary>
		public override int Status
		{
			get { return (int)this[ThreadUsr.Columns.Status]; }
			set { this[ThreadUsr.Columns.Status] = value; }
		}
		/// <summary>
		/// Datetime invitation made
		/// </summary>
		public override DateTime DateTime
		{
			get { return (DateTime)this[ThreadUsr.Columns.DateTime]; }
			set { this[ThreadUsr.Columns.DateTime] = value; }
		}
		/// <summary>
		/// Type of private chat alert
		/// </summary>
		public override int PrivateChatType
		{
			get { return (int)this[ThreadUsr.Columns.PrivateChatType]; }
			set { this[ThreadUsr.Columns.PrivateChatType] = value; }
		}
		/// <summary>
		/// Favourite topic?
		/// </summary>
		public override bool Favourite
		{
			get { return (bool)this[ThreadUsr.Columns.Favourite]; }
			set { this[ThreadUsr.Columns.Favourite] = value; }
		}
		/// <summary>
		/// Deleted invitation?
		/// </summary>
		public override bool Deleted
		{
			get { return (bool)this[ThreadUsr.Columns.Deleted]; }
			set { this[ThreadUsr.Columns.Deleted] = value; }
		}
		/// <summary>
		/// The datetime that the thread was last viewed
		/// </summary>
		public override DateTime ViewDateTime
		{
			get { return (DateTime)this[ThreadUsr.Columns.ViewDateTime]; }
			set { this[ThreadUsr.Columns.ViewDateTime] = value; }
		}
		/// <summary>
		/// The new datetime (when this is set, it's value is copied to the DateTime if it is more than 5 mins ago) 
		/// </summary>
		public override DateTime ViewDateTimeLatest
		{
			get { return (DateTime)this[ThreadUsr.Columns.ViewDateTimeLatest]; }
			set { this[ThreadUsr.Columns.ViewDateTimeLatest] = value; }
		}
		/// <summary>
		/// The number of comments that have been viewed at the time of the ViewDateTime
		/// </summary>
		public override int ViewComments
		{
			get { return (int)this[ThreadUsr.Columns.ViewComments]; }
			set { this[ThreadUsr.Columns.ViewComments] = value; }
		}
		/// <summary>
		/// The number of comments that have been viewed at the time of the ViewDateTimeLatest
		/// </summary>
		public override int ViewCommentsLatest
		{
			get { return (int)this[ThreadUsr.Columns.ViewCommentsLatest]; }
			set { this[ThreadUsr.Columns.ViewCommentsLatest] = value; }
		}
		/// <summary>
		/// Datetime of last status change
		/// </summary>
		public override DateTime StatusChangeDateTime
		{
			get { return (DateTime)this[ThreadUsr.Columns.StatusChangeDateTime]; }
			set { this[ThreadUsr.Columns.StatusChangeDateTime] = value; }
		}
		/// <summary>
		/// Type of object that caused the previous status change
		/// </summary>
		public override int StatusChangeObjectType
		{
			get { return (int)this[ThreadUsr.Columns.StatusChangeObjectType]; }
			set { this[ThreadUsr.Columns.StatusChangeObjectType] = value; }
		}
		/// <summary>
		/// Key of the object that caused the previous status change
		/// </summary>
		public override int StatusChangeObjectK
		{
			get { return (int)this[ThreadUsr.Columns.StatusChangeObjectK]; }
			set { this[ThreadUsr.Columns.StatusChangeObjectK] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildThreadUsrs
	{
		CachedSqlSelect<ThreadUsr> ChildThreadUsrs();
		CachedSqlSelect<ThreadUsr> ChildThreadUsrs(Q where);
		CachedSqlSelect<ThreadUsr> ChildThreadUsrs(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<ThreadUsr> ChildThreadUsrs(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class ThreadUsr 
		{
		}

	#region ThreadUsrDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region ThreadUsrDataHolder
	/// <summary>
	/// Links a private thread to many usersDataHolder
	/// </summary>
	[Serializable]
	public partial class ThreadUsrDataHolder : DataHolder<ThreadUsr>
	{
		ThreadUsr dataHolder;
		[NonSerializedAttribute] ThreadUsr bob;

		public ThreadUsrDataHolder()
		{
			this.dataHolder = new ThreadUsr();
		}
		
		void CopyValues(ThreadUsr source, ThreadUsr destination)
		{
			destination[Bobs.ThreadUsr.Columns.ThreadK] = source[Bobs.ThreadUsr.Columns.ThreadK];
			destination[Bobs.ThreadUsr.Columns.UsrK] = source[Bobs.ThreadUsr.Columns.UsrK];
			destination[Bobs.ThreadUsr.Columns.InvitingUsrK] = source[Bobs.ThreadUsr.Columns.InvitingUsrK];
			destination[Bobs.ThreadUsr.Columns.Status] = source[Bobs.ThreadUsr.Columns.Status];
			destination[Bobs.ThreadUsr.Columns.DateTime] = source[Bobs.ThreadUsr.Columns.DateTime];
			destination[Bobs.ThreadUsr.Columns.PrivateChatType] = source[Bobs.ThreadUsr.Columns.PrivateChatType];
			destination[Bobs.ThreadUsr.Columns.Favourite] = source[Bobs.ThreadUsr.Columns.Favourite];
			destination[Bobs.ThreadUsr.Columns.Deleted] = source[Bobs.ThreadUsr.Columns.Deleted];
			destination[Bobs.ThreadUsr.Columns.ViewDateTime] = source[Bobs.ThreadUsr.Columns.ViewDateTime];
			destination[Bobs.ThreadUsr.Columns.ViewDateTimeLatest] = source[Bobs.ThreadUsr.Columns.ViewDateTimeLatest];
			destination[Bobs.ThreadUsr.Columns.ViewComments] = source[Bobs.ThreadUsr.Columns.ViewComments];
			destination[Bobs.ThreadUsr.Columns.ViewCommentsLatest] = source[Bobs.ThreadUsr.Columns.ViewCommentsLatest];
			destination[Bobs.ThreadUsr.Columns.StatusChangeDateTime] = source[Bobs.ThreadUsr.Columns.StatusChangeDateTime];
			destination[Bobs.ThreadUsr.Columns.StatusChangeObjectType] = source[Bobs.ThreadUsr.Columns.StatusChangeObjectType];
			destination[Bobs.ThreadUsr.Columns.StatusChangeObjectK] = source[Bobs.ThreadUsr.Columns.StatusChangeObjectK];
		}
		
		public ThreadUsrDataHolder(ThreadUsr bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// The thread
		/// </summary>
		public int ThreadK
		{
			get { return dataHolder.ThreadK; }
			set { this.dataHolder.ThreadK = value; }
		}
		/// <summary>
		/// The user that has been invited
		/// </summary>
		public int UsrK
		{
			get { return dataHolder.UsrK; }
			set { this.dataHolder.UsrK = value; }
		}
		/// <summary>
		/// The user that made the invitation
		/// </summary>
		public int InvitingUsrK
		{
			get { return dataHolder.InvitingUsrK; }
			set { this.dataHolder.InvitingUsrK = value; }
		}
		/// <summary>
		/// 0=New, 1=Accepted
		/// </summary>
		public int Status
		{
			get { return dataHolder.Status; }
			set { this.dataHolder.Status = value; }
		}
		/// <summary>
		/// Datetime invitation made
		/// </summary>
		public DateTime DateTime
		{
			get { return dataHolder.DateTime; }
			set { this.dataHolder.DateTime = value; }
		}
		/// <summary>
		/// Type of private chat alert
		/// </summary>
		public int PrivateChatType
		{
			get { return dataHolder.PrivateChatType; }
			set { this.dataHolder.PrivateChatType = value; }
		}
		/// <summary>
		/// Favourite topic?
		/// </summary>
		public bool Favourite
		{
			get { return dataHolder.Favourite; }
			set { this.dataHolder.Favourite = value; }
		}
		/// <summary>
		/// Deleted invitation?
		/// </summary>
		public bool Deleted
		{
			get { return dataHolder.Deleted; }
			set { this.dataHolder.Deleted = value; }
		}
		/// <summary>
		/// The datetime that the thread was last viewed
		/// </summary>
		public DateTime ViewDateTime
		{
			get { return dataHolder.ViewDateTime; }
			set { this.dataHolder.ViewDateTime = value; }
		}
		/// <summary>
		/// The new datetime (when this is set, it's value is copied to the DateTime if it is more than 5 mins ago) 
		/// </summary>
		public DateTime ViewDateTimeLatest
		{
			get { return dataHolder.ViewDateTimeLatest; }
			set { this.dataHolder.ViewDateTimeLatest = value; }
		}
		/// <summary>
		/// The number of comments that have been viewed at the time of the ViewDateTime
		/// </summary>
		public int ViewComments
		{
			get { return dataHolder.ViewComments; }
			set { this.dataHolder.ViewComments = value; }
		}
		/// <summary>
		/// The number of comments that have been viewed at the time of the ViewDateTimeLatest
		/// </summary>
		public int ViewCommentsLatest
		{
			get { return dataHolder.ViewCommentsLatest; }
			set { this.dataHolder.ViewCommentsLatest = value; }
		}
		/// <summary>
		/// Datetime of last status change
		/// </summary>
		public DateTime StatusChangeDateTime
		{
			get { return dataHolder.StatusChangeDateTime; }
			set { this.dataHolder.StatusChangeDateTime = value; }
		}
		/// <summary>
		/// Type of object that caused the previous status change
		/// </summary>
		public int StatusChangeObjectType
		{
			get { return dataHolder.StatusChangeObjectType; }
			set { this.dataHolder.StatusChangeObjectType = value; }
		}
		/// <summary>
		/// Key of the object that caused the previous status change
		/// </summary>
		public int StatusChangeObjectK
		{
			get { return dataHolder.StatusChangeObjectK; }
			set { this.dataHolder.StatusChangeObjectK = value; }
		}
		#endregion
		public ThreadUsr ThreadUsr
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new ThreadUsr(K);
					}
					else
					{
						bob = new ThreadUsr();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region ThreadUsrSet
	public partial class ThreadUsrSet : BobSet, IEnumerable<ThreadUsr>
	{
		public ThreadUsrSet(Query query) : base(query) { }

		public ThreadUsr this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new ThreadUsr(this);
					((ThreadUsr)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (ThreadUsr)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new ThreadUsrTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<ThreadUsr> ToList()
		{
			List<ThreadUsr> list = new List<ThreadUsr>();
			foreach (ThreadUsr item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<ThreadUsr> Members

		public new IEnumerator<ThreadUsr> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region ThreadUsrTableDef
	public class ThreadUsrTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "ThreadUsr";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "02B49E6F";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return ThreadUsr.GetColumnName((ThreadUsr.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.ThreadUsr;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return false;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return null;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			ThreadUsr.Columns c = (ThreadUsr.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case ThreadUsr.Columns.ThreadK: ColumnStore[i] = new ColumnDef(c, "ThreadK", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey, 0); break;
					case ThreadUsr.Columns.UsrK: ColumnStore[i] = new ColumnDef(c, "UsrK", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey, 0); break;
					case ThreadUsr.Columns.InvitingUsrK: ColumnStore[i] = new ColumnDef(c, "InvitingUsrK", SqlDbType.Int, 0); break;
					case ThreadUsr.Columns.Status: ColumnStore[i] = new ColumnDef(c, "Status", SqlDbType.Int, 0); break;
					case ThreadUsr.Columns.DateTime: ColumnStore[i] = new ColumnDef(c, "DateTime", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case ThreadUsr.Columns.PrivateChatType: ColumnStore[i] = new ColumnDef(c, "PrivateChatType", SqlDbType.Int, 0); break;
					case ThreadUsr.Columns.Favourite: ColumnStore[i] = new ColumnDef(c, "Favourite", SqlDbType.Bit, false); break;
					case ThreadUsr.Columns.Deleted: ColumnStore[i] = new ColumnDef(c, "Deleted", SqlDbType.Bit, false); break;
					case ThreadUsr.Columns.ViewDateTime: ColumnStore[i] = new ColumnDef(c, "ViewDateTime", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case ThreadUsr.Columns.ViewDateTimeLatest: ColumnStore[i] = new ColumnDef(c, "ViewDateTimeLatest", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case ThreadUsr.Columns.ViewComments: ColumnStore[i] = new ColumnDef(c, "ViewComments", SqlDbType.Int, 0); break;
					case ThreadUsr.Columns.ViewCommentsLatest: ColumnStore[i] = new ColumnDef(c, "ViewCommentsLatest", SqlDbType.Int, 0); break;
					case ThreadUsr.Columns.StatusChangeDateTime: ColumnStore[i] = new ColumnDef(c, "StatusChangeDateTime", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case ThreadUsr.Columns.StatusChangeObjectType: ColumnStore[i] = new ColumnDef(c, "StatusChangeObjectType", SqlDbType.Int, 0); break;
					case ThreadUsr.Columns.StatusChangeObjectK: ColumnStore[i] = new ColumnDef(c, "StatusChangeObjectK", SqlDbType.Int, 0); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(ThreadUsr.Columns.ThreadK);
						InitColumn(ThreadUsr.Columns.UsrK);
						InitColumn(ThreadUsr.Columns.InvitingUsrK);
						InitColumn(ThreadUsr.Columns.Status);
						InitColumn(ThreadUsr.Columns.DateTime);
						InitColumn(ThreadUsr.Columns.PrivateChatType);
						InitColumn(ThreadUsr.Columns.Favourite);
						InitColumn(ThreadUsr.Columns.Deleted);
						InitColumn(ThreadUsr.Columns.ViewDateTime);
						InitColumn(ThreadUsr.Columns.ViewDateTimeLatest);
						InitColumn(ThreadUsr.Columns.ViewComments);
						InitColumn(ThreadUsr.Columns.ViewCommentsLatest);
						InitColumn(ThreadUsr.Columns.StatusChangeDateTime);
						InitColumn(ThreadUsr.Columns.StatusChangeObjectType);
						InitColumn(ThreadUsr.Columns.StatusChangeObjectK);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region Ticket
	/// <summary>
	/// One ticket created each time someone buys a ticket
	/// </summary>
	public partial class Ticket : Model.Entities.Ticket, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// Key
			/// </summary>
			K = 0x00570001,
			/// <summary>
			/// Ticket run link
			/// </summary>
			TicketRunK = 0x00570002,
			/// <summary>
			/// Link to the event table
			/// </summary>
			EventK = 0x00570003,
			/// <summary>
			/// The user that bought the ticket
			/// </summary>
			BuyerUsrK = 0x00570004,
			/// <summary>
			/// Tickets that have been successfully processed should set Enabled = true. Tickets that are not enabled are a place holder to be used while trying to process.
			/// </summary>
			Enabled = 0x00570005,
			/// <summary>
			/// If the ticket has been cancelled
			/// </summary>
			Cancelled = 0x00570006,
			/// <summary>
			/// Date time of the original purchase
			/// </summary>
			BuyDateTime = 0x00570007,
			/// <summary>
			/// Address - Street
			/// </summary>
			AddressStreet = 0x00570008,
			/// <summary>
			/// Address - Area
			/// </summary>
			AddressArea = 0x00570009,
			/// <summary>
			/// Address - Place
			/// </summary>
			AddressTown = 0x0057000a,
			/// <summary>
			/// Address - County
			/// </summary>
			AddressCounty = 0x0057000b,
			/// <summary>
			/// Address - Postcode
			/// </summary>
			AddressPostcode = 0x0057000c,
			/// <summary>
			/// Address - Country (link to Country table)
			/// </summary>
			AddressCountryK = 0x0057000d,
			/// <summary>
			/// Full mobile number including country code (e.g. 447971597702)
			/// </summary>
			Mobile = 0x0057000e,
			/// <summary>
			/// Country code of mobile number (e.g. 44)
			/// </summary>
			MobileCountryCode = 0x0057000f,
			/// <summary>
			/// Mobile number excluding country code and leading zero (e.g. 7971597702)
			/// </summary>
			MobileNumber = 0x00570010,
			/// <summary>
			/// First name, verified by credit card
			/// </summary>
			FirstName = 0x00570011,
			/// <summary>
			/// Last name, verified by credit card
			/// </summary>
			LastName = 0x00570012,
			/// <summary>
			/// Cryptographic hash of the card number
			/// </summary>
			CardNumberHash = 0x00570013,
			/// <summary>
			/// Last 6 digits of the card number used to order
			/// </summary>
			CardNumberEnd = 0x00570014,
			/// <summary>
			/// Number of digits on the card used to order
			/// </summary>
			CardNumberDigits = 0x00570015,
			/// <summary>
			/// Quantity of tickets (for multiple-entrance tickets)
			/// </summary>
			Quantity = 0x00570016,
			/// <summary>
			/// Custom data specific to this ticket run (as a string)
			/// </summary>
			CustomData = 0x00570017,
			/// <summary>
			/// Custom data specific to this ticket run (as xml)
			/// </summary>
			CustomXml = 0x00570018,
			/// <summary>
			/// Link to the invoice item table - e.g. booking reference
			/// </summary>
			InvoiceItemK = 0x00570019,
			/// <summary>
			/// Guid from the browser cookie
			/// </summary>
			BrowserGuid = 0x0057001a,
			/// <summary>
			/// Price in pounds
			/// </summary>
			Price = 0x0057001b,
			/// <summary>
			/// Our booking fee
			/// </summary>
			BookingFee = 0x0057001c,
			/// <summary>
			/// Buyer's IpAddress
			/// </summary>
			IpAddress = 0x0057001d,
			/// <summary>
			/// Post event feedback enum: None=0, Good=1, Bad=2
			/// </summary>
			Feedback = 0x0057001e,
			/// <summary>
			/// Post event feedback text for negative comments
			/// </summary>
			FeedbackNote = 0x0057001f,
			/// <summary>
			/// Date time til when a pending ticket is reserved until
			/// </summary>
			ReserveDateTime = 0x00570020,
			/// <summary>
			/// Random code generated for the ticket
			/// </summary>
			Code = 0x00570021,
			/// <summary>
			/// Domain from which the request originated
			/// </summary>
			DomainK = 0x00570022,
			/// <summary>
			/// Was this ticket cancelled / refunded before the promoter funds release event?
			/// </summary>
			CancelledBeforeFundsRelease = 0x00570023,
			/// <summary>
			/// Date / time that the ticket was cancelled / refunded
			/// </summary>
			CancelledDateTime = 0x00570024,
			/// <summary>
			/// CV2 Security code on the back on the credit card
			/// </summary>
			CardCV2 = 0x00570025,
			/// <summary>
			/// Has the promoter proven that the card was checked?
			/// </summary>
			CardCheckedByPromoter = 0x00570026,
			/// <summary>
			/// How many times the promoter has attempted to confirm card details
			/// </summary>
			CardCheckAttempts = 0x00570027,
			/// <summary>
			/// Name of the person to deliver the tickets to
			/// </summary>
			AddressName = 0x00570028,
			/// <summary>
			/// Is this ticket suspected fraud?
			/// </summary>
			IsFraud = 0x00570029,
		}
		#endregion
		public static string GetColumnName(Ticket.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case Ticket.Columns.K: return "K";
						case Ticket.Columns.TicketRunK: return "TicketRunK";
						case Ticket.Columns.EventK: return "EventK";
						case Ticket.Columns.BuyerUsrK: return "BuyerUsrK";
						case Ticket.Columns.Enabled: return "Enabled";
						case Ticket.Columns.Cancelled: return "Cancelled";
						case Ticket.Columns.BuyDateTime: return "BuyDateTime";
						case Ticket.Columns.AddressStreet: return "AddressStreet";
						case Ticket.Columns.AddressArea: return "AddressArea";
						case Ticket.Columns.AddressTown: return "AddressTown";
						case Ticket.Columns.AddressCounty: return "AddressCounty";
						case Ticket.Columns.AddressPostcode: return "AddressPostcode";
						case Ticket.Columns.AddressCountryK: return "AddressCountryK";
						case Ticket.Columns.Mobile: return "Mobile";
						case Ticket.Columns.MobileCountryCode: return "MobileCountryCode";
						case Ticket.Columns.MobileNumber: return "MobileNumber";
						case Ticket.Columns.FirstName: return "FirstName";
						case Ticket.Columns.LastName: return "LastName";
						case Ticket.Columns.CardNumberHash: return "CardNumberHash";
						case Ticket.Columns.CardNumberEnd: return "CardNumberEnd";
						case Ticket.Columns.CardNumberDigits: return "CardNumberDigits";
						case Ticket.Columns.Quantity: return "Quantity";
						case Ticket.Columns.CustomData: return "CustomData";
						case Ticket.Columns.CustomXml: return "CustomXml";
						case Ticket.Columns.InvoiceItemK: return "InvoiceItemK";
						case Ticket.Columns.BrowserGuid: return "BrowserGuid";
						case Ticket.Columns.Price: return "Price";
						case Ticket.Columns.BookingFee: return "BookingFee";
						case Ticket.Columns.IpAddress: return "IpAddress";
						case Ticket.Columns.Feedback: return "Feedback";
						case Ticket.Columns.FeedbackNote: return "FeedbackNote";
						case Ticket.Columns.ReserveDateTime: return "ReserveDateTime";
						case Ticket.Columns.Code: return "Code";
						case Ticket.Columns.DomainK: return "DomainK";
						case Ticket.Columns.CancelledBeforeFundsRelease: return "CancelledBeforeFundsRelease";
						case Ticket.Columns.CancelledDateTime: return "CancelledDateTime";
						case Ticket.Columns.CardCV2: return "CardCV2";
						case Ticket.Columns.CardCheckedByPromoter: return "CardCheckedByPromoter";
						case Ticket.Columns.CardCheckAttempts: return "CardCheckAttempts";
						case Ticket.Columns.AddressName: return "AddressName";
						case Ticket.Columns.IsFraud: return "IsFraud";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(Ticket.Columns columnEnum)
		{
			switch (columnEnum)
			{
																																													default: return false;
			}
		}


		#region Common
 
		public Ticket(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);  }
		public Ticket()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.Ticket);
		}
		public Ticket(BobSet bs)
		{
			this.Bob = new Bob(bs.Table, bs);
		}
		public Ticket(int TicketK, IBob Parent, object Column)
			: this()
		{
			Bob.GetBobFromParent(TicketK, Parent.Bob, Column, TablesEnum.Ticket);
		}
		public Ticket(int TicketK)
			: this()
		{
			Bob.GetBobFromPrimaryKey(TicketK);
		}
		#endregion

	}
	#endregion
	#region TicketTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region Ticket
	/// <summary>
	/// One ticket created each time someone buys a ticket
	/// </summary>
	[Serializable]
	public partial class Ticket 
	{
		
		#region Simple members
		/// <summary>
		/// Key
		/// </summary>
		public override int K
		{
			get { return (int)this[Ticket.Columns.K] as int? ?? 0 ; }
			set { this[Ticket.Columns.K] = value; }
		}
		/// <summary>
		/// Ticket run link
		/// </summary>
		public override int TicketRunK
		{
			get { return (int)this[Ticket.Columns.TicketRunK]; }
			set { this[Ticket.Columns.TicketRunK] = value; }
		}
		/// <summary>
		/// Link to the event table
		/// </summary>
		public override int EventK
		{
			get { return (int)this[Ticket.Columns.EventK]; }
			set { this[Ticket.Columns.EventK] = value; }
		}
		/// <summary>
		/// The user that bought the ticket
		/// </summary>
		public override int BuyerUsrK
		{
			get { return (int)this[Ticket.Columns.BuyerUsrK]; }
			set { this[Ticket.Columns.BuyerUsrK] = value; }
		}
		/// <summary>
		/// Tickets that have been successfully processed should set Enabled = true. Tickets that are not enabled are a place holder to be used while trying to process.
		/// </summary>
		public override bool Enabled
		{
			get { return (bool)this[Ticket.Columns.Enabled]; }
			set { this[Ticket.Columns.Enabled] = value; }
		}
		/// <summary>
		/// If the ticket has been cancelled
		/// </summary>
		public override bool Cancelled
		{
			get { return (bool)this[Ticket.Columns.Cancelled]; }
			set { this[Ticket.Columns.Cancelled] = value; }
		}
		/// <summary>
		/// Date time of the original purchase
		/// </summary>
		public override DateTime BuyDateTime
		{
			get { return (DateTime)this[Ticket.Columns.BuyDateTime]; }
			set { this[Ticket.Columns.BuyDateTime] = value; }
		}
		/// <summary>
		/// Address - Street
		/// </summary>
		public override string AddressStreet
		{
			get { return (string)this[Ticket.Columns.AddressStreet]; }
			set { this[Ticket.Columns.AddressStreet] = value; }
		}
		/// <summary>
		/// Address - Area
		/// </summary>
		public override string AddressArea
		{
			get { return (string)this[Ticket.Columns.AddressArea]; }
			set { this[Ticket.Columns.AddressArea] = value; }
		}
		/// <summary>
		/// Address - Place
		/// </summary>
		public override string AddressTown
		{
			get { return (string)this[Ticket.Columns.AddressTown]; }
			set { this[Ticket.Columns.AddressTown] = value; }
		}
		/// <summary>
		/// Address - County
		/// </summary>
		public override string AddressCounty
		{
			get { return (string)this[Ticket.Columns.AddressCounty]; }
			set { this[Ticket.Columns.AddressCounty] = value; }
		}
		/// <summary>
		/// Address - Postcode
		/// </summary>
		public override string AddressPostcode
		{
			get { return (string)this[Ticket.Columns.AddressPostcode]; }
			set { this[Ticket.Columns.AddressPostcode] = value; }
		}
		/// <summary>
		/// Address - Country (link to Country table)
		/// </summary>
		public override int AddressCountryK
		{
			get { return (int)this[Ticket.Columns.AddressCountryK]; }
			set { this[Ticket.Columns.AddressCountryK] = value; }
		}
		/// <summary>
		/// Full mobile number including country code (e.g. 447971597702)
		/// </summary>
		public override string Mobile
		{
			get { return (string)this[Ticket.Columns.Mobile]; }
			set { this[Ticket.Columns.Mobile] = value; }
		}
		/// <summary>
		/// Country code of mobile number (e.g. 44)
		/// </summary>
		public override string MobileCountryCode
		{
			get { return (string)this[Ticket.Columns.MobileCountryCode]; }
			set { this[Ticket.Columns.MobileCountryCode] = value; }
		}
		/// <summary>
		/// Mobile number excluding country code and leading zero (e.g. 7971597702)
		/// </summary>
		public override string MobileNumber
		{
			get { return (string)this[Ticket.Columns.MobileNumber]; }
			set { this[Ticket.Columns.MobileNumber] = value; }
		}
		/// <summary>
		/// First name, verified by credit card
		/// </summary>
		public override string FirstName
		{
			get { return (string)this[Ticket.Columns.FirstName]; }
			set { this[Ticket.Columns.FirstName] = value; }
		}
		/// <summary>
		/// Last name, verified by credit card
		/// </summary>
		public override string LastName
		{
			get { return (string)this[Ticket.Columns.LastName]; }
			set { this[Ticket.Columns.LastName] = value; }
		}
		/// <summary>
		/// Cryptographic hash of the card number
		/// </summary>
		public Guid	CardNumberHash
		{
			get{ return Cambro.Misc.Db.GuidConvertor(this[Ticket.Columns.CardNumberHash]);}		
			set{ this[Ticket.Columns.CardNumberHash] = new System.Data.SqlTypes.SqlGuid(value);}
		}
		/// <summary>
		/// Last 6 digits of the card number used to order
		/// </summary>
		public override string CardNumberEnd
		{
			get { return (string)this[Ticket.Columns.CardNumberEnd]; }
			set { this[Ticket.Columns.CardNumberEnd] = value; }
		}
		/// <summary>
		/// Number of digits on the card used to order
		/// </summary>
		public override int CardNumberDigits
		{
			get { return (int)this[Ticket.Columns.CardNumberDigits]; }
			set { this[Ticket.Columns.CardNumberDigits] = value; }
		}
		/// <summary>
		/// Quantity of tickets (for multiple-entrance tickets)
		/// </summary>
		public override int Quantity
		{
			get { return (int)this[Ticket.Columns.Quantity]; }
			set { this[Ticket.Columns.Quantity] = value; }
		}
		/// <summary>
		/// Custom data specific to this ticket run (as a string)
		/// </summary>
		public override string CustomData
		{
			get { return (string)this[Ticket.Columns.CustomData]; }
			set { this[Ticket.Columns.CustomData] = value; }
		}
		/// <summary>
		/// Custom data specific to this ticket run (as xml)
		/// </summary>
		public override string CustomXml
		{
			get { return (string)this[Ticket.Columns.CustomXml]; }
			set { this[Ticket.Columns.CustomXml] = value; }
		}
		/// <summary>
		/// Link to the invoice item table - e.g. booking reference
		/// </summary>
		public override int InvoiceItemK
		{
			get { return (int)this[Ticket.Columns.InvoiceItemK]; }
			set { this[Ticket.Columns.InvoiceItemK] = value; }
		}
		/// <summary>
		/// Guid from the browser cookie
		/// </summary>
		public Guid	BrowserGuid
		{
			get{ return Cambro.Misc.Db.GuidConvertor(this[Ticket.Columns.BrowserGuid]);}		
			set{ this[Ticket.Columns.BrowserGuid] = new System.Data.SqlTypes.SqlGuid(value);}
		}
		/// <summary>
		/// Price in pounds
		/// </summary>
		public override decimal Price
		{
			get { return (decimal)this[Ticket.Columns.Price]; }
			set { this[Ticket.Columns.Price] = value; }
		}
		/// <summary>
		/// Our booking fee
		/// </summary>
		public override decimal BookingFee
		{
			get { return (decimal)this[Ticket.Columns.BookingFee]; }
			set { this[Ticket.Columns.BookingFee] = value; }
		}
		/// <summary>
		/// Buyer's IpAddress
		/// </summary>
		public override string IpAddress
		{
			get { return (string)this[Ticket.Columns.IpAddress]; }
			set { this[Ticket.Columns.IpAddress] = value; }
		}
		/// <summary>
		/// Post event feedback enum: None=0, Good=1, Bad=2
		/// </summary>
		public override int Feedback
		{
			get { return (int)this[Ticket.Columns.Feedback]; }
			set { this[Ticket.Columns.Feedback] = value; }
		}
		/// <summary>
		/// Post event feedback text for negative comments
		/// </summary>
		public override string FeedbackNote
		{
			get { return (string)this[Ticket.Columns.FeedbackNote]; }
			set { this[Ticket.Columns.FeedbackNote] = value; }
		}
		/// <summary>
		/// Date time til when a pending ticket is reserved until
		/// </summary>
		public override DateTime ReserveDateTime
		{
			get { return (DateTime)this[Ticket.Columns.ReserveDateTime]; }
			set { this[Ticket.Columns.ReserveDateTime] = value; }
		}
		/// <summary>
		/// Random code generated for the ticket
		/// </summary>
		public override string Code
		{
			get { return (string)this[Ticket.Columns.Code]; }
			set { this[Ticket.Columns.Code] = value; }
		}
		/// <summary>
		/// Domain from which the request originated
		/// </summary>
		public override int DomainK
		{
			get { return (int)this[Ticket.Columns.DomainK]; }
			set { this[Ticket.Columns.DomainK] = value; }
		}
		/// <summary>
		/// Was this ticket cancelled / refunded before the promoter funds release event?
		/// </summary>
		public override bool CancelledBeforeFundsRelease
		{
			get { return (bool)this[Ticket.Columns.CancelledBeforeFundsRelease]; }
			set { this[Ticket.Columns.CancelledBeforeFundsRelease] = value; }
		}
		/// <summary>
		/// Date / time that the ticket was cancelled / refunded
		/// </summary>
		public override DateTime CancelledDateTime
		{
			get { return (DateTime)this[Ticket.Columns.CancelledDateTime]; }
			set { this[Ticket.Columns.CancelledDateTime] = value; }
		}
		/// <summary>
		/// CV2 Security code on the back on the credit card
		/// </summary>
		public override string CardCV2
		{
			get { return (string)this[Ticket.Columns.CardCV2]; }
			set { this[Ticket.Columns.CardCV2] = value; }
		}
		/// <summary>
		/// Has the promoter proven that the card was checked?
		/// </summary>
		public override bool CardCheckedByPromoter
		{
			get { return (bool)this[Ticket.Columns.CardCheckedByPromoter]; }
			set { this[Ticket.Columns.CardCheckedByPromoter] = value; }
		}
		/// <summary>
		/// How many times the promoter has attempted to confirm card details
		/// </summary>
		public override int CardCheckAttempts
		{
			get { return (int)this[Ticket.Columns.CardCheckAttempts]; }
			set { this[Ticket.Columns.CardCheckAttempts] = value; }
		}
		/// <summary>
		/// Name of the person to deliver the tickets to
		/// </summary>
		public override string AddressName
		{
			get { return (string)this[Ticket.Columns.AddressName]; }
			set { this[Ticket.Columns.AddressName] = value; }
		}
		/// <summary>
		/// Is this ticket suspected fraud?
		/// </summary>
		public override bool? IsFraud
		{
			get { return (bool?)this[Ticket.Columns.IsFraud]; }
			set { this[Ticket.Columns.IsFraud] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildTickets
	{
		CachedSqlSelect<Ticket> ChildTickets();
		CachedSqlSelect<Ticket> ChildTickets(Q where);
		CachedSqlSelect<Ticket> ChildTickets(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<Ticket> ChildTickets(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class Ticket 
		{
		}

	#region TicketDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region TicketDataHolder
	/// <summary>
	/// One ticket created each time someone buys a ticketDataHolder
	/// </summary>
	[Serializable]
	public partial class TicketDataHolder : DataHolder<Ticket>
	{
		Ticket dataHolder;
		[NonSerializedAttribute] Ticket bob;

		public TicketDataHolder()
		{
			this.dataHolder = new Ticket();
		}
		
		void CopyValues(Ticket source, Ticket destination)
		{
			destination[Bobs.Ticket.Columns.K] = source[Bobs.Ticket.Columns.K];
			destination[Bobs.Ticket.Columns.TicketRunK] = source[Bobs.Ticket.Columns.TicketRunK];
			destination[Bobs.Ticket.Columns.EventK] = source[Bobs.Ticket.Columns.EventK];
			destination[Bobs.Ticket.Columns.BuyerUsrK] = source[Bobs.Ticket.Columns.BuyerUsrK];
			destination[Bobs.Ticket.Columns.Enabled] = source[Bobs.Ticket.Columns.Enabled];
			destination[Bobs.Ticket.Columns.Cancelled] = source[Bobs.Ticket.Columns.Cancelled];
			destination[Bobs.Ticket.Columns.BuyDateTime] = source[Bobs.Ticket.Columns.BuyDateTime];
			destination[Bobs.Ticket.Columns.AddressStreet] = source[Bobs.Ticket.Columns.AddressStreet];
			destination[Bobs.Ticket.Columns.AddressArea] = source[Bobs.Ticket.Columns.AddressArea];
			destination[Bobs.Ticket.Columns.AddressTown] = source[Bobs.Ticket.Columns.AddressTown];
			destination[Bobs.Ticket.Columns.AddressCounty] = source[Bobs.Ticket.Columns.AddressCounty];
			destination[Bobs.Ticket.Columns.AddressPostcode] = source[Bobs.Ticket.Columns.AddressPostcode];
			destination[Bobs.Ticket.Columns.AddressCountryK] = source[Bobs.Ticket.Columns.AddressCountryK];
			destination[Bobs.Ticket.Columns.Mobile] = source[Bobs.Ticket.Columns.Mobile];
			destination[Bobs.Ticket.Columns.MobileCountryCode] = source[Bobs.Ticket.Columns.MobileCountryCode];
			destination[Bobs.Ticket.Columns.MobileNumber] = source[Bobs.Ticket.Columns.MobileNumber];
			destination[Bobs.Ticket.Columns.FirstName] = source[Bobs.Ticket.Columns.FirstName];
			destination[Bobs.Ticket.Columns.LastName] = source[Bobs.Ticket.Columns.LastName];
			destination[Bobs.Ticket.Columns.CardNumberHash] = source[Bobs.Ticket.Columns.CardNumberHash];
			destination[Bobs.Ticket.Columns.CardNumberEnd] = source[Bobs.Ticket.Columns.CardNumberEnd];
			destination[Bobs.Ticket.Columns.CardNumberDigits] = source[Bobs.Ticket.Columns.CardNumberDigits];
			destination[Bobs.Ticket.Columns.Quantity] = source[Bobs.Ticket.Columns.Quantity];
			destination[Bobs.Ticket.Columns.CustomData] = source[Bobs.Ticket.Columns.CustomData];
			destination[Bobs.Ticket.Columns.CustomXml] = source[Bobs.Ticket.Columns.CustomXml];
			destination[Bobs.Ticket.Columns.InvoiceItemK] = source[Bobs.Ticket.Columns.InvoiceItemK];
			destination[Bobs.Ticket.Columns.BrowserGuid] = source[Bobs.Ticket.Columns.BrowserGuid];
			destination[Bobs.Ticket.Columns.Price] = source[Bobs.Ticket.Columns.Price];
			destination[Bobs.Ticket.Columns.BookingFee] = source[Bobs.Ticket.Columns.BookingFee];
			destination[Bobs.Ticket.Columns.IpAddress] = source[Bobs.Ticket.Columns.IpAddress];
			destination[Bobs.Ticket.Columns.Feedback] = source[Bobs.Ticket.Columns.Feedback];
			destination[Bobs.Ticket.Columns.FeedbackNote] = source[Bobs.Ticket.Columns.FeedbackNote];
			destination[Bobs.Ticket.Columns.ReserveDateTime] = source[Bobs.Ticket.Columns.ReserveDateTime];
			destination[Bobs.Ticket.Columns.Code] = source[Bobs.Ticket.Columns.Code];
			destination[Bobs.Ticket.Columns.DomainK] = source[Bobs.Ticket.Columns.DomainK];
			destination[Bobs.Ticket.Columns.CancelledBeforeFundsRelease] = source[Bobs.Ticket.Columns.CancelledBeforeFundsRelease];
			destination[Bobs.Ticket.Columns.CancelledDateTime] = source[Bobs.Ticket.Columns.CancelledDateTime];
			destination[Bobs.Ticket.Columns.CardCV2] = source[Bobs.Ticket.Columns.CardCV2];
			destination[Bobs.Ticket.Columns.CardCheckedByPromoter] = source[Bobs.Ticket.Columns.CardCheckedByPromoter];
			destination[Bobs.Ticket.Columns.CardCheckAttempts] = source[Bobs.Ticket.Columns.CardCheckAttempts];
			destination[Bobs.Ticket.Columns.AddressName] = source[Bobs.Ticket.Columns.AddressName];
			destination[Bobs.Ticket.Columns.IsFraud] = source[Bobs.Ticket.Columns.IsFraud];
		}
		
		public TicketDataHolder(Ticket bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// Key
		/// </summary>
		public int K
		{
			get { return dataHolder.K; }
			set { this.dataHolder.K = value; }
		}
		/// <summary>
		/// Ticket run link
		/// </summary>
		public int TicketRunK
		{
			get { return dataHolder.TicketRunK; }
			set { this.dataHolder.TicketRunK = value; }
		}
		/// <summary>
		/// Link to the event table
		/// </summary>
		public int EventK
		{
			get { return dataHolder.EventK; }
			set { this.dataHolder.EventK = value; }
		}
		/// <summary>
		/// The user that bought the ticket
		/// </summary>
		public int BuyerUsrK
		{
			get { return dataHolder.BuyerUsrK; }
			set { this.dataHolder.BuyerUsrK = value; }
		}
		/// <summary>
		/// Tickets that have been successfully processed should set Enabled = true. Tickets that are not enabled are a place holder to be used while trying to process.
		/// </summary>
		public bool Enabled
		{
			get { return dataHolder.Enabled; }
			set { this.dataHolder.Enabled = value; }
		}
		/// <summary>
		/// If the ticket has been cancelled
		/// </summary>
		public bool Cancelled
		{
			get { return dataHolder.Cancelled; }
			set { this.dataHolder.Cancelled = value; }
		}
		/// <summary>
		/// Date time of the original purchase
		/// </summary>
		public DateTime BuyDateTime
		{
			get { return dataHolder.BuyDateTime; }
			set { this.dataHolder.BuyDateTime = value; }
		}
		/// <summary>
		/// Address - Street
		/// </summary>
		public string AddressStreet
		{
			get { return dataHolder.AddressStreet; }
			set { this.dataHolder.AddressStreet = value; }
		}
		/// <summary>
		/// Address - Area
		/// </summary>
		public string AddressArea
		{
			get { return dataHolder.AddressArea; }
			set { this.dataHolder.AddressArea = value; }
		}
		/// <summary>
		/// Address - Place
		/// </summary>
		public string AddressTown
		{
			get { return dataHolder.AddressTown; }
			set { this.dataHolder.AddressTown = value; }
		}
		/// <summary>
		/// Address - County
		/// </summary>
		public string AddressCounty
		{
			get { return dataHolder.AddressCounty; }
			set { this.dataHolder.AddressCounty = value; }
		}
		/// <summary>
		/// Address - Postcode
		/// </summary>
		public string AddressPostcode
		{
			get { return dataHolder.AddressPostcode; }
			set { this.dataHolder.AddressPostcode = value; }
		}
		/// <summary>
		/// Address - Country (link to Country table)
		/// </summary>
		public int AddressCountryK
		{
			get { return dataHolder.AddressCountryK; }
			set { this.dataHolder.AddressCountryK = value; }
		}
		/// <summary>
		/// Full mobile number including country code (e.g. 447971597702)
		/// </summary>
		public string Mobile
		{
			get { return dataHolder.Mobile; }
			set { this.dataHolder.Mobile = value; }
		}
		/// <summary>
		/// Country code of mobile number (e.g. 44)
		/// </summary>
		public string MobileCountryCode
		{
			get { return dataHolder.MobileCountryCode; }
			set { this.dataHolder.MobileCountryCode = value; }
		}
		/// <summary>
		/// Mobile number excluding country code and leading zero (e.g. 7971597702)
		/// </summary>
		public string MobileNumber
		{
			get { return dataHolder.MobileNumber; }
			set { this.dataHolder.MobileNumber = value; }
		}
		/// <summary>
		/// First name, verified by credit card
		/// </summary>
		public string FirstName
		{
			get { return dataHolder.FirstName; }
			set { this.dataHolder.FirstName = value; }
		}
		/// <summary>
		/// Last name, verified by credit card
		/// </summary>
		public string LastName
		{
			get { return dataHolder.LastName; }
			set { this.dataHolder.LastName = value; }
		}
		/// <summary>
		/// Cryptographic hash of the card number
		/// </summary>
		public Guid CardNumberHash
		{
			get { return dataHolder.CardNumberHash; }
			set { this.dataHolder.CardNumberHash = value; }
		}
		/// <summary>
		/// Last 6 digits of the card number used to order
		/// </summary>
		public string CardNumberEnd
		{
			get { return dataHolder.CardNumberEnd; }
			set { this.dataHolder.CardNumberEnd = value; }
		}
		/// <summary>
		/// Number of digits on the card used to order
		/// </summary>
		public int CardNumberDigits
		{
			get { return dataHolder.CardNumberDigits; }
			set { this.dataHolder.CardNumberDigits = value; }
		}
		/// <summary>
		/// Quantity of tickets (for multiple-entrance tickets)
		/// </summary>
		public int Quantity
		{
			get { return dataHolder.Quantity; }
			set { this.dataHolder.Quantity = value; }
		}
		/// <summary>
		/// Custom data specific to this ticket run (as a string)
		/// </summary>
		public string CustomData
		{
			get { return dataHolder.CustomData; }
			set { this.dataHolder.CustomData = value; }
		}
		/// <summary>
		/// Custom data specific to this ticket run (as xml)
		/// </summary>
		public string CustomXml
		{
			get { return dataHolder.CustomXml; }
			set { this.dataHolder.CustomXml = value; }
		}
		/// <summary>
		/// Link to the invoice item table - e.g. booking reference
		/// </summary>
		public int InvoiceItemK
		{
			get { return dataHolder.InvoiceItemK; }
			set { this.dataHolder.InvoiceItemK = value; }
		}
		/// <summary>
		/// Guid from the browser cookie
		/// </summary>
		public Guid BrowserGuid
		{
			get { return dataHolder.BrowserGuid; }
			set { this.dataHolder.BrowserGuid = value; }
		}
		/// <summary>
		/// Price in pounds
		/// </summary>
		public decimal Price
		{
			get { return dataHolder.Price; }
			set { this.dataHolder.Price = value; }
		}
		/// <summary>
		/// Our booking fee
		/// </summary>
		public decimal BookingFee
		{
			get { return dataHolder.BookingFee; }
			set { this.dataHolder.BookingFee = value; }
		}
		/// <summary>
		/// Buyer's IpAddress
		/// </summary>
		public string IpAddress
		{
			get { return dataHolder.IpAddress; }
			set { this.dataHolder.IpAddress = value; }
		}
		/// <summary>
		/// Post event feedback enum: None=0, Good=1, Bad=2
		/// </summary>
		public int Feedback
		{
			get { return dataHolder.Feedback; }
			set { this.dataHolder.Feedback = value; }
		}
		/// <summary>
		/// Post event feedback text for negative comments
		/// </summary>
		public string FeedbackNote
		{
			get { return dataHolder.FeedbackNote; }
			set { this.dataHolder.FeedbackNote = value; }
		}
		/// <summary>
		/// Date time til when a pending ticket is reserved until
		/// </summary>
		public DateTime ReserveDateTime
		{
			get { return dataHolder.ReserveDateTime; }
			set { this.dataHolder.ReserveDateTime = value; }
		}
		/// <summary>
		/// Random code generated for the ticket
		/// </summary>
		public string Code
		{
			get { return dataHolder.Code; }
			set { this.dataHolder.Code = value; }
		}
		/// <summary>
		/// Domain from which the request originated
		/// </summary>
		public int DomainK
		{
			get { return dataHolder.DomainK; }
			set { this.dataHolder.DomainK = value; }
		}
		/// <summary>
		/// Was this ticket cancelled / refunded before the promoter funds release event?
		/// </summary>
		public bool CancelledBeforeFundsRelease
		{
			get { return dataHolder.CancelledBeforeFundsRelease; }
			set { this.dataHolder.CancelledBeforeFundsRelease = value; }
		}
		/// <summary>
		/// Date / time that the ticket was cancelled / refunded
		/// </summary>
		public DateTime CancelledDateTime
		{
			get { return dataHolder.CancelledDateTime; }
			set { this.dataHolder.CancelledDateTime = value; }
		}
		/// <summary>
		/// CV2 Security code on the back on the credit card
		/// </summary>
		public string CardCV2
		{
			get { return dataHolder.CardCV2; }
			set { this.dataHolder.CardCV2 = value; }
		}
		/// <summary>
		/// Has the promoter proven that the card was checked?
		/// </summary>
		public bool CardCheckedByPromoter
		{
			get { return dataHolder.CardCheckedByPromoter; }
			set { this.dataHolder.CardCheckedByPromoter = value; }
		}
		/// <summary>
		/// How many times the promoter has attempted to confirm card details
		/// </summary>
		public int CardCheckAttempts
		{
			get { return dataHolder.CardCheckAttempts; }
			set { this.dataHolder.CardCheckAttempts = value; }
		}
		/// <summary>
		/// Name of the person to deliver the tickets to
		/// </summary>
		public string AddressName
		{
			get { return dataHolder.AddressName; }
			set { this.dataHolder.AddressName = value; }
		}
		/// <summary>
		/// Is this ticket suspected fraud?
		/// </summary>
		public bool? IsFraud
		{
			get { return dataHolder.IsFraud; }
			set { this.dataHolder.IsFraud = value; }
		}
		#endregion
		public Ticket Ticket
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new Ticket(K);
					}
					else
					{
						bob = new Ticket();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region TicketSet
	public partial class TicketSet : BobSet, IEnumerable<Ticket>
	{
		public TicketSet(Query query) : base(query) { }

		public Ticket this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new Ticket(this);
					((Ticket)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (Ticket)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new TicketTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<Ticket> ToList()
		{
			List<Ticket> list = new List<Ticket>();
			foreach (Ticket item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<Ticket> Members

		public new IEnumerator<Ticket> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region TicketTableDef
	public class TicketTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "Ticket";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "117368D6";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return Ticket.GetColumnName((Ticket.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.Ticket;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return true;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return Ticket.Columns.K;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			Ticket.Columns c = (Ticket.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case Ticket.Columns.K: ColumnStore[i] = new ColumnDef(c, "K", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey | SqlColumnFlag.AutoNumber, null); break;
					case Ticket.Columns.TicketRunK: ColumnStore[i] = new ColumnDef(c, "TicketRunK", SqlDbType.Int, 0); break;
					case Ticket.Columns.EventK: ColumnStore[i] = new ColumnDef(c, "EventK", SqlDbType.Int, 0); break;
					case Ticket.Columns.BuyerUsrK: ColumnStore[i] = new ColumnDef(c, "BuyerUsrK", SqlDbType.Int, 0); break;
					case Ticket.Columns.Enabled: ColumnStore[i] = new ColumnDef(c, "Enabled", SqlDbType.Bit, false); break;
					case Ticket.Columns.Cancelled: ColumnStore[i] = new ColumnDef(c, "Cancelled", SqlDbType.Bit, false); break;
					case Ticket.Columns.BuyDateTime: ColumnStore[i] = new ColumnDef(c, "BuyDateTime", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case Ticket.Columns.AddressStreet: ColumnStore[i] = new ColumnDef(c, "AddressStreet", SqlDbType.VarChar, 150, ""); break;
					case Ticket.Columns.AddressArea: ColumnStore[i] = new ColumnDef(c, "AddressArea", SqlDbType.VarChar, ""); break;
					case Ticket.Columns.AddressTown: ColumnStore[i] = new ColumnDef(c, "AddressTown", SqlDbType.VarChar, ""); break;
					case Ticket.Columns.AddressCounty: ColumnStore[i] = new ColumnDef(c, "AddressCounty", SqlDbType.VarChar, ""); break;
					case Ticket.Columns.AddressPostcode: ColumnStore[i] = new ColumnDef(c, "AddressPostcode", SqlDbType.VarChar, ""); break;
					case Ticket.Columns.AddressCountryK: ColumnStore[i] = new ColumnDef(c, "AddressCountryK", SqlDbType.Int, 0); break;
					case Ticket.Columns.Mobile: ColumnStore[i] = new ColumnDef(c, "Mobile", SqlDbType.VarChar, ""); break;
					case Ticket.Columns.MobileCountryCode: ColumnStore[i] = new ColumnDef(c, "MobileCountryCode", SqlDbType.VarChar, 3, ""); break;
					case Ticket.Columns.MobileNumber: ColumnStore[i] = new ColumnDef(c, "MobileNumber", SqlDbType.VarChar, ""); break;
					case Ticket.Columns.FirstName: ColumnStore[i] = new ColumnDef(c, "FirstName", SqlDbType.VarChar, 100, ""); break;
					case Ticket.Columns.LastName: ColumnStore[i] = new ColumnDef(c, "LastName", SqlDbType.VarChar, 100, ""); break;
					case Ticket.Columns.CardNumberHash: ColumnStore[i] = new ColumnDef(c, "CardNumberHash", SqlDbType.UniqueIdentifier, Guid.Empty); break;
					case Ticket.Columns.CardNumberEnd: ColumnStore[i] = new ColumnDef(c, "CardNumberEnd", SqlDbType.VarChar, 6, ""); break;
					case Ticket.Columns.CardNumberDigits: ColumnStore[i] = new ColumnDef(c, "CardNumberDigits", SqlDbType.Int, 0); break;
					case Ticket.Columns.Quantity: ColumnStore[i] = new ColumnDef(c, "Quantity", SqlDbType.Int, 0); break;
					case Ticket.Columns.CustomData: ColumnStore[i] = new ColumnDef(c, "CustomData", SqlDbType.Text, ""); break;
					case Ticket.Columns.CustomXml: ColumnStore[i] = new ColumnDef(c, "CustomXml", SqlDbType.Xml, 2147483646, System.DBNull.Value); break;
					case Ticket.Columns.InvoiceItemK: ColumnStore[i] = new ColumnDef(c, "InvoiceItemK", SqlDbType.Int, 0); break;
					case Ticket.Columns.BrowserGuid: ColumnStore[i] = new ColumnDef(c, "BrowserGuid", SqlDbType.UniqueIdentifier, Guid.Empty); break;
					case Ticket.Columns.Price: ColumnStore[i] = new ColumnDef(c, "Price", SqlDbType.Decimal, 20, 0m); break;
					case Ticket.Columns.BookingFee: ColumnStore[i] = new ColumnDef(c, "BookingFee", SqlDbType.Decimal, 20, 0m); break;
					case Ticket.Columns.IpAddress: ColumnStore[i] = new ColumnDef(c, "IpAddress", SqlDbType.VarChar, 15, ""); break;
					case Ticket.Columns.Feedback: ColumnStore[i] = new ColumnDef(c, "Feedback", SqlDbType.Int, 0); break;
					case Ticket.Columns.FeedbackNote: ColumnStore[i] = new ColumnDef(c, "FeedbackNote", SqlDbType.VarChar, 4096, ""); break;
					case Ticket.Columns.ReserveDateTime: ColumnStore[i] = new ColumnDef(c, "ReserveDateTime", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case Ticket.Columns.Code: ColumnStore[i] = new ColumnDef(c, "Code", SqlDbType.VarChar, 4, ""); break;
					case Ticket.Columns.DomainK: ColumnStore[i] = new ColumnDef(c, "DomainK", SqlDbType.Int, 0); break;
					case Ticket.Columns.CancelledBeforeFundsRelease: ColumnStore[i] = new ColumnDef(c, "CancelledBeforeFundsRelease", SqlDbType.Bit, false); break;
					case Ticket.Columns.CancelledDateTime: ColumnStore[i] = new ColumnDef(c, "CancelledDateTime", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case Ticket.Columns.CardCV2: ColumnStore[i] = new ColumnDef(c, "CardCV2", SqlDbType.VarChar, 3, ""); break;
					case Ticket.Columns.CardCheckedByPromoter: ColumnStore[i] = new ColumnDef(c, "CardCheckedByPromoter", SqlDbType.Bit, false); break;
					case Ticket.Columns.CardCheckAttempts: ColumnStore[i] = new ColumnDef(c, "CardCheckAttempts", SqlDbType.Int, 0); break;
					case Ticket.Columns.AddressName: ColumnStore[i] = new ColumnDef(c, "AddressName", SqlDbType.VarChar, 150, ""); break;
					case Ticket.Columns.IsFraud: ColumnStore[i] = new ColumnDef(c, "IsFraud", SqlDbType.Bit, null); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(Ticket.Columns.K);
						InitColumn(Ticket.Columns.TicketRunK);
						InitColumn(Ticket.Columns.EventK);
						InitColumn(Ticket.Columns.BuyerUsrK);
						InitColumn(Ticket.Columns.Enabled);
						InitColumn(Ticket.Columns.Cancelled);
						InitColumn(Ticket.Columns.BuyDateTime);
						InitColumn(Ticket.Columns.AddressStreet);
						InitColumn(Ticket.Columns.AddressArea);
						InitColumn(Ticket.Columns.AddressTown);
						InitColumn(Ticket.Columns.AddressCounty);
						InitColumn(Ticket.Columns.AddressPostcode);
						InitColumn(Ticket.Columns.AddressCountryK);
						InitColumn(Ticket.Columns.Mobile);
						InitColumn(Ticket.Columns.MobileCountryCode);
						InitColumn(Ticket.Columns.MobileNumber);
						InitColumn(Ticket.Columns.FirstName);
						InitColumn(Ticket.Columns.LastName);
						InitColumn(Ticket.Columns.CardNumberHash);
						InitColumn(Ticket.Columns.CardNumberEnd);
						InitColumn(Ticket.Columns.CardNumberDigits);
						InitColumn(Ticket.Columns.Quantity);
						InitColumn(Ticket.Columns.CustomData);
						InitColumn(Ticket.Columns.CustomXml);
						InitColumn(Ticket.Columns.InvoiceItemK);
						InitColumn(Ticket.Columns.BrowserGuid);
						InitColumn(Ticket.Columns.Price);
						InitColumn(Ticket.Columns.BookingFee);
						InitColumn(Ticket.Columns.IpAddress);
						InitColumn(Ticket.Columns.Feedback);
						InitColumn(Ticket.Columns.FeedbackNote);
						InitColumn(Ticket.Columns.ReserveDateTime);
						InitColumn(Ticket.Columns.Code);
						InitColumn(Ticket.Columns.DomainK);
						InitColumn(Ticket.Columns.CancelledBeforeFundsRelease);
						InitColumn(Ticket.Columns.CancelledDateTime);
						InitColumn(Ticket.Columns.CardCV2);
						InitColumn(Ticket.Columns.CardCheckedByPromoter);
						InitColumn(Ticket.Columns.CardCheckAttempts);
						InitColumn(Ticket.Columns.AddressName);
						InitColumn(Ticket.Columns.IsFraud);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region TicketPromoterEvent
	/// <summary>
	/// TicketPromoter to Event relational table
	/// </summary>
	public partial class TicketPromoterEvent : Model.Entities.TicketPromoterEvent, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// The promoter for the tickets
			/// </summary>
			PromoterK = 0x00580001,
			/// <summary>
			/// The event for the tickets
			/// </summary>
			EventK = 0x00580002,
			/// <summary>
			/// Total number of tickets available
			/// </summary>
			TotalTickets = 0x00580003,
			/// <summary>
			/// Total number of tickets sold
			/// </summary>
			SoldTickets = 0x00580004,
			/// <summary>
			/// Total amount of money from sold tickets
			/// </summary>
			TotalFunds = 0x00580005,
			/// <summary>
			/// Have the funds been locked manually
			/// </summary>
			FundsLockManual = 0x00580006,
			/// <summary>
			/// The user who locked the funds manually
			/// </summary>
			FundsLockManualUsrK = 0x00580007,
			/// <summary>
			/// Timestamp for manual funds lock
			/// </summary>
			FundsLockManualDateTime = 0x00580008,
			/// <summary>
			/// Note for manual funds lock
			/// </summary>
			FundsLockManualNote = 0x00580009,
			/// <summary>
			/// Are funds locked due to duplicate IP fraud
			/// </summary>
			FundsLockFraudIpDuplicate = 0x0058000a,
			/// <summary>
			/// Country origin of duplicate IP fraud
			/// </summary>
			FundsLockFraudIpCountry = 0x0058000b,
			/// <summary>
			/// Are funds locked due to GUID fraud
			/// </summary>
			FundsLockFraudGuid = 0x0058000c,
			/// <summary>
			/// Are funds locked due to users negative responses
			/// </summary>
			FundsLockUsrResponses = 0x0058000d,
			/// <summary>
			/// Text explaining any locks, readable by admins and used when making unlock decisions
			/// </summary>
			FundsLockText = 0x0058000e,
			/// <summary>
			/// Is funds lock overridden
			/// </summary>
			FundsLockOverride = 0x0058000f,
			/// <summary>
			/// The user who overrode the funds lock
			/// </summary>
			FundsLockOverrideUsrK = 0x00580010,
			/// <summary>
			/// Timestamp for funds lock override
			/// </summary>
			FundsLockOverrideDateTime = 0x00580011,
			/// <summary>
			/// Note explaining why funds lock has been overridden
			/// </summary>
			FundsLockOverrideNote = 0x00580012,
			/// <summary>
			/// Have funds been released to promoter
			/// </summary>
			FundsReleased = 0x00580013,
			/// <summary>
			/// Transfer reference for funds to promoter
			/// </summary>
			FundsTransferK = 0x00580014,
			/// <summary>
			/// Total number of tickets cancelled
			/// </summary>
			CancelledTickets = 0x00580015,
			/// <summary>
			/// Lock when the total funds dont match the ticket run funds
			/// </summary>
			FundsLockTotalFundsDontMatch = 0x00580016,
			/// <summary>
			/// Total amount of VAT from ticket invoices
			/// </summary>
			TotalVat = 0x00580017,
			/// <summary>
			/// Total amount of booking fees
			/// </summary>
			TotalBookingFees = 0x00580018,
			/// <summary>
			/// Contact email address for users to contact regarding ticket sales
			/// </summary>
			ContactEmail = 0x00580019,
		}
		#endregion
		public static string GetColumnName(TicketPromoterEvent.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case TicketPromoterEvent.Columns.PromoterK: return "PromoterK";
						case TicketPromoterEvent.Columns.EventK: return "EventK";
						case TicketPromoterEvent.Columns.TotalTickets: return "TotalTickets";
						case TicketPromoterEvent.Columns.SoldTickets: return "SoldTickets";
						case TicketPromoterEvent.Columns.TotalFunds: return "TotalFunds";
						case TicketPromoterEvent.Columns.FundsLockManual: return "FundsLockManual";
						case TicketPromoterEvent.Columns.FundsLockManualUsrK: return "FundsLockManualUsrK";
						case TicketPromoterEvent.Columns.FundsLockManualDateTime: return "FundsLockManualDateTime";
						case TicketPromoterEvent.Columns.FundsLockManualNote: return "FundsLockManualNote";
						case TicketPromoterEvent.Columns.FundsLockFraudIpDuplicate: return "FundsLockFraudIpDuplicate";
						case TicketPromoterEvent.Columns.FundsLockFraudIpCountry: return "FundsLockFraudIpCountry";
						case TicketPromoterEvent.Columns.FundsLockFraudGuid: return "FundsLockFraudGuid";
						case TicketPromoterEvent.Columns.FundsLockUsrResponses: return "FundsLockUsrResponses";
						case TicketPromoterEvent.Columns.FundsLockText: return "FundsLockText";
						case TicketPromoterEvent.Columns.FundsLockOverride: return "FundsLockOverride";
						case TicketPromoterEvent.Columns.FundsLockOverrideUsrK: return "FundsLockOverrideUsrK";
						case TicketPromoterEvent.Columns.FundsLockOverrideDateTime: return "FundsLockOverrideDateTime";
						case TicketPromoterEvent.Columns.FundsLockOverrideNote: return "FundsLockOverrideNote";
						case TicketPromoterEvent.Columns.FundsReleased: return "FundsReleased";
						case TicketPromoterEvent.Columns.FundsTransferK: return "FundsTransferK";
						case TicketPromoterEvent.Columns.CancelledTickets: return "CancelledTickets";
						case TicketPromoterEvent.Columns.FundsLockTotalFundsDontMatch: return "FundsLockTotalFundsDontMatch";
						case TicketPromoterEvent.Columns.TotalVat: return "TotalVat";
						case TicketPromoterEvent.Columns.TotalBookingFees: return "TotalBookingFees";
						case TicketPromoterEvent.Columns.ContactEmail: return "ContactEmail";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(TicketPromoterEvent.Columns columnEnum)
		{
			switch (columnEnum)
			{
																													default: return false;
			}
		}


		#region Common
	 
		public TicketPromoterEvent(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);}
		public TicketPromoterEvent()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.TicketPromoterEvent);
		}
		public TicketPromoterEvent(BobSet bs)
		{
			this.Bob = new Bob(Bobs.Tables.Defs.TicketPromoterEvent, bs);
		}
		public TicketPromoterEvent(IBob Parent, object Column) : this()
		{
			this.Bob.GetBobFromParentSimple(Parent, Column, TablesEnum.TicketPromoterEvent);
		}
		public TicketPromoterEvent(int PromoterK, int EventK) : this()
		{
			this.Bob.GetBobFromPrimaryKeyArray(new Q[] {new Q(TicketPromoterEvent.Columns.PromoterK,PromoterK), new Q(TicketPromoterEvent.Columns.EventK,EventK)});
		} 
		#endregion

	}
	#endregion
	#region TicketPromoterEventTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region TicketPromoterEvent
	/// <summary>
	/// TicketPromoter to Event relational table
	/// </summary>
	[Serializable]
	public partial class TicketPromoterEvent 
	{
		
		#region Simple members
		/// <summary>
		/// The promoter for the tickets
		/// </summary>
		public override int PromoterK
		{
			get { return (int)this[TicketPromoterEvent.Columns.PromoterK]; }
			set { this[TicketPromoterEvent.Columns.PromoterK] = value; }
		}
		/// <summary>
		/// The event for the tickets
		/// </summary>
		public override int EventK
		{
			get { return (int)this[TicketPromoterEvent.Columns.EventK]; }
			set { this[TicketPromoterEvent.Columns.EventK] = value; }
		}
		/// <summary>
		/// Total number of tickets available
		/// </summary>
		public override int TotalTickets
		{
			get { return (int)this[TicketPromoterEvent.Columns.TotalTickets]; }
			set { this[TicketPromoterEvent.Columns.TotalTickets] = value; }
		}
		/// <summary>
		/// Total number of tickets sold
		/// </summary>
		public override int SoldTickets
		{
			get { return (int)this[TicketPromoterEvent.Columns.SoldTickets]; }
			set { this[TicketPromoterEvent.Columns.SoldTickets] = value; }
		}
		/// <summary>
		/// Total amount of money from sold tickets
		/// </summary>
		public override decimal TotalFunds
		{
			get { return (decimal)this[TicketPromoterEvent.Columns.TotalFunds]; }
			set { this[TicketPromoterEvent.Columns.TotalFunds] = value; }
		}
		/// <summary>
		/// Have the funds been locked manually
		/// </summary>
		public override bool FundsLockManual
		{
			get { return (bool)this[TicketPromoterEvent.Columns.FundsLockManual]; }
			set { this[TicketPromoterEvent.Columns.FundsLockManual] = value; }
		}
		/// <summary>
		/// The user who locked the funds manually
		/// </summary>
		public override int FundsLockManualUsrK
		{
			get { return (int)this[TicketPromoterEvent.Columns.FundsLockManualUsrK]; }
			set { this[TicketPromoterEvent.Columns.FundsLockManualUsrK] = value; }
		}
		/// <summary>
		/// Timestamp for manual funds lock
		/// </summary>
		public override DateTime FundsLockManualDateTime
		{
			get { return (DateTime)this[TicketPromoterEvent.Columns.FundsLockManualDateTime]; }
			set { this[TicketPromoterEvent.Columns.FundsLockManualDateTime] = value; }
		}
		/// <summary>
		/// Note for manual funds lock
		/// </summary>
		public override string FundsLockManualNote
		{
			get { return (string)this[TicketPromoterEvent.Columns.FundsLockManualNote]; }
			set { this[TicketPromoterEvent.Columns.FundsLockManualNote] = value; }
		}
		/// <summary>
		/// Are funds locked due to duplicate IP fraud
		/// </summary>
		public override bool FundsLockFraudIpDuplicate
		{
			get { return (bool)this[TicketPromoterEvent.Columns.FundsLockFraudIpDuplicate]; }
			set { this[TicketPromoterEvent.Columns.FundsLockFraudIpDuplicate] = value; }
		}
		/// <summary>
		/// Country origin of duplicate IP fraud
		/// </summary>
		public override int FundsLockFraudIpCountry
		{
			get { return (int)this[TicketPromoterEvent.Columns.FundsLockFraudIpCountry]; }
			set { this[TicketPromoterEvent.Columns.FundsLockFraudIpCountry] = value; }
		}
		/// <summary>
		/// Are funds locked due to GUID fraud
		/// </summary>
		public override bool FundsLockFraudGuid
		{
			get { return (bool)this[TicketPromoterEvent.Columns.FundsLockFraudGuid]; }
			set { this[TicketPromoterEvent.Columns.FundsLockFraudGuid] = value; }
		}
		/// <summary>
		/// Are funds locked due to users negative responses
		/// </summary>
		public override bool FundsLockUsrResponses
		{
			get { return (bool)this[TicketPromoterEvent.Columns.FundsLockUsrResponses]; }
			set { this[TicketPromoterEvent.Columns.FundsLockUsrResponses] = value; }
		}
		/// <summary>
		/// Text explaining any locks, readable by admins and used when making unlock decisions
		/// </summary>
		public override string FundsLockText
		{
			get { return (string)this[TicketPromoterEvent.Columns.FundsLockText]; }
			set { this[TicketPromoterEvent.Columns.FundsLockText] = value; }
		}
		/// <summary>
		/// Is funds lock overridden
		/// </summary>
		public override bool FundsLockOverride
		{
			get { return (bool)this[TicketPromoterEvent.Columns.FundsLockOverride]; }
			set { this[TicketPromoterEvent.Columns.FundsLockOverride] = value; }
		}
		/// <summary>
		/// The user who overrode the funds lock
		/// </summary>
		public override int FundsLockOverrideUsrK
		{
			get { return (int)this[TicketPromoterEvent.Columns.FundsLockOverrideUsrK]; }
			set { this[TicketPromoterEvent.Columns.FundsLockOverrideUsrK] = value; }
		}
		/// <summary>
		/// Timestamp for funds lock override
		/// </summary>
		public override DateTime FundsLockOverrideDateTime
		{
			get { return (DateTime)this[TicketPromoterEvent.Columns.FundsLockOverrideDateTime]; }
			set { this[TicketPromoterEvent.Columns.FundsLockOverrideDateTime] = value; }
		}
		/// <summary>
		/// Note explaining why funds lock has been overridden
		/// </summary>
		public override string FundsLockOverrideNote
		{
			get { return (string)this[TicketPromoterEvent.Columns.FundsLockOverrideNote]; }
			set { this[TicketPromoterEvent.Columns.FundsLockOverrideNote] = value; }
		}
		/// <summary>
		/// Have funds been released to promoter
		/// </summary>
		public override bool FundsReleased
		{
			get { return (bool)this[TicketPromoterEvent.Columns.FundsReleased]; }
			set { this[TicketPromoterEvent.Columns.FundsReleased] = value; }
		}
		/// <summary>
		/// Transfer reference for funds to promoter
		/// </summary>
		public override int FundsTransferK
		{
			get { return (int)this[TicketPromoterEvent.Columns.FundsTransferK]; }
			set { this[TicketPromoterEvent.Columns.FundsTransferK] = value; }
		}
		/// <summary>
		/// Total number of tickets cancelled
		/// </summary>
		public override int CancelledTickets
		{
			get { return (int)this[TicketPromoterEvent.Columns.CancelledTickets]; }
			set { this[TicketPromoterEvent.Columns.CancelledTickets] = value; }
		}
		/// <summary>
		/// Lock when the total funds dont match the ticket run funds
		/// </summary>
		public override bool FundsLockTotalFundsDontMatch
		{
			get { return (bool)this[TicketPromoterEvent.Columns.FundsLockTotalFundsDontMatch]; }
			set { this[TicketPromoterEvent.Columns.FundsLockTotalFundsDontMatch] = value; }
		}
		/// <summary>
		/// Total amount of VAT from ticket invoices
		/// </summary>
		public override decimal TotalVat
		{
			get { return (decimal)this[TicketPromoterEvent.Columns.TotalVat]; }
			set { this[TicketPromoterEvent.Columns.TotalVat] = value; }
		}
		/// <summary>
		/// Total amount of booking fees
		/// </summary>
		public override decimal TotalBookingFees
		{
			get { return (decimal)this[TicketPromoterEvent.Columns.TotalBookingFees]; }
			set { this[TicketPromoterEvent.Columns.TotalBookingFees] = value; }
		}
		/// <summary>
		/// Contact email address for users to contact regarding ticket sales
		/// </summary>
		public override string ContactEmail
		{
			get { return (string)this[TicketPromoterEvent.Columns.ContactEmail]; }
			set { this[TicketPromoterEvent.Columns.ContactEmail] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildTicketPromoterEvents
	{
		CachedSqlSelect<TicketPromoterEvent> ChildTicketPromoterEvents();
		CachedSqlSelect<TicketPromoterEvent> ChildTicketPromoterEvents(Q where);
		CachedSqlSelect<TicketPromoterEvent> ChildTicketPromoterEvents(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<TicketPromoterEvent> ChildTicketPromoterEvents(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class TicketPromoterEvent 
		{
		}

	#region TicketPromoterEventDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region TicketPromoterEventDataHolder
	/// <summary>
	/// TicketPromoter to Event relational tableDataHolder
	/// </summary>
	[Serializable]
	public partial class TicketPromoterEventDataHolder : DataHolder<TicketPromoterEvent>
	{
		TicketPromoterEvent dataHolder;
		[NonSerializedAttribute] TicketPromoterEvent bob;

		public TicketPromoterEventDataHolder()
		{
			this.dataHolder = new TicketPromoterEvent();
		}
		
		void CopyValues(TicketPromoterEvent source, TicketPromoterEvent destination)
		{
			destination[Bobs.TicketPromoterEvent.Columns.PromoterK] = source[Bobs.TicketPromoterEvent.Columns.PromoterK];
			destination[Bobs.TicketPromoterEvent.Columns.EventK] = source[Bobs.TicketPromoterEvent.Columns.EventK];
			destination[Bobs.TicketPromoterEvent.Columns.TotalTickets] = source[Bobs.TicketPromoterEvent.Columns.TotalTickets];
			destination[Bobs.TicketPromoterEvent.Columns.SoldTickets] = source[Bobs.TicketPromoterEvent.Columns.SoldTickets];
			destination[Bobs.TicketPromoterEvent.Columns.TotalFunds] = source[Bobs.TicketPromoterEvent.Columns.TotalFunds];
			destination[Bobs.TicketPromoterEvent.Columns.FundsLockManual] = source[Bobs.TicketPromoterEvent.Columns.FundsLockManual];
			destination[Bobs.TicketPromoterEvent.Columns.FundsLockManualUsrK] = source[Bobs.TicketPromoterEvent.Columns.FundsLockManualUsrK];
			destination[Bobs.TicketPromoterEvent.Columns.FundsLockManualDateTime] = source[Bobs.TicketPromoterEvent.Columns.FundsLockManualDateTime];
			destination[Bobs.TicketPromoterEvent.Columns.FundsLockManualNote] = source[Bobs.TicketPromoterEvent.Columns.FundsLockManualNote];
			destination[Bobs.TicketPromoterEvent.Columns.FundsLockFraudIpDuplicate] = source[Bobs.TicketPromoterEvent.Columns.FundsLockFraudIpDuplicate];
			destination[Bobs.TicketPromoterEvent.Columns.FundsLockFraudIpCountry] = source[Bobs.TicketPromoterEvent.Columns.FundsLockFraudIpCountry];
			destination[Bobs.TicketPromoterEvent.Columns.FundsLockFraudGuid] = source[Bobs.TicketPromoterEvent.Columns.FundsLockFraudGuid];
			destination[Bobs.TicketPromoterEvent.Columns.FundsLockUsrResponses] = source[Bobs.TicketPromoterEvent.Columns.FundsLockUsrResponses];
			destination[Bobs.TicketPromoterEvent.Columns.FundsLockText] = source[Bobs.TicketPromoterEvent.Columns.FundsLockText];
			destination[Bobs.TicketPromoterEvent.Columns.FundsLockOverride] = source[Bobs.TicketPromoterEvent.Columns.FundsLockOverride];
			destination[Bobs.TicketPromoterEvent.Columns.FundsLockOverrideUsrK] = source[Bobs.TicketPromoterEvent.Columns.FundsLockOverrideUsrK];
			destination[Bobs.TicketPromoterEvent.Columns.FundsLockOverrideDateTime] = source[Bobs.TicketPromoterEvent.Columns.FundsLockOverrideDateTime];
			destination[Bobs.TicketPromoterEvent.Columns.FundsLockOverrideNote] = source[Bobs.TicketPromoterEvent.Columns.FundsLockOverrideNote];
			destination[Bobs.TicketPromoterEvent.Columns.FundsReleased] = source[Bobs.TicketPromoterEvent.Columns.FundsReleased];
			destination[Bobs.TicketPromoterEvent.Columns.FundsTransferK] = source[Bobs.TicketPromoterEvent.Columns.FundsTransferK];
			destination[Bobs.TicketPromoterEvent.Columns.CancelledTickets] = source[Bobs.TicketPromoterEvent.Columns.CancelledTickets];
			destination[Bobs.TicketPromoterEvent.Columns.FundsLockTotalFundsDontMatch] = source[Bobs.TicketPromoterEvent.Columns.FundsLockTotalFundsDontMatch];
			destination[Bobs.TicketPromoterEvent.Columns.TotalVat] = source[Bobs.TicketPromoterEvent.Columns.TotalVat];
			destination[Bobs.TicketPromoterEvent.Columns.TotalBookingFees] = source[Bobs.TicketPromoterEvent.Columns.TotalBookingFees];
			destination[Bobs.TicketPromoterEvent.Columns.ContactEmail] = source[Bobs.TicketPromoterEvent.Columns.ContactEmail];
		}
		
		public TicketPromoterEventDataHolder(TicketPromoterEvent bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// The promoter for the tickets
		/// </summary>
		public int PromoterK
		{
			get { return dataHolder.PromoterK; }
			set { this.dataHolder.PromoterK = value; }
		}
		/// <summary>
		/// The event for the tickets
		/// </summary>
		public int EventK
		{
			get { return dataHolder.EventK; }
			set { this.dataHolder.EventK = value; }
		}
		/// <summary>
		/// Total number of tickets available
		/// </summary>
		public int TotalTickets
		{
			get { return dataHolder.TotalTickets; }
			set { this.dataHolder.TotalTickets = value; }
		}
		/// <summary>
		/// Total number of tickets sold
		/// </summary>
		public int SoldTickets
		{
			get { return dataHolder.SoldTickets; }
			set { this.dataHolder.SoldTickets = value; }
		}
		/// <summary>
		/// Total amount of money from sold tickets
		/// </summary>
		public decimal TotalFunds
		{
			get { return dataHolder.TotalFunds; }
			set { this.dataHolder.TotalFunds = value; }
		}
		/// <summary>
		/// Have the funds been locked manually
		/// </summary>
		public bool FundsLockManual
		{
			get { return dataHolder.FundsLockManual; }
			set { this.dataHolder.FundsLockManual = value; }
		}
		/// <summary>
		/// The user who locked the funds manually
		/// </summary>
		public int FundsLockManualUsrK
		{
			get { return dataHolder.FundsLockManualUsrK; }
			set { this.dataHolder.FundsLockManualUsrK = value; }
		}
		/// <summary>
		/// Timestamp for manual funds lock
		/// </summary>
		public DateTime FundsLockManualDateTime
		{
			get { return dataHolder.FundsLockManualDateTime; }
			set { this.dataHolder.FundsLockManualDateTime = value; }
		}
		/// <summary>
		/// Note for manual funds lock
		/// </summary>
		public string FundsLockManualNote
		{
			get { return dataHolder.FundsLockManualNote; }
			set { this.dataHolder.FundsLockManualNote = value; }
		}
		/// <summary>
		/// Are funds locked due to duplicate IP fraud
		/// </summary>
		public bool FundsLockFraudIpDuplicate
		{
			get { return dataHolder.FundsLockFraudIpDuplicate; }
			set { this.dataHolder.FundsLockFraudIpDuplicate = value; }
		}
		/// <summary>
		/// Country origin of duplicate IP fraud
		/// </summary>
		public int FundsLockFraudIpCountry
		{
			get { return dataHolder.FundsLockFraudIpCountry; }
			set { this.dataHolder.FundsLockFraudIpCountry = value; }
		}
		/// <summary>
		/// Are funds locked due to GUID fraud
		/// </summary>
		public bool FundsLockFraudGuid
		{
			get { return dataHolder.FundsLockFraudGuid; }
			set { this.dataHolder.FundsLockFraudGuid = value; }
		}
		/// <summary>
		/// Are funds locked due to users negative responses
		/// </summary>
		public bool FundsLockUsrResponses
		{
			get { return dataHolder.FundsLockUsrResponses; }
			set { this.dataHolder.FundsLockUsrResponses = value; }
		}
		/// <summary>
		/// Text explaining any locks, readable by admins and used when making unlock decisions
		/// </summary>
		public string FundsLockText
		{
			get { return dataHolder.FundsLockText; }
			set { this.dataHolder.FundsLockText = value; }
		}
		/// <summary>
		/// Is funds lock overridden
		/// </summary>
		public bool FundsLockOverride
		{
			get { return dataHolder.FundsLockOverride; }
			set { this.dataHolder.FundsLockOverride = value; }
		}
		/// <summary>
		/// The user who overrode the funds lock
		/// </summary>
		public int FundsLockOverrideUsrK
		{
			get { return dataHolder.FundsLockOverrideUsrK; }
			set { this.dataHolder.FundsLockOverrideUsrK = value; }
		}
		/// <summary>
		/// Timestamp for funds lock override
		/// </summary>
		public DateTime FundsLockOverrideDateTime
		{
			get { return dataHolder.FundsLockOverrideDateTime; }
			set { this.dataHolder.FundsLockOverrideDateTime = value; }
		}
		/// <summary>
		/// Note explaining why funds lock has been overridden
		/// </summary>
		public string FundsLockOverrideNote
		{
			get { return dataHolder.FundsLockOverrideNote; }
			set { this.dataHolder.FundsLockOverrideNote = value; }
		}
		/// <summary>
		/// Have funds been released to promoter
		/// </summary>
		public bool FundsReleased
		{
			get { return dataHolder.FundsReleased; }
			set { this.dataHolder.FundsReleased = value; }
		}
		/// <summary>
		/// Transfer reference for funds to promoter
		/// </summary>
		public int FundsTransferK
		{
			get { return dataHolder.FundsTransferK; }
			set { this.dataHolder.FundsTransferK = value; }
		}
		/// <summary>
		/// Total number of tickets cancelled
		/// </summary>
		public int CancelledTickets
		{
			get { return dataHolder.CancelledTickets; }
			set { this.dataHolder.CancelledTickets = value; }
		}
		/// <summary>
		/// Lock when the total funds dont match the ticket run funds
		/// </summary>
		public bool FundsLockTotalFundsDontMatch
		{
			get { return dataHolder.FundsLockTotalFundsDontMatch; }
			set { this.dataHolder.FundsLockTotalFundsDontMatch = value; }
		}
		/// <summary>
		/// Total amount of VAT from ticket invoices
		/// </summary>
		public decimal TotalVat
		{
			get { return dataHolder.TotalVat; }
			set { this.dataHolder.TotalVat = value; }
		}
		/// <summary>
		/// Total amount of booking fees
		/// </summary>
		public decimal TotalBookingFees
		{
			get { return dataHolder.TotalBookingFees; }
			set { this.dataHolder.TotalBookingFees = value; }
		}
		/// <summary>
		/// Contact email address for users to contact regarding ticket sales
		/// </summary>
		public string ContactEmail
		{
			get { return dataHolder.ContactEmail; }
			set { this.dataHolder.ContactEmail = value; }
		}
		#endregion
		public TicketPromoterEvent TicketPromoterEvent
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new TicketPromoterEvent(K);
					}
					else
					{
						bob = new TicketPromoterEvent();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region TicketPromoterEventSet
	public partial class TicketPromoterEventSet : BobSet, IEnumerable<TicketPromoterEvent>
	{
		public TicketPromoterEventSet(Query query) : base(query) { }

		public TicketPromoterEvent this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new TicketPromoterEvent(this);
					((TicketPromoterEvent)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (TicketPromoterEvent)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new TicketPromoterEventTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<TicketPromoterEvent> ToList()
		{
			List<TicketPromoterEvent> list = new List<TicketPromoterEvent>();
			foreach (TicketPromoterEvent item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<TicketPromoterEvent> Members

		public new IEnumerator<TicketPromoterEvent> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region TicketPromoterEventTableDef
	public class TicketPromoterEventTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "TicketPromoterEvent";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "4A1C9197";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return TicketPromoterEvent.GetColumnName((TicketPromoterEvent.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.TicketPromoterEvent;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return false;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return null;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			TicketPromoterEvent.Columns c = (TicketPromoterEvent.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case TicketPromoterEvent.Columns.PromoterK: ColumnStore[i] = new ColumnDef(c, "PromoterK", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey, 0); break;
					case TicketPromoterEvent.Columns.EventK: ColumnStore[i] = new ColumnDef(c, "EventK", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey, 0); break;
					case TicketPromoterEvent.Columns.TotalTickets: ColumnStore[i] = new ColumnDef(c, "TotalTickets", SqlDbType.Int, 0); break;
					case TicketPromoterEvent.Columns.SoldTickets: ColumnStore[i] = new ColumnDef(c, "SoldTickets", SqlDbType.Int, 0); break;
					case TicketPromoterEvent.Columns.TotalFunds: ColumnStore[i] = new ColumnDef(c, "TotalFunds", SqlDbType.Decimal, 20, 0m); break;
					case TicketPromoterEvent.Columns.FundsLockManual: ColumnStore[i] = new ColumnDef(c, "FundsLockManual", SqlDbType.Bit, false); break;
					case TicketPromoterEvent.Columns.FundsLockManualUsrK: ColumnStore[i] = new ColumnDef(c, "FundsLockManualUsrK", SqlDbType.Int, 0); break;
					case TicketPromoterEvent.Columns.FundsLockManualDateTime: ColumnStore[i] = new ColumnDef(c, "FundsLockManualDateTime", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case TicketPromoterEvent.Columns.FundsLockManualNote: ColumnStore[i] = new ColumnDef(c, "FundsLockManualNote", SqlDbType.VarChar, 500, ""); break;
					case TicketPromoterEvent.Columns.FundsLockFraudIpDuplicate: ColumnStore[i] = new ColumnDef(c, "FundsLockFraudIpDuplicate", SqlDbType.Bit, false); break;
					case TicketPromoterEvent.Columns.FundsLockFraudIpCountry: ColumnStore[i] = new ColumnDef(c, "FundsLockFraudIpCountry", SqlDbType.Int, 0); break;
					case TicketPromoterEvent.Columns.FundsLockFraudGuid: ColumnStore[i] = new ColumnDef(c, "FundsLockFraudGuid", SqlDbType.Bit, false); break;
					case TicketPromoterEvent.Columns.FundsLockUsrResponses: ColumnStore[i] = new ColumnDef(c, "FundsLockUsrResponses", SqlDbType.Bit, false); break;
					case TicketPromoterEvent.Columns.FundsLockText: ColumnStore[i] = new ColumnDef(c, "FundsLockText", SqlDbType.VarChar, 2000, ""); break;
					case TicketPromoterEvent.Columns.FundsLockOverride: ColumnStore[i] = new ColumnDef(c, "FundsLockOverride", SqlDbType.Bit, false); break;
					case TicketPromoterEvent.Columns.FundsLockOverrideUsrK: ColumnStore[i] = new ColumnDef(c, "FundsLockOverrideUsrK", SqlDbType.Int, 0); break;
					case TicketPromoterEvent.Columns.FundsLockOverrideDateTime: ColumnStore[i] = new ColumnDef(c, "FundsLockOverrideDateTime", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case TicketPromoterEvent.Columns.FundsLockOverrideNote: ColumnStore[i] = new ColumnDef(c, "FundsLockOverrideNote", SqlDbType.VarChar, 500, ""); break;
					case TicketPromoterEvent.Columns.FundsReleased: ColumnStore[i] = new ColumnDef(c, "FundsReleased", SqlDbType.Bit, false); break;
					case TicketPromoterEvent.Columns.FundsTransferK: ColumnStore[i] = new ColumnDef(c, "FundsTransferK", SqlDbType.Int, 0); break;
					case TicketPromoterEvent.Columns.CancelledTickets: ColumnStore[i] = new ColumnDef(c, "CancelledTickets", SqlDbType.Int, 0); break;
					case TicketPromoterEvent.Columns.FundsLockTotalFundsDontMatch: ColumnStore[i] = new ColumnDef(c, "FundsLockTotalFundsDontMatch", SqlDbType.Bit, false); break;
					case TicketPromoterEvent.Columns.TotalVat: ColumnStore[i] = new ColumnDef(c, "TotalVat", SqlDbType.Decimal, 20, 0m); break;
					case TicketPromoterEvent.Columns.TotalBookingFees: ColumnStore[i] = new ColumnDef(c, "TotalBookingFees", SqlDbType.Decimal, 20, 0m); break;
					case TicketPromoterEvent.Columns.ContactEmail: ColumnStore[i] = new ColumnDef(c, "ContactEmail", SqlDbType.VarChar, 100, ""); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(TicketPromoterEvent.Columns.PromoterK);
						InitColumn(TicketPromoterEvent.Columns.EventK);
						InitColumn(TicketPromoterEvent.Columns.TotalTickets);
						InitColumn(TicketPromoterEvent.Columns.SoldTickets);
						InitColumn(TicketPromoterEvent.Columns.TotalFunds);
						InitColumn(TicketPromoterEvent.Columns.FundsLockManual);
						InitColumn(TicketPromoterEvent.Columns.FundsLockManualUsrK);
						InitColumn(TicketPromoterEvent.Columns.FundsLockManualDateTime);
						InitColumn(TicketPromoterEvent.Columns.FundsLockManualNote);
						InitColumn(TicketPromoterEvent.Columns.FundsLockFraudIpDuplicate);
						InitColumn(TicketPromoterEvent.Columns.FundsLockFraudIpCountry);
						InitColumn(TicketPromoterEvent.Columns.FundsLockFraudGuid);
						InitColumn(TicketPromoterEvent.Columns.FundsLockUsrResponses);
						InitColumn(TicketPromoterEvent.Columns.FundsLockText);
						InitColumn(TicketPromoterEvent.Columns.FundsLockOverride);
						InitColumn(TicketPromoterEvent.Columns.FundsLockOverrideUsrK);
						InitColumn(TicketPromoterEvent.Columns.FundsLockOverrideDateTime);
						InitColumn(TicketPromoterEvent.Columns.FundsLockOverrideNote);
						InitColumn(TicketPromoterEvent.Columns.FundsReleased);
						InitColumn(TicketPromoterEvent.Columns.FundsTransferK);
						InitColumn(TicketPromoterEvent.Columns.CancelledTickets);
						InitColumn(TicketPromoterEvent.Columns.FundsLockTotalFundsDontMatch);
						InitColumn(TicketPromoterEvent.Columns.TotalVat);
						InitColumn(TicketPromoterEvent.Columns.TotalBookingFees);
						InitColumn(TicketPromoterEvent.Columns.ContactEmail);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region TicketRun
	/// <summary>
	/// Run of tickets for sale
	/// </summary>
	public partial class TicketRun : Model.Entities.TicketRun, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// Key
			/// </summary>
			K = 0x00590001,
			/// <summary>
			/// Event this ticket is for
			/// </summary>
			EventK = 0x00590002,
			/// <summary>
			/// Promoter selling the ticket
			/// </summary>
			PromoterK = 0x00590003,
			/// <summary>
			/// Brand this ticket is for (zero if not relevant)
			/// </summary>
			BrandK = 0x00590004,
			/// <summary>
			/// Brief name for ticket run: i.e. VIP, Early bird, etc
			/// </summary>
			Name = 0x00590005,
			/// <summary>
			/// Description short description e.g. "Early Bird"
			/// </summary>
			Description = 0x00590006,
			/// <summary>
			/// Price in pounds
			/// </summary>
			Price = 0x00590007,
			/// <summary>
			/// Our booking fee
			/// </summary>
			BookingFee = 0x00590008,
			/// <summary>
			/// If locked, the promoter won't be able to edit the price
			/// </summary>
			LockPrice = 0x00590009,
			/// <summary>
			/// If this is specified, these tickets aren't offered until a different ticket type sells out or date ends
			/// </summary>
			FollowsTicketRunK = 0x0059000a,
			/// <summary>
			/// Tickets are offered from this DateTime onward
			/// </summary>
			StartDateTime = 0x0059000b,
			/// <summary>
			/// Tickets are unavailable after this DateTime
			/// </summary>
			EndDateTime = 0x0059000c,
			/// <summary>
			/// Maximum number of tickets to sell
			/// </summary>
			MaxTickets = 0x0059000d,
			/// <summary>
			/// Number of tickets sold at the moment
			/// </summary>
			SoldTickets = 0x0059000e,
			/// <summary>
			/// Order in the list on the event page
			/// </summary>
			ListOrder = 0x0059000f,
			/// <summary>
			/// Has the selling of this ticket run been paused
			/// </summary>
			Paused = 0x00590010,
			/// <summary>
			/// Guid to catch duplicate "save" clicks
			/// </summary>
			DuplicateGuid = 0x00590011,
			/// <summary>
			/// Bit flag to note when email has been sent to promoter after ticket run has ended
			/// </summary>
			EmailSent = 0x00590012,
			/// <summary>
			/// Approximate date tickets usrs will be told tickets will be delivered
			/// </summary>
			DeliveryDate = 0x00590013,
			/// <summary>
			/// Delivery method for the tickets
			/// </summary>
			DeliveryMethod = 0x00590014,
			/// <summary>
			/// Delivery charge for deliverinh the tickets
			/// </summary>
			DeliveryCharge = 0x00590015,
		}
		#endregion
		public static string GetColumnName(TicketRun.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case TicketRun.Columns.K: return "K";
						case TicketRun.Columns.EventK: return "EventK";
						case TicketRun.Columns.PromoterK: return "PromoterK";
						case TicketRun.Columns.BrandK: return "BrandK";
						case TicketRun.Columns.Name: return "Name";
						case TicketRun.Columns.Description: return "Description";
						case TicketRun.Columns.Price: return "Price";
						case TicketRun.Columns.BookingFee: return "BookingFee";
						case TicketRun.Columns.LockPrice: return "LockPrice";
						case TicketRun.Columns.FollowsTicketRunK: return "FollowsTicketRunK";
						case TicketRun.Columns.StartDateTime: return "StartDateTime";
						case TicketRun.Columns.EndDateTime: return "EndDateTime";
						case TicketRun.Columns.MaxTickets: return "MaxTickets";
						case TicketRun.Columns.SoldTickets: return "SoldTickets";
						case TicketRun.Columns.ListOrder: return "ListOrder";
						case TicketRun.Columns.Paused: return "Paused";
						case TicketRun.Columns.DuplicateGuid: return "DuplicateGuid";
						case TicketRun.Columns.EmailSent: return "EmailSent";
						case TicketRun.Columns.DeliveryDate: return "DeliveryDate";
						case TicketRun.Columns.DeliveryMethod: return "DeliveryMethod";
						case TicketRun.Columns.DeliveryCharge: return "DeliveryCharge";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(TicketRun.Columns columnEnum)
		{
			switch (columnEnum)
			{
																									default: return false;
			}
		}


		#region Common
 
		public TicketRun(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);  }
		public TicketRun()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.TicketRun);
		}
		public TicketRun(BobSet bs)
		{
			this.Bob = new Bob(bs.Table, bs);
		}
		public TicketRun(int TicketRunK, IBob Parent, object Column)
			: this()
		{
			Bob.GetBobFromParent(TicketRunK, Parent.Bob, Column, TablesEnum.TicketRun);
		}
		public TicketRun(int TicketRunK)
			: this()
		{
			Bob.GetBobFromPrimaryKey(TicketRunK);
		}
		#endregion

	}
	#endregion
	#region TicketRunTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region TicketRun
	/// <summary>
	/// Run of tickets for sale
	/// </summary>
	[Serializable]
	public partial class TicketRun 
	{
		
		#region Simple members
		/// <summary>
		/// Key
		/// </summary>
		public override int K
		{
			get { return (int)this[TicketRun.Columns.K] as int? ?? 0 ; }
			set { this[TicketRun.Columns.K] = value; }
		}
		/// <summary>
		/// Event this ticket is for
		/// </summary>
		public override int EventK
		{
			get { return (int)this[TicketRun.Columns.EventK]; }
			set { this[TicketRun.Columns.EventK] = value; }
		}
		/// <summary>
		/// Promoter selling the ticket
		/// </summary>
		public override int PromoterK
		{
			get { return (int)this[TicketRun.Columns.PromoterK]; }
			set { this[TicketRun.Columns.PromoterK] = value; }
		}
		/// <summary>
		/// Brand this ticket is for (zero if not relevant)
		/// </summary>
		public override int BrandK
		{
			get { return (int)this[TicketRun.Columns.BrandK]; }
			set { this[TicketRun.Columns.BrandK] = value; }
		}
		/// <summary>
		/// Brief name for ticket run: i.e. VIP, Early bird, etc
		/// </summary>
		public override string Name
		{
			get { return (string)this[TicketRun.Columns.Name]; }
			set { this[TicketRun.Columns.Name] = value; }
		}
		/// <summary>
		/// Description short description e.g. "Early Bird"
		/// </summary>
		public override string Description
		{
			get { return (string)this[TicketRun.Columns.Description]; }
			set { this[TicketRun.Columns.Description] = value; }
		}
		/// <summary>
		/// Price in pounds
		/// </summary>
		public override decimal Price
		{
			get { return (decimal)this[TicketRun.Columns.Price]; }
			set { this[TicketRun.Columns.Price] = value; }
		}
		/// <summary>
		/// Our booking fee
		/// </summary>
		public override decimal BookingFee
		{
			get { return (decimal)this[TicketRun.Columns.BookingFee]; }
			set { this[TicketRun.Columns.BookingFee] = value; }
		}
		/// <summary>
		/// If locked, the promoter won't be able to edit the price
		/// </summary>
		public override bool LockPrice
		{
			get { return (bool)this[TicketRun.Columns.LockPrice]; }
			set { this[TicketRun.Columns.LockPrice] = value; }
		}
		/// <summary>
		/// If this is specified, these tickets aren't offered until a different ticket type sells out or date ends
		/// </summary>
		public override int FollowsTicketRunK
		{
			get { return (int)this[TicketRun.Columns.FollowsTicketRunK]; }
			set { this[TicketRun.Columns.FollowsTicketRunK] = value; }
		}
		/// <summary>
		/// Tickets are offered from this DateTime onward
		/// </summary>
		public override DateTime StartDateTime
		{
			get { return (DateTime)this[TicketRun.Columns.StartDateTime]; }
			set { this[TicketRun.Columns.StartDateTime] = value; }
		}
		/// <summary>
		/// Tickets are unavailable after this DateTime
		/// </summary>
		public override DateTime EndDateTime
		{
			get { return (DateTime)this[TicketRun.Columns.EndDateTime]; }
			set { this[TicketRun.Columns.EndDateTime] = value; }
		}
		/// <summary>
		/// Maximum number of tickets to sell
		/// </summary>
		public override int MaxTickets
		{
			get { return (int)this[TicketRun.Columns.MaxTickets]; }
			set { this[TicketRun.Columns.MaxTickets] = value; }
		}
		/// <summary>
		/// Number of tickets sold at the moment
		/// </summary>
		public override int SoldTickets
		{
			get { return (int)this[TicketRun.Columns.SoldTickets]; }
			set { this[TicketRun.Columns.SoldTickets] = value; }
		}
		/// <summary>
		/// Order in the list on the event page
		/// </summary>
		public override double ListOrder
		{
			get { return (double)this[TicketRun.Columns.ListOrder]; }
			set { this[TicketRun.Columns.ListOrder] = value; }
		}
		/// <summary>
		/// Has the selling of this ticket run been paused
		/// </summary>
		public override bool Paused
		{
			get { return (bool)this[TicketRun.Columns.Paused]; }
			set { this[TicketRun.Columns.Paused] = value; }
		}
		/// <summary>
		/// Guid to catch duplicate "save" clicks
		/// </summary>
		public Guid	DuplicateGuid
		{
			get{ return Cambro.Misc.Db.GuidConvertor(this[TicketRun.Columns.DuplicateGuid]);}		
			set{ this[TicketRun.Columns.DuplicateGuid] = new System.Data.SqlTypes.SqlGuid(value);}
		}
		/// <summary>
		/// Bit flag to note when email has been sent to promoter after ticket run has ended
		/// </summary>
		public override bool EmailSent
		{
			get { return (bool)this[TicketRun.Columns.EmailSent]; }
			set { this[TicketRun.Columns.EmailSent] = value; }
		}
		/// <summary>
		/// Approximate date tickets usrs will be told tickets will be delivered
		/// </summary>
		public override DateTime DeliveryDate
		{
			get { return (DateTime)this[TicketRun.Columns.DeliveryDate]; }
			set { this[TicketRun.Columns.DeliveryDate] = value; }
		}
		/// <summary>
		/// Delivery method for the tickets
		/// </summary>
		public override int DeliveryMethod
		{
			get { return (int)this[TicketRun.Columns.DeliveryMethod]; }
			set { this[TicketRun.Columns.DeliveryMethod] = value; }
		}
		/// <summary>
		/// Delivery charge for deliverinh the tickets
		/// </summary>
		public override decimal DeliveryCharge
		{
			get { return (decimal)this[TicketRun.Columns.DeliveryCharge]; }
			set { this[TicketRun.Columns.DeliveryCharge] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildTicketRuns
	{
		CachedSqlSelect<TicketRun> ChildTicketRuns();
		CachedSqlSelect<TicketRun> ChildTicketRuns(Q where);
		CachedSqlSelect<TicketRun> ChildTicketRuns(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<TicketRun> ChildTicketRuns(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class TicketRun 
	 : 
	Bobs.ChildInterfaces.IHasChildTickets
		{
			public CachedSqlSelect<Ticket> ChildTickets()
		{
			return this.ChildTickets(null, null);
		}
		public CachedSqlSelect<Ticket> ChildTickets(Q where)
		{
			return this.ChildTickets(where, null);
		}
		public CachedSqlSelect<Ticket> ChildTickets(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildTickets(null, orderBy);
		}
		public CachedSqlSelect<Ticket> ChildTickets(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<Ticket>
			(
				new Children<Ticket>
				(
					TablesEnum.TicketRun, 
					this.K, 
					TablesEnum.Ticket, 
					dr => 
					{ 
						Ticket newTicket = new Ticket(); 
						newTicket.Initialise(dr); 
						return newTicket;
					},
					"117368D6",
					where,
					orderBy
				)
			);
		}
		}

	#region TicketRunDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region TicketRunDataHolder
	/// <summary>
	/// Run of tickets for saleDataHolder
	/// </summary>
	[Serializable]
	public partial class TicketRunDataHolder : DataHolder<TicketRun>
	{
		TicketRun dataHolder;
		[NonSerializedAttribute] TicketRun bob;

		public TicketRunDataHolder()
		{
			this.dataHolder = new TicketRun();
		}
		
		void CopyValues(TicketRun source, TicketRun destination)
		{
			destination[Bobs.TicketRun.Columns.K] = source[Bobs.TicketRun.Columns.K];
			destination[Bobs.TicketRun.Columns.EventK] = source[Bobs.TicketRun.Columns.EventK];
			destination[Bobs.TicketRun.Columns.PromoterK] = source[Bobs.TicketRun.Columns.PromoterK];
			destination[Bobs.TicketRun.Columns.BrandK] = source[Bobs.TicketRun.Columns.BrandK];
			destination[Bobs.TicketRun.Columns.Name] = source[Bobs.TicketRun.Columns.Name];
			destination[Bobs.TicketRun.Columns.Description] = source[Bobs.TicketRun.Columns.Description];
			destination[Bobs.TicketRun.Columns.Price] = source[Bobs.TicketRun.Columns.Price];
			destination[Bobs.TicketRun.Columns.BookingFee] = source[Bobs.TicketRun.Columns.BookingFee];
			destination[Bobs.TicketRun.Columns.LockPrice] = source[Bobs.TicketRun.Columns.LockPrice];
			destination[Bobs.TicketRun.Columns.FollowsTicketRunK] = source[Bobs.TicketRun.Columns.FollowsTicketRunK];
			destination[Bobs.TicketRun.Columns.StartDateTime] = source[Bobs.TicketRun.Columns.StartDateTime];
			destination[Bobs.TicketRun.Columns.EndDateTime] = source[Bobs.TicketRun.Columns.EndDateTime];
			destination[Bobs.TicketRun.Columns.MaxTickets] = source[Bobs.TicketRun.Columns.MaxTickets];
			destination[Bobs.TicketRun.Columns.SoldTickets] = source[Bobs.TicketRun.Columns.SoldTickets];
			destination[Bobs.TicketRun.Columns.ListOrder] = source[Bobs.TicketRun.Columns.ListOrder];
			destination[Bobs.TicketRun.Columns.Paused] = source[Bobs.TicketRun.Columns.Paused];
			destination[Bobs.TicketRun.Columns.DuplicateGuid] = source[Bobs.TicketRun.Columns.DuplicateGuid];
			destination[Bobs.TicketRun.Columns.EmailSent] = source[Bobs.TicketRun.Columns.EmailSent];
			destination[Bobs.TicketRun.Columns.DeliveryDate] = source[Bobs.TicketRun.Columns.DeliveryDate];
			destination[Bobs.TicketRun.Columns.DeliveryMethod] = source[Bobs.TicketRun.Columns.DeliveryMethod];
			destination[Bobs.TicketRun.Columns.DeliveryCharge] = source[Bobs.TicketRun.Columns.DeliveryCharge];
		}
		
		public TicketRunDataHolder(TicketRun bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// Key
		/// </summary>
		public int K
		{
			get { return dataHolder.K; }
			set { this.dataHolder.K = value; }
		}
		/// <summary>
		/// Event this ticket is for
		/// </summary>
		public int EventK
		{
			get { return dataHolder.EventK; }
			set { this.dataHolder.EventK = value; }
		}
		/// <summary>
		/// Promoter selling the ticket
		/// </summary>
		public int PromoterK
		{
			get { return dataHolder.PromoterK; }
			set { this.dataHolder.PromoterK = value; }
		}
		/// <summary>
		/// Brand this ticket is for (zero if not relevant)
		/// </summary>
		public int BrandK
		{
			get { return dataHolder.BrandK; }
			set { this.dataHolder.BrandK = value; }
		}
		/// <summary>
		/// Brief name for ticket run: i.e. VIP, Early bird, etc
		/// </summary>
		public string Name
		{
			get { return dataHolder.Name; }
			set { this.dataHolder.Name = value; }
		}
		/// <summary>
		/// Description short description e.g. "Early Bird"
		/// </summary>
		public string Description
		{
			get { return dataHolder.Description; }
			set { this.dataHolder.Description = value; }
		}
		/// <summary>
		/// Price in pounds
		/// </summary>
		public decimal Price
		{
			get { return dataHolder.Price; }
			set { this.dataHolder.Price = value; }
		}
		/// <summary>
		/// Our booking fee
		/// </summary>
		public decimal BookingFee
		{
			get { return dataHolder.BookingFee; }
			set { this.dataHolder.BookingFee = value; }
		}
		/// <summary>
		/// If locked, the promoter won't be able to edit the price
		/// </summary>
		public bool LockPrice
		{
			get { return dataHolder.LockPrice; }
			set { this.dataHolder.LockPrice = value; }
		}
		/// <summary>
		/// If this is specified, these tickets aren't offered until a different ticket type sells out or date ends
		/// </summary>
		public int FollowsTicketRunK
		{
			get { return dataHolder.FollowsTicketRunK; }
			set { this.dataHolder.FollowsTicketRunK = value; }
		}
		/// <summary>
		/// Tickets are offered from this DateTime onward
		/// </summary>
		public DateTime StartDateTime
		{
			get { return dataHolder.StartDateTime; }
			set { this.dataHolder.StartDateTime = value; }
		}
		/// <summary>
		/// Tickets are unavailable after this DateTime
		/// </summary>
		public DateTime EndDateTime
		{
			get { return dataHolder.EndDateTime; }
			set { this.dataHolder.EndDateTime = value; }
		}
		/// <summary>
		/// Maximum number of tickets to sell
		/// </summary>
		public int MaxTickets
		{
			get { return dataHolder.MaxTickets; }
			set { this.dataHolder.MaxTickets = value; }
		}
		/// <summary>
		/// Number of tickets sold at the moment
		/// </summary>
		public int SoldTickets
		{
			get { return dataHolder.SoldTickets; }
			set { this.dataHolder.SoldTickets = value; }
		}
		/// <summary>
		/// Order in the list on the event page
		/// </summary>
		public double ListOrder
		{
			get { return dataHolder.ListOrder; }
			set { this.dataHolder.ListOrder = value; }
		}
		/// <summary>
		/// Has the selling of this ticket run been paused
		/// </summary>
		public bool Paused
		{
			get { return dataHolder.Paused; }
			set { this.dataHolder.Paused = value; }
		}
		/// <summary>
		/// Guid to catch duplicate "save" clicks
		/// </summary>
		public Guid DuplicateGuid
		{
			get { return dataHolder.DuplicateGuid; }
			set { this.dataHolder.DuplicateGuid = value; }
		}
		/// <summary>
		/// Bit flag to note when email has been sent to promoter after ticket run has ended
		/// </summary>
		public bool EmailSent
		{
			get { return dataHolder.EmailSent; }
			set { this.dataHolder.EmailSent = value; }
		}
		/// <summary>
		/// Approximate date tickets usrs will be told tickets will be delivered
		/// </summary>
		public DateTime DeliveryDate
		{
			get { return dataHolder.DeliveryDate; }
			set { this.dataHolder.DeliveryDate = value; }
		}
		/// <summary>
		/// Delivery method for the tickets
		/// </summary>
		public int DeliveryMethod
		{
			get { return dataHolder.DeliveryMethod; }
			set { this.dataHolder.DeliveryMethod = value; }
		}
		/// <summary>
		/// Delivery charge for deliverinh the tickets
		/// </summary>
		public decimal DeliveryCharge
		{
			get { return dataHolder.DeliveryCharge; }
			set { this.dataHolder.DeliveryCharge = value; }
		}
		#endregion
		public TicketRun TicketRun
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new TicketRun(K);
					}
					else
					{
						bob = new TicketRun();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region TicketRunSet
	public partial class TicketRunSet : BobSet, IEnumerable<TicketRun>
	{
		public TicketRunSet(Query query) : base(query) { }

		public TicketRun this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new TicketRun(this);
					((TicketRun)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (TicketRun)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new TicketRunTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<TicketRun> ToList()
		{
			List<TicketRun> list = new List<TicketRun>();
			foreach (TicketRun item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<TicketRun> Members

		public new IEnumerator<TicketRun> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region TicketRunTableDef
	public class TicketRunTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "TicketRun";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "D8F98D64";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return TicketRun.GetColumnName((TicketRun.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.TicketRun;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return true;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return TicketRun.Columns.K;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			TicketRun.Columns c = (TicketRun.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case TicketRun.Columns.K: ColumnStore[i] = new ColumnDef(c, "K", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey | SqlColumnFlag.AutoNumber, null); break;
					case TicketRun.Columns.EventK: ColumnStore[i] = new ColumnDef(c, "EventK", SqlDbType.Int, 0); break;
					case TicketRun.Columns.PromoterK: ColumnStore[i] = new ColumnDef(c, "PromoterK", SqlDbType.Int, 0); break;
					case TicketRun.Columns.BrandK: ColumnStore[i] = new ColumnDef(c, "BrandK", SqlDbType.Int, 0); break;
					case TicketRun.Columns.Name: ColumnStore[i] = new ColumnDef(c, "Name", SqlDbType.VarChar, 30, ""); break;
					case TicketRun.Columns.Description: ColumnStore[i] = new ColumnDef(c, "Description", SqlDbType.VarChar, 256, ""); break;
					case TicketRun.Columns.Price: ColumnStore[i] = new ColumnDef(c, "Price", SqlDbType.Decimal, 20, 0m); break;
					case TicketRun.Columns.BookingFee: ColumnStore[i] = new ColumnDef(c, "BookingFee", SqlDbType.Decimal, 20, 0m); break;
					case TicketRun.Columns.LockPrice: ColumnStore[i] = new ColumnDef(c, "LockPrice", SqlDbType.Bit, false); break;
					case TicketRun.Columns.FollowsTicketRunK: ColumnStore[i] = new ColumnDef(c, "FollowsTicketRunK", SqlDbType.Int, 0); break;
					case TicketRun.Columns.StartDateTime: ColumnStore[i] = new ColumnDef(c, "StartDateTime", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case TicketRun.Columns.EndDateTime: ColumnStore[i] = new ColumnDef(c, "EndDateTime", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case TicketRun.Columns.MaxTickets: ColumnStore[i] = new ColumnDef(c, "MaxTickets", SqlDbType.Int, 0); break;
					case TicketRun.Columns.SoldTickets: ColumnStore[i] = new ColumnDef(c, "SoldTickets", SqlDbType.Int, 0); break;
					case TicketRun.Columns.ListOrder: ColumnStore[i] = new ColumnDef(c, "ListOrder", SqlDbType.Float, 0.0); break;
					case TicketRun.Columns.Paused: ColumnStore[i] = new ColumnDef(c, "Paused", SqlDbType.Bit, false); break;
					case TicketRun.Columns.DuplicateGuid: ColumnStore[i] = new ColumnDef(c, "DuplicateGuid", SqlDbType.UniqueIdentifier, Guid.Empty); break;
					case TicketRun.Columns.EmailSent: ColumnStore[i] = new ColumnDef(c, "EmailSent", SqlDbType.Bit, false); break;
					case TicketRun.Columns.DeliveryDate: ColumnStore[i] = new ColumnDef(c, "DeliveryDate", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case TicketRun.Columns.DeliveryMethod: ColumnStore[i] = new ColumnDef(c, "DeliveryMethod", SqlDbType.Int, 0); break;
					case TicketRun.Columns.DeliveryCharge: ColumnStore[i] = new ColumnDef(c, "DeliveryCharge", SqlDbType.Decimal, 8, 0m); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(TicketRun.Columns.K);
						InitColumn(TicketRun.Columns.EventK);
						InitColumn(TicketRun.Columns.PromoterK);
						InitColumn(TicketRun.Columns.BrandK);
						InitColumn(TicketRun.Columns.Name);
						InitColumn(TicketRun.Columns.Description);
						InitColumn(TicketRun.Columns.Price);
						InitColumn(TicketRun.Columns.BookingFee);
						InitColumn(TicketRun.Columns.LockPrice);
						InitColumn(TicketRun.Columns.FollowsTicketRunK);
						InitColumn(TicketRun.Columns.StartDateTime);
						InitColumn(TicketRun.Columns.EndDateTime);
						InitColumn(TicketRun.Columns.MaxTickets);
						InitColumn(TicketRun.Columns.SoldTickets);
						InitColumn(TicketRun.Columns.ListOrder);
						InitColumn(TicketRun.Columns.Paused);
						InitColumn(TicketRun.Columns.DuplicateGuid);
						InitColumn(TicketRun.Columns.EmailSent);
						InitColumn(TicketRun.Columns.DeliveryDate);
						InitColumn(TicketRun.Columns.DeliveryMethod);
						InitColumn(TicketRun.Columns.DeliveryCharge);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region TrafficExceptionDay
	/// <summary>
	/// Days which we do not expect to follow usual traffic patterns, and the day to use instead
	/// </summary>
	public partial class TrafficExceptionDay : Model.Entities.TrafficExceptionDay, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// Date which is expected to not follow regular traffic patterns from week to week, e.g. days around a Bank Holiday
			/// </summary>
			ExceptionDate = 0x005a0001,
			/// <summary>
			/// The date of a day whose traffic levels should be used instead, e.g. the previous Sunday if we expect low traffic
			/// </summary>
			DateToUseInstead = 0x005a0002,
		}
		#endregion
		public static string GetColumnName(TrafficExceptionDay.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case TrafficExceptionDay.Columns.ExceptionDate: return "ExceptionDate";
						case TrafficExceptionDay.Columns.DateToUseInstead: return "DateToUseInstead";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(TrafficExceptionDay.Columns columnEnum)
		{
			switch (columnEnum)
			{
						default: return false;
			}
		}


		#region Common
 
		public TrafficExceptionDay(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);  }
		public TrafficExceptionDay()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.TrafficExceptionDay);
		}
		public TrafficExceptionDay(BobSet bs)
		{
			this.Bob = new Bob(bs.Table, bs);
		}
		public TrafficExceptionDay(DateTime TrafficExceptionDayExceptionDate, IBob Parent, object Column)
			: this()
		{
			Bob.GetBobFromParent(TrafficExceptionDayExceptionDate, Parent.Bob, Column, TablesEnum.TrafficExceptionDay);
		}
		public TrafficExceptionDay(DateTime TrafficExceptionDayExceptionDate)
			: this()
		{
			Bob.GetBobFromPrimaryKey(TrafficExceptionDayExceptionDate);
		}
		#endregion

	}
	#endregion
	#region TrafficExceptionDayTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region TrafficExceptionDay
	/// <summary>
	/// Days which we do not expect to follow usual traffic patterns, and the day to use instead
	/// </summary>
	[Serializable]
	public partial class TrafficExceptionDay 
	{
		
		#region Simple members
		/// <summary>
		/// Date which is expected to not follow regular traffic patterns from week to week, e.g. days around a Bank Holiday
		/// </summary>
		public override DateTime ExceptionDate
		{
			get { return (DateTime)this[TrafficExceptionDay.Columns.ExceptionDate]; }
			set { this[TrafficExceptionDay.Columns.ExceptionDate] = value; }
		}
		/// <summary>
		/// The date of a day whose traffic levels should be used instead, e.g. the previous Sunday if we expect low traffic
		/// </summary>
		public override DateTime DateToUseInstead
		{
			get { return (DateTime)this[TrafficExceptionDay.Columns.DateToUseInstead]; }
			set { this[TrafficExceptionDay.Columns.DateToUseInstead] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildTrafficExceptionDays
	{
		CachedSqlSelect<TrafficExceptionDay> ChildTrafficExceptionDays();
		CachedSqlSelect<TrafficExceptionDay> ChildTrafficExceptionDays(Q where);
		CachedSqlSelect<TrafficExceptionDay> ChildTrafficExceptionDays(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<TrafficExceptionDay> ChildTrafficExceptionDays(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class TrafficExceptionDay 
		{
		}

	#region TrafficExceptionDayDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region TrafficExceptionDayDataHolder
	/// <summary>
	/// Days which we do not expect to follow usual traffic patterns, and the day to use insteadDataHolder
	/// </summary>
	[Serializable]
	public partial class TrafficExceptionDayDataHolder : DataHolder<TrafficExceptionDay>
	{
		TrafficExceptionDay dataHolder;
		[NonSerializedAttribute] TrafficExceptionDay bob;

		public TrafficExceptionDayDataHolder()
		{
			this.dataHolder = new TrafficExceptionDay();
		}
		
		void CopyValues(TrafficExceptionDay source, TrafficExceptionDay destination)
		{
			destination[Bobs.TrafficExceptionDay.Columns.ExceptionDate] = source[Bobs.TrafficExceptionDay.Columns.ExceptionDate];
			destination[Bobs.TrafficExceptionDay.Columns.DateToUseInstead] = source[Bobs.TrafficExceptionDay.Columns.DateToUseInstead];
		}
		
		public TrafficExceptionDayDataHolder(TrafficExceptionDay bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// Date which is expected to not follow regular traffic patterns from week to week, e.g. days around a Bank Holiday
		/// </summary>
		public DateTime ExceptionDate
		{
			get { return dataHolder.ExceptionDate; }
			set { this.dataHolder.ExceptionDate = value; }
		}
		/// <summary>
		/// The date of a day whose traffic levels should be used instead, e.g. the previous Sunday if we expect low traffic
		/// </summary>
		public DateTime DateToUseInstead
		{
			get { return dataHolder.DateToUseInstead; }
			set { this.dataHolder.DateToUseInstead = value; }
		}
		#endregion
		public TrafficExceptionDay TrafficExceptionDay
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new TrafficExceptionDay(K);
					}
					else
					{
						bob = new TrafficExceptionDay();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region TrafficExceptionDaySet
	public partial class TrafficExceptionDaySet : BobSet, IEnumerable<TrafficExceptionDay>
	{
		public TrafficExceptionDaySet(Query query) : base(query) { }

		public TrafficExceptionDay this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new TrafficExceptionDay(this);
					((TrafficExceptionDay)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (TrafficExceptionDay)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new TrafficExceptionDayTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<TrafficExceptionDay> ToList()
		{
			List<TrafficExceptionDay> list = new List<TrafficExceptionDay>();
			foreach (TrafficExceptionDay item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<TrafficExceptionDay> Members

		public new IEnumerator<TrafficExceptionDay> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region TrafficExceptionDayTableDef
	public class TrafficExceptionDayTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "TrafficExceptionDay";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "CAAD42CC";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return TrafficExceptionDay.GetColumnName((TrafficExceptionDay.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.TrafficExceptionDay;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return true;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return TrafficExceptionDay.Columns.ExceptionDate;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			TrafficExceptionDay.Columns c = (TrafficExceptionDay.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case TrafficExceptionDay.Columns.ExceptionDate: ColumnStore[i] = new ColumnDef(c, "ExceptionDate", SqlDbType.DateTime, 16, SqlColumnFlag.PrimaryKey, DateTime.Parse("01/01/0001")); break;
					case TrafficExceptionDay.Columns.DateToUseInstead: ColumnStore[i] = new ColumnDef(c, "DateToUseInstead", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(TrafficExceptionDay.Columns.ExceptionDate);
						InitColumn(TrafficExceptionDay.Columns.DateToUseInstead);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region TrafficLevelRelativeToMinuteOfDay
	/// <summary>
	/// Store of current analysed data calculating traffic levels at each minute of the day
	/// </summary>
	public partial class TrafficLevelRelativeToMinuteOfDay : Model.Entities.TrafficLevelRelativeToMinuteOfDay, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// Minute since midnight
			/// </summary>
			Minute = 0x005b0001,
			/// <summary>
			/// A representative level of traffic at this minute
			/// </summary>
			TrafficLevel = 0x005b0002,
		}
		#endregion
		public static string GetColumnName(TrafficLevelRelativeToMinuteOfDay.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case TrafficLevelRelativeToMinuteOfDay.Columns.Minute: return "Minute";
						case TrafficLevelRelativeToMinuteOfDay.Columns.TrafficLevel: return "TrafficLevel";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(TrafficLevelRelativeToMinuteOfDay.Columns columnEnum)
		{
			switch (columnEnum)
			{
						default: return false;
			}
		}


		#region Common
 
		public TrafficLevelRelativeToMinuteOfDay(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);  }
		public TrafficLevelRelativeToMinuteOfDay()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.TrafficLevelRelativeToMinuteOfDay);
		}
		public TrafficLevelRelativeToMinuteOfDay(BobSet bs)
		{
			this.Bob = new Bob(bs.Table, bs);
		}
		public TrafficLevelRelativeToMinuteOfDay(int TrafficLevelRelativeToMinuteOfDayMinute, IBob Parent, object Column)
			: this()
		{
			Bob.GetBobFromParent(TrafficLevelRelativeToMinuteOfDayMinute, Parent.Bob, Column, TablesEnum.TrafficLevelRelativeToMinuteOfDay);
		}
		public TrafficLevelRelativeToMinuteOfDay(int TrafficLevelRelativeToMinuteOfDayMinute)
			: this()
		{
			Bob.GetBobFromPrimaryKey(TrafficLevelRelativeToMinuteOfDayMinute);
		}
		#endregion

	}
	#endregion
	#region TrafficLevelRelativeToMinuteOfDayTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region TrafficLevelRelativeToMinuteOfDay
	/// <summary>
	/// Store of current analysed data calculating traffic levels at each minute of the day
	/// </summary>
	[Serializable]
	public partial class TrafficLevelRelativeToMinuteOfDay 
	{
		
		#region Simple members
		/// <summary>
		/// Minute since midnight
		/// </summary>
		public override int Minute
		{
			get { return (int)this[TrafficLevelRelativeToMinuteOfDay.Columns.Minute]; }
			set { this[TrafficLevelRelativeToMinuteOfDay.Columns.Minute] = value; }
		}
		/// <summary>
		/// A representative level of traffic at this minute
		/// </summary>
		public override int TrafficLevel
		{
			get { return (int)this[TrafficLevelRelativeToMinuteOfDay.Columns.TrafficLevel]; }
			set { this[TrafficLevelRelativeToMinuteOfDay.Columns.TrafficLevel] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildTrafficLevelRelativeToMinuteOfDays
	{
		CachedSqlSelect<TrafficLevelRelativeToMinuteOfDay> ChildTrafficLevelRelativeToMinuteOfDays();
		CachedSqlSelect<TrafficLevelRelativeToMinuteOfDay> ChildTrafficLevelRelativeToMinuteOfDays(Q where);
		CachedSqlSelect<TrafficLevelRelativeToMinuteOfDay> ChildTrafficLevelRelativeToMinuteOfDays(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<TrafficLevelRelativeToMinuteOfDay> ChildTrafficLevelRelativeToMinuteOfDays(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class TrafficLevelRelativeToMinuteOfDay 
		{
		}

	#region TrafficLevelRelativeToMinuteOfDayDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region TrafficLevelRelativeToMinuteOfDayDataHolder
	/// <summary>
	/// Store of current analysed data calculating traffic levels at each minute of the dayDataHolder
	/// </summary>
	[Serializable]
	public partial class TrafficLevelRelativeToMinuteOfDayDataHolder : DataHolder<TrafficLevelRelativeToMinuteOfDay>
	{
		TrafficLevelRelativeToMinuteOfDay dataHolder;
		[NonSerializedAttribute] TrafficLevelRelativeToMinuteOfDay bob;

		public TrafficLevelRelativeToMinuteOfDayDataHolder()
		{
			this.dataHolder = new TrafficLevelRelativeToMinuteOfDay();
		}
		
		void CopyValues(TrafficLevelRelativeToMinuteOfDay source, TrafficLevelRelativeToMinuteOfDay destination)
		{
			destination[Bobs.TrafficLevelRelativeToMinuteOfDay.Columns.Minute] = source[Bobs.TrafficLevelRelativeToMinuteOfDay.Columns.Minute];
			destination[Bobs.TrafficLevelRelativeToMinuteOfDay.Columns.TrafficLevel] = source[Bobs.TrafficLevelRelativeToMinuteOfDay.Columns.TrafficLevel];
		}
		
		public TrafficLevelRelativeToMinuteOfDayDataHolder(TrafficLevelRelativeToMinuteOfDay bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// Minute since midnight
		/// </summary>
		public int Minute
		{
			get { return dataHolder.Minute; }
			set { this.dataHolder.Minute = value; }
		}
		/// <summary>
		/// A representative level of traffic at this minute
		/// </summary>
		public int TrafficLevel
		{
			get { return dataHolder.TrafficLevel; }
			set { this.dataHolder.TrafficLevel = value; }
		}
		#endregion
		public TrafficLevelRelativeToMinuteOfDay TrafficLevelRelativeToMinuteOfDay
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new TrafficLevelRelativeToMinuteOfDay(K);
					}
					else
					{
						bob = new TrafficLevelRelativeToMinuteOfDay();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region TrafficLevelRelativeToMinuteOfDaySet
	public partial class TrafficLevelRelativeToMinuteOfDaySet : BobSet, IEnumerable<TrafficLevelRelativeToMinuteOfDay>
	{
		public TrafficLevelRelativeToMinuteOfDaySet(Query query) : base(query) { }

		public TrafficLevelRelativeToMinuteOfDay this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new TrafficLevelRelativeToMinuteOfDay(this);
					((TrafficLevelRelativeToMinuteOfDay)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (TrafficLevelRelativeToMinuteOfDay)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new TrafficLevelRelativeToMinuteOfDayTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<TrafficLevelRelativeToMinuteOfDay> ToList()
		{
			List<TrafficLevelRelativeToMinuteOfDay> list = new List<TrafficLevelRelativeToMinuteOfDay>();
			foreach (TrafficLevelRelativeToMinuteOfDay item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<TrafficLevelRelativeToMinuteOfDay> Members

		public new IEnumerator<TrafficLevelRelativeToMinuteOfDay> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region TrafficLevelRelativeToMinuteOfDayTableDef
	public class TrafficLevelRelativeToMinuteOfDayTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "TrafficLevelRelativeToMinuteOfDay";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "14039A73";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return TrafficLevelRelativeToMinuteOfDay.GetColumnName((TrafficLevelRelativeToMinuteOfDay.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.TrafficLevelRelativeToMinuteOfDay;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return true;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return TrafficLevelRelativeToMinuteOfDay.Columns.Minute;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			TrafficLevelRelativeToMinuteOfDay.Columns c = (TrafficLevelRelativeToMinuteOfDay.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case TrafficLevelRelativeToMinuteOfDay.Columns.Minute: ColumnStore[i] = new ColumnDef(c, "Minute", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey, 0); break;
					case TrafficLevelRelativeToMinuteOfDay.Columns.TrafficLevel: ColumnStore[i] = new ColumnDef(c, "TrafficLevel", SqlDbType.Int, 0); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(TrafficLevelRelativeToMinuteOfDay.Columns.Minute);
						InitColumn(TrafficLevelRelativeToMinuteOfDay.Columns.TrafficLevel);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region Transfer
	/// <summary>
	/// Customer pays us using a credit card / card is refunded / customer transfers money into our bank acc
	/// </summary>
	public partial class Transfer : Model.Entities.Transfer, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// Primary key
			/// </summary>
			K = 0x005c0001,
			/// <summary>
			/// Payment, Refund
			/// </summary>
			Type = 0x005c0002,
			/// <summary>
			/// Pending, Success, Cancelled
			/// </summary>
			Status = 0x005c0003,
			/// <summary>
			/// Card, Bank Transfer, Cheque, Cash
			/// </summary>
			Method = 0x005c0004,
			/// <summary>
			/// Link to the relevant user
			/// </summary>
			UsrK = 0x005c0005,
			/// <summary>
			/// Link to the promoter (if this is a promoter transfer)
			/// </summary>
			PromoterK = 0x005c0006,
			/// <summary>
			/// Link to the user that initiated this transfer (e.g. the admin user if it's a refund!)
			/// </summary>
			ActionUsrK = 0x005c0007,
			/// <summary>
			/// +ve for DSI receiving money, -ve for DSI paying out money
			/// </summary>
			Amount = 0x005c0008,
			/// <summary>
			/// Date / time the transfer was initiated / received
			/// </summary>
			DateTime = 0x005c0009,
			/// <summary>
			/// Date / time the transfer was created
			/// </summary>
			DateTimeCreated = 0x005c000a,
			/// <summary>
			/// Date / time the transfer was completed
			/// </summary>
			DateTimeComplete = 0x005c000b,
			/// <summary>
			/// IP address of the client machine
			/// </summary>
			ClientHost = 0x005c000c,
			/// <summary>
			/// for card payment - the billing name
			/// </summary>
			CardName = 0x005c000d,
			/// <summary>
			/// for card payment - the billing address (line 1)
			/// </summary>
			CardAddress1 = 0x005c000e,
			/// <summary>
			/// for card payment - the billing postcode
			/// </summary>
			CardPostcode = 0x005c000f,
			/// <summary>
			/// This transfer used card details from an earlier transfer (saved card details or refund)
			/// </summary>
			CardSavedTransferK = 0x005c0010,
			/// <summary>
			/// Cryptographic hash of the card number
			/// </summary>
			CardNumberHash = 0x005c0011,
			/// <summary>
			/// Last 6 digits of the card number
			/// </summary>
			CardNumberEnd = 0x005c0012,
			/// <summary>
			/// Card issuer deduced from card number (e.g. Visa, Mastercard etc.)
			/// </summary>
			CardType = 0x005c0013,
			/// <summary>
			/// Card start date
			/// </summary>
			CardStart = 0x005c0014,
			/// <summary>
			/// Card expiry date
			/// </summary>
			CardExpires = 0x005c0015,
			/// <summary>
			/// Issue number
			/// </summary>
			CardIssue = 0x005c0016,
			/// <summary>
			/// Card CV2 number
			/// </summary>
			CardCV2 = 0x005c0017,
			/// <summary>
			/// Is the card saved for further use?
			/// </summary>
			CardSaved = 0x005c0018,
			/// <summary>
			/// The account name - e.g. Uprising Clubs Limited
			/// </summary>
			BankAccountName = 0x005c0019,
			/// <summary>
			/// The bank name - e.g. Lloyds
			/// </summary>
			BankName = 0x005c001a,
			/// <summary>
			/// Sort code
			/// </summary>
			BankSortCode = 0x005c001b,
			/// <summary>
			/// Account number
			/// </summary>
			BankAccountNumber = 0x005c001c,
			/// <summary>
			/// The reference/comment added to the transfer
			/// </summary>
			BankTransferReference = 0x005c001d,
			/// <summary>
			/// Only when Status=Success.The bank's authorisation code for your information only, do not show to customer.
			/// </summary>
			CardResponseAuthCode = 0x005c001e,
			/// <summary>
			/// The Apacs approved text that is supplied as a result of the CV2 and AVS anti-Fraud checks. There are five core values defined, these are ALL MATCH, SECURITY CODE MATCH ONLY, ADDRESS MATCH ONLY, NO DATA MATCHES and DATA NOT CHECKED. With these core codes an address is only understood to match if and only if both the address proper and the postcode match at the same time. This is a little strict for some people so the following codes have been introduced too : PARTIAL ADDRESS MATCH / POSTCODE, PARTIAL ADDRESS MATCH / ADDRESS, SECURITY CODE MATCH / POSTCODE, SECURITY CODE MATCH / ADDRESS. Codes are only supplied when CV2 and/or Billing Address data is supplied, it is in your interests to supply this data to us. Note that at present all issuers should be issuing new cards with a CV2 security code on them however the AVS checks will only work with UK issued cards. Also note that Switch have not yet implemented these checks (but the cards should have the CV2 security code on them nevertheless). 
			/// </summary>
			CardResponseCv2Avs = 0x005c001f,
			/// <summary>
			/// Only when Status=Failed. The bank's failure message for your information only, do not show to customer.
			/// </summary>
			CardResponseMessage = 0x005c0020,
			/// <summary>
			/// Only when Status=Failed and CardResponseCode='N'. The bank's failure code for your information only, do not show to customer. 2 or 83 : referral, 5 or 54 : Not Authorised, 30 : general error (retrying after 1 minute may succeed, depending on error)
			/// </summary>
			CardResponseRespCode = 0x005c0021,
			/// <summary>
			/// The code field is a short code giving extensive details of failure states. It is of particular use to SECBatch/SECVPN users. Note : preauth checks can have several errors, e.g. P:NEC means the name, expiry date and card number fields are all invalid or not supplied.
			/// </summary>
			CardResponseCode = 0x005c0022,
			/// <summary>
			/// Flag to mark results from CV2 Fraud check
			/// </summary>
			CardResponseIsCv2Match = 0x005c0023,
			/// <summary>
			/// Flag to mark results from Post Code Fraud check
			/// </summary>
			CardResponseIsPostCodeMatch = 0x005c0024,
			/// <summary>
			/// Flag to mark results from Address Fraud check
			/// </summary>
			CardResponseIsAddressMatch = 0x005c0025,
			/// <summary>
			/// Flag to mark if fraud check was enforced
			/// </summary>
			CardResponseIsDataChecked = 0x005c0026,
			/// <summary>
			/// Additional Notes
			/// </summary>
			Notes = 0x005c0027,
			/// <summary>
			/// This flag is to be set when the sum of InvoiceTransfers amounts = Transfer.Amount.  It will facilitate faster / easier searches
			/// </summary>
			IsFullyApplied = 0x005c0028,
			/// <summary>
			/// The guid of the transfer.  Allows unique identifier to be assigned prior to saving to the db
			/// </summary>
			Guid = 0x005c0029,
			/// <summary>
			/// Transfer K of transfer that this has refunded
			/// </summary>
			TransferRefundedK = 0x005c002a,
			/// <summary>
			/// Not Refunded, Partial Refund, Full Refund
			/// </summary>
			RefundStatus = 0x005c002b,
			/// <summary>
			/// Guid to catch duplicate on save
			/// </summary>
			DuplicateGuid = 0x005c002c,
			/// <summary>
			/// The cheque reference number
			/// </summary>
			ChequeReferenceNumber = 0x005c002d,
			/// <summary>
			/// Number of digits in the card number
			/// </summary>
			CardDigits = 0x005c002e,
			/// <summary>
			/// Which DSI bank account was used in this transfer. DSI Current account = 1, DSI Client account = 2
			/// </summary>
			DSIBankAccount = 0x005c002f,
			/// <summary>
			/// Part of address card is registered to
			/// </summary>
			CardAddressArea = 0x005c0030,
			/// <summary>
			/// Part of address card is registered to
			/// </summary>
			CardAddressTown = 0x005c0031,
			/// <summary>
			/// Part of address card is registered to
			/// </summary>
			CardAddressCounty = 0x005c0032,
			/// <summary>
			/// Part of address card is registered to
			/// </summary>
			CardAddressCountryK = 0x005c0033,
			/// <summary>
			/// Which company did the transfer go to / come from
			/// </summary>
			Company = 0x005c0034,
		}
		#endregion
		public static string GetColumnName(Transfer.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case Transfer.Columns.K: return "K";
						case Transfer.Columns.Type: return "Type";
						case Transfer.Columns.Status: return "Status";
						case Transfer.Columns.Method: return "Method";
						case Transfer.Columns.UsrK: return "UsrK";
						case Transfer.Columns.PromoterK: return "PromoterK";
						case Transfer.Columns.ActionUsrK: return "ActionUsrK";
						case Transfer.Columns.Amount: return "Amount";
						case Transfer.Columns.DateTime: return "DateTime";
						case Transfer.Columns.DateTimeCreated: return "DateTimeCreated";
						case Transfer.Columns.DateTimeComplete: return "DateTimeComplete";
						case Transfer.Columns.ClientHost: return "ClientHost";
						case Transfer.Columns.CardName: return "CardName";
						case Transfer.Columns.CardAddress1: return "CardAddress1";
						case Transfer.Columns.CardPostcode: return "CardPostcode";
						case Transfer.Columns.CardSavedTransferK: return "CardSavedTransferK";
						case Transfer.Columns.CardNumberHash: return "CardNumberHash";
						case Transfer.Columns.CardNumberEnd: return "CardNumberEnd";
						case Transfer.Columns.CardType: return "CardType";
						case Transfer.Columns.CardStart: return "CardStart";
						case Transfer.Columns.CardExpires: return "CardExpires";
						case Transfer.Columns.CardIssue: return "CardIssue";
						case Transfer.Columns.CardCV2: return "CardCV2";
						case Transfer.Columns.CardSaved: return "CardSaved";
						case Transfer.Columns.BankAccountName: return "BankAccountName";
						case Transfer.Columns.BankName: return "BankName";
						case Transfer.Columns.BankSortCode: return "BankSortCode";
						case Transfer.Columns.BankAccountNumber: return "BankAccountNumber";
						case Transfer.Columns.BankTransferReference: return "BankTransferReference";
						case Transfer.Columns.CardResponseAuthCode: return "CardResponseAuthCode";
						case Transfer.Columns.CardResponseCv2Avs: return "CardResponseCv2Avs";
						case Transfer.Columns.CardResponseMessage: return "CardResponseMessage";
						case Transfer.Columns.CardResponseRespCode: return "CardResponseRespCode";
						case Transfer.Columns.CardResponseCode: return "CardResponseCode";
						case Transfer.Columns.CardResponseIsCv2Match: return "CardResponseIsCv2Match";
						case Transfer.Columns.CardResponseIsPostCodeMatch: return "CardResponseIsPostCodeMatch";
						case Transfer.Columns.CardResponseIsAddressMatch: return "CardResponseIsAddressMatch";
						case Transfer.Columns.CardResponseIsDataChecked: return "CardResponseIsDataChecked";
						case Transfer.Columns.Notes: return "Notes";
						case Transfer.Columns.IsFullyApplied: return "IsFullyApplied";
						case Transfer.Columns.Guid: return "Guid";
						case Transfer.Columns.TransferRefundedK: return "TransferRefundedK";
						case Transfer.Columns.RefundStatus: return "RefundStatus";
						case Transfer.Columns.DuplicateGuid: return "DuplicateGuid";
						case Transfer.Columns.ChequeReferenceNumber: return "ChequeReferenceNumber";
						case Transfer.Columns.CardDigits: return "CardDigits";
						case Transfer.Columns.DSIBankAccount: return "DSIBankAccount";
						case Transfer.Columns.CardAddressArea: return "CardAddressArea";
						case Transfer.Columns.CardAddressTown: return "CardAddressTown";
						case Transfer.Columns.CardAddressCounty: return "CardAddressCounty";
						case Transfer.Columns.CardAddressCountryK: return "CardAddressCountryK";
						case Transfer.Columns.Company: return "Company";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(Transfer.Columns columnEnum)
		{
			switch (columnEnum)
			{
																																																								default: return false;
			}
		}


		#region Common
 
		public Transfer(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);  }
		public Transfer()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.Transfer);
		}
		public Transfer(BobSet bs)
		{
			this.Bob = new Bob(bs.Table, bs);
		}
		public Transfer(int TransferK, IBob Parent, object Column)
			: this()
		{
			Bob.GetBobFromParent(TransferK, Parent.Bob, Column, TablesEnum.Transfer);
		}
		public Transfer(int TransferK)
			: this()
		{
			Bob.GetBobFromPrimaryKey(TransferK);
		}
		#endregion

	}
	#endregion
	#region TransferTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region Transfer
	/// <summary>
	/// Customer pays us using a credit card / card is refunded / customer transfers money into our bank acc
	/// </summary>
	[Serializable]
	public partial class Transfer 
	{
		
		#region Simple members
		/// <summary>
		/// Primary key
		/// </summary>
		public override int K
		{
			get { return (int)this[Transfer.Columns.K] as int? ?? 0 ; }
			set { this[Transfer.Columns.K] = value; }
		}
		/// <summary>
		/// Payment, Refund
		/// </summary>
		public override int Type
		{
			get { return (int)this[Transfer.Columns.Type]; }
			set { this[Transfer.Columns.Type] = value; }
		}
		/// <summary>
		/// Pending, Success, Cancelled
		/// </summary>
		public override int Status
		{
			get { return (int)this[Transfer.Columns.Status]; }
			set { this[Transfer.Columns.Status] = value; }
		}
		/// <summary>
		/// Card, Bank Transfer, Cheque, Cash
		/// </summary>
		public override int Method
		{
			get { return (int)this[Transfer.Columns.Method]; }
			set { this[Transfer.Columns.Method] = value; }
		}
		/// <summary>
		/// Link to the relevant user
		/// </summary>
		public override int UsrK
		{
			get { return (int)this[Transfer.Columns.UsrK]; }
			set { this[Transfer.Columns.UsrK] = value; }
		}
		/// <summary>
		/// Link to the promoter (if this is a promoter transfer)
		/// </summary>
		public override int PromoterK
		{
			get { return (int)this[Transfer.Columns.PromoterK]; }
			set { this[Transfer.Columns.PromoterK] = value; }
		}
		/// <summary>
		/// Link to the user that initiated this transfer (e.g. the admin user if it's a refund!)
		/// </summary>
		public override int ActionUsrK
		{
			get { return (int)this[Transfer.Columns.ActionUsrK]; }
			set { this[Transfer.Columns.ActionUsrK] = value; }
		}
		/// <summary>
		/// +ve for DSI receiving money, -ve for DSI paying out money
		/// </summary>
		public override decimal Amount
		{
			get { return (decimal)this[Transfer.Columns.Amount]; }
			set { this[Transfer.Columns.Amount] = value; }
		}
		/// <summary>
		/// Date / time the transfer was initiated / received
		/// </summary>
		public override DateTime DateTime
		{
			get { return (DateTime)this[Transfer.Columns.DateTime]; }
			set { this[Transfer.Columns.DateTime] = value; }
		}
		/// <summary>
		/// Date / time the transfer was created
		/// </summary>
		public override DateTime DateTimeCreated
		{
			get { return (DateTime)this[Transfer.Columns.DateTimeCreated]; }
			set { this[Transfer.Columns.DateTimeCreated] = value; }
		}
		/// <summary>
		/// Date / time the transfer was completed
		/// </summary>
		public override DateTime DateTimeComplete
		{
			get { return (DateTime)this[Transfer.Columns.DateTimeComplete]; }
			set { this[Transfer.Columns.DateTimeComplete] = value; }
		}
		/// <summary>
		/// IP address of the client machine
		/// </summary>
		public override string ClientHost
		{
			get { return (string)this[Transfer.Columns.ClientHost]; }
			set { this[Transfer.Columns.ClientHost] = value; }
		}
		/// <summary>
		/// for card payment - the billing name
		/// </summary>
		public override string CardName
		{
			get { return (string)this[Transfer.Columns.CardName]; }
			set { this[Transfer.Columns.CardName] = value; }
		}
		/// <summary>
		/// for card payment - the billing address (line 1)
		/// </summary>
		public override string CardAddress1
		{
			get { return (string)this[Transfer.Columns.CardAddress1]; }
			set { this[Transfer.Columns.CardAddress1] = value; }
		}
		/// <summary>
		/// for card payment - the billing postcode
		/// </summary>
		public override string CardPostcode
		{
			get { return (string)this[Transfer.Columns.CardPostcode]; }
			set { this[Transfer.Columns.CardPostcode] = value; }
		}
		/// <summary>
		/// This transfer used card details from an earlier transfer (saved card details or refund)
		/// </summary>
		public override int CardSavedTransferK
		{
			get { return (int)this[Transfer.Columns.CardSavedTransferK]; }
			set { this[Transfer.Columns.CardSavedTransferK] = value; }
		}
		/// <summary>
		/// Cryptographic hash of the card number
		/// </summary>
		public Guid	CardNumberHash
		{
			get{ return Cambro.Misc.Db.GuidConvertor(this[Transfer.Columns.CardNumberHash]);}		
			set{ this[Transfer.Columns.CardNumberHash] = new System.Data.SqlTypes.SqlGuid(value);}
		}
		/// <summary>
		/// Last 6 digits of the card number
		/// </summary>
		public override string CardNumberEnd
		{
			get { return (string)this[Transfer.Columns.CardNumberEnd]; }
			set { this[Transfer.Columns.CardNumberEnd] = value; }
		}
		/// <summary>
		/// Card issuer deduced from card number (e.g. Visa, Mastercard etc.)
		/// </summary>
		public override int CardType
		{
			get { return (int)this[Transfer.Columns.CardType]; }
			set { this[Transfer.Columns.CardType] = value; }
		}
		/// <summary>
		/// Card start date
		/// </summary>
		public override DateTime CardStart
		{
			get { return (DateTime)this[Transfer.Columns.CardStart]; }
			set { this[Transfer.Columns.CardStart] = value; }
		}
		/// <summary>
		/// Card expiry date
		/// </summary>
		public override DateTime CardExpires
		{
			get { return (DateTime)this[Transfer.Columns.CardExpires]; }
			set { this[Transfer.Columns.CardExpires] = value; }
		}
		/// <summary>
		/// Issue number
		/// </summary>
		public override int CardIssue
		{
			get { return (int)this[Transfer.Columns.CardIssue]; }
			set { this[Transfer.Columns.CardIssue] = value; }
		}
		/// <summary>
		/// Card CV2 number
		/// </summary>
		public override string CardCV2
		{
			get { return (string)this[Transfer.Columns.CardCV2]; }
			set { this[Transfer.Columns.CardCV2] = value; }
		}
		/// <summary>
		/// Is the card saved for further use?
		/// </summary>
		public override bool CardSaved
		{
			get { return (bool)this[Transfer.Columns.CardSaved]; }
			set { this[Transfer.Columns.CardSaved] = value; }
		}
		/// <summary>
		/// The account name - e.g. Uprising Clubs Limited
		/// </summary>
		public override string BankAccountName
		{
			get { return (string)this[Transfer.Columns.BankAccountName]; }
			set { this[Transfer.Columns.BankAccountName] = value; }
		}
		/// <summary>
		/// The bank name - e.g. Lloyds
		/// </summary>
		public override string BankName
		{
			get { return (string)this[Transfer.Columns.BankName]; }
			set { this[Transfer.Columns.BankName] = value; }
		}
		/// <summary>
		/// Sort code
		/// </summary>
		public override string BankSortCode
		{
			get { return (string)this[Transfer.Columns.BankSortCode]; }
			set { this[Transfer.Columns.BankSortCode] = value; }
		}
		/// <summary>
		/// Account number
		/// </summary>
		public override string BankAccountNumber
		{
			get { return (string)this[Transfer.Columns.BankAccountNumber]; }
			set { this[Transfer.Columns.BankAccountNumber] = value; }
		}
		/// <summary>
		/// The reference/comment added to the transfer
		/// </summary>
		public override string BankTransferReference
		{
			get { return (string)this[Transfer.Columns.BankTransferReference]; }
			set { this[Transfer.Columns.BankTransferReference] = value; }
		}
		/// <summary>
		/// Only when Status=Success.The bank's authorisation code for your information only, do not show to customer.
		/// </summary>
		public override string CardResponseAuthCode
		{
			get { return (string)this[Transfer.Columns.CardResponseAuthCode]; }
			set { this[Transfer.Columns.CardResponseAuthCode] = value; }
		}
		/// <summary>
		/// The Apacs approved text that is supplied as a result of the CV2 and AVS anti-Fraud checks. There are five core values defined, these are ALL MATCH, SECURITY CODE MATCH ONLY, ADDRESS MATCH ONLY, NO DATA MATCHES and DATA NOT CHECKED. With these core codes an address is only understood to match if and only if both the address proper and the postcode match at the same time. This is a little strict for some people so the following codes have been introduced too : PARTIAL ADDRESS MATCH / POSTCODE, PARTIAL ADDRESS MATCH / ADDRESS, SECURITY CODE MATCH / POSTCODE, SECURITY CODE MATCH / ADDRESS. Codes are only supplied when CV2 and/or Billing Address data is supplied, it is in your interests to supply this data to us. Note that at present all issuers should be issuing new cards with a CV2 security code on them however the AVS checks will only work with UK issued cards. Also note that Switch have not yet implemented these checks (but the cards should have the CV2 security code on them nevertheless). 
		/// </summary>
		public override string CardResponseCv2Avs
		{
			get { return (string)this[Transfer.Columns.CardResponseCv2Avs]; }
			set { this[Transfer.Columns.CardResponseCv2Avs] = value; }
		}
		/// <summary>
		/// Only when Status=Failed. The bank's failure message for your information only, do not show to customer.
		/// </summary>
		public override string CardResponseMessage
		{
			get { return (string)this[Transfer.Columns.CardResponseMessage]; }
			set { this[Transfer.Columns.CardResponseMessage] = value; }
		}
		/// <summary>
		/// Only when Status=Failed and CardResponseCode='N'. The bank's failure code for your information only, do not show to customer. 2 or 83 : referral, 5 or 54 : Not Authorised, 30 : general error (retrying after 1 minute may succeed, depending on error)
		/// </summary>
		public override string CardResponseRespCode
		{
			get { return (string)this[Transfer.Columns.CardResponseRespCode]; }
			set { this[Transfer.Columns.CardResponseRespCode] = value; }
		}
		/// <summary>
		/// The code field is a short code giving extensive details of failure states. It is of particular use to SECBatch/SECVPN users. Note : preauth checks can have several errors, e.g. P:NEC means the name, expiry date and card number fields are all invalid or not supplied.
		/// </summary>
		public override string CardResponseCode
		{
			get { return (string)this[Transfer.Columns.CardResponseCode]; }
			set { this[Transfer.Columns.CardResponseCode] = value; }
		}
		/// <summary>
		/// Flag to mark results from CV2 Fraud check
		/// </summary>
		public override bool CardResponseIsCv2Match
		{
			get { return (bool)this[Transfer.Columns.CardResponseIsCv2Match]; }
			set { this[Transfer.Columns.CardResponseIsCv2Match] = value; }
		}
		/// <summary>
		/// Flag to mark results from Post Code Fraud check
		/// </summary>
		public override bool CardResponseIsPostCodeMatch
		{
			get { return (bool)this[Transfer.Columns.CardResponseIsPostCodeMatch]; }
			set { this[Transfer.Columns.CardResponseIsPostCodeMatch] = value; }
		}
		/// <summary>
		/// Flag to mark results from Address Fraud check
		/// </summary>
		public override bool CardResponseIsAddressMatch
		{
			get { return (bool)this[Transfer.Columns.CardResponseIsAddressMatch]; }
			set { this[Transfer.Columns.CardResponseIsAddressMatch] = value; }
		}
		/// <summary>
		/// Flag to mark if fraud check was enforced
		/// </summary>
		public override bool CardResponseIsDataChecked
		{
			get { return (bool)this[Transfer.Columns.CardResponseIsDataChecked]; }
			set { this[Transfer.Columns.CardResponseIsDataChecked] = value; }
		}
		/// <summary>
		/// Additional Notes
		/// </summary>
		public override string Notes
		{
			get { return (string)this[Transfer.Columns.Notes]; }
			set { this[Transfer.Columns.Notes] = value; }
		}
		/// <summary>
		/// This flag is to be set when the sum of InvoiceTransfers amounts = Transfer.Amount.  It will facilitate faster / easier searches
		/// </summary>
		public override bool IsFullyApplied
		{
			get { return (bool)this[Transfer.Columns.IsFullyApplied]; }
			set { this[Transfer.Columns.IsFullyApplied] = value; }
		}
		/// <summary>
		/// The guid of the transfer.  Allows unique identifier to be assigned prior to saving to the db
		/// </summary>
		public Guid	Guid
		{
			get{ return Cambro.Misc.Db.GuidConvertor(this[Transfer.Columns.Guid]);}		
			set{ this[Transfer.Columns.Guid] = new System.Data.SqlTypes.SqlGuid(value);}
		}
		/// <summary>
		/// Transfer K of transfer that this has refunded
		/// </summary>
		public override int TransferRefundedK
		{
			get { return (int)this[Transfer.Columns.TransferRefundedK]; }
			set { this[Transfer.Columns.TransferRefundedK] = value; }
		}
		/// <summary>
		/// Not Refunded, Partial Refund, Full Refund
		/// </summary>
		public override int RefundStatus
		{
			get { return (int)this[Transfer.Columns.RefundStatus]; }
			set { this[Transfer.Columns.RefundStatus] = value; }
		}
		/// <summary>
		/// Guid to catch duplicate on save
		/// </summary>
		public Guid	DuplicateGuid
		{
			get{ return Cambro.Misc.Db.GuidConvertor(this[Transfer.Columns.DuplicateGuid]);}		
			set{ this[Transfer.Columns.DuplicateGuid] = new System.Data.SqlTypes.SqlGuid(value);}
		}
		/// <summary>
		/// The cheque reference number
		/// </summary>
		public override string ChequeReferenceNumber
		{
			get { return (string)this[Transfer.Columns.ChequeReferenceNumber]; }
			set { this[Transfer.Columns.ChequeReferenceNumber] = value; }
		}
		/// <summary>
		/// Number of digits in the card number
		/// </summary>
		public override int CardDigits
		{
			get { return (int)this[Transfer.Columns.CardDigits]; }
			set { this[Transfer.Columns.CardDigits] = value; }
		}
		/// <summary>
		/// Which DSI bank account was used in this transfer. DSI Current account = 1, DSI Client account = 2
		/// </summary>
		public override int DSIBankAccount
		{
			get { return (int)this[Transfer.Columns.DSIBankAccount]; }
			set { this[Transfer.Columns.DSIBankAccount] = value; }
		}
		/// <summary>
		/// Part of address card is registered to
		/// </summary>
		public override string CardAddressArea
		{
			get { return (string)this[Transfer.Columns.CardAddressArea]; }
			set { this[Transfer.Columns.CardAddressArea] = value; }
		}
		/// <summary>
		/// Part of address card is registered to
		/// </summary>
		public override string CardAddressTown
		{
			get { return (string)this[Transfer.Columns.CardAddressTown]; }
			set { this[Transfer.Columns.CardAddressTown] = value; }
		}
		/// <summary>
		/// Part of address card is registered to
		/// </summary>
		public override string CardAddressCounty
		{
			get { return (string)this[Transfer.Columns.CardAddressCounty]; }
			set { this[Transfer.Columns.CardAddressCounty] = value; }
		}
		/// <summary>
		/// Part of address card is registered to
		/// </summary>
		public override int CardAddressCountryK
		{
			get { return (int)this[Transfer.Columns.CardAddressCountryK]; }
			set { this[Transfer.Columns.CardAddressCountryK] = value; }
		}
		/// <summary>
		/// Which company did the transfer go to / come from
		/// </summary>
		public override int Company
		{
			get { return (int)this[Transfer.Columns.Company]; }
			set { this[Transfer.Columns.Company] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildTransfers
	{
		CachedSqlSelect<Transfer> ChildTransfers();
		CachedSqlSelect<Transfer> ChildTransfers(Q where);
		CachedSqlSelect<Transfer> ChildTransfers(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<Transfer> ChildTransfers(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class Transfer 
	 : 
	Bobs.ChildInterfaces.IHasChildBankExports
	,
	Bobs.ChildInterfaces.IHasChildInvoiceTransfers
		{
			public CachedSqlSelect<BankExport> ChildBankExports()
		{
			return this.ChildBankExports(null, null);
		}
		public CachedSqlSelect<BankExport> ChildBankExports(Q where)
		{
			return this.ChildBankExports(where, null);
		}
		public CachedSqlSelect<BankExport> ChildBankExports(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildBankExports(null, orderBy);
		}
		public CachedSqlSelect<BankExport> ChildBankExports(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<BankExport>
			(
				new Children<BankExport>
				(
					TablesEnum.Transfer, 
					this.K, 
					TablesEnum.BankExport, 
					dr => 
					{ 
						BankExport newBankExport = new BankExport(); 
						newBankExport.Initialise(dr); 
						return newBankExport;
					},
					"9471DF4D",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<InvoiceTransfer> ChildInvoiceTransfers()
		{
			return this.ChildInvoiceTransfers(null, null);
		}
		public CachedSqlSelect<InvoiceTransfer> ChildInvoiceTransfers(Q where)
		{
			return this.ChildInvoiceTransfers(where, null);
		}
		public CachedSqlSelect<InvoiceTransfer> ChildInvoiceTransfers(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildInvoiceTransfers(null, orderBy);
		}
		public CachedSqlSelect<InvoiceTransfer> ChildInvoiceTransfers(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<InvoiceTransfer>
			(
				new Children<InvoiceTransfer>
				(
					TablesEnum.Transfer, 
					this.K, 
					TablesEnum.InvoiceTransfer, 
					dr => 
					{ 
						InvoiceTransfer newInvoiceTransfer = new InvoiceTransfer(); 
						newInvoiceTransfer.Initialise(dr); 
						return newInvoiceTransfer;
					},
					"D75AE2A5",
					where,
					orderBy
				)
			);
		}
		}

	#region TransferDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region TransferDataHolder
	/// <summary>
	/// Customer pays us using a credit card / card is refunded / customer transfers money into our bank accDataHolder
	/// </summary>
	[Serializable]
	public partial class TransferDataHolder : DataHolder<Transfer>
	{
		Transfer dataHolder;
		[NonSerializedAttribute] Transfer bob;

		public TransferDataHolder()
		{
			this.dataHolder = new Transfer();
		}
		
		void CopyValues(Transfer source, Transfer destination)
		{
			destination[Bobs.Transfer.Columns.K] = source[Bobs.Transfer.Columns.K];
			destination[Bobs.Transfer.Columns.Type] = source[Bobs.Transfer.Columns.Type];
			destination[Bobs.Transfer.Columns.Status] = source[Bobs.Transfer.Columns.Status];
			destination[Bobs.Transfer.Columns.Method] = source[Bobs.Transfer.Columns.Method];
			destination[Bobs.Transfer.Columns.UsrK] = source[Bobs.Transfer.Columns.UsrK];
			destination[Bobs.Transfer.Columns.PromoterK] = source[Bobs.Transfer.Columns.PromoterK];
			destination[Bobs.Transfer.Columns.ActionUsrK] = source[Bobs.Transfer.Columns.ActionUsrK];
			destination[Bobs.Transfer.Columns.Amount] = source[Bobs.Transfer.Columns.Amount];
			destination[Bobs.Transfer.Columns.DateTime] = source[Bobs.Transfer.Columns.DateTime];
			destination[Bobs.Transfer.Columns.DateTimeCreated] = source[Bobs.Transfer.Columns.DateTimeCreated];
			destination[Bobs.Transfer.Columns.DateTimeComplete] = source[Bobs.Transfer.Columns.DateTimeComplete];
			destination[Bobs.Transfer.Columns.ClientHost] = source[Bobs.Transfer.Columns.ClientHost];
			destination[Bobs.Transfer.Columns.CardName] = source[Bobs.Transfer.Columns.CardName];
			destination[Bobs.Transfer.Columns.CardAddress1] = source[Bobs.Transfer.Columns.CardAddress1];
			destination[Bobs.Transfer.Columns.CardPostcode] = source[Bobs.Transfer.Columns.CardPostcode];
			destination[Bobs.Transfer.Columns.CardSavedTransferK] = source[Bobs.Transfer.Columns.CardSavedTransferK];
			destination[Bobs.Transfer.Columns.CardNumberHash] = source[Bobs.Transfer.Columns.CardNumberHash];
			destination[Bobs.Transfer.Columns.CardNumberEnd] = source[Bobs.Transfer.Columns.CardNumberEnd];
			destination[Bobs.Transfer.Columns.CardType] = source[Bobs.Transfer.Columns.CardType];
			destination[Bobs.Transfer.Columns.CardStart] = source[Bobs.Transfer.Columns.CardStart];
			destination[Bobs.Transfer.Columns.CardExpires] = source[Bobs.Transfer.Columns.CardExpires];
			destination[Bobs.Transfer.Columns.CardIssue] = source[Bobs.Transfer.Columns.CardIssue];
			destination[Bobs.Transfer.Columns.CardCV2] = source[Bobs.Transfer.Columns.CardCV2];
			destination[Bobs.Transfer.Columns.CardSaved] = source[Bobs.Transfer.Columns.CardSaved];
			destination[Bobs.Transfer.Columns.BankAccountName] = source[Bobs.Transfer.Columns.BankAccountName];
			destination[Bobs.Transfer.Columns.BankName] = source[Bobs.Transfer.Columns.BankName];
			destination[Bobs.Transfer.Columns.BankSortCode] = source[Bobs.Transfer.Columns.BankSortCode];
			destination[Bobs.Transfer.Columns.BankAccountNumber] = source[Bobs.Transfer.Columns.BankAccountNumber];
			destination[Bobs.Transfer.Columns.BankTransferReference] = source[Bobs.Transfer.Columns.BankTransferReference];
			destination[Bobs.Transfer.Columns.CardResponseAuthCode] = source[Bobs.Transfer.Columns.CardResponseAuthCode];
			destination[Bobs.Transfer.Columns.CardResponseCv2Avs] = source[Bobs.Transfer.Columns.CardResponseCv2Avs];
			destination[Bobs.Transfer.Columns.CardResponseMessage] = source[Bobs.Transfer.Columns.CardResponseMessage];
			destination[Bobs.Transfer.Columns.CardResponseRespCode] = source[Bobs.Transfer.Columns.CardResponseRespCode];
			destination[Bobs.Transfer.Columns.CardResponseCode] = source[Bobs.Transfer.Columns.CardResponseCode];
			destination[Bobs.Transfer.Columns.CardResponseIsCv2Match] = source[Bobs.Transfer.Columns.CardResponseIsCv2Match];
			destination[Bobs.Transfer.Columns.CardResponseIsPostCodeMatch] = source[Bobs.Transfer.Columns.CardResponseIsPostCodeMatch];
			destination[Bobs.Transfer.Columns.CardResponseIsAddressMatch] = source[Bobs.Transfer.Columns.CardResponseIsAddressMatch];
			destination[Bobs.Transfer.Columns.CardResponseIsDataChecked] = source[Bobs.Transfer.Columns.CardResponseIsDataChecked];
			destination[Bobs.Transfer.Columns.Notes] = source[Bobs.Transfer.Columns.Notes];
			destination[Bobs.Transfer.Columns.IsFullyApplied] = source[Bobs.Transfer.Columns.IsFullyApplied];
			destination[Bobs.Transfer.Columns.Guid] = source[Bobs.Transfer.Columns.Guid];
			destination[Bobs.Transfer.Columns.TransferRefundedK] = source[Bobs.Transfer.Columns.TransferRefundedK];
			destination[Bobs.Transfer.Columns.RefundStatus] = source[Bobs.Transfer.Columns.RefundStatus];
			destination[Bobs.Transfer.Columns.DuplicateGuid] = source[Bobs.Transfer.Columns.DuplicateGuid];
			destination[Bobs.Transfer.Columns.ChequeReferenceNumber] = source[Bobs.Transfer.Columns.ChequeReferenceNumber];
			destination[Bobs.Transfer.Columns.CardDigits] = source[Bobs.Transfer.Columns.CardDigits];
			destination[Bobs.Transfer.Columns.DSIBankAccount] = source[Bobs.Transfer.Columns.DSIBankAccount];
			destination[Bobs.Transfer.Columns.CardAddressArea] = source[Bobs.Transfer.Columns.CardAddressArea];
			destination[Bobs.Transfer.Columns.CardAddressTown] = source[Bobs.Transfer.Columns.CardAddressTown];
			destination[Bobs.Transfer.Columns.CardAddressCounty] = source[Bobs.Transfer.Columns.CardAddressCounty];
			destination[Bobs.Transfer.Columns.CardAddressCountryK] = source[Bobs.Transfer.Columns.CardAddressCountryK];
			destination[Bobs.Transfer.Columns.Company] = source[Bobs.Transfer.Columns.Company];
		}
		
		public TransferDataHolder(Transfer bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// Primary key
		/// </summary>
		public int K
		{
			get { return dataHolder.K; }
			set { this.dataHolder.K = value; }
		}
		/// <summary>
		/// Payment, Refund
		/// </summary>
		public int Type
		{
			get { return dataHolder.Type; }
			set { this.dataHolder.Type = value; }
		}
		/// <summary>
		/// Pending, Success, Cancelled
		/// </summary>
		public int Status
		{
			get { return dataHolder.Status; }
			set { this.dataHolder.Status = value; }
		}
		/// <summary>
		/// Card, Bank Transfer, Cheque, Cash
		/// </summary>
		public int Method
		{
			get { return dataHolder.Method; }
			set { this.dataHolder.Method = value; }
		}
		/// <summary>
		/// Link to the relevant user
		/// </summary>
		public int UsrK
		{
			get { return dataHolder.UsrK; }
			set { this.dataHolder.UsrK = value; }
		}
		/// <summary>
		/// Link to the promoter (if this is a promoter transfer)
		/// </summary>
		public int PromoterK
		{
			get { return dataHolder.PromoterK; }
			set { this.dataHolder.PromoterK = value; }
		}
		/// <summary>
		/// Link to the user that initiated this transfer (e.g. the admin user if it's a refund!)
		/// </summary>
		public int ActionUsrK
		{
			get { return dataHolder.ActionUsrK; }
			set { this.dataHolder.ActionUsrK = value; }
		}
		/// <summary>
		/// +ve for DSI receiving money, -ve for DSI paying out money
		/// </summary>
		public decimal Amount
		{
			get { return dataHolder.Amount; }
			set { this.dataHolder.Amount = value; }
		}
		/// <summary>
		/// Date / time the transfer was initiated / received
		/// </summary>
		public DateTime DateTime
		{
			get { return dataHolder.DateTime; }
			set { this.dataHolder.DateTime = value; }
		}
		/// <summary>
		/// Date / time the transfer was created
		/// </summary>
		public DateTime DateTimeCreated
		{
			get { return dataHolder.DateTimeCreated; }
			set { this.dataHolder.DateTimeCreated = value; }
		}
		/// <summary>
		/// Date / time the transfer was completed
		/// </summary>
		public DateTime DateTimeComplete
		{
			get { return dataHolder.DateTimeComplete; }
			set { this.dataHolder.DateTimeComplete = value; }
		}
		/// <summary>
		/// IP address of the client machine
		/// </summary>
		public string ClientHost
		{
			get { return dataHolder.ClientHost; }
			set { this.dataHolder.ClientHost = value; }
		}
		/// <summary>
		/// for card payment - the billing name
		/// </summary>
		public string CardName
		{
			get { return dataHolder.CardName; }
			set { this.dataHolder.CardName = value; }
		}
		/// <summary>
		/// for card payment - the billing address (line 1)
		/// </summary>
		public string CardAddress1
		{
			get { return dataHolder.CardAddress1; }
			set { this.dataHolder.CardAddress1 = value; }
		}
		/// <summary>
		/// for card payment - the billing postcode
		/// </summary>
		public string CardPostcode
		{
			get { return dataHolder.CardPostcode; }
			set { this.dataHolder.CardPostcode = value; }
		}
		/// <summary>
		/// This transfer used card details from an earlier transfer (saved card details or refund)
		/// </summary>
		public int CardSavedTransferK
		{
			get { return dataHolder.CardSavedTransferK; }
			set { this.dataHolder.CardSavedTransferK = value; }
		}
		/// <summary>
		/// Cryptographic hash of the card number
		/// </summary>
		public Guid CardNumberHash
		{
			get { return dataHolder.CardNumberHash; }
			set { this.dataHolder.CardNumberHash = value; }
		}
		/// <summary>
		/// Last 6 digits of the card number
		/// </summary>
		public string CardNumberEnd
		{
			get { return dataHolder.CardNumberEnd; }
			set { this.dataHolder.CardNumberEnd = value; }
		}
		/// <summary>
		/// Card issuer deduced from card number (e.g. Visa, Mastercard etc.)
		/// </summary>
		public int CardType
		{
			get { return dataHolder.CardType; }
			set { this.dataHolder.CardType = value; }
		}
		/// <summary>
		/// Card start date
		/// </summary>
		public DateTime CardStart
		{
			get { return dataHolder.CardStart; }
			set { this.dataHolder.CardStart = value; }
		}
		/// <summary>
		/// Card expiry date
		/// </summary>
		public DateTime CardExpires
		{
			get { return dataHolder.CardExpires; }
			set { this.dataHolder.CardExpires = value; }
		}
		/// <summary>
		/// Issue number
		/// </summary>
		public int CardIssue
		{
			get { return dataHolder.CardIssue; }
			set { this.dataHolder.CardIssue = value; }
		}
		/// <summary>
		/// Card CV2 number
		/// </summary>
		public string CardCV2
		{
			get { return dataHolder.CardCV2; }
			set { this.dataHolder.CardCV2 = value; }
		}
		/// <summary>
		/// Is the card saved for further use?
		/// </summary>
		public bool CardSaved
		{
			get { return dataHolder.CardSaved; }
			set { this.dataHolder.CardSaved = value; }
		}
		/// <summary>
		/// The account name - e.g. Uprising Clubs Limited
		/// </summary>
		public string BankAccountName
		{
			get { return dataHolder.BankAccountName; }
			set { this.dataHolder.BankAccountName = value; }
		}
		/// <summary>
		/// The bank name - e.g. Lloyds
		/// </summary>
		public string BankName
		{
			get { return dataHolder.BankName; }
			set { this.dataHolder.BankName = value; }
		}
		/// <summary>
		/// Sort code
		/// </summary>
		public string BankSortCode
		{
			get { return dataHolder.BankSortCode; }
			set { this.dataHolder.BankSortCode = value; }
		}
		/// <summary>
		/// Account number
		/// </summary>
		public string BankAccountNumber
		{
			get { return dataHolder.BankAccountNumber; }
			set { this.dataHolder.BankAccountNumber = value; }
		}
		/// <summary>
		/// The reference/comment added to the transfer
		/// </summary>
		public string BankTransferReference
		{
			get { return dataHolder.BankTransferReference; }
			set { this.dataHolder.BankTransferReference = value; }
		}
		/// <summary>
		/// Only when Status=Success.The bank's authorisation code for your information only, do not show to customer.
		/// </summary>
		public string CardResponseAuthCode
		{
			get { return dataHolder.CardResponseAuthCode; }
			set { this.dataHolder.CardResponseAuthCode = value; }
		}
		/// <summary>
		/// The Apacs approved text that is supplied as a result of the CV2 and AVS anti-Fraud checks. There are five core values defined, these are ALL MATCH, SECURITY CODE MATCH ONLY, ADDRESS MATCH ONLY, NO DATA MATCHES and DATA NOT CHECKED. With these core codes an address is only understood to match if and only if both the address proper and the postcode match at the same time. This is a little strict for some people so the following codes have been introduced too : PARTIAL ADDRESS MATCH / POSTCODE, PARTIAL ADDRESS MATCH / ADDRESS, SECURITY CODE MATCH / POSTCODE, SECURITY CODE MATCH / ADDRESS. Codes are only supplied when CV2 and/or Billing Address data is supplied, it is in your interests to supply this data to us. Note that at present all issuers should be issuing new cards with a CV2 security code on them however the AVS checks will only work with UK issued cards. Also note that Switch have not yet implemented these checks (but the cards should have the CV2 security code on them nevertheless). 
		/// </summary>
		public string CardResponseCv2Avs
		{
			get { return dataHolder.CardResponseCv2Avs; }
			set { this.dataHolder.CardResponseCv2Avs = value; }
		}
		/// <summary>
		/// Only when Status=Failed. The bank's failure message for your information only, do not show to customer.
		/// </summary>
		public string CardResponseMessage
		{
			get { return dataHolder.CardResponseMessage; }
			set { this.dataHolder.CardResponseMessage = value; }
		}
		/// <summary>
		/// Only when Status=Failed and CardResponseCode='N'. The bank's failure code for your information only, do not show to customer. 2 or 83 : referral, 5 or 54 : Not Authorised, 30 : general error (retrying after 1 minute may succeed, depending on error)
		/// </summary>
		public string CardResponseRespCode
		{
			get { return dataHolder.CardResponseRespCode; }
			set { this.dataHolder.CardResponseRespCode = value; }
		}
		/// <summary>
		/// The code field is a short code giving extensive details of failure states. It is of particular use to SECBatch/SECVPN users. Note : preauth checks can have several errors, e.g. P:NEC means the name, expiry date and card number fields are all invalid or not supplied.
		/// </summary>
		public string CardResponseCode
		{
			get { return dataHolder.CardResponseCode; }
			set { this.dataHolder.CardResponseCode = value; }
		}
		/// <summary>
		/// Flag to mark results from CV2 Fraud check
		/// </summary>
		public bool CardResponseIsCv2Match
		{
			get { return dataHolder.CardResponseIsCv2Match; }
			set { this.dataHolder.CardResponseIsCv2Match = value; }
		}
		/// <summary>
		/// Flag to mark results from Post Code Fraud check
		/// </summary>
		public bool CardResponseIsPostCodeMatch
		{
			get { return dataHolder.CardResponseIsPostCodeMatch; }
			set { this.dataHolder.CardResponseIsPostCodeMatch = value; }
		}
		/// <summary>
		/// Flag to mark results from Address Fraud check
		/// </summary>
		public bool CardResponseIsAddressMatch
		{
			get { return dataHolder.CardResponseIsAddressMatch; }
			set { this.dataHolder.CardResponseIsAddressMatch = value; }
		}
		/// <summary>
		/// Flag to mark if fraud check was enforced
		/// </summary>
		public bool CardResponseIsDataChecked
		{
			get { return dataHolder.CardResponseIsDataChecked; }
			set { this.dataHolder.CardResponseIsDataChecked = value; }
		}
		/// <summary>
		/// Additional Notes
		/// </summary>
		public string Notes
		{
			get { return dataHolder.Notes; }
			set { this.dataHolder.Notes = value; }
		}
		/// <summary>
		/// This flag is to be set when the sum of InvoiceTransfers amounts = Transfer.Amount.  It will facilitate faster / easier searches
		/// </summary>
		public bool IsFullyApplied
		{
			get { return dataHolder.IsFullyApplied; }
			set { this.dataHolder.IsFullyApplied = value; }
		}
		/// <summary>
		/// The guid of the transfer.  Allows unique identifier to be assigned prior to saving to the db
		/// </summary>
		public Guid Guid
		{
			get { return dataHolder.Guid; }
			set { this.dataHolder.Guid = value; }
		}
		/// <summary>
		/// Transfer K of transfer that this has refunded
		/// </summary>
		public int TransferRefundedK
		{
			get { return dataHolder.TransferRefundedK; }
			set { this.dataHolder.TransferRefundedK = value; }
		}
		/// <summary>
		/// Not Refunded, Partial Refund, Full Refund
		/// </summary>
		public int RefundStatus
		{
			get { return dataHolder.RefundStatus; }
			set { this.dataHolder.RefundStatus = value; }
		}
		/// <summary>
		/// Guid to catch duplicate on save
		/// </summary>
		public Guid DuplicateGuid
		{
			get { return dataHolder.DuplicateGuid; }
			set { this.dataHolder.DuplicateGuid = value; }
		}
		/// <summary>
		/// The cheque reference number
		/// </summary>
		public string ChequeReferenceNumber
		{
			get { return dataHolder.ChequeReferenceNumber; }
			set { this.dataHolder.ChequeReferenceNumber = value; }
		}
		/// <summary>
		/// Number of digits in the card number
		/// </summary>
		public int CardDigits
		{
			get { return dataHolder.CardDigits; }
			set { this.dataHolder.CardDigits = value; }
		}
		/// <summary>
		/// Which DSI bank account was used in this transfer. DSI Current account = 1, DSI Client account = 2
		/// </summary>
		public int DSIBankAccount
		{
			get { return dataHolder.DSIBankAccount; }
			set { this.dataHolder.DSIBankAccount = value; }
		}
		/// <summary>
		/// Part of address card is registered to
		/// </summary>
		public string CardAddressArea
		{
			get { return dataHolder.CardAddressArea; }
			set { this.dataHolder.CardAddressArea = value; }
		}
		/// <summary>
		/// Part of address card is registered to
		/// </summary>
		public string CardAddressTown
		{
			get { return dataHolder.CardAddressTown; }
			set { this.dataHolder.CardAddressTown = value; }
		}
		/// <summary>
		/// Part of address card is registered to
		/// </summary>
		public string CardAddressCounty
		{
			get { return dataHolder.CardAddressCounty; }
			set { this.dataHolder.CardAddressCounty = value; }
		}
		/// <summary>
		/// Part of address card is registered to
		/// </summary>
		public int CardAddressCountryK
		{
			get { return dataHolder.CardAddressCountryK; }
			set { this.dataHolder.CardAddressCountryK = value; }
		}
		/// <summary>
		/// Which company did the transfer go to / come from
		/// </summary>
		public int Company
		{
			get { return dataHolder.Company; }
			set { this.dataHolder.Company = value; }
		}
		#endregion
		public Transfer Transfer
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new Transfer(K);
					}
					else
					{
						bob = new Transfer();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region TransferSet
	public partial class TransferSet : BobSet, IEnumerable<Transfer>
	{
		public TransferSet(Query query) : base(query) { }

		public Transfer this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new Transfer(this);
					((Transfer)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (Transfer)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new TransferTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<Transfer> ToList()
		{
			List<Transfer> list = new List<Transfer>();
			foreach (Transfer item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<Transfer> Members

		public new IEnumerator<Transfer> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region TransferTableDef
	public class TransferTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "Transfer";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "B7FD3576";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return Transfer.GetColumnName((Transfer.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.Transfer;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return true;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return Transfer.Columns.K;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			Transfer.Columns c = (Transfer.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case Transfer.Columns.K: ColumnStore[i] = new ColumnDef(c, "K", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey | SqlColumnFlag.AutoNumber, null); break;
					case Transfer.Columns.Type: ColumnStore[i] = new ColumnDef(c, "Type", SqlDbType.Int, 0); break;
					case Transfer.Columns.Status: ColumnStore[i] = new ColumnDef(c, "Status", SqlDbType.Int, 0); break;
					case Transfer.Columns.Method: ColumnStore[i] = new ColumnDef(c, "Method", SqlDbType.Int, 0); break;
					case Transfer.Columns.UsrK: ColumnStore[i] = new ColumnDef(c, "UsrK", SqlDbType.Int, 0); break;
					case Transfer.Columns.PromoterK: ColumnStore[i] = new ColumnDef(c, "PromoterK", SqlDbType.Int, 0); break;
					case Transfer.Columns.ActionUsrK: ColumnStore[i] = new ColumnDef(c, "ActionUsrK", SqlDbType.Int, 0); break;
					case Transfer.Columns.Amount: ColumnStore[i] = new ColumnDef(c, "Amount", SqlDbType.Decimal, 20, 0m); break;
					case Transfer.Columns.DateTime: ColumnStore[i] = new ColumnDef(c, "DateTime", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case Transfer.Columns.DateTimeCreated: ColumnStore[i] = new ColumnDef(c, "DateTimeCreated", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case Transfer.Columns.DateTimeComplete: ColumnStore[i] = new ColumnDef(c, "DateTimeComplete", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case Transfer.Columns.ClientHost: ColumnStore[i] = new ColumnDef(c, "ClientHost", SqlDbType.VarChar, 15, ""); break;
					case Transfer.Columns.CardName: ColumnStore[i] = new ColumnDef(c, "CardName", SqlDbType.VarChar, 150, ""); break;
					case Transfer.Columns.CardAddress1: ColumnStore[i] = new ColumnDef(c, "CardAddress1", SqlDbType.VarChar, 150, ""); break;
					case Transfer.Columns.CardPostcode: ColumnStore[i] = new ColumnDef(c, "CardPostcode", SqlDbType.VarChar, 150, ""); break;
					case Transfer.Columns.CardSavedTransferK: ColumnStore[i] = new ColumnDef(c, "CardSavedTransferK", SqlDbType.Int, 0); break;
					case Transfer.Columns.CardNumberHash: ColumnStore[i] = new ColumnDef(c, "CardNumberHash", SqlDbType.UniqueIdentifier, Guid.Empty); break;
					case Transfer.Columns.CardNumberEnd: ColumnStore[i] = new ColumnDef(c, "CardNumberEnd", SqlDbType.VarChar, 20, ""); break;
					case Transfer.Columns.CardType: ColumnStore[i] = new ColumnDef(c, "CardType", SqlDbType.Int, 0); break;
					case Transfer.Columns.CardStart: ColumnStore[i] = new ColumnDef(c, "CardStart", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case Transfer.Columns.CardExpires: ColumnStore[i] = new ColumnDef(c, "CardExpires", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case Transfer.Columns.CardIssue: ColumnStore[i] = new ColumnDef(c, "CardIssue", SqlDbType.Int, 0); break;
					case Transfer.Columns.CardCV2: ColumnStore[i] = new ColumnDef(c, "CardCV2", SqlDbType.VarChar, 5, ""); break;
					case Transfer.Columns.CardSaved: ColumnStore[i] = new ColumnDef(c, "CardSaved", SqlDbType.Bit, false); break;
					case Transfer.Columns.BankAccountName: ColumnStore[i] = new ColumnDef(c, "BankAccountName", SqlDbType.VarChar, ""); break;
					case Transfer.Columns.BankName: ColumnStore[i] = new ColumnDef(c, "BankName", SqlDbType.VarChar, ""); break;
					case Transfer.Columns.BankSortCode: ColumnStore[i] = new ColumnDef(c, "BankSortCode", SqlDbType.VarChar, ""); break;
					case Transfer.Columns.BankAccountNumber: ColumnStore[i] = new ColumnDef(c, "BankAccountNumber", SqlDbType.VarChar, ""); break;
					case Transfer.Columns.BankTransferReference: ColumnStore[i] = new ColumnDef(c, "BankTransferReference", SqlDbType.VarChar, ""); break;
					case Transfer.Columns.CardResponseAuthCode: ColumnStore[i] = new ColumnDef(c, "CardResponseAuthCode", SqlDbType.VarChar, ""); break;
					case Transfer.Columns.CardResponseCv2Avs: ColumnStore[i] = new ColumnDef(c, "CardResponseCv2Avs", SqlDbType.VarChar, ""); break;
					case Transfer.Columns.CardResponseMessage: ColumnStore[i] = new ColumnDef(c, "CardResponseMessage", SqlDbType.VarChar, 150, ""); break;
					case Transfer.Columns.CardResponseRespCode: ColumnStore[i] = new ColumnDef(c, "CardResponseRespCode", SqlDbType.VarChar, 10, ""); break;
					case Transfer.Columns.CardResponseCode: ColumnStore[i] = new ColumnDef(c, "CardResponseCode", SqlDbType.VarChar, 20, ""); break;
					case Transfer.Columns.CardResponseIsCv2Match: ColumnStore[i] = new ColumnDef(c, "CardResponseIsCv2Match", SqlDbType.Bit, false); break;
					case Transfer.Columns.CardResponseIsPostCodeMatch: ColumnStore[i] = new ColumnDef(c, "CardResponseIsPostCodeMatch", SqlDbType.Bit, false); break;
					case Transfer.Columns.CardResponseIsAddressMatch: ColumnStore[i] = new ColumnDef(c, "CardResponseIsAddressMatch", SqlDbType.Bit, false); break;
					case Transfer.Columns.CardResponseIsDataChecked: ColumnStore[i] = new ColumnDef(c, "CardResponseIsDataChecked", SqlDbType.Bit, false); break;
					case Transfer.Columns.Notes: ColumnStore[i] = new ColumnDef(c, "Notes", SqlDbType.Text, ""); break;
					case Transfer.Columns.IsFullyApplied: ColumnStore[i] = new ColumnDef(c, "IsFullyApplied", SqlDbType.Bit, false); break;
					case Transfer.Columns.Guid: ColumnStore[i] = new ColumnDef(c, "Guid", SqlDbType.UniqueIdentifier, Guid.Empty); break;
					case Transfer.Columns.TransferRefundedK: ColumnStore[i] = new ColumnDef(c, "TransferRefundedK", SqlDbType.Int, 0); break;
					case Transfer.Columns.RefundStatus: ColumnStore[i] = new ColumnDef(c, "RefundStatus", SqlDbType.Int, 0); break;
					case Transfer.Columns.DuplicateGuid: ColumnStore[i] = new ColumnDef(c, "DuplicateGuid", SqlDbType.UniqueIdentifier, Guid.Empty); break;
					case Transfer.Columns.ChequeReferenceNumber: ColumnStore[i] = new ColumnDef(c, "ChequeReferenceNumber", SqlDbType.VarChar, 20, ""); break;
					case Transfer.Columns.CardDigits: ColumnStore[i] = new ColumnDef(c, "CardDigits", SqlDbType.Int, 0); break;
					case Transfer.Columns.DSIBankAccount: ColumnStore[i] = new ColumnDef(c, "DSIBankAccount", SqlDbType.Int, 0); break;
					case Transfer.Columns.CardAddressArea: ColumnStore[i] = new ColumnDef(c, "CardAddressArea", SqlDbType.VarChar, ""); break;
					case Transfer.Columns.CardAddressTown: ColumnStore[i] = new ColumnDef(c, "CardAddressTown", SqlDbType.VarChar, ""); break;
					case Transfer.Columns.CardAddressCounty: ColumnStore[i] = new ColumnDef(c, "CardAddressCounty", SqlDbType.VarChar, ""); break;
					case Transfer.Columns.CardAddressCountryK: ColumnStore[i] = new ColumnDef(c, "CardAddressCountryK", SqlDbType.Int, 0); break;
					case Transfer.Columns.Company: ColumnStore[i] = new ColumnDef(c, "Company", SqlDbType.Int, 0); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(Transfer.Columns.K);
						InitColumn(Transfer.Columns.Type);
						InitColumn(Transfer.Columns.Status);
						InitColumn(Transfer.Columns.Method);
						InitColumn(Transfer.Columns.UsrK);
						InitColumn(Transfer.Columns.PromoterK);
						InitColumn(Transfer.Columns.ActionUsrK);
						InitColumn(Transfer.Columns.Amount);
						InitColumn(Transfer.Columns.DateTime);
						InitColumn(Transfer.Columns.DateTimeCreated);
						InitColumn(Transfer.Columns.DateTimeComplete);
						InitColumn(Transfer.Columns.ClientHost);
						InitColumn(Transfer.Columns.CardName);
						InitColumn(Transfer.Columns.CardAddress1);
						InitColumn(Transfer.Columns.CardPostcode);
						InitColumn(Transfer.Columns.CardSavedTransferK);
						InitColumn(Transfer.Columns.CardNumberHash);
						InitColumn(Transfer.Columns.CardNumberEnd);
						InitColumn(Transfer.Columns.CardType);
						InitColumn(Transfer.Columns.CardStart);
						InitColumn(Transfer.Columns.CardExpires);
						InitColumn(Transfer.Columns.CardIssue);
						InitColumn(Transfer.Columns.CardCV2);
						InitColumn(Transfer.Columns.CardSaved);
						InitColumn(Transfer.Columns.BankAccountName);
						InitColumn(Transfer.Columns.BankName);
						InitColumn(Transfer.Columns.BankSortCode);
						InitColumn(Transfer.Columns.BankAccountNumber);
						InitColumn(Transfer.Columns.BankTransferReference);
						InitColumn(Transfer.Columns.CardResponseAuthCode);
						InitColumn(Transfer.Columns.CardResponseCv2Avs);
						InitColumn(Transfer.Columns.CardResponseMessage);
						InitColumn(Transfer.Columns.CardResponseRespCode);
						InitColumn(Transfer.Columns.CardResponseCode);
						InitColumn(Transfer.Columns.CardResponseIsCv2Match);
						InitColumn(Transfer.Columns.CardResponseIsPostCodeMatch);
						InitColumn(Transfer.Columns.CardResponseIsAddressMatch);
						InitColumn(Transfer.Columns.CardResponseIsDataChecked);
						InitColumn(Transfer.Columns.Notes);
						InitColumn(Transfer.Columns.IsFullyApplied);
						InitColumn(Transfer.Columns.Guid);
						InitColumn(Transfer.Columns.TransferRefundedK);
						InitColumn(Transfer.Columns.RefundStatus);
						InitColumn(Transfer.Columns.DuplicateGuid);
						InitColumn(Transfer.Columns.ChequeReferenceNumber);
						InitColumn(Transfer.Columns.CardDigits);
						InitColumn(Transfer.Columns.DSIBankAccount);
						InitColumn(Transfer.Columns.CardAddressArea);
						InitColumn(Transfer.Columns.CardAddressTown);
						InitColumn(Transfer.Columns.CardAddressCounty);
						InitColumn(Transfer.Columns.CardAddressCountryK);
						InitColumn(Transfer.Columns.Company);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region Usr
	/// <summary>
	/// Each registered user of the system gets a record in this table.
	/// </summary>
	public partial class Usr : Model.Entities.Usr, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// Key
			/// </summary>
			K = 0x005d0001,
			/// <summary>
			/// Email
			/// </summary>
			Email = 0x005d0002,
			/// <summary>
			/// Password
			/// </summary>
			Password = 0x005d0003,
			/// <summary>
			/// The number of times the user has logged in
			/// </summary>
			LoginCount = 0x005d0004,
			/// <summary>
			/// Is the user an admin user?
			/// </summary>
			IsAdmin = 0x005d0005,
			/// <summary>
			/// Has the email address been verified?
			/// </summary>
			IsEmailVerified = 0x005d0006,
			/// <summary>
			/// Cropped image 80*80 for discussion board avatar etc.
			/// </summary>
			Pic = 0x005d0007,
			/// <summary>
			/// Filename of the original image
			/// </summary>
			PicOriginal = 0x005d0008,
			/// <summary>
			/// First name
			/// </summary>
			FirstName = 0x005d0009,
			/// <summary>
			/// Last name
			/// </summary>
			LastName = 0x005d000a,
			/// <summary>
			/// Nickname for the site
			/// </summary>
			NickName = 0x005d000b,
			/// <summary>
			/// Full mobile number including country code (e.g. 447971597702)
			/// </summary>
			Mobile = 0x005d000c,
			/// <summary>
			/// Country code of mobile number (e.g. 44)
			/// </summary>
			MobileCountryCode = 0x005d000d,
			/// <summary>
			/// Mobile number excluding country code and leading zero (e.g. 7971597702)
			/// </summary>
			MobileNumber = 0x005d000e,
			/// <summary>
			/// Send me Spotted emails
			/// </summary>
			SendSpottedEmails = 0x005d000f,
			/// <summary>
			/// Send me Spotted texts
			/// </summary>
			SendSpottedTexts = 0x005d0010,
			/// <summary>
			/// DontStayIn and its partners may send me emails about products I might like
			/// </summary>
			SendPartnerEmails = 0x005d0011,
			/// <summary>
			/// DontStayIn and its partners may send me texts about products I might like
			/// </summary>
			SendPartnerTexts = 0x005d0012,
			/// <summary>
			/// Used internally by the bulk email system
			/// </summary>
			UpdateData = 0x005d0013,
			/// <summary>
			/// Admin users may add a private comment to any user
			/// </summary>
			AdminNote = 0x005d0014,
			/// <summary>
			/// DateTime when the user last logged in
			/// </summary>
			DateTimeLastAccess = 0x005d0015,
			/// <summary>
			/// DateTime when the user first signed-up
			/// </summary>
			DateTimeSignUp = 0x005d0016,
			/// <summary>
			/// DateTime when the user last requested a page
			/// </summary>
			DateTimeLastPageRequest = 0x005d0017,
			/// <summary>
			/// Used internally to store a serialised hashtable of quick preferences
			/// </summary>
			PrefsText = 0x005d0018,
			/// <summary>
			/// Used to verify user on automated login
			/// </summary>
			LoginString = 0x005d0019,
			/// <summary>
			/// Users can edit this themselves
			/// </summary>
			PersonalStatement = 0x005d001a,
			/// <summary>
			/// If this usr was added to the system be email by a logged in usr, this is the owner
			/// </summary>
			AddedByUsrK = 0x005d001b,
			/// <summary>
			/// Level of admin trust (0=Nothing, 1=Chat, 2=Photo, 3=Event
			/// </summary>
			AdminLevel = 0x005d001c,
			/// <summary>
			/// Random float less than 1 used for fast pseudo-random ordering
			/// </summary>
			RandomNumber = 0x005d001d,
			/// <summary>
			/// Date / time of the last private comment that was posted to this user
			/// </summary>
			LastPrivateComment = 0x005d001e,
			/// <summary>
			/// Date / time of the last private chat message that was posted to this user
			/// </summary>
			LastPrivateChatMessage = 0x005d001f,
			/// <summary>
			/// Is the user single? If so, they may participate in the DSI Date section
			/// </summary>
			IsSingle = 0x005d0020,
			/// <summary>
			/// Is the user male?
			/// </summary>
			IsMale = 0x005d0021,
			/// <summary>
			/// Is the user female?
			/// </summary>
			IsFemale = 0x005d0022,
			/// <summary>
			/// Date of birth
			/// </summary>
			DateOfBirth = 0x005d0023,
			/// <summary>
			/// Is this user looking for a male as a date?
			/// </summary>
			DateSexMale = 0x005d0024,
			/// <summary>
			/// Is this user looking for a female as a date?
			/// </summary>
			DateSexFemale = 0x005d0025,
			/// <summary>
			/// Lower acceptable age range for date
			/// </summary>
			DateAgeRangeLow = 0x005d0026,
			/// <summary>
			/// Upper acceptable age range for date
			/// </summary>
			DateAgeRangeHigh = 0x005d0027,
			/// <summary>
			/// Is this user looking for relationship 1 (Just new friends)
			/// </summary>
			Relationship1 = 0x005d0028,
			/// <summary>
			/// Is this user looking for relationship 2 (A bit of a fling)
			/// </summary>
			Relationship2 = 0x005d0029,
			/// <summary>
			/// Is this user looking for relationship 3 (Love)
			/// </summary>
			Relationship3 = 0x005d002a,
			/// <summary>
			/// This is a non-authoritave sex for this user, based on another user clicking the "This isn't a xxx!!!" button
			/// </summary>
			SexHelperMale = 0x005d002b,
			/// <summary>
			/// This is a non-authoritave sex for this user, based on another user clicking the "This isn't a xxx!!!" button
			/// </summary>
			SexHelperFemale = 0x005d002c,
			/// <summary>
			/// Number of full buddies this user is connected to
			/// </summary>
			BuddyCount = 0x005d002d,
			/// <summary>
			/// Number of full chat messages this user has posted
			/// </summary>
			ChatMessageCount = 0x005d002e,
			/// <summary>
			/// Number of comments user has posted
			/// </summary>
			CommentCount = 0x005d002f,
			/// <summary>
			/// Number of events this user has added
			/// </summary>
			EventCount = 0x005d0030,
			/// <summary>
			/// The users home town
			/// </summary>
			HomePlaceK = 0x005d0031,
			/// <summary>
			/// Has this user agreed to the terms and conditions?
			/// </summary>
			AgreeTerms = 0x005d0032,
			/// <summary>
			/// Does this user map to a client in the text-guest system? If so this is the GuestClientK, if not, then zero.
			/// </summary>
			GuestClientK = 0x005d0033,
			/// <summary>
			/// Favourite music style (main category).
			/// </summary>
			FavouriteMusicTypeK = 0x005d0034,
			/// <summary>
			/// Total number of times this user has laughed at a comment
			/// </summary>
			TotalLol = 0x005d0035,
			/// <summary>
			/// Total number of times this user has made someone laugh
			/// </summary>
			TotalMadeLol = 0x005d0036,
			/// <summary>
			/// DateTime of the last time this user laughed
			/// </summary>
			LastLol = 0x005d0037,
			/// <summary>
			/// Total number of users that this user has made laugh
			/// </summary>
			UniqueMadeLol = 0x005d0038,
			/// <summary>
			/// Chat messages
			/// </summary>
			ChatXml = 0x005d0039,
			/// <summary>
			/// Is this user logged on? (This is only set to false when the user actually logs off)
			/// </summary>
			IsLoggedOn = 0x005d003a,
			/// <summary>
			/// The ticks of the last chat item
			/// </summary>
			LastChatItem = 0x005d003b,
			/// <summary>
			/// Last IP that the user accessed the site from
			/// </summary>
			LastIp = 0x005d003c,
			/// <summary>
			/// Ignore - this hides chat messages from this user / doesn't send out comment alert emails etc.
			/// </summary>
			Ignore = 0x005d003d,
			/// <summary>
			/// Is this user a pro spotter?
			/// </summary>
			IsProSpotter = 0x005d003e,
			/// <summary>
			/// ID of the last invite that was sent to this user. Ensures we don't send duplicate event invite PM's to people.
			/// </summary>
			LastInvite = 0x005d003f,
			/// <summary>
			/// Who was the first person to take a photo of this user?
			/// </summary>
			IntroducedByUsrK = 0x005d0040,
			/// <summary>
			/// Can we send this user e-flyers?
			/// </summary>
			SendFlyers = 0x005d0041,
			/// <summary>
			/// Can we send this user party invites?
			/// </summary>
			SendInvites = 0x005d0042,
			/// <summary>
			/// Total number of enabled photos this usr has added
			/// </summary>
			TotalPhotoUploads = 0x005d0043,
			/// <summary>
			/// Temp int used when sending bulk stuff
			/// </summary>
			TempInt = 0x005d0044,
			/// <summary>
			/// Ask the user for their password on each auto-login?
			/// </summary>
			EnhancedSecurity = 0x005d0045,
			/// <summary>
			/// Address - Street
			/// </summary>
			AddressStreet = 0x005d0046,
			/// <summary>
			/// Address - Area
			/// </summary>
			AddressArea = 0x005d0047,
			/// <summary>
			/// Address - Place
			/// </summary>
			AddressTown = 0x005d0048,
			/// <summary>
			/// Address - County
			/// </summary>
			AddressCounty = 0x005d0049,
			/// <summary>
			/// Address - Postcode
			/// </summary>
			AddressPostcode = 0x005d004a,
			/// <summary>
			/// Address - Country (link to Country table)
			/// </summary>
			AddressCountryK = 0x005d004b,
			/// <summary>
			/// New=3, WelcomePackInPost=4, HaveCards=0, NeedCards=1, CardsInPost=2
			/// </summary>
			CardStatus = 0x005d004c,
			/// <summary>
			/// Tracks the total number of cards that we've sent to this spotter.
			/// </summary>
			TotalCardsSent = 0x005d004d,
			/// <summary>
			/// Is this user a spotter?
			/// </summary>
			IsSpotter = 0x005d004e,
			/// <summary>
			/// Is this user banned?
			/// </summary>
			Banned = 0x005d004f,
			/// <summary>
			/// Who banned this user?
			/// </summary>
			BannedByUsrK = 0x005d0050,
			/// <summary>
			/// When were they banned?
			/// </summary>
			BannedDateTime = 0x005d0051,
			/// <summary>
			/// Why were they banned?
			/// </summary>
			BannedReason = 0x005d0052,
			/// <summary>
			/// Send generic music types in the update email?
			/// </summary>
			UpdateSendGenericMusic = 0x005d0053,
			/// <summary>
			/// Include large events in other parts of the country in the update email?
			/// </summary>
			UpdateLargeEvents = 0x005d0054,
			/// <summary>
			/// Include all events that my buddies are going to in the update email?
			/// </summary>
			UpdateSendBuddies = 0x005d0055,
			/// <summary>
			/// State var used to reconstruct cropper when re-cropping
			/// </summary>
			PicState = 0x005d0056,
			/// <summary>
			/// The Photo that was used to create the Pic.
			/// </summary>
			PicPhotoK = 0x005d0057,
			/// <summary>
			/// The Misc that was used to create the Pic.
			/// </summary>
			PicMiscK = 0x005d0058,
			/// <summary>
			/// Is the live chat box turned on?
			/// </summary>
			IsChatting = 0x005d0059,
			/// <summary>
			/// When was the last time this user gained / lost a buddy? - used when caching the buddies drop-down on the photo page
			/// </summary>
			LastBuddyChange = 0x005d005a,
			/// <summary>
			/// News moderator - they can moderate news
			/// </summary>
			NewsModerator = 0x005d005b,
			/// <summary>
			/// News permission - they can post news up to this level
			/// </summary>
			NewsPermissionLevel = 0x005d005c,
			/// <summary>
			/// Is this user a beta tester?
			/// </summary>
			IsBetaTester = 0x005d005d,
			/// <summary>
			/// How many places does this user visit?
			/// </summary>
			PlacesVisitCount = 0x005d005e,
			/// <summary>
			/// How many places does this user visit?
			/// </summary>
			MusicTypesFavouriteCount = 0x005d005f,
			/// <summary>
			/// How many places does this user visit?
			/// </summary>
			PhotosMeCount = 0x005d0060,
			/// <summary>
			/// Is this user a skeleton?
			/// </summary>
			IsSkeleton = 0x005d0061,
			/// <summary>
			/// Don't send inbox emails?
			/// </summary>
			NoInboxEmails = 0x005d0062,
			/// <summary>
			/// Number of abuse reports this user has submitted that are pending
			/// </summary>
			AbuseReportsPending = 0x005d0063,
			/// <summary>
			/// Number of abuse reports this user has submitted that were useful (abuse or noabuse)
			/// </summary>
			AbuseReportsUseful = 0x005d0064,
			/// <summary>
			/// Number of abuse reports this user has submitted that were overturned
			/// </summary>
			AbuseReportsOverturned = 0x005d0065,
			/// <summary>
			/// Number of abuse accusations this user has had made against them that are pending
			/// </summary>
			AbuseAccusationsPending = 0x005d0066,
			/// <summary>
			/// Number of abuse accusations this user has had made against them that are were found to be abuse
			/// </summary>
			AbuseAccusationsAbuse = 0x005d0067,
			/// <summary>
			/// Number of abuse accusations this user has had made against them that are were found to not be abusive
			/// </summary>
			AbuseAccusationsNoAbuse = 0x005d0068,
			/// <summary>
			/// Should this users photos be moderated prior to going live?
			/// </summary>
			ModeratePhotos = 0x005d0069,
			/// <summary>
			/// Id used for stopping multiple browser pages hogging chat bandwidth
			/// </summary>
			ChatSessionId = 0x005d006a,
			/// <summary>
			/// If the group invite page was used to add this user, this is the inviting group
			/// </summary>
			AddedByGroupK = 0x005d006b,
			/// <summary>
			/// Which icon is displayed? 0=None, 1=Dog
			/// </summary>
			DonateIcon = 0x005d006c,
			/// <summary>
			/// When does the icon expire?
			/// </summary>
			DonateExpire = 0x005d006d,
			/// <summary>
			/// Date/time when the email was last changed
			/// </summary>
			EmailDateTime = 0x005d006e,
			/// <summary>
			/// Ip of the client when the email address was entered
			/// </summary>
			EmailIp = 0x005d006f,
			/// <summary>
			/// Is the user unsubscribed from emails?
			/// </summary>
			EmailHold = 0x005d0070,
			/// <summary>
			/// Can this user edit plain HTML?
			/// </summary>
			IsHtmlEditor = 0x005d0071,
			/// <summary>
			/// Is this user a moderator of any groups?
			/// </summary>
			IsGroupModerator = 0x005d0072,
			/// <summary>
			/// Is this skeleton user from the sign-up page - e.g. Entered their email address and password ONCE.
			/// </summary>
			IsSkeletonFromSignup = 0x005d0073,
			/// <summary>
			/// Extra icon displayed on the profile
			/// </summary>
			ExtraIcon = 0x005d0074,
			/// <summary>
			/// When does the extra icon expire?
			/// </summary>
			ExtraExpire = 0x005d0075,
			/// <summary>
			/// Total number of distinct users I have taken a photo of
			/// </summary>
			SpottingsTotal = 0x005d0076,
			/// <summary>
			/// Total number of distinct users I have taken a photo of in the last month (updated hourly?)
			/// </summary>
			SpottingsMonth = 0x005d0077,
			/// <summary>
			/// Ranking in busiest spotters list (month only)
			/// </summary>
			SpottingsMonthRank = 0x005d0078,
			/// <summary>
			/// Is this user part of a promoter account?
			/// </summary>
			IsPromoter = 0x005d0079,
			/// <summary>
			/// Number of Camp DSI tickets this user has bought
			/// </summary>
			CampTickets = 0x005d007a,
			/// <summary>
			/// Has this user bought a dsi ticket?
			/// </summary>
			HasTicket = 0x005d007b,
			/// <summary>
			/// What's the date/time of the last event the member has a ticket for?
			/// </summary>
			LastTicketEventDateTime = 0x005d007c,
			/// <summary>
			/// Cryptographic hash of the password
			/// </summary>
			PasswordHash = 0x005d007d,
			/// <summary>
			/// Cryptographic salt used to generate password hash
			/// </summary>
			PasswordSalt = 0x005d007e,
			/// <summary>
			/// Secret data used to verify password reset page
			/// </summary>
			PasswordResetEmailSecret = 0x005d007f,
			/// <summary>
			/// Has this user agreed to the new terms of use
			/// </summary>
			LegalTermsUser1 = 0x005d0080,
			/// <summary>
			/// Has this user agreed to the new terms for promoters
			/// </summary>
			LegalTermsPromoter1 = 0x005d0081,
			/// <summary>
			/// Is the user a super admin user?
			/// </summary>
			IsSuperAdmin = 0x005d0082,
			/// <summary>
			/// Is the user a sales person?
			/// </summary>
			IsSalesPerson = 0x005d0083,
			/// <summary>
			/// Time stamp to record when someone is trying to purchase an IBuyable item that is linked to this Bob. No lock = DateTime.MinValue
			/// </summary>
			BuyableLockDateTime = 0x005d0084,
			/// <summary>
			/// For sales people: their sales team number
			/// </summary>
			SalesTeam = 0x005d0085,
			/// <summary>
			/// A guid identifier for the Usr
			/// </summary>
			Guid = 0x005d0086,
			/// <summary>
			/// Has the user agreed to the new (2007-06) user terms?
			/// </summary>
			LegalTermsUser2 = 0x005d0087,
			/// <summary>
			/// Has the user agreed to the new (2007-06) promoter terms?
			/// </summary>
			LegalTermsPromoter2 = 0x005d0088,
			/// <summary>
			/// Datetime of this users last photo upload
			/// </summary>
			LastPhotoUpload = 0x005d0089,
			/// <summary>
			/// Date/time of the tuesday that the last update email that was delivered to this user. Used to make the update email restartable
			/// </summary>
			DateTimeLastUpdateEmail = 0x005d008a,
			/// <summary>
			/// Was this usr invited using the contact importer device?
			/// </summary>
			InvitedViaContactImporter = 0x005d008b,
			/// <summary>
			/// Has the user registered through a styled tickets microsite?
			/// </summary>
			IsTicketsRegistered = 0x005d008c,
			/// <summary>
			/// Disallow this usr's profile to be found by searching name or email address?
			/// </summary>
			ExDirectory = 0x005d008d,
			/// <summary>
			/// Did a recent email to this user suffer a hard bounce?
			/// </summary>
			IsEmailBroken = 0x005d008e,
			/// <summary>
			/// When was the last chat message posted?
			/// </summary>
			DateTimeLastChatMessage = 0x005d008f,
			/// <summary>
			/// The Donation Icon, if applicable, which the user will have appear in their rollover
			/// </summary>
			RolloverDonationIconK = 0x005d0090,
			/// <summary>
			/// Guid of the chat pic (300px x 100px)
			/// </summary>
			ChatPic = 0x005d0091,
			/// <summary>
			/// PhotoK that the chat pic was cropped from
			/// </summary>
			ChatPicPhotoK = 0x005d0092,
			/// <summary>
			/// State of the cropper for the chat pic
			/// </summary>
			ChatPicState = 0x005d0093,
			/// <summary>
			/// Date / time that the buddy alerts room was last refreshed
			/// </summary>
			DateTimeLastBuddyAlertsRoomRefresh = 0x005d0094,
			/// <summary>
			/// Photo usage permission
			/// </summary>
			PhotoUsage = 0x005d0095,
			/// <summary>
			/// Facebook user id
			/// </summary>
			FacebookUID = 0x005d0096,
			/// <summary>
			/// Facebook connect linked
			/// </summary>
			FacebookConnected = 0x005d0097,
			/// <summary>
			/// Facebook connect linked date/time
			/// </summary>
			FacebookConnectedDateTime = 0x005d0098,
			/// <summary>
			/// Facebook email extended permission
			/// </summary>
			FacebookPermissionEmail = 0x005d0099,
			/// <summary>
			/// Facebook publish_stream extended permission
			/// </summary>
			FacebookPermissionPublish = 0x005d009a,
			/// <summary>
			/// Facebook create_event extended permission
			/// </summary>
			FacebookPermissionEvent = 0x005d009b,
			/// <summary>
			/// Facebook rsvp_event extended permission
			/// </summary>
			FacebookPermissionRsvp = 0x005d009c,
			/// <summary>
			/// Post a facebook stream story when I attend events
			/// </summary>
			FacebookStoryAttendEvent = 0x005d009d,
			/// <summary>
			/// Post a facebook stream story when I buy tickets
			/// </summary>
			FacebookStoryBuyTicket = 0x005d009e,
			/// <summary>
			/// Post a facebook stream story when I upload photos
			/// </summary>
			FacebookStoryUploadPhoto = 0x005d009f,
			/// <summary>
			/// Post a facebook stream story when I get spotted in photos
			/// </summary>
			FacebookStorySpotted = 0x005d00a0,
			/// <summary>
			/// Post a facebook stream story when I have a photo featured on the front page
			/// </summary>
			FacebookStoryPhotoFeatured = 0x005d00a1,
			/// <summary>
			/// Post a facebook stream story when I make a new buddy
			/// </summary>
			FacebookStoryNewBuddy = 0x005d00a2,
			/// <summary>
			/// Post a facebook stream story when I publish an article
			/// </summary>
			FacebookStoryPublishArticle = 0x005d00a3,
			/// <summary>
			/// Post a facebook stream story when I join a group
			/// </summary>
			FacebookStoryJoinGroup = 0x005d00a4,
			/// <summary>
			/// Post a facebook stream story when I put stuff on my favourites
			/// </summary>
			FacebookStoryFavourite = 0x005d00a5,
			/// <summary>
			/// Post a facebook stream story when I post new topics
			/// </summary>
			FacebookStoryNewTopic = 0x005d00a6,
			/// <summary>
			/// Post a facebook stream story when I post an event review
			/// </summary>
			FacebookStoryEventReview = 0x005d00a7,
			/// <summary>
			/// Post a facebook stream story when I post news
			/// </summary>
			FacebookStoryPostNews = 0x005d00a8,
			/// <summary>
			/// Post a facebook stream story when I laugh at a comment
			/// </summary>
			FacebookStoryLaugh = 0x005d00a9,
			/// <summary>
			/// Add an event to facebook when I add an event
			/// </summary>
			FacebookEventAdd = 0x005d00aa,
			/// <summary>
			/// Add me on Facebook when I attend an event
			/// </summary>
			FacebookEventAttend = 0x005d00ab,
			/// <summary>
			/// Facebook email
			/// </summary>
			FacebookEmail = 0x005d00ac,
			/// <summary>
			/// Is this user a DJ?
			/// </summary>
			IsDj = 0x005d00ad,
			/// <summary>
			/// Main Facebook Story permission - Well update your Facebook wall when you create stuff
			/// </summary>
			FacebookStory = 0x005d00ae,
			/// <summary>
			/// Main Facebook Story permission - Well update your Facebook wall when you create stuff
			/// </summary>
			FacebookStory1 = 0x005d00af,
			/// <summary>
			/// Access token needed for offline access
			/// </summary>
			FacebookAccessToken = 0x005d00b0,
			/// <summary>
			/// Post a facebook stream story when I put topics on my favourites
			/// </summary>
			FacebookStoryFavouriteTopic = 0x005d00b1,
			/// <summary>
			/// Does this user need a captcha for security?
			/// </summary>
			NeedsCaptcha = 0x005d00b2,
			/// <summary>
			/// Has this user correctly passed the captcha test?
			/// </summary>
			PassedCaptcha = 0x005d00b3,
			/// <summary>
			/// Date/time of the start of the month that bounce mails are being counted
			/// </summary>
			BouncePeriodDateTime = 0x005d00b4,
			/// <summary>
			/// Total emails sent in the bounce mail period
			/// </summary>
			TotalEmailsSentInPeriod = 0x005d00b5,
			/// <summary>
			/// Total hard bounces with a matching string detected in the bounce period
			/// </summary>
			MatchedHardBounceInPeriod = 0x005d00b6,
			/// <summary>
			/// Total hard bounces without a matching string detected in the bounce period
			/// </summary>
			UnmatchedHardBounceInPeriod = 0x005d00b7,
			/// <summary>
			/// Total soft bounces detected in the bounce period
			/// </summary>
			SoftBounceInPeriod = 0x005d00b8,
		}
		#endregion
		public static string GetColumnName(Usr.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case Usr.Columns.K: return "K";
						case Usr.Columns.Email: return "Email";
						case Usr.Columns.Password: return "Password";
						case Usr.Columns.LoginCount: return "LoginCount";
						case Usr.Columns.IsAdmin: return "IsAdmin";
						case Usr.Columns.IsEmailVerified: return "IsEmailVerified";
						case Usr.Columns.Pic: return "Pic";
						case Usr.Columns.PicOriginal: return "PicOriginal";
						case Usr.Columns.FirstName: return "FirstName";
						case Usr.Columns.LastName: return "LastName";
						case Usr.Columns.NickName: return "NickName";
						case Usr.Columns.Mobile: return "Mobile";
						case Usr.Columns.MobileCountryCode: return "MobileCountryCode";
						case Usr.Columns.MobileNumber: return "MobileNumber";
						case Usr.Columns.SendSpottedEmails: return "SendSpottedEmails";
						case Usr.Columns.SendSpottedTexts: return "SendSpottedTexts";
						case Usr.Columns.SendPartnerEmails: return "SendPartnerEmails";
						case Usr.Columns.SendPartnerTexts: return "SendPartnerTexts";
						case Usr.Columns.UpdateData: return "UpdateData";
						case Usr.Columns.AdminNote: return "AdminNote";
						case Usr.Columns.DateTimeLastAccess: return "DateTimeLastAccess";
						case Usr.Columns.DateTimeSignUp: return "DateTimeSignUp";
						case Usr.Columns.DateTimeLastPageRequest: return "DateTimeLastPageRequest";
						case Usr.Columns.PrefsText: return "PrefsText";
						case Usr.Columns.LoginString: return "LoginString";
						case Usr.Columns.PersonalStatement: return "PersonalStatement";
						case Usr.Columns.AddedByUsrK: return "AddedByUsrK";
						case Usr.Columns.AdminLevel: return "AdminLevel";
						case Usr.Columns.RandomNumber: return "RandomNumber";
						case Usr.Columns.LastPrivateComment: return "LastPrivateComment";
						case Usr.Columns.LastPrivateChatMessage: return "LastPrivateChatMessage";
						case Usr.Columns.IsSingle: return "IsSingle";
						case Usr.Columns.IsMale: return "IsMale";
						case Usr.Columns.IsFemale: return "IsFemale";
						case Usr.Columns.DateOfBirth: return "DateOfBirth";
						case Usr.Columns.DateSexMale: return "DateSexMale";
						case Usr.Columns.DateSexFemale: return "DateSexFemale";
						case Usr.Columns.DateAgeRangeLow: return "DateAgeRangeLow";
						case Usr.Columns.DateAgeRangeHigh: return "DateAgeRangeHigh";
						case Usr.Columns.Relationship1: return "Relationship1";
						case Usr.Columns.Relationship2: return "Relationship2";
						case Usr.Columns.Relationship3: return "Relationship3";
						case Usr.Columns.SexHelperMale: return "SexHelperMale";
						case Usr.Columns.SexHelperFemale: return "SexHelperFemale";
						case Usr.Columns.BuddyCount: return "BuddyCount";
						case Usr.Columns.ChatMessageCount: return "ChatMessageCount";
						case Usr.Columns.CommentCount: return "CommentCount";
						case Usr.Columns.EventCount: return "EventCount";
						case Usr.Columns.HomePlaceK: return "HomePlaceK";
						case Usr.Columns.AgreeTerms: return "AgreeTerms";
						case Usr.Columns.GuestClientK: return "GuestClientK";
						case Usr.Columns.FavouriteMusicTypeK: return "FavouriteMusicTypeK";
						case Usr.Columns.TotalLol: return "TotalLol";
						case Usr.Columns.TotalMadeLol: return "TotalMadeLol";
						case Usr.Columns.LastLol: return "LastLol";
						case Usr.Columns.UniqueMadeLol: return "UniqueMadeLol";
						case Usr.Columns.ChatXml: return "ChatXml";
						case Usr.Columns.IsLoggedOn: return "IsLoggedOn";
						case Usr.Columns.LastChatItem: return "LastChatItem";
						case Usr.Columns.LastIp: return "LastIp";
						case Usr.Columns.Ignore: return "Ignore";
						case Usr.Columns.IsProSpotter: return "IsProSpotter";
						case Usr.Columns.LastInvite: return "LastInvite";
						case Usr.Columns.IntroducedByUsrK: return "IntroducedByUsrK";
						case Usr.Columns.SendFlyers: return "SendFlyers";
						case Usr.Columns.SendInvites: return "SendInvites";
						case Usr.Columns.TotalPhotoUploads: return "TotalPhotoUploads";
						case Usr.Columns.TempInt: return "TempInt";
						case Usr.Columns.EnhancedSecurity: return "EnhancedSecurity";
						case Usr.Columns.AddressStreet: return "AddressStreet";
						case Usr.Columns.AddressArea: return "AddressArea";
						case Usr.Columns.AddressTown: return "AddressTown";
						case Usr.Columns.AddressCounty: return "AddressCounty";
						case Usr.Columns.AddressPostcode: return "AddressPostcode";
						case Usr.Columns.AddressCountryK: return "AddressCountryK";
						case Usr.Columns.CardStatus: return "CardStatus";
						case Usr.Columns.TotalCardsSent: return "TotalCardsSent";
						case Usr.Columns.IsSpotter: return "IsSpotter";
						case Usr.Columns.Banned: return "Banned";
						case Usr.Columns.BannedByUsrK: return "BannedByUsrK";
						case Usr.Columns.BannedDateTime: return "BannedDateTime";
						case Usr.Columns.BannedReason: return "BannedReason";
						case Usr.Columns.UpdateSendGenericMusic: return "UpdateSendGenericMusic";
						case Usr.Columns.UpdateLargeEvents: return "UpdateLargeEvents";
						case Usr.Columns.UpdateSendBuddies: return "UpdateSendBuddies";
						case Usr.Columns.PicState: return "PicState";
						case Usr.Columns.PicPhotoK: return "PicPhotoK";
						case Usr.Columns.PicMiscK: return "PicMiscK";
						case Usr.Columns.IsChatting: return "IsChatting";
						case Usr.Columns.LastBuddyChange: return "LastBuddyChange";
						case Usr.Columns.NewsModerator: return "NewsModerator";
						case Usr.Columns.NewsPermissionLevel: return "NewsPermissionLevel";
						case Usr.Columns.IsBetaTester: return "IsBetaTester";
						case Usr.Columns.PlacesVisitCount: return "PlacesVisitCount";
						case Usr.Columns.MusicTypesFavouriteCount: return "MusicTypesFavouriteCount";
						case Usr.Columns.PhotosMeCount: return "PhotosMeCount";
						case Usr.Columns.IsSkeleton: return "IsSkeleton";
						case Usr.Columns.NoInboxEmails: return "NoInboxEmails";
						case Usr.Columns.AbuseReportsPending: return "AbuseReportsPending";
						case Usr.Columns.AbuseReportsUseful: return "AbuseReportsUseful";
						case Usr.Columns.AbuseReportsOverturned: return "AbuseReportsOverturned";
						case Usr.Columns.AbuseAccusationsPending: return "AbuseAccusationsPending";
						case Usr.Columns.AbuseAccusationsAbuse: return "AbuseAccusationsAbuse";
						case Usr.Columns.AbuseAccusationsNoAbuse: return "AbuseAccusationsNoAbuse";
						case Usr.Columns.ModeratePhotos: return "ModeratePhotos";
						case Usr.Columns.ChatSessionId: return "ChatSessionId";
						case Usr.Columns.AddedByGroupK: return "AddedByGroupK";
						case Usr.Columns.DonateIcon: return "DonateIcon";
						case Usr.Columns.DonateExpire: return "DonateExpire";
						case Usr.Columns.EmailDateTime: return "EmailDateTime";
						case Usr.Columns.EmailIp: return "EmailIp";
						case Usr.Columns.EmailHold: return "EmailHold";
						case Usr.Columns.IsHtmlEditor: return "IsHtmlEditor";
						case Usr.Columns.IsGroupModerator: return "IsGroupModerator";
						case Usr.Columns.IsSkeletonFromSignup: return "IsSkeletonFromSignup";
						case Usr.Columns.ExtraIcon: return "ExtraIcon";
						case Usr.Columns.ExtraExpire: return "ExtraExpire";
						case Usr.Columns.SpottingsTotal: return "SpottingsTotal";
						case Usr.Columns.SpottingsMonth: return "SpottingsMonth";
						case Usr.Columns.SpottingsMonthRank: return "SpottingsMonthRank";
						case Usr.Columns.IsPromoter: return "IsPromoter";
						case Usr.Columns.CampTickets: return "CampTickets";
						case Usr.Columns.HasTicket: return "HasTicket";
						case Usr.Columns.LastTicketEventDateTime: return "LastTicketEventDateTime";
						case Usr.Columns.PasswordHash: return "PasswordHash";
						case Usr.Columns.PasswordSalt: return "PasswordSalt";
						case Usr.Columns.PasswordResetEmailSecret: return "PasswordResetEmailSecret";
						case Usr.Columns.LegalTermsUser1: return "LegalTermsUser1";
						case Usr.Columns.LegalTermsPromoter1: return "LegalTermsPromoter1";
						case Usr.Columns.IsSuperAdmin: return "IsSuperAdmin";
						case Usr.Columns.IsSalesPerson: return "IsSalesPerson";
						case Usr.Columns.BuyableLockDateTime: return "BuyableLockDateTime";
						case Usr.Columns.SalesTeam: return "SalesTeam";
						case Usr.Columns.Guid: return "Guid";
						case Usr.Columns.LegalTermsUser2: return "LegalTermsUser2";
						case Usr.Columns.LegalTermsPromoter2: return "LegalTermsPromoter2";
						case Usr.Columns.LastPhotoUpload: return "LastPhotoUpload";
						case Usr.Columns.DateTimeLastUpdateEmail: return "DateTimeLastUpdateEmail";
						case Usr.Columns.InvitedViaContactImporter: return "InvitedViaContactImporter";
						case Usr.Columns.IsTicketsRegistered: return "IsTicketsRegistered";
						case Usr.Columns.ExDirectory: return "ExDirectory";
						case Usr.Columns.IsEmailBroken: return "IsEmailBroken";
						case Usr.Columns.DateTimeLastChatMessage: return "DateTimeLastChatMessage";
						case Usr.Columns.RolloverDonationIconK: return "RolloverDonationIconK";
						case Usr.Columns.ChatPic: return "ChatPic";
						case Usr.Columns.ChatPicPhotoK: return "ChatPicPhotoK";
						case Usr.Columns.ChatPicState: return "ChatPicState";
						case Usr.Columns.DateTimeLastBuddyAlertsRoomRefresh: return "DateTimeLastBuddyAlertsRoomRefresh";
						case Usr.Columns.PhotoUsage: return "PhotoUsage";
						case Usr.Columns.FacebookUID: return "FacebookUID";
						case Usr.Columns.FacebookConnected: return "FacebookConnected";
						case Usr.Columns.FacebookConnectedDateTime: return "FacebookConnectedDateTime";
						case Usr.Columns.FacebookPermissionEmail: return "FacebookPermissionEmail";
						case Usr.Columns.FacebookPermissionPublish: return "FacebookPermissionPublish";
						case Usr.Columns.FacebookPermissionEvent: return "FacebookPermissionEvent";
						case Usr.Columns.FacebookPermissionRsvp: return "FacebookPermissionRsvp";
						case Usr.Columns.FacebookStoryAttendEvent: return "FacebookStoryAttendEvent";
						case Usr.Columns.FacebookStoryBuyTicket: return "FacebookStoryBuyTicket";
						case Usr.Columns.FacebookStoryUploadPhoto: return "FacebookStoryUploadPhoto";
						case Usr.Columns.FacebookStorySpotted: return "FacebookStorySpotted";
						case Usr.Columns.FacebookStoryPhotoFeatured: return "FacebookStoryPhotoFeatured";
						case Usr.Columns.FacebookStoryNewBuddy: return "FacebookStoryNewBuddy";
						case Usr.Columns.FacebookStoryPublishArticle: return "FacebookStoryPublishArticle";
						case Usr.Columns.FacebookStoryJoinGroup: return "FacebookStoryJoinGroup";
						case Usr.Columns.FacebookStoryFavourite: return "FacebookStoryFavourite";
						case Usr.Columns.FacebookStoryNewTopic: return "FacebookStoryNewTopic";
						case Usr.Columns.FacebookStoryEventReview: return "FacebookStoryEventReview";
						case Usr.Columns.FacebookStoryPostNews: return "FacebookStoryPostNews";
						case Usr.Columns.FacebookStoryLaugh: return "FacebookStoryLaugh";
						case Usr.Columns.FacebookEventAdd: return "FacebookEventAdd";
						case Usr.Columns.FacebookEventAttend: return "FacebookEventAttend";
						case Usr.Columns.FacebookEmail: return "FacebookEmail";
						case Usr.Columns.IsDj: return "IsDj";
						case Usr.Columns.FacebookStory: return "FacebookStory";
						case Usr.Columns.FacebookStory1: return "FacebookStory1";
						case Usr.Columns.FacebookAccessToken: return "FacebookAccessToken";
						case Usr.Columns.FacebookStoryFavouriteTopic: return "FacebookStoryFavouriteTopic";
						case Usr.Columns.NeedsCaptcha: return "NeedsCaptcha";
						case Usr.Columns.PassedCaptcha: return "PassedCaptcha";
						case Usr.Columns.BouncePeriodDateTime: return "BouncePeriodDateTime";
						case Usr.Columns.TotalEmailsSentInPeriod: return "TotalEmailsSentInPeriod";
						case Usr.Columns.MatchedHardBounceInPeriod: return "MatchedHardBounceInPeriod";
						case Usr.Columns.UnmatchedHardBounceInPeriod: return "UnmatchedHardBounceInPeriod";
						case Usr.Columns.SoftBounceInPeriod: return "SoftBounceInPeriod";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(Usr.Columns columnEnum)
		{
			switch (columnEnum)
			{
																																																																																																																																																																																												default: return false;
			}
		}


		#region Common
 
		public Usr(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);  }
		public Usr()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.Usr);
		}
		public Usr(BobSet bs)
		{
			this.Bob = new Bob(bs.Table, bs);
		}
		public Usr(int UsrK, IBob Parent, object Column)
			: this()
		{
			Bob.GetBobFromParent(UsrK, Parent.Bob, Column, TablesEnum.Usr);
		}
		public Usr(int UsrK)
			: this()
		{
			Bob.GetBobFromPrimaryKey(UsrK);
		}
		#endregion

	}
	#endregion
	#region UsrTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region Usr
	/// <summary>
	/// Each registered user of the system gets a record in this table.
	/// </summary>
	[Serializable]
	public partial class Usr 
	{
		
		#region Simple members
		/// <summary>
		/// Key
		/// </summary>
		public override int K
		{
			get { return (int)this[Usr.Columns.K] as int? ?? 0 ; }
			set { this[Usr.Columns.K] = value; }
		}
		/// <summary>
		/// Email
		/// </summary>
		public override string Email
		{
			get { return (string)this[Usr.Columns.Email]; }
			set { this[Usr.Columns.Email] = value; }
		}
		/// <summary>
		/// Password
		/// </summary>
		public override string Password
		{
			get { return (string)this[Usr.Columns.Password]; }
			set { this[Usr.Columns.Password] = value; }
		}
		/// <summary>
		/// The number of times the user has logged in
		/// </summary>
		public override int LoginCount
		{
			get { return (int)this[Usr.Columns.LoginCount]; }
			set { this[Usr.Columns.LoginCount] = value; }
		}
		/// <summary>
		/// Is the user an admin user?
		/// </summary>
		public override bool IsAdmin
		{
			get { return (bool)this[Usr.Columns.IsAdmin]; }
			set { this[Usr.Columns.IsAdmin] = value; }
		}
		/// <summary>
		/// Has the email address been verified?
		/// </summary>
		public override bool IsEmailVerified
		{
			get { return (bool)this[Usr.Columns.IsEmailVerified]; }
			set { this[Usr.Columns.IsEmailVerified] = value; }
		}
		/// <summary>
		/// Cropped image 80*80 for discussion board avatar etc.
		/// </summary>
		public Guid	Pic
		{
			get{ return Cambro.Misc.Db.GuidConvertor(this[Usr.Columns.Pic]);}		
			set{ this[Usr.Columns.Pic] = new System.Data.SqlTypes.SqlGuid(value);}
		}
		/// <summary>
		/// Filename of the original image
		/// </summary>
		public Guid	PicOriginal
		{
			get{ return Cambro.Misc.Db.GuidConvertor(this[Usr.Columns.PicOriginal]);}		
			set{ this[Usr.Columns.PicOriginal] = new System.Data.SqlTypes.SqlGuid(value);}
		}
		/// <summary>
		/// First name
		/// </summary>
		public override string FirstName
		{
			get { return (string)this[Usr.Columns.FirstName]; }
			set { this[Usr.Columns.FirstName] = value; }
		}
		/// <summary>
		/// Last name
		/// </summary>
		public override string LastName
		{
			get { return (string)this[Usr.Columns.LastName]; }
			set { this[Usr.Columns.LastName] = value; }
		}
		/// <summary>
		/// Nickname for the site
		/// </summary>
		public override string NickName
		{
			get { return (string)this[Usr.Columns.NickName]; }
			set { this[Usr.Columns.NickName] = value; }
		}
		/// <summary>
		/// Full mobile number including country code (e.g. 447971597702)
		/// </summary>
		public override string Mobile
		{
			get { return (string)this[Usr.Columns.Mobile]; }
			set { this[Usr.Columns.Mobile] = value; }
		}
		/// <summary>
		/// Country code of mobile number (e.g. 44)
		/// </summary>
		public override string MobileCountryCode
		{
			get { return (string)this[Usr.Columns.MobileCountryCode]; }
			set { this[Usr.Columns.MobileCountryCode] = value; }
		}
		/// <summary>
		/// Mobile number excluding country code and leading zero (e.g. 7971597702)
		/// </summary>
		public override string MobileNumber
		{
			get { return (string)this[Usr.Columns.MobileNumber]; }
			set { this[Usr.Columns.MobileNumber] = value; }
		}
		/// <summary>
		/// Send me Spotted emails
		/// </summary>
		public override bool SendSpottedEmails
		{
			get { return (bool)this[Usr.Columns.SendSpottedEmails]; }
			set { this[Usr.Columns.SendSpottedEmails] = value; }
		}
		/// <summary>
		/// Send me Spotted texts
		/// </summary>
		public override bool SendSpottedTexts
		{
			get { return (bool)this[Usr.Columns.SendSpottedTexts]; }
			set { this[Usr.Columns.SendSpottedTexts] = value; }
		}
		/// <summary>
		/// DontStayIn and its partners may send me emails about products I might like
		/// </summary>
		public override bool SendPartnerEmails
		{
			get { return (bool)this[Usr.Columns.SendPartnerEmails]; }
			set { this[Usr.Columns.SendPartnerEmails] = value; }
		}
		/// <summary>
		/// DontStayIn and its partners may send me texts about products I might like
		/// </summary>
		public override bool SendPartnerTexts
		{
			get { return (bool)this[Usr.Columns.SendPartnerTexts]; }
			set { this[Usr.Columns.SendPartnerTexts] = value; }
		}
		/// <summary>
		/// Used internally by the bulk email system
		/// </summary>
		public override string UpdateData
		{
			get { return (string)this[Usr.Columns.UpdateData]; }
			set { this[Usr.Columns.UpdateData] = value; }
		}
		/// <summary>
		/// Admin users may add a private comment to any user
		/// </summary>
		public override string AdminNote
		{
			get { return (string)this[Usr.Columns.AdminNote]; }
			set { this[Usr.Columns.AdminNote] = value; }
		}
		/// <summary>
		/// DateTime when the user last logged in
		/// </summary>
		public override DateTime DateTimeLastAccess
		{
			get { return (DateTime)this[Usr.Columns.DateTimeLastAccess]; }
			set { this[Usr.Columns.DateTimeLastAccess] = value; }
		}
		/// <summary>
		/// DateTime when the user first signed-up
		/// </summary>
		public override DateTime DateTimeSignUp
		{
			get { return (DateTime)this[Usr.Columns.DateTimeSignUp]; }
			set { this[Usr.Columns.DateTimeSignUp] = value; }
		}
		/// <summary>
		/// DateTime when the user last requested a page
		/// </summary>
		public override DateTime DateTimeLastPageRequest
		{
			get { return (DateTime)this[Usr.Columns.DateTimeLastPageRequest]; }
			set { this[Usr.Columns.DateTimeLastPageRequest] = value; }
		}
		/// <summary>
		/// Used internally to store a serialised hashtable of quick preferences
		/// </summary>
		public override string PrefsText
		{
			get { return (string)this[Usr.Columns.PrefsText]; }
			set { this[Usr.Columns.PrefsText] = value; }
		}
		/// <summary>
		/// Used to verify user on automated login
		/// </summary>
		public override string LoginString
		{
			get { return (string)this[Usr.Columns.LoginString]; }
			set { this[Usr.Columns.LoginString] = value; }
		}
		/// <summary>
		/// Users can edit this themselves
		/// </summary>
		public override string PersonalStatement
		{
			get { return (string)this[Usr.Columns.PersonalStatement]; }
			set { this[Usr.Columns.PersonalStatement] = value; }
		}
		/// <summary>
		/// If this usr was added to the system be email by a logged in usr, this is the owner
		/// </summary>
		public override int AddedByUsrK
		{
			get { return (int)this[Usr.Columns.AddedByUsrK]; }
			set { this[Usr.Columns.AddedByUsrK] = value; }
		}
		/// <summary>
		/// Level of admin trust (0=Nothing, 1=Chat, 2=Photo, 3=Event
		/// </summary>
		public override int AdminLevel
		{
			get { return (int)this[Usr.Columns.AdminLevel]; }
			set { this[Usr.Columns.AdminLevel] = value; }
		}
		/// <summary>
		/// Random float less than 1 used for fast pseudo-random ordering
		/// </summary>
		public override double RandomNumber
		{
			get { return (double)this[Usr.Columns.RandomNumber]; }
			set { this[Usr.Columns.RandomNumber] = value; }
		}
		/// <summary>
		/// Date / time of the last private comment that was posted to this user
		/// </summary>
		public override DateTime LastPrivateComment
		{
			get { return (DateTime)this[Usr.Columns.LastPrivateComment]; }
			set { this[Usr.Columns.LastPrivateComment] = value; }
		}
		/// <summary>
		/// Date / time of the last private chat message that was posted to this user
		/// </summary>
		public override DateTime LastPrivateChatMessage
		{
			get { return (DateTime)this[Usr.Columns.LastPrivateChatMessage]; }
			set { this[Usr.Columns.LastPrivateChatMessage] = value; }
		}
		/// <summary>
		/// Is the user single? If so, they may participate in the DSI Date section
		/// </summary>
		public override bool IsSingle
		{
			get { return (bool)this[Usr.Columns.IsSingle]; }
			set { this[Usr.Columns.IsSingle] = value; }
		}
		/// <summary>
		/// Is the user male?
		/// </summary>
		public override bool IsMale
		{
			get { return (bool)this[Usr.Columns.IsMale]; }
			set { this[Usr.Columns.IsMale] = value; }
		}
		/// <summary>
		/// Is the user female?
		/// </summary>
		public override bool IsFemale
		{
			get { return (bool)this[Usr.Columns.IsFemale]; }
			set { this[Usr.Columns.IsFemale] = value; }
		}
		/// <summary>
		/// Date of birth
		/// </summary>
		public override DateTime DateOfBirth
		{
			get { return (DateTime)this[Usr.Columns.DateOfBirth]; }
			set { this[Usr.Columns.DateOfBirth] = value; }
		}
		/// <summary>
		/// Is this user looking for a male as a date?
		/// </summary>
		public override bool DateSexMale
		{
			get { return (bool)this[Usr.Columns.DateSexMale]; }
			set { this[Usr.Columns.DateSexMale] = value; }
		}
		/// <summary>
		/// Is this user looking for a female as a date?
		/// </summary>
		public override bool DateSexFemale
		{
			get { return (bool)this[Usr.Columns.DateSexFemale]; }
			set { this[Usr.Columns.DateSexFemale] = value; }
		}
		/// <summary>
		/// Lower acceptable age range for date
		/// </summary>
		public override int DateAgeRangeLow
		{
			get { return (int)this[Usr.Columns.DateAgeRangeLow]; }
			set { this[Usr.Columns.DateAgeRangeLow] = value; }
		}
		/// <summary>
		/// Upper acceptable age range for date
		/// </summary>
		public override int DateAgeRangeHigh
		{
			get { return (int)this[Usr.Columns.DateAgeRangeHigh]; }
			set { this[Usr.Columns.DateAgeRangeHigh] = value; }
		}
		/// <summary>
		/// Is this user looking for relationship 1 (Just new friends)
		/// </summary>
		public override bool Relationship1
		{
			get { return (bool)this[Usr.Columns.Relationship1]; }
			set { this[Usr.Columns.Relationship1] = value; }
		}
		/// <summary>
		/// Is this user looking for relationship 2 (A bit of a fling)
		/// </summary>
		public override bool Relationship2
		{
			get { return (bool)this[Usr.Columns.Relationship2]; }
			set { this[Usr.Columns.Relationship2] = value; }
		}
		/// <summary>
		/// Is this user looking for relationship 3 (Love)
		/// </summary>
		public override bool Relationship3
		{
			get { return (bool)this[Usr.Columns.Relationship3]; }
			set { this[Usr.Columns.Relationship3] = value; }
		}
		/// <summary>
		/// This is a non-authoritave sex for this user, based on another user clicking the "This isn't a xxx!!!" button
		/// </summary>
		public override bool SexHelperMale
		{
			get { return (bool)this[Usr.Columns.SexHelperMale]; }
			set { this[Usr.Columns.SexHelperMale] = value; }
		}
		/// <summary>
		/// This is a non-authoritave sex for this user, based on another user clicking the "This isn't a xxx!!!" button
		/// </summary>
		public override bool SexHelperFemale
		{
			get { return (bool)this[Usr.Columns.SexHelperFemale]; }
			set { this[Usr.Columns.SexHelperFemale] = value; }
		}
		/// <summary>
		/// Number of full buddies this user is connected to
		/// </summary>
		public override int BuddyCount
		{
			get { return (int)this[Usr.Columns.BuddyCount]; }
			set { this[Usr.Columns.BuddyCount] = value; }
		}
		/// <summary>
		/// Number of full chat messages this user has posted
		/// </summary>
		public override int ChatMessageCount
		{
			get { return (int)this[Usr.Columns.ChatMessageCount]; }
			set { this[Usr.Columns.ChatMessageCount] = value; }
		}
		/// <summary>
		/// Number of comments user has posted
		/// </summary>
		public override int CommentCount
		{
			get { return (int)this[Usr.Columns.CommentCount]; }
			set { this[Usr.Columns.CommentCount] = value; }
		}
		/// <summary>
		/// Number of events this user has added
		/// </summary>
		public override int EventCount
		{
			get { return (int)this[Usr.Columns.EventCount]; }
			set { this[Usr.Columns.EventCount] = value; }
		}
		/// <summary>
		/// The users home town
		/// </summary>
		public override int HomePlaceK
		{
			get { return (int)this[Usr.Columns.HomePlaceK]; }
			set { this[Usr.Columns.HomePlaceK] = value; }
		}
		/// <summary>
		/// Has this user agreed to the terms and conditions?
		/// </summary>
		public override bool AgreeTerms
		{
			get { return (bool)this[Usr.Columns.AgreeTerms]; }
			set { this[Usr.Columns.AgreeTerms] = value; }
		}
		/// <summary>
		/// Does this user map to a client in the text-guest system? If so this is the GuestClientK, if not, then zero.
		/// </summary>
		public override int GuestClientK
		{
			get { return (int)this[Usr.Columns.GuestClientK]; }
			set { this[Usr.Columns.GuestClientK] = value; }
		}
		/// <summary>
		/// Favourite music style (main category).
		/// </summary>
		public override int FavouriteMusicTypeK
		{
			get { return (int)this[Usr.Columns.FavouriteMusicTypeK]; }
			set { this[Usr.Columns.FavouriteMusicTypeK] = value; }
		}
		/// <summary>
		/// Total number of times this user has laughed at a comment
		/// </summary>
		public override int TotalLol
		{
			get { return (int)this[Usr.Columns.TotalLol]; }
			set { this[Usr.Columns.TotalLol] = value; }
		}
		/// <summary>
		/// Total number of times this user has made someone laugh
		/// </summary>
		public override int TotalMadeLol
		{
			get { return (int)this[Usr.Columns.TotalMadeLol]; }
			set { this[Usr.Columns.TotalMadeLol] = value; }
		}
		/// <summary>
		/// DateTime of the last time this user laughed
		/// </summary>
		public override DateTime LastLol
		{
			get { return (DateTime)this[Usr.Columns.LastLol]; }
			set { this[Usr.Columns.LastLol] = value; }
		}
		/// <summary>
		/// Total number of users that this user has made laugh
		/// </summary>
		public override int UniqueMadeLol
		{
			get { return (int)this[Usr.Columns.UniqueMadeLol]; }
			set { this[Usr.Columns.UniqueMadeLol] = value; }
		}
		/// <summary>
		/// Chat messages
		/// </summary>
		public override string ChatXml
		{
			get { return (string)this[Usr.Columns.ChatXml]; }
			set { this[Usr.Columns.ChatXml] = value; }
		}
		/// <summary>
		/// Is this user logged on? (This is only set to false when the user actually logs off)
		/// </summary>
		public override bool IsLoggedOn
		{
			get { return (bool)this[Usr.Columns.IsLoggedOn]; }
			set { this[Usr.Columns.IsLoggedOn] = value; }
		}
		/// <summary>
		/// The ticks of the last chat item
		/// </summary>
		public override long LastChatItem
		{
			get { return (long)this[Usr.Columns.LastChatItem]; }
			set { this[Usr.Columns.LastChatItem] = value; }
		}
		/// <summary>
		/// Last IP that the user accessed the site from
		/// </summary>
		public override string LastIp
		{
			get { return (string)this[Usr.Columns.LastIp]; }
			set { this[Usr.Columns.LastIp] = value; }
		}
		/// <summary>
		/// Ignore - this hides chat messages from this user / doesn't send out comment alert emails etc.
		/// </summary>
		public override bool Ignore
		{
			get { return (bool)this[Usr.Columns.Ignore]; }
			set { this[Usr.Columns.Ignore] = value; }
		}
		/// <summary>
		/// Is this user a pro spotter?
		/// </summary>
		public override bool IsProSpotter
		{
			get { return (bool)this[Usr.Columns.IsProSpotter]; }
			set { this[Usr.Columns.IsProSpotter] = value; }
		}
		/// <summary>
		/// ID of the last invite that was sent to this user. Ensures we don't send duplicate event invite PM's to people.
		/// </summary>
		public override int LastInvite
		{
			get { return (int)this[Usr.Columns.LastInvite]; }
			set { this[Usr.Columns.LastInvite] = value; }
		}
		/// <summary>
		/// Who was the first person to take a photo of this user?
		/// </summary>
		public override int IntroducedByUsrK
		{
			get { return (int)this[Usr.Columns.IntroducedByUsrK]; }
			set { this[Usr.Columns.IntroducedByUsrK] = value; }
		}
		/// <summary>
		/// Can we send this user e-flyers?
		/// </summary>
		public override bool SendFlyers
		{
			get { return (bool)this[Usr.Columns.SendFlyers]; }
			set { this[Usr.Columns.SendFlyers] = value; }
		}
		/// <summary>
		/// Can we send this user party invites?
		/// </summary>
		public override bool SendInvites
		{
			get { return (bool)this[Usr.Columns.SendInvites]; }
			set { this[Usr.Columns.SendInvites] = value; }
		}
		/// <summary>
		/// Total number of enabled photos this usr has added
		/// </summary>
		public override int TotalPhotoUploads
		{
			get { return (int)this[Usr.Columns.TotalPhotoUploads]; }
			set { this[Usr.Columns.TotalPhotoUploads] = value; }
		}
		/// <summary>
		/// Temp int used when sending bulk stuff
		/// </summary>
		public override int TempInt
		{
			get { return (int)this[Usr.Columns.TempInt]; }
			set { this[Usr.Columns.TempInt] = value; }
		}
		/// <summary>
		/// Ask the user for their password on each auto-login?
		/// </summary>
		public override bool EnhancedSecurity
		{
			get { return (bool)this[Usr.Columns.EnhancedSecurity]; }
			set { this[Usr.Columns.EnhancedSecurity] = value; }
		}
		/// <summary>
		/// Address - Street
		/// </summary>
		public override string AddressStreet
		{
			get { return (string)this[Usr.Columns.AddressStreet]; }
			set { this[Usr.Columns.AddressStreet] = value; }
		}
		/// <summary>
		/// Address - Area
		/// </summary>
		public override string AddressArea
		{
			get { return (string)this[Usr.Columns.AddressArea]; }
			set { this[Usr.Columns.AddressArea] = value; }
		}
		/// <summary>
		/// Address - Place
		/// </summary>
		public override string AddressTown
		{
			get { return (string)this[Usr.Columns.AddressTown]; }
			set { this[Usr.Columns.AddressTown] = value; }
		}
		/// <summary>
		/// Address - County
		/// </summary>
		public override string AddressCounty
		{
			get { return (string)this[Usr.Columns.AddressCounty]; }
			set { this[Usr.Columns.AddressCounty] = value; }
		}
		/// <summary>
		/// Address - Postcode
		/// </summary>
		public override string AddressPostcode
		{
			get { return (string)this[Usr.Columns.AddressPostcode]; }
			set { this[Usr.Columns.AddressPostcode] = value; }
		}
		/// <summary>
		/// Address - Country (link to Country table)
		/// </summary>
		public override int AddressCountryK
		{
			get { return (int)this[Usr.Columns.AddressCountryK]; }
			set { this[Usr.Columns.AddressCountryK] = value; }
		}
		/// <summary>
		/// New=3, WelcomePackInPost=4, HaveCards=0, NeedCards=1, CardsInPost=2
		/// </summary>
		public override int CardStatus
		{
			get { return (int)this[Usr.Columns.CardStatus]; }
			set { this[Usr.Columns.CardStatus] = value; }
		}
		/// <summary>
		/// Tracks the total number of cards that we've sent to this spotter.
		/// </summary>
		public override int TotalCardsSent
		{
			get { return (int)this[Usr.Columns.TotalCardsSent]; }
			set { this[Usr.Columns.TotalCardsSent] = value; }
		}
		/// <summary>
		/// Is this user a spotter?
		/// </summary>
		public override bool IsSpotter
		{
			get { return (bool)this[Usr.Columns.IsSpotter]; }
			set { this[Usr.Columns.IsSpotter] = value; }
		}
		/// <summary>
		/// Is this user banned?
		/// </summary>
		public override bool Banned
		{
			get { return (bool)this[Usr.Columns.Banned]; }
			set { this[Usr.Columns.Banned] = value; }
		}
		/// <summary>
		/// Who banned this user?
		/// </summary>
		public override int BannedByUsrK
		{
			get { return (int)this[Usr.Columns.BannedByUsrK]; }
			set { this[Usr.Columns.BannedByUsrK] = value; }
		}
		/// <summary>
		/// When were they banned?
		/// </summary>
		public override DateTime BannedDateTime
		{
			get { return (DateTime)this[Usr.Columns.BannedDateTime]; }
			set { this[Usr.Columns.BannedDateTime] = value; }
		}
		/// <summary>
		/// Why were they banned?
		/// </summary>
		public override string BannedReason
		{
			get { return (string)this[Usr.Columns.BannedReason]; }
			set { this[Usr.Columns.BannedReason] = value; }
		}
		/// <summary>
		/// Send generic music types in the update email?
		/// </summary>
		public override bool UpdateSendGenericMusic
		{
			get { return (bool)this[Usr.Columns.UpdateSendGenericMusic]; }
			set { this[Usr.Columns.UpdateSendGenericMusic] = value; }
		}
		/// <summary>
		/// Include large events in other parts of the country in the update email?
		/// </summary>
		public override int UpdateLargeEvents
		{
			get { return (int)this[Usr.Columns.UpdateLargeEvents]; }
			set { this[Usr.Columns.UpdateLargeEvents] = value; }
		}
		/// <summary>
		/// Include all events that my buddies are going to in the update email?
		/// </summary>
		public override bool UpdateSendBuddies
		{
			get { return (bool)this[Usr.Columns.UpdateSendBuddies]; }
			set { this[Usr.Columns.UpdateSendBuddies] = value; }
		}
		/// <summary>
		/// State var used to reconstruct cropper when re-cropping
		/// </summary>
		public override string PicState
		{
			get { return (string)this[Usr.Columns.PicState]; }
			set { this[Usr.Columns.PicState] = value; }
		}
		/// <summary>
		/// The Photo that was used to create the Pic.
		/// </summary>
		public override int PicPhotoK
		{
			get { return (int)this[Usr.Columns.PicPhotoK]; }
			set { this[Usr.Columns.PicPhotoK] = value; }
		}
		/// <summary>
		/// The Misc that was used to create the Pic.
		/// </summary>
		public override int PicMiscK
		{
			get { return (int)this[Usr.Columns.PicMiscK]; }
			set { this[Usr.Columns.PicMiscK] = value; }
		}
		/// <summary>
		/// Is the live chat box turned on?
		/// </summary>
		public override bool IsChatting
		{
			get { return (bool)this[Usr.Columns.IsChatting]; }
			set { this[Usr.Columns.IsChatting] = value; }
		}
		/// <summary>
		/// When was the last time this user gained / lost a buddy? - used when caching the buddies drop-down on the photo page
		/// </summary>
		public override DateTime LastBuddyChange
		{
			get { return (DateTime)this[Usr.Columns.LastBuddyChange]; }
			set { this[Usr.Columns.LastBuddyChange] = value; }
		}
		/// <summary>
		/// News moderator - they can moderate news
		/// </summary>
		public override bool NewsModerator
		{
			get { return (bool)this[Usr.Columns.NewsModerator]; }
			set { this[Usr.Columns.NewsModerator] = value; }
		}
		/// <summary>
		/// News permission - they can post news up to this level
		/// </summary>
		public override int NewsPermissionLevel
		{
			get { return (int)this[Usr.Columns.NewsPermissionLevel]; }
			set { this[Usr.Columns.NewsPermissionLevel] = value; }
		}
		/// <summary>
		/// Is this user a beta tester?
		/// </summary>
		public override bool IsBetaTester
		{
			get { return (bool)this[Usr.Columns.IsBetaTester]; }
			set { this[Usr.Columns.IsBetaTester] = value; }
		}
		/// <summary>
		/// How many places does this user visit?
		/// </summary>
		public override int PlacesVisitCount
		{
			get { return (int)this[Usr.Columns.PlacesVisitCount]; }
			set { this[Usr.Columns.PlacesVisitCount] = value; }
		}
		/// <summary>
		/// How many places does this user visit?
		/// </summary>
		public override int MusicTypesFavouriteCount
		{
			get { return (int)this[Usr.Columns.MusicTypesFavouriteCount]; }
			set { this[Usr.Columns.MusicTypesFavouriteCount] = value; }
		}
		/// <summary>
		/// How many places does this user visit?
		/// </summary>
		public override int PhotosMeCount
		{
			get { return (int)this[Usr.Columns.PhotosMeCount]; }
			set { this[Usr.Columns.PhotosMeCount] = value; }
		}
		/// <summary>
		/// Is this user a skeleton?
		/// </summary>
		public override bool IsSkeleton
		{
			get { return (bool)this[Usr.Columns.IsSkeleton]; }
			set { this[Usr.Columns.IsSkeleton] = value; }
		}
		/// <summary>
		/// Don't send inbox emails?
		/// </summary>
		public override bool NoInboxEmails
		{
			get { return (bool)this[Usr.Columns.NoInboxEmails]; }
			set { this[Usr.Columns.NoInboxEmails] = value; }
		}
		/// <summary>
		/// Number of abuse reports this user has submitted that are pending
		/// </summary>
		public override int AbuseReportsPending
		{
			get { return (int)this[Usr.Columns.AbuseReportsPending]; }
			set { this[Usr.Columns.AbuseReportsPending] = value; }
		}
		/// <summary>
		/// Number of abuse reports this user has submitted that were useful (abuse or noabuse)
		/// </summary>
		public override int AbuseReportsUseful
		{
			get { return (int)this[Usr.Columns.AbuseReportsUseful]; }
			set { this[Usr.Columns.AbuseReportsUseful] = value; }
		}
		/// <summary>
		/// Number of abuse reports this user has submitted that were overturned
		/// </summary>
		public override int AbuseReportsOverturned
		{
			get { return (int)this[Usr.Columns.AbuseReportsOverturned]; }
			set { this[Usr.Columns.AbuseReportsOverturned] = value; }
		}
		/// <summary>
		/// Number of abuse accusations this user has had made against them that are pending
		/// </summary>
		public override int AbuseAccusationsPending
		{
			get { return (int)this[Usr.Columns.AbuseAccusationsPending]; }
			set { this[Usr.Columns.AbuseAccusationsPending] = value; }
		}
		/// <summary>
		/// Number of abuse accusations this user has had made against them that are were found to be abuse
		/// </summary>
		public override int AbuseAccusationsAbuse
		{
			get { return (int)this[Usr.Columns.AbuseAccusationsAbuse]; }
			set { this[Usr.Columns.AbuseAccusationsAbuse] = value; }
		}
		/// <summary>
		/// Number of abuse accusations this user has had made against them that are were found to not be abusive
		/// </summary>
		public override int AbuseAccusationsNoAbuse
		{
			get { return (int)this[Usr.Columns.AbuseAccusationsNoAbuse]; }
			set { this[Usr.Columns.AbuseAccusationsNoAbuse] = value; }
		}
		/// <summary>
		/// Should this users photos be moderated prior to going live?
		/// </summary>
		public override bool ModeratePhotos
		{
			get { return (bool)this[Usr.Columns.ModeratePhotos]; }
			set { this[Usr.Columns.ModeratePhotos] = value; }
		}
		/// <summary>
		/// Id used for stopping multiple browser pages hogging chat bandwidth
		/// </summary>
		public override int ChatSessionId
		{
			get { return (int)this[Usr.Columns.ChatSessionId]; }
			set { this[Usr.Columns.ChatSessionId] = value; }
		}
		/// <summary>
		/// If the group invite page was used to add this user, this is the inviting group
		/// </summary>
		public override int AddedByGroupK
		{
			get { return (int)this[Usr.Columns.AddedByGroupK]; }
			set { this[Usr.Columns.AddedByGroupK] = value; }
		}
		/// <summary>
		/// Which icon is displayed? 0=None, 1=Dog
		/// </summary>
		public override int DonateIcon
		{
			get { return (int)this[Usr.Columns.DonateIcon]; }
			set { this[Usr.Columns.DonateIcon] = value; }
		}
		/// <summary>
		/// When does the icon expire?
		/// </summary>
		public override DateTime DonateExpire
		{
			get { return (DateTime)this[Usr.Columns.DonateExpire]; }
			set { this[Usr.Columns.DonateExpire] = value; }
		}
		/// <summary>
		/// Date/time when the email was last changed
		/// </summary>
		public override DateTime EmailDateTime
		{
			get { return (DateTime)this[Usr.Columns.EmailDateTime]; }
			set { this[Usr.Columns.EmailDateTime] = value; }
		}
		/// <summary>
		/// Ip of the client when the email address was entered
		/// </summary>
		public override string EmailIp
		{
			get { return (string)this[Usr.Columns.EmailIp]; }
			set { this[Usr.Columns.EmailIp] = value; }
		}
		/// <summary>
		/// Is the user unsubscribed from emails?
		/// </summary>
		public override bool EmailHold
		{
			get { return (bool)this[Usr.Columns.EmailHold]; }
			set { this[Usr.Columns.EmailHold] = value; }
		}
		/// <summary>
		/// Can this user edit plain HTML?
		/// </summary>
		public override bool IsHtmlEditor
		{
			get { return (bool)this[Usr.Columns.IsHtmlEditor]; }
			set { this[Usr.Columns.IsHtmlEditor] = value; }
		}
		/// <summary>
		/// Is this user a moderator of any groups?
		/// </summary>
		public override bool IsGroupModerator
		{
			get { return (bool)this[Usr.Columns.IsGroupModerator]; }
			set { this[Usr.Columns.IsGroupModerator] = value; }
		}
		/// <summary>
		/// Is this skeleton user from the sign-up page - e.g. Entered their email address and password ONCE.
		/// </summary>
		public override bool IsSkeletonFromSignup
		{
			get { return (bool)this[Usr.Columns.IsSkeletonFromSignup]; }
			set { this[Usr.Columns.IsSkeletonFromSignup] = value; }
		}
		/// <summary>
		/// Extra icon displayed on the profile
		/// </summary>
		public override int ExtraIcon
		{
			get { return (int)this[Usr.Columns.ExtraIcon]; }
			set { this[Usr.Columns.ExtraIcon] = value; }
		}
		/// <summary>
		/// When does the extra icon expire?
		/// </summary>
		public override DateTime ExtraExpire
		{
			get { return (DateTime)this[Usr.Columns.ExtraExpire]; }
			set { this[Usr.Columns.ExtraExpire] = value; }
		}
		/// <summary>
		/// Total number of distinct users I have taken a photo of
		/// </summary>
		public override int SpottingsTotal
		{
			get { return (int)this[Usr.Columns.SpottingsTotal]; }
			set { this[Usr.Columns.SpottingsTotal] = value; }
		}
		/// <summary>
		/// Total number of distinct users I have taken a photo of in the last month (updated hourly?)
		/// </summary>
		public override int SpottingsMonth
		{
			get { return (int)this[Usr.Columns.SpottingsMonth]; }
			set { this[Usr.Columns.SpottingsMonth] = value; }
		}
		/// <summary>
		/// Ranking in busiest spotters list (month only)
		/// </summary>
		public override int SpottingsMonthRank
		{
			get { return (int)this[Usr.Columns.SpottingsMonthRank]; }
			set { this[Usr.Columns.SpottingsMonthRank] = value; }
		}
		/// <summary>
		/// Is this user part of a promoter account?
		/// </summary>
		public override bool IsPromoter
		{
			get { return (bool)this[Usr.Columns.IsPromoter]; }
			set { this[Usr.Columns.IsPromoter] = value; }
		}
		/// <summary>
		/// Number of Camp DSI tickets this user has bought
		/// </summary>
		public override int CampTickets
		{
			get { return (int)this[Usr.Columns.CampTickets]; }
			set { this[Usr.Columns.CampTickets] = value; }
		}
		/// <summary>
		/// Has this user bought a dsi ticket?
		/// </summary>
		public override bool HasTicket
		{
			get { return (bool)this[Usr.Columns.HasTicket]; }
			set { this[Usr.Columns.HasTicket] = value; }
		}
		/// <summary>
		/// What's the date/time of the last event the member has a ticket for?
		/// </summary>
		public override DateTime LastTicketEventDateTime
		{
			get { return (DateTime)this[Usr.Columns.LastTicketEventDateTime]; }
			set { this[Usr.Columns.LastTicketEventDateTime] = value; }
		}
		/// <summary>
		/// Cryptographic hash of the password
		/// </summary>
		public Guid	PasswordHash
		{
			get{ return Cambro.Misc.Db.GuidConvertor(this[Usr.Columns.PasswordHash]);}		
			set{ this[Usr.Columns.PasswordHash] = new System.Data.SqlTypes.SqlGuid(value);}
		}
		/// <summary>
		/// Cryptographic salt used to generate password hash
		/// </summary>
		public Guid	PasswordSalt
		{
			get{ return Cambro.Misc.Db.GuidConvertor(this[Usr.Columns.PasswordSalt]);}		
			set{ this[Usr.Columns.PasswordSalt] = new System.Data.SqlTypes.SqlGuid(value);}
		}
		/// <summary>
		/// Secret data used to verify password reset page
		/// </summary>
		public override string PasswordResetEmailSecret
		{
			get { return (string)this[Usr.Columns.PasswordResetEmailSecret]; }
			set { this[Usr.Columns.PasswordResetEmailSecret] = value; }
		}
		/// <summary>
		/// Has this user agreed to the new terms of use
		/// </summary>
		public override bool LegalTermsUser1
		{
			get { return (bool)this[Usr.Columns.LegalTermsUser1]; }
			set { this[Usr.Columns.LegalTermsUser1] = value; }
		}
		/// <summary>
		/// Has this user agreed to the new terms for promoters
		/// </summary>
		public override bool LegalTermsPromoter1
		{
			get { return (bool)this[Usr.Columns.LegalTermsPromoter1]; }
			set { this[Usr.Columns.LegalTermsPromoter1] = value; }
		}
		/// <summary>
		/// Is the user a super admin user?
		/// </summary>
		public override bool IsSuperAdmin
		{
			get { return (bool)this[Usr.Columns.IsSuperAdmin]; }
			set { this[Usr.Columns.IsSuperAdmin] = value; }
		}
		/// <summary>
		/// Is the user a sales person?
		/// </summary>
		public override bool IsSalesPerson
		{
			get { return (bool)this[Usr.Columns.IsSalesPerson]; }
			set { this[Usr.Columns.IsSalesPerson] = value; }
		}
		/// <summary>
		/// Time stamp to record when someone is trying to purchase an IBuyable item that is linked to this Bob. No lock = DateTime.MinValue
		/// </summary>
		public override DateTime BuyableLockDateTime
		{
			get { return (DateTime)this[Usr.Columns.BuyableLockDateTime]; }
			set { this[Usr.Columns.BuyableLockDateTime] = value; }
		}
		/// <summary>
		/// For sales people: their sales team number
		/// </summary>
		public override int SalesTeam
		{
			get { return (int)this[Usr.Columns.SalesTeam]; }
			set { this[Usr.Columns.SalesTeam] = value; }
		}
		/// <summary>
		/// A guid identifier for the Usr
		/// </summary>
		public Guid	Guid
		{
			get{ return Cambro.Misc.Db.GuidConvertor(this[Usr.Columns.Guid]);}		
			set{ this[Usr.Columns.Guid] = new System.Data.SqlTypes.SqlGuid(value);}
		}
		/// <summary>
		/// Has the user agreed to the new (2007-06) user terms?
		/// </summary>
		public override bool LegalTermsUser2
		{
			get { return (bool)this[Usr.Columns.LegalTermsUser2]; }
			set { this[Usr.Columns.LegalTermsUser2] = value; }
		}
		/// <summary>
		/// Has the user agreed to the new (2007-06) promoter terms?
		/// </summary>
		public override bool LegalTermsPromoter2
		{
			get { return (bool)this[Usr.Columns.LegalTermsPromoter2]; }
			set { this[Usr.Columns.LegalTermsPromoter2] = value; }
		}
		/// <summary>
		/// Datetime of this users last photo upload
		/// </summary>
		public override DateTime LastPhotoUpload
		{
			get { return (DateTime)this[Usr.Columns.LastPhotoUpload]; }
			set { this[Usr.Columns.LastPhotoUpload] = value; }
		}
		/// <summary>
		/// Date/time of the tuesday that the last update email that was delivered to this user. Used to make the update email restartable
		/// </summary>
		public override DateTime DateTimeLastUpdateEmail
		{
			get { return (DateTime)this[Usr.Columns.DateTimeLastUpdateEmail]; }
			set { this[Usr.Columns.DateTimeLastUpdateEmail] = value; }
		}
		/// <summary>
		/// Was this usr invited using the contact importer device?
		/// </summary>
		public override bool InvitedViaContactImporter
		{
			get { return (bool)this[Usr.Columns.InvitedViaContactImporter]; }
			set { this[Usr.Columns.InvitedViaContactImporter] = value; }
		}
		/// <summary>
		/// Has the user registered through a styled tickets microsite?
		/// </summary>
		public override bool IsTicketsRegistered
		{
			get { return (bool)this[Usr.Columns.IsTicketsRegistered]; }
			set { this[Usr.Columns.IsTicketsRegistered] = value; }
		}
		/// <summary>
		/// Disallow this usr's profile to be found by searching name or email address?
		/// </summary>
		public override bool ExDirectory
		{
			get { return (bool)this[Usr.Columns.ExDirectory]; }
			set { this[Usr.Columns.ExDirectory] = value; }
		}
		/// <summary>
		/// Did a recent email to this user suffer a hard bounce?
		/// </summary>
		public override bool IsEmailBroken
		{
			get { return (bool)this[Usr.Columns.IsEmailBroken]; }
			set { this[Usr.Columns.IsEmailBroken] = value; }
		}
		/// <summary>
		/// When was the last chat message posted?
		/// </summary>
		public override DateTime? DateTimeLastChatMessage
		{
			get { return (DateTime?)this[Usr.Columns.DateTimeLastChatMessage]; }
			set { this[Usr.Columns.DateTimeLastChatMessage] = value; }
		}
		/// <summary>
		/// The Donation Icon, if applicable, which the user will have appear in their rollover
		/// </summary>
		public override int? RolloverDonationIconK
		{
			get { return (int?)this[Usr.Columns.RolloverDonationIconK]; }
			set { this[Usr.Columns.RolloverDonationIconK] = value; }
		}
		/// <summary>
		/// Guid of the chat pic (300px x 100px)
		/// </summary>
		public override Guid? ChatPic
		{
			get { return (Guid?)this[Usr.Columns.ChatPic]; }
			set { this[Usr.Columns.ChatPic] = value; }
		}
		/// <summary>
		/// PhotoK that the chat pic was cropped from
		/// </summary>
		public override int? ChatPicPhotoK
		{
			get { return (int?)this[Usr.Columns.ChatPicPhotoK]; }
			set { this[Usr.Columns.ChatPicPhotoK] = value; }
		}
		/// <summary>
		/// State of the cropper for the chat pic
		/// </summary>
		public override string ChatPicState
		{
			get { return (string)this[Usr.Columns.ChatPicState]; }
			set { this[Usr.Columns.ChatPicState] = value; }
		}
		/// <summary>
		/// Date / time that the buddy alerts room was last refreshed
		/// </summary>
		public override DateTime? DateTimeLastBuddyAlertsRoomRefresh
		{
			get { return (DateTime?)this[Usr.Columns.DateTimeLastBuddyAlertsRoomRefresh]; }
			set { this[Usr.Columns.DateTimeLastBuddyAlertsRoomRefresh] = value; }
		}
		/// <summary>
		/// Photo usage permission
		/// </summary>
		public override int PhotoUsage
		{
			get { return (int)this[Usr.Columns.PhotoUsage]; }
			set { this[Usr.Columns.PhotoUsage] = value; }
		}
		/// <summary>
		/// Facebook user id
		/// </summary>
		public override long? FacebookUID
		{
			get { return (long?)this[Usr.Columns.FacebookUID]; }
			set { this[Usr.Columns.FacebookUID] = value; }
		}
		/// <summary>
		/// Facebook connect linked
		/// </summary>
		public override bool FacebookConnected
		{
			get { return (bool)this[Usr.Columns.FacebookConnected]; }
			set { this[Usr.Columns.FacebookConnected] = value; }
		}
		/// <summary>
		/// Facebook connect linked date/time
		/// </summary>
		public override DateTime? FacebookConnectedDateTime
		{
			get { return (DateTime?)this[Usr.Columns.FacebookConnectedDateTime]; }
			set { this[Usr.Columns.FacebookConnectedDateTime] = value; }
		}
		/// <summary>
		/// Facebook email extended permission
		/// </summary>
		public override bool FacebookPermissionEmail
		{
			get { return (bool)this[Usr.Columns.FacebookPermissionEmail]; }
			set { this[Usr.Columns.FacebookPermissionEmail] = value; }
		}
		/// <summary>
		/// Facebook publish_stream extended permission
		/// </summary>
		public override bool FacebookPermissionPublish
		{
			get { return (bool)this[Usr.Columns.FacebookPermissionPublish]; }
			set { this[Usr.Columns.FacebookPermissionPublish] = value; }
		}
		/// <summary>
		/// Facebook create_event extended permission
		/// </summary>
		public override bool FacebookPermissionEvent
		{
			get { return (bool)this[Usr.Columns.FacebookPermissionEvent]; }
			set { this[Usr.Columns.FacebookPermissionEvent] = value; }
		}
		/// <summary>
		/// Facebook rsvp_event extended permission
		/// </summary>
		public override bool FacebookPermissionRsvp
		{
			get { return (bool)this[Usr.Columns.FacebookPermissionRsvp]; }
			set { this[Usr.Columns.FacebookPermissionRsvp] = value; }
		}
		/// <summary>
		/// Post a facebook stream story when I attend events
		/// </summary>
		public override bool FacebookStoryAttendEvent
		{
			get { return (bool)this[Usr.Columns.FacebookStoryAttendEvent]; }
			set { this[Usr.Columns.FacebookStoryAttendEvent] = value; }
		}
		/// <summary>
		/// Post a facebook stream story when I buy tickets
		/// </summary>
		public override bool FacebookStoryBuyTicket
		{
			get { return (bool)this[Usr.Columns.FacebookStoryBuyTicket]; }
			set { this[Usr.Columns.FacebookStoryBuyTicket] = value; }
		}
		/// <summary>
		/// Post a facebook stream story when I upload photos
		/// </summary>
		public override bool FacebookStoryUploadPhoto
		{
			get { return (bool)this[Usr.Columns.FacebookStoryUploadPhoto]; }
			set { this[Usr.Columns.FacebookStoryUploadPhoto] = value; }
		}
		/// <summary>
		/// Post a facebook stream story when I get spotted in photos
		/// </summary>
		public override bool FacebookStorySpotted
		{
			get { return (bool)this[Usr.Columns.FacebookStorySpotted]; }
			set { this[Usr.Columns.FacebookStorySpotted] = value; }
		}
		/// <summary>
		/// Post a facebook stream story when I have a photo featured on the front page
		/// </summary>
		public override bool FacebookStoryPhotoFeatured
		{
			get { return (bool)this[Usr.Columns.FacebookStoryPhotoFeatured]; }
			set { this[Usr.Columns.FacebookStoryPhotoFeatured] = value; }
		}
		/// <summary>
		/// Post a facebook stream story when I make a new buddy
		/// </summary>
		public override bool FacebookStoryNewBuddy
		{
			get { return (bool)this[Usr.Columns.FacebookStoryNewBuddy]; }
			set { this[Usr.Columns.FacebookStoryNewBuddy] = value; }
		}
		/// <summary>
		/// Post a facebook stream story when I publish an article
		/// </summary>
		public override bool FacebookStoryPublishArticle
		{
			get { return (bool)this[Usr.Columns.FacebookStoryPublishArticle]; }
			set { this[Usr.Columns.FacebookStoryPublishArticle] = value; }
		}
		/// <summary>
		/// Post a facebook stream story when I join a group
		/// </summary>
		public override bool FacebookStoryJoinGroup
		{
			get { return (bool)this[Usr.Columns.FacebookStoryJoinGroup]; }
			set { this[Usr.Columns.FacebookStoryJoinGroup] = value; }
		}
		/// <summary>
		/// Post a facebook stream story when I put stuff on my favourites
		/// </summary>
		public override bool FacebookStoryFavourite
		{
			get { return (bool)this[Usr.Columns.FacebookStoryFavourite]; }
			set { this[Usr.Columns.FacebookStoryFavourite] = value; }
		}
		/// <summary>
		/// Post a facebook stream story when I post new topics
		/// </summary>
		public override bool FacebookStoryNewTopic
		{
			get { return (bool)this[Usr.Columns.FacebookStoryNewTopic]; }
			set { this[Usr.Columns.FacebookStoryNewTopic] = value; }
		}
		/// <summary>
		/// Post a facebook stream story when I post an event review
		/// </summary>
		public override bool FacebookStoryEventReview
		{
			get { return (bool)this[Usr.Columns.FacebookStoryEventReview]; }
			set { this[Usr.Columns.FacebookStoryEventReview] = value; }
		}
		/// <summary>
		/// Post a facebook stream story when I post news
		/// </summary>
		public override bool FacebookStoryPostNews
		{
			get { return (bool)this[Usr.Columns.FacebookStoryPostNews]; }
			set { this[Usr.Columns.FacebookStoryPostNews] = value; }
		}
		/// <summary>
		/// Post a facebook stream story when I laugh at a comment
		/// </summary>
		public override bool FacebookStoryLaugh
		{
			get { return (bool)this[Usr.Columns.FacebookStoryLaugh]; }
			set { this[Usr.Columns.FacebookStoryLaugh] = value; }
		}
		/// <summary>
		/// Add an event to facebook when I add an event
		/// </summary>
		public override bool FacebookEventAdd
		{
			get { return (bool)this[Usr.Columns.FacebookEventAdd]; }
			set { this[Usr.Columns.FacebookEventAdd] = value; }
		}
		/// <summary>
		/// Add me on Facebook when I attend an event
		/// </summary>
		public override bool FacebookEventAttend
		{
			get { return (bool)this[Usr.Columns.FacebookEventAttend]; }
			set { this[Usr.Columns.FacebookEventAttend] = value; }
		}
		/// <summary>
		/// Facebook email
		/// </summary>
		public override string FacebookEmail
		{
			get { return (string)this[Usr.Columns.FacebookEmail]; }
			set { this[Usr.Columns.FacebookEmail] = value; }
		}
		/// <summary>
		/// Is this user a DJ?
		/// </summary>
		public override bool? IsDj
		{
			get { return (bool?)this[Usr.Columns.IsDj]; }
			set { this[Usr.Columns.IsDj] = value; }
		}
		/// <summary>
		/// Main Facebook Story permission - Well update your Facebook wall when you create stuff
		/// </summary>
		public override bool? FacebookStory
		{
			get { return (bool?)this[Usr.Columns.FacebookStory]; }
			set { this[Usr.Columns.FacebookStory] = value; }
		}
		/// <summary>
		/// Main Facebook Story permission - Well update your Facebook wall when you create stuff
		/// </summary>
		public override bool FacebookStory1
		{
			get { return (bool)this[Usr.Columns.FacebookStory1]; }
			set { this[Usr.Columns.FacebookStory1] = value; }
		}
		/// <summary>
		/// Access token needed for offline access
		/// </summary>
		public override string FacebookAccessToken
		{
			get { return (string)this[Usr.Columns.FacebookAccessToken]; }
			set { this[Usr.Columns.FacebookAccessToken] = value; }
		}
		/// <summary>
		/// Post a facebook stream story when I put topics on my favourites
		/// </summary>
		public override bool FacebookStoryFavouriteTopic
		{
			get { return (bool)this[Usr.Columns.FacebookStoryFavouriteTopic]; }
			set { this[Usr.Columns.FacebookStoryFavouriteTopic] = value; }
		}
		/// <summary>
		/// Does this user need a captcha for security?
		/// </summary>
		public override bool? NeedsCaptcha
		{
			get { return (bool?)this[Usr.Columns.NeedsCaptcha]; }
			set { this[Usr.Columns.NeedsCaptcha] = value; }
		}
		/// <summary>
		/// Has this user correctly passed the captcha test?
		/// </summary>
		public override bool? PassedCaptcha
		{
			get { return (bool?)this[Usr.Columns.PassedCaptcha]; }
			set { this[Usr.Columns.PassedCaptcha] = value; }
		}
		/// <summary>
		/// Date/time of the start of the month that bounce mails are being counted
		/// </summary>
		public override DateTime? BouncePeriodDateTime
		{
			get { return (DateTime?)this[Usr.Columns.BouncePeriodDateTime]; }
			set { this[Usr.Columns.BouncePeriodDateTime] = value; }
		}
		/// <summary>
		/// Total emails sent in the bounce mail period
		/// </summary>
		public override int? TotalEmailsSentInPeriod
		{
			get { return (int?)this[Usr.Columns.TotalEmailsSentInPeriod]; }
			set { this[Usr.Columns.TotalEmailsSentInPeriod] = value; }
		}
		/// <summary>
		/// Total hard bounces with a matching string detected in the bounce period
		/// </summary>
		public override int? MatchedHardBounceInPeriod
		{
			get { return (int?)this[Usr.Columns.MatchedHardBounceInPeriod]; }
			set { this[Usr.Columns.MatchedHardBounceInPeriod] = value; }
		}
		/// <summary>
		/// Total hard bounces without a matching string detected in the bounce period
		/// </summary>
		public override int? UnmatchedHardBounceInPeriod
		{
			get { return (int?)this[Usr.Columns.UnmatchedHardBounceInPeriod]; }
			set { this[Usr.Columns.UnmatchedHardBounceInPeriod] = value; }
		}
		/// <summary>
		/// Total soft bounces detected in the bounce period
		/// </summary>
		public override int? SoftBounceInPeriod
		{
			get { return (int?)this[Usr.Columns.SoftBounceInPeriod]; }
			set { this[Usr.Columns.SoftBounceInPeriod] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildUsrs
	{
		CachedSqlSelect<Usr> ChildUsrs();
		CachedSqlSelect<Usr> ChildUsrs(Q where);
		CachedSqlSelect<Usr> ChildUsrs(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<Usr> ChildUsrs(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class Usr 
	 : 
	Bobs.ChildInterfaces.IHasChildAdmins
	,
	Bobs.ChildInterfaces.IHasChildBanners
	,
	Bobs.ChildInterfaces.IHasChildBuddys
	,
	Bobs.ChildInterfaces.IHasChildCampaignCredits
	,
	Bobs.ChildInterfaces.IHasChildChats
	,
	Bobs.ChildInterfaces.IHasChildChatMessages
	,
	Bobs.ChildInterfaces.IHasChildComments
	,
	Bobs.ChildInterfaces.IHasChildCommentAlerts
	,
	Bobs.ChildInterfaces.IHasChildCompEntrys
	,
	Bobs.ChildInterfaces.IHasChildFacebookPosts
	,
	Bobs.ChildInterfaces.IHasChildFiat500Entrys
	,
	Bobs.ChildInterfaces.IHasChildGalleryUsrs
	,
	Bobs.ChildInterfaces.IHasChildGroupUsrs
	,
	Bobs.ChildInterfaces.IHasChildHits
	,
	Bobs.ChildInterfaces.IHasChildInsertionOrders
	,
	Bobs.ChildInterfaces.IHasChildInvoices
	,
	Bobs.ChildInterfaces.IHasChildLogPageTimes
	,
	Bobs.ChildInterfaces.IHasChildLols
	,
	Bobs.ChildInterfaces.IHasChildMiscs
	,
	Bobs.ChildInterfaces.IHasChildMobiles
	,
	Bobs.ChildInterfaces.IHasChildPhones
	,
	Bobs.ChildInterfaces.IHasChildPhotos
	,
	Bobs.ChildInterfaces.IHasChildPhotoReviews
	,
	Bobs.ChildInterfaces.IHasChildPromoterUsrs
	,
	Bobs.ChildInterfaces.IHasChildRoomPins
	,
	Bobs.ChildInterfaces.IHasChildSalesCalls
	,
	Bobs.ChildInterfaces.IHasChildSalesCampaigns
	,
	Bobs.ChildInterfaces.IHasChildSalesStatusChanges
	,
	Bobs.ChildInterfaces.IHasChildSpottedExceptions
	,
	Bobs.ChildInterfaces.IHasChildTagPhotoHistorys
	,
	Bobs.ChildInterfaces.IHasChildThreads
	,
	Bobs.ChildInterfaces.IHasChildThreadUsrs
	,
	Bobs.ChildInterfaces.IHasChildTransfers
	,
	Bobs.ChildInterfaces.IHasChildUsrDates
	,
	Bobs.ChildInterfaces.IHasChildUsrDonationIcons
	,
	Bobs.ChildInterfaces.IHasChildUsrEventAttendeds
	,
	Bobs.ChildInterfaces.IHasChildUsrEventGuestlists
	,
	Bobs.ChildInterfaces.IHasChildUsrMusicTypeFavourites
	,
	Bobs.ChildInterfaces.IHasChildUsrPhotoFavourites
	,
	Bobs.ChildInterfaces.IHasChildUsrPhotoMes
	,
	Bobs.ChildInterfaces.IHasChildUsrPlaceVisits
	,
	Bobs.ChildInterfaces.IHasChildVisits
		{
			public CachedSqlSelect<Admin> ChildAdmins()
		{
			return this.ChildAdmins(null, null);
		}
		public CachedSqlSelect<Admin> ChildAdmins(Q where)
		{
			return this.ChildAdmins(where, null);
		}
		public CachedSqlSelect<Admin> ChildAdmins(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildAdmins(null, orderBy);
		}
		public CachedSqlSelect<Admin> ChildAdmins(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<Admin>
			(
				new Children<Admin>
				(
					TablesEnum.Usr, 
					this.K, 
					TablesEnum.Admin, 
					dr => 
					{ 
						Admin newAdmin = new Admin(); 
						newAdmin.Initialise(dr); 
						return newAdmin;
					},
					"FD30E1A8",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<Banner> ChildBanners()
		{
			return this.ChildBanners(null, null);
		}
		public CachedSqlSelect<Banner> ChildBanners(Q where)
		{
			return this.ChildBanners(where, null);
		}
		public CachedSqlSelect<Banner> ChildBanners(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildBanners(null, orderBy);
		}
		public CachedSqlSelect<Banner> ChildBanners(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<Banner>
			(
				new Children<Banner>
				(
					TablesEnum.Usr, 
					this.K, 
					TablesEnum.Banner, 
					dr => 
					{ 
						Banner newBanner = new Banner(); 
						newBanner.Initialise(dr); 
						return newBanner;
					},
					"73D8C33D",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<Buddy> ChildBuddys()
		{
			return this.ChildBuddys(null, null);
		}
		public CachedSqlSelect<Buddy> ChildBuddys(Q where)
		{
			return this.ChildBuddys(where, null);
		}
		public CachedSqlSelect<Buddy> ChildBuddys(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildBuddys(null, orderBy);
		}
		public CachedSqlSelect<Buddy> ChildBuddys(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<Buddy>
			(
				new Children<Buddy>
				(
					TablesEnum.Usr, 
					this.K, 
					TablesEnum.Buddy, 
					dr => 
					{ 
						Buddy newBuddy = new Buddy(); 
						newBuddy.Initialise(dr); 
						return newBuddy;
					},
					"85FC3E35",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<CampaignCredit> ChildCampaignCredits()
		{
			return this.ChildCampaignCredits(null, null);
		}
		public CachedSqlSelect<CampaignCredit> ChildCampaignCredits(Q where)
		{
			return this.ChildCampaignCredits(where, null);
		}
		public CachedSqlSelect<CampaignCredit> ChildCampaignCredits(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildCampaignCredits(null, orderBy);
		}
		public CachedSqlSelect<CampaignCredit> ChildCampaignCredits(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<CampaignCredit>
			(
				new Children<CampaignCredit>
				(
					TablesEnum.Usr, 
					this.K, 
					TablesEnum.CampaignCredit, 
					dr => 
					{ 
						CampaignCredit newCampaignCredit = new CampaignCredit(); 
						newCampaignCredit.Initialise(dr); 
						return newCampaignCredit;
					},
					"CDCF195E",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<Chat> ChildChats()
		{
			return this.ChildChats(null, null);
		}
		public CachedSqlSelect<Chat> ChildChats(Q where)
		{
			return this.ChildChats(where, null);
		}
		public CachedSqlSelect<Chat> ChildChats(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildChats(null, orderBy);
		}
		public CachedSqlSelect<Chat> ChildChats(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<Chat>
			(
				new Children<Chat>
				(
					TablesEnum.Usr, 
					this.K, 
					TablesEnum.Chat, 
					dr => 
					{ 
						Chat newChat = new Chat(); 
						newChat.Initialise(dr); 
						return newChat;
					},
					"497351AF",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<ChatMessage> ChildChatMessages()
		{
			return this.ChildChatMessages(null, null);
		}
		public CachedSqlSelect<ChatMessage> ChildChatMessages(Q where)
		{
			return this.ChildChatMessages(where, null);
		}
		public CachedSqlSelect<ChatMessage> ChildChatMessages(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildChatMessages(null, orderBy);
		}
		public CachedSqlSelect<ChatMessage> ChildChatMessages(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<ChatMessage>
			(
				new Children<ChatMessage>
				(
					TablesEnum.Usr, 
					this.K, 
					TablesEnum.ChatMessage, 
					dr => 
					{ 
						ChatMessage newChatMessage = new ChatMessage(); 
						newChatMessage.Initialise(dr); 
						return newChatMessage;
					},
					"FEBF12DC",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<Comment> ChildComments()
		{
			return this.ChildComments(null, null);
		}
		public CachedSqlSelect<Comment> ChildComments(Q where)
		{
			return this.ChildComments(where, null);
		}
		public CachedSqlSelect<Comment> ChildComments(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildComments(null, orderBy);
		}
		public CachedSqlSelect<Comment> ChildComments(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<Comment>
			(
				new Children<Comment>
				(
					TablesEnum.Usr, 
					this.K, 
					TablesEnum.Comment, 
					dr => 
					{ 
						Comment newComment = new Comment(); 
						newComment.Initialise(dr); 
						return newComment;
					},
					"B51CFA22",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<CommentAlert> ChildCommentAlerts()
		{
			return this.ChildCommentAlerts(null, null);
		}
		public CachedSqlSelect<CommentAlert> ChildCommentAlerts(Q where)
		{
			return this.ChildCommentAlerts(where, null);
		}
		public CachedSqlSelect<CommentAlert> ChildCommentAlerts(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildCommentAlerts(null, orderBy);
		}
		public CachedSqlSelect<CommentAlert> ChildCommentAlerts(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<CommentAlert>
			(
				new Children<CommentAlert>
				(
					TablesEnum.Usr, 
					this.K, 
					TablesEnum.CommentAlert, 
					dr => 
					{ 
						CommentAlert newCommentAlert = new CommentAlert(); 
						newCommentAlert.Initialise(dr); 
						return newCommentAlert;
					},
					"E8EF0595",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<CompEntry> ChildCompEntrys()
		{
			return this.ChildCompEntrys(null, null);
		}
		public CachedSqlSelect<CompEntry> ChildCompEntrys(Q where)
		{
			return this.ChildCompEntrys(where, null);
		}
		public CachedSqlSelect<CompEntry> ChildCompEntrys(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildCompEntrys(null, orderBy);
		}
		public CachedSqlSelect<CompEntry> ChildCompEntrys(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<CompEntry>
			(
				new Children<CompEntry>
				(
					TablesEnum.Usr, 
					this.K, 
					TablesEnum.CompEntry, 
					dr => 
					{ 
						CompEntry newCompEntry = new CompEntry(); 
						newCompEntry.Initialise(dr); 
						return newCompEntry;
					},
					"CEEC0128",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<FacebookPost> ChildFacebookPosts()
		{
			return this.ChildFacebookPosts(null, null);
		}
		public CachedSqlSelect<FacebookPost> ChildFacebookPosts(Q where)
		{
			return this.ChildFacebookPosts(where, null);
		}
		public CachedSqlSelect<FacebookPost> ChildFacebookPosts(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildFacebookPosts(null, orderBy);
		}
		public CachedSqlSelect<FacebookPost> ChildFacebookPosts(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<FacebookPost>
			(
				new Children<FacebookPost>
				(
					TablesEnum.Usr, 
					this.K, 
					TablesEnum.FacebookPost, 
					dr => 
					{ 
						FacebookPost newFacebookPost = new FacebookPost(); 
						newFacebookPost.Initialise(dr); 
						return newFacebookPost;
					},
					"6D42EC75",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<Fiat500Entry> ChildFiat500Entrys()
		{
			return this.ChildFiat500Entrys(null, null);
		}
		public CachedSqlSelect<Fiat500Entry> ChildFiat500Entrys(Q where)
		{
			return this.ChildFiat500Entrys(where, null);
		}
		public CachedSqlSelect<Fiat500Entry> ChildFiat500Entrys(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildFiat500Entrys(null, orderBy);
		}
		public CachedSqlSelect<Fiat500Entry> ChildFiat500Entrys(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<Fiat500Entry>
			(
				new Children<Fiat500Entry>
				(
					TablesEnum.Usr, 
					this.K, 
					TablesEnum.Fiat500Entry, 
					dr => 
					{ 
						Fiat500Entry newFiat500Entry = new Fiat500Entry(); 
						newFiat500Entry.Initialise(dr); 
						return newFiat500Entry;
					},
					"79123DA7",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<GalleryUsr> ChildGalleryUsrs()
		{
			return this.ChildGalleryUsrs(null, null);
		}
		public CachedSqlSelect<GalleryUsr> ChildGalleryUsrs(Q where)
		{
			return this.ChildGalleryUsrs(where, null);
		}
		public CachedSqlSelect<GalleryUsr> ChildGalleryUsrs(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildGalleryUsrs(null, orderBy);
		}
		public CachedSqlSelect<GalleryUsr> ChildGalleryUsrs(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<GalleryUsr>
			(
				new Children<GalleryUsr>
				(
					TablesEnum.Usr, 
					this.K, 
					TablesEnum.GalleryUsr, 
					dr => 
					{ 
						GalleryUsr newGalleryUsr = new GalleryUsr(); 
						newGalleryUsr.Initialise(dr); 
						return newGalleryUsr;
					},
					"73FAB6DB",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<GroupUsr> ChildGroupUsrs()
		{
			return this.ChildGroupUsrs(null, null);
		}
		public CachedSqlSelect<GroupUsr> ChildGroupUsrs(Q where)
		{
			return this.ChildGroupUsrs(where, null);
		}
		public CachedSqlSelect<GroupUsr> ChildGroupUsrs(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildGroupUsrs(null, orderBy);
		}
		public CachedSqlSelect<GroupUsr> ChildGroupUsrs(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<GroupUsr>
			(
				new Children<GroupUsr>
				(
					TablesEnum.Usr, 
					this.K, 
					TablesEnum.GroupUsr, 
					dr => 
					{ 
						GroupUsr newGroupUsr = new GroupUsr(); 
						newGroupUsr.Initialise(dr); 
						return newGroupUsr;
					},
					"21C961A3",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<Hit> ChildHits()
		{
			return this.ChildHits(null, null);
		}
		public CachedSqlSelect<Hit> ChildHits(Q where)
		{
			return this.ChildHits(where, null);
		}
		public CachedSqlSelect<Hit> ChildHits(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildHits(null, orderBy);
		}
		public CachedSqlSelect<Hit> ChildHits(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<Hit>
			(
				new Children<Hit>
				(
					TablesEnum.Usr, 
					this.K, 
					TablesEnum.Hit, 
					dr => 
					{ 
						Hit newHit = new Hit(); 
						newHit.Initialise(dr); 
						return newHit;
					},
					"AA59A111",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<InsertionOrder> ChildInsertionOrders()
		{
			return this.ChildInsertionOrders(null, null);
		}
		public CachedSqlSelect<InsertionOrder> ChildInsertionOrders(Q where)
		{
			return this.ChildInsertionOrders(where, null);
		}
		public CachedSqlSelect<InsertionOrder> ChildInsertionOrders(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildInsertionOrders(null, orderBy);
		}
		public CachedSqlSelect<InsertionOrder> ChildInsertionOrders(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<InsertionOrder>
			(
				new Children<InsertionOrder>
				(
					TablesEnum.Usr, 
					this.K, 
					TablesEnum.InsertionOrder, 
					dr => 
					{ 
						InsertionOrder newInsertionOrder = new InsertionOrder(); 
						newInsertionOrder.Initialise(dr); 
						return newInsertionOrder;
					},
					"050AA86B",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<Invoice> ChildInvoices()
		{
			return this.ChildInvoices(null, null);
		}
		public CachedSqlSelect<Invoice> ChildInvoices(Q where)
		{
			return this.ChildInvoices(where, null);
		}
		public CachedSqlSelect<Invoice> ChildInvoices(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildInvoices(null, orderBy);
		}
		public CachedSqlSelect<Invoice> ChildInvoices(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<Invoice>
			(
				new Children<Invoice>
				(
					TablesEnum.Usr, 
					this.K, 
					TablesEnum.Invoice, 
					dr => 
					{ 
						Invoice newInvoice = new Invoice(); 
						newInvoice.Initialise(dr); 
						return newInvoice;
					},
					"E3B130F4",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<LogPageTime> ChildLogPageTimes()
		{
			return this.ChildLogPageTimes(null, null);
		}
		public CachedSqlSelect<LogPageTime> ChildLogPageTimes(Q where)
		{
			return this.ChildLogPageTimes(where, null);
		}
		public CachedSqlSelect<LogPageTime> ChildLogPageTimes(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildLogPageTimes(null, orderBy);
		}
		public CachedSqlSelect<LogPageTime> ChildLogPageTimes(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<LogPageTime>
			(
				new Children<LogPageTime>
				(
					TablesEnum.Usr, 
					this.K, 
					TablesEnum.LogPageTime, 
					dr => 
					{ 
						LogPageTime newLogPageTime = new LogPageTime(); 
						newLogPageTime.Initialise(dr); 
						return newLogPageTime;
					},
					"5A4210C2",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<Lol> ChildLols()
		{
			return this.ChildLols(null, null);
		}
		public CachedSqlSelect<Lol> ChildLols(Q where)
		{
			return this.ChildLols(where, null);
		}
		public CachedSqlSelect<Lol> ChildLols(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildLols(null, orderBy);
		}
		public CachedSqlSelect<Lol> ChildLols(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<Lol>
			(
				new Children<Lol>
				(
					TablesEnum.Usr, 
					this.K, 
					TablesEnum.Lol, 
					dr => 
					{ 
						Lol newLol = new Lol(); 
						newLol.Initialise(dr); 
						return newLol;
					},
					"B9944A9A",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<Misc> ChildMiscs()
		{
			return this.ChildMiscs(null, null);
		}
		public CachedSqlSelect<Misc> ChildMiscs(Q where)
		{
			return this.ChildMiscs(where, null);
		}
		public CachedSqlSelect<Misc> ChildMiscs(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildMiscs(null, orderBy);
		}
		public CachedSqlSelect<Misc> ChildMiscs(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<Misc>
			(
				new Children<Misc>
				(
					TablesEnum.Usr, 
					this.K, 
					TablesEnum.Misc, 
					dr => 
					{ 
						Misc newMisc = new Misc(); 
						newMisc.Initialise(dr); 
						return newMisc;
					},
					"DEDF0D0A",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<Mobile> ChildMobiles()
		{
			return this.ChildMobiles(null, null);
		}
		public CachedSqlSelect<Mobile> ChildMobiles(Q where)
		{
			return this.ChildMobiles(where, null);
		}
		public CachedSqlSelect<Mobile> ChildMobiles(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildMobiles(null, orderBy);
		}
		public CachedSqlSelect<Mobile> ChildMobiles(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<Mobile>
			(
				new Children<Mobile>
				(
					TablesEnum.Usr, 
					this.K, 
					TablesEnum.Mobile, 
					dr => 
					{ 
						Mobile newMobile = new Mobile(); 
						newMobile.Initialise(dr); 
						return newMobile;
					},
					"45E0E482",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<Phone> ChildPhones()
		{
			return this.ChildPhones(null, null);
		}
		public CachedSqlSelect<Phone> ChildPhones(Q where)
		{
			return this.ChildPhones(where, null);
		}
		public CachedSqlSelect<Phone> ChildPhones(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildPhones(null, orderBy);
		}
		public CachedSqlSelect<Phone> ChildPhones(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<Phone>
			(
				new Children<Phone>
				(
					TablesEnum.Usr, 
					this.K, 
					TablesEnum.Phone, 
					dr => 
					{ 
						Phone newPhone = new Phone(); 
						newPhone.Initialise(dr); 
						return newPhone;
					},
					"A40108A6",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<Photo> ChildPhotos()
		{
			return this.ChildPhotos(null, null);
		}
		public CachedSqlSelect<Photo> ChildPhotos(Q where)
		{
			return this.ChildPhotos(where, null);
		}
		public CachedSqlSelect<Photo> ChildPhotos(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildPhotos(null, orderBy);
		}
		public CachedSqlSelect<Photo> ChildPhotos(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<Photo>
			(
				new Children<Photo>
				(
					TablesEnum.Usr, 
					this.K, 
					TablesEnum.Photo, 
					dr => 
					{ 
						Photo newPhoto = new Photo(); 
						newPhoto.Initialise(dr); 
						return newPhoto;
					},
					"71653456",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<PhotoReview> ChildPhotoReviews()
		{
			return this.ChildPhotoReviews(null, null);
		}
		public CachedSqlSelect<PhotoReview> ChildPhotoReviews(Q where)
		{
			return this.ChildPhotoReviews(where, null);
		}
		public CachedSqlSelect<PhotoReview> ChildPhotoReviews(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildPhotoReviews(null, orderBy);
		}
		public CachedSqlSelect<PhotoReview> ChildPhotoReviews(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<PhotoReview>
			(
				new Children<PhotoReview>
				(
					TablesEnum.Usr, 
					this.K, 
					TablesEnum.PhotoReview, 
					dr => 
					{ 
						PhotoReview newPhotoReview = new PhotoReview(); 
						newPhotoReview.Initialise(dr); 
						return newPhotoReview;
					},
					"BAD94C7E",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<PromoterUsr> ChildPromoterUsrs()
		{
			return this.ChildPromoterUsrs(null, null);
		}
		public CachedSqlSelect<PromoterUsr> ChildPromoterUsrs(Q where)
		{
			return this.ChildPromoterUsrs(where, null);
		}
		public CachedSqlSelect<PromoterUsr> ChildPromoterUsrs(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildPromoterUsrs(null, orderBy);
		}
		public CachedSqlSelect<PromoterUsr> ChildPromoterUsrs(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<PromoterUsr>
			(
				new Children<PromoterUsr>
				(
					TablesEnum.Usr, 
					this.K, 
					TablesEnum.PromoterUsr, 
					dr => 
					{ 
						PromoterUsr newPromoterUsr = new PromoterUsr(); 
						newPromoterUsr.Initialise(dr); 
						return newPromoterUsr;
					},
					"6F1F45E8",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<RoomPin> ChildRoomPins()
		{
			return this.ChildRoomPins(null, null);
		}
		public CachedSqlSelect<RoomPin> ChildRoomPins(Q where)
		{
			return this.ChildRoomPins(where, null);
		}
		public CachedSqlSelect<RoomPin> ChildRoomPins(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildRoomPins(null, orderBy);
		}
		public CachedSqlSelect<RoomPin> ChildRoomPins(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<RoomPin>
			(
				new Children<RoomPin>
				(
					TablesEnum.Usr, 
					this.K, 
					TablesEnum.RoomPin, 
					dr => 
					{ 
						RoomPin newRoomPin = new RoomPin(); 
						newRoomPin.Initialise(dr); 
						return newRoomPin;
					},
					"92EE52CA",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<SalesCall> ChildSalesCalls()
		{
			return this.ChildSalesCalls(null, null);
		}
		public CachedSqlSelect<SalesCall> ChildSalesCalls(Q where)
		{
			return this.ChildSalesCalls(where, null);
		}
		public CachedSqlSelect<SalesCall> ChildSalesCalls(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildSalesCalls(null, orderBy);
		}
		public CachedSqlSelect<SalesCall> ChildSalesCalls(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<SalesCall>
			(
				new Children<SalesCall>
				(
					TablesEnum.Usr, 
					this.K, 
					TablesEnum.SalesCall, 
					dr => 
					{ 
						SalesCall newSalesCall = new SalesCall(); 
						newSalesCall.Initialise(dr); 
						return newSalesCall;
					},
					"A041F5A2",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<SalesCampaign> ChildSalesCampaigns()
		{
			return this.ChildSalesCampaigns(null, null);
		}
		public CachedSqlSelect<SalesCampaign> ChildSalesCampaigns(Q where)
		{
			return this.ChildSalesCampaigns(where, null);
		}
		public CachedSqlSelect<SalesCampaign> ChildSalesCampaigns(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildSalesCampaigns(null, orderBy);
		}
		public CachedSqlSelect<SalesCampaign> ChildSalesCampaigns(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<SalesCampaign>
			(
				new Children<SalesCampaign>
				(
					TablesEnum.Usr, 
					this.K, 
					TablesEnum.SalesCampaign, 
					dr => 
					{ 
						SalesCampaign newSalesCampaign = new SalesCampaign(); 
						newSalesCampaign.Initialise(dr); 
						return newSalesCampaign;
					},
					"481F9D79",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<SalesStatusChange> ChildSalesStatusChanges()
		{
			return this.ChildSalesStatusChanges(null, null);
		}
		public CachedSqlSelect<SalesStatusChange> ChildSalesStatusChanges(Q where)
		{
			return this.ChildSalesStatusChanges(where, null);
		}
		public CachedSqlSelect<SalesStatusChange> ChildSalesStatusChanges(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildSalesStatusChanges(null, orderBy);
		}
		public CachedSqlSelect<SalesStatusChange> ChildSalesStatusChanges(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<SalesStatusChange>
			(
				new Children<SalesStatusChange>
				(
					TablesEnum.Usr, 
					this.K, 
					TablesEnum.SalesStatusChange, 
					dr => 
					{ 
						SalesStatusChange newSalesStatusChange = new SalesStatusChange(); 
						newSalesStatusChange.Initialise(dr); 
						return newSalesStatusChange;
					},
					"5BA6B3C1",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<SpottedException> ChildSpottedExceptions()
		{
			return this.ChildSpottedExceptions(null, null);
		}
		public CachedSqlSelect<SpottedException> ChildSpottedExceptions(Q where)
		{
			return this.ChildSpottedExceptions(where, null);
		}
		public CachedSqlSelect<SpottedException> ChildSpottedExceptions(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildSpottedExceptions(null, orderBy);
		}
		public CachedSqlSelect<SpottedException> ChildSpottedExceptions(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<SpottedException>
			(
				new Children<SpottedException>
				(
					TablesEnum.Usr, 
					this.K, 
					TablesEnum.SpottedException, 
					dr => 
					{ 
						SpottedException newSpottedException = new SpottedException(); 
						newSpottedException.Initialise(dr); 
						return newSpottedException;
					},
					"37CE92A7",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<TagPhotoHistory> ChildTagPhotoHistorys()
		{
			return this.ChildTagPhotoHistorys(null, null);
		}
		public CachedSqlSelect<TagPhotoHistory> ChildTagPhotoHistorys(Q where)
		{
			return this.ChildTagPhotoHistorys(where, null);
		}
		public CachedSqlSelect<TagPhotoHistory> ChildTagPhotoHistorys(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildTagPhotoHistorys(null, orderBy);
		}
		public CachedSqlSelect<TagPhotoHistory> ChildTagPhotoHistorys(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<TagPhotoHistory>
			(
				new Children<TagPhotoHistory>
				(
					TablesEnum.Usr, 
					this.K, 
					TablesEnum.TagPhotoHistory, 
					dr => 
					{ 
						TagPhotoHistory newTagPhotoHistory = new TagPhotoHistory(); 
						newTagPhotoHistory.Initialise(dr); 
						return newTagPhotoHistory;
					},
					"CC32FE64",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<Thread> ChildThreads()
		{
			return this.ChildThreads(null, null);
		}
		public CachedSqlSelect<Thread> ChildThreads(Q where)
		{
			return this.ChildThreads(where, null);
		}
		public CachedSqlSelect<Thread> ChildThreads(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildThreads(null, orderBy);
		}
		public CachedSqlSelect<Thread> ChildThreads(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<Thread>
			(
				new Children<Thread>
				(
					TablesEnum.Usr, 
					this.K, 
					TablesEnum.Thread, 
					dr => 
					{ 
						Thread newThread = new Thread(); 
						newThread.Initialise(dr); 
						return newThread;
					},
					"4576C3F1",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<ThreadUsr> ChildThreadUsrs()
		{
			return this.ChildThreadUsrs(null, null);
		}
		public CachedSqlSelect<ThreadUsr> ChildThreadUsrs(Q where)
		{
			return this.ChildThreadUsrs(where, null);
		}
		public CachedSqlSelect<ThreadUsr> ChildThreadUsrs(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildThreadUsrs(null, orderBy);
		}
		public CachedSqlSelect<ThreadUsr> ChildThreadUsrs(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<ThreadUsr>
			(
				new Children<ThreadUsr>
				(
					TablesEnum.Usr, 
					this.K, 
					TablesEnum.ThreadUsr, 
					dr => 
					{ 
						ThreadUsr newThreadUsr = new ThreadUsr(); 
						newThreadUsr.Initialise(dr); 
						return newThreadUsr;
					},
					"02B49E6F",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<Transfer> ChildTransfers()
		{
			return this.ChildTransfers(null, null);
		}
		public CachedSqlSelect<Transfer> ChildTransfers(Q where)
		{
			return this.ChildTransfers(where, null);
		}
		public CachedSqlSelect<Transfer> ChildTransfers(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildTransfers(null, orderBy);
		}
		public CachedSqlSelect<Transfer> ChildTransfers(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<Transfer>
			(
				new Children<Transfer>
				(
					TablesEnum.Usr, 
					this.K, 
					TablesEnum.Transfer, 
					dr => 
					{ 
						Transfer newTransfer = new Transfer(); 
						newTransfer.Initialise(dr); 
						return newTransfer;
					},
					"B7FD3576",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<UsrDate> ChildUsrDates()
		{
			return this.ChildUsrDates(null, null);
		}
		public CachedSqlSelect<UsrDate> ChildUsrDates(Q where)
		{
			return this.ChildUsrDates(where, null);
		}
		public CachedSqlSelect<UsrDate> ChildUsrDates(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildUsrDates(null, orderBy);
		}
		public CachedSqlSelect<UsrDate> ChildUsrDates(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<UsrDate>
			(
				new Children<UsrDate>
				(
					TablesEnum.Usr, 
					this.K, 
					TablesEnum.UsrDate, 
					dr => 
					{ 
						UsrDate newUsrDate = new UsrDate(); 
						newUsrDate.Initialise(dr); 
						return newUsrDate;
					},
					"2A289ED0",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<UsrDonationIcon> ChildUsrDonationIcons()
		{
			return this.ChildUsrDonationIcons(null, null);
		}
		public CachedSqlSelect<UsrDonationIcon> ChildUsrDonationIcons(Q where)
		{
			return this.ChildUsrDonationIcons(where, null);
		}
		public CachedSqlSelect<UsrDonationIcon> ChildUsrDonationIcons(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildUsrDonationIcons(null, orderBy);
		}
		public CachedSqlSelect<UsrDonationIcon> ChildUsrDonationIcons(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<UsrDonationIcon>
			(
				new Children<UsrDonationIcon>
				(
					TablesEnum.Usr, 
					this.K, 
					TablesEnum.UsrDonationIcon, 
					dr => 
					{ 
						UsrDonationIcon newUsrDonationIcon = new UsrDonationIcon(); 
						newUsrDonationIcon.Initialise(dr); 
						return newUsrDonationIcon;
					},
					"324FC462",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<UsrEventAttended> ChildUsrEventAttendeds()
		{
			return this.ChildUsrEventAttendeds(null, null);
		}
		public CachedSqlSelect<UsrEventAttended> ChildUsrEventAttendeds(Q where)
		{
			return this.ChildUsrEventAttendeds(where, null);
		}
		public CachedSqlSelect<UsrEventAttended> ChildUsrEventAttendeds(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildUsrEventAttendeds(null, orderBy);
		}
		public CachedSqlSelect<UsrEventAttended> ChildUsrEventAttendeds(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<UsrEventAttended>
			(
				new Children<UsrEventAttended>
				(
					TablesEnum.Usr, 
					this.K, 
					TablesEnum.UsrEventAttended, 
					dr => 
					{ 
						UsrEventAttended newUsrEventAttended = new UsrEventAttended(); 
						newUsrEventAttended.Initialise(dr); 
						return newUsrEventAttended;
					},
					"95A27612",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<UsrEventGuestlist> ChildUsrEventGuestlists()
		{
			return this.ChildUsrEventGuestlists(null, null);
		}
		public CachedSqlSelect<UsrEventGuestlist> ChildUsrEventGuestlists(Q where)
		{
			return this.ChildUsrEventGuestlists(where, null);
		}
		public CachedSqlSelect<UsrEventGuestlist> ChildUsrEventGuestlists(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildUsrEventGuestlists(null, orderBy);
		}
		public CachedSqlSelect<UsrEventGuestlist> ChildUsrEventGuestlists(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<UsrEventGuestlist>
			(
				new Children<UsrEventGuestlist>
				(
					TablesEnum.Usr, 
					this.K, 
					TablesEnum.UsrEventGuestlist, 
					dr => 
					{ 
						UsrEventGuestlist newUsrEventGuestlist = new UsrEventGuestlist(); 
						newUsrEventGuestlist.Initialise(dr); 
						return newUsrEventGuestlist;
					},
					"6F23F8F8",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<UsrMusicTypeFavourite> ChildUsrMusicTypeFavourites()
		{
			return this.ChildUsrMusicTypeFavourites(null, null);
		}
		public CachedSqlSelect<UsrMusicTypeFavourite> ChildUsrMusicTypeFavourites(Q where)
		{
			return this.ChildUsrMusicTypeFavourites(where, null);
		}
		public CachedSqlSelect<UsrMusicTypeFavourite> ChildUsrMusicTypeFavourites(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildUsrMusicTypeFavourites(null, orderBy);
		}
		public CachedSqlSelect<UsrMusicTypeFavourite> ChildUsrMusicTypeFavourites(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<UsrMusicTypeFavourite>
			(
				new Children<UsrMusicTypeFavourite>
				(
					TablesEnum.Usr, 
					this.K, 
					TablesEnum.UsrMusicTypeFavourite, 
					dr => 
					{ 
						UsrMusicTypeFavourite newUsrMusicTypeFavourite = new UsrMusicTypeFavourite(); 
						newUsrMusicTypeFavourite.Initialise(dr); 
						return newUsrMusicTypeFavourite;
					},
					"48E84A36",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<UsrPhotoFavourite> ChildUsrPhotoFavourites()
		{
			return this.ChildUsrPhotoFavourites(null, null);
		}
		public CachedSqlSelect<UsrPhotoFavourite> ChildUsrPhotoFavourites(Q where)
		{
			return this.ChildUsrPhotoFavourites(where, null);
		}
		public CachedSqlSelect<UsrPhotoFavourite> ChildUsrPhotoFavourites(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildUsrPhotoFavourites(null, orderBy);
		}
		public CachedSqlSelect<UsrPhotoFavourite> ChildUsrPhotoFavourites(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<UsrPhotoFavourite>
			(
				new Children<UsrPhotoFavourite>
				(
					TablesEnum.Usr, 
					this.K, 
					TablesEnum.UsrPhotoFavourite, 
					dr => 
					{ 
						UsrPhotoFavourite newUsrPhotoFavourite = new UsrPhotoFavourite(); 
						newUsrPhotoFavourite.Initialise(dr); 
						return newUsrPhotoFavourite;
					},
					"9743B94F",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<UsrPhotoMe> ChildUsrPhotoMes()
		{
			return this.ChildUsrPhotoMes(null, null);
		}
		public CachedSqlSelect<UsrPhotoMe> ChildUsrPhotoMes(Q where)
		{
			return this.ChildUsrPhotoMes(where, null);
		}
		public CachedSqlSelect<UsrPhotoMe> ChildUsrPhotoMes(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildUsrPhotoMes(null, orderBy);
		}
		public CachedSqlSelect<UsrPhotoMe> ChildUsrPhotoMes(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<UsrPhotoMe>
			(
				new Children<UsrPhotoMe>
				(
					TablesEnum.Usr, 
					this.K, 
					TablesEnum.UsrPhotoMe, 
					dr => 
					{ 
						UsrPhotoMe newUsrPhotoMe = new UsrPhotoMe(); 
						newUsrPhotoMe.Initialise(dr); 
						return newUsrPhotoMe;
					},
					"4CE926B4",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<UsrPlaceVisit> ChildUsrPlaceVisits()
		{
			return this.ChildUsrPlaceVisits(null, null);
		}
		public CachedSqlSelect<UsrPlaceVisit> ChildUsrPlaceVisits(Q where)
		{
			return this.ChildUsrPlaceVisits(where, null);
		}
		public CachedSqlSelect<UsrPlaceVisit> ChildUsrPlaceVisits(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildUsrPlaceVisits(null, orderBy);
		}
		public CachedSqlSelect<UsrPlaceVisit> ChildUsrPlaceVisits(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<UsrPlaceVisit>
			(
				new Children<UsrPlaceVisit>
				(
					TablesEnum.Usr, 
					this.K, 
					TablesEnum.UsrPlaceVisit, 
					dr => 
					{ 
						UsrPlaceVisit newUsrPlaceVisit = new UsrPlaceVisit(); 
						newUsrPlaceVisit.Initialise(dr); 
						return newUsrPlaceVisit;
					},
					"0DF9F093",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<Visit> ChildVisits()
		{
			return this.ChildVisits(null, null);
		}
		public CachedSqlSelect<Visit> ChildVisits(Q where)
		{
			return this.ChildVisits(where, null);
		}
		public CachedSqlSelect<Visit> ChildVisits(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildVisits(null, orderBy);
		}
		public CachedSqlSelect<Visit> ChildVisits(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<Visit>
			(
				new Children<Visit>
				(
					TablesEnum.Usr, 
					this.K, 
					TablesEnum.Visit, 
					dr => 
					{ 
						Visit newVisit = new Visit(); 
						newVisit.Initialise(dr); 
						return newVisit;
					},
					"89BFB233",
					where,
					orderBy
				)
			);
		}
		}

	#region UsrDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region UsrDataHolder
	/// <summary>
	/// Each registered user of the system gets a record in this table.DataHolder
	/// </summary>
	[Serializable]
	public partial class UsrDataHolder : DataHolder<Usr>
	{
		Usr dataHolder;
		[NonSerializedAttribute] Usr bob;

		public UsrDataHolder()
		{
			this.dataHolder = new Usr();
		}
		
		void CopyValues(Usr source, Usr destination)
		{
			destination[Bobs.Usr.Columns.K] = source[Bobs.Usr.Columns.K];
			destination[Bobs.Usr.Columns.Email] = source[Bobs.Usr.Columns.Email];
			destination[Bobs.Usr.Columns.Password] = source[Bobs.Usr.Columns.Password];
			destination[Bobs.Usr.Columns.LoginCount] = source[Bobs.Usr.Columns.LoginCount];
			destination[Bobs.Usr.Columns.IsAdmin] = source[Bobs.Usr.Columns.IsAdmin];
			destination[Bobs.Usr.Columns.IsEmailVerified] = source[Bobs.Usr.Columns.IsEmailVerified];
			destination[Bobs.Usr.Columns.Pic] = source[Bobs.Usr.Columns.Pic];
			destination[Bobs.Usr.Columns.PicOriginal] = source[Bobs.Usr.Columns.PicOriginal];
			destination[Bobs.Usr.Columns.FirstName] = source[Bobs.Usr.Columns.FirstName];
			destination[Bobs.Usr.Columns.LastName] = source[Bobs.Usr.Columns.LastName];
			destination[Bobs.Usr.Columns.NickName] = source[Bobs.Usr.Columns.NickName];
			destination[Bobs.Usr.Columns.Mobile] = source[Bobs.Usr.Columns.Mobile];
			destination[Bobs.Usr.Columns.MobileCountryCode] = source[Bobs.Usr.Columns.MobileCountryCode];
			destination[Bobs.Usr.Columns.MobileNumber] = source[Bobs.Usr.Columns.MobileNumber];
			destination[Bobs.Usr.Columns.SendSpottedEmails] = source[Bobs.Usr.Columns.SendSpottedEmails];
			destination[Bobs.Usr.Columns.SendSpottedTexts] = source[Bobs.Usr.Columns.SendSpottedTexts];
			destination[Bobs.Usr.Columns.SendPartnerEmails] = source[Bobs.Usr.Columns.SendPartnerEmails];
			destination[Bobs.Usr.Columns.SendPartnerTexts] = source[Bobs.Usr.Columns.SendPartnerTexts];
			destination[Bobs.Usr.Columns.UpdateData] = source[Bobs.Usr.Columns.UpdateData];
			destination[Bobs.Usr.Columns.AdminNote] = source[Bobs.Usr.Columns.AdminNote];
			destination[Bobs.Usr.Columns.DateTimeLastAccess] = source[Bobs.Usr.Columns.DateTimeLastAccess];
			destination[Bobs.Usr.Columns.DateTimeSignUp] = source[Bobs.Usr.Columns.DateTimeSignUp];
			destination[Bobs.Usr.Columns.DateTimeLastPageRequest] = source[Bobs.Usr.Columns.DateTimeLastPageRequest];
			destination[Bobs.Usr.Columns.PrefsText] = source[Bobs.Usr.Columns.PrefsText];
			destination[Bobs.Usr.Columns.LoginString] = source[Bobs.Usr.Columns.LoginString];
			destination[Bobs.Usr.Columns.PersonalStatement] = source[Bobs.Usr.Columns.PersonalStatement];
			destination[Bobs.Usr.Columns.AddedByUsrK] = source[Bobs.Usr.Columns.AddedByUsrK];
			destination[Bobs.Usr.Columns.AdminLevel] = source[Bobs.Usr.Columns.AdminLevel];
			destination[Bobs.Usr.Columns.RandomNumber] = source[Bobs.Usr.Columns.RandomNumber];
			destination[Bobs.Usr.Columns.LastPrivateComment] = source[Bobs.Usr.Columns.LastPrivateComment];
			destination[Bobs.Usr.Columns.LastPrivateChatMessage] = source[Bobs.Usr.Columns.LastPrivateChatMessage];
			destination[Bobs.Usr.Columns.IsSingle] = source[Bobs.Usr.Columns.IsSingle];
			destination[Bobs.Usr.Columns.IsMale] = source[Bobs.Usr.Columns.IsMale];
			destination[Bobs.Usr.Columns.IsFemale] = source[Bobs.Usr.Columns.IsFemale];
			destination[Bobs.Usr.Columns.DateOfBirth] = source[Bobs.Usr.Columns.DateOfBirth];
			destination[Bobs.Usr.Columns.DateSexMale] = source[Bobs.Usr.Columns.DateSexMale];
			destination[Bobs.Usr.Columns.DateSexFemale] = source[Bobs.Usr.Columns.DateSexFemale];
			destination[Bobs.Usr.Columns.DateAgeRangeLow] = source[Bobs.Usr.Columns.DateAgeRangeLow];
			destination[Bobs.Usr.Columns.DateAgeRangeHigh] = source[Bobs.Usr.Columns.DateAgeRangeHigh];
			destination[Bobs.Usr.Columns.Relationship1] = source[Bobs.Usr.Columns.Relationship1];
			destination[Bobs.Usr.Columns.Relationship2] = source[Bobs.Usr.Columns.Relationship2];
			destination[Bobs.Usr.Columns.Relationship3] = source[Bobs.Usr.Columns.Relationship3];
			destination[Bobs.Usr.Columns.SexHelperMale] = source[Bobs.Usr.Columns.SexHelperMale];
			destination[Bobs.Usr.Columns.SexHelperFemale] = source[Bobs.Usr.Columns.SexHelperFemale];
			destination[Bobs.Usr.Columns.BuddyCount] = source[Bobs.Usr.Columns.BuddyCount];
			destination[Bobs.Usr.Columns.ChatMessageCount] = source[Bobs.Usr.Columns.ChatMessageCount];
			destination[Bobs.Usr.Columns.CommentCount] = source[Bobs.Usr.Columns.CommentCount];
			destination[Bobs.Usr.Columns.EventCount] = source[Bobs.Usr.Columns.EventCount];
			destination[Bobs.Usr.Columns.HomePlaceK] = source[Bobs.Usr.Columns.HomePlaceK];
			destination[Bobs.Usr.Columns.AgreeTerms] = source[Bobs.Usr.Columns.AgreeTerms];
			destination[Bobs.Usr.Columns.GuestClientK] = source[Bobs.Usr.Columns.GuestClientK];
			destination[Bobs.Usr.Columns.FavouriteMusicTypeK] = source[Bobs.Usr.Columns.FavouriteMusicTypeK];
			destination[Bobs.Usr.Columns.TotalLol] = source[Bobs.Usr.Columns.TotalLol];
			destination[Bobs.Usr.Columns.TotalMadeLol] = source[Bobs.Usr.Columns.TotalMadeLol];
			destination[Bobs.Usr.Columns.LastLol] = source[Bobs.Usr.Columns.LastLol];
			destination[Bobs.Usr.Columns.UniqueMadeLol] = source[Bobs.Usr.Columns.UniqueMadeLol];
			destination[Bobs.Usr.Columns.ChatXml] = source[Bobs.Usr.Columns.ChatXml];
			destination[Bobs.Usr.Columns.IsLoggedOn] = source[Bobs.Usr.Columns.IsLoggedOn];
			destination[Bobs.Usr.Columns.LastChatItem] = source[Bobs.Usr.Columns.LastChatItem];
			destination[Bobs.Usr.Columns.LastIp] = source[Bobs.Usr.Columns.LastIp];
			destination[Bobs.Usr.Columns.Ignore] = source[Bobs.Usr.Columns.Ignore];
			destination[Bobs.Usr.Columns.IsProSpotter] = source[Bobs.Usr.Columns.IsProSpotter];
			destination[Bobs.Usr.Columns.LastInvite] = source[Bobs.Usr.Columns.LastInvite];
			destination[Bobs.Usr.Columns.IntroducedByUsrK] = source[Bobs.Usr.Columns.IntroducedByUsrK];
			destination[Bobs.Usr.Columns.SendFlyers] = source[Bobs.Usr.Columns.SendFlyers];
			destination[Bobs.Usr.Columns.SendInvites] = source[Bobs.Usr.Columns.SendInvites];
			destination[Bobs.Usr.Columns.TotalPhotoUploads] = source[Bobs.Usr.Columns.TotalPhotoUploads];
			destination[Bobs.Usr.Columns.TempInt] = source[Bobs.Usr.Columns.TempInt];
			destination[Bobs.Usr.Columns.EnhancedSecurity] = source[Bobs.Usr.Columns.EnhancedSecurity];
			destination[Bobs.Usr.Columns.AddressStreet] = source[Bobs.Usr.Columns.AddressStreet];
			destination[Bobs.Usr.Columns.AddressArea] = source[Bobs.Usr.Columns.AddressArea];
			destination[Bobs.Usr.Columns.AddressTown] = source[Bobs.Usr.Columns.AddressTown];
			destination[Bobs.Usr.Columns.AddressCounty] = source[Bobs.Usr.Columns.AddressCounty];
			destination[Bobs.Usr.Columns.AddressPostcode] = source[Bobs.Usr.Columns.AddressPostcode];
			destination[Bobs.Usr.Columns.AddressCountryK] = source[Bobs.Usr.Columns.AddressCountryK];
			destination[Bobs.Usr.Columns.CardStatus] = source[Bobs.Usr.Columns.CardStatus];
			destination[Bobs.Usr.Columns.TotalCardsSent] = source[Bobs.Usr.Columns.TotalCardsSent];
			destination[Bobs.Usr.Columns.IsSpotter] = source[Bobs.Usr.Columns.IsSpotter];
			destination[Bobs.Usr.Columns.Banned] = source[Bobs.Usr.Columns.Banned];
			destination[Bobs.Usr.Columns.BannedByUsrK] = source[Bobs.Usr.Columns.BannedByUsrK];
			destination[Bobs.Usr.Columns.BannedDateTime] = source[Bobs.Usr.Columns.BannedDateTime];
			destination[Bobs.Usr.Columns.BannedReason] = source[Bobs.Usr.Columns.BannedReason];
			destination[Bobs.Usr.Columns.UpdateSendGenericMusic] = source[Bobs.Usr.Columns.UpdateSendGenericMusic];
			destination[Bobs.Usr.Columns.UpdateLargeEvents] = source[Bobs.Usr.Columns.UpdateLargeEvents];
			destination[Bobs.Usr.Columns.UpdateSendBuddies] = source[Bobs.Usr.Columns.UpdateSendBuddies];
			destination[Bobs.Usr.Columns.PicState] = source[Bobs.Usr.Columns.PicState];
			destination[Bobs.Usr.Columns.PicPhotoK] = source[Bobs.Usr.Columns.PicPhotoK];
			destination[Bobs.Usr.Columns.PicMiscK] = source[Bobs.Usr.Columns.PicMiscK];
			destination[Bobs.Usr.Columns.IsChatting] = source[Bobs.Usr.Columns.IsChatting];
			destination[Bobs.Usr.Columns.LastBuddyChange] = source[Bobs.Usr.Columns.LastBuddyChange];
			destination[Bobs.Usr.Columns.NewsModerator] = source[Bobs.Usr.Columns.NewsModerator];
			destination[Bobs.Usr.Columns.NewsPermissionLevel] = source[Bobs.Usr.Columns.NewsPermissionLevel];
			destination[Bobs.Usr.Columns.IsBetaTester] = source[Bobs.Usr.Columns.IsBetaTester];
			destination[Bobs.Usr.Columns.PlacesVisitCount] = source[Bobs.Usr.Columns.PlacesVisitCount];
			destination[Bobs.Usr.Columns.MusicTypesFavouriteCount] = source[Bobs.Usr.Columns.MusicTypesFavouriteCount];
			destination[Bobs.Usr.Columns.PhotosMeCount] = source[Bobs.Usr.Columns.PhotosMeCount];
			destination[Bobs.Usr.Columns.IsSkeleton] = source[Bobs.Usr.Columns.IsSkeleton];
			destination[Bobs.Usr.Columns.NoInboxEmails] = source[Bobs.Usr.Columns.NoInboxEmails];
			destination[Bobs.Usr.Columns.AbuseReportsPending] = source[Bobs.Usr.Columns.AbuseReportsPending];
			destination[Bobs.Usr.Columns.AbuseReportsUseful] = source[Bobs.Usr.Columns.AbuseReportsUseful];
			destination[Bobs.Usr.Columns.AbuseReportsOverturned] = source[Bobs.Usr.Columns.AbuseReportsOverturned];
			destination[Bobs.Usr.Columns.AbuseAccusationsPending] = source[Bobs.Usr.Columns.AbuseAccusationsPending];
			destination[Bobs.Usr.Columns.AbuseAccusationsAbuse] = source[Bobs.Usr.Columns.AbuseAccusationsAbuse];
			destination[Bobs.Usr.Columns.AbuseAccusationsNoAbuse] = source[Bobs.Usr.Columns.AbuseAccusationsNoAbuse];
			destination[Bobs.Usr.Columns.ModeratePhotos] = source[Bobs.Usr.Columns.ModeratePhotos];
			destination[Bobs.Usr.Columns.ChatSessionId] = source[Bobs.Usr.Columns.ChatSessionId];
			destination[Bobs.Usr.Columns.AddedByGroupK] = source[Bobs.Usr.Columns.AddedByGroupK];
			destination[Bobs.Usr.Columns.DonateIcon] = source[Bobs.Usr.Columns.DonateIcon];
			destination[Bobs.Usr.Columns.DonateExpire] = source[Bobs.Usr.Columns.DonateExpire];
			destination[Bobs.Usr.Columns.EmailDateTime] = source[Bobs.Usr.Columns.EmailDateTime];
			destination[Bobs.Usr.Columns.EmailIp] = source[Bobs.Usr.Columns.EmailIp];
			destination[Bobs.Usr.Columns.EmailHold] = source[Bobs.Usr.Columns.EmailHold];
			destination[Bobs.Usr.Columns.IsHtmlEditor] = source[Bobs.Usr.Columns.IsHtmlEditor];
			destination[Bobs.Usr.Columns.IsGroupModerator] = source[Bobs.Usr.Columns.IsGroupModerator];
			destination[Bobs.Usr.Columns.IsSkeletonFromSignup] = source[Bobs.Usr.Columns.IsSkeletonFromSignup];
			destination[Bobs.Usr.Columns.ExtraIcon] = source[Bobs.Usr.Columns.ExtraIcon];
			destination[Bobs.Usr.Columns.ExtraExpire] = source[Bobs.Usr.Columns.ExtraExpire];
			destination[Bobs.Usr.Columns.SpottingsTotal] = source[Bobs.Usr.Columns.SpottingsTotal];
			destination[Bobs.Usr.Columns.SpottingsMonth] = source[Bobs.Usr.Columns.SpottingsMonth];
			destination[Bobs.Usr.Columns.SpottingsMonthRank] = source[Bobs.Usr.Columns.SpottingsMonthRank];
			destination[Bobs.Usr.Columns.IsPromoter] = source[Bobs.Usr.Columns.IsPromoter];
			destination[Bobs.Usr.Columns.CampTickets] = source[Bobs.Usr.Columns.CampTickets];
			destination[Bobs.Usr.Columns.HasTicket] = source[Bobs.Usr.Columns.HasTicket];
			destination[Bobs.Usr.Columns.LastTicketEventDateTime] = source[Bobs.Usr.Columns.LastTicketEventDateTime];
			destination[Bobs.Usr.Columns.PasswordHash] = source[Bobs.Usr.Columns.PasswordHash];
			destination[Bobs.Usr.Columns.PasswordSalt] = source[Bobs.Usr.Columns.PasswordSalt];
			destination[Bobs.Usr.Columns.PasswordResetEmailSecret] = source[Bobs.Usr.Columns.PasswordResetEmailSecret];
			destination[Bobs.Usr.Columns.LegalTermsUser1] = source[Bobs.Usr.Columns.LegalTermsUser1];
			destination[Bobs.Usr.Columns.LegalTermsPromoter1] = source[Bobs.Usr.Columns.LegalTermsPromoter1];
			destination[Bobs.Usr.Columns.IsSuperAdmin] = source[Bobs.Usr.Columns.IsSuperAdmin];
			destination[Bobs.Usr.Columns.IsSalesPerson] = source[Bobs.Usr.Columns.IsSalesPerson];
			destination[Bobs.Usr.Columns.BuyableLockDateTime] = source[Bobs.Usr.Columns.BuyableLockDateTime];
			destination[Bobs.Usr.Columns.SalesTeam] = source[Bobs.Usr.Columns.SalesTeam];
			destination[Bobs.Usr.Columns.Guid] = source[Bobs.Usr.Columns.Guid];
			destination[Bobs.Usr.Columns.LegalTermsUser2] = source[Bobs.Usr.Columns.LegalTermsUser2];
			destination[Bobs.Usr.Columns.LegalTermsPromoter2] = source[Bobs.Usr.Columns.LegalTermsPromoter2];
			destination[Bobs.Usr.Columns.LastPhotoUpload] = source[Bobs.Usr.Columns.LastPhotoUpload];
			destination[Bobs.Usr.Columns.DateTimeLastUpdateEmail] = source[Bobs.Usr.Columns.DateTimeLastUpdateEmail];
			destination[Bobs.Usr.Columns.InvitedViaContactImporter] = source[Bobs.Usr.Columns.InvitedViaContactImporter];
			destination[Bobs.Usr.Columns.IsTicketsRegistered] = source[Bobs.Usr.Columns.IsTicketsRegistered];
			destination[Bobs.Usr.Columns.ExDirectory] = source[Bobs.Usr.Columns.ExDirectory];
			destination[Bobs.Usr.Columns.IsEmailBroken] = source[Bobs.Usr.Columns.IsEmailBroken];
			destination[Bobs.Usr.Columns.DateTimeLastChatMessage] = source[Bobs.Usr.Columns.DateTimeLastChatMessage];
			destination[Bobs.Usr.Columns.RolloverDonationIconK] = source[Bobs.Usr.Columns.RolloverDonationIconK];
			destination[Bobs.Usr.Columns.ChatPic] = source[Bobs.Usr.Columns.ChatPic];
			destination[Bobs.Usr.Columns.ChatPicPhotoK] = source[Bobs.Usr.Columns.ChatPicPhotoK];
			destination[Bobs.Usr.Columns.ChatPicState] = source[Bobs.Usr.Columns.ChatPicState];
			destination[Bobs.Usr.Columns.DateTimeLastBuddyAlertsRoomRefresh] = source[Bobs.Usr.Columns.DateTimeLastBuddyAlertsRoomRefresh];
			destination[Bobs.Usr.Columns.PhotoUsage] = source[Bobs.Usr.Columns.PhotoUsage];
			destination[Bobs.Usr.Columns.FacebookUID] = source[Bobs.Usr.Columns.FacebookUID];
			destination[Bobs.Usr.Columns.FacebookConnected] = source[Bobs.Usr.Columns.FacebookConnected];
			destination[Bobs.Usr.Columns.FacebookConnectedDateTime] = source[Bobs.Usr.Columns.FacebookConnectedDateTime];
			destination[Bobs.Usr.Columns.FacebookPermissionEmail] = source[Bobs.Usr.Columns.FacebookPermissionEmail];
			destination[Bobs.Usr.Columns.FacebookPermissionPublish] = source[Bobs.Usr.Columns.FacebookPermissionPublish];
			destination[Bobs.Usr.Columns.FacebookPermissionEvent] = source[Bobs.Usr.Columns.FacebookPermissionEvent];
			destination[Bobs.Usr.Columns.FacebookPermissionRsvp] = source[Bobs.Usr.Columns.FacebookPermissionRsvp];
			destination[Bobs.Usr.Columns.FacebookStoryAttendEvent] = source[Bobs.Usr.Columns.FacebookStoryAttendEvent];
			destination[Bobs.Usr.Columns.FacebookStoryBuyTicket] = source[Bobs.Usr.Columns.FacebookStoryBuyTicket];
			destination[Bobs.Usr.Columns.FacebookStoryUploadPhoto] = source[Bobs.Usr.Columns.FacebookStoryUploadPhoto];
			destination[Bobs.Usr.Columns.FacebookStorySpotted] = source[Bobs.Usr.Columns.FacebookStorySpotted];
			destination[Bobs.Usr.Columns.FacebookStoryPhotoFeatured] = source[Bobs.Usr.Columns.FacebookStoryPhotoFeatured];
			destination[Bobs.Usr.Columns.FacebookStoryNewBuddy] = source[Bobs.Usr.Columns.FacebookStoryNewBuddy];
			destination[Bobs.Usr.Columns.FacebookStoryPublishArticle] = source[Bobs.Usr.Columns.FacebookStoryPublishArticle];
			destination[Bobs.Usr.Columns.FacebookStoryJoinGroup] = source[Bobs.Usr.Columns.FacebookStoryJoinGroup];
			destination[Bobs.Usr.Columns.FacebookStoryFavourite] = source[Bobs.Usr.Columns.FacebookStoryFavourite];
			destination[Bobs.Usr.Columns.FacebookStoryNewTopic] = source[Bobs.Usr.Columns.FacebookStoryNewTopic];
			destination[Bobs.Usr.Columns.FacebookStoryEventReview] = source[Bobs.Usr.Columns.FacebookStoryEventReview];
			destination[Bobs.Usr.Columns.FacebookStoryPostNews] = source[Bobs.Usr.Columns.FacebookStoryPostNews];
			destination[Bobs.Usr.Columns.FacebookStoryLaugh] = source[Bobs.Usr.Columns.FacebookStoryLaugh];
			destination[Bobs.Usr.Columns.FacebookEventAdd] = source[Bobs.Usr.Columns.FacebookEventAdd];
			destination[Bobs.Usr.Columns.FacebookEventAttend] = source[Bobs.Usr.Columns.FacebookEventAttend];
			destination[Bobs.Usr.Columns.FacebookEmail] = source[Bobs.Usr.Columns.FacebookEmail];
			destination[Bobs.Usr.Columns.IsDj] = source[Bobs.Usr.Columns.IsDj];
			destination[Bobs.Usr.Columns.FacebookStory] = source[Bobs.Usr.Columns.FacebookStory];
			destination[Bobs.Usr.Columns.FacebookStory1] = source[Bobs.Usr.Columns.FacebookStory1];
			destination[Bobs.Usr.Columns.FacebookAccessToken] = source[Bobs.Usr.Columns.FacebookAccessToken];
			destination[Bobs.Usr.Columns.FacebookStoryFavouriteTopic] = source[Bobs.Usr.Columns.FacebookStoryFavouriteTopic];
			destination[Bobs.Usr.Columns.NeedsCaptcha] = source[Bobs.Usr.Columns.NeedsCaptcha];
			destination[Bobs.Usr.Columns.PassedCaptcha] = source[Bobs.Usr.Columns.PassedCaptcha];
			destination[Bobs.Usr.Columns.BouncePeriodDateTime] = source[Bobs.Usr.Columns.BouncePeriodDateTime];
			destination[Bobs.Usr.Columns.TotalEmailsSentInPeriod] = source[Bobs.Usr.Columns.TotalEmailsSentInPeriod];
			destination[Bobs.Usr.Columns.MatchedHardBounceInPeriod] = source[Bobs.Usr.Columns.MatchedHardBounceInPeriod];
			destination[Bobs.Usr.Columns.UnmatchedHardBounceInPeriod] = source[Bobs.Usr.Columns.UnmatchedHardBounceInPeriod];
			destination[Bobs.Usr.Columns.SoftBounceInPeriod] = source[Bobs.Usr.Columns.SoftBounceInPeriod];
		}
		
		public UsrDataHolder(Usr bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// Key
		/// </summary>
		public int K
		{
			get { return dataHolder.K; }
			set { this.dataHolder.K = value; }
		}
		/// <summary>
		/// Email
		/// </summary>
		public string Email
		{
			get { return dataHolder.Email; }
			set { this.dataHolder.Email = value; }
		}
		/// <summary>
		/// Password
		/// </summary>
		public string Password
		{
			get { return dataHolder.Password; }
			set { this.dataHolder.Password = value; }
		}
		/// <summary>
		/// The number of times the user has logged in
		/// </summary>
		public int LoginCount
		{
			get { return dataHolder.LoginCount; }
			set { this.dataHolder.LoginCount = value; }
		}
		/// <summary>
		/// Is the user an admin user?
		/// </summary>
		public bool IsAdmin
		{
			get { return dataHolder.IsAdmin; }
			set { this.dataHolder.IsAdmin = value; }
		}
		/// <summary>
		/// Has the email address been verified?
		/// </summary>
		public bool IsEmailVerified
		{
			get { return dataHolder.IsEmailVerified; }
			set { this.dataHolder.IsEmailVerified = value; }
		}
		/// <summary>
		/// Cropped image 80*80 for discussion board avatar etc.
		/// </summary>
		public Guid Pic
		{
			get { return dataHolder.Pic; }
			set { this.dataHolder.Pic = value; }
		}
		/// <summary>
		/// Filename of the original image
		/// </summary>
		public Guid PicOriginal
		{
			get { return dataHolder.PicOriginal; }
			set { this.dataHolder.PicOriginal = value; }
		}
		/// <summary>
		/// First name
		/// </summary>
		public string FirstName
		{
			get { return dataHolder.FirstName; }
			set { this.dataHolder.FirstName = value; }
		}
		/// <summary>
		/// Last name
		/// </summary>
		public string LastName
		{
			get { return dataHolder.LastName; }
			set { this.dataHolder.LastName = value; }
		}
		/// <summary>
		/// Nickname for the site
		/// </summary>
		public string NickName
		{
			get { return dataHolder.NickName; }
			set { this.dataHolder.NickName = value; }
		}
		/// <summary>
		/// Full mobile number including country code (e.g. 447971597702)
		/// </summary>
		public string Mobile
		{
			get { return dataHolder.Mobile; }
			set { this.dataHolder.Mobile = value; }
		}
		/// <summary>
		/// Country code of mobile number (e.g. 44)
		/// </summary>
		public string MobileCountryCode
		{
			get { return dataHolder.MobileCountryCode; }
			set { this.dataHolder.MobileCountryCode = value; }
		}
		/// <summary>
		/// Mobile number excluding country code and leading zero (e.g. 7971597702)
		/// </summary>
		public string MobileNumber
		{
			get { return dataHolder.MobileNumber; }
			set { this.dataHolder.MobileNumber = value; }
		}
		/// <summary>
		/// Send me Spotted emails
		/// </summary>
		public bool SendSpottedEmails
		{
			get { return dataHolder.SendSpottedEmails; }
			set { this.dataHolder.SendSpottedEmails = value; }
		}
		/// <summary>
		/// Send me Spotted texts
		/// </summary>
		public bool SendSpottedTexts
		{
			get { return dataHolder.SendSpottedTexts; }
			set { this.dataHolder.SendSpottedTexts = value; }
		}
		/// <summary>
		/// DontStayIn and its partners may send me emails about products I might like
		/// </summary>
		public bool SendPartnerEmails
		{
			get { return dataHolder.SendPartnerEmails; }
			set { this.dataHolder.SendPartnerEmails = value; }
		}
		/// <summary>
		/// DontStayIn and its partners may send me texts about products I might like
		/// </summary>
		public bool SendPartnerTexts
		{
			get { return dataHolder.SendPartnerTexts; }
			set { this.dataHolder.SendPartnerTexts = value; }
		}
		/// <summary>
		/// Used internally by the bulk email system
		/// </summary>
		public string UpdateData
		{
			get { return dataHolder.UpdateData; }
			set { this.dataHolder.UpdateData = value; }
		}
		/// <summary>
		/// Admin users may add a private comment to any user
		/// </summary>
		public string AdminNote
		{
			get { return dataHolder.AdminNote; }
			set { this.dataHolder.AdminNote = value; }
		}
		/// <summary>
		/// DateTime when the user last logged in
		/// </summary>
		public DateTime DateTimeLastAccess
		{
			get { return dataHolder.DateTimeLastAccess; }
			set { this.dataHolder.DateTimeLastAccess = value; }
		}
		/// <summary>
		/// DateTime when the user first signed-up
		/// </summary>
		public DateTime DateTimeSignUp
		{
			get { return dataHolder.DateTimeSignUp; }
			set { this.dataHolder.DateTimeSignUp = value; }
		}
		/// <summary>
		/// DateTime when the user last requested a page
		/// </summary>
		public DateTime DateTimeLastPageRequest
		{
			get { return dataHolder.DateTimeLastPageRequest; }
			set { this.dataHolder.DateTimeLastPageRequest = value; }
		}
		/// <summary>
		/// Used internally to store a serialised hashtable of quick preferences
		/// </summary>
		public string PrefsText
		{
			get { return dataHolder.PrefsText; }
			set { this.dataHolder.PrefsText = value; }
		}
		/// <summary>
		/// Used to verify user on automated login
		/// </summary>
		public string LoginString
		{
			get { return dataHolder.LoginString; }
			set { this.dataHolder.LoginString = value; }
		}
		/// <summary>
		/// Users can edit this themselves
		/// </summary>
		public string PersonalStatement
		{
			get { return dataHolder.PersonalStatement; }
			set { this.dataHolder.PersonalStatement = value; }
		}
		/// <summary>
		/// If this usr was added to the system be email by a logged in usr, this is the owner
		/// </summary>
		public int AddedByUsrK
		{
			get { return dataHolder.AddedByUsrK; }
			set { this.dataHolder.AddedByUsrK = value; }
		}
		/// <summary>
		/// Level of admin trust (0=Nothing, 1=Chat, 2=Photo, 3=Event
		/// </summary>
		public int AdminLevel
		{
			get { return dataHolder.AdminLevel; }
			set { this.dataHolder.AdminLevel = value; }
		}
		/// <summary>
		/// Random float less than 1 used for fast pseudo-random ordering
		/// </summary>
		public double RandomNumber
		{
			get { return dataHolder.RandomNumber; }
			set { this.dataHolder.RandomNumber = value; }
		}
		/// <summary>
		/// Date / time of the last private comment that was posted to this user
		/// </summary>
		public DateTime LastPrivateComment
		{
			get { return dataHolder.LastPrivateComment; }
			set { this.dataHolder.LastPrivateComment = value; }
		}
		/// <summary>
		/// Date / time of the last private chat message that was posted to this user
		/// </summary>
		public DateTime LastPrivateChatMessage
		{
			get { return dataHolder.LastPrivateChatMessage; }
			set { this.dataHolder.LastPrivateChatMessage = value; }
		}
		/// <summary>
		/// Is the user single? If so, they may participate in the DSI Date section
		/// </summary>
		public bool IsSingle
		{
			get { return dataHolder.IsSingle; }
			set { this.dataHolder.IsSingle = value; }
		}
		/// <summary>
		/// Is the user male?
		/// </summary>
		public bool IsMale
		{
			get { return dataHolder.IsMale; }
			set { this.dataHolder.IsMale = value; }
		}
		/// <summary>
		/// Is the user female?
		/// </summary>
		public bool IsFemale
		{
			get { return dataHolder.IsFemale; }
			set { this.dataHolder.IsFemale = value; }
		}
		/// <summary>
		/// Date of birth
		/// </summary>
		public DateTime DateOfBirth
		{
			get { return dataHolder.DateOfBirth; }
			set { this.dataHolder.DateOfBirth = value; }
		}
		/// <summary>
		/// Is this user looking for a male as a date?
		/// </summary>
		public bool DateSexMale
		{
			get { return dataHolder.DateSexMale; }
			set { this.dataHolder.DateSexMale = value; }
		}
		/// <summary>
		/// Is this user looking for a female as a date?
		/// </summary>
		public bool DateSexFemale
		{
			get { return dataHolder.DateSexFemale; }
			set { this.dataHolder.DateSexFemale = value; }
		}
		/// <summary>
		/// Lower acceptable age range for date
		/// </summary>
		public int DateAgeRangeLow
		{
			get { return dataHolder.DateAgeRangeLow; }
			set { this.dataHolder.DateAgeRangeLow = value; }
		}
		/// <summary>
		/// Upper acceptable age range for date
		/// </summary>
		public int DateAgeRangeHigh
		{
			get { return dataHolder.DateAgeRangeHigh; }
			set { this.dataHolder.DateAgeRangeHigh = value; }
		}
		/// <summary>
		/// Is this user looking for relationship 1 (Just new friends)
		/// </summary>
		public bool Relationship1
		{
			get { return dataHolder.Relationship1; }
			set { this.dataHolder.Relationship1 = value; }
		}
		/// <summary>
		/// Is this user looking for relationship 2 (A bit of a fling)
		/// </summary>
		public bool Relationship2
		{
			get { return dataHolder.Relationship2; }
			set { this.dataHolder.Relationship2 = value; }
		}
		/// <summary>
		/// Is this user looking for relationship 3 (Love)
		/// </summary>
		public bool Relationship3
		{
			get { return dataHolder.Relationship3; }
			set { this.dataHolder.Relationship3 = value; }
		}
		/// <summary>
		/// This is a non-authoritave sex for this user, based on another user clicking the "This isn't a xxx!!!" button
		/// </summary>
		public bool SexHelperMale
		{
			get { return dataHolder.SexHelperMale; }
			set { this.dataHolder.SexHelperMale = value; }
		}
		/// <summary>
		/// This is a non-authoritave sex for this user, based on another user clicking the "This isn't a xxx!!!" button
		/// </summary>
		public bool SexHelperFemale
		{
			get { return dataHolder.SexHelperFemale; }
			set { this.dataHolder.SexHelperFemale = value; }
		}
		/// <summary>
		/// Number of full buddies this user is connected to
		/// </summary>
		public int BuddyCount
		{
			get { return dataHolder.BuddyCount; }
			set { this.dataHolder.BuddyCount = value; }
		}
		/// <summary>
		/// Number of full chat messages this user has posted
		/// </summary>
		public int ChatMessageCount
		{
			get { return dataHolder.ChatMessageCount; }
			set { this.dataHolder.ChatMessageCount = value; }
		}
		/// <summary>
		/// Number of comments user has posted
		/// </summary>
		public int CommentCount
		{
			get { return dataHolder.CommentCount; }
			set { this.dataHolder.CommentCount = value; }
		}
		/// <summary>
		/// Number of events this user has added
		/// </summary>
		public int EventCount
		{
			get { return dataHolder.EventCount; }
			set { this.dataHolder.EventCount = value; }
		}
		/// <summary>
		/// The users home town
		/// </summary>
		public int HomePlaceK
		{
			get { return dataHolder.HomePlaceK; }
			set { this.dataHolder.HomePlaceK = value; }
		}
		/// <summary>
		/// Has this user agreed to the terms and conditions?
		/// </summary>
		public bool AgreeTerms
		{
			get { return dataHolder.AgreeTerms; }
			set { this.dataHolder.AgreeTerms = value; }
		}
		/// <summary>
		/// Does this user map to a client in the text-guest system? If so this is the GuestClientK, if not, then zero.
		/// </summary>
		public int GuestClientK
		{
			get { return dataHolder.GuestClientK; }
			set { this.dataHolder.GuestClientK = value; }
		}
		/// <summary>
		/// Favourite music style (main category).
		/// </summary>
		public int FavouriteMusicTypeK
		{
			get { return dataHolder.FavouriteMusicTypeK; }
			set { this.dataHolder.FavouriteMusicTypeK = value; }
		}
		/// <summary>
		/// Total number of times this user has laughed at a comment
		/// </summary>
		public int TotalLol
		{
			get { return dataHolder.TotalLol; }
			set { this.dataHolder.TotalLol = value; }
		}
		/// <summary>
		/// Total number of times this user has made someone laugh
		/// </summary>
		public int TotalMadeLol
		{
			get { return dataHolder.TotalMadeLol; }
			set { this.dataHolder.TotalMadeLol = value; }
		}
		/// <summary>
		/// DateTime of the last time this user laughed
		/// </summary>
		public DateTime LastLol
		{
			get { return dataHolder.LastLol; }
			set { this.dataHolder.LastLol = value; }
		}
		/// <summary>
		/// Total number of users that this user has made laugh
		/// </summary>
		public int UniqueMadeLol
		{
			get { return dataHolder.UniqueMadeLol; }
			set { this.dataHolder.UniqueMadeLol = value; }
		}
		/// <summary>
		/// Chat messages
		/// </summary>
		public string ChatXml
		{
			get { return dataHolder.ChatXml; }
			set { this.dataHolder.ChatXml = value; }
		}
		/// <summary>
		/// Is this user logged on? (This is only set to false when the user actually logs off)
		/// </summary>
		public bool IsLoggedOn
		{
			get { return dataHolder.IsLoggedOn; }
			set { this.dataHolder.IsLoggedOn = value; }
		}
		/// <summary>
		/// The ticks of the last chat item
		/// </summary>
		public long LastChatItem
		{
			get { return dataHolder.LastChatItem; }
			set { this.dataHolder.LastChatItem = value; }
		}
		/// <summary>
		/// Last IP that the user accessed the site from
		/// </summary>
		public string LastIp
		{
			get { return dataHolder.LastIp; }
			set { this.dataHolder.LastIp = value; }
		}
		/// <summary>
		/// Ignore - this hides chat messages from this user / doesn't send out comment alert emails etc.
		/// </summary>
		public bool Ignore
		{
			get { return dataHolder.Ignore; }
			set { this.dataHolder.Ignore = value; }
		}
		/// <summary>
		/// Is this user a pro spotter?
		/// </summary>
		public bool IsProSpotter
		{
			get { return dataHolder.IsProSpotter; }
			set { this.dataHolder.IsProSpotter = value; }
		}
		/// <summary>
		/// ID of the last invite that was sent to this user. Ensures we don't send duplicate event invite PM's to people.
		/// </summary>
		public int LastInvite
		{
			get { return dataHolder.LastInvite; }
			set { this.dataHolder.LastInvite = value; }
		}
		/// <summary>
		/// Who was the first person to take a photo of this user?
		/// </summary>
		public int IntroducedByUsrK
		{
			get { return dataHolder.IntroducedByUsrK; }
			set { this.dataHolder.IntroducedByUsrK = value; }
		}
		/// <summary>
		/// Can we send this user e-flyers?
		/// </summary>
		public bool SendFlyers
		{
			get { return dataHolder.SendFlyers; }
			set { this.dataHolder.SendFlyers = value; }
		}
		/// <summary>
		/// Can we send this user party invites?
		/// </summary>
		public bool SendInvites
		{
			get { return dataHolder.SendInvites; }
			set { this.dataHolder.SendInvites = value; }
		}
		/// <summary>
		/// Total number of enabled photos this usr has added
		/// </summary>
		public int TotalPhotoUploads
		{
			get { return dataHolder.TotalPhotoUploads; }
			set { this.dataHolder.TotalPhotoUploads = value; }
		}
		/// <summary>
		/// Temp int used when sending bulk stuff
		/// </summary>
		public int TempInt
		{
			get { return dataHolder.TempInt; }
			set { this.dataHolder.TempInt = value; }
		}
		/// <summary>
		/// Ask the user for their password on each auto-login?
		/// </summary>
		public bool EnhancedSecurity
		{
			get { return dataHolder.EnhancedSecurity; }
			set { this.dataHolder.EnhancedSecurity = value; }
		}
		/// <summary>
		/// Address - Street
		/// </summary>
		public string AddressStreet
		{
			get { return dataHolder.AddressStreet; }
			set { this.dataHolder.AddressStreet = value; }
		}
		/// <summary>
		/// Address - Area
		/// </summary>
		public string AddressArea
		{
			get { return dataHolder.AddressArea; }
			set { this.dataHolder.AddressArea = value; }
		}
		/// <summary>
		/// Address - Place
		/// </summary>
		public string AddressTown
		{
			get { return dataHolder.AddressTown; }
			set { this.dataHolder.AddressTown = value; }
		}
		/// <summary>
		/// Address - County
		/// </summary>
		public string AddressCounty
		{
			get { return dataHolder.AddressCounty; }
			set { this.dataHolder.AddressCounty = value; }
		}
		/// <summary>
		/// Address - Postcode
		/// </summary>
		public string AddressPostcode
		{
			get { return dataHolder.AddressPostcode; }
			set { this.dataHolder.AddressPostcode = value; }
		}
		/// <summary>
		/// Address - Country (link to Country table)
		/// </summary>
		public int AddressCountryK
		{
			get { return dataHolder.AddressCountryK; }
			set { this.dataHolder.AddressCountryK = value; }
		}
		/// <summary>
		/// New=3, WelcomePackInPost=4, HaveCards=0, NeedCards=1, CardsInPost=2
		/// </summary>
		public int CardStatus
		{
			get { return dataHolder.CardStatus; }
			set { this.dataHolder.CardStatus = value; }
		}
		/// <summary>
		/// Tracks the total number of cards that we've sent to this spotter.
		/// </summary>
		public int TotalCardsSent
		{
			get { return dataHolder.TotalCardsSent; }
			set { this.dataHolder.TotalCardsSent = value; }
		}
		/// <summary>
		/// Is this user a spotter?
		/// </summary>
		public bool IsSpotter
		{
			get { return dataHolder.IsSpotter; }
			set { this.dataHolder.IsSpotter = value; }
		}
		/// <summary>
		/// Is this user banned?
		/// </summary>
		public bool Banned
		{
			get { return dataHolder.Banned; }
			set { this.dataHolder.Banned = value; }
		}
		/// <summary>
		/// Who banned this user?
		/// </summary>
		public int BannedByUsrK
		{
			get { return dataHolder.BannedByUsrK; }
			set { this.dataHolder.BannedByUsrK = value; }
		}
		/// <summary>
		/// When were they banned?
		/// </summary>
		public DateTime BannedDateTime
		{
			get { return dataHolder.BannedDateTime; }
			set { this.dataHolder.BannedDateTime = value; }
		}
		/// <summary>
		/// Why were they banned?
		/// </summary>
		public string BannedReason
		{
			get { return dataHolder.BannedReason; }
			set { this.dataHolder.BannedReason = value; }
		}
		/// <summary>
		/// Send generic music types in the update email?
		/// </summary>
		public bool UpdateSendGenericMusic
		{
			get { return dataHolder.UpdateSendGenericMusic; }
			set { this.dataHolder.UpdateSendGenericMusic = value; }
		}
		/// <summary>
		/// Include large events in other parts of the country in the update email?
		/// </summary>
		public int UpdateLargeEvents
		{
			get { return dataHolder.UpdateLargeEvents; }
			set { this.dataHolder.UpdateLargeEvents = value; }
		}
		/// <summary>
		/// Include all events that my buddies are going to in the update email?
		/// </summary>
		public bool UpdateSendBuddies
		{
			get { return dataHolder.UpdateSendBuddies; }
			set { this.dataHolder.UpdateSendBuddies = value; }
		}
		/// <summary>
		/// State var used to reconstruct cropper when re-cropping
		/// </summary>
		public string PicState
		{
			get { return dataHolder.PicState; }
			set { this.dataHolder.PicState = value; }
		}
		/// <summary>
		/// The Photo that was used to create the Pic.
		/// </summary>
		public int PicPhotoK
		{
			get { return dataHolder.PicPhotoK; }
			set { this.dataHolder.PicPhotoK = value; }
		}
		/// <summary>
		/// The Misc that was used to create the Pic.
		/// </summary>
		public int PicMiscK
		{
			get { return dataHolder.PicMiscK; }
			set { this.dataHolder.PicMiscK = value; }
		}
		/// <summary>
		/// Is the live chat box turned on?
		/// </summary>
		public bool IsChatting
		{
			get { return dataHolder.IsChatting; }
			set { this.dataHolder.IsChatting = value; }
		}
		/// <summary>
		/// When was the last time this user gained / lost a buddy? - used when caching the buddies drop-down on the photo page
		/// </summary>
		public DateTime LastBuddyChange
		{
			get { return dataHolder.LastBuddyChange; }
			set { this.dataHolder.LastBuddyChange = value; }
		}
		/// <summary>
		/// News moderator - they can moderate news
		/// </summary>
		public bool NewsModerator
		{
			get { return dataHolder.NewsModerator; }
			set { this.dataHolder.NewsModerator = value; }
		}
		/// <summary>
		/// News permission - they can post news up to this level
		/// </summary>
		public int NewsPermissionLevel
		{
			get { return dataHolder.NewsPermissionLevel; }
			set { this.dataHolder.NewsPermissionLevel = value; }
		}
		/// <summary>
		/// Is this user a beta tester?
		/// </summary>
		public bool IsBetaTester
		{
			get { return dataHolder.IsBetaTester; }
			set { this.dataHolder.IsBetaTester = value; }
		}
		/// <summary>
		/// How many places does this user visit?
		/// </summary>
		public int PlacesVisitCount
		{
			get { return dataHolder.PlacesVisitCount; }
			set { this.dataHolder.PlacesVisitCount = value; }
		}
		/// <summary>
		/// How many places does this user visit?
		/// </summary>
		public int MusicTypesFavouriteCount
		{
			get { return dataHolder.MusicTypesFavouriteCount; }
			set { this.dataHolder.MusicTypesFavouriteCount = value; }
		}
		/// <summary>
		/// How many places does this user visit?
		/// </summary>
		public int PhotosMeCount
		{
			get { return dataHolder.PhotosMeCount; }
			set { this.dataHolder.PhotosMeCount = value; }
		}
		/// <summary>
		/// Is this user a skeleton?
		/// </summary>
		public bool IsSkeleton
		{
			get { return dataHolder.IsSkeleton; }
			set { this.dataHolder.IsSkeleton = value; }
		}
		/// <summary>
		/// Don't send inbox emails?
		/// </summary>
		public bool NoInboxEmails
		{
			get { return dataHolder.NoInboxEmails; }
			set { this.dataHolder.NoInboxEmails = value; }
		}
		/// <summary>
		/// Number of abuse reports this user has submitted that are pending
		/// </summary>
		public int AbuseReportsPending
		{
			get { return dataHolder.AbuseReportsPending; }
			set { this.dataHolder.AbuseReportsPending = value; }
		}
		/// <summary>
		/// Number of abuse reports this user has submitted that were useful (abuse or noabuse)
		/// </summary>
		public int AbuseReportsUseful
		{
			get { return dataHolder.AbuseReportsUseful; }
			set { this.dataHolder.AbuseReportsUseful = value; }
		}
		/// <summary>
		/// Number of abuse reports this user has submitted that were overturned
		/// </summary>
		public int AbuseReportsOverturned
		{
			get { return dataHolder.AbuseReportsOverturned; }
			set { this.dataHolder.AbuseReportsOverturned = value; }
		}
		/// <summary>
		/// Number of abuse accusations this user has had made against them that are pending
		/// </summary>
		public int AbuseAccusationsPending
		{
			get { return dataHolder.AbuseAccusationsPending; }
			set { this.dataHolder.AbuseAccusationsPending = value; }
		}
		/// <summary>
		/// Number of abuse accusations this user has had made against them that are were found to be abuse
		/// </summary>
		public int AbuseAccusationsAbuse
		{
			get { return dataHolder.AbuseAccusationsAbuse; }
			set { this.dataHolder.AbuseAccusationsAbuse = value; }
		}
		/// <summary>
		/// Number of abuse accusations this user has had made against them that are were found to not be abusive
		/// </summary>
		public int AbuseAccusationsNoAbuse
		{
			get { return dataHolder.AbuseAccusationsNoAbuse; }
			set { this.dataHolder.AbuseAccusationsNoAbuse = value; }
		}
		/// <summary>
		/// Should this users photos be moderated prior to going live?
		/// </summary>
		public bool ModeratePhotos
		{
			get { return dataHolder.ModeratePhotos; }
			set { this.dataHolder.ModeratePhotos = value; }
		}
		/// <summary>
		/// Id used for stopping multiple browser pages hogging chat bandwidth
		/// </summary>
		public int ChatSessionId
		{
			get { return dataHolder.ChatSessionId; }
			set { this.dataHolder.ChatSessionId = value; }
		}
		/// <summary>
		/// If the group invite page was used to add this user, this is the inviting group
		/// </summary>
		public int AddedByGroupK
		{
			get { return dataHolder.AddedByGroupK; }
			set { this.dataHolder.AddedByGroupK = value; }
		}
		/// <summary>
		/// Which icon is displayed? 0=None, 1=Dog
		/// </summary>
		public int DonateIcon
		{
			get { return dataHolder.DonateIcon; }
			set { this.dataHolder.DonateIcon = value; }
		}
		/// <summary>
		/// When does the icon expire?
		/// </summary>
		public DateTime DonateExpire
		{
			get { return dataHolder.DonateExpire; }
			set { this.dataHolder.DonateExpire = value; }
		}
		/// <summary>
		/// Date/time when the email was last changed
		/// </summary>
		public DateTime EmailDateTime
		{
			get { return dataHolder.EmailDateTime; }
			set { this.dataHolder.EmailDateTime = value; }
		}
		/// <summary>
		/// Ip of the client when the email address was entered
		/// </summary>
		public string EmailIp
		{
			get { return dataHolder.EmailIp; }
			set { this.dataHolder.EmailIp = value; }
		}
		/// <summary>
		/// Is the user unsubscribed from emails?
		/// </summary>
		public bool EmailHold
		{
			get { return dataHolder.EmailHold; }
			set { this.dataHolder.EmailHold = value; }
		}
		/// <summary>
		/// Can this user edit plain HTML?
		/// </summary>
		public bool IsHtmlEditor
		{
			get { return dataHolder.IsHtmlEditor; }
			set { this.dataHolder.IsHtmlEditor = value; }
		}
		/// <summary>
		/// Is this user a moderator of any groups?
		/// </summary>
		public bool IsGroupModerator
		{
			get { return dataHolder.IsGroupModerator; }
			set { this.dataHolder.IsGroupModerator = value; }
		}
		/// <summary>
		/// Is this skeleton user from the sign-up page - e.g. Entered their email address and password ONCE.
		/// </summary>
		public bool IsSkeletonFromSignup
		{
			get { return dataHolder.IsSkeletonFromSignup; }
			set { this.dataHolder.IsSkeletonFromSignup = value; }
		}
		/// <summary>
		/// Extra icon displayed on the profile
		/// </summary>
		public int ExtraIcon
		{
			get { return dataHolder.ExtraIcon; }
			set { this.dataHolder.ExtraIcon = value; }
		}
		/// <summary>
		/// When does the extra icon expire?
		/// </summary>
		public DateTime ExtraExpire
		{
			get { return dataHolder.ExtraExpire; }
			set { this.dataHolder.ExtraExpire = value; }
		}
		/// <summary>
		/// Total number of distinct users I have taken a photo of
		/// </summary>
		public int SpottingsTotal
		{
			get { return dataHolder.SpottingsTotal; }
			set { this.dataHolder.SpottingsTotal = value; }
		}
		/// <summary>
		/// Total number of distinct users I have taken a photo of in the last month (updated hourly?)
		/// </summary>
		public int SpottingsMonth
		{
			get { return dataHolder.SpottingsMonth; }
			set { this.dataHolder.SpottingsMonth = value; }
		}
		/// <summary>
		/// Ranking in busiest spotters list (month only)
		/// </summary>
		public int SpottingsMonthRank
		{
			get { return dataHolder.SpottingsMonthRank; }
			set { this.dataHolder.SpottingsMonthRank = value; }
		}
		/// <summary>
		/// Is this user part of a promoter account?
		/// </summary>
		public bool IsPromoter
		{
			get { return dataHolder.IsPromoter; }
			set { this.dataHolder.IsPromoter = value; }
		}
		/// <summary>
		/// Number of Camp DSI tickets this user has bought
		/// </summary>
		public int CampTickets
		{
			get { return dataHolder.CampTickets; }
			set { this.dataHolder.CampTickets = value; }
		}
		/// <summary>
		/// Has this user bought a dsi ticket?
		/// </summary>
		public bool HasTicket
		{
			get { return dataHolder.HasTicket; }
			set { this.dataHolder.HasTicket = value; }
		}
		/// <summary>
		/// What's the date/time of the last event the member has a ticket for?
		/// </summary>
		public DateTime LastTicketEventDateTime
		{
			get { return dataHolder.LastTicketEventDateTime; }
			set { this.dataHolder.LastTicketEventDateTime = value; }
		}
		/// <summary>
		/// Cryptographic hash of the password
		/// </summary>
		public Guid PasswordHash
		{
			get { return dataHolder.PasswordHash; }
			set { this.dataHolder.PasswordHash = value; }
		}
		/// <summary>
		/// Cryptographic salt used to generate password hash
		/// </summary>
		public Guid PasswordSalt
		{
			get { return dataHolder.PasswordSalt; }
			set { this.dataHolder.PasswordSalt = value; }
		}
		/// <summary>
		/// Secret data used to verify password reset page
		/// </summary>
		public string PasswordResetEmailSecret
		{
			get { return dataHolder.PasswordResetEmailSecret; }
			set { this.dataHolder.PasswordResetEmailSecret = value; }
		}
		/// <summary>
		/// Has this user agreed to the new terms of use
		/// </summary>
		public bool LegalTermsUser1
		{
			get { return dataHolder.LegalTermsUser1; }
			set { this.dataHolder.LegalTermsUser1 = value; }
		}
		/// <summary>
		/// Has this user agreed to the new terms for promoters
		/// </summary>
		public bool LegalTermsPromoter1
		{
			get { return dataHolder.LegalTermsPromoter1; }
			set { this.dataHolder.LegalTermsPromoter1 = value; }
		}
		/// <summary>
		/// Is the user a super admin user?
		/// </summary>
		public bool IsSuperAdmin
		{
			get { return dataHolder.IsSuperAdmin; }
			set { this.dataHolder.IsSuperAdmin = value; }
		}
		/// <summary>
		/// Is the user a sales person?
		/// </summary>
		public bool IsSalesPerson
		{
			get { return dataHolder.IsSalesPerson; }
			set { this.dataHolder.IsSalesPerson = value; }
		}
		/// <summary>
		/// Time stamp to record when someone is trying to purchase an IBuyable item that is linked to this Bob. No lock = DateTime.MinValue
		/// </summary>
		public DateTime BuyableLockDateTime
		{
			get { return dataHolder.BuyableLockDateTime; }
			set { this.dataHolder.BuyableLockDateTime = value; }
		}
		/// <summary>
		/// For sales people: their sales team number
		/// </summary>
		public int SalesTeam
		{
			get { return dataHolder.SalesTeam; }
			set { this.dataHolder.SalesTeam = value; }
		}
		/// <summary>
		/// A guid identifier for the Usr
		/// </summary>
		public Guid Guid
		{
			get { return dataHolder.Guid; }
			set { this.dataHolder.Guid = value; }
		}
		/// <summary>
		/// Has the user agreed to the new (2007-06) user terms?
		/// </summary>
		public bool LegalTermsUser2
		{
			get { return dataHolder.LegalTermsUser2; }
			set { this.dataHolder.LegalTermsUser2 = value; }
		}
		/// <summary>
		/// Has the user agreed to the new (2007-06) promoter terms?
		/// </summary>
		public bool LegalTermsPromoter2
		{
			get { return dataHolder.LegalTermsPromoter2; }
			set { this.dataHolder.LegalTermsPromoter2 = value; }
		}
		/// <summary>
		/// Datetime of this users last photo upload
		/// </summary>
		public DateTime LastPhotoUpload
		{
			get { return dataHolder.LastPhotoUpload; }
			set { this.dataHolder.LastPhotoUpload = value; }
		}
		/// <summary>
		/// Date/time of the tuesday that the last update email that was delivered to this user. Used to make the update email restartable
		/// </summary>
		public DateTime DateTimeLastUpdateEmail
		{
			get { return dataHolder.DateTimeLastUpdateEmail; }
			set { this.dataHolder.DateTimeLastUpdateEmail = value; }
		}
		/// <summary>
		/// Was this usr invited using the contact importer device?
		/// </summary>
		public bool InvitedViaContactImporter
		{
			get { return dataHolder.InvitedViaContactImporter; }
			set { this.dataHolder.InvitedViaContactImporter = value; }
		}
		/// <summary>
		/// Has the user registered through a styled tickets microsite?
		/// </summary>
		public bool IsTicketsRegistered
		{
			get { return dataHolder.IsTicketsRegistered; }
			set { this.dataHolder.IsTicketsRegistered = value; }
		}
		/// <summary>
		/// Disallow this usr's profile to be found by searching name or email address?
		/// </summary>
		public bool ExDirectory
		{
			get { return dataHolder.ExDirectory; }
			set { this.dataHolder.ExDirectory = value; }
		}
		/// <summary>
		/// Did a recent email to this user suffer a hard bounce?
		/// </summary>
		public bool IsEmailBroken
		{
			get { return dataHolder.IsEmailBroken; }
			set { this.dataHolder.IsEmailBroken = value; }
		}
		/// <summary>
		/// When was the last chat message posted?
		/// </summary>
		public DateTime? DateTimeLastChatMessage
		{
			get { return dataHolder.DateTimeLastChatMessage; }
			set { this.dataHolder.DateTimeLastChatMessage = value; }
		}
		/// <summary>
		/// The Donation Icon, if applicable, which the user will have appear in their rollover
		/// </summary>
		public int? RolloverDonationIconK
		{
			get { return dataHolder.RolloverDonationIconK; }
			set { this.dataHolder.RolloverDonationIconK = value; }
		}
		/// <summary>
		/// Guid of the chat pic (300px x 100px)
		/// </summary>
		public Guid? ChatPic
		{
			get { return dataHolder.ChatPic; }
			set { this.dataHolder.ChatPic = value; }
		}
		/// <summary>
		/// PhotoK that the chat pic was cropped from
		/// </summary>
		public int? ChatPicPhotoK
		{
			get { return dataHolder.ChatPicPhotoK; }
			set { this.dataHolder.ChatPicPhotoK = value; }
		}
		/// <summary>
		/// State of the cropper for the chat pic
		/// </summary>
		public string ChatPicState
		{
			get { return dataHolder.ChatPicState; }
			set { this.dataHolder.ChatPicState = value; }
		}
		/// <summary>
		/// Date / time that the buddy alerts room was last refreshed
		/// </summary>
		public DateTime? DateTimeLastBuddyAlertsRoomRefresh
		{
			get { return dataHolder.DateTimeLastBuddyAlertsRoomRefresh; }
			set { this.dataHolder.DateTimeLastBuddyAlertsRoomRefresh = value; }
		}
		/// <summary>
		/// Photo usage permission
		/// </summary>
		public int PhotoUsage
		{
			get { return dataHolder.PhotoUsage; }
			set { this.dataHolder.PhotoUsage = value; }
		}
		/// <summary>
		/// Facebook user id
		/// </summary>
		public long? FacebookUID
		{
			get { return dataHolder.FacebookUID; }
			set { this.dataHolder.FacebookUID = value; }
		}
		/// <summary>
		/// Facebook connect linked
		/// </summary>
		public bool FacebookConnected
		{
			get { return dataHolder.FacebookConnected; }
			set { this.dataHolder.FacebookConnected = value; }
		}
		/// <summary>
		/// Facebook connect linked date/time
		/// </summary>
		public DateTime? FacebookConnectedDateTime
		{
			get { return dataHolder.FacebookConnectedDateTime; }
			set { this.dataHolder.FacebookConnectedDateTime = value; }
		}
		/// <summary>
		/// Facebook email extended permission
		/// </summary>
		public bool FacebookPermissionEmail
		{
			get { return dataHolder.FacebookPermissionEmail; }
			set { this.dataHolder.FacebookPermissionEmail = value; }
		}
		/// <summary>
		/// Facebook publish_stream extended permission
		/// </summary>
		public bool FacebookPermissionPublish
		{
			get { return dataHolder.FacebookPermissionPublish; }
			set { this.dataHolder.FacebookPermissionPublish = value; }
		}
		/// <summary>
		/// Facebook create_event extended permission
		/// </summary>
		public bool FacebookPermissionEvent
		{
			get { return dataHolder.FacebookPermissionEvent; }
			set { this.dataHolder.FacebookPermissionEvent = value; }
		}
		/// <summary>
		/// Facebook rsvp_event extended permission
		/// </summary>
		public bool FacebookPermissionRsvp
		{
			get { return dataHolder.FacebookPermissionRsvp; }
			set { this.dataHolder.FacebookPermissionRsvp = value; }
		}
		/// <summary>
		/// Post a facebook stream story when I attend events
		/// </summary>
		public bool FacebookStoryAttendEvent
		{
			get { return dataHolder.FacebookStoryAttendEvent; }
			set { this.dataHolder.FacebookStoryAttendEvent = value; }
		}
		/// <summary>
		/// Post a facebook stream story when I buy tickets
		/// </summary>
		public bool FacebookStoryBuyTicket
		{
			get { return dataHolder.FacebookStoryBuyTicket; }
			set { this.dataHolder.FacebookStoryBuyTicket = value; }
		}
		/// <summary>
		/// Post a facebook stream story when I upload photos
		/// </summary>
		public bool FacebookStoryUploadPhoto
		{
			get { return dataHolder.FacebookStoryUploadPhoto; }
			set { this.dataHolder.FacebookStoryUploadPhoto = value; }
		}
		/// <summary>
		/// Post a facebook stream story when I get spotted in photos
		/// </summary>
		public bool FacebookStorySpotted
		{
			get { return dataHolder.FacebookStorySpotted; }
			set { this.dataHolder.FacebookStorySpotted = value; }
		}
		/// <summary>
		/// Post a facebook stream story when I have a photo featured on the front page
		/// </summary>
		public bool FacebookStoryPhotoFeatured
		{
			get { return dataHolder.FacebookStoryPhotoFeatured; }
			set { this.dataHolder.FacebookStoryPhotoFeatured = value; }
		}
		/// <summary>
		/// Post a facebook stream story when I make a new buddy
		/// </summary>
		public bool FacebookStoryNewBuddy
		{
			get { return dataHolder.FacebookStoryNewBuddy; }
			set { this.dataHolder.FacebookStoryNewBuddy = value; }
		}
		/// <summary>
		/// Post a facebook stream story when I publish an article
		/// </summary>
		public bool FacebookStoryPublishArticle
		{
			get { return dataHolder.FacebookStoryPublishArticle; }
			set { this.dataHolder.FacebookStoryPublishArticle = value; }
		}
		/// <summary>
		/// Post a facebook stream story when I join a group
		/// </summary>
		public bool FacebookStoryJoinGroup
		{
			get { return dataHolder.FacebookStoryJoinGroup; }
			set { this.dataHolder.FacebookStoryJoinGroup = value; }
		}
		/// <summary>
		/// Post a facebook stream story when I put stuff on my favourites
		/// </summary>
		public bool FacebookStoryFavourite
		{
			get { return dataHolder.FacebookStoryFavourite; }
			set { this.dataHolder.FacebookStoryFavourite = value; }
		}
		/// <summary>
		/// Post a facebook stream story when I post new topics
		/// </summary>
		public bool FacebookStoryNewTopic
		{
			get { return dataHolder.FacebookStoryNewTopic; }
			set { this.dataHolder.FacebookStoryNewTopic = value; }
		}
		/// <summary>
		/// Post a facebook stream story when I post an event review
		/// </summary>
		public bool FacebookStoryEventReview
		{
			get { return dataHolder.FacebookStoryEventReview; }
			set { this.dataHolder.FacebookStoryEventReview = value; }
		}
		/// <summary>
		/// Post a facebook stream story when I post news
		/// </summary>
		public bool FacebookStoryPostNews
		{
			get { return dataHolder.FacebookStoryPostNews; }
			set { this.dataHolder.FacebookStoryPostNews = value; }
		}
		/// <summary>
		/// Post a facebook stream story when I laugh at a comment
		/// </summary>
		public bool FacebookStoryLaugh
		{
			get { return dataHolder.FacebookStoryLaugh; }
			set { this.dataHolder.FacebookStoryLaugh = value; }
		}
		/// <summary>
		/// Add an event to facebook when I add an event
		/// </summary>
		public bool FacebookEventAdd
		{
			get { return dataHolder.FacebookEventAdd; }
			set { this.dataHolder.FacebookEventAdd = value; }
		}
		/// <summary>
		/// Add me on Facebook when I attend an event
		/// </summary>
		public bool FacebookEventAttend
		{
			get { return dataHolder.FacebookEventAttend; }
			set { this.dataHolder.FacebookEventAttend = value; }
		}
		/// <summary>
		/// Facebook email
		/// </summary>
		public string FacebookEmail
		{
			get { return dataHolder.FacebookEmail; }
			set { this.dataHolder.FacebookEmail = value; }
		}
		/// <summary>
		/// Is this user a DJ?
		/// </summary>
		public bool? IsDj
		{
			get { return dataHolder.IsDj; }
			set { this.dataHolder.IsDj = value; }
		}
		/// <summary>
		/// Main Facebook Story permission - Well update your Facebook wall when you create stuff
		/// </summary>
		public bool? FacebookStory
		{
			get { return dataHolder.FacebookStory; }
			set { this.dataHolder.FacebookStory = value; }
		}
		/// <summary>
		/// Main Facebook Story permission - Well update your Facebook wall when you create stuff
		/// </summary>
		public bool FacebookStory1
		{
			get { return dataHolder.FacebookStory1; }
			set { this.dataHolder.FacebookStory1 = value; }
		}
		/// <summary>
		/// Access token needed for offline access
		/// </summary>
		public string FacebookAccessToken
		{
			get { return dataHolder.FacebookAccessToken; }
			set { this.dataHolder.FacebookAccessToken = value; }
		}
		/// <summary>
		/// Post a facebook stream story when I put topics on my favourites
		/// </summary>
		public bool FacebookStoryFavouriteTopic
		{
			get { return dataHolder.FacebookStoryFavouriteTopic; }
			set { this.dataHolder.FacebookStoryFavouriteTopic = value; }
		}
		/// <summary>
		/// Does this user need a captcha for security?
		/// </summary>
		public bool? NeedsCaptcha
		{
			get { return dataHolder.NeedsCaptcha; }
			set { this.dataHolder.NeedsCaptcha = value; }
		}
		/// <summary>
		/// Has this user correctly passed the captcha test?
		/// </summary>
		public bool? PassedCaptcha
		{
			get { return dataHolder.PassedCaptcha; }
			set { this.dataHolder.PassedCaptcha = value; }
		}
		/// <summary>
		/// Date/time of the start of the month that bounce mails are being counted
		/// </summary>
		public DateTime? BouncePeriodDateTime
		{
			get { return dataHolder.BouncePeriodDateTime; }
			set { this.dataHolder.BouncePeriodDateTime = value; }
		}
		/// <summary>
		/// Total emails sent in the bounce mail period
		/// </summary>
		public int? TotalEmailsSentInPeriod
		{
			get { return dataHolder.TotalEmailsSentInPeriod; }
			set { this.dataHolder.TotalEmailsSentInPeriod = value; }
		}
		/// <summary>
		/// Total hard bounces with a matching string detected in the bounce period
		/// </summary>
		public int? MatchedHardBounceInPeriod
		{
			get { return dataHolder.MatchedHardBounceInPeriod; }
			set { this.dataHolder.MatchedHardBounceInPeriod = value; }
		}
		/// <summary>
		/// Total hard bounces without a matching string detected in the bounce period
		/// </summary>
		public int? UnmatchedHardBounceInPeriod
		{
			get { return dataHolder.UnmatchedHardBounceInPeriod; }
			set { this.dataHolder.UnmatchedHardBounceInPeriod = value; }
		}
		/// <summary>
		/// Total soft bounces detected in the bounce period
		/// </summary>
		public int? SoftBounceInPeriod
		{
			get { return dataHolder.SoftBounceInPeriod; }
			set { this.dataHolder.SoftBounceInPeriod = value; }
		}
		#endregion
		public Usr Usr
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new Usr(K);
					}
					else
					{
						bob = new Usr();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region UsrSet
	public partial class UsrSet : BobSet, IEnumerable<Usr>
	{
		public UsrSet(Query query) : base(query) { }

		public Usr this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new Usr(this);
					((Usr)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (Usr)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new UsrTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<Usr> ToList()
		{
			List<Usr> list = new List<Usr>();
			foreach (Usr item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<Usr> Members

		public new IEnumerator<Usr> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region UsrTableDef
	public class UsrTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "Usr";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "5D76E076";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return Usr.GetColumnName((Usr.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.Usr;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return true;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return Usr.Columns.K;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			Usr.Columns c = (Usr.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case Usr.Columns.K: ColumnStore[i] = new ColumnDef(c, "K", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey | SqlColumnFlag.AutoNumber, null); break;
					case Usr.Columns.Email: ColumnStore[i] = new ColumnDef(c, "Email", SqlDbType.VarChar, 100, SqlColumnFlag.PrimaryKey, ""); break;
					case Usr.Columns.Password: ColumnStore[i] = new ColumnDef(c, "Password", SqlDbType.VarChar, ""); break;
					case Usr.Columns.LoginCount: ColumnStore[i] = new ColumnDef(c, "LoginCount", SqlDbType.Int, 0); break;
					case Usr.Columns.IsAdmin: ColumnStore[i] = new ColumnDef(c, "IsAdmin", SqlDbType.Bit, false); break;
					case Usr.Columns.IsEmailVerified: ColumnStore[i] = new ColumnDef(c, "IsEmailVerified", SqlDbType.Bit, false); break;
					case Usr.Columns.Pic: ColumnStore[i] = new ColumnDef(c, "Pic", SqlDbType.UniqueIdentifier, Guid.Empty); break;
					case Usr.Columns.PicOriginal: ColumnStore[i] = new ColumnDef(c, "PicOriginal", SqlDbType.UniqueIdentifier, Guid.Empty); break;
					case Usr.Columns.FirstName: ColumnStore[i] = new ColumnDef(c, "FirstName", SqlDbType.VarChar, 100, ""); break;
					case Usr.Columns.LastName: ColumnStore[i] = new ColumnDef(c, "LastName", SqlDbType.VarChar, 100, ""); break;
					case Usr.Columns.NickName: ColumnStore[i] = new ColumnDef(c, "NickName", SqlDbType.VarChar, 100, ""); break;
					case Usr.Columns.Mobile: ColumnStore[i] = new ColumnDef(c, "Mobile", SqlDbType.VarChar, ""); break;
					case Usr.Columns.MobileCountryCode: ColumnStore[i] = new ColumnDef(c, "MobileCountryCode", SqlDbType.VarChar, 3, ""); break;
					case Usr.Columns.MobileNumber: ColumnStore[i] = new ColumnDef(c, "MobileNumber", SqlDbType.VarChar, ""); break;
					case Usr.Columns.SendSpottedEmails: ColumnStore[i] = new ColumnDef(c, "SendSpottedEmails", SqlDbType.Bit, false); break;
					case Usr.Columns.SendSpottedTexts: ColumnStore[i] = new ColumnDef(c, "SendSpottedTexts", SqlDbType.Bit, false); break;
					case Usr.Columns.SendPartnerEmails: ColumnStore[i] = new ColumnDef(c, "SendPartnerEmails", SqlDbType.Bit, false); break;
					case Usr.Columns.SendPartnerTexts: ColumnStore[i] = new ColumnDef(c, "SendPartnerTexts", SqlDbType.Bit, false); break;
					case Usr.Columns.UpdateData: ColumnStore[i] = new ColumnDef(c, "UpdateData", SqlDbType.VarChar, ""); break;
					case Usr.Columns.AdminNote: ColumnStore[i] = new ColumnDef(c, "AdminNote", SqlDbType.Text, ""); break;
					case Usr.Columns.DateTimeLastAccess: ColumnStore[i] = new ColumnDef(c, "DateTimeLastAccess", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case Usr.Columns.DateTimeSignUp: ColumnStore[i] = new ColumnDef(c, "DateTimeSignUp", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case Usr.Columns.DateTimeLastPageRequest: ColumnStore[i] = new ColumnDef(c, "DateTimeLastPageRequest", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case Usr.Columns.PrefsText: ColumnStore[i] = new ColumnDef(c, "PrefsText", SqlDbType.Text, ""); break;
					case Usr.Columns.LoginString: ColumnStore[i] = new ColumnDef(c, "LoginString", SqlDbType.Char, 6, ""); break;
					case Usr.Columns.PersonalStatement: ColumnStore[i] = new ColumnDef(c, "PersonalStatement", SqlDbType.Text, ""); break;
					case Usr.Columns.AddedByUsrK: ColumnStore[i] = new ColumnDef(c, "AddedByUsrK", SqlDbType.Int, 0); break;
					case Usr.Columns.AdminLevel: ColumnStore[i] = new ColumnDef(c, "AdminLevel", SqlDbType.Int, 0); break;
					case Usr.Columns.RandomNumber: ColumnStore[i] = new ColumnDef(c, "RandomNumber", SqlDbType.Float, 0.0); break;
					case Usr.Columns.LastPrivateComment: ColumnStore[i] = new ColumnDef(c, "LastPrivateComment", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case Usr.Columns.LastPrivateChatMessage: ColumnStore[i] = new ColumnDef(c, "LastPrivateChatMessage", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case Usr.Columns.IsSingle: ColumnStore[i] = new ColumnDef(c, "IsSingle", SqlDbType.Bit, false); break;
					case Usr.Columns.IsMale: ColumnStore[i] = new ColumnDef(c, "IsMale", SqlDbType.Bit, false); break;
					case Usr.Columns.IsFemale: ColumnStore[i] = new ColumnDef(c, "IsFemale", SqlDbType.Bit, false); break;
					case Usr.Columns.DateOfBirth: ColumnStore[i] = new ColumnDef(c, "DateOfBirth", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case Usr.Columns.DateSexMale: ColumnStore[i] = new ColumnDef(c, "DateSexMale", SqlDbType.Bit, false); break;
					case Usr.Columns.DateSexFemale: ColumnStore[i] = new ColumnDef(c, "DateSexFemale", SqlDbType.Bit, false); break;
					case Usr.Columns.DateAgeRangeLow: ColumnStore[i] = new ColumnDef(c, "DateAgeRangeLow", SqlDbType.Int, 0); break;
					case Usr.Columns.DateAgeRangeHigh: ColumnStore[i] = new ColumnDef(c, "DateAgeRangeHigh", SqlDbType.Int, 0); break;
					case Usr.Columns.Relationship1: ColumnStore[i] = new ColumnDef(c, "Relationship1", SqlDbType.Bit, false); break;
					case Usr.Columns.Relationship2: ColumnStore[i] = new ColumnDef(c, "Relationship2", SqlDbType.Bit, false); break;
					case Usr.Columns.Relationship3: ColumnStore[i] = new ColumnDef(c, "Relationship3", SqlDbType.Bit, false); break;
					case Usr.Columns.SexHelperMale: ColumnStore[i] = new ColumnDef(c, "SexHelperMale", SqlDbType.Bit, false); break;
					case Usr.Columns.SexHelperFemale: ColumnStore[i] = new ColumnDef(c, "SexHelperFemale", SqlDbType.Bit, false); break;
					case Usr.Columns.BuddyCount: ColumnStore[i] = new ColumnDef(c, "BuddyCount", SqlDbType.Int, 0); break;
					case Usr.Columns.ChatMessageCount: ColumnStore[i] = new ColumnDef(c, "ChatMessageCount", SqlDbType.Int, 0); break;
					case Usr.Columns.CommentCount: ColumnStore[i] = new ColumnDef(c, "CommentCount", SqlDbType.Int, 0); break;
					case Usr.Columns.EventCount: ColumnStore[i] = new ColumnDef(c, "EventCount", SqlDbType.Int, 0); break;
					case Usr.Columns.HomePlaceK: ColumnStore[i] = new ColumnDef(c, "HomePlaceK", SqlDbType.Int, 0); break;
					case Usr.Columns.AgreeTerms: ColumnStore[i] = new ColumnDef(c, "AgreeTerms", SqlDbType.Bit, false); break;
					case Usr.Columns.GuestClientK: ColumnStore[i] = new ColumnDef(c, "GuestClientK", SqlDbType.Int, 0); break;
					case Usr.Columns.FavouriteMusicTypeK: ColumnStore[i] = new ColumnDef(c, "FavouriteMusicTypeK", SqlDbType.Int, 0); break;
					case Usr.Columns.TotalLol: ColumnStore[i] = new ColumnDef(c, "TotalLol", SqlDbType.Int, 0); break;
					case Usr.Columns.TotalMadeLol: ColumnStore[i] = new ColumnDef(c, "TotalMadeLol", SqlDbType.Int, 0); break;
					case Usr.Columns.LastLol: ColumnStore[i] = new ColumnDef(c, "LastLol", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case Usr.Columns.UniqueMadeLol: ColumnStore[i] = new ColumnDef(c, "UniqueMadeLol", SqlDbType.Int, 0); break;
					case Usr.Columns.ChatXml: ColumnStore[i] = new ColumnDef(c, "ChatXml", SqlDbType.Text, ""); break;
					case Usr.Columns.IsLoggedOn: ColumnStore[i] = new ColumnDef(c, "IsLoggedOn", SqlDbType.Bit, false); break;
					case Usr.Columns.LastChatItem: ColumnStore[i] = new ColumnDef(c, "LastChatItem", SqlDbType.BigInt, 0L); break;
					case Usr.Columns.LastIp: ColumnStore[i] = new ColumnDef(c, "LastIp", SqlDbType.VarChar, ""); break;
					case Usr.Columns.Ignore: ColumnStore[i] = new ColumnDef(c, "Ignore", SqlDbType.Bit, false); break;
					case Usr.Columns.IsProSpotter: ColumnStore[i] = new ColumnDef(c, "IsProSpotter", SqlDbType.Bit, false); break;
					case Usr.Columns.LastInvite: ColumnStore[i] = new ColumnDef(c, "LastInvite", SqlDbType.Int, 0); break;
					case Usr.Columns.IntroducedByUsrK: ColumnStore[i] = new ColumnDef(c, "IntroducedByUsrK", SqlDbType.Int, 0); break;
					case Usr.Columns.SendFlyers: ColumnStore[i] = new ColumnDef(c, "SendFlyers", SqlDbType.Bit, false); break;
					case Usr.Columns.SendInvites: ColumnStore[i] = new ColumnDef(c, "SendInvites", SqlDbType.Bit, false); break;
					case Usr.Columns.TotalPhotoUploads: ColumnStore[i] = new ColumnDef(c, "TotalPhotoUploads", SqlDbType.Int, 0); break;
					case Usr.Columns.TempInt: ColumnStore[i] = new ColumnDef(c, "TempInt", SqlDbType.Int, 0); break;
					case Usr.Columns.EnhancedSecurity: ColumnStore[i] = new ColumnDef(c, "EnhancedSecurity", SqlDbType.Bit, false); break;
					case Usr.Columns.AddressStreet: ColumnStore[i] = new ColumnDef(c, "AddressStreet", SqlDbType.VarChar, ""); break;
					case Usr.Columns.AddressArea: ColumnStore[i] = new ColumnDef(c, "AddressArea", SqlDbType.VarChar, ""); break;
					case Usr.Columns.AddressTown: ColumnStore[i] = new ColumnDef(c, "AddressTown", SqlDbType.VarChar, ""); break;
					case Usr.Columns.AddressCounty: ColumnStore[i] = new ColumnDef(c, "AddressCounty", SqlDbType.VarChar, ""); break;
					case Usr.Columns.AddressPostcode: ColumnStore[i] = new ColumnDef(c, "AddressPostcode", SqlDbType.VarChar, ""); break;
					case Usr.Columns.AddressCountryK: ColumnStore[i] = new ColumnDef(c, "AddressCountryK", SqlDbType.Int, 0); break;
					case Usr.Columns.CardStatus: ColumnStore[i] = new ColumnDef(c, "CardStatus", SqlDbType.Int, 0); break;
					case Usr.Columns.TotalCardsSent: ColumnStore[i] = new ColumnDef(c, "TotalCardsSent", SqlDbType.Int, 0); break;
					case Usr.Columns.IsSpotter: ColumnStore[i] = new ColumnDef(c, "IsSpotter", SqlDbType.Bit, false); break;
					case Usr.Columns.Banned: ColumnStore[i] = new ColumnDef(c, "Banned", SqlDbType.Bit, false); break;
					case Usr.Columns.BannedByUsrK: ColumnStore[i] = new ColumnDef(c, "BannedByUsrK", SqlDbType.Int, 0); break;
					case Usr.Columns.BannedDateTime: ColumnStore[i] = new ColumnDef(c, "BannedDateTime", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case Usr.Columns.BannedReason: ColumnStore[i] = new ColumnDef(c, "BannedReason", SqlDbType.VarChar, ""); break;
					case Usr.Columns.UpdateSendGenericMusic: ColumnStore[i] = new ColumnDef(c, "UpdateSendGenericMusic", SqlDbType.Bit, false); break;
					case Usr.Columns.UpdateLargeEvents: ColumnStore[i] = new ColumnDef(c, "UpdateLargeEvents", SqlDbType.Int, 0); break;
					case Usr.Columns.UpdateSendBuddies: ColumnStore[i] = new ColumnDef(c, "UpdateSendBuddies", SqlDbType.Bit, false); break;
					case Usr.Columns.PicState: ColumnStore[i] = new ColumnDef(c, "PicState", SqlDbType.VarChar, 100, ""); break;
					case Usr.Columns.PicPhotoK: ColumnStore[i] = new ColumnDef(c, "PicPhotoK", SqlDbType.Int, 0); break;
					case Usr.Columns.PicMiscK: ColumnStore[i] = new ColumnDef(c, "PicMiscK", SqlDbType.Int, 0); break;
					case Usr.Columns.IsChatting: ColumnStore[i] = new ColumnDef(c, "IsChatting", SqlDbType.Bit, false); break;
					case Usr.Columns.LastBuddyChange: ColumnStore[i] = new ColumnDef(c, "LastBuddyChange", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case Usr.Columns.NewsModerator: ColumnStore[i] = new ColumnDef(c, "NewsModerator", SqlDbType.Bit, false); break;
					case Usr.Columns.NewsPermissionLevel: ColumnStore[i] = new ColumnDef(c, "NewsPermissionLevel", SqlDbType.Int, 0); break;
					case Usr.Columns.IsBetaTester: ColumnStore[i] = new ColumnDef(c, "IsBetaTester", SqlDbType.Bit, false); break;
					case Usr.Columns.PlacesVisitCount: ColumnStore[i] = new ColumnDef(c, "PlacesVisitCount", SqlDbType.Int, 0); break;
					case Usr.Columns.MusicTypesFavouriteCount: ColumnStore[i] = new ColumnDef(c, "MusicTypesFavouriteCount", SqlDbType.Int, 0); break;
					case Usr.Columns.PhotosMeCount: ColumnStore[i] = new ColumnDef(c, "PhotosMeCount", SqlDbType.Int, 0); break;
					case Usr.Columns.IsSkeleton: ColumnStore[i] = new ColumnDef(c, "IsSkeleton", SqlDbType.Bit, false); break;
					case Usr.Columns.NoInboxEmails: ColumnStore[i] = new ColumnDef(c, "NoInboxEmails", SqlDbType.Bit, false); break;
					case Usr.Columns.AbuseReportsPending: ColumnStore[i] = new ColumnDef(c, "AbuseReportsPending", SqlDbType.Int, 0); break;
					case Usr.Columns.AbuseReportsUseful: ColumnStore[i] = new ColumnDef(c, "AbuseReportsUseful", SqlDbType.Int, 0); break;
					case Usr.Columns.AbuseReportsOverturned: ColumnStore[i] = new ColumnDef(c, "AbuseReportsOverturned", SqlDbType.Int, 0); break;
					case Usr.Columns.AbuseAccusationsPending: ColumnStore[i] = new ColumnDef(c, "AbuseAccusationsPending", SqlDbType.Int, 0); break;
					case Usr.Columns.AbuseAccusationsAbuse: ColumnStore[i] = new ColumnDef(c, "AbuseAccusationsAbuse", SqlDbType.Int, 0); break;
					case Usr.Columns.AbuseAccusationsNoAbuse: ColumnStore[i] = new ColumnDef(c, "AbuseAccusationsNoAbuse", SqlDbType.Int, 0); break;
					case Usr.Columns.ModeratePhotos: ColumnStore[i] = new ColumnDef(c, "ModeratePhotos", SqlDbType.Bit, false); break;
					case Usr.Columns.ChatSessionId: ColumnStore[i] = new ColumnDef(c, "ChatSessionId", SqlDbType.Int, 0); break;
					case Usr.Columns.AddedByGroupK: ColumnStore[i] = new ColumnDef(c, "AddedByGroupK", SqlDbType.Int, 0); break;
					case Usr.Columns.DonateIcon: ColumnStore[i] = new ColumnDef(c, "DonateIcon", SqlDbType.Int, 0); break;
					case Usr.Columns.DonateExpire: ColumnStore[i] = new ColumnDef(c, "DonateExpire", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case Usr.Columns.EmailDateTime: ColumnStore[i] = new ColumnDef(c, "EmailDateTime", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case Usr.Columns.EmailIp: ColumnStore[i] = new ColumnDef(c, "EmailIp", SqlDbType.VarChar, 15, ""); break;
					case Usr.Columns.EmailHold: ColumnStore[i] = new ColumnDef(c, "EmailHold", SqlDbType.Bit, false); break;
					case Usr.Columns.IsHtmlEditor: ColumnStore[i] = new ColumnDef(c, "IsHtmlEditor", SqlDbType.Bit, false); break;
					case Usr.Columns.IsGroupModerator: ColumnStore[i] = new ColumnDef(c, "IsGroupModerator", SqlDbType.Bit, false); break;
					case Usr.Columns.IsSkeletonFromSignup: ColumnStore[i] = new ColumnDef(c, "IsSkeletonFromSignup", SqlDbType.Bit, false); break;
					case Usr.Columns.ExtraIcon: ColumnStore[i] = new ColumnDef(c, "ExtraIcon", SqlDbType.Int, 0); break;
					case Usr.Columns.ExtraExpire: ColumnStore[i] = new ColumnDef(c, "ExtraExpire", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case Usr.Columns.SpottingsTotal: ColumnStore[i] = new ColumnDef(c, "SpottingsTotal", SqlDbType.Int, 0); break;
					case Usr.Columns.SpottingsMonth: ColumnStore[i] = new ColumnDef(c, "SpottingsMonth", SqlDbType.Int, 0); break;
					case Usr.Columns.SpottingsMonthRank: ColumnStore[i] = new ColumnDef(c, "SpottingsMonthRank", SqlDbType.Int, 0); break;
					case Usr.Columns.IsPromoter: ColumnStore[i] = new ColumnDef(c, "IsPromoter", SqlDbType.Bit, false); break;
					case Usr.Columns.CampTickets: ColumnStore[i] = new ColumnDef(c, "CampTickets", SqlDbType.Int, 0); break;
					case Usr.Columns.HasTicket: ColumnStore[i] = new ColumnDef(c, "HasTicket", SqlDbType.Bit, false); break;
					case Usr.Columns.LastTicketEventDateTime: ColumnStore[i] = new ColumnDef(c, "LastTicketEventDateTime", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case Usr.Columns.PasswordHash: ColumnStore[i] = new ColumnDef(c, "PasswordHash", SqlDbType.UniqueIdentifier, Guid.Empty); break;
					case Usr.Columns.PasswordSalt: ColumnStore[i] = new ColumnDef(c, "PasswordSalt", SqlDbType.UniqueIdentifier, Guid.Empty); break;
					case Usr.Columns.PasswordResetEmailSecret: ColumnStore[i] = new ColumnDef(c, "PasswordResetEmailSecret", SqlDbType.VarChar, 10, ""); break;
					case Usr.Columns.LegalTermsUser1: ColumnStore[i] = new ColumnDef(c, "LegalTermsUser1", SqlDbType.Bit, false); break;
					case Usr.Columns.LegalTermsPromoter1: ColumnStore[i] = new ColumnDef(c, "LegalTermsPromoter1", SqlDbType.Bit, false); break;
					case Usr.Columns.IsSuperAdmin: ColumnStore[i] = new ColumnDef(c, "IsSuperAdmin", SqlDbType.Bit, false); break;
					case Usr.Columns.IsSalesPerson: ColumnStore[i] = new ColumnDef(c, "IsSalesPerson", SqlDbType.Bit, false); break;
					case Usr.Columns.BuyableLockDateTime: ColumnStore[i] = new ColumnDef(c, "BuyableLockDateTime", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case Usr.Columns.SalesTeam: ColumnStore[i] = new ColumnDef(c, "SalesTeam", SqlDbType.Int, 0); break;
					case Usr.Columns.Guid: ColumnStore[i] = new ColumnDef(c, "Guid", SqlDbType.UniqueIdentifier, Guid.NewGuid()); break;
					case Usr.Columns.LegalTermsUser2: ColumnStore[i] = new ColumnDef(c, "LegalTermsUser2", SqlDbType.Bit, false); break;
					case Usr.Columns.LegalTermsPromoter2: ColumnStore[i] = new ColumnDef(c, "LegalTermsPromoter2", SqlDbType.Bit, false); break;
					case Usr.Columns.LastPhotoUpload: ColumnStore[i] = new ColumnDef(c, "LastPhotoUpload", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case Usr.Columns.DateTimeLastUpdateEmail: ColumnStore[i] = new ColumnDef(c, "DateTimeLastUpdateEmail", SqlDbType.DateTime, 16, DateTime.Parse("01/01/2000 00:00:00")); break;
					case Usr.Columns.InvitedViaContactImporter: ColumnStore[i] = new ColumnDef(c, "InvitedViaContactImporter", SqlDbType.Bit, false); break;
					case Usr.Columns.IsTicketsRegistered: ColumnStore[i] = new ColumnDef(c, "IsTicketsRegistered", SqlDbType.Bit, false); break;
					case Usr.Columns.ExDirectory: ColumnStore[i] = new ColumnDef(c, "ExDirectory", SqlDbType.Bit, false); break;
					case Usr.Columns.IsEmailBroken: ColumnStore[i] = new ColumnDef(c, "IsEmailBroken", SqlDbType.Bit, false); break;
					case Usr.Columns.DateTimeLastChatMessage: ColumnStore[i] = new ColumnDef(c, "DateTimeLastChatMessage", SqlDbType.DateTime, 16, null); break;
					case Usr.Columns.RolloverDonationIconK: ColumnStore[i] = new ColumnDef(c, "RolloverDonationIconK", SqlDbType.Int, null); break;
					case Usr.Columns.ChatPic: ColumnStore[i] = new ColumnDef(c, "ChatPic", SqlDbType.UniqueIdentifier, null); break;
					case Usr.Columns.ChatPicPhotoK: ColumnStore[i] = new ColumnDef(c, "ChatPicPhotoK", SqlDbType.Int, null); break;
					case Usr.Columns.ChatPicState: ColumnStore[i] = new ColumnDef(c, "ChatPicState", SqlDbType.VarChar, 100, null); break;
					case Usr.Columns.DateTimeLastBuddyAlertsRoomRefresh: ColumnStore[i] = new ColumnDef(c, "DateTimeLastBuddyAlertsRoomRefresh", SqlDbType.DateTime, 16, null); break;
					case Usr.Columns.PhotoUsage: ColumnStore[i] = new ColumnDef(c, "PhotoUsage", SqlDbType.Int, 0); break;
					case Usr.Columns.FacebookUID: ColumnStore[i] = new ColumnDef(c, "FacebookUID", SqlDbType.BigInt, null); break;
					case Usr.Columns.FacebookConnected: ColumnStore[i] = new ColumnDef(c, "FacebookConnected", SqlDbType.Bit, false); break;
					case Usr.Columns.FacebookConnectedDateTime: ColumnStore[i] = new ColumnDef(c, "FacebookConnectedDateTime", SqlDbType.DateTime, 16, null); break;
					case Usr.Columns.FacebookPermissionEmail: ColumnStore[i] = new ColumnDef(c, "FacebookPermissionEmail", SqlDbType.Bit, false); break;
					case Usr.Columns.FacebookPermissionPublish: ColumnStore[i] = new ColumnDef(c, "FacebookPermissionPublish", SqlDbType.Bit, false); break;
					case Usr.Columns.FacebookPermissionEvent: ColumnStore[i] = new ColumnDef(c, "FacebookPermissionEvent", SqlDbType.Bit, false); break;
					case Usr.Columns.FacebookPermissionRsvp: ColumnStore[i] = new ColumnDef(c, "FacebookPermissionRsvp", SqlDbType.Bit, false); break;
					case Usr.Columns.FacebookStoryAttendEvent: ColumnStore[i] = new ColumnDef(c, "FacebookStoryAttendEvent", SqlDbType.Bit, true); break;
					case Usr.Columns.FacebookStoryBuyTicket: ColumnStore[i] = new ColumnDef(c, "FacebookStoryBuyTicket", SqlDbType.Bit, true); break;
					case Usr.Columns.FacebookStoryUploadPhoto: ColumnStore[i] = new ColumnDef(c, "FacebookStoryUploadPhoto", SqlDbType.Bit, true); break;
					case Usr.Columns.FacebookStorySpotted: ColumnStore[i] = new ColumnDef(c, "FacebookStorySpotted", SqlDbType.Bit, true); break;
					case Usr.Columns.FacebookStoryPhotoFeatured: ColumnStore[i] = new ColumnDef(c, "FacebookStoryPhotoFeatured", SqlDbType.Bit, true); break;
					case Usr.Columns.FacebookStoryNewBuddy: ColumnStore[i] = new ColumnDef(c, "FacebookStoryNewBuddy", SqlDbType.Bit, true); break;
					case Usr.Columns.FacebookStoryPublishArticle: ColumnStore[i] = new ColumnDef(c, "FacebookStoryPublishArticle", SqlDbType.Bit, true); break;
					case Usr.Columns.FacebookStoryJoinGroup: ColumnStore[i] = new ColumnDef(c, "FacebookStoryJoinGroup", SqlDbType.Bit, true); break;
					case Usr.Columns.FacebookStoryFavourite: ColumnStore[i] = new ColumnDef(c, "FacebookStoryFavourite", SqlDbType.Bit, true); break;
					case Usr.Columns.FacebookStoryNewTopic: ColumnStore[i] = new ColumnDef(c, "FacebookStoryNewTopic", SqlDbType.Bit, true); break;
					case Usr.Columns.FacebookStoryEventReview: ColumnStore[i] = new ColumnDef(c, "FacebookStoryEventReview", SqlDbType.Bit, true); break;
					case Usr.Columns.FacebookStoryPostNews: ColumnStore[i] = new ColumnDef(c, "FacebookStoryPostNews", SqlDbType.Bit, true); break;
					case Usr.Columns.FacebookStoryLaugh: ColumnStore[i] = new ColumnDef(c, "FacebookStoryLaugh", SqlDbType.Bit, true); break;
					case Usr.Columns.FacebookEventAdd: ColumnStore[i] = new ColumnDef(c, "FacebookEventAdd", SqlDbType.Bit, true); break;
					case Usr.Columns.FacebookEventAttend: ColumnStore[i] = new ColumnDef(c, "FacebookEventAttend", SqlDbType.Bit, true); break;
					case Usr.Columns.FacebookEmail: ColumnStore[i] = new ColumnDef(c, "FacebookEmail", SqlDbType.VarChar, 100, null); break;
					case Usr.Columns.IsDj: ColumnStore[i] = new ColumnDef(c, "IsDj", SqlDbType.Bit, null); break;
					case Usr.Columns.FacebookStory: ColumnStore[i] = new ColumnDef(c, "FacebookStory", SqlDbType.Bit, null); break;
					case Usr.Columns.FacebookStory1: ColumnStore[i] = new ColumnDef(c, "FacebookStory1", SqlDbType.Bit, true); break;
					case Usr.Columns.FacebookAccessToken: ColumnStore[i] = new ColumnDef(c, "FacebookAccessToken", SqlDbType.VarChar, 128, null); break;
					case Usr.Columns.FacebookStoryFavouriteTopic: ColumnStore[i] = new ColumnDef(c, "FacebookStoryFavouriteTopic", SqlDbType.Bit, true); break;
					case Usr.Columns.NeedsCaptcha: ColumnStore[i] = new ColumnDef(c, "NeedsCaptcha", SqlDbType.Bit, null); break;
					case Usr.Columns.PassedCaptcha: ColumnStore[i] = new ColumnDef(c, "PassedCaptcha", SqlDbType.Bit, null); break;
					case Usr.Columns.BouncePeriodDateTime: ColumnStore[i] = new ColumnDef(c, "BouncePeriodDateTime", SqlDbType.DateTime, 16, null); break;
					case Usr.Columns.TotalEmailsSentInPeriod: ColumnStore[i] = new ColumnDef(c, "TotalEmailsSentInPeriod", SqlDbType.Int, null); break;
					case Usr.Columns.MatchedHardBounceInPeriod: ColumnStore[i] = new ColumnDef(c, "MatchedHardBounceInPeriod", SqlDbType.Int, null); break;
					case Usr.Columns.UnmatchedHardBounceInPeriod: ColumnStore[i] = new ColumnDef(c, "UnmatchedHardBounceInPeriod", SqlDbType.Int, null); break;
					case Usr.Columns.SoftBounceInPeriod: ColumnStore[i] = new ColumnDef(c, "SoftBounceInPeriod", SqlDbType.Int, null); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(Usr.Columns.K);
						InitColumn(Usr.Columns.Email);
						InitColumn(Usr.Columns.Password);
						InitColumn(Usr.Columns.LoginCount);
						InitColumn(Usr.Columns.IsAdmin);
						InitColumn(Usr.Columns.IsEmailVerified);
						InitColumn(Usr.Columns.Pic);
						InitColumn(Usr.Columns.PicOriginal);
						InitColumn(Usr.Columns.FirstName);
						InitColumn(Usr.Columns.LastName);
						InitColumn(Usr.Columns.NickName);
						InitColumn(Usr.Columns.Mobile);
						InitColumn(Usr.Columns.MobileCountryCode);
						InitColumn(Usr.Columns.MobileNumber);
						InitColumn(Usr.Columns.SendSpottedEmails);
						InitColumn(Usr.Columns.SendSpottedTexts);
						InitColumn(Usr.Columns.SendPartnerEmails);
						InitColumn(Usr.Columns.SendPartnerTexts);
						InitColumn(Usr.Columns.UpdateData);
						InitColumn(Usr.Columns.AdminNote);
						InitColumn(Usr.Columns.DateTimeLastAccess);
						InitColumn(Usr.Columns.DateTimeSignUp);
						InitColumn(Usr.Columns.DateTimeLastPageRequest);
						InitColumn(Usr.Columns.PrefsText);
						InitColumn(Usr.Columns.LoginString);
						InitColumn(Usr.Columns.PersonalStatement);
						InitColumn(Usr.Columns.AddedByUsrK);
						InitColumn(Usr.Columns.AdminLevel);
						InitColumn(Usr.Columns.RandomNumber);
						InitColumn(Usr.Columns.LastPrivateComment);
						InitColumn(Usr.Columns.LastPrivateChatMessage);
						InitColumn(Usr.Columns.IsSingle);
						InitColumn(Usr.Columns.IsMale);
						InitColumn(Usr.Columns.IsFemale);
						InitColumn(Usr.Columns.DateOfBirth);
						InitColumn(Usr.Columns.DateSexMale);
						InitColumn(Usr.Columns.DateSexFemale);
						InitColumn(Usr.Columns.DateAgeRangeLow);
						InitColumn(Usr.Columns.DateAgeRangeHigh);
						InitColumn(Usr.Columns.Relationship1);
						InitColumn(Usr.Columns.Relationship2);
						InitColumn(Usr.Columns.Relationship3);
						InitColumn(Usr.Columns.SexHelperMale);
						InitColumn(Usr.Columns.SexHelperFemale);
						InitColumn(Usr.Columns.BuddyCount);
						InitColumn(Usr.Columns.ChatMessageCount);
						InitColumn(Usr.Columns.CommentCount);
						InitColumn(Usr.Columns.EventCount);
						InitColumn(Usr.Columns.HomePlaceK);
						InitColumn(Usr.Columns.AgreeTerms);
						InitColumn(Usr.Columns.GuestClientK);
						InitColumn(Usr.Columns.FavouriteMusicTypeK);
						InitColumn(Usr.Columns.TotalLol);
						InitColumn(Usr.Columns.TotalMadeLol);
						InitColumn(Usr.Columns.LastLol);
						InitColumn(Usr.Columns.UniqueMadeLol);
						InitColumn(Usr.Columns.ChatXml);
						InitColumn(Usr.Columns.IsLoggedOn);
						InitColumn(Usr.Columns.LastChatItem);
						InitColumn(Usr.Columns.LastIp);
						InitColumn(Usr.Columns.Ignore);
						InitColumn(Usr.Columns.IsProSpotter);
						InitColumn(Usr.Columns.LastInvite);
						InitColumn(Usr.Columns.IntroducedByUsrK);
						InitColumn(Usr.Columns.SendFlyers);
						InitColumn(Usr.Columns.SendInvites);
						InitColumn(Usr.Columns.TotalPhotoUploads);
						InitColumn(Usr.Columns.TempInt);
						InitColumn(Usr.Columns.EnhancedSecurity);
						InitColumn(Usr.Columns.AddressStreet);
						InitColumn(Usr.Columns.AddressArea);
						InitColumn(Usr.Columns.AddressTown);
						InitColumn(Usr.Columns.AddressCounty);
						InitColumn(Usr.Columns.AddressPostcode);
						InitColumn(Usr.Columns.AddressCountryK);
						InitColumn(Usr.Columns.CardStatus);
						InitColumn(Usr.Columns.TotalCardsSent);
						InitColumn(Usr.Columns.IsSpotter);
						InitColumn(Usr.Columns.Banned);
						InitColumn(Usr.Columns.BannedByUsrK);
						InitColumn(Usr.Columns.BannedDateTime);
						InitColumn(Usr.Columns.BannedReason);
						InitColumn(Usr.Columns.UpdateSendGenericMusic);
						InitColumn(Usr.Columns.UpdateLargeEvents);
						InitColumn(Usr.Columns.UpdateSendBuddies);
						InitColumn(Usr.Columns.PicState);
						InitColumn(Usr.Columns.PicPhotoK);
						InitColumn(Usr.Columns.PicMiscK);
						InitColumn(Usr.Columns.IsChatting);
						InitColumn(Usr.Columns.LastBuddyChange);
						InitColumn(Usr.Columns.NewsModerator);
						InitColumn(Usr.Columns.NewsPermissionLevel);
						InitColumn(Usr.Columns.IsBetaTester);
						InitColumn(Usr.Columns.PlacesVisitCount);
						InitColumn(Usr.Columns.MusicTypesFavouriteCount);
						InitColumn(Usr.Columns.PhotosMeCount);
						InitColumn(Usr.Columns.IsSkeleton);
						InitColumn(Usr.Columns.NoInboxEmails);
						InitColumn(Usr.Columns.AbuseReportsPending);
						InitColumn(Usr.Columns.AbuseReportsUseful);
						InitColumn(Usr.Columns.AbuseReportsOverturned);
						InitColumn(Usr.Columns.AbuseAccusationsPending);
						InitColumn(Usr.Columns.AbuseAccusationsAbuse);
						InitColumn(Usr.Columns.AbuseAccusationsNoAbuse);
						InitColumn(Usr.Columns.ModeratePhotos);
						InitColumn(Usr.Columns.ChatSessionId);
						InitColumn(Usr.Columns.AddedByGroupK);
						InitColumn(Usr.Columns.DonateIcon);
						InitColumn(Usr.Columns.DonateExpire);
						InitColumn(Usr.Columns.EmailDateTime);
						InitColumn(Usr.Columns.EmailIp);
						InitColumn(Usr.Columns.EmailHold);
						InitColumn(Usr.Columns.IsHtmlEditor);
						InitColumn(Usr.Columns.IsGroupModerator);
						InitColumn(Usr.Columns.IsSkeletonFromSignup);
						InitColumn(Usr.Columns.ExtraIcon);
						InitColumn(Usr.Columns.ExtraExpire);
						InitColumn(Usr.Columns.SpottingsTotal);
						InitColumn(Usr.Columns.SpottingsMonth);
						InitColumn(Usr.Columns.SpottingsMonthRank);
						InitColumn(Usr.Columns.IsPromoter);
						InitColumn(Usr.Columns.CampTickets);
						InitColumn(Usr.Columns.HasTicket);
						InitColumn(Usr.Columns.LastTicketEventDateTime);
						InitColumn(Usr.Columns.PasswordHash);
						InitColumn(Usr.Columns.PasswordSalt);
						InitColumn(Usr.Columns.PasswordResetEmailSecret);
						InitColumn(Usr.Columns.LegalTermsUser1);
						InitColumn(Usr.Columns.LegalTermsPromoter1);
						InitColumn(Usr.Columns.IsSuperAdmin);
						InitColumn(Usr.Columns.IsSalesPerson);
						InitColumn(Usr.Columns.BuyableLockDateTime);
						InitColumn(Usr.Columns.SalesTeam);
						InitColumn(Usr.Columns.Guid);
						InitColumn(Usr.Columns.LegalTermsUser2);
						InitColumn(Usr.Columns.LegalTermsPromoter2);
						InitColumn(Usr.Columns.LastPhotoUpload);
						InitColumn(Usr.Columns.DateTimeLastUpdateEmail);
						InitColumn(Usr.Columns.InvitedViaContactImporter);
						InitColumn(Usr.Columns.IsTicketsRegistered);
						InitColumn(Usr.Columns.ExDirectory);
						InitColumn(Usr.Columns.IsEmailBroken);
						InitColumn(Usr.Columns.DateTimeLastChatMessage);
						InitColumn(Usr.Columns.RolloverDonationIconK);
						InitColumn(Usr.Columns.ChatPic);
						InitColumn(Usr.Columns.ChatPicPhotoK);
						InitColumn(Usr.Columns.ChatPicState);
						InitColumn(Usr.Columns.DateTimeLastBuddyAlertsRoomRefresh);
						InitColumn(Usr.Columns.PhotoUsage);
						InitColumn(Usr.Columns.FacebookUID);
						InitColumn(Usr.Columns.FacebookConnected);
						InitColumn(Usr.Columns.FacebookConnectedDateTime);
						InitColumn(Usr.Columns.FacebookPermissionEmail);
						InitColumn(Usr.Columns.FacebookPermissionPublish);
						InitColumn(Usr.Columns.FacebookPermissionEvent);
						InitColumn(Usr.Columns.FacebookPermissionRsvp);
						InitColumn(Usr.Columns.FacebookStoryAttendEvent);
						InitColumn(Usr.Columns.FacebookStoryBuyTicket);
						InitColumn(Usr.Columns.FacebookStoryUploadPhoto);
						InitColumn(Usr.Columns.FacebookStorySpotted);
						InitColumn(Usr.Columns.FacebookStoryPhotoFeatured);
						InitColumn(Usr.Columns.FacebookStoryNewBuddy);
						InitColumn(Usr.Columns.FacebookStoryPublishArticle);
						InitColumn(Usr.Columns.FacebookStoryJoinGroup);
						InitColumn(Usr.Columns.FacebookStoryFavourite);
						InitColumn(Usr.Columns.FacebookStoryNewTopic);
						InitColumn(Usr.Columns.FacebookStoryEventReview);
						InitColumn(Usr.Columns.FacebookStoryPostNews);
						InitColumn(Usr.Columns.FacebookStoryLaugh);
						InitColumn(Usr.Columns.FacebookEventAdd);
						InitColumn(Usr.Columns.FacebookEventAttend);
						InitColumn(Usr.Columns.FacebookEmail);
						InitColumn(Usr.Columns.IsDj);
						InitColumn(Usr.Columns.FacebookStory);
						InitColumn(Usr.Columns.FacebookStory1);
						InitColumn(Usr.Columns.FacebookAccessToken);
						InitColumn(Usr.Columns.FacebookStoryFavouriteTopic);
						InitColumn(Usr.Columns.NeedsCaptcha);
						InitColumn(Usr.Columns.PassedCaptcha);
						InitColumn(Usr.Columns.BouncePeriodDateTime);
						InitColumn(Usr.Columns.TotalEmailsSentInPeriod);
						InitColumn(Usr.Columns.MatchedHardBounceInPeriod);
						InitColumn(Usr.Columns.UnmatchedHardBounceInPeriod);
						InitColumn(Usr.Columns.SoftBounceInPeriod);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region UsrDate
	/// <summary>
	/// Ratings in the dating system
	/// </summary>
	public partial class UsrDate : Model.Entities.UsrDate, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// Link to Usr table - the usr that initiated the date request
			/// </summary>
			UsrK = 0x005e0001,
			/// <summary>
			/// Link to Usr table - the usr that they want to be introduced to
			/// </summary>
			DateUsrK = 0x005e0002,
			/// <summary>
			/// Status
			/// </summary>
			Status = 0x005e0003,
			/// <summary>
			/// DateTime that the request was done
			/// </summary>
			DateTime = 0x005e0004,
			/// <summary>
			/// Is this Yes UsrDate record matched to a similar 'reverse' Yes record?
			/// </summary>
			PreMatch = 0x005e0005,
			/// <summary>
			/// Are these users fully matched? 0 = no match, 1 = matched, 3 = was matched, but change of prefs means not any more
			/// </summary>
			Match = 0x005e0006,
			/// <summary>
			/// The datetime when the users were first fully matched.
			/// </summary>
			MatchDateTime = 0x005e0007,
			/// <summary>
			/// This it the ThreadK of the private message thread that we start when they are matched.
			/// </summary>
			MatchThreadK = 0x005e0008,
		}
		#endregion
		public static string GetColumnName(UsrDate.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case UsrDate.Columns.UsrK: return "UsrK";
						case UsrDate.Columns.DateUsrK: return "DateUsrK";
						case UsrDate.Columns.Status: return "Status";
						case UsrDate.Columns.DateTime: return "DateTime";
						case UsrDate.Columns.PreMatch: return "PreMatch";
						case UsrDate.Columns.Match: return "Match";
						case UsrDate.Columns.MatchDateTime: return "MatchDateTime";
						case UsrDate.Columns.MatchThreadK: return "MatchThreadK";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(UsrDate.Columns columnEnum)
		{
			switch (columnEnum)
			{
												default: return false;
			}
		}


		#region Common
	 
		public UsrDate(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);}
		public UsrDate()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.UsrDate);
		}
		public UsrDate(BobSet bs)
		{
			this.Bob = new Bob(Bobs.Tables.Defs.UsrDate, bs);
		}
		public UsrDate(IBob Parent, object Column) : this()
		{
			this.Bob.GetBobFromParentSimple(Parent, Column, TablesEnum.UsrDate);
		}
		public UsrDate(int UsrK, int DateUsrK) : this()
		{
			this.Bob.GetBobFromPrimaryKeyArray(new Q[] {new Q(UsrDate.Columns.UsrK,UsrK), new Q(UsrDate.Columns.DateUsrK,DateUsrK)});
		} 
		#endregion

	}
	#endregion
	#region UsrDateTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region UsrDate
	/// <summary>
	/// Ratings in the dating system
	/// </summary>
	[Serializable]
	public partial class UsrDate 
	{
		
		#region Simple members
		/// <summary>
		/// Link to Usr table - the usr that initiated the date request
		/// </summary>
		public override int UsrK
		{
			get { return (int)this[UsrDate.Columns.UsrK]; }
			set { this[UsrDate.Columns.UsrK] = value; }
		}
		/// <summary>
		/// Link to Usr table - the usr that they want to be introduced to
		/// </summary>
		public override int DateUsrK
		{
			get { return (int)this[UsrDate.Columns.DateUsrK]; }
			set { this[UsrDate.Columns.DateUsrK] = value; }
		}
		/// <summary>
		/// Status
		/// </summary>
		public override int Status
		{
			get { return (int)this[UsrDate.Columns.Status]; }
			set { this[UsrDate.Columns.Status] = value; }
		}
		/// <summary>
		/// DateTime that the request was done
		/// </summary>
		public override DateTime DateTime
		{
			get { return (DateTime)this[UsrDate.Columns.DateTime]; }
			set { this[UsrDate.Columns.DateTime] = value; }
		}
		/// <summary>
		/// Is this Yes UsrDate record matched to a similar 'reverse' Yes record?
		/// </summary>
		public override bool PreMatch
		{
			get { return (bool)this[UsrDate.Columns.PreMatch]; }
			set { this[UsrDate.Columns.PreMatch] = value; }
		}
		/// <summary>
		/// Are these users fully matched? 0 = no match, 1 = matched, 3 = was matched, but change of prefs means not any more
		/// </summary>
		public override int Match
		{
			get { return (int)this[UsrDate.Columns.Match]; }
			set { this[UsrDate.Columns.Match] = value; }
		}
		/// <summary>
		/// The datetime when the users were first fully matched.
		/// </summary>
		public override DateTime MatchDateTime
		{
			get { return (DateTime)this[UsrDate.Columns.MatchDateTime]; }
			set { this[UsrDate.Columns.MatchDateTime] = value; }
		}
		/// <summary>
		/// This it the ThreadK of the private message thread that we start when they are matched.
		/// </summary>
		public override int MatchThreadK
		{
			get { return (int)this[UsrDate.Columns.MatchThreadK]; }
			set { this[UsrDate.Columns.MatchThreadK] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildUsrDates
	{
		CachedSqlSelect<UsrDate> ChildUsrDates();
		CachedSqlSelect<UsrDate> ChildUsrDates(Q where);
		CachedSqlSelect<UsrDate> ChildUsrDates(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<UsrDate> ChildUsrDates(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class UsrDate 
		{
		}

	#region UsrDateDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region UsrDateDataHolder
	/// <summary>
	/// Ratings in the dating systemDataHolder
	/// </summary>
	[Serializable]
	public partial class UsrDateDataHolder : DataHolder<UsrDate>
	{
		UsrDate dataHolder;
		[NonSerializedAttribute] UsrDate bob;

		public UsrDateDataHolder()
		{
			this.dataHolder = new UsrDate();
		}
		
		void CopyValues(UsrDate source, UsrDate destination)
		{
			destination[Bobs.UsrDate.Columns.UsrK] = source[Bobs.UsrDate.Columns.UsrK];
			destination[Bobs.UsrDate.Columns.DateUsrK] = source[Bobs.UsrDate.Columns.DateUsrK];
			destination[Bobs.UsrDate.Columns.Status] = source[Bobs.UsrDate.Columns.Status];
			destination[Bobs.UsrDate.Columns.DateTime] = source[Bobs.UsrDate.Columns.DateTime];
			destination[Bobs.UsrDate.Columns.PreMatch] = source[Bobs.UsrDate.Columns.PreMatch];
			destination[Bobs.UsrDate.Columns.Match] = source[Bobs.UsrDate.Columns.Match];
			destination[Bobs.UsrDate.Columns.MatchDateTime] = source[Bobs.UsrDate.Columns.MatchDateTime];
			destination[Bobs.UsrDate.Columns.MatchThreadK] = source[Bobs.UsrDate.Columns.MatchThreadK];
		}
		
		public UsrDateDataHolder(UsrDate bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// Link to Usr table - the usr that initiated the date request
		/// </summary>
		public int UsrK
		{
			get { return dataHolder.UsrK; }
			set { this.dataHolder.UsrK = value; }
		}
		/// <summary>
		/// Link to Usr table - the usr that they want to be introduced to
		/// </summary>
		public int DateUsrK
		{
			get { return dataHolder.DateUsrK; }
			set { this.dataHolder.DateUsrK = value; }
		}
		/// <summary>
		/// Status
		/// </summary>
		public int Status
		{
			get { return dataHolder.Status; }
			set { this.dataHolder.Status = value; }
		}
		/// <summary>
		/// DateTime that the request was done
		/// </summary>
		public DateTime DateTime
		{
			get { return dataHolder.DateTime; }
			set { this.dataHolder.DateTime = value; }
		}
		/// <summary>
		/// Is this Yes UsrDate record matched to a similar 'reverse' Yes record?
		/// </summary>
		public bool PreMatch
		{
			get { return dataHolder.PreMatch; }
			set { this.dataHolder.PreMatch = value; }
		}
		/// <summary>
		/// Are these users fully matched? 0 = no match, 1 = matched, 3 = was matched, but change of prefs means not any more
		/// </summary>
		public int Match
		{
			get { return dataHolder.Match; }
			set { this.dataHolder.Match = value; }
		}
		/// <summary>
		/// The datetime when the users were first fully matched.
		/// </summary>
		public DateTime MatchDateTime
		{
			get { return dataHolder.MatchDateTime; }
			set { this.dataHolder.MatchDateTime = value; }
		}
		/// <summary>
		/// This it the ThreadK of the private message thread that we start when they are matched.
		/// </summary>
		public int MatchThreadK
		{
			get { return dataHolder.MatchThreadK; }
			set { this.dataHolder.MatchThreadK = value; }
		}
		#endregion
		public UsrDate UsrDate
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new UsrDate(K);
					}
					else
					{
						bob = new UsrDate();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region UsrDateSet
	public partial class UsrDateSet : BobSet, IEnumerable<UsrDate>
	{
		public UsrDateSet(Query query) : base(query) { }

		public UsrDate this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new UsrDate(this);
					((UsrDate)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (UsrDate)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new UsrDateTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<UsrDate> ToList()
		{
			List<UsrDate> list = new List<UsrDate>();
			foreach (UsrDate item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<UsrDate> Members

		public new IEnumerator<UsrDate> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region UsrDateTableDef
	public class UsrDateTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "UsrDate";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "2A289ED0";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return UsrDate.GetColumnName((UsrDate.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.UsrDate;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return false;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return null;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			UsrDate.Columns c = (UsrDate.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case UsrDate.Columns.UsrK: ColumnStore[i] = new ColumnDef(c, "UsrK", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey, 0); break;
					case UsrDate.Columns.DateUsrK: ColumnStore[i] = new ColumnDef(c, "DateUsrK", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey, 0); break;
					case UsrDate.Columns.Status: ColumnStore[i] = new ColumnDef(c, "Status", SqlDbType.Int, 0); break;
					case UsrDate.Columns.DateTime: ColumnStore[i] = new ColumnDef(c, "DateTime", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case UsrDate.Columns.PreMatch: ColumnStore[i] = new ColumnDef(c, "PreMatch", SqlDbType.Bit, false); break;
					case UsrDate.Columns.Match: ColumnStore[i] = new ColumnDef(c, "Match", SqlDbType.Int, 0); break;
					case UsrDate.Columns.MatchDateTime: ColumnStore[i] = new ColumnDef(c, "MatchDateTime", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case UsrDate.Columns.MatchThreadK: ColumnStore[i] = new ColumnDef(c, "MatchThreadK", SqlDbType.Int, 0); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(UsrDate.Columns.UsrK);
						InitColumn(UsrDate.Columns.DateUsrK);
						InitColumn(UsrDate.Columns.Status);
						InitColumn(UsrDate.Columns.DateTime);
						InitColumn(UsrDate.Columns.PreMatch);
						InitColumn(UsrDate.Columns.Match);
						InitColumn(UsrDate.Columns.MatchDateTime);
						InitColumn(UsrDate.Columns.MatchThreadK);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region UsrDonationIcon
	/// <summary>
	/// Usrs having bought DonationIcons
	/// </summary>
	public partial class UsrDonationIcon : Model.Entities.UsrDonationIcon, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// K
			/// </summary>
			K = 0x005f0001,
			/// <summary>
			/// UsrK who bought icon
			/// </summary>
			UsrK = 0x005f0002,
			/// <summary>
			/// DonationIcon bought
			/// </summary>
			DonationIconK = 0x005f0003,
			/// <summary>
			/// DateTime bought
			/// </summary>
			BuyDateTime = 0x005f0004,
			/// <summary>
			/// Enabled - if payment processed correctly
			/// </summary>
			Enabled = 0x005f0005,
		}
		#endregion
		public static string GetColumnName(UsrDonationIcon.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case UsrDonationIcon.Columns.K: return "K";
						case UsrDonationIcon.Columns.UsrK: return "UsrK";
						case UsrDonationIcon.Columns.DonationIconK: return "DonationIconK";
						case UsrDonationIcon.Columns.BuyDateTime: return "BuyDateTime";
						case UsrDonationIcon.Columns.Enabled: return "Enabled";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(UsrDonationIcon.Columns columnEnum)
		{
			switch (columnEnum)
			{
									default: return false;
			}
		}


		#region Common
 
		public UsrDonationIcon(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);  }
		public UsrDonationIcon()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.UsrDonationIcon);
		}
		public UsrDonationIcon(BobSet bs)
		{
			this.Bob = new Bob(bs.Table, bs);
		}
		public UsrDonationIcon(int UsrDonationIconK, IBob Parent, object Column)
			: this()
		{
			Bob.GetBobFromParent(UsrDonationIconK, Parent.Bob, Column, TablesEnum.UsrDonationIcon);
		}
		public UsrDonationIcon(int UsrDonationIconK)
			: this()
		{
			Bob.GetBobFromPrimaryKey(UsrDonationIconK);
		}
		#endregion

	}
	#endregion
	#region UsrDonationIconTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region UsrDonationIcon
	/// <summary>
	/// Usrs having bought DonationIcons
	/// </summary>
	[Serializable]
	public partial class UsrDonationIcon 
	{
		
		#region Simple members
		/// <summary>
		/// K
		/// </summary>
		public override int K
		{
			get { return (int)this[UsrDonationIcon.Columns.K] as int? ?? 0 ; }
			set { this[UsrDonationIcon.Columns.K] = value; }
		}
		/// <summary>
		/// UsrK who bought icon
		/// </summary>
		public override int UsrK
		{
			get { return (int)this[UsrDonationIcon.Columns.UsrK]; }
			set { this[UsrDonationIcon.Columns.UsrK] = value; }
		}
		/// <summary>
		/// DonationIcon bought
		/// </summary>
		public override int DonationIconK
		{
			get { return (int)this[UsrDonationIcon.Columns.DonationIconK]; }
			set { this[UsrDonationIcon.Columns.DonationIconK] = value; }
		}
		/// <summary>
		/// DateTime bought
		/// </summary>
		public override DateTime BuyDateTime
		{
			get { return (DateTime)this[UsrDonationIcon.Columns.BuyDateTime]; }
			set { this[UsrDonationIcon.Columns.BuyDateTime] = value; }
		}
		/// <summary>
		/// Enabled - if payment processed correctly
		/// </summary>
		public override bool Enabled
		{
			get { return (bool)this[UsrDonationIcon.Columns.Enabled]; }
			set { this[UsrDonationIcon.Columns.Enabled] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildUsrDonationIcons
	{
		CachedSqlSelect<UsrDonationIcon> ChildUsrDonationIcons();
		CachedSqlSelect<UsrDonationIcon> ChildUsrDonationIcons(Q where);
		CachedSqlSelect<UsrDonationIcon> ChildUsrDonationIcons(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<UsrDonationIcon> ChildUsrDonationIcons(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class UsrDonationIcon 
		{
		}

	#region UsrDonationIconDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region UsrDonationIconDataHolder
	/// <summary>
	/// Usrs having bought DonationIconsDataHolder
	/// </summary>
	[Serializable]
	public partial class UsrDonationIconDataHolder : DataHolder<UsrDonationIcon>
	{
		UsrDonationIcon dataHolder;
		[NonSerializedAttribute] UsrDonationIcon bob;

		public UsrDonationIconDataHolder()
		{
			this.dataHolder = new UsrDonationIcon();
		}
		
		void CopyValues(UsrDonationIcon source, UsrDonationIcon destination)
		{
			destination[Bobs.UsrDonationIcon.Columns.K] = source[Bobs.UsrDonationIcon.Columns.K];
			destination[Bobs.UsrDonationIcon.Columns.UsrK] = source[Bobs.UsrDonationIcon.Columns.UsrK];
			destination[Bobs.UsrDonationIcon.Columns.DonationIconK] = source[Bobs.UsrDonationIcon.Columns.DonationIconK];
			destination[Bobs.UsrDonationIcon.Columns.BuyDateTime] = source[Bobs.UsrDonationIcon.Columns.BuyDateTime];
			destination[Bobs.UsrDonationIcon.Columns.Enabled] = source[Bobs.UsrDonationIcon.Columns.Enabled];
		}
		
		public UsrDonationIconDataHolder(UsrDonationIcon bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// K
		/// </summary>
		public int K
		{
			get { return dataHolder.K; }
			set { this.dataHolder.K = value; }
		}
		/// <summary>
		/// UsrK who bought icon
		/// </summary>
		public int UsrK
		{
			get { return dataHolder.UsrK; }
			set { this.dataHolder.UsrK = value; }
		}
		/// <summary>
		/// DonationIcon bought
		/// </summary>
		public int DonationIconK
		{
			get { return dataHolder.DonationIconK; }
			set { this.dataHolder.DonationIconK = value; }
		}
		/// <summary>
		/// DateTime bought
		/// </summary>
		public DateTime BuyDateTime
		{
			get { return dataHolder.BuyDateTime; }
			set { this.dataHolder.BuyDateTime = value; }
		}
		/// <summary>
		/// Enabled - if payment processed correctly
		/// </summary>
		public bool Enabled
		{
			get { return dataHolder.Enabled; }
			set { this.dataHolder.Enabled = value; }
		}
		#endregion
		public UsrDonationIcon UsrDonationIcon
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new UsrDonationIcon(K);
					}
					else
					{
						bob = new UsrDonationIcon();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region UsrDonationIconSet
	public partial class UsrDonationIconSet : BobSet, IEnumerable<UsrDonationIcon>
	{
		public UsrDonationIconSet(Query query) : base(query) { }

		public UsrDonationIcon this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new UsrDonationIcon(this);
					((UsrDonationIcon)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (UsrDonationIcon)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new UsrDonationIconTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<UsrDonationIcon> ToList()
		{
			List<UsrDonationIcon> list = new List<UsrDonationIcon>();
			foreach (UsrDonationIcon item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<UsrDonationIcon> Members

		public new IEnumerator<UsrDonationIcon> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region UsrDonationIconTableDef
	public class UsrDonationIconTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "UsrDonationIcon";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "324FC462";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return UsrDonationIcon.GetColumnName((UsrDonationIcon.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.UsrDonationIcon;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return true;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return UsrDonationIcon.Columns.K;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			UsrDonationIcon.Columns c = (UsrDonationIcon.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case UsrDonationIcon.Columns.K: ColumnStore[i] = new ColumnDef(c, "K", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey | SqlColumnFlag.AutoNumber, null); break;
					case UsrDonationIcon.Columns.UsrK: ColumnStore[i] = new ColumnDef(c, "UsrK", SqlDbType.Int, null); break;
					case UsrDonationIcon.Columns.DonationIconK: ColumnStore[i] = new ColumnDef(c, "DonationIconK", SqlDbType.Int, null); break;
					case UsrDonationIcon.Columns.BuyDateTime: ColumnStore[i] = new ColumnDef(c, "BuyDateTime", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case UsrDonationIcon.Columns.Enabled: ColumnStore[i] = new ColumnDef(c, "Enabled", SqlDbType.Bit, false); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(UsrDonationIcon.Columns.K);
						InitColumn(UsrDonationIcon.Columns.UsrK);
						InitColumn(UsrDonationIcon.Columns.DonationIconK);
						InitColumn(UsrDonationIcon.Columns.BuyDateTime);
						InitColumn(UsrDonationIcon.Columns.Enabled);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region UsrEventAttended
	/// <summary>
	/// Links a user to many events (I went to this event)
	/// </summary>
	public partial class UsrEventAttended : Model.Entities.UsrEventAttended, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// Link to Usr table
			/// </summary>
			UsrK = 0x00600001,
			/// <summary>
			/// Link to the Event table - an event that the user attended
			/// </summary>
			EventK = 0x00600002,
			/// <summary>
			/// Do we send emails about this event?
			/// </summary>
			SendUpdate = 0x00600003,
			/// <summary>
			/// Is this user taking pictures?
			/// </summary>
			Spotter = 0x00600004,
		}
		#endregion
		public static string GetColumnName(UsrEventAttended.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case UsrEventAttended.Columns.UsrK: return "UsrK";
						case UsrEventAttended.Columns.EventK: return "EventK";
						case UsrEventAttended.Columns.SendUpdate: return "SendUpdate";
						case UsrEventAttended.Columns.Spotter: return "Spotter";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(UsrEventAttended.Columns columnEnum)
		{
			switch (columnEnum)
			{
								default: return false;
			}
		}


		#region Common
	 
		public UsrEventAttended(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);}
		public UsrEventAttended()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.UsrEventAttended);
		}
		public UsrEventAttended(BobSet bs)
		{
			this.Bob = new Bob(Bobs.Tables.Defs.UsrEventAttended, bs);
		}
		public UsrEventAttended(IBob Parent, object Column) : this()
		{
			this.Bob.GetBobFromParentSimple(Parent, Column, TablesEnum.UsrEventAttended);
		}
		public UsrEventAttended(int UsrK, int EventK) : this()
		{
			this.Bob.GetBobFromPrimaryKeyArray(new Q[] {new Q(UsrEventAttended.Columns.UsrK,UsrK), new Q(UsrEventAttended.Columns.EventK,EventK)});
		} 
		#endregion

	}
	#endregion
	#region UsrEventAttendedTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region UsrEventAttended
	/// <summary>
	/// Links a user to many events (I went to this event)
	/// </summary>
	[Serializable]
	public partial class UsrEventAttended 
	{
		
		#region Simple members
		/// <summary>
		/// Link to Usr table
		/// </summary>
		public override int UsrK
		{
			get { return (int)this[UsrEventAttended.Columns.UsrK]; }
			set { this[UsrEventAttended.Columns.UsrK] = value; }
		}
		/// <summary>
		/// Link to the Event table - an event that the user attended
		/// </summary>
		public override int EventK
		{
			get { return (int)this[UsrEventAttended.Columns.EventK]; }
			set { this[UsrEventAttended.Columns.EventK] = value; }
		}
		/// <summary>
		/// Do we send emails about this event?
		/// </summary>
		public override bool SendUpdate
		{
			get { return (bool)this[UsrEventAttended.Columns.SendUpdate]; }
			set { this[UsrEventAttended.Columns.SendUpdate] = value; }
		}
		/// <summary>
		/// Is this user taking pictures?
		/// </summary>
		public override bool Spotter
		{
			get { return (bool)this[UsrEventAttended.Columns.Spotter]; }
			set { this[UsrEventAttended.Columns.Spotter] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildUsrEventAttendeds
	{
		CachedSqlSelect<UsrEventAttended> ChildUsrEventAttendeds();
		CachedSqlSelect<UsrEventAttended> ChildUsrEventAttendeds(Q where);
		CachedSqlSelect<UsrEventAttended> ChildUsrEventAttendeds(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<UsrEventAttended> ChildUsrEventAttendeds(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class UsrEventAttended 
		{
		}

	#region UsrEventAttendedDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region UsrEventAttendedDataHolder
	/// <summary>
	/// Links a user to many events (I went to this event)DataHolder
	/// </summary>
	[Serializable]
	public partial class UsrEventAttendedDataHolder : DataHolder<UsrEventAttended>
	{
		UsrEventAttended dataHolder;
		[NonSerializedAttribute] UsrEventAttended bob;

		public UsrEventAttendedDataHolder()
		{
			this.dataHolder = new UsrEventAttended();
		}
		
		void CopyValues(UsrEventAttended source, UsrEventAttended destination)
		{
			destination[Bobs.UsrEventAttended.Columns.UsrK] = source[Bobs.UsrEventAttended.Columns.UsrK];
			destination[Bobs.UsrEventAttended.Columns.EventK] = source[Bobs.UsrEventAttended.Columns.EventK];
			destination[Bobs.UsrEventAttended.Columns.SendUpdate] = source[Bobs.UsrEventAttended.Columns.SendUpdate];
			destination[Bobs.UsrEventAttended.Columns.Spotter] = source[Bobs.UsrEventAttended.Columns.Spotter];
		}
		
		public UsrEventAttendedDataHolder(UsrEventAttended bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// Link to Usr table
		/// </summary>
		public int UsrK
		{
			get { return dataHolder.UsrK; }
			set { this.dataHolder.UsrK = value; }
		}
		/// <summary>
		/// Link to the Event table - an event that the user attended
		/// </summary>
		public int EventK
		{
			get { return dataHolder.EventK; }
			set { this.dataHolder.EventK = value; }
		}
		/// <summary>
		/// Do we send emails about this event?
		/// </summary>
		public bool SendUpdate
		{
			get { return dataHolder.SendUpdate; }
			set { this.dataHolder.SendUpdate = value; }
		}
		/// <summary>
		/// Is this user taking pictures?
		/// </summary>
		public bool Spotter
		{
			get { return dataHolder.Spotter; }
			set { this.dataHolder.Spotter = value; }
		}
		#endregion
		public UsrEventAttended UsrEventAttended
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new UsrEventAttended(K);
					}
					else
					{
						bob = new UsrEventAttended();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region UsrEventAttendedSet
	public partial class UsrEventAttendedSet : BobSet, IEnumerable<UsrEventAttended>
	{
		public UsrEventAttendedSet(Query query) : base(query) { }

		public UsrEventAttended this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new UsrEventAttended(this);
					((UsrEventAttended)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (UsrEventAttended)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new UsrEventAttendedTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<UsrEventAttended> ToList()
		{
			List<UsrEventAttended> list = new List<UsrEventAttended>();
			foreach (UsrEventAttended item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<UsrEventAttended> Members

		public new IEnumerator<UsrEventAttended> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region UsrEventAttendedTableDef
	public class UsrEventAttendedTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "UsrEventAttended";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "95A27612";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return UsrEventAttended.GetColumnName((UsrEventAttended.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.UsrEventAttended;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return false;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return null;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			UsrEventAttended.Columns c = (UsrEventAttended.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case UsrEventAttended.Columns.UsrK: ColumnStore[i] = new ColumnDef(c, "UsrK", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey, 0); break;
					case UsrEventAttended.Columns.EventK: ColumnStore[i] = new ColumnDef(c, "EventK", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey, 0); break;
					case UsrEventAttended.Columns.SendUpdate: ColumnStore[i] = new ColumnDef(c, "SendUpdate", SqlDbType.Bit, false); break;
					case UsrEventAttended.Columns.Spotter: ColumnStore[i] = new ColumnDef(c, "Spotter", SqlDbType.Bit, false); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(UsrEventAttended.Columns.UsrK);
						InitColumn(UsrEventAttended.Columns.EventK);
						InitColumn(UsrEventAttended.Columns.SendUpdate);
						InitColumn(UsrEventAttended.Columns.Spotter);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region UsrEventGuestlist
	/// <summary>
	/// Guestlist usr-event linking table
	/// </summary>
	public partial class UsrEventGuestlist : Model.Entities.UsrEventGuestlist, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// Link to Usr table
			/// </summary>
			UsrK = 0x00610001,
			/// <summary>
			/// Link to the Event table - an event
			/// </summary>
			EventK = 0x00610002,
			/// <summary>
			/// DateTime when the usr signed up
			/// </summary>
			DateTime = 0x00610003,
		}
		#endregion
		public static string GetColumnName(UsrEventGuestlist.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case UsrEventGuestlist.Columns.UsrK: return "UsrK";
						case UsrEventGuestlist.Columns.EventK: return "EventK";
						case UsrEventGuestlist.Columns.DateTime: return "DateTime";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(UsrEventGuestlist.Columns columnEnum)
		{
			switch (columnEnum)
			{
							default: return false;
			}
		}


		#region Common
	 
		public UsrEventGuestlist(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);}
		public UsrEventGuestlist()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.UsrEventGuestlist);
		}
		public UsrEventGuestlist(BobSet bs)
		{
			this.Bob = new Bob(Bobs.Tables.Defs.UsrEventGuestlist, bs);
		}
		public UsrEventGuestlist(IBob Parent, object Column) : this()
		{
			this.Bob.GetBobFromParentSimple(Parent, Column, TablesEnum.UsrEventGuestlist);
		}
		public UsrEventGuestlist(int UsrK, int EventK) : this()
		{
			this.Bob.GetBobFromPrimaryKeyArray(new Q[] {new Q(UsrEventGuestlist.Columns.UsrK,UsrK), new Q(UsrEventGuestlist.Columns.EventK,EventK)});
		} 
		#endregion

	}
	#endregion
	#region UsrEventGuestlistTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region UsrEventGuestlist
	/// <summary>
	/// Guestlist usr-event linking table
	/// </summary>
	[Serializable]
	public partial class UsrEventGuestlist 
	{
		
		#region Simple members
		/// <summary>
		/// Link to Usr table
		/// </summary>
		public override int UsrK
		{
			get { return (int)this[UsrEventGuestlist.Columns.UsrK]; }
			set { this[UsrEventGuestlist.Columns.UsrK] = value; }
		}
		/// <summary>
		/// Link to the Event table - an event
		/// </summary>
		public override int EventK
		{
			get { return (int)this[UsrEventGuestlist.Columns.EventK]; }
			set { this[UsrEventGuestlist.Columns.EventK] = value; }
		}
		/// <summary>
		/// DateTime when the usr signed up
		/// </summary>
		public override DateTime DateTime
		{
			get { return (DateTime)this[UsrEventGuestlist.Columns.DateTime]; }
			set { this[UsrEventGuestlist.Columns.DateTime] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildUsrEventGuestlists
	{
		CachedSqlSelect<UsrEventGuestlist> ChildUsrEventGuestlists();
		CachedSqlSelect<UsrEventGuestlist> ChildUsrEventGuestlists(Q where);
		CachedSqlSelect<UsrEventGuestlist> ChildUsrEventGuestlists(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<UsrEventGuestlist> ChildUsrEventGuestlists(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class UsrEventGuestlist 
		{
		}

	#region UsrEventGuestlistDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region UsrEventGuestlistDataHolder
	/// <summary>
	/// Guestlist usr-event linking tableDataHolder
	/// </summary>
	[Serializable]
	public partial class UsrEventGuestlistDataHolder : DataHolder<UsrEventGuestlist>
	{
		UsrEventGuestlist dataHolder;
		[NonSerializedAttribute] UsrEventGuestlist bob;

		public UsrEventGuestlistDataHolder()
		{
			this.dataHolder = new UsrEventGuestlist();
		}
		
		void CopyValues(UsrEventGuestlist source, UsrEventGuestlist destination)
		{
			destination[Bobs.UsrEventGuestlist.Columns.UsrK] = source[Bobs.UsrEventGuestlist.Columns.UsrK];
			destination[Bobs.UsrEventGuestlist.Columns.EventK] = source[Bobs.UsrEventGuestlist.Columns.EventK];
			destination[Bobs.UsrEventGuestlist.Columns.DateTime] = source[Bobs.UsrEventGuestlist.Columns.DateTime];
		}
		
		public UsrEventGuestlistDataHolder(UsrEventGuestlist bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// Link to Usr table
		/// </summary>
		public int UsrK
		{
			get { return dataHolder.UsrK; }
			set { this.dataHolder.UsrK = value; }
		}
		/// <summary>
		/// Link to the Event table - an event
		/// </summary>
		public int EventK
		{
			get { return dataHolder.EventK; }
			set { this.dataHolder.EventK = value; }
		}
		/// <summary>
		/// DateTime when the usr signed up
		/// </summary>
		public DateTime DateTime
		{
			get { return dataHolder.DateTime; }
			set { this.dataHolder.DateTime = value; }
		}
		#endregion
		public UsrEventGuestlist UsrEventGuestlist
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new UsrEventGuestlist(K);
					}
					else
					{
						bob = new UsrEventGuestlist();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region UsrEventGuestlistSet
	public partial class UsrEventGuestlistSet : BobSet, IEnumerable<UsrEventGuestlist>
	{
		public UsrEventGuestlistSet(Query query) : base(query) { }

		public UsrEventGuestlist this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new UsrEventGuestlist(this);
					((UsrEventGuestlist)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (UsrEventGuestlist)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new UsrEventGuestlistTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<UsrEventGuestlist> ToList()
		{
			List<UsrEventGuestlist> list = new List<UsrEventGuestlist>();
			foreach (UsrEventGuestlist item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<UsrEventGuestlist> Members

		public new IEnumerator<UsrEventGuestlist> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region UsrEventGuestlistTableDef
	public class UsrEventGuestlistTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "UsrEventGuestlist";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "6F23F8F8";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return UsrEventGuestlist.GetColumnName((UsrEventGuestlist.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.UsrEventGuestlist;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return false;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return null;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			UsrEventGuestlist.Columns c = (UsrEventGuestlist.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case UsrEventGuestlist.Columns.UsrK: ColumnStore[i] = new ColumnDef(c, "UsrK", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey, 0); break;
					case UsrEventGuestlist.Columns.EventK: ColumnStore[i] = new ColumnDef(c, "EventK", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey, 0); break;
					case UsrEventGuestlist.Columns.DateTime: ColumnStore[i] = new ColumnDef(c, "DateTime", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(UsrEventGuestlist.Columns.UsrK);
						InitColumn(UsrEventGuestlist.Columns.EventK);
						InitColumn(UsrEventGuestlist.Columns.DateTime);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region UsrMusicTypeFavourite
	/// <summary>
	/// Links a user to many music types (music I listen to)
	/// </summary>
	public partial class UsrMusicTypeFavourite : Model.Entities.UsrMusicTypeFavourite, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// Link to Usr table
			/// </summary>
			UsrK = 0x00620001,
			/// <summary>
			/// Link to the MusicType table - a music type that the user listens to
			/// </summary>
			MusicTypeK = 0x00620002,
		}
		#endregion
		public static string GetColumnName(UsrMusicTypeFavourite.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case UsrMusicTypeFavourite.Columns.UsrK: return "UsrK";
						case UsrMusicTypeFavourite.Columns.MusicTypeK: return "MusicTypeK";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(UsrMusicTypeFavourite.Columns columnEnum)
		{
			switch (columnEnum)
			{
						default: return false;
			}
		}


		#region Common
	 
		public UsrMusicTypeFavourite(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);}
		public UsrMusicTypeFavourite()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.UsrMusicTypeFavourite);
		}
		public UsrMusicTypeFavourite(BobSet bs)
		{
			this.Bob = new Bob(Bobs.Tables.Defs.UsrMusicTypeFavourite, bs);
		}
		public UsrMusicTypeFavourite(IBob Parent, object Column) : this()
		{
			this.Bob.GetBobFromParentSimple(Parent, Column, TablesEnum.UsrMusicTypeFavourite);
		}
		public UsrMusicTypeFavourite(int UsrK, int MusicTypeK) : this()
		{
			this.Bob.GetBobFromPrimaryKeyArray(new Q[] {new Q(UsrMusicTypeFavourite.Columns.UsrK,UsrK), new Q(UsrMusicTypeFavourite.Columns.MusicTypeK,MusicTypeK)});
		} 
		#endregion

	}
	#endregion
	#region UsrMusicTypeFavouriteTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region UsrMusicTypeFavourite
	/// <summary>
	/// Links a user to many music types (music I listen to)
	/// </summary>
	[Serializable]
	public partial class UsrMusicTypeFavourite 
	{
		
		#region Simple members
		/// <summary>
		/// Link to Usr table
		/// </summary>
		public override int UsrK
		{
			get { return (int)this[UsrMusicTypeFavourite.Columns.UsrK]; }
			set { this[UsrMusicTypeFavourite.Columns.UsrK] = value; }
		}
		/// <summary>
		/// Link to the MusicType table - a music type that the user listens to
		/// </summary>
		public override int MusicTypeK
		{
			get { return (int)this[UsrMusicTypeFavourite.Columns.MusicTypeK]; }
			set { this[UsrMusicTypeFavourite.Columns.MusicTypeK] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildUsrMusicTypeFavourites
	{
		CachedSqlSelect<UsrMusicTypeFavourite> ChildUsrMusicTypeFavourites();
		CachedSqlSelect<UsrMusicTypeFavourite> ChildUsrMusicTypeFavourites(Q where);
		CachedSqlSelect<UsrMusicTypeFavourite> ChildUsrMusicTypeFavourites(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<UsrMusicTypeFavourite> ChildUsrMusicTypeFavourites(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class UsrMusicTypeFavourite 
		{
		}

	#region UsrMusicTypeFavouriteDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region UsrMusicTypeFavouriteDataHolder
	/// <summary>
	/// Links a user to many music types (music I listen to)DataHolder
	/// </summary>
	[Serializable]
	public partial class UsrMusicTypeFavouriteDataHolder : DataHolder<UsrMusicTypeFavourite>
	{
		UsrMusicTypeFavourite dataHolder;
		[NonSerializedAttribute] UsrMusicTypeFavourite bob;

		public UsrMusicTypeFavouriteDataHolder()
		{
			this.dataHolder = new UsrMusicTypeFavourite();
		}
		
		void CopyValues(UsrMusicTypeFavourite source, UsrMusicTypeFavourite destination)
		{
			destination[Bobs.UsrMusicTypeFavourite.Columns.UsrK] = source[Bobs.UsrMusicTypeFavourite.Columns.UsrK];
			destination[Bobs.UsrMusicTypeFavourite.Columns.MusicTypeK] = source[Bobs.UsrMusicTypeFavourite.Columns.MusicTypeK];
		}
		
		public UsrMusicTypeFavouriteDataHolder(UsrMusicTypeFavourite bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// Link to Usr table
		/// </summary>
		public int UsrK
		{
			get { return dataHolder.UsrK; }
			set { this.dataHolder.UsrK = value; }
		}
		/// <summary>
		/// Link to the MusicType table - a music type that the user listens to
		/// </summary>
		public int MusicTypeK
		{
			get { return dataHolder.MusicTypeK; }
			set { this.dataHolder.MusicTypeK = value; }
		}
		#endregion
		public UsrMusicTypeFavourite UsrMusicTypeFavourite
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new UsrMusicTypeFavourite(K);
					}
					else
					{
						bob = new UsrMusicTypeFavourite();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region UsrMusicTypeFavouriteSet
	public partial class UsrMusicTypeFavouriteSet : BobSet, IEnumerable<UsrMusicTypeFavourite>
	{
		public UsrMusicTypeFavouriteSet(Query query) : base(query) { }

		public UsrMusicTypeFavourite this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new UsrMusicTypeFavourite(this);
					((UsrMusicTypeFavourite)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (UsrMusicTypeFavourite)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new UsrMusicTypeFavouriteTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<UsrMusicTypeFavourite> ToList()
		{
			List<UsrMusicTypeFavourite> list = new List<UsrMusicTypeFavourite>();
			foreach (UsrMusicTypeFavourite item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<UsrMusicTypeFavourite> Members

		public new IEnumerator<UsrMusicTypeFavourite> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region UsrMusicTypeFavouriteTableDef
	public class UsrMusicTypeFavouriteTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "UsrMusicTypeFavourite";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "48E84A36";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return UsrMusicTypeFavourite.GetColumnName((UsrMusicTypeFavourite.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.UsrMusicTypeFavourite;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return false;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return null;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			UsrMusicTypeFavourite.Columns c = (UsrMusicTypeFavourite.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case UsrMusicTypeFavourite.Columns.UsrK: ColumnStore[i] = new ColumnDef(c, "UsrK", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey, 0); break;
					case UsrMusicTypeFavourite.Columns.MusicTypeK: ColumnStore[i] = new ColumnDef(c, "MusicTypeK", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey, 0); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(UsrMusicTypeFavourite.Columns.UsrK);
						InitColumn(UsrMusicTypeFavourite.Columns.MusicTypeK);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region UsrPhotoFavourite
	/// <summary>
	/// Links a user to many photos (my favorite photos)
	/// </summary>
	public partial class UsrPhotoFavourite : Model.Entities.UsrPhotoFavourite, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// Primary K - not clustered index
			/// </summary>
			K = 0x00630001,
			/// <summary>
			/// Link to Usr table
			/// </summary>
			UsrK = 0x00630002,
			/// <summary>
			/// Link to the Photo table
			/// </summary>
			PhotoK = 0x00630003,
			/// <summary>
			/// When was this favourite added?
			/// </summary>
			DateTimeAdded = 0x00630004,
		}
		#endregion
		public static string GetColumnName(UsrPhotoFavourite.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case UsrPhotoFavourite.Columns.K: return "K";
						case UsrPhotoFavourite.Columns.UsrK: return "UsrK";
						case UsrPhotoFavourite.Columns.PhotoK: return "PhotoK";
						case UsrPhotoFavourite.Columns.DateTimeAdded: return "DateTimeAdded";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(UsrPhotoFavourite.Columns columnEnum)
		{
			switch (columnEnum)
			{
								default: return false;
			}
		}


		#region Common
 
		public UsrPhotoFavourite(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);  }
		public UsrPhotoFavourite()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.UsrPhotoFavourite);
		}
		public UsrPhotoFavourite(BobSet bs)
		{
			this.Bob = new Bob(bs.Table, bs);
		}
		public UsrPhotoFavourite(int UsrPhotoFavouriteK, IBob Parent, object Column)
			: this()
		{
			Bob.GetBobFromParent(UsrPhotoFavouriteK, Parent.Bob, Column, TablesEnum.UsrPhotoFavourite);
		}
		public UsrPhotoFavourite(int UsrPhotoFavouriteK)
			: this()
		{
			Bob.GetBobFromPrimaryKey(UsrPhotoFavouriteK);
		}
		#endregion

	}
	#endregion
	#region UsrPhotoFavouriteTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region UsrPhotoFavourite
	/// <summary>
	/// Links a user to many photos (my favorite photos)
	/// </summary>
	[Serializable]
	public partial class UsrPhotoFavourite 
	{
		
		#region Simple members
		/// <summary>
		/// Primary K - not clustered index
		/// </summary>
		public override int K
		{
			get { return (int)this[UsrPhotoFavourite.Columns.K] as int? ?? 0 ; }
			set { this[UsrPhotoFavourite.Columns.K] = value; }
		}
		/// <summary>
		/// Link to Usr table
		/// </summary>
		public override int UsrK
		{
			get { return (int)this[UsrPhotoFavourite.Columns.UsrK]; }
			set { this[UsrPhotoFavourite.Columns.UsrK] = value; }
		}
		/// <summary>
		/// Link to the Photo table
		/// </summary>
		public override int PhotoK
		{
			get { return (int)this[UsrPhotoFavourite.Columns.PhotoK]; }
			set { this[UsrPhotoFavourite.Columns.PhotoK] = value; }
		}
		/// <summary>
		/// When was this favourite added?
		/// </summary>
		public override DateTime? DateTimeAdded
		{
			get { return (DateTime?)this[UsrPhotoFavourite.Columns.DateTimeAdded]; }
			set { this[UsrPhotoFavourite.Columns.DateTimeAdded] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildUsrPhotoFavourites
	{
		CachedSqlSelect<UsrPhotoFavourite> ChildUsrPhotoFavourites();
		CachedSqlSelect<UsrPhotoFavourite> ChildUsrPhotoFavourites(Q where);
		CachedSqlSelect<UsrPhotoFavourite> ChildUsrPhotoFavourites(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<UsrPhotoFavourite> ChildUsrPhotoFavourites(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class UsrPhotoFavourite 
		{
		}

	#region UsrPhotoFavouriteDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region UsrPhotoFavouriteDataHolder
	/// <summary>
	/// Links a user to many photos (my favorite photos)DataHolder
	/// </summary>
	[Serializable]
	public partial class UsrPhotoFavouriteDataHolder : DataHolder<UsrPhotoFavourite>
	{
		UsrPhotoFavourite dataHolder;
		[NonSerializedAttribute] UsrPhotoFavourite bob;

		public UsrPhotoFavouriteDataHolder()
		{
			this.dataHolder = new UsrPhotoFavourite();
		}
		
		void CopyValues(UsrPhotoFavourite source, UsrPhotoFavourite destination)
		{
			destination[Bobs.UsrPhotoFavourite.Columns.K] = source[Bobs.UsrPhotoFavourite.Columns.K];
			destination[Bobs.UsrPhotoFavourite.Columns.UsrK] = source[Bobs.UsrPhotoFavourite.Columns.UsrK];
			destination[Bobs.UsrPhotoFavourite.Columns.PhotoK] = source[Bobs.UsrPhotoFavourite.Columns.PhotoK];
			destination[Bobs.UsrPhotoFavourite.Columns.DateTimeAdded] = source[Bobs.UsrPhotoFavourite.Columns.DateTimeAdded];
		}
		
		public UsrPhotoFavouriteDataHolder(UsrPhotoFavourite bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// Primary K - not clustered index
		/// </summary>
		public int K
		{
			get { return dataHolder.K; }
			set { this.dataHolder.K = value; }
		}
		/// <summary>
		/// Link to Usr table
		/// </summary>
		public int UsrK
		{
			get { return dataHolder.UsrK; }
			set { this.dataHolder.UsrK = value; }
		}
		/// <summary>
		/// Link to the Photo table
		/// </summary>
		public int PhotoK
		{
			get { return dataHolder.PhotoK; }
			set { this.dataHolder.PhotoK = value; }
		}
		/// <summary>
		/// When was this favourite added?
		/// </summary>
		public DateTime? DateTimeAdded
		{
			get { return dataHolder.DateTimeAdded; }
			set { this.dataHolder.DateTimeAdded = value; }
		}
		#endregion
		public UsrPhotoFavourite UsrPhotoFavourite
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new UsrPhotoFavourite(K);
					}
					else
					{
						bob = new UsrPhotoFavourite();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region UsrPhotoFavouriteSet
	public partial class UsrPhotoFavouriteSet : BobSet, IEnumerable<UsrPhotoFavourite>
	{
		public UsrPhotoFavouriteSet(Query query) : base(query) { }

		public UsrPhotoFavourite this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new UsrPhotoFavourite(this);
					((UsrPhotoFavourite)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (UsrPhotoFavourite)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new UsrPhotoFavouriteTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<UsrPhotoFavourite> ToList()
		{
			List<UsrPhotoFavourite> list = new List<UsrPhotoFavourite>();
			foreach (UsrPhotoFavourite item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<UsrPhotoFavourite> Members

		public new IEnumerator<UsrPhotoFavourite> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region UsrPhotoFavouriteTableDef
	public class UsrPhotoFavouriteTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "UsrPhotoFavourite";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "9743B94F";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return UsrPhotoFavourite.GetColumnName((UsrPhotoFavourite.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.UsrPhotoFavourite;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return true;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return UsrPhotoFavourite.Columns.K;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			UsrPhotoFavourite.Columns c = (UsrPhotoFavourite.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case UsrPhotoFavourite.Columns.K: ColumnStore[i] = new ColumnDef(c, "K", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey | SqlColumnFlag.AutoNumber, null); break;
					case UsrPhotoFavourite.Columns.UsrK: ColumnStore[i] = new ColumnDef(c, "UsrK", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey, 0); break;
					case UsrPhotoFavourite.Columns.PhotoK: ColumnStore[i] = new ColumnDef(c, "PhotoK", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey, 0); break;
					case UsrPhotoFavourite.Columns.DateTimeAdded: ColumnStore[i] = new ColumnDef(c, "DateTimeAdded", SqlDbType.DateTime, 16, null); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(UsrPhotoFavourite.Columns.K);
						InitColumn(UsrPhotoFavourite.Columns.UsrK);
						InitColumn(UsrPhotoFavourite.Columns.PhotoK);
						InitColumn(UsrPhotoFavourite.Columns.DateTimeAdded);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region UsrPhotoMe
	/// <summary>
	/// Links a user to many photos (photos of me)
	/// </summary>
	public partial class UsrPhotoMe : Model.Entities.UsrPhotoMe, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// Primary K - not clustered index
			/// </summary>
			K = 0x00640001,
			/// <summary>
			/// Link to Usr table
			/// </summary>
			UsrK = 0x00640002,
			/// <summary>
			/// Link to the Photo table
			/// </summary>
			PhotoK = 0x00640003,
		}
		#endregion
		public static string GetColumnName(UsrPhotoMe.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case UsrPhotoMe.Columns.K: return "K";
						case UsrPhotoMe.Columns.UsrK: return "UsrK";
						case UsrPhotoMe.Columns.PhotoK: return "PhotoK";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(UsrPhotoMe.Columns columnEnum)
		{
			switch (columnEnum)
			{
							default: return false;
			}
		}


		#region Common
 
		public UsrPhotoMe(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);  }
		public UsrPhotoMe()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.UsrPhotoMe);
		}
		public UsrPhotoMe(BobSet bs)
		{
			this.Bob = new Bob(bs.Table, bs);
		}
		public UsrPhotoMe(int UsrPhotoMeK, IBob Parent, object Column)
			: this()
		{
			Bob.GetBobFromParent(UsrPhotoMeK, Parent.Bob, Column, TablesEnum.UsrPhotoMe);
		}
		public UsrPhotoMe(int UsrPhotoMeK)
			: this()
		{
			Bob.GetBobFromPrimaryKey(UsrPhotoMeK);
		}
		#endregion

	}
	#endregion
	#region UsrPhotoMeTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region UsrPhotoMe
	/// <summary>
	/// Links a user to many photos (photos of me)
	/// </summary>
	[Serializable]
	public partial class UsrPhotoMe 
	{
		
		#region Simple members
		/// <summary>
		/// Primary K - not clustered index
		/// </summary>
		public override int K
		{
			get { return (int)this[UsrPhotoMe.Columns.K] as int? ?? 0 ; }
			set { this[UsrPhotoMe.Columns.K] = value; }
		}
		/// <summary>
		/// Link to Usr table
		/// </summary>
		public override int UsrK
		{
			get { return (int)this[UsrPhotoMe.Columns.UsrK]; }
			set { this[UsrPhotoMe.Columns.UsrK] = value; }
		}
		/// <summary>
		/// Link to the Photo table
		/// </summary>
		public override int PhotoK
		{
			get { return (int)this[UsrPhotoMe.Columns.PhotoK]; }
			set { this[UsrPhotoMe.Columns.PhotoK] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildUsrPhotoMes
	{
		CachedSqlSelect<UsrPhotoMe> ChildUsrPhotoMes();
		CachedSqlSelect<UsrPhotoMe> ChildUsrPhotoMes(Q where);
		CachedSqlSelect<UsrPhotoMe> ChildUsrPhotoMes(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<UsrPhotoMe> ChildUsrPhotoMes(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class UsrPhotoMe 
		{
		}

	#region UsrPhotoMeDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region UsrPhotoMeDataHolder
	/// <summary>
	/// Links a user to many photos (photos of me)DataHolder
	/// </summary>
	[Serializable]
	public partial class UsrPhotoMeDataHolder : DataHolder<UsrPhotoMe>
	{
		UsrPhotoMe dataHolder;
		[NonSerializedAttribute] UsrPhotoMe bob;

		public UsrPhotoMeDataHolder()
		{
			this.dataHolder = new UsrPhotoMe();
		}
		
		void CopyValues(UsrPhotoMe source, UsrPhotoMe destination)
		{
			destination[Bobs.UsrPhotoMe.Columns.K] = source[Bobs.UsrPhotoMe.Columns.K];
			destination[Bobs.UsrPhotoMe.Columns.UsrK] = source[Bobs.UsrPhotoMe.Columns.UsrK];
			destination[Bobs.UsrPhotoMe.Columns.PhotoK] = source[Bobs.UsrPhotoMe.Columns.PhotoK];
		}
		
		public UsrPhotoMeDataHolder(UsrPhotoMe bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// Primary K - not clustered index
		/// </summary>
		public int K
		{
			get { return dataHolder.K; }
			set { this.dataHolder.K = value; }
		}
		/// <summary>
		/// Link to Usr table
		/// </summary>
		public int UsrK
		{
			get { return dataHolder.UsrK; }
			set { this.dataHolder.UsrK = value; }
		}
		/// <summary>
		/// Link to the Photo table
		/// </summary>
		public int PhotoK
		{
			get { return dataHolder.PhotoK; }
			set { this.dataHolder.PhotoK = value; }
		}
		#endregion
		public UsrPhotoMe UsrPhotoMe
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new UsrPhotoMe(K);
					}
					else
					{
						bob = new UsrPhotoMe();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region UsrPhotoMeSet
	public partial class UsrPhotoMeSet : BobSet, IEnumerable<UsrPhotoMe>
	{
		public UsrPhotoMeSet(Query query) : base(query) { }

		public UsrPhotoMe this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new UsrPhotoMe(this);
					((UsrPhotoMe)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (UsrPhotoMe)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new UsrPhotoMeTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<UsrPhotoMe> ToList()
		{
			List<UsrPhotoMe> list = new List<UsrPhotoMe>();
			foreach (UsrPhotoMe item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<UsrPhotoMe> Members

		public new IEnumerator<UsrPhotoMe> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region UsrPhotoMeTableDef
	public class UsrPhotoMeTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "UsrPhotoMe";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "4CE926B4";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return UsrPhotoMe.GetColumnName((UsrPhotoMe.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.UsrPhotoMe;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return true;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return UsrPhotoMe.Columns.K;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			UsrPhotoMe.Columns c = (UsrPhotoMe.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case UsrPhotoMe.Columns.K: ColumnStore[i] = new ColumnDef(c, "K", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey | SqlColumnFlag.AutoNumber, null); break;
					case UsrPhotoMe.Columns.UsrK: ColumnStore[i] = new ColumnDef(c, "UsrK", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey, 0); break;
					case UsrPhotoMe.Columns.PhotoK: ColumnStore[i] = new ColumnDef(c, "PhotoK", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey, 0); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(UsrPhotoMe.Columns.K);
						InitColumn(UsrPhotoMe.Columns.UsrK);
						InitColumn(UsrPhotoMe.Columns.PhotoK);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region UsrPlaceVisit
	/// <summary>
	/// Links to many places that the user may like to visit.
	/// </summary>
	public partial class UsrPlaceVisit : Model.Entities.UsrPlaceVisit, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// Link to Usr table
			/// </summary>
			UsrK = 0x00650001,
			/// <summary>
			/// Link to the Place table - a place that this user visits
			/// </summary>
			PlaceK = 0x00650002,
		}
		#endregion
		public static string GetColumnName(UsrPlaceVisit.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case UsrPlaceVisit.Columns.UsrK: return "UsrK";
						case UsrPlaceVisit.Columns.PlaceK: return "PlaceK";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(UsrPlaceVisit.Columns columnEnum)
		{
			switch (columnEnum)
			{
						default: return false;
			}
		}


		#region Common
	 
		public UsrPlaceVisit(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);}
		public UsrPlaceVisit()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.UsrPlaceVisit);
		}
		public UsrPlaceVisit(BobSet bs)
		{
			this.Bob = new Bob(Bobs.Tables.Defs.UsrPlaceVisit, bs);
		}
		public UsrPlaceVisit(IBob Parent, object Column) : this()
		{
			this.Bob.GetBobFromParentSimple(Parent, Column, TablesEnum.UsrPlaceVisit);
		}
		public UsrPlaceVisit(int UsrK, int PlaceK) : this()
		{
			this.Bob.GetBobFromPrimaryKeyArray(new Q[] {new Q(UsrPlaceVisit.Columns.UsrK,UsrK), new Q(UsrPlaceVisit.Columns.PlaceK,PlaceK)});
		} 
		#endregion

	}
	#endregion
	#region UsrPlaceVisitTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region UsrPlaceVisit
	/// <summary>
	/// Links to many places that the user may like to visit.
	/// </summary>
	[Serializable]
	public partial class UsrPlaceVisit 
	{
		
		#region Simple members
		/// <summary>
		/// Link to Usr table
		/// </summary>
		public override int UsrK
		{
			get { return (int)this[UsrPlaceVisit.Columns.UsrK]; }
			set { this[UsrPlaceVisit.Columns.UsrK] = value; }
		}
		/// <summary>
		/// Link to the Place table - a place that this user visits
		/// </summary>
		public override int PlaceK
		{
			get { return (int)this[UsrPlaceVisit.Columns.PlaceK]; }
			set { this[UsrPlaceVisit.Columns.PlaceK] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildUsrPlaceVisits
	{
		CachedSqlSelect<UsrPlaceVisit> ChildUsrPlaceVisits();
		CachedSqlSelect<UsrPlaceVisit> ChildUsrPlaceVisits(Q where);
		CachedSqlSelect<UsrPlaceVisit> ChildUsrPlaceVisits(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<UsrPlaceVisit> ChildUsrPlaceVisits(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class UsrPlaceVisit 
		{
		}

	#region UsrPlaceVisitDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region UsrPlaceVisitDataHolder
	/// <summary>
	/// Links to many places that the user may like to visit.DataHolder
	/// </summary>
	[Serializable]
	public partial class UsrPlaceVisitDataHolder : DataHolder<UsrPlaceVisit>
	{
		UsrPlaceVisit dataHolder;
		[NonSerializedAttribute] UsrPlaceVisit bob;

		public UsrPlaceVisitDataHolder()
		{
			this.dataHolder = new UsrPlaceVisit();
		}
		
		void CopyValues(UsrPlaceVisit source, UsrPlaceVisit destination)
		{
			destination[Bobs.UsrPlaceVisit.Columns.UsrK] = source[Bobs.UsrPlaceVisit.Columns.UsrK];
			destination[Bobs.UsrPlaceVisit.Columns.PlaceK] = source[Bobs.UsrPlaceVisit.Columns.PlaceK];
		}
		
		public UsrPlaceVisitDataHolder(UsrPlaceVisit bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// Link to Usr table
		/// </summary>
		public int UsrK
		{
			get { return dataHolder.UsrK; }
			set { this.dataHolder.UsrK = value; }
		}
		/// <summary>
		/// Link to the Place table - a place that this user visits
		/// </summary>
		public int PlaceK
		{
			get { return dataHolder.PlaceK; }
			set { this.dataHolder.PlaceK = value; }
		}
		#endregion
		public UsrPlaceVisit UsrPlaceVisit
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new UsrPlaceVisit(K);
					}
					else
					{
						bob = new UsrPlaceVisit();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region UsrPlaceVisitSet
	public partial class UsrPlaceVisitSet : BobSet, IEnumerable<UsrPlaceVisit>
	{
		public UsrPlaceVisitSet(Query query) : base(query) { }

		public UsrPlaceVisit this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new UsrPlaceVisit(this);
					((UsrPlaceVisit)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (UsrPlaceVisit)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new UsrPlaceVisitTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<UsrPlaceVisit> ToList()
		{
			List<UsrPlaceVisit> list = new List<UsrPlaceVisit>();
			foreach (UsrPlaceVisit item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<UsrPlaceVisit> Members

		public new IEnumerator<UsrPlaceVisit> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region UsrPlaceVisitTableDef
	public class UsrPlaceVisitTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "UsrPlaceVisit";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "0DF9F093";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return UsrPlaceVisit.GetColumnName((UsrPlaceVisit.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.UsrPlaceVisit;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return false;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return null;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			UsrPlaceVisit.Columns c = (UsrPlaceVisit.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case UsrPlaceVisit.Columns.UsrK: ColumnStore[i] = new ColumnDef(c, "UsrK", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey, 0); break;
					case UsrPlaceVisit.Columns.PlaceK: ColumnStore[i] = new ColumnDef(c, "PlaceK", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey, 0); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(UsrPlaceVisit.Columns.UsrK);
						InitColumn(UsrPlaceVisit.Columns.PlaceK);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region Venue
	/// <summary>
	/// A club or location
	/// </summary>
	public partial class Venue : Model.Entities.Venue, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// The primary key
			/// </summary>
			K = 0x00660001,
			/// <summary>
			/// Name of the venue
			/// </summary>
			Name = 0x00660002,
			/// <summary>
			/// Info about the club, address
			/// </summary>
			DetailsHtml = 0x00660003,
			/// <summary>
			/// Postcode
			/// </summary>
			Postcode = 0x00660004,
			/// <summary>
			/// Links to one Place
			/// </summary>
			PlaceK = 0x00660005,
			/// <summary>
			/// Admin note
			/// </summary>
			AdminNote = 0x00660006,
			/// <summary>
			/// Cropped image between 75*75 and 100*100
			/// </summary>
			Pic = 0x00660007,
			/// <summary>
			/// Url of the page with the map on it (if there is a better map than multimep)
			/// </summary>
			OverrideMapUrl = 0x00660008,
			/// <summary>
			/// The user that added this event (0 if added by admin)
			/// </summary>
			OwnerUsrK = 0x00660009,
			/// <summary>
			/// If the owner wants to upload another image after the this has been enabled, it is stored here
			/// </summary>
			PicNew = 0x0066000a,
			/// <summary>
			/// The capacity of the venue (max number of people)
			/// </summary>
			Capacity = 0x0066000b,
			/// <summary>
			/// The total number of comments
			/// </summary>
			TotalComments = 0x0066000c,
			/// <summary>
			/// The date/time of the last post that was posted in this board (including child objects)
			/// </summary>
			LastPost = 0x0066000d,
			/// <summary>
			/// The average date.time of all comments posted in this board (including child objects)
			/// </summary>
			AverageCommentDateTime = 0x0066000e,
			/// <summary>
			/// When was the venue added to the system?
			/// </summary>
			AddedDateTime = 0x0066000f,
			/// <summary>
			/// If true, only the venue owner may upload photos
			/// </summary>
			NoPhotos = 0x00660010,
			/// <summary>
			/// The email address of the admin contact for sorting spoters with guestlists
			/// </summary>
			AdminEmail = 0x00660011,
			/// <summary>
			/// Is the description text or html?
			/// </summary>
			IsDescriptionText = 0x00660012,
			/// <summary>
			/// Has the venue been seen by an admin or not?
			/// </summary>
			IsNew = 0x00660013,
			/// <summary>
			/// If true, photos taken at this venue can't be ordered.
			/// </summary>
			NoPrints = 0x00660014,
			/// <summary>
			/// Should the description just have "\n" replaced with "&lt;br&gt;"? (This overrides IsDescriptionText)
			/// </summary>
			IsDescriptionCleanHtml = 0x00660015,
			/// <summary>
			/// Has the venue been recently edited?
			/// </summary>
			IsEdited = 0x00660016,
			/// <summary>
			/// Guid used to ensure duplicate venues don't get posted if the user refreshes the page after saving.
			/// </summary>
			DuplicateGuid = 0x00660017,
			/// <summary>
			/// Does the venue host regular (monthly or more often) events?
			/// </summary>
			RegularEvents = 0x00660018,
			/// <summary>
			/// Unique name used in the url
			/// </summary>
			UrlName = 0x00660019,
			/// <summary>
			/// Link to the promoter table
			/// </summary>
			PromoterK = 0x0066001a,
			/// <summary>
			/// State var used to reconstruct cropper when re-cropping
			/// </summary>
			PicState = 0x0066001b,
			/// <summary>
			/// The Photo that was used to create the Pic.
			/// </summary>
			PicPhotoK = 0x0066001c,
			/// <summary>
			/// The Misc that was used to create the Pic.
			/// </summary>
			PicMiscK = 0x0066001d,
			/// <summary>
			/// The url fragment - so that the url can be generated without accessing parent database records
			/// </summary>
			UrlFragment = 0x0066001e,
			/// <summary>
			/// The moderator that has been assigned to moderate this venue
			/// </summary>
			ModeratorUsrK = 0x0066001f,
			/// <summary>
			/// The total number of events at this venue
			/// </summary>
			TotalEvents = 0x00660020,
			/// <summary>
			/// Has the promoter been confirmed?
			/// </summary>
			PromoterStatus = 0x00660021,
			/// <summary>
			/// Is the Details plain html? - e.g. rendered outsite the yellow box?
			/// </summary>
			DetailsPlain = 0x00660022,
			/// <summary>
			/// Css to emit for the styled pages
			/// </summary>
			StyledCss = 0x00660023,
			/// <summary>
			/// Xml to emit for the styled pages
			/// </summary>
			StyledXml = 0x00660024,
			/// <summary>
			/// Latitude
			/// </summary>
			Lat = 0x00660025,
			/// <summary>
			/// Longitude
			/// </summary>
			Lon = 0x00660026,
			/// <summary>
			/// database-calculated HtmID based on Lat/Lon
			/// </summary>
			HtmId = 0x00660027,
		}
		#endregion
		public static string GetColumnName(Venue.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case Venue.Columns.K: return "K";
						case Venue.Columns.Name: return "Name";
						case Venue.Columns.DetailsHtml: return "DetailsHtml";
						case Venue.Columns.Postcode: return "Postcode";
						case Venue.Columns.PlaceK: return "PlaceK";
						case Venue.Columns.AdminNote: return "AdminNote";
						case Venue.Columns.Pic: return "Pic";
						case Venue.Columns.OverrideMapUrl: return "OverrideMapUrl";
						case Venue.Columns.OwnerUsrK: return "OwnerUsrK";
						case Venue.Columns.PicNew: return "PicNew";
						case Venue.Columns.Capacity: return "Capacity";
						case Venue.Columns.TotalComments: return "TotalComments";
						case Venue.Columns.LastPost: return "LastPost";
						case Venue.Columns.AverageCommentDateTime: return "AverageCommentDateTime";
						case Venue.Columns.AddedDateTime: return "AddedDateTime";
						case Venue.Columns.NoPhotos: return "NoPhotos";
						case Venue.Columns.AdminEmail: return "AdminEmail";
						case Venue.Columns.IsDescriptionText: return "IsDescriptionText";
						case Venue.Columns.IsNew: return "IsNew";
						case Venue.Columns.NoPrints: return "NoPrints";
						case Venue.Columns.IsDescriptionCleanHtml: return "IsDescriptionCleanHtml";
						case Venue.Columns.IsEdited: return "IsEdited";
						case Venue.Columns.DuplicateGuid: return "DuplicateGuid";
						case Venue.Columns.RegularEvents: return "RegularEvents";
						case Venue.Columns.UrlName: return "UrlName";
						case Venue.Columns.PromoterK: return "PromoterK";
						case Venue.Columns.PicState: return "PicState";
						case Venue.Columns.PicPhotoK: return "PicPhotoK";
						case Venue.Columns.PicMiscK: return "PicMiscK";
						case Venue.Columns.UrlFragment: return "UrlFragment";
						case Venue.Columns.ModeratorUsrK: return "ModeratorUsrK";
						case Venue.Columns.TotalEvents: return "TotalEvents";
						case Venue.Columns.PromoterStatus: return "PromoterStatus";
						case Venue.Columns.DetailsPlain: return "DetailsPlain";
						case Venue.Columns.StyledCss: return "StyledCss";
						case Venue.Columns.StyledXml: return "StyledXml";
						case Venue.Columns.Lat: return "Lat";
						case Venue.Columns.Lon: return "Lon";
						case Venue.Columns.HtmId: return "HtmId";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(Venue.Columns columnEnum)
		{
			switch (columnEnum)
			{
																																											default: return false;
			}
		}


		#region Common
 
		public Venue(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);  }
		public Venue()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.Venue);
		}
		public Venue(BobSet bs)
		{
			this.Bob = new Bob(bs.Table, bs);
		}
		public Venue(int VenueK, IBob Parent, object Column)
			: this()
		{
			Bob.GetBobFromParent(VenueK, Parent.Bob, Column, TablesEnum.Venue);
		}
		public Venue(int VenueK)
			: this()
		{
			Bob.GetBobFromPrimaryKey(VenueK);
		}
		#endregion

	}
	#endregion
	#region VenueTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region Venue
	/// <summary>
	/// A club or location
	/// </summary>
	[Serializable]
	public partial class Venue 
	{
		
		#region Simple members
		/// <summary>
		/// The primary key
		/// </summary>
		public override int K
		{
			get { return (int)this[Venue.Columns.K] as int? ?? 0 ; }
			set { this[Venue.Columns.K] = value; }
		}
		/// <summary>
		/// Name of the venue
		/// </summary>
		public override string Name
		{
			get { return (string)this[Venue.Columns.Name]; }
			set { this[Venue.Columns.Name] = value; }
		}
		/// <summary>
		/// Info about the club, address
		/// </summary>
		public override string DetailsHtml
		{
			get { return (string)this[Venue.Columns.DetailsHtml]; }
			set { this[Venue.Columns.DetailsHtml] = value; }
		}
		/// <summary>
		/// Postcode
		/// </summary>
		public override string Postcode
		{
			get { return (string)this[Venue.Columns.Postcode]; }
			set { this[Venue.Columns.Postcode] = value; }
		}
		/// <summary>
		/// Links to one Place
		/// </summary>
		public override int PlaceK
		{
			get { return (int)this[Venue.Columns.PlaceK]; }
			set { this[Venue.Columns.PlaceK] = value; }
		}
		/// <summary>
		/// Admin note
		/// </summary>
		public override string AdminNote
		{
			get { return (string)this[Venue.Columns.AdminNote]; }
			set { this[Venue.Columns.AdminNote] = value; }
		}
		/// <summary>
		/// Cropped image between 75*75 and 100*100
		/// </summary>
		public Guid	Pic
		{
			get{ return Cambro.Misc.Db.GuidConvertor(this[Venue.Columns.Pic]);}		
			set{ this[Venue.Columns.Pic] = new System.Data.SqlTypes.SqlGuid(value);}
		}
		/// <summary>
		/// Url of the page with the map on it (if there is a better map than multimep)
		/// </summary>
		public override string OverrideMapUrl
		{
			get { return (string)this[Venue.Columns.OverrideMapUrl]; }
			set { this[Venue.Columns.OverrideMapUrl] = value; }
		}
		/// <summary>
		/// The user that added this event (0 if added by admin)
		/// </summary>
		public override int OwnerUsrK
		{
			get { return (int)this[Venue.Columns.OwnerUsrK]; }
			set { this[Venue.Columns.OwnerUsrK] = value; }
		}
		/// <summary>
		/// If the owner wants to upload another image after the this has been enabled, it is stored here
		/// </summary>
		public Guid	PicNew
		{
			get{ return Cambro.Misc.Db.GuidConvertor(this[Venue.Columns.PicNew]);}		
			set{ this[Venue.Columns.PicNew] = new System.Data.SqlTypes.SqlGuid(value);}
		}
		/// <summary>
		/// The capacity of the venue (max number of people)
		/// </summary>
		public override int Capacity
		{
			get { return (int)this[Venue.Columns.Capacity]; }
			set { this[Venue.Columns.Capacity] = value; }
		}
		/// <summary>
		/// The total number of comments
		/// </summary>
		public override int TotalComments
		{
			get { return (int)this[Venue.Columns.TotalComments]; }
			set { this[Venue.Columns.TotalComments] = value; }
		}
		/// <summary>
		/// The date/time of the last post that was posted in this board (including child objects)
		/// </summary>
		public override DateTime LastPost
		{
			get { return (DateTime)this[Venue.Columns.LastPost]; }
			set { this[Venue.Columns.LastPost] = value; }
		}
		/// <summary>
		/// The average date.time of all comments posted in this board (including child objects)
		/// </summary>
		public override DateTime AverageCommentDateTime
		{
			get { return (DateTime)this[Venue.Columns.AverageCommentDateTime]; }
			set { this[Venue.Columns.AverageCommentDateTime] = value; }
		}
		/// <summary>
		/// When was the venue added to the system?
		/// </summary>
		public override DateTime AddedDateTime
		{
			get { return (DateTime)this[Venue.Columns.AddedDateTime]; }
			set { this[Venue.Columns.AddedDateTime] = value; }
		}
		/// <summary>
		/// If true, only the venue owner may upload photos
		/// </summary>
		public override bool NoPhotos
		{
			get { return (bool)this[Venue.Columns.NoPhotos]; }
			set { this[Venue.Columns.NoPhotos] = value; }
		}
		/// <summary>
		/// The email address of the admin contact for sorting spoters with guestlists
		/// </summary>
		public override string AdminEmail
		{
			get { return (string)this[Venue.Columns.AdminEmail]; }
			set { this[Venue.Columns.AdminEmail] = value; }
		}
		/// <summary>
		/// Is the description text or html?
		/// </summary>
		public override bool IsDescriptionText
		{
			get { return (bool)this[Venue.Columns.IsDescriptionText]; }
			set { this[Venue.Columns.IsDescriptionText] = value; }
		}
		/// <summary>
		/// Has the venue been seen by an admin or not?
		/// </summary>
		public override bool IsNew
		{
			get { return (bool)this[Venue.Columns.IsNew]; }
			set { this[Venue.Columns.IsNew] = value; }
		}
		/// <summary>
		/// If true, photos taken at this venue can't be ordered.
		/// </summary>
		public override bool NoPrints
		{
			get { return (bool)this[Venue.Columns.NoPrints]; }
			set { this[Venue.Columns.NoPrints] = value; }
		}
		/// <summary>
		/// Should the description just have "\n" replaced with "&lt;br&gt;"? (This overrides IsDescriptionText)
		/// </summary>
		public override bool IsDescriptionCleanHtml
		{
			get { return (bool)this[Venue.Columns.IsDescriptionCleanHtml]; }
			set { this[Venue.Columns.IsDescriptionCleanHtml] = value; }
		}
		/// <summary>
		/// Has the venue been recently edited?
		/// </summary>
		public override bool IsEdited
		{
			get { return (bool)this[Venue.Columns.IsEdited]; }
			set { this[Venue.Columns.IsEdited] = value; }
		}
		/// <summary>
		/// Guid used to ensure duplicate venues don't get posted if the user refreshes the page after saving.
		/// </summary>
		public Guid	DuplicateGuid
		{
			get{ return Cambro.Misc.Db.GuidConvertor(this[Venue.Columns.DuplicateGuid]);}		
			set{ this[Venue.Columns.DuplicateGuid] = new System.Data.SqlTypes.SqlGuid(value);}
		}
		/// <summary>
		/// Does the venue host regular (monthly or more often) events?
		/// </summary>
		public override bool RegularEvents
		{
			get { return (bool)this[Venue.Columns.RegularEvents]; }
			set { this[Venue.Columns.RegularEvents] = value; }
		}
		/// <summary>
		/// Unique name used in the url
		/// </summary>
		public override string UrlName
		{
			get { return (string)this[Venue.Columns.UrlName]; }
			set { this[Venue.Columns.UrlName] = value; }
		}
		/// <summary>
		/// Link to the promoter table
		/// </summary>
		public override int PromoterK
		{
			get { return (int)this[Venue.Columns.PromoterK]; }
			set { this[Venue.Columns.PromoterK] = value; }
		}
		/// <summary>
		/// State var used to reconstruct cropper when re-cropping
		/// </summary>
		public override string PicState
		{
			get { return (string)this[Venue.Columns.PicState]; }
			set { this[Venue.Columns.PicState] = value; }
		}
		/// <summary>
		/// The Photo that was used to create the Pic.
		/// </summary>
		public override int PicPhotoK
		{
			get { return (int)this[Venue.Columns.PicPhotoK]; }
			set { this[Venue.Columns.PicPhotoK] = value; }
		}
		/// <summary>
		/// The Misc that was used to create the Pic.
		/// </summary>
		public override int PicMiscK
		{
			get { return (int)this[Venue.Columns.PicMiscK]; }
			set { this[Venue.Columns.PicMiscK] = value; }
		}
		/// <summary>
		/// The url fragment - so that the url can be generated without accessing parent database records
		/// </summary>
		public override string UrlFragment
		{
			get { return (string)this[Venue.Columns.UrlFragment]; }
			set { this[Venue.Columns.UrlFragment] = value; }
		}
		/// <summary>
		/// The moderator that has been assigned to moderate this venue
		/// </summary>
		public override int ModeratorUsrK
		{
			get { return (int)this[Venue.Columns.ModeratorUsrK]; }
			set { this[Venue.Columns.ModeratorUsrK] = value; }
		}
		/// <summary>
		/// The total number of events at this venue
		/// </summary>
		public override int TotalEvents
		{
			get { return (int)this[Venue.Columns.TotalEvents]; }
			set { this[Venue.Columns.TotalEvents] = value; }
		}
		/// <summary>
		/// Has the promoter been confirmed?
		/// </summary>
		public override int PromoterStatus
		{
			get { return (int)this[Venue.Columns.PromoterStatus]; }
			set { this[Venue.Columns.PromoterStatus] = value; }
		}
		/// <summary>
		/// Is the Details plain html? - e.g. rendered outsite the yellow box?
		/// </summary>
		public override bool DetailsPlain
		{
			get { return (bool)this[Venue.Columns.DetailsPlain]; }
			set { this[Venue.Columns.DetailsPlain] = value; }
		}
		/// <summary>
		/// Css to emit for the styled pages
		/// </summary>
		public override string StyledCss
		{
			get { return (string)this[Venue.Columns.StyledCss]; }
			set { this[Venue.Columns.StyledCss] = value; }
		}
		/// <summary>
		/// Xml to emit for the styled pages
		/// </summary>
		public override string StyledXml
		{
			get { return (string)this[Venue.Columns.StyledXml]; }
			set { this[Venue.Columns.StyledXml] = value; }
		}
		/// <summary>
		/// Latitude
		/// </summary>
		public override double Lat
		{
			get { return (double)this[Venue.Columns.Lat]; }
			set { this[Venue.Columns.Lat] = value; }
		}
		/// <summary>
		/// Longitude
		/// </summary>
		public override double Lon
		{
			get { return (double)this[Venue.Columns.Lon]; }
			set { this[Venue.Columns.Lon] = value; }
		}
		/// <summary>
		/// database-calculated HtmID based on Lat/Lon
		/// </summary>
		public override long? HtmId
		{
			get { return (long?)this[Venue.Columns.HtmId]; }
			set { this[Venue.Columns.HtmId] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildVenues
	{
		CachedSqlSelect<Venue> ChildVenues();
		CachedSqlSelect<Venue> ChildVenues(Q where);
		CachedSqlSelect<Venue> ChildVenues(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<Venue> ChildVenues(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class Venue 
	 : 
	Bobs.ChildInterfaces.IHasChildArticles
	,
	Bobs.ChildInterfaces.IHasChildBanners
	,
	Bobs.ChildInterfaces.IHasChildClubDetailss
	,
	Bobs.ChildInterfaces.IHasChildEvents
	,
	Bobs.ChildInterfaces.IHasChildThreads
		{
			public CachedSqlSelect<Article> ChildArticles()
		{
			return this.ChildArticles(null, null);
		}
		public CachedSqlSelect<Article> ChildArticles(Q where)
		{
			return this.ChildArticles(where, null);
		}
		public CachedSqlSelect<Article> ChildArticles(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildArticles(null, orderBy);
		}
		public CachedSqlSelect<Article> ChildArticles(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<Article>
			(
				new Children<Article>
				(
					TablesEnum.Venue, 
					this.K, 
					TablesEnum.Article, 
					dr => 
					{ 
						Article newArticle = new Article(); 
						newArticle.Initialise(dr); 
						return newArticle;
					},
					"D389F153",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<Banner> ChildBanners()
		{
			return this.ChildBanners(null, null);
		}
		public CachedSqlSelect<Banner> ChildBanners(Q where)
		{
			return this.ChildBanners(where, null);
		}
		public CachedSqlSelect<Banner> ChildBanners(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildBanners(null, orderBy);
		}
		public CachedSqlSelect<Banner> ChildBanners(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<Banner>
			(
				new Children<Banner>
				(
					TablesEnum.Venue, 
					this.K, 
					TablesEnum.Banner, 
					dr => 
					{ 
						Banner newBanner = new Banner(); 
						newBanner.Initialise(dr); 
						return newBanner;
					},
					"73D8C33D",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<ClubDetails> ChildClubDetailss()
		{
			return this.ChildClubDetailss(null, null);
		}
		public CachedSqlSelect<ClubDetails> ChildClubDetailss(Q where)
		{
			return this.ChildClubDetailss(where, null);
		}
		public CachedSqlSelect<ClubDetails> ChildClubDetailss(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildClubDetailss(null, orderBy);
		}
		public CachedSqlSelect<ClubDetails> ChildClubDetailss(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<ClubDetails>
			(
				new Children<ClubDetails>
				(
					TablesEnum.Venue, 
					this.K, 
					TablesEnum.ClubDetails, 
					dr => 
					{ 
						ClubDetails newClubDetails = new ClubDetails(); 
						newClubDetails.Initialise(dr); 
						return newClubDetails;
					},
					"8E6B772A",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<Event> ChildEvents()
		{
			return this.ChildEvents(null, null);
		}
		public CachedSqlSelect<Event> ChildEvents(Q where)
		{
			return this.ChildEvents(where, null);
		}
		public CachedSqlSelect<Event> ChildEvents(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildEvents(null, orderBy);
		}
		public CachedSqlSelect<Event> ChildEvents(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<Event>
			(
				new Children<Event>
				(
					TablesEnum.Venue, 
					this.K, 
					TablesEnum.Event, 
					dr => 
					{ 
						Event newEvent = new Event(); 
						newEvent.Initialise(dr); 
						return newEvent;
					},
					"8F18B18D",
					where,
					orderBy
				)
			);
		}
			public CachedSqlSelect<Thread> ChildThreads()
		{
			return this.ChildThreads(null, null);
		}
		public CachedSqlSelect<Thread> ChildThreads(Q where)
		{
			return this.ChildThreads(where, null);
		}
		public CachedSqlSelect<Thread> ChildThreads(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return this.ChildThreads(null, orderBy);
		}
		public CachedSqlSelect<Thread> ChildThreads(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy)
		{
			return new CachedSqlSelect<Thread>
			(
				new Children<Thread>
				(
					TablesEnum.Venue, 
					this.K, 
					TablesEnum.Thread, 
					dr => 
					{ 
						Thread newThread = new Thread(); 
						newThread.Initialise(dr); 
						return newThread;
					},
					"4576C3F1",
					where,
					orderBy
				)
			);
		}
		}

	#region VenueDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region VenueDataHolder
	/// <summary>
	/// A club or locationDataHolder
	/// </summary>
	[Serializable]
	public partial class VenueDataHolder : DataHolder<Venue>
	{
		Venue dataHolder;
		[NonSerializedAttribute] Venue bob;

		public VenueDataHolder()
		{
			this.dataHolder = new Venue();
		}
		
		void CopyValues(Venue source, Venue destination)
		{
			destination[Bobs.Venue.Columns.K] = source[Bobs.Venue.Columns.K];
			destination[Bobs.Venue.Columns.Name] = source[Bobs.Venue.Columns.Name];
			destination[Bobs.Venue.Columns.DetailsHtml] = source[Bobs.Venue.Columns.DetailsHtml];
			destination[Bobs.Venue.Columns.Postcode] = source[Bobs.Venue.Columns.Postcode];
			destination[Bobs.Venue.Columns.PlaceK] = source[Bobs.Venue.Columns.PlaceK];
			destination[Bobs.Venue.Columns.AdminNote] = source[Bobs.Venue.Columns.AdminNote];
			destination[Bobs.Venue.Columns.Pic] = source[Bobs.Venue.Columns.Pic];
			destination[Bobs.Venue.Columns.OverrideMapUrl] = source[Bobs.Venue.Columns.OverrideMapUrl];
			destination[Bobs.Venue.Columns.OwnerUsrK] = source[Bobs.Venue.Columns.OwnerUsrK];
			destination[Bobs.Venue.Columns.PicNew] = source[Bobs.Venue.Columns.PicNew];
			destination[Bobs.Venue.Columns.Capacity] = source[Bobs.Venue.Columns.Capacity];
			destination[Bobs.Venue.Columns.TotalComments] = source[Bobs.Venue.Columns.TotalComments];
			destination[Bobs.Venue.Columns.LastPost] = source[Bobs.Venue.Columns.LastPost];
			destination[Bobs.Venue.Columns.AverageCommentDateTime] = source[Bobs.Venue.Columns.AverageCommentDateTime];
			destination[Bobs.Venue.Columns.AddedDateTime] = source[Bobs.Venue.Columns.AddedDateTime];
			destination[Bobs.Venue.Columns.NoPhotos] = source[Bobs.Venue.Columns.NoPhotos];
			destination[Bobs.Venue.Columns.AdminEmail] = source[Bobs.Venue.Columns.AdminEmail];
			destination[Bobs.Venue.Columns.IsDescriptionText] = source[Bobs.Venue.Columns.IsDescriptionText];
			destination[Bobs.Venue.Columns.IsNew] = source[Bobs.Venue.Columns.IsNew];
			destination[Bobs.Venue.Columns.NoPrints] = source[Bobs.Venue.Columns.NoPrints];
			destination[Bobs.Venue.Columns.IsDescriptionCleanHtml] = source[Bobs.Venue.Columns.IsDescriptionCleanHtml];
			destination[Bobs.Venue.Columns.IsEdited] = source[Bobs.Venue.Columns.IsEdited];
			destination[Bobs.Venue.Columns.DuplicateGuid] = source[Bobs.Venue.Columns.DuplicateGuid];
			destination[Bobs.Venue.Columns.RegularEvents] = source[Bobs.Venue.Columns.RegularEvents];
			destination[Bobs.Venue.Columns.UrlName] = source[Bobs.Venue.Columns.UrlName];
			destination[Bobs.Venue.Columns.PromoterK] = source[Bobs.Venue.Columns.PromoterK];
			destination[Bobs.Venue.Columns.PicState] = source[Bobs.Venue.Columns.PicState];
			destination[Bobs.Venue.Columns.PicPhotoK] = source[Bobs.Venue.Columns.PicPhotoK];
			destination[Bobs.Venue.Columns.PicMiscK] = source[Bobs.Venue.Columns.PicMiscK];
			destination[Bobs.Venue.Columns.UrlFragment] = source[Bobs.Venue.Columns.UrlFragment];
			destination[Bobs.Venue.Columns.ModeratorUsrK] = source[Bobs.Venue.Columns.ModeratorUsrK];
			destination[Bobs.Venue.Columns.TotalEvents] = source[Bobs.Venue.Columns.TotalEvents];
			destination[Bobs.Venue.Columns.PromoterStatus] = source[Bobs.Venue.Columns.PromoterStatus];
			destination[Bobs.Venue.Columns.DetailsPlain] = source[Bobs.Venue.Columns.DetailsPlain];
			destination[Bobs.Venue.Columns.StyledCss] = source[Bobs.Venue.Columns.StyledCss];
			destination[Bobs.Venue.Columns.StyledXml] = source[Bobs.Venue.Columns.StyledXml];
			destination[Bobs.Venue.Columns.Lat] = source[Bobs.Venue.Columns.Lat];
			destination[Bobs.Venue.Columns.Lon] = source[Bobs.Venue.Columns.Lon];
			destination[Bobs.Venue.Columns.HtmId] = source[Bobs.Venue.Columns.HtmId];
		}
		
		public VenueDataHolder(Venue bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// The primary key
		/// </summary>
		public int K
		{
			get { return dataHolder.K; }
			set { this.dataHolder.K = value; }
		}
		/// <summary>
		/// Name of the venue
		/// </summary>
		public string Name
		{
			get { return dataHolder.Name; }
			set { this.dataHolder.Name = value; }
		}
		/// <summary>
		/// Info about the club, address
		/// </summary>
		public string DetailsHtml
		{
			get { return dataHolder.DetailsHtml; }
			set { this.dataHolder.DetailsHtml = value; }
		}
		/// <summary>
		/// Postcode
		/// </summary>
		public string Postcode
		{
			get { return dataHolder.Postcode; }
			set { this.dataHolder.Postcode = value; }
		}
		/// <summary>
		/// Links to one Place
		/// </summary>
		public int PlaceK
		{
			get { return dataHolder.PlaceK; }
			set { this.dataHolder.PlaceK = value; }
		}
		/// <summary>
		/// Admin note
		/// </summary>
		public string AdminNote
		{
			get { return dataHolder.AdminNote; }
			set { this.dataHolder.AdminNote = value; }
		}
		/// <summary>
		/// Cropped image between 75*75 and 100*100
		/// </summary>
		public Guid Pic
		{
			get { return dataHolder.Pic; }
			set { this.dataHolder.Pic = value; }
		}
		/// <summary>
		/// Url of the page with the map on it (if there is a better map than multimep)
		/// </summary>
		public string OverrideMapUrl
		{
			get { return dataHolder.OverrideMapUrl; }
			set { this.dataHolder.OverrideMapUrl = value; }
		}
		/// <summary>
		/// The user that added this event (0 if added by admin)
		/// </summary>
		public int OwnerUsrK
		{
			get { return dataHolder.OwnerUsrK; }
			set { this.dataHolder.OwnerUsrK = value; }
		}
		/// <summary>
		/// If the owner wants to upload another image after the this has been enabled, it is stored here
		/// </summary>
		public Guid PicNew
		{
			get { return dataHolder.PicNew; }
			set { this.dataHolder.PicNew = value; }
		}
		/// <summary>
		/// The capacity of the venue (max number of people)
		/// </summary>
		public int Capacity
		{
			get { return dataHolder.Capacity; }
			set { this.dataHolder.Capacity = value; }
		}
		/// <summary>
		/// The total number of comments
		/// </summary>
		public int TotalComments
		{
			get { return dataHolder.TotalComments; }
			set { this.dataHolder.TotalComments = value; }
		}
		/// <summary>
		/// The date/time of the last post that was posted in this board (including child objects)
		/// </summary>
		public DateTime LastPost
		{
			get { return dataHolder.LastPost; }
			set { this.dataHolder.LastPost = value; }
		}
		/// <summary>
		/// The average date.time of all comments posted in this board (including child objects)
		/// </summary>
		public DateTime AverageCommentDateTime
		{
			get { return dataHolder.AverageCommentDateTime; }
			set { this.dataHolder.AverageCommentDateTime = value; }
		}
		/// <summary>
		/// When was the venue added to the system?
		/// </summary>
		public DateTime AddedDateTime
		{
			get { return dataHolder.AddedDateTime; }
			set { this.dataHolder.AddedDateTime = value; }
		}
		/// <summary>
		/// If true, only the venue owner may upload photos
		/// </summary>
		public bool NoPhotos
		{
			get { return dataHolder.NoPhotos; }
			set { this.dataHolder.NoPhotos = value; }
		}
		/// <summary>
		/// The email address of the admin contact for sorting spoters with guestlists
		/// </summary>
		public string AdminEmail
		{
			get { return dataHolder.AdminEmail; }
			set { this.dataHolder.AdminEmail = value; }
		}
		/// <summary>
		/// Is the description text or html?
		/// </summary>
		public bool IsDescriptionText
		{
			get { return dataHolder.IsDescriptionText; }
			set { this.dataHolder.IsDescriptionText = value; }
		}
		/// <summary>
		/// Has the venue been seen by an admin or not?
		/// </summary>
		public bool IsNew
		{
			get { return dataHolder.IsNew; }
			set { this.dataHolder.IsNew = value; }
		}
		/// <summary>
		/// If true, photos taken at this venue can't be ordered.
		/// </summary>
		public bool NoPrints
		{
			get { return dataHolder.NoPrints; }
			set { this.dataHolder.NoPrints = value; }
		}
		/// <summary>
		/// Should the description just have "\n" replaced with "&lt;br&gt;"? (This overrides IsDescriptionText)
		/// </summary>
		public bool IsDescriptionCleanHtml
		{
			get { return dataHolder.IsDescriptionCleanHtml; }
			set { this.dataHolder.IsDescriptionCleanHtml = value; }
		}
		/// <summary>
		/// Has the venue been recently edited?
		/// </summary>
		public bool IsEdited
		{
			get { return dataHolder.IsEdited; }
			set { this.dataHolder.IsEdited = value; }
		}
		/// <summary>
		/// Guid used to ensure duplicate venues don't get posted if the user refreshes the page after saving.
		/// </summary>
		public Guid DuplicateGuid
		{
			get { return dataHolder.DuplicateGuid; }
			set { this.dataHolder.DuplicateGuid = value; }
		}
		/// <summary>
		/// Does the venue host regular (monthly or more often) events?
		/// </summary>
		public bool RegularEvents
		{
			get { return dataHolder.RegularEvents; }
			set { this.dataHolder.RegularEvents = value; }
		}
		/// <summary>
		/// Unique name used in the url
		/// </summary>
		public string UrlName
		{
			get { return dataHolder.UrlName; }
			set { this.dataHolder.UrlName = value; }
		}
		/// <summary>
		/// Link to the promoter table
		/// </summary>
		public int PromoterK
		{
			get { return dataHolder.PromoterK; }
			set { this.dataHolder.PromoterK = value; }
		}
		/// <summary>
		/// State var used to reconstruct cropper when re-cropping
		/// </summary>
		public string PicState
		{
			get { return dataHolder.PicState; }
			set { this.dataHolder.PicState = value; }
		}
		/// <summary>
		/// The Photo that was used to create the Pic.
		/// </summary>
		public int PicPhotoK
		{
			get { return dataHolder.PicPhotoK; }
			set { this.dataHolder.PicPhotoK = value; }
		}
		/// <summary>
		/// The Misc that was used to create the Pic.
		/// </summary>
		public int PicMiscK
		{
			get { return dataHolder.PicMiscK; }
			set { this.dataHolder.PicMiscK = value; }
		}
		/// <summary>
		/// The url fragment - so that the url can be generated without accessing parent database records
		/// </summary>
		public string UrlFragment
		{
			get { return dataHolder.UrlFragment; }
			set { this.dataHolder.UrlFragment = value; }
		}
		/// <summary>
		/// The moderator that has been assigned to moderate this venue
		/// </summary>
		public int ModeratorUsrK
		{
			get { return dataHolder.ModeratorUsrK; }
			set { this.dataHolder.ModeratorUsrK = value; }
		}
		/// <summary>
		/// The total number of events at this venue
		/// </summary>
		public int TotalEvents
		{
			get { return dataHolder.TotalEvents; }
			set { this.dataHolder.TotalEvents = value; }
		}
		/// <summary>
		/// Has the promoter been confirmed?
		/// </summary>
		public int PromoterStatus
		{
			get { return dataHolder.PromoterStatus; }
			set { this.dataHolder.PromoterStatus = value; }
		}
		/// <summary>
		/// Is the Details plain html? - e.g. rendered outsite the yellow box?
		/// </summary>
		public bool DetailsPlain
		{
			get { return dataHolder.DetailsPlain; }
			set { this.dataHolder.DetailsPlain = value; }
		}
		/// <summary>
		/// Css to emit for the styled pages
		/// </summary>
		public string StyledCss
		{
			get { return dataHolder.StyledCss; }
			set { this.dataHolder.StyledCss = value; }
		}
		/// <summary>
		/// Xml to emit for the styled pages
		/// </summary>
		public string StyledXml
		{
			get { return dataHolder.StyledXml; }
			set { this.dataHolder.StyledXml = value; }
		}
		/// <summary>
		/// Latitude
		/// </summary>
		public double Lat
		{
			get { return dataHolder.Lat; }
			set { this.dataHolder.Lat = value; }
		}
		/// <summary>
		/// Longitude
		/// </summary>
		public double Lon
		{
			get { return dataHolder.Lon; }
			set { this.dataHolder.Lon = value; }
		}
		/// <summary>
		/// database-calculated HtmID based on Lat/Lon
		/// </summary>
		public long? HtmId
		{
			get { return dataHolder.HtmId; }
			set { this.dataHolder.HtmId = value; }
		}
		#endregion
		public Venue Venue
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new Venue(K);
					}
					else
					{
						bob = new Venue();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region VenueSet
	public partial class VenueSet : BobSet, IEnumerable<Venue>
	{
		public VenueSet(Query query) : base(query) { }

		public Venue this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new Venue(this);
					((Venue)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (Venue)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new VenueTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<Venue> ToList()
		{
			List<Venue> list = new List<Venue>();
			foreach (Venue item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<Venue> Members

		public new IEnumerator<Venue> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region VenueTableDef
	public class VenueTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "Venue";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "B5C142C8";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return Venue.GetColumnName((Venue.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.Venue;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return true;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return Venue.Columns.K;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			Venue.Columns c = (Venue.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case Venue.Columns.K: ColumnStore[i] = new ColumnDef(c, "K", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey | SqlColumnFlag.AutoNumber, null); break;
					case Venue.Columns.Name: ColumnStore[i] = new ColumnDef(c, "Name", SqlDbType.VarChar, 200, ""); break;
					case Venue.Columns.DetailsHtml: ColumnStore[i] = new ColumnDef(c, "DetailsHtml", SqlDbType.Text, ""); break;
					case Venue.Columns.Postcode: ColumnStore[i] = new ColumnDef(c, "Postcode", SqlDbType.VarChar, 10, ""); break;
					case Venue.Columns.PlaceK: ColumnStore[i] = new ColumnDef(c, "PlaceK", SqlDbType.Int, 0); break;
					case Venue.Columns.AdminNote: ColumnStore[i] = new ColumnDef(c, "AdminNote", SqlDbType.Text, ""); break;
					case Venue.Columns.Pic: ColumnStore[i] = new ColumnDef(c, "Pic", SqlDbType.UniqueIdentifier, Guid.Empty); break;
					case Venue.Columns.OverrideMapUrl: ColumnStore[i] = new ColumnDef(c, "OverrideMapUrl", SqlDbType.VarChar, 100, ""); break;
					case Venue.Columns.OwnerUsrK: ColumnStore[i] = new ColumnDef(c, "OwnerUsrK", SqlDbType.Int, 0); break;
					case Venue.Columns.PicNew: ColumnStore[i] = new ColumnDef(c, "PicNew", SqlDbType.UniqueIdentifier, Guid.Empty); break;
					case Venue.Columns.Capacity: ColumnStore[i] = new ColumnDef(c, "Capacity", SqlDbType.Int, 0); break;
					case Venue.Columns.TotalComments: ColumnStore[i] = new ColumnDef(c, "TotalComments", SqlDbType.Int, 0); break;
					case Venue.Columns.LastPost: ColumnStore[i] = new ColumnDef(c, "LastPost", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case Venue.Columns.AverageCommentDateTime: ColumnStore[i] = new ColumnDef(c, "AverageCommentDateTime", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case Venue.Columns.AddedDateTime: ColumnStore[i] = new ColumnDef(c, "AddedDateTime", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case Venue.Columns.NoPhotos: ColumnStore[i] = new ColumnDef(c, "NoPhotos", SqlDbType.Bit, false); break;
					case Venue.Columns.AdminEmail: ColumnStore[i] = new ColumnDef(c, "AdminEmail", SqlDbType.VarChar, ""); break;
					case Venue.Columns.IsDescriptionText: ColumnStore[i] = new ColumnDef(c, "IsDescriptionText", SqlDbType.Bit, false); break;
					case Venue.Columns.IsNew: ColumnStore[i] = new ColumnDef(c, "IsNew", SqlDbType.Bit, false); break;
					case Venue.Columns.NoPrints: ColumnStore[i] = new ColumnDef(c, "NoPrints", SqlDbType.Bit, false); break;
					case Venue.Columns.IsDescriptionCleanHtml: ColumnStore[i] = new ColumnDef(c, "IsDescriptionCleanHtml", SqlDbType.Bit, false); break;
					case Venue.Columns.IsEdited: ColumnStore[i] = new ColumnDef(c, "IsEdited", SqlDbType.Bit, false); break;
					case Venue.Columns.DuplicateGuid: ColumnStore[i] = new ColumnDef(c, "DuplicateGuid", SqlDbType.UniqueIdentifier, Guid.Empty); break;
					case Venue.Columns.RegularEvents: ColumnStore[i] = new ColumnDef(c, "RegularEvents", SqlDbType.Bit, false); break;
					case Venue.Columns.UrlName: ColumnStore[i] = new ColumnDef(c, "UrlName", SqlDbType.VarChar, 200, ""); break;
					case Venue.Columns.PromoterK: ColumnStore[i] = new ColumnDef(c, "PromoterK", SqlDbType.Int, 0); break;
					case Venue.Columns.PicState: ColumnStore[i] = new ColumnDef(c, "PicState", SqlDbType.VarChar, 100, ""); break;
					case Venue.Columns.PicPhotoK: ColumnStore[i] = new ColumnDef(c, "PicPhotoK", SqlDbType.Int, 0); break;
					case Venue.Columns.PicMiscK: ColumnStore[i] = new ColumnDef(c, "PicMiscK", SqlDbType.Int, 0); break;
					case Venue.Columns.UrlFragment: ColumnStore[i] = new ColumnDef(c, "UrlFragment", SqlDbType.VarChar, 255, ""); break;
					case Venue.Columns.ModeratorUsrK: ColumnStore[i] = new ColumnDef(c, "ModeratorUsrK", SqlDbType.Int, 0); break;
					case Venue.Columns.TotalEvents: ColumnStore[i] = new ColumnDef(c, "TotalEvents", SqlDbType.Int, 0); break;
					case Venue.Columns.PromoterStatus: ColumnStore[i] = new ColumnDef(c, "PromoterStatus", SqlDbType.Int, 0); break;
					case Venue.Columns.DetailsPlain: ColumnStore[i] = new ColumnDef(c, "DetailsPlain", SqlDbType.Bit, false); break;
					case Venue.Columns.StyledCss: ColumnStore[i] = new ColumnDef(c, "StyledCss", SqlDbType.Text, ""); break;
					case Venue.Columns.StyledXml: ColumnStore[i] = new ColumnDef(c, "StyledXml", SqlDbType.Text, ""); break;
					case Venue.Columns.Lat: ColumnStore[i] = new ColumnDef(c, "Lat", SqlDbType.Float, null); break;
					case Venue.Columns.Lon: ColumnStore[i] = new ColumnDef(c, "Lon", SqlDbType.Float, null); break;
					case Venue.Columns.HtmId: ColumnStore[i] = new ColumnDef(c, "HtmId", SqlDbType.BigInt, 8, SqlColumnFlag.IsComputed, null); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(Venue.Columns.K);
						InitColumn(Venue.Columns.Name);
						InitColumn(Venue.Columns.DetailsHtml);
						InitColumn(Venue.Columns.Postcode);
						InitColumn(Venue.Columns.PlaceK);
						InitColumn(Venue.Columns.AdminNote);
						InitColumn(Venue.Columns.Pic);
						InitColumn(Venue.Columns.OverrideMapUrl);
						InitColumn(Venue.Columns.OwnerUsrK);
						InitColumn(Venue.Columns.PicNew);
						InitColumn(Venue.Columns.Capacity);
						InitColumn(Venue.Columns.TotalComments);
						InitColumn(Venue.Columns.LastPost);
						InitColumn(Venue.Columns.AverageCommentDateTime);
						InitColumn(Venue.Columns.AddedDateTime);
						InitColumn(Venue.Columns.NoPhotos);
						InitColumn(Venue.Columns.AdminEmail);
						InitColumn(Venue.Columns.IsDescriptionText);
						InitColumn(Venue.Columns.IsNew);
						InitColumn(Venue.Columns.NoPrints);
						InitColumn(Venue.Columns.IsDescriptionCleanHtml);
						InitColumn(Venue.Columns.IsEdited);
						InitColumn(Venue.Columns.DuplicateGuid);
						InitColumn(Venue.Columns.RegularEvents);
						InitColumn(Venue.Columns.UrlName);
						InitColumn(Venue.Columns.PromoterK);
						InitColumn(Venue.Columns.PicState);
						InitColumn(Venue.Columns.PicPhotoK);
						InitColumn(Venue.Columns.PicMiscK);
						InitColumn(Venue.Columns.UrlFragment);
						InitColumn(Venue.Columns.ModeratorUsrK);
						InitColumn(Venue.Columns.TotalEvents);
						InitColumn(Venue.Columns.PromoterStatus);
						InitColumn(Venue.Columns.DetailsPlain);
						InitColumn(Venue.Columns.StyledCss);
						InitColumn(Venue.Columns.StyledXml);
						InitColumn(Venue.Columns.Lat);
						InitColumn(Venue.Columns.Lon);
						InitColumn(Venue.Columns.HtmId);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region Visit
	/// <summary>
	/// Stores information about a visit - guid from the cookie etc.
	/// </summary>
	public partial class Visit : Model.Entities.Visit, IBob, ISerializable
	{
		public Bob Bob {get; private set;}
		public object this[object columnEnum]
		{
			get	{ return Bob[columnEnum]; }
			set	{ Bob[columnEnum] = value; }
		}
		#region IsDirty
		public bool IsDirty(object columnEnum)
		{
			return this.Bob.IsDirty(columnEnum);
		}
		public bool IsDirty()
		{
			return this.Bob.IsDirty();
		}
		#endregion
		#region Update methods
		public int Update(){
			return Update(null);
		}
		public int Update(Transaction t)
		{
			BeforeUpdate(t);
			var result = this.Bob.Update(t);
			AfterUpdate(t);
			return result;
		}
		partial void BeforeUpdate(Transaction t);
		partial void AfterUpdate(Transaction t);
		#endregion

		#region Delete methods
		public void Delete(){
			Delete(null);
		}
		public void Delete(Transaction t)
		{
			BeforeDelete(t);
			this.Bob.Delete(t);
			AfterDelete(t);
		}
		partial void BeforeDelete(Transaction t);
		partial void AfterDelete(Transaction t);
		#endregion


		#region Initialise methods 
		internal void Initialise(BobSet bs, DataRow row)
		{
			this.Bob.Initialise(bs, row);
		}
		internal void Initialise(DataRow row)
		{
			this.Bob.Initialise(row);
			
		}
		#endregion
		#region ExtraSelectElementHolder 
		public Bobs.Bob.ExtraSelectElementHolder ExtraSelectElements
		{
			get { return this.Bob.ExtraSelectElements; }
			set	{ this.Bob.ExtraSelectElements = value; }
		}
		#endregion
		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Bob.GetObjectData(info, context);
		}

		
		#region Columns enum
		public enum Columns
		{
			/// <summary>
			/// The primary key
			/// </summary>
			K = 0x00670001,
			/// <summary>
			/// Guid stored in the cookie
			/// </summary>
			Guid = 0x00670002,
			/// <summary>
			/// Link to one user - the user was logged in. If nobody was logged in, it's set to 0.
			/// </summary>
			UsrK = 0x00670003,
			/// <summary>
			/// Number of DsiPage impressions
			/// </summary>
			Pages = 0x00670004,
			/// <summary>
			/// Number of comments posted
			/// </summary>
			Comments = 0x00670005,
			/// <summary>
			/// Number of live chat messages posted
			/// </summary>
			ChatMessages = 0x00670006,
			/// <summary>
			/// Total number of hits, including live chat impressions
			/// </summary>
			Hits = 0x00670007,
			/// <summary>
			/// Number of photos viewed (quick browser and photo pages)
			/// </summary>
			Photos = 0x00670008,
			/// <summary>
			/// Total number of top-banner clicks
			/// </summary>
			TopBannerClicks = 0x00670009,
			/// <summary>
			/// Total number of hotbox clicks
			/// </summary>
			HotboxClicks = 0x0067000a,
			/// <summary>
			/// Total number of photo-banner clicks
			/// </summary>
			PhotoBannerClicks = 0x0067000b,
			/// <summary>
			/// Date/time the first visit started
			/// </summary>
			DateTimeStart = 0x0067000c,
			/// <summary>
			/// Date/time the last hit was received (if next hit is within 15 mins, they are counted as the same visit)
			/// </summary>
			DateTimeLast = 0x0067000d,
			/// <summary>
			/// IP address of the first hit
			/// </summary>
			IpAddress = 0x0067000e,
			/// <summary>
			/// Is the guid newly issued? (if so, it's unique)
			/// </summary>
			IsNewGuid = 0x0067000f,
			/// <summary>
			/// Country looked up by IP address
			/// </summary>
			CountryK = 0x00670010,
			/// <summary>
			/// Is this visit from an external source?
			/// </summary>
			IsFromExternal = 0x00670011,
			/// <summary>
			/// External source tag
			/// </summary>
			ExternalTag = 0x00670012,
			/// <summary>
			/// Domain from which this request originated
			/// </summary>
			DomainK = 0x00670013,
			/// <summary>
			/// Is this visit from a Crawler bot
			/// </summary>
			IsCrawler = 0x00670014,
			/// <summary>
			/// The browser's UserAgent string
			/// </summary>
			UserAgent = 0x00670015,
		}
		#endregion
		public static string GetColumnName(Visit.Columns columnEnum)
		{
			switch (columnEnum)
			{
						case Visit.Columns.K: return "K";
						case Visit.Columns.Guid: return "Guid";
						case Visit.Columns.UsrK: return "UsrK";
						case Visit.Columns.Pages: return "Pages";
						case Visit.Columns.Comments: return "Comments";
						case Visit.Columns.ChatMessages: return "ChatMessages";
						case Visit.Columns.Hits: return "Hits";
						case Visit.Columns.Photos: return "Photos";
						case Visit.Columns.TopBannerClicks: return "TopBannerClicks";
						case Visit.Columns.HotboxClicks: return "HotboxClicks";
						case Visit.Columns.PhotoBannerClicks: return "PhotoBannerClicks";
						case Visit.Columns.DateTimeStart: return "DateTimeStart";
						case Visit.Columns.DateTimeLast: return "DateTimeLast";
						case Visit.Columns.IpAddress: return "IpAddress";
						case Visit.Columns.IsNewGuid: return "IsNewGuid";
						case Visit.Columns.CountryK: return "CountryK";
						case Visit.Columns.IsFromExternal: return "IsFromExternal";
						case Visit.Columns.ExternalTag: return "ExternalTag";
						case Visit.Columns.DomainK: return "DomainK";
						case Visit.Columns.IsCrawler: return "IsCrawler";
						case Visit.Columns.UserAgent: return "UserAgent";
						default: return "";
			}
		}

		public static bool DoesColumnCauseInvalidation(Visit.Columns columnEnum)
		{
			switch (columnEnum)
			{
																									default: return false;
			}
		}


		#region Common
 
		public Visit(SerializationInfo info, StreamingContext context) { this.Bob = new Bob(info, context);  }
		public Visit()
		{
			this.Bob = new Bob(Bobs.Tables.Defs.Visit);
		}
		public Visit(BobSet bs)
		{
			this.Bob = new Bob(bs.Table, bs);
		}
		public Visit(int VisitK, IBob Parent, object Column)
			: this()
		{
			Bob.GetBobFromParent(VisitK, Parent.Bob, Column, TablesEnum.Visit);
		}
		public Visit(int VisitK)
			: this()
		{
			Bob.GetBobFromPrimaryKey(VisitK);
		}
		#endregion

	}
	#endregion
	#region VisitTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct Bob class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.

	#region Visit
	/// <summary>
	/// Stores information about a visit - guid from the cookie etc.
	/// </summary>
	[Serializable]
	public partial class Visit 
	{
		
		#region Simple members
		/// <summary>
		/// The primary key
		/// </summary>
		public override int K
		{
			get { return (int)this[Visit.Columns.K] as int? ?? 0 ; }
			set { this[Visit.Columns.K] = value; }
		}
		/// <summary>
		/// Guid stored in the cookie
		/// </summary>
		public Guid	Guid
		{
			get{ return Cambro.Misc.Db.GuidConvertor(this[Visit.Columns.Guid]);}		
			set{ this[Visit.Columns.Guid] = new System.Data.SqlTypes.SqlGuid(value);}
		}
		/// <summary>
		/// Link to one user - the user was logged in. If nobody was logged in, it's set to 0.
		/// </summary>
		public override int UsrK
		{
			get { return (int)this[Visit.Columns.UsrK]; }
			set { this[Visit.Columns.UsrK] = value; }
		}
		/// <summary>
		/// Number of DsiPage impressions
		/// </summary>
		public override int Pages
		{
			get { return (int)this[Visit.Columns.Pages]; }
			set { this[Visit.Columns.Pages] = value; }
		}
		/// <summary>
		/// Number of comments posted
		/// </summary>
		public override int Comments
		{
			get { return (int)this[Visit.Columns.Comments]; }
			set { this[Visit.Columns.Comments] = value; }
		}
		/// <summary>
		/// Number of live chat messages posted
		/// </summary>
		public override int ChatMessages
		{
			get { return (int)this[Visit.Columns.ChatMessages]; }
			set { this[Visit.Columns.ChatMessages] = value; }
		}
		/// <summary>
		/// Total number of hits, including live chat impressions
		/// </summary>
		public override int Hits
		{
			get { return (int)this[Visit.Columns.Hits]; }
			set { this[Visit.Columns.Hits] = value; }
		}
		/// <summary>
		/// Number of photos viewed (quick browser and photo pages)
		/// </summary>
		public override int Photos
		{
			get { return (int)this[Visit.Columns.Photos]; }
			set { this[Visit.Columns.Photos] = value; }
		}
		/// <summary>
		/// Total number of top-banner clicks
		/// </summary>
		public override int TopBannerClicks
		{
			get { return (int)this[Visit.Columns.TopBannerClicks]; }
			set { this[Visit.Columns.TopBannerClicks] = value; }
		}
		/// <summary>
		/// Total number of hotbox clicks
		/// </summary>
		public override int HotboxClicks
		{
			get { return (int)this[Visit.Columns.HotboxClicks]; }
			set { this[Visit.Columns.HotboxClicks] = value; }
		}
		/// <summary>
		/// Total number of photo-banner clicks
		/// </summary>
		public override int PhotoBannerClicks
		{
			get { return (int)this[Visit.Columns.PhotoBannerClicks]; }
			set { this[Visit.Columns.PhotoBannerClicks] = value; }
		}
		/// <summary>
		/// Date/time the first visit started
		/// </summary>
		public override DateTime DateTimeStart
		{
			get { return (DateTime)this[Visit.Columns.DateTimeStart]; }
			set { this[Visit.Columns.DateTimeStart] = value; }
		}
		/// <summary>
		/// Date/time the last hit was received (if next hit is within 15 mins, they are counted as the same visit)
		/// </summary>
		public override DateTime DateTimeLast
		{
			get { return (DateTime)this[Visit.Columns.DateTimeLast]; }
			set { this[Visit.Columns.DateTimeLast] = value; }
		}
		/// <summary>
		/// IP address of the first hit
		/// </summary>
		public override string IpAddress
		{
			get { return (string)this[Visit.Columns.IpAddress]; }
			set { this[Visit.Columns.IpAddress] = value; }
		}
		/// <summary>
		/// Is the guid newly issued? (if so, it's unique)
		/// </summary>
		public override bool IsNewGuid
		{
			get { return (bool)this[Visit.Columns.IsNewGuid]; }
			set { this[Visit.Columns.IsNewGuid] = value; }
		}
		/// <summary>
		/// Country looked up by IP address
		/// </summary>
		public override int CountryK
		{
			get { return (int)this[Visit.Columns.CountryK]; }
			set { this[Visit.Columns.CountryK] = value; }
		}
		/// <summary>
		/// Is this visit from an external source?
		/// </summary>
		public override bool IsFromExternal
		{
			get { return (bool)this[Visit.Columns.IsFromExternal]; }
			set { this[Visit.Columns.IsFromExternal] = value; }
		}
		/// <summary>
		/// External source tag
		/// </summary>
		public override string ExternalTag
		{
			get { return (string)this[Visit.Columns.ExternalTag]; }
			set { this[Visit.Columns.ExternalTag] = value; }
		}
		/// <summary>
		/// Domain from which this request originated
		/// </summary>
		public override int DomainK
		{
			get { return (int)this[Visit.Columns.DomainK]; }
			set { this[Visit.Columns.DomainK] = value; }
		}
		/// <summary>
		/// Is this visit from a Crawler bot
		/// </summary>
		public override bool IsCrawler
		{
			get { return (bool)this[Visit.Columns.IsCrawler]; }
			set { this[Visit.Columns.IsCrawler] = value; }
		}
		/// <summary>
		/// The browser's UserAgent string
		/// </summary>
		public override string UserAgent
		{
			get { return (string)this[Visit.Columns.UserAgent]; }
			set { this[Visit.Columns.UserAgent] = value; }
		}
		#endregion

	}
	#endregion

	*/
	#endregion
}

namespace Bobs.ChildInterfaces
{
	public interface IHasChildVisits
	{
		CachedSqlSelect<Visit> ChildVisits();
		CachedSqlSelect<Visit> ChildVisits(Q where);
		CachedSqlSelect<Visit> ChildVisits(params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		CachedSqlSelect<Visit> ChildVisits(Q where, params KeyValuePair<object, OrderBy.OrderDirection>[] orderBy);
		
		
	}
}
namespace Bobs
{
	public partial class Visit 
		{
		}

	#region VisitDataHolderTemplate
	/*
	/// This class is automatically-generated from the database. The contents 
	/// should be copied into the correct DataHolder class and modified to suit. You'll 
	/// probably have to change some int types to enum's etc.
	#region VisitDataHolder
	/// <summary>
	/// Stores information about a visit - guid from the cookie etc.DataHolder
	/// </summary>
	[Serializable]
	public partial class VisitDataHolder : DataHolder<Visit>
	{
		Visit dataHolder;
		[NonSerializedAttribute] Visit bob;

		public VisitDataHolder()
		{
			this.dataHolder = new Visit();
		}
		
		void CopyValues(Visit source, Visit destination)
		{
			destination[Bobs.Visit.Columns.K] = source[Bobs.Visit.Columns.K];
			destination[Bobs.Visit.Columns.Guid] = source[Bobs.Visit.Columns.Guid];
			destination[Bobs.Visit.Columns.UsrK] = source[Bobs.Visit.Columns.UsrK];
			destination[Bobs.Visit.Columns.Pages] = source[Bobs.Visit.Columns.Pages];
			destination[Bobs.Visit.Columns.Comments] = source[Bobs.Visit.Columns.Comments];
			destination[Bobs.Visit.Columns.ChatMessages] = source[Bobs.Visit.Columns.ChatMessages];
			destination[Bobs.Visit.Columns.Hits] = source[Bobs.Visit.Columns.Hits];
			destination[Bobs.Visit.Columns.Photos] = source[Bobs.Visit.Columns.Photos];
			destination[Bobs.Visit.Columns.TopBannerClicks] = source[Bobs.Visit.Columns.TopBannerClicks];
			destination[Bobs.Visit.Columns.HotboxClicks] = source[Bobs.Visit.Columns.HotboxClicks];
			destination[Bobs.Visit.Columns.PhotoBannerClicks] = source[Bobs.Visit.Columns.PhotoBannerClicks];
			destination[Bobs.Visit.Columns.DateTimeStart] = source[Bobs.Visit.Columns.DateTimeStart];
			destination[Bobs.Visit.Columns.DateTimeLast] = source[Bobs.Visit.Columns.DateTimeLast];
			destination[Bobs.Visit.Columns.IpAddress] = source[Bobs.Visit.Columns.IpAddress];
			destination[Bobs.Visit.Columns.IsNewGuid] = source[Bobs.Visit.Columns.IsNewGuid];
			destination[Bobs.Visit.Columns.CountryK] = source[Bobs.Visit.Columns.CountryK];
			destination[Bobs.Visit.Columns.IsFromExternal] = source[Bobs.Visit.Columns.IsFromExternal];
			destination[Bobs.Visit.Columns.ExternalTag] = source[Bobs.Visit.Columns.ExternalTag];
			destination[Bobs.Visit.Columns.DomainK] = source[Bobs.Visit.Columns.DomainK];
			destination[Bobs.Visit.Columns.IsCrawler] = source[Bobs.Visit.Columns.IsCrawler];
			destination[Bobs.Visit.Columns.UserAgent] = source[Bobs.Visit.Columns.UserAgent];
		}
		
		public VisitDataHolder(Visit bob) : this()
		{
			CopyValues(bob, this.dataHolder);
		}

		#region Simple members
		/// <summary>
		/// The primary key
		/// </summary>
		public int K
		{
			get { return dataHolder.K; }
			set { this.dataHolder.K = value; }
		}
		/// <summary>
		/// Guid stored in the cookie
		/// </summary>
		public Guid Guid
		{
			get { return dataHolder.Guid; }
			set { this.dataHolder.Guid = value; }
		}
		/// <summary>
		/// Link to one user - the user was logged in. If nobody was logged in, it's set to 0.
		/// </summary>
		public int UsrK
		{
			get { return dataHolder.UsrK; }
			set { this.dataHolder.UsrK = value; }
		}
		/// <summary>
		/// Number of DsiPage impressions
		/// </summary>
		public int Pages
		{
			get { return dataHolder.Pages; }
			set { this.dataHolder.Pages = value; }
		}
		/// <summary>
		/// Number of comments posted
		/// </summary>
		public int Comments
		{
			get { return dataHolder.Comments; }
			set { this.dataHolder.Comments = value; }
		}
		/// <summary>
		/// Number of live chat messages posted
		/// </summary>
		public int ChatMessages
		{
			get { return dataHolder.ChatMessages; }
			set { this.dataHolder.ChatMessages = value; }
		}
		/// <summary>
		/// Total number of hits, including live chat impressions
		/// </summary>
		public int Hits
		{
			get { return dataHolder.Hits; }
			set { this.dataHolder.Hits = value; }
		}
		/// <summary>
		/// Number of photos viewed (quick browser and photo pages)
		/// </summary>
		public int Photos
		{
			get { return dataHolder.Photos; }
			set { this.dataHolder.Photos = value; }
		}
		/// <summary>
		/// Total number of top-banner clicks
		/// </summary>
		public int TopBannerClicks
		{
			get { return dataHolder.TopBannerClicks; }
			set { this.dataHolder.TopBannerClicks = value; }
		}
		/// <summary>
		/// Total number of hotbox clicks
		/// </summary>
		public int HotboxClicks
		{
			get { return dataHolder.HotboxClicks; }
			set { this.dataHolder.HotboxClicks = value; }
		}
		/// <summary>
		/// Total number of photo-banner clicks
		/// </summary>
		public int PhotoBannerClicks
		{
			get { return dataHolder.PhotoBannerClicks; }
			set { this.dataHolder.PhotoBannerClicks = value; }
		}
		/// <summary>
		/// Date/time the first visit started
		/// </summary>
		public DateTime DateTimeStart
		{
			get { return dataHolder.DateTimeStart; }
			set { this.dataHolder.DateTimeStart = value; }
		}
		/// <summary>
		/// Date/time the last hit was received (if next hit is within 15 mins, they are counted as the same visit)
		/// </summary>
		public DateTime DateTimeLast
		{
			get { return dataHolder.DateTimeLast; }
			set { this.dataHolder.DateTimeLast = value; }
		}
		/// <summary>
		/// IP address of the first hit
		/// </summary>
		public string IpAddress
		{
			get { return dataHolder.IpAddress; }
			set { this.dataHolder.IpAddress = value; }
		}
		/// <summary>
		/// Is the guid newly issued? (if so, it's unique)
		/// </summary>
		public bool IsNewGuid
		{
			get { return dataHolder.IsNewGuid; }
			set { this.dataHolder.IsNewGuid = value; }
		}
		/// <summary>
		/// Country looked up by IP address
		/// </summary>
		public int CountryK
		{
			get { return dataHolder.CountryK; }
			set { this.dataHolder.CountryK = value; }
		}
		/// <summary>
		/// Is this visit from an external source?
		/// </summary>
		public bool IsFromExternal
		{
			get { return dataHolder.IsFromExternal; }
			set { this.dataHolder.IsFromExternal = value; }
		}
		/// <summary>
		/// External source tag
		/// </summary>
		public string ExternalTag
		{
			get { return dataHolder.ExternalTag; }
			set { this.dataHolder.ExternalTag = value; }
		}
		/// <summary>
		/// Domain from which this request originated
		/// </summary>
		public int DomainK
		{
			get { return dataHolder.DomainK; }
			set { this.dataHolder.DomainK = value; }
		}
		/// <summary>
		/// Is this visit from a Crawler bot
		/// </summary>
		public bool IsCrawler
		{
			get { return dataHolder.IsCrawler; }
			set { this.dataHolder.IsCrawler = value; }
		}
		/// <summary>
		/// The browser's UserAgent string
		/// </summary>
		public string UserAgent
		{
			get { return dataHolder.UserAgent; }
			set { this.dataHolder.UserAgent = value; }
		}
		#endregion
		public Visit Visit
		{
			get
			{
				if (bob == null || dataHolder.IsDirty())
				{
					if (K > 0)
					{
						bob = new Visit(K);
					}
					else
					{
						bob = new Visit();
					}
					CopyValues(this.dataHolder, bob);
				}
				return bob;
			}
		}
	}
	#endregion
	*/

	#endregion
	#region VisitSet
	public partial class VisitSet : BobSet, IEnumerable<Visit>
	{
		public VisitSet(Query query) : base(query) { }

		public Visit this[int i]
		{
			get
			{
				if (BobCache[i] == null)
				{
					BobCache[i] = new Visit(this);
					((Visit)BobCache[i]).Initialise(DataSet.Tables[0].DefaultView[i].Row);
				}
				return (Visit)BobCache[i];
			}
		}

		public override void InitTable()
		{
			this.Table = new VisitTableDef();
		}

		public override object Current
		{
			get
			{
				return this[CurrentResultIndex];
			}
		}

		public override object GetFromIndex(int index)
		{
			return ((object)this[index]);
		}

		public List<Visit> ToList()
		{
			List<Visit> list = new List<Visit>();
			foreach (Visit item in (System.Collections.IEnumerable) this)
			{
				list.Add(item);
			}
			return list;
		}

		#region IEnumerable<Visit> Members

		public new IEnumerator<Visit> GetEnumerator()
		{
			return this.ToList().GetEnumerator();
		}

		#endregion

	}
	#endregion
	#region VisitTableDef
	public class VisitTableDef : TableDef
	{
		public override string TableName
		{
			get
			{
				return "Visit";
			}
		}

		public override string TableCacheKey
		{
			get
			{
				return "89BFB233";
			}
		}

		public override string ColumnName(object ColumnEnum)
		{
			return Visit.GetColumnName((Visit.Columns)ColumnEnum);
		}

		public override TablesEnum TableEnum
		{
			get
			{
				return TablesEnum.Visit;
			}
		}

		public override bool HasSinglePrimaryKey
		{
			get
			{
				return true;
			}
		}

		public override object SinglePrimaryKey
		{
			get
			{
				return Visit.Columns.K;
			}
		}

		#region InitColumn
		protected override void InitColumn(object ColumnEnum)
		{
			int i = (int)ColumnEnum;
			Visit.Columns c = (Visit.Columns)ColumnEnum;
			if (!IsSet[i])
			{
				switch (c)
				{
					case Visit.Columns.K: ColumnStore[i] = new ColumnDef(c, "K", SqlDbType.Int, 4, SqlColumnFlag.PrimaryKey | SqlColumnFlag.AutoNumber, null); break;
					case Visit.Columns.Guid: ColumnStore[i] = new ColumnDef(c, "Guid", SqlDbType.UniqueIdentifier, Guid.Empty); break;
					case Visit.Columns.UsrK: ColumnStore[i] = new ColumnDef(c, "UsrK", SqlDbType.Int, 0); break;
					case Visit.Columns.Pages: ColumnStore[i] = new ColumnDef(c, "Pages", SqlDbType.Int, 0); break;
					case Visit.Columns.Comments: ColumnStore[i] = new ColumnDef(c, "Comments", SqlDbType.Int, 0); break;
					case Visit.Columns.ChatMessages: ColumnStore[i] = new ColumnDef(c, "ChatMessages", SqlDbType.Int, 0); break;
					case Visit.Columns.Hits: ColumnStore[i] = new ColumnDef(c, "Hits", SqlDbType.Int, 0); break;
					case Visit.Columns.Photos: ColumnStore[i] = new ColumnDef(c, "Photos", SqlDbType.Int, 0); break;
					case Visit.Columns.TopBannerClicks: ColumnStore[i] = new ColumnDef(c, "TopBannerClicks", SqlDbType.Int, 0); break;
					case Visit.Columns.HotboxClicks: ColumnStore[i] = new ColumnDef(c, "HotboxClicks", SqlDbType.Int, 0); break;
					case Visit.Columns.PhotoBannerClicks: ColumnStore[i] = new ColumnDef(c, "PhotoBannerClicks", SqlDbType.Int, 0); break;
					case Visit.Columns.DateTimeStart: ColumnStore[i] = new ColumnDef(c, "DateTimeStart", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case Visit.Columns.DateTimeLast: ColumnStore[i] = new ColumnDef(c, "DateTimeLast", SqlDbType.DateTime, 16, DateTime.Parse("01/01/0001")); break;
					case Visit.Columns.IpAddress: ColumnStore[i] = new ColumnDef(c, "IpAddress", SqlDbType.VarChar, 15, ""); break;
					case Visit.Columns.IsNewGuid: ColumnStore[i] = new ColumnDef(c, "IsNewGuid", SqlDbType.Bit, false); break;
					case Visit.Columns.CountryK: ColumnStore[i] = new ColumnDef(c, "CountryK", SqlDbType.Int, 0); break;
					case Visit.Columns.IsFromExternal: ColumnStore[i] = new ColumnDef(c, "IsFromExternal", SqlDbType.Bit, false); break;
					case Visit.Columns.ExternalTag: ColumnStore[i] = new ColumnDef(c, "ExternalTag", SqlDbType.VarChar, ""); break;
					case Visit.Columns.DomainK: ColumnStore[i] = new ColumnDef(c, "DomainK", SqlDbType.Int, 0); break;
					case Visit.Columns.IsCrawler: ColumnStore[i] = new ColumnDef(c, "IsCrawler", SqlDbType.Bit, false); break;
					case Visit.Columns.UserAgent: ColumnStore[i] = new ColumnDef(c, "UserAgent", SqlDbType.VarChar, 400, null); break;
					default: throw new Exception("Column not found");
				}
				IsSet[i] = true;
			}
		}
		#endregion

		#region InitializeAllColumns
		protected override void InitializeAllColumns()
		{
			if (!IsAllSet)
			{
				lock (ColumnStore)
				{
					if (!IsAllSet)
					{
						InitColumn(Visit.Columns.K);
						InitColumn(Visit.Columns.Guid);
						InitColumn(Visit.Columns.UsrK);
						InitColumn(Visit.Columns.Pages);
						InitColumn(Visit.Columns.Comments);
						InitColumn(Visit.Columns.ChatMessages);
						InitColumn(Visit.Columns.Hits);
						InitColumn(Visit.Columns.Photos);
						InitColumn(Visit.Columns.TopBannerClicks);
						InitColumn(Visit.Columns.HotboxClicks);
						InitColumn(Visit.Columns.PhotoBannerClicks);
						InitColumn(Visit.Columns.DateTimeStart);
						InitColumn(Visit.Columns.DateTimeLast);
						InitColumn(Visit.Columns.IpAddress);
						InitColumn(Visit.Columns.IsNewGuid);
						InitColumn(Visit.Columns.CountryK);
						InitColumn(Visit.Columns.IsFromExternal);
						InitColumn(Visit.Columns.ExternalTag);
						InitColumn(Visit.Columns.DomainK);
						InitColumn(Visit.Columns.IsCrawler);
						InitColumn(Visit.Columns.UserAgent);
				
						IsAllSet = true;
					}
				}
			}
		}
		#endregion
		#region Columns
		public override ColumnData<ColumnDef> Columns
		{
			get
			{
				InitializeAllColumns();
				return ColumnStore;
			}
		}
		#endregion

	}
	#endregion

	#region stored procedures
	public static partial class StoredProcedures
	{
		public static partial class BannerServer
		{
			public static partial class Banner
			{
				public static partial class RecalculateTrafficLevelRelativeToMinuteOfDay
				{
					private static void ExecuteNonQuery(DateTime? useWeekStartingFromDate)
					{
						System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(global::Bobs.Vars.DefaultConnectionString);
						System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("[BannerServer.Banner.RecalculateTrafficLevelRelativeToMinuteOfDay]", conn);
						cmd.CommandType = System.Data.CommandType.StoredProcedure;
						cmd.Parameters.AddWithValue("@UseWeekStartingFromDate", useWeekStartingFromDate != null ? (object)useWeekStartingFromDate : DBNull.Value);
						try
						{
							conn.Open();
							cmd.ExecuteNonQuery();
						}
						finally
						{
							conn.Close();
						}
					}
					private static System.Data.DataTable ExecuteDataTable(DateTime? useWeekStartingFromDate)
					{
						System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(global::Bobs.Vars.DefaultConnectionString);
						System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("[BannerServer.Banner.RecalculateTrafficLevelRelativeToMinuteOfDay]", conn);
						cmd.CommandType = System.Data.CommandType.StoredProcedure;
						cmd.Parameters.AddWithValue("@UseWeekStartingFromDate", useWeekStartingFromDate != null ? (object)useWeekStartingFromDate : DBNull.Value);
						try
						{
							conn.Open();
							System.Data.DataTable dt = new DataTable();
						dt.Load(cmd.ExecuteReader(CommandBehavior.CloseConnection));
						return dt;
						}
						finally
						{
							conn.Close();
						}
					}
				}
			}
		}
		public static partial class Bobs
		{
			public static partial class BannerStat
			{
				public static partial class Log
				{
					private static void ExecuteNonQuery(int bannerK, DateTime? date, int hits, int uniqueVisitors, int clicks)
					{
						System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(global::Bobs.Vars.DefaultConnectionString);
						System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("[Bobs.BannerStat.Log]", conn);
						cmd.CommandType = System.Data.CommandType.StoredProcedure;
						cmd.Parameters.AddWithValue("@BannerK", bannerK != null ? (object)bannerK : DBNull.Value);
						cmd.Parameters.AddWithValue("@Date", date != null ? (object)date : DBNull.Value);
						cmd.Parameters.AddWithValue("@Hits", hits != null ? (object)hits : DBNull.Value);
						cmd.Parameters.AddWithValue("@UniqueVisitors", uniqueVisitors != null ? (object)uniqueVisitors : DBNull.Value);
						cmd.Parameters.AddWithValue("@Clicks", clicks != null ? (object)clicks : DBNull.Value);
						try
						{
							conn.Open();
							cmd.ExecuteNonQuery();
						}
						finally
						{
							conn.Close();
						}
					}
					private static System.Data.DataTable ExecuteDataTable(int bannerK, DateTime? date, int hits, int uniqueVisitors, int clicks)
					{
						System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(global::Bobs.Vars.DefaultConnectionString);
						System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("[Bobs.BannerStat.Log]", conn);
						cmd.CommandType = System.Data.CommandType.StoredProcedure;
						cmd.Parameters.AddWithValue("@BannerK", bannerK != null ? (object)bannerK : DBNull.Value);
						cmd.Parameters.AddWithValue("@Date", date != null ? (object)date : DBNull.Value);
						cmd.Parameters.AddWithValue("@Hits", hits != null ? (object)hits : DBNull.Value);
						cmd.Parameters.AddWithValue("@UniqueVisitors", uniqueVisitors != null ? (object)uniqueVisitors : DBNull.Value);
						cmd.Parameters.AddWithValue("@Clicks", clicks != null ? (object)clicks : DBNull.Value);
						try
						{
							conn.Open();
							System.Data.DataTable dt = new DataTable();
						dt.Load(cmd.ExecuteReader(CommandBehavior.CloseConnection));
						return dt;
						}
						finally
						{
							conn.Close();
						}
					}
				}
			}
			public static partial class Flyer
			{
				public static partial class LogView
				{
					private static void ExecuteNonQuery(int flyerK)
					{
						System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(global::Bobs.Vars.DefaultConnectionString);
						System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("[Bobs.Flyer.LogView]", conn);
						cmd.CommandType = System.Data.CommandType.StoredProcedure;
						cmd.Parameters.AddWithValue("@FlyerK", flyerK != null ? (object)flyerK : DBNull.Value);
						try
						{
							conn.Open();
							cmd.ExecuteNonQuery();
						}
						finally
						{
							conn.Close();
						}
					}
					private static System.Data.DataTable ExecuteDataTable(int flyerK)
					{
						System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(global::Bobs.Vars.DefaultConnectionString);
						System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("[Bobs.Flyer.LogView]", conn);
						cmd.CommandType = System.Data.CommandType.StoredProcedure;
						cmd.Parameters.AddWithValue("@FlyerK", flyerK != null ? (object)flyerK : DBNull.Value);
						try
						{
							conn.Open();
							System.Data.DataTable dt = new DataTable();
						dt.Load(cmd.ExecuteReader(CommandBehavior.CloseConnection));
						return dt;
						}
						finally
						{
							conn.Close();
						}
					}
				}
				public static partial class LogClick
				{
					private static void ExecuteNonQuery(int flyerK)
					{
						System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(global::Bobs.Vars.DefaultConnectionString);
						System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("[Bobs.Flyer.LogClick]", conn);
						cmd.CommandType = System.Data.CommandType.StoredProcedure;
						cmd.Parameters.AddWithValue("@FlyerK", flyerK != null ? (object)flyerK : DBNull.Value);
						try
						{
							conn.Open();
							cmd.ExecuteNonQuery();
						}
						finally
						{
							conn.Close();
						}
					}
					private static System.Data.DataTable ExecuteDataTable(int flyerK)
					{
						System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(global::Bobs.Vars.DefaultConnectionString);
						System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("[Bobs.Flyer.LogClick]", conn);
						cmd.CommandType = System.Data.CommandType.StoredProcedure;
						cmd.Parameters.AddWithValue("@FlyerK", flyerK != null ? (object)flyerK : DBNull.Value);
						try
						{
							conn.Open();
							System.Data.DataTable dt = new DataTable();
						dt.Load(cmd.ExecuteReader(CommandBehavior.CloseConnection));
						return dt;
						}
						finally
						{
							conn.Close();
						}
					}
				}
				public static partial class LogSend
				{
					private static void ExecuteNonQuery(int flyerK)
					{
						System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(global::Bobs.Vars.DefaultConnectionString);
						System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("[Bobs.Flyer.LogSend]", conn);
						cmd.CommandType = System.Data.CommandType.StoredProcedure;
						cmd.Parameters.AddWithValue("@FlyerK", flyerK != null ? (object)flyerK : DBNull.Value);
						try
						{
							conn.Open();
							cmd.ExecuteNonQuery();
						}
						finally
						{
							conn.Close();
						}
					}
					private static System.Data.DataTable ExecuteDataTable(int flyerK)
					{
						System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(global::Bobs.Vars.DefaultConnectionString);
						System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("[Bobs.Flyer.LogSend]", conn);
						cmd.CommandType = System.Data.CommandType.StoredProcedure;
						cmd.Parameters.AddWithValue("@FlyerK", flyerK != null ? (object)flyerK : DBNull.Value);
						try
						{
							conn.Open();
							System.Data.DataTable dt = new DataTable();
						dt.Load(cmd.ExecuteReader(CommandBehavior.CloseConnection));
						return dt;
						}
						finally
						{
							conn.Close();
						}
					}
				}
				public static partial class LogUnsubscribe
				{
					private static void ExecuteNonQuery(int flyerK)
					{
						System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(global::Bobs.Vars.DefaultConnectionString);
						System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("[Bobs.Flyer.LogUnsubscribe]", conn);
						cmd.CommandType = System.Data.CommandType.StoredProcedure;
						cmd.Parameters.AddWithValue("@FlyerK", flyerK != null ? (object)flyerK : DBNull.Value);
						try
						{
							conn.Open();
							cmd.ExecuteNonQuery();
						}
						finally
						{
							conn.Close();
						}
					}
					private static System.Data.DataTable ExecuteDataTable(int flyerK)
					{
						System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(global::Bobs.Vars.DefaultConnectionString);
						System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("[Bobs.Flyer.LogUnsubscribe]", conn);
						cmd.CommandType = System.Data.CommandType.StoredProcedure;
						cmd.Parameters.AddWithValue("@FlyerK", flyerK != null ? (object)flyerK : DBNull.Value);
						try
						{
							conn.Open();
							System.Data.DataTable dt = new DataTable();
						dt.Load(cmd.ExecuteReader(CommandBehavior.CloseConnection));
						return dt;
						}
						finally
						{
							conn.Close();
						}
					}
				}
			}
		}
		public static partial class Spatial
		{
			public static partial class Search
			{
				private static void ExecuteNonQuery(string tableName, string whereClause, string customVariableDeclarationSql, string orderBy, int firstRowIndex, int lastRowIndex, double north, double east, double south, double west)
				{
					System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(global::Bobs.Vars.DefaultConnectionString);
					System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("[Spatial.Search]", conn);
					cmd.CommandType = System.Data.CommandType.StoredProcedure;
					cmd.Parameters.AddWithValue("@TableName", tableName != null ? (object)tableName : DBNull.Value);
					cmd.Parameters.AddWithValue("@WhereClause", whereClause != null ? (object)whereClause : DBNull.Value);
					cmd.Parameters.AddWithValue("@CustomVariableDeclarationSql", customVariableDeclarationSql != null ? (object)customVariableDeclarationSql : DBNull.Value);
					cmd.Parameters.AddWithValue("@OrderBy", orderBy != null ? (object)orderBy : DBNull.Value);
					cmd.Parameters.AddWithValue("@FirstRowIndex", firstRowIndex != null ? (object)firstRowIndex : DBNull.Value);
					cmd.Parameters.AddWithValue("@LastRowIndex", lastRowIndex != null ? (object)lastRowIndex : DBNull.Value);
					cmd.Parameters.AddWithValue("@North", north != null ? (object)north : DBNull.Value);
					cmd.Parameters.AddWithValue("@East", east != null ? (object)east : DBNull.Value);
					cmd.Parameters.AddWithValue("@South", south != null ? (object)south : DBNull.Value);
					cmd.Parameters.AddWithValue("@West", west != null ? (object)west : DBNull.Value);
					try
					{
						conn.Open();
						cmd.ExecuteNonQuery();
					}
					finally
					{
						conn.Close();
					}
				}
				private static System.Data.DataTable ExecuteDataTable(string tableName, string whereClause, string customVariableDeclarationSql, string orderBy, int firstRowIndex, int lastRowIndex, double north, double east, double south, double west)
				{
					System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(global::Bobs.Vars.DefaultConnectionString);
					System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand("[Spatial.Search]", conn);
					cmd.CommandType = System.Data.CommandType.StoredProcedure;
					cmd.Parameters.AddWithValue("@TableName", tableName != null ? (object)tableName : DBNull.Value);
					cmd.Parameters.AddWithValue("@WhereClause", whereClause != null ? (object)whereClause : DBNull.Value);
					cmd.Parameters.AddWithValue("@CustomVariableDeclarationSql", customVariableDeclarationSql != null ? (object)customVariableDeclarationSql : DBNull.Value);
					cmd.Parameters.AddWithValue("@OrderBy", orderBy != null ? (object)orderBy : DBNull.Value);
					cmd.Parameters.AddWithValue("@FirstRowIndex", firstRowIndex != null ? (object)firstRowIndex : DBNull.Value);
					cmd.Parameters.AddWithValue("@LastRowIndex", lastRowIndex != null ? (object)lastRowIndex : DBNull.Value);
					cmd.Parameters.AddWithValue("@North", north != null ? (object)north : DBNull.Value);
					cmd.Parameters.AddWithValue("@East", east != null ? (object)east : DBNull.Value);
					cmd.Parameters.AddWithValue("@South", south != null ? (object)south : DBNull.Value);
					cmd.Parameters.AddWithValue("@West", west != null ? (object)west : DBNull.Value);
					try
					{
						conn.Open();
						System.Data.DataTable dt = new DataTable();
						dt.Load(cmd.ExecuteReader(CommandBehavior.CloseConnection));
						return dt;
					}
					finally
					{
						conn.Close();
					}
				}
			}
		}
	}
	#endregion

}
