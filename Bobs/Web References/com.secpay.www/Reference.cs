//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.42.
// 
#pragma warning disable 1591

namespace Spotted.com.secpay.www {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="SECCardServiceSoapBinding", Namespace="https://www.secpay.com/java-bin/services/SECCardService")]
    public partial class SECVPNService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback refundCardFullOperationCompleted;
        
        private System.Threading.SendOrPostCallback releaseCardFullOperationCompleted;
        
        private System.Threading.SendOrPostCallback repeatCardFullAddrOperationCompleted;
        
        private System.Threading.SendOrPostCallback repeatCardFullOperationCompleted;
        
        private System.Threading.SendOrPostCallback validateCardFullOperationCompleted;
        
        private System.Threading.SendOrPostCallback threeDSecureEnrolmentRequestOperationCompleted;
        
        private System.Threading.SendOrPostCallback threeDSecureAuthorisationRequestOperationCompleted;
        
        private System.Threading.SendOrPostCallback getReportOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public SECVPNService() {
            this.Url = global::Bobs.Properties.Settings.Default.Spotted_com_secpay_www_SECVPNService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event refundCardFullCompletedEventHandler refundCardFullCompleted;
        
        /// <remarks/>
        public event releaseCardFullCompletedEventHandler releaseCardFullCompleted;
        
        /// <remarks/>
        public event repeatCardFullAddrCompletedEventHandler repeatCardFullAddrCompleted;
        
        /// <remarks/>
        public event repeatCardFullCompletedEventHandler repeatCardFullCompleted;
        
        /// <remarks/>
        public event validateCardFullCompletedEventHandler validateCardFullCompleted;
        
        /// <remarks/>
        public event threeDSecureEnrolmentRequestCompletedEventHandler threeDSecureEnrolmentRequestCompleted;
        
        /// <remarks/>
        public event threeDSecureAuthorisationRequestCompletedEventHandler threeDSecureAuthorisationRequestCompleted;
        
        /// <remarks/>
        public event getReportCompletedEventHandler getReportCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://secvpn.secpay.com", ResponseNamespace="https://www.secpay.com/java-bin/services/SECCardService")]
        [return: System.Xml.Serialization.SoapElementAttribute("refundCardFullReturn")]
        public string refundCardFull(string mid, string vpn_pswd, string trans_id, string amount, string remote_pswd, string new_trans_id) {
            object[] results = this.Invoke("refundCardFull", new object[] {
                        mid,
                        vpn_pswd,
                        trans_id,
                        amount,
                        remote_pswd,
                        new_trans_id});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void refundCardFullAsync(string mid, string vpn_pswd, string trans_id, string amount, string remote_pswd, string new_trans_id) {
            this.refundCardFullAsync(mid, vpn_pswd, trans_id, amount, remote_pswd, new_trans_id, null);
        }
        
        /// <remarks/>
        public void refundCardFullAsync(string mid, string vpn_pswd, string trans_id, string amount, string remote_pswd, string new_trans_id, object userState) {
            if ((this.refundCardFullOperationCompleted == null)) {
                this.refundCardFullOperationCompleted = new System.Threading.SendOrPostCallback(this.OnrefundCardFullOperationCompleted);
            }
            this.InvokeAsync("refundCardFull", new object[] {
                        mid,
                        vpn_pswd,
                        trans_id,
                        amount,
                        remote_pswd,
                        new_trans_id}, this.refundCardFullOperationCompleted, userState);
        }
        
        private void OnrefundCardFullOperationCompleted(object arg) {
            if ((this.refundCardFullCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.refundCardFullCompleted(this, new refundCardFullCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://secvpn.secpay.com", ResponseNamespace="https://www.secpay.com/java-bin/services/SECCardService")]
        [return: System.Xml.Serialization.SoapElementAttribute("releaseCardFullReturn")]
        public string releaseCardFull(string mid, string vpn_pswd, string trans_id, string amount, string remote_pswd, string new_trans_id) {
            object[] results = this.Invoke("releaseCardFull", new object[] {
                        mid,
                        vpn_pswd,
                        trans_id,
                        amount,
                        remote_pswd,
                        new_trans_id});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void releaseCardFullAsync(string mid, string vpn_pswd, string trans_id, string amount, string remote_pswd, string new_trans_id) {
            this.releaseCardFullAsync(mid, vpn_pswd, trans_id, amount, remote_pswd, new_trans_id, null);
        }
        
        /// <remarks/>
        public void releaseCardFullAsync(string mid, string vpn_pswd, string trans_id, string amount, string remote_pswd, string new_trans_id, object userState) {
            if ((this.releaseCardFullOperationCompleted == null)) {
                this.releaseCardFullOperationCompleted = new System.Threading.SendOrPostCallback(this.OnreleaseCardFullOperationCompleted);
            }
            this.InvokeAsync("releaseCardFull", new object[] {
                        mid,
                        vpn_pswd,
                        trans_id,
                        amount,
                        remote_pswd,
                        new_trans_id}, this.releaseCardFullOperationCompleted, userState);
        }
        
        private void OnreleaseCardFullOperationCompleted(object arg) {
            if ((this.releaseCardFullCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.releaseCardFullCompleted(this, new releaseCardFullCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://secvpn.secpay.com", ResponseNamespace="https://www.secpay.com/java-bin/services/SECCardService")]
        [return: System.Xml.Serialization.SoapElementAttribute("repeatCardFullAddrReturn")]
        public string repeatCardFullAddr(string mid, string vpn_pswd, string trans_id, string amount, string remote_pswd, string new_trans_id, string exp_date, string order, string bill, string ship, string options) {
            object[] results = this.Invoke("repeatCardFullAddr", new object[] {
                        mid,
                        vpn_pswd,
                        trans_id,
                        amount,
                        remote_pswd,
                        new_trans_id,
                        exp_date,
                        order,
                        bill,
                        ship,
                        options});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void repeatCardFullAddrAsync(string mid, string vpn_pswd, string trans_id, string amount, string remote_pswd, string new_trans_id, string exp_date, string order, string bill, string ship, string options) {
            this.repeatCardFullAddrAsync(mid, vpn_pswd, trans_id, amount, remote_pswd, new_trans_id, exp_date, order, bill, ship, options, null);
        }
        
        /// <remarks/>
        public void repeatCardFullAddrAsync(string mid, string vpn_pswd, string trans_id, string amount, string remote_pswd, string new_trans_id, string exp_date, string order, string bill, string ship, string options, object userState) {
            if ((this.repeatCardFullAddrOperationCompleted == null)) {
                this.repeatCardFullAddrOperationCompleted = new System.Threading.SendOrPostCallback(this.OnrepeatCardFullAddrOperationCompleted);
            }
            this.InvokeAsync("repeatCardFullAddr", new object[] {
                        mid,
                        vpn_pswd,
                        trans_id,
                        amount,
                        remote_pswd,
                        new_trans_id,
                        exp_date,
                        order,
                        bill,
                        ship,
                        options}, this.repeatCardFullAddrOperationCompleted, userState);
        }
        
        private void OnrepeatCardFullAddrOperationCompleted(object arg) {
            if ((this.repeatCardFullAddrCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.repeatCardFullAddrCompleted(this, new repeatCardFullAddrCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://secvpn.secpay.com", ResponseNamespace="https://www.secpay.com/java-bin/services/SECCardService")]
        [return: System.Xml.Serialization.SoapElementAttribute("repeatCardFullReturn")]
        public string repeatCardFull(string mid, string vpn_pswd, string trans_id, string amount, string remote_pswd, string new_trans_id, string exp_date, string order) {
            object[] results = this.Invoke("repeatCardFull", new object[] {
                        mid,
                        vpn_pswd,
                        trans_id,
                        amount,
                        remote_pswd,
                        new_trans_id,
                        exp_date,
                        order});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void repeatCardFullAsync(string mid, string vpn_pswd, string trans_id, string amount, string remote_pswd, string new_trans_id, string exp_date, string order) {
            this.repeatCardFullAsync(mid, vpn_pswd, trans_id, amount, remote_pswd, new_trans_id, exp_date, order, null);
        }
        
        /// <remarks/>
        public void repeatCardFullAsync(string mid, string vpn_pswd, string trans_id, string amount, string remote_pswd, string new_trans_id, string exp_date, string order, object userState) {
            if ((this.repeatCardFullOperationCompleted == null)) {
                this.repeatCardFullOperationCompleted = new System.Threading.SendOrPostCallback(this.OnrepeatCardFullOperationCompleted);
            }
            this.InvokeAsync("repeatCardFull", new object[] {
                        mid,
                        vpn_pswd,
                        trans_id,
                        amount,
                        remote_pswd,
                        new_trans_id,
                        exp_date,
                        order}, this.repeatCardFullOperationCompleted, userState);
        }
        
        private void OnrepeatCardFullOperationCompleted(object arg) {
            if ((this.repeatCardFullCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.repeatCardFullCompleted(this, new repeatCardFullCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://secvpn.secpay.com", ResponseNamespace="https://www.secpay.com/java-bin/services/SECCardService")]
        [return: System.Xml.Serialization.SoapElementAttribute("validateCardFullReturn")]
        public string validateCardFull(string mid, string vpn_pswd, string trans_id, string ip, string name, string card_number, string amount, string expiry_date, string issue_number, string start_date, string order, string shipping, string billing, string options) {
            object[] results = this.Invoke("validateCardFull", new object[] {
                        mid,
                        vpn_pswd,
                        trans_id,
                        ip,
                        name,
                        card_number,
                        amount,
                        expiry_date,
                        issue_number,
                        start_date,
                        order,
                        shipping,
                        billing,
                        options});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void validateCardFullAsync(string mid, string vpn_pswd, string trans_id, string ip, string name, string card_number, string amount, string expiry_date, string issue_number, string start_date, string order, string shipping, string billing, string options) {
            this.validateCardFullAsync(mid, vpn_pswd, trans_id, ip, name, card_number, amount, expiry_date, issue_number, start_date, order, shipping, billing, options, null);
        }
        
        /// <remarks/>
        public void validateCardFullAsync(string mid, string vpn_pswd, string trans_id, string ip, string name, string card_number, string amount, string expiry_date, string issue_number, string start_date, string order, string shipping, string billing, string options, object userState) {
            if ((this.validateCardFullOperationCompleted == null)) {
                this.validateCardFullOperationCompleted = new System.Threading.SendOrPostCallback(this.OnvalidateCardFullOperationCompleted);
            }
            this.InvokeAsync("validateCardFull", new object[] {
                        mid,
                        vpn_pswd,
                        trans_id,
                        ip,
                        name,
                        card_number,
                        amount,
                        expiry_date,
                        issue_number,
                        start_date,
                        order,
                        shipping,
                        billing,
                        options}, this.validateCardFullOperationCompleted, userState);
        }
        
        private void OnvalidateCardFullOperationCompleted(object arg) {
            if ((this.validateCardFullCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.validateCardFullCompleted(this, new validateCardFullCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://secvpn.secpay.com", ResponseNamespace="https://www.secpay.com/java-bin/services/SECCardService")]
        [return: System.Xml.Serialization.SoapElementAttribute("threeDSecureEnrolmentRequestReturn")]
        public string threeDSecureEnrolmentRequest(
                    string mid, 
                    string vpn_pswd, 
                    string trans_id, 
                    string ip, 
                    string name, 
                    string card_number, 
                    string amount, 
                    string expiry_date, 
                    string issue_number, 
                    string start_date, 
                    string order, 
                    string shipping, 
                    string billing, 
                    string options, 
                    string device_category, 
                    string accept_headers, 
                    string user_agent, 
                    string mpi_merchant_name, 
                    string mpi_merchant_url, 
                    string mpi_description, 
                    string purchaseRecurringFrequency, 
                    string purchaseRecurringExpiry, 
                    string purchaseInstallments) {
            object[] results = this.Invoke("threeDSecureEnrolmentRequest", new object[] {
                        mid,
                        vpn_pswd,
                        trans_id,
                        ip,
                        name,
                        card_number,
                        amount,
                        expiry_date,
                        issue_number,
                        start_date,
                        order,
                        shipping,
                        billing,
                        options,
                        device_category,
                        accept_headers,
                        user_agent,
                        mpi_merchant_name,
                        mpi_merchant_url,
                        mpi_description,
                        purchaseRecurringFrequency,
                        purchaseRecurringExpiry,
                        purchaseInstallments});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void threeDSecureEnrolmentRequestAsync(
                    string mid, 
                    string vpn_pswd, 
                    string trans_id, 
                    string ip, 
                    string name, 
                    string card_number, 
                    string amount, 
                    string expiry_date, 
                    string issue_number, 
                    string start_date, 
                    string order, 
                    string shipping, 
                    string billing, 
                    string options, 
                    string device_category, 
                    string accept_headers, 
                    string user_agent, 
                    string mpi_merchant_name, 
                    string mpi_merchant_url, 
                    string mpi_description, 
                    string purchaseRecurringFrequency, 
                    string purchaseRecurringExpiry, 
                    string purchaseInstallments) {
            this.threeDSecureEnrolmentRequestAsync(mid, vpn_pswd, trans_id, ip, name, card_number, amount, expiry_date, issue_number, start_date, order, shipping, billing, options, device_category, accept_headers, user_agent, mpi_merchant_name, mpi_merchant_url, mpi_description, purchaseRecurringFrequency, purchaseRecurringExpiry, purchaseInstallments, null);
        }
        
        /// <remarks/>
        public void threeDSecureEnrolmentRequestAsync(
                    string mid, 
                    string vpn_pswd, 
                    string trans_id, 
                    string ip, 
                    string name, 
                    string card_number, 
                    string amount, 
                    string expiry_date, 
                    string issue_number, 
                    string start_date, 
                    string order, 
                    string shipping, 
                    string billing, 
                    string options, 
                    string device_category, 
                    string accept_headers, 
                    string user_agent, 
                    string mpi_merchant_name, 
                    string mpi_merchant_url, 
                    string mpi_description, 
                    string purchaseRecurringFrequency, 
                    string purchaseRecurringExpiry, 
                    string purchaseInstallments, 
                    object userState) {
            if ((this.threeDSecureEnrolmentRequestOperationCompleted == null)) {
                this.threeDSecureEnrolmentRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnthreeDSecureEnrolmentRequestOperationCompleted);
            }
            this.InvokeAsync("threeDSecureEnrolmentRequest", new object[] {
                        mid,
                        vpn_pswd,
                        trans_id,
                        ip,
                        name,
                        card_number,
                        amount,
                        expiry_date,
                        issue_number,
                        start_date,
                        order,
                        shipping,
                        billing,
                        options,
                        device_category,
                        accept_headers,
                        user_agent,
                        mpi_merchant_name,
                        mpi_merchant_url,
                        mpi_description,
                        purchaseRecurringFrequency,
                        purchaseRecurringExpiry,
                        purchaseInstallments}, this.threeDSecureEnrolmentRequestOperationCompleted, userState);
        }
        
        private void OnthreeDSecureEnrolmentRequestOperationCompleted(object arg) {
            if ((this.threeDSecureEnrolmentRequestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.threeDSecureEnrolmentRequestCompleted(this, new threeDSecureEnrolmentRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://secvpn.secpay.com", ResponseNamespace="https://www.secpay.com/java-bin/services/SECCardService")]
        [return: System.Xml.Serialization.SoapElementAttribute("threeDSecureAuthorisationRequestReturn")]
        public string threeDSecureAuthorisationRequest(string mid, string vpn_pswd, string trans_id, string md, string paRes, string options) {
            object[] results = this.Invoke("threeDSecureAuthorisationRequest", new object[] {
                        mid,
                        vpn_pswd,
                        trans_id,
                        md,
                        paRes,
                        options});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void threeDSecureAuthorisationRequestAsync(string mid, string vpn_pswd, string trans_id, string md, string paRes, string options) {
            this.threeDSecureAuthorisationRequestAsync(mid, vpn_pswd, trans_id, md, paRes, options, null);
        }
        
        /// <remarks/>
        public void threeDSecureAuthorisationRequestAsync(string mid, string vpn_pswd, string trans_id, string md, string paRes, string options, object userState) {
            if ((this.threeDSecureAuthorisationRequestOperationCompleted == null)) {
                this.threeDSecureAuthorisationRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnthreeDSecureAuthorisationRequestOperationCompleted);
            }
            this.InvokeAsync("threeDSecureAuthorisationRequest", new object[] {
                        mid,
                        vpn_pswd,
                        trans_id,
                        md,
                        paRes,
                        options}, this.threeDSecureAuthorisationRequestOperationCompleted, userState);
        }
        
        private void OnthreeDSecureAuthorisationRequestOperationCompleted(object arg) {
            if ((this.threeDSecureAuthorisationRequestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.threeDSecureAuthorisationRequestCompleted(this, new threeDSecureAuthorisationRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://secvpn.secpay.com", ResponseNamespace="https://www.secpay.com/java-bin/services/SECCardService")]
        [return: System.Xml.Serialization.SoapElementAttribute("getReportReturn")]
        public string getReport(string mid, string vpn_pswd, string remote_pswd, string report_type, string cond_type, string condition, string currency, string predicate, bool html, bool showErrs) {
            object[] results = this.Invoke("getReport", new object[] {
                        mid,
                        vpn_pswd,
                        remote_pswd,
                        report_type,
                        cond_type,
                        condition,
                        currency,
                        predicate,
                        html,
                        showErrs});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getReportAsync(string mid, string vpn_pswd, string remote_pswd, string report_type, string cond_type, string condition, string currency, string predicate, bool html, bool showErrs) {
            this.getReportAsync(mid, vpn_pswd, remote_pswd, report_type, cond_type, condition, currency, predicate, html, showErrs, null);
        }
        
        /// <remarks/>
        public void getReportAsync(string mid, string vpn_pswd, string remote_pswd, string report_type, string cond_type, string condition, string currency, string predicate, bool html, bool showErrs, object userState) {
            if ((this.getReportOperationCompleted == null)) {
                this.getReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetReportOperationCompleted);
            }
            this.InvokeAsync("getReport", new object[] {
                        mid,
                        vpn_pswd,
                        remote_pswd,
                        report_type,
                        cond_type,
                        condition,
                        currency,
                        predicate,
                        html,
                        showErrs}, this.getReportOperationCompleted, userState);
        }
        
        private void OngetReportOperationCompleted(object arg) {
            if ((this.getReportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getReportCompleted(this, new getReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void refundCardFullCompletedEventHandler(object sender, refundCardFullCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class refundCardFullCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal refundCardFullCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void releaseCardFullCompletedEventHandler(object sender, releaseCardFullCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class releaseCardFullCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal releaseCardFullCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void repeatCardFullAddrCompletedEventHandler(object sender, repeatCardFullAddrCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class repeatCardFullAddrCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal repeatCardFullAddrCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void repeatCardFullCompletedEventHandler(object sender, repeatCardFullCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class repeatCardFullCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal repeatCardFullCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void validateCardFullCompletedEventHandler(object sender, validateCardFullCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class validateCardFullCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal validateCardFullCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void threeDSecureEnrolmentRequestCompletedEventHandler(object sender, threeDSecureEnrolmentRequestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class threeDSecureEnrolmentRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal threeDSecureEnrolmentRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void threeDSecureAuthorisationRequestCompletedEventHandler(object sender, threeDSecureAuthorisationRequestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class threeDSecureAuthorisationRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal threeDSecureAuthorisationRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void getReportCompletedEventHandler(object sender, getReportCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591
