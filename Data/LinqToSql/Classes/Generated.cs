 
 
 
 
 
using System.Linq;
using System.Reflection;
#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the LINQ to SQL template for T4 (LTSTT4) v0.2 
//     Generated at 08/06/2012 11:05:38
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace LinqToSql.Classes
{
	using System;
	using System.ComponentModel;
	using System.Data.Linq;
	using System.Data.Linq.Mapping;

	[DatabaseAttribute(Name=@"db_spotted_dbrophy_dontstayin")]
	public partial class DbSpottedDataContext : DataContext
	{
		private static MappingSource mappingSource = new AttributeMappingSource();
		
		#region Extensibility Method Definitions
		partial void OnCreated();
		partial void InsertAbuse(Abuse instance);
		partial void UpdateAbuse(Abuse instance);
		partial void DeleteAbuse(Abuse instance);
		partial void InsertAdmin(Admin instance);
		partial void UpdateAdmin(Admin instance);
		partial void DeleteAdmin(Admin instance);
		partial void InsertArticle(Article instance);
		partial void UpdateArticle(Article instance);
		partial void DeleteArticle(Article instance);
		partial void InsertBacardiEmail(BacardiEmail instance);
		partial void UpdateBacardiEmail(BacardiEmail instance);
		partial void DeleteBacardiEmail(BacardiEmail instance);
		partial void InsertBankExport(BankExport instance);
		partial void UpdateBankExport(BankExport instance);
		partial void DeleteBankExport(BankExport instance);
		partial void InsertBanner(Banner instance);
		partial void UpdateBanner(Banner instance);
		partial void DeleteBanner(Banner instance);
		partial void InsertBannerFolder(BannerFolder instance);
		partial void UpdateBannerFolder(BannerFolder instance);
		partial void DeleteBannerFolder(BannerFolder instance);
		partial void InsertBannerMusicType(BannerMusicType instance);
		partial void UpdateBannerMusicType(BannerMusicType instance);
		partial void DeleteBannerMusicType(BannerMusicType instance);
		partial void InsertBannerPlace(BannerPlace instance);
		partial void UpdateBannerPlace(BannerPlace instance);
		partial void DeleteBannerPlace(BannerPlace instance);
		partial void InsertBannerStat(BannerStat instance);
		partial void UpdateBannerStat(BannerStat instance);
		partial void DeleteBannerStat(BannerStat instance);
		partial void InsertBinRange(BinRange instance);
		partial void UpdateBinRange(BinRange instance);
		partial void DeleteBinRange(BinRange instance);
		partial void InsertBrand(Brand instance);
		partial void UpdateBrand(Brand instance);
		partial void DeleteBrand(Brand instance);
		partial void InsertBuddy(Buddy instance);
		partial void UpdateBuddy(Buddy instance);
		partial void DeleteBuddy(Buddy instance);
		partial void InsertCampaignCredit(CampaignCredit instance);
		partial void UpdateCampaignCredit(CampaignCredit instance);
		partial void DeleteCampaignCredit(CampaignCredit instance);
		partial void InsertChat(Chat instance);
		partial void UpdateChat(Chat instance);
		partial void DeleteChat(Chat instance);
		partial void InsertChatMessage(ChatMessage instance);
		partial void UpdateChatMessage(ChatMessage instance);
		partial void DeleteChatMessage(ChatMessage instance);
		partial void InsertClubDetails(ClubDetails instance);
		partial void UpdateClubDetails(ClubDetails instance);
		partial void DeleteClubDetails(ClubDetails instance);
		partial void InsertComment(Comment instance);
		partial void UpdateComment(Comment instance);
		partial void DeleteComment(Comment instance);
		partial void InsertCommentAlert(CommentAlert instance);
		partial void UpdateCommentAlert(CommentAlert instance);
		partial void DeleteCommentAlert(CommentAlert instance);
		partial void InsertComp(Comp instance);
		partial void UpdateComp(Comp instance);
		partial void DeleteComp(Comp instance);
		partial void InsertCompEntry(CompEntry instance);
		partial void UpdateCompEntry(CompEntry instance);
		partial void DeleteCompEntry(CompEntry instance);
		partial void InsertCountry(Country instance);
		partial void UpdateCountry(Country instance);
		partial void DeleteCountry(Country instance);
		partial void InsertDemographics(Demographics instance);
		partial void UpdateDemographics(Demographics instance);
		partial void DeleteDemographics(Demographics instance);
		partial void InsertDomain(Domain instance);
		partial void UpdateDomain(Domain instance);
		partial void DeleteDomain(Domain instance);
		partial void InsertDomainStats(DomainStats instance);
		partial void UpdateDomainStats(DomainStats instance);
		partial void DeleteDomainStats(DomainStats instance);
		partial void InsertDonationIcon(DonationIcon instance);
		partial void UpdateDonationIcon(DonationIcon instance);
		partial void DeleteDonationIcon(DonationIcon instance);
		partial void InsertEvent(Event instance);
		partial void UpdateEvent(Event instance);
		partial void DeleteEvent(Event instance);
		partial void InsertEventBrand(EventBrand instance);
		partial void UpdateEventBrand(EventBrand instance);
		partial void DeleteEventBrand(EventBrand instance);
		partial void InsertEventMusicType(EventMusicType instance);
		partial void UpdateEventMusicType(EventMusicType instance);
		partial void DeleteEventMusicType(EventMusicType instance);
		partial void InsertEventPromoter(EventPromoter instance);
		partial void UpdateEventPromoter(EventPromoter instance);
		partial void DeleteEventPromoter(EventPromoter instance);
		partial void InsertFacebookPost(FacebookPost instance);
		partial void UpdateFacebookPost(FacebookPost instance);
		partial void DeleteFacebookPost(FacebookPost instance);
		partial void InsertFiat500Entry(Fiat500Entry instance);
		partial void UpdateFiat500Entry(Fiat500Entry instance);
		partial void DeleteFiat500Entry(Fiat500Entry instance);
		partial void InsertFlyer(Flyer instance);
		partial void UpdateFlyer(Flyer instance);
		partial void DeleteFlyer(Flyer instance);
		partial void InsertGallery(Gallery instance);
		partial void UpdateGallery(Gallery instance);
		partial void DeleteGallery(Gallery instance);
		partial void InsertGalleryUsr(GalleryUsr instance);
		partial void UpdateGalleryUsr(GalleryUsr instance);
		partial void DeleteGalleryUsr(GalleryUsr instance);
		partial void InsertGlobal(Global instance);
		partial void UpdateGlobal(Global instance);
		partial void DeleteGlobal(Global instance);
		partial void InsertGroup(Group instance);
		partial void UpdateGroup(Group instance);
		partial void DeleteGroup(Group instance);
		partial void InsertGroupEvent(GroupEvent instance);
		partial void UpdateGroupEvent(GroupEvent instance);
		partial void DeleteGroupEvent(GroupEvent instance);
		partial void InsertGroupPhoto(GroupPhoto instance);
		partial void UpdateGroupPhoto(GroupPhoto instance);
		partial void DeleteGroupPhoto(GroupPhoto instance);
		partial void InsertGroupUsr(GroupUsr instance);
		partial void UpdateGroupUsr(GroupUsr instance);
		partial void DeleteGroupUsr(GroupUsr instance);
		partial void InsertGuestlistCredit(GuestlistCredit instance);
		partial void UpdateGuestlistCredit(GuestlistCredit instance);
		partial void DeleteGuestlistCredit(GuestlistCredit instance);
		partial void InsertHit(Hit instance);
		partial void UpdateHit(Hit instance);
		partial void DeleteHit(Hit instance);
		partial void InsertHitView(HitView instance);
		partial void UpdateHitView(HitView instance);
		partial void DeleteHitView(HitView instance);
		partial void InsertIncomingSm(IncomingSm instance);
		partial void UpdateIncomingSm(IncomingSm instance);
		partial void DeleteIncomingSm(IncomingSm instance);
		partial void InsertInsertionOrder(InsertionOrder instance);
		partial void UpdateInsertionOrder(InsertionOrder instance);
		partial void DeleteInsertionOrder(InsertionOrder instance);
		partial void InsertInsertionOrderItem(InsertionOrderItem instance);
		partial void UpdateInsertionOrderItem(InsertionOrderItem instance);
		partial void DeleteInsertionOrderItem(InsertionOrderItem instance);
		partial void InsertInvoice(Invoice instance);
		partial void UpdateInvoice(Invoice instance);
		partial void DeleteInvoice(Invoice instance);
		partial void InsertInvoiceCredit(InvoiceCredit instance);
		partial void UpdateInvoiceCredit(InvoiceCredit instance);
		partial void DeleteInvoiceCredit(InvoiceCredit instance);
		partial void InsertInvoiceItem(InvoiceItem instance);
		partial void UpdateInvoiceItem(InvoiceItem instance);
		partial void DeleteInvoiceItem(InvoiceItem instance);
		partial void InsertInvoiceTransfer(InvoiceTransfer instance);
		partial void UpdateInvoiceTransfer(InvoiceTransfer instance);
		partial void DeleteInvoiceTransfer(InvoiceTransfer instance);
		partial void InsertIpCountry(IpCountry instance);
		partial void UpdateIpCountry(IpCountry instance);
		partial void DeleteIpCountry(IpCountry instance);
		partial void InsertLog(Log instance);
		partial void UpdateLog(Log instance);
		partial void DeleteLog(Log instance);
		partial void InsertLogPageTime(LogPageTime instance);
		partial void UpdateLogPageTime(LogPageTime instance);
		partial void DeleteLogPageTime(LogPageTime instance);
		partial void InsertLol(Lol instance);
		partial void UpdateLol(Lol instance);
		partial void DeleteLol(Lol instance);
		partial void InsertMisc(Misc instance);
		partial void UpdateMisc(Misc instance);
		partial void DeleteMisc(Misc instance);
		partial void InsertMixmagEntry(MixmagEntry instance);
		partial void UpdateMixmagEntry(MixmagEntry instance);
		partial void DeleteMixmagEntry(MixmagEntry instance);
		partial void InsertMixmagGreatestDj(MixmagGreatestDj instance);
		partial void UpdateMixmagGreatestDj(MixmagGreatestDj instance);
		partial void DeleteMixmagGreatestDj(MixmagGreatestDj instance);
		partial void InsertMixmagGreatestVote(MixmagGreatestVote instance);
		partial void UpdateMixmagGreatestVote(MixmagGreatestVote instance);
		partial void DeleteMixmagGreatestVote(MixmagGreatestVote instance);
		partial void InsertMixmagIssue(MixmagIssue instance);
		partial void UpdateMixmagIssue(MixmagIssue instance);
		partial void DeleteMixmagIssue(MixmagIssue instance);
		partial void InsertMixmagRead(MixmagRead instance);
		partial void UpdateMixmagRead(MixmagRead instance);
		partial void DeleteMixmagRead(MixmagRead instance);
		partial void InsertMixmagSubscription(MixmagSubscription instance);
		partial void UpdateMixmagSubscription(MixmagSubscription instance);
		partial void DeleteMixmagSubscription(MixmagSubscription instance);
		partial void InsertMixmagVote(MixmagVote instance);
		partial void UpdateMixmagVote(MixmagVote instance);
		partial void DeleteMixmagVote(MixmagVote instance);
		partial void InsertMobile(Mobile instance);
		partial void UpdateMobile(Mobile instance);
		partial void DeleteMobile(Mobile instance);
		partial void InsertMusicType(MusicType instance);
		partial void UpdateMusicType(MusicType instance);
		partial void DeleteMusicType(MusicType instance);
		partial void InsertNovemberVisitor(NovemberVisitor instance);
		partial void UpdateNovemberVisitor(NovemberVisitor instance);
		partial void DeleteNovemberVisitor(NovemberVisitor instance);
		partial void InsertOutgoingSms(OutgoingSms instance);
		partial void UpdateOutgoingSms(OutgoingSms instance);
		partial void DeleteOutgoingSms(OutgoingSms instance);
		partial void InsertPageTime(PageTime instance);
		partial void UpdatePageTime(PageTime instance);
		partial void DeletePageTime(PageTime instance);
		partial void InsertPara(Para instance);
		partial void UpdatePara(Para instance);
		partial void DeletePara(Para instance);
		partial void InsertPhone(Phone instance);
		partial void UpdatePhone(Phone instance);
		partial void DeletePhone(Phone instance);
		partial void InsertPhoto(Photo instance);
		partial void UpdatePhoto(Photo instance);
		partial void DeletePhoto(Photo instance);
		partial void InsertPhotoReview(PhotoReview instance);
		partial void UpdatePhotoReview(PhotoReview instance);
		partial void DeletePhotoReview(PhotoReview instance);
		partial void InsertPlace(Place instance);
		partial void UpdatePlace(Place instance);
		partial void DeletePlace(Place instance);
		partial void InsertPrefs(Prefs instance);
		partial void UpdatePrefs(Prefs instance);
		partial void DeletePrefs(Prefs instance);
		partial void InsertPromoter(Promoter instance);
		partial void UpdatePromoter(Promoter instance);
		partial void DeletePromoter(Promoter instance);
		partial void InsertPromoterUsr(PromoterUsr instance);
		partial void UpdatePromoterUsr(PromoterUsr instance);
		partial void DeletePromoterUsr(PromoterUsr instance);
		partial void InsertRegion(Region instance);
		partial void UpdateRegion(Region instance);
		partial void DeleteRegion(Region instance);
		partial void InsertRoomPin(RoomPin instance);
		partial void UpdateRoomPin(RoomPin instance);
		partial void DeleteRoomPin(RoomPin instance);
		partial void InsertSalesCall(SalesCall instance);
		partial void UpdateSalesCall(SalesCall instance);
		partial void DeleteSalesCall(SalesCall instance);
		partial void InsertSalesCampaign(SalesCampaign instance);
		partial void UpdateSalesCampaign(SalesCampaign instance);
		partial void DeleteSalesCampaign(SalesCampaign instance);
		partial void InsertSalesStatusChange(SalesStatusChange instance);
		partial void UpdateSalesStatusChange(SalesStatusChange instance);
		partial void DeleteSalesStatusChange(SalesStatusChange instance);
		partial void InsertSetting(Setting instance);
		partial void UpdateSetting(Setting instance);
		partial void DeleteSetting(Setting instance);
		partial void InsertSpottedException(SpottedException instance);
		partial void UpdateSpottedException(SpottedException instance);
		partial void DeleteSpottedException(SpottedException instance);
		partial void InsertTag(Tag instance);
		partial void UpdateTag(Tag instance);
		partial void DeleteTag(Tag instance);
		partial void InsertTagPhoto(TagPhoto instance);
		partial void UpdateTagPhoto(TagPhoto instance);
		partial void DeleteTagPhoto(TagPhoto instance);
		partial void InsertTagPhotoHistory(TagPhotoHistory instance);
		partial void UpdateTagPhotoHistory(TagPhotoHistory instance);
		partial void DeleteTagPhotoHistory(TagPhotoHistory instance);
		partial void InsertTeamTarget(TeamTarget instance);
		partial void UpdateTeamTarget(TeamTarget instance);
		partial void DeleteTeamTarget(TeamTarget instance);
		partial void InsertTheme(Theme instance);
		partial void UpdateTheme(Theme instance);
		partial void DeleteTheme(Theme instance);
		partial void InsertThread(Thread instance);
		partial void UpdateThread(Thread instance);
		partial void DeleteThread(Thread instance);
		partial void InsertThreadUsr(ThreadUsr instance);
		partial void UpdateThreadUsr(ThreadUsr instance);
		partial void DeleteThreadUsr(ThreadUsr instance);
		partial void InsertTicket(Ticket instance);
		partial void UpdateTicket(Ticket instance);
		partial void DeleteTicket(Ticket instance);
		partial void InsertTicketPromoterEvent(TicketPromoterEvent instance);
		partial void UpdateTicketPromoterEvent(TicketPromoterEvent instance);
		partial void DeleteTicketPromoterEvent(TicketPromoterEvent instance);
		partial void InsertTicketRun(TicketRun instance);
		partial void UpdateTicketRun(TicketRun instance);
		partial void DeleteTicketRun(TicketRun instance);
		partial void InsertTrafficExceptionDay(TrafficExceptionDay instance);
		partial void UpdateTrafficExceptionDay(TrafficExceptionDay instance);
		partial void DeleteTrafficExceptionDay(TrafficExceptionDay instance);
		partial void InsertTrafficLevelRelativeToMinuteOfDay(TrafficLevelRelativeToMinuteOfDay instance);
		partial void UpdateTrafficLevelRelativeToMinuteOfDay(TrafficLevelRelativeToMinuteOfDay instance);
		partial void DeleteTrafficLevelRelativeToMinuteOfDay(TrafficLevelRelativeToMinuteOfDay instance);
		partial void InsertTransfer(Transfer instance);
		partial void UpdateTransfer(Transfer instance);
		partial void DeleteTransfer(Transfer instance);
		partial void InsertUsr(Usr instance);
		partial void UpdateUsr(Usr instance);
		partial void DeleteUsr(Usr instance);
		partial void InsertUsr_FacebookUid_Not_Null(Usr_FacebookUid_Not_Null instance);
		partial void UpdateUsr_FacebookUid_Not_Null(Usr_FacebookUid_Not_Null instance);
		partial void DeleteUsr_FacebookUid_Not_Null(Usr_FacebookUid_Not_Null instance);
		partial void InsertUsrDate(UsrDate instance);
		partial void UpdateUsrDate(UsrDate instance);
		partial void DeleteUsrDate(UsrDate instance);
		partial void InsertUsrDonationIcon(UsrDonationIcon instance);
		partial void UpdateUsrDonationIcon(UsrDonationIcon instance);
		partial void DeleteUsrDonationIcon(UsrDonationIcon instance);
		partial void InsertUsrEventAttended(UsrEventAttended instance);
		partial void UpdateUsrEventAttended(UsrEventAttended instance);
		partial void DeleteUsrEventAttended(UsrEventAttended instance);
		partial void InsertUsrEventGuestlist(UsrEventGuestlist instance);
		partial void UpdateUsrEventGuestlist(UsrEventGuestlist instance);
		partial void DeleteUsrEventGuestlist(UsrEventGuestlist instance);
		partial void InsertUsrMusicTypeFavourite(UsrMusicTypeFavourite instance);
		partial void UpdateUsrMusicTypeFavourite(UsrMusicTypeFavourite instance);
		partial void DeleteUsrMusicTypeFavourite(UsrMusicTypeFavourite instance);
		partial void InsertUsrPhotoFavourite(UsrPhotoFavourite instance);
		partial void UpdateUsrPhotoFavourite(UsrPhotoFavourite instance);
		partial void DeleteUsrPhotoFavourite(UsrPhotoFavourite instance);
		partial void InsertUsrPhotoMe(UsrPhotoMe instance);
		partial void UpdateUsrPhotoMe(UsrPhotoMe instance);
		partial void DeleteUsrPhotoMe(UsrPhotoMe instance);
		partial void InsertUsrPlaceVisit(UsrPlaceVisit instance);
		partial void UpdateUsrPlaceVisit(UsrPlaceVisit instance);
		partial void DeleteUsrPlaceVisit(UsrPlaceVisit instance);
		partial void InsertVenue(Venue instance);
		partial void UpdateVenue(Venue instance);
		partial void DeleteVenue(Venue instance);
		partial void InsertVisit(Visit instance);
		partial void UpdateVisit(Visit instance);
		partial void DeleteVisit(Visit instance);
		partial void InsertVisitView(VisitView instance);
		partial void UpdateVisitView(VisitView instance);
		partial void DeleteVisitView(VisitView instance);
		partial void InsertVw_index_list(Vw_index_list instance);
		partial void UpdateVw_index_list(Vw_index_list instance);
		partial void DeleteVw_index_list(Vw_index_list instance);
		#endregion
		
		#region Construction
		
		public DbSpottedDataContext(string connection) :
			base(connection, mappingSource) {
			OnCreated();
		}
		
		public DbSpottedDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource) {
			OnCreated();
		}
		
		public DbSpottedDataContext(string connection, MappingSource mappingSource) : 
			base(connection, mappingSource) {
			OnCreated();
		}
		
		public DbSpottedDataContext(System.Data.IDbConnection connection, MappingSource mappingSource) : 
			base(connection, mappingSource) {
			OnCreated();
		}
		#endregion
		
		#region Tables
		public Table<Abuse> Abuses { 
			get { return GetTable<Abuse>(); }
		}
		public Table<Admin> Admins { 
			get { return GetTable<Admin>(); }
		}
		public Table<Article> Articles { 
			get { return GetTable<Article>(); }
		}
		public Table<BacardiEmail> BacardiEmails { 
			get { return GetTable<BacardiEmail>(); }
		}
		public Table<BankExport> BankExports { 
			get { return GetTable<BankExport>(); }
		}
		public Table<Banner> Banners { 
			get { return GetTable<Banner>(); }
		}
		public Table<BannerFolder> BannerFolders { 
			get { return GetTable<BannerFolder>(); }
		}
		public Table<BannerMusicType> BannerMusicTypes { 
			get { return GetTable<BannerMusicType>(); }
		}
		public Table<BannerPlace> BannerPlaces { 
			get { return GetTable<BannerPlace>(); }
		}
		public Table<BannerStat> BannerStats { 
			get { return GetTable<BannerStat>(); }
		}
		public Table<BinRange> BinRanges { 
			get { return GetTable<BinRange>(); }
		}
		public Table<Brand> Brands { 
			get { return GetTable<Brand>(); }
		}
		public Table<Buddy> Buddies { 
			get { return GetTable<Buddy>(); }
		}
		public Table<CampaignCredit> CampaignCredits { 
			get { return GetTable<CampaignCredit>(); }
		}
		public Table<Chat> Chats { 
			get { return GetTable<Chat>(); }
		}
		public Table<ChatMessage> ChatMessages { 
			get { return GetTable<ChatMessage>(); }
		}
		public Table<ClubDetails> ClubDetails { 
			get { return GetTable<ClubDetails>(); }
		}
		public Table<Comment> Comments { 
			get { return GetTable<Comment>(); }
		}
		public Table<CommentAlert> CommentAlerts { 
			get { return GetTable<CommentAlert>(); }
		}
		public Table<Comp> Comps { 
			get { return GetTable<Comp>(); }
		}
		public Table<CompEntry> CompEntries { 
			get { return GetTable<CompEntry>(); }
		}
		public Table<Country> Countries { 
			get { return GetTable<Country>(); }
		}
		public Table<Demographics> Demographics { 
			get { return GetTable<Demographics>(); }
		}
		public Table<Domain> Domains { 
			get { return GetTable<Domain>(); }
		}
		public Table<DomainStats> DomainStats { 
			get { return GetTable<DomainStats>(); }
		}
		public Table<DonationIcon> DonationIcons { 
			get { return GetTable<DonationIcon>(); }
		}
		public Table<Event> Events { 
			get { return GetTable<Event>(); }
		}
		public Table<EventBrand> EventBrands { 
			get { return GetTable<EventBrand>(); }
		}
		public Table<EventMusicType> EventMusicTypes { 
			get { return GetTable<EventMusicType>(); }
		}
		public Table<EventPromoter> EventPromoters { 
			get { return GetTable<EventPromoter>(); }
		}
		public Table<FacebookPost> FacebookPosts { 
			get { return GetTable<FacebookPost>(); }
		}
		public Table<Fiat500Entry> Fiat500Entries { 
			get { return GetTable<Fiat500Entry>(); }
		}
		public Table<Flyer> Flyers { 
			get { return GetTable<Flyer>(); }
		}
		public Table<Gallery> Galleries { 
			get { return GetTable<Gallery>(); }
		}
		public Table<GalleryUsr> GalleryUsrs { 
			get { return GetTable<GalleryUsr>(); }
		}
		public Table<Global> Globals { 
			get { return GetTable<Global>(); }
		}
		public Table<Group> Groups { 
			get { return GetTable<Group>(); }
		}
		public Table<GroupEvent> GroupEvents { 
			get { return GetTable<GroupEvent>(); }
		}
		public Table<GroupPhoto> GroupPhotos { 
			get { return GetTable<GroupPhoto>(); }
		}
		public Table<GroupUsr> GroupUsrs { 
			get { return GetTable<GroupUsr>(); }
		}
		public Table<GuestlistCredit> GuestlistCredits { 
			get { return GetTable<GuestlistCredit>(); }
		}
		public Table<Hit> Hits { 
			get { return GetTable<Hit>(); }
		}
		public Table<HitView> HitViews { 
			get { return GetTable<HitView>(); }
		}
		public Table<IncomingSm> IncomingSms { 
			get { return GetTable<IncomingSm>(); }
		}
		public Table<InsertionOrder> InsertionOrders { 
			get { return GetTable<InsertionOrder>(); }
		}
		public Table<InsertionOrderItem> InsertionOrderItems { 
			get { return GetTable<InsertionOrderItem>(); }
		}
		public Table<Invoice> Invoices { 
			get { return GetTable<Invoice>(); }
		}
		public Table<InvoiceCredit> InvoiceCredits { 
			get { return GetTable<InvoiceCredit>(); }
		}
		public Table<InvoiceItem> InvoiceItems { 
			get { return GetTable<InvoiceItem>(); }
		}
		public Table<InvoiceTransfer> InvoiceTransfers { 
			get { return GetTable<InvoiceTransfer>(); }
		}
		public Table<IpCountry> IpCountries { 
			get { return GetTable<IpCountry>(); }
		}
		public Table<Log> Logs { 
			get { return GetTable<Log>(); }
		}
		public Table<LogPageTime> LogPageTimes { 
			get { return GetTable<LogPageTime>(); }
		}
		public Table<Lol> Lols { 
			get { return GetTable<Lol>(); }
		}
		public Table<Misc> Miscs { 
			get { return GetTable<Misc>(); }
		}
		public Table<MixmagEntry> MixmagEntries { 
			get { return GetTable<MixmagEntry>(); }
		}
		public Table<MixmagGreatestDj> MixmagGreatestDjs { 
			get { return GetTable<MixmagGreatestDj>(); }
		}
		public Table<MixmagGreatestVote> MixmagGreatestVotes { 
			get { return GetTable<MixmagGreatestVote>(); }
		}
		public Table<MixmagIssue> MixmagIssues { 
			get { return GetTable<MixmagIssue>(); }
		}
		public Table<MixmagRead> MixmagReads { 
			get { return GetTable<MixmagRead>(); }
		}
		public Table<MixmagSubscription> MixmagSubscriptions { 
			get { return GetTable<MixmagSubscription>(); }
		}
		public Table<MixmagVote> MixmagVotes { 
			get { return GetTable<MixmagVote>(); }
		}
		public Table<Mobile> Mobiles { 
			get { return GetTable<Mobile>(); }
		}
		public Table<MusicType> MusicTypes { 
			get { return GetTable<MusicType>(); }
		}
		public Table<NovemberVisitor> NovemberVisitors { 
			get { return GetTable<NovemberVisitor>(); }
		}
		public Table<OutgoingSms> OutgoingSms { 
			get { return GetTable<OutgoingSms>(); }
		}
		public Table<PageTime> PageTimes { 
			get { return GetTable<PageTime>(); }
		}
		public Table<Para> Paras { 
			get { return GetTable<Para>(); }
		}
		public Table<Phone> Phones { 
			get { return GetTable<Phone>(); }
		}
		public Table<Photo> Photos { 
			get { return GetTable<Photo>(); }
		}
		public Table<PhotoReview> PhotoReviews { 
			get { return GetTable<PhotoReview>(); }
		}
		public Table<Place> Places { 
			get { return GetTable<Place>(); }
		}
		public Table<Prefs> Prefs { 
			get { return GetTable<Prefs>(); }
		}
		public Table<Promoter> Promoters { 
			get { return GetTable<Promoter>(); }
		}
		public Table<PromoterUsr> PromoterUsrs { 
			get { return GetTable<PromoterUsr>(); }
		}
		public Table<Region> Regions { 
			get { return GetTable<Region>(); }
		}
		public Table<RoomPin> RoomPins { 
			get { return GetTable<RoomPin>(); }
		}
		public Table<SalesCall> SalesCalls { 
			get { return GetTable<SalesCall>(); }
		}
		public Table<SalesCampaign> SalesCampaigns { 
			get { return GetTable<SalesCampaign>(); }
		}
		public Table<SalesStatusChange> SalesStatusChanges { 
			get { return GetTable<SalesStatusChange>(); }
		}
		public Table<Setting> Settings { 
			get { return GetTable<Setting>(); }
		}
		public Table<SpottedException> SpottedExceptions { 
			get { return GetTable<SpottedException>(); }
		}
		public Table<Tag> Tags { 
			get { return GetTable<Tag>(); }
		}
		public Table<TagPhoto> TagPhotos { 
			get { return GetTable<TagPhoto>(); }
		}
		public Table<TagPhotoHistory> TagPhotoHistories { 
			get { return GetTable<TagPhotoHistory>(); }
		}
		public Table<TeamTarget> TeamTargets { 
			get { return GetTable<TeamTarget>(); }
		}
		public Table<Theme> Themes { 
			get { return GetTable<Theme>(); }
		}
		public Table<Thread> Threads { 
			get { return GetTable<Thread>(); }
		}
		public Table<ThreadUsr> ThreadUsrs { 
			get { return GetTable<ThreadUsr>(); }
		}
		public Table<Ticket> Tickets { 
			get { return GetTable<Ticket>(); }
		}
		public Table<TicketPromoterEvent> TicketPromoterEvents { 
			get { return GetTable<TicketPromoterEvent>(); }
		}
		public Table<TicketRun> TicketRuns { 
			get { return GetTable<TicketRun>(); }
		}
		public Table<TrafficExceptionDay> TrafficExceptionDays { 
			get { return GetTable<TrafficExceptionDay>(); }
		}
		public Table<TrafficLevelRelativeToMinuteOfDay> TrafficLevelRelativeToMinuteOfDays { 
			get { return GetTable<TrafficLevelRelativeToMinuteOfDay>(); }
		}
		public Table<Transfer> Transfers { 
			get { return GetTable<Transfer>(); }
		}
		public Table<Usr> Usrs { 
			get { return GetTable<Usr>(); }
		}
		public Table<Usr_FacebookUid_Not_Null> Usr_FacebookUid_Not_Nulls { 
			get { return GetTable<Usr_FacebookUid_Not_Null>(); }
		}
		public Table<UsrDate> UsrDates { 
			get { return GetTable<UsrDate>(); }
		}
		public Table<UsrDonationIcon> UsrDonationIcons { 
			get { return GetTable<UsrDonationIcon>(); }
		}
		public Table<UsrEventAttended> UsrEventAttendeds { 
			get { return GetTable<UsrEventAttended>(); }
		}
		public Table<UsrEventGuestlist> UsrEventGuestlists { 
			get { return GetTable<UsrEventGuestlist>(); }
		}
		public Table<UsrMusicTypeFavourite> UsrMusicTypeFavourites { 
			get { return GetTable<UsrMusicTypeFavourite>(); }
		}
		public Table<UsrPhotoFavourite> UsrPhotoFavourites { 
			get { return GetTable<UsrPhotoFavourite>(); }
		}
		public Table<UsrPhotoMe> UsrPhotoMes { 
			get { return GetTable<UsrPhotoMe>(); }
		}
		public Table<UsrPlaceVisit> UsrPlaceVisits { 
			get { return GetTable<UsrPlaceVisit>(); }
		}
		public Table<Venue> Venues { 
			get { return GetTable<Venue>(); }
		}
		public Table<Visit> Visits { 
			get { return GetTable<Visit>(); }
		}
		public Table<VisitView> VisitViews { 
			get { return GetTable<VisitView>(); }
		}
		public Table<Vw_index_list> Vw_index_lists { 
			get { return GetTable<Vw_index_list>(); }
		}
		#endregion

		[Function(Name="[dbo].[Bobs.BannerStat.Log]")]
		[return: Parameter(DbType="Int")]
		public int ___Bobs_BannerStat_Log_([Parameter(Name="BannerK", DbType="Int")] System.Nullable<int> bannerK, [Parameter(Name="Date", DbType="DateTime")] System.Nullable<System.DateTime> date, [Parameter(Name="Hits", DbType="Int")] System.Nullable<int> hits, [Parameter(Name="UniqueVisitors", DbType="Int")] System.Nullable<int> uniqueVisitors, [Parameter(Name="Clicks", DbType="Int")] System.Nullable<int> clicks)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), bannerK, date, hits, uniqueVisitors, clicks);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="[dbo].[Bobs.Flyer.LogClick]")]
		[return: Parameter(DbType="Int")]
		public int ___Bobs_Flyer_LogClick_([Parameter(Name="FlyerK", DbType="Int")] System.Nullable<int> flyerK)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), flyerK);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="[dbo].[Bobs.Flyer.LogSend]")]
		[return: Parameter(DbType="Int")]
		public int ___Bobs_Flyer_LogSend_([Parameter(Name="FlyerK", DbType="Int")] System.Nullable<int> flyerK)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), flyerK);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="[dbo].[Bobs.Flyer.LogUnsubscribe]")]
		[return: Parameter(DbType="Int")]
		public int ___Bobs_Flyer_LogUnsubscribe_([Parameter(Name="FlyerK", DbType="Int")] System.Nullable<int> flyerK)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), flyerK);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="[dbo].[Bobs.Flyer.LogView]")]
		[return: Parameter(DbType="Int")]
		public int ___Bobs_Flyer_LogView_([Parameter(Name="FlyerK", DbType="Int")] System.Nullable<int> flyerK)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), flyerK);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.fDistanceEq", IsComposable=true)]
		[return: Parameter(DbType="Float")]
		public System.Nullable<double> FDistanceEq([Parameter(DbType="Float")] System.Nullable<double> ra1, [Parameter(DbType="Float")] System.Nullable<double> dec1, [Parameter(DbType="Float")] System.Nullable<double> ra2, [Parameter(DbType="Float")] System.Nullable<double> dec2)
		{
			return ((System.Nullable<double>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), ra1, dec1, ra2, dec2).ReturnValue));
		}
		
		[Function(Name="dbo.fDistanceLatLon", IsComposable=true)]
		[return: Parameter(DbType="Float")]
		public System.Nullable<double> FDistanceLatLon([Parameter(Name="Lat1", DbType="Float")] System.Nullable<double> lat1, [Parameter(Name="Lon1", DbType="Float")] System.Nullable<double> lon1, [Parameter(Name="Lat2", DbType="Float")] System.Nullable<double> lat2, [Parameter(Name="Lon2", DbType="Float")] System.Nullable<double> lon2)
		{
			return ((System.Nullable<double>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), lat1, lon1, lat2, lon2).ReturnValue));
		}
		
		[Function(Name="dbo.fDistanceXyz", IsComposable=true)]
		[return: Parameter(DbType="Float")]
		public System.Nullable<double> FDistanceXyz([Parameter(DbType="Float")] System.Nullable<double> x1, [Parameter(DbType="Float")] System.Nullable<double> y1, [Parameter(DbType="Float")] System.Nullable<double> z1, [Parameter(DbType="Float")] System.Nullable<double> x2, [Parameter(DbType="Float")] System.Nullable<double> y2, [Parameter(DbType="Float")] System.Nullable<double> z2)
		{
			return ((System.Nullable<double>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), x1, y1, z1, x2, y2, z2).ReturnValue));
		}
		
		[Function(Name="dbo.fHtmCoverCircleEq", IsComposable=true)]
		public IQueryable<FHtmCoverCircleEqResult> FHtmCoverCircleEq([Parameter(DbType="Float")] System.Nullable<double> ra, [Parameter(DbType="Float")] System.Nullable<double> dec, [Parameter(DbType="Float")] System.Nullable<double> radiusArcMinutes)
		{
			return this.CreateMethodCallQuery<FHtmCoverCircleEqResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), ra, dec, radiusArcMinutes);
		}
		
		[Function(Name="dbo.fHtmCoverCircleLatLon", IsComposable=true)]
		public IQueryable<FHtmCoverCircleLatLonResult> FHtmCoverCircleLatLon([Parameter(Name="Lat", DbType="Float")] System.Nullable<double> lat, [Parameter(Name="Lon", DbType="Float")] System.Nullable<double> lon, [Parameter(DbType="Float")] System.Nullable<double> radiusArcMinutes)
		{
			return this.CreateMethodCallQuery<FHtmCoverCircleLatLonResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), lat, lon, radiusArcMinutes);
		}
		
		[Function(Name="dbo.fHtmCoverCircleXyz", IsComposable=true)]
		public IQueryable<FHtmCoverCircleXyzResult> FHtmCoverCircleXyz([Parameter(DbType="Float")] System.Nullable<double> x, [Parameter(DbType="Float")] System.Nullable<double> y, [Parameter(DbType="Float")] System.Nullable<double> z, [Parameter(DbType="Float")] System.Nullable<double> r)
		{
			return this.CreateMethodCallQuery<FHtmCoverCircleXyzResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), x, y, z, r);
		}
		
		[Function(Name="dbo.fHtmCoverRegion", IsComposable=true)]
		public IQueryable<FHtmCoverRegionResult> FHtmCoverRegion([Parameter(DbType="NVarChar(MAX)")] string region)
		{
			return this.CreateMethodCallQuery<FHtmCoverRegionResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), region);
		}
		
		[Function(Name="dbo.fHtmEq", IsComposable=true)]
		[return: Parameter(DbType="BigInt")]
		public System.Nullable<long> FHtmEq([Parameter(DbType="Float")] System.Nullable<double> ra, [Parameter(DbType="Float")] System.Nullable<double> dec)
		{
			return ((System.Nullable<long>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), ra, dec).ReturnValue));
		}
		
		[Function(Name="dbo.fHtmEqToXyz", IsComposable=true)]
		public IQueryable<FHtmEqToXyzResult> FHtmEqToXyz([Parameter(DbType="Float")] System.Nullable<double> ra, [Parameter(DbType="Float")] System.Nullable<double> dec)
		{
			return this.CreateMethodCallQuery<FHtmEqToXyzResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), ra, dec);
		}
		
		[Function(Name="dbo.fHtmIDToSquareArcmin", IsComposable=true)]
		[return: Parameter(DbType="Float")]
		public System.Nullable<double> FHtmIDToSquareArcmin([Parameter(Name="HtmID", DbType="BigInt")] System.Nullable<long> htmID)
		{
			return ((System.Nullable<double>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), htmID).ReturnValue));
		}
		
		[Function(Name="dbo.fHtmLatLon", IsComposable=true)]
		[return: Parameter(DbType="BigInt")]
		public System.Nullable<long> FHtmLatLon([Parameter(Name="Lat", DbType="Float")] System.Nullable<double> lat, [Parameter(Name="Lon", DbType="Float")] System.Nullable<double> lon)
		{
			return ((System.Nullable<long>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), lat, lon).ReturnValue));
		}
		
		[Function(Name="dbo.fHtmLatLonToXyz", IsComposable=true)]
		public IQueryable<FHtmLatLonToXyzResult> FHtmLatLonToXyz([Parameter(DbType="Float")] System.Nullable<double> ra, [Parameter(DbType="Float")] System.Nullable<double> dec)
		{
			return this.CreateMethodCallQuery<FHtmLatLonToXyzResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), ra, dec);
		}
		
		[Function(Name="dbo.fHtmNearbyEq", IsComposable=true)]
		public IQueryable<FHtmNearbyEqResult> FHtmNearbyEq([Parameter(DbType="Char(1)")] string type, [Parameter(DbType="Float")] System.Nullable<double> ra, [Parameter(DbType="Float")] System.Nullable<double> dec, [Parameter(DbType="Float")] System.Nullable<double> r)
		{
			return this.CreateMethodCallQuery<FHtmNearbyEqResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), type, ra, dec, r);
		}
		
		[Function(Name="dbo.fHtmNearbyLatLon", IsComposable=true)]
		public IQueryable<FHtmNearbyLatLonResult> FHtmNearbyLatLon([Parameter(DbType="Char(1)")] string type, [Parameter(Name="Lat", DbType="Float")] System.Nullable<double> lat, [Parameter(Name="Lon", DbType="Float")] System.Nullable<double> lon, [Parameter(DbType="Float")] System.Nullable<double> r)
		{
			return this.CreateMethodCallQuery<FHtmNearbyLatLonResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), type, lat, lon, r);
		}
		
		[Function(Name="dbo.fHtmNearbyXYZ", IsComposable=true)]
		public IQueryable<FHtmNearbyXYZResult> FHtmNearbyXYZ([Parameter(DbType="Char(1)")] string type, [Parameter(DbType="Float")] System.Nullable<double> x, [Parameter(DbType="Float")] System.Nullable<double> y, [Parameter(DbType="Float")] System.Nullable<double> z, [Parameter(DbType="Float")] System.Nullable<double> r)
		{
			return this.CreateMethodCallQuery<FHtmNearbyXYZResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), type, x, y, z, r);
		}
		
		[Function(Name="dbo.fHtmNearestEq", IsComposable=true)]
		public IQueryable<FHtmNearestEqResult> FHtmNearestEq([Parameter(DbType="Char(1)")] string type, [Parameter(DbType="Float")] System.Nullable<double> ra, [Parameter(DbType="Float")] System.Nullable<double> dec)
		{
			return this.CreateMethodCallQuery<FHtmNearestEqResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), type, ra, dec);
		}
		
		[Function(Name="dbo.fHtmNearestLatLon", IsComposable=true)]
		public IQueryable<FHtmNearestLatLonResult> FHtmNearestLatLon([Parameter(DbType="Char(1)")] string type, [Parameter(Name="Lat", DbType="Float")] System.Nullable<double> lat, [Parameter(Name="Lon", DbType="Float")] System.Nullable<double> lon)
		{
			return this.CreateMethodCallQuery<FHtmNearestLatLonResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), type, lat, lon);
		}
		
		[Function(Name="dbo.fHtmNearestXYZ", IsComposable=true)]
		public IQueryable<FHtmNearestXYZResult> FHtmNearestXYZ([Parameter(DbType="Char(1)")] string type, [Parameter(DbType="Float")] System.Nullable<double> x, [Parameter(DbType="Float")] System.Nullable<double> y, [Parameter(DbType="Float")] System.Nullable<double> z)
		{
			return this.CreateMethodCallQuery<FHtmNearestXYZResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), type, x, y, z);
		}
		
		[Function(Name="dbo.fHtmRegionError", IsComposable=true)]
		[return: Parameter(DbType="NVarChar(MAX)")]
		public string FHtmRegionError([Parameter(DbType="NVarChar(MAX)")] string region)
		{
			return ((string)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), region).ReturnValue));
		}
		
		[Function(Name="dbo.fHtmRegionObjects", IsComposable=true)]
		public IQueryable<FHtmRegionObjectsResult> FHtmRegionObjects([Parameter(DbType="NVarChar(MAX)")] string region, [Parameter(DbType="Char(1)")] string type)
		{
			return this.CreateMethodCallQuery<FHtmRegionObjectsResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), region, type);
		}
		
		[Function(Name="dbo.fHtmRegionToNormalFormString", IsComposable=true)]
		[return: Parameter(DbType="NVarChar(MAX)")]
		public string FHtmRegionToNormalFormString([Parameter(DbType="NVarChar(MAX)")] string region)
		{
			return ((string)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), region).ReturnValue));
		}
		
		[Function(Name="dbo.fHtmRegionToTable", IsComposable=true)]
		public IQueryable<FHtmRegionToTableResult> FHtmRegionToTable([Parameter(DbType="NVarChar(MAX)")] string cover)
		{
			return this.CreateMethodCallQuery<FHtmRegionToTableResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), cover);
		}
		
		[Function(Name="dbo.fHtmToCenterPoint", IsComposable=true)]
		public IQueryable<FHtmToCenterPointResult> FHtmToCenterPoint([Parameter(Name="HtmID", DbType="BigInt")] System.Nullable<long> htmID)
		{
			return this.CreateMethodCallQuery<FHtmToCenterPointResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), htmID);
		}
		
		[Function(Name="dbo.fHtmToCornerPoints", IsComposable=true)]
		public IQueryable<FHtmToCornerPointsResult> FHtmToCornerPoints([Parameter(Name="HtmID", DbType="BigInt")] System.Nullable<long> htmID)
		{
			return this.CreateMethodCallQuery<FHtmToCornerPointsResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), htmID);
		}
		
		[Function(Name="dbo.fHtmToString", IsComposable=true)]
		[return: Parameter(DbType="NVarChar(MAX)")]
		public string FHtmToString([Parameter(Name="HtmID", DbType="BigInt")] System.Nullable<long> htmID)
		{
			return ((string)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), htmID).ReturnValue));
		}
		
		[Function(Name="dbo.fHtmVersion", IsComposable=true)]
		[return: Parameter(DbType="NVarChar(MAX)")]
		public string FHtmVersion()
		{
			return ((string)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod()))).ReturnValue));
		}
		
		[Function(Name="dbo.fHtmXyz", IsComposable=true)]
		[return: Parameter(DbType="BigInt")]
		public System.Nullable<long> FHtmXyz([Parameter(DbType="Float")] System.Nullable<double> x, [Parameter(DbType="Float")] System.Nullable<double> y, [Parameter(DbType="Float")] System.Nullable<double> z)
		{
			return ((System.Nullable<long>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), x, y, z).ReturnValue));
		}
		
		[Function(Name="dbo.fHtmXyzToEq", IsComposable=true)]
		public IQueryable<FHtmXyzToEqResult> FHtmXyzToEq([Parameter(DbType="Float")] System.Nullable<double> x, [Parameter(DbType="Float")] System.Nullable<double> y, [Parameter(DbType="Float")] System.Nullable<double> z)
		{
			return this.CreateMethodCallQuery<FHtmXyzToEqResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), x, y, z);
		}
		
		[Function(Name="dbo.fHtmXyzToLatLon", IsComposable=true)]
		public IQueryable<FHtmXyzToLatLonResult> FHtmXyzToLatLon([Parameter(DbType="Float")] System.Nullable<double> x, [Parameter(DbType="Float")] System.Nullable<double> y, [Parameter(DbType="Float")] System.Nullable<double> z)
		{
			return this.CreateMethodCallQuery<FHtmXyzToLatLonResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), x, y, z);
		}
		
		[Function(Name="[dbo].[Spatial.Search]")]
		[return: Parameter(DbType="Int")]
		public int ___Spatial_Search_([Parameter(Name="TableName", DbType="VarChar(50)")] string tableName, [Parameter(Name="WhereClause", DbType="VarChar(MAX)")] string whereClause, [Parameter(Name="CustomVariableDeclarationSql", DbType="VarChar(MAX)")] string customVariableDeclarationSql, [Parameter(Name="OrderBy", DbType="VarChar(200)")] string orderBy, [Parameter(Name="FirstRowIndex", DbType="Int")] System.Nullable<int> firstRowIndex, [Parameter(Name="LastRowIndex", DbType="Int")] System.Nullable<int> lastRowIndex, [Parameter(Name="North", DbType="Float")] System.Nullable<double> north, [Parameter(Name="East", DbType="Float")] System.Nullable<double> east, [Parameter(Name="South", DbType="Float")] System.Nullable<double> south, [Parameter(Name="West", DbType="Float")] System.Nullable<double> west)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), tableName, whereClause, customVariableDeclarationSql, orderBy, firstRowIndex, lastRowIndex, north, east, south, west);
			return ((int)(result.ReturnValue));
		}
	}
}
namespace LinqToSql.Classes
{
	using System;
	using System.ComponentModel;
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Runtime.Serialization;

		[Table(Name=@"dbo.Abuse")]
 		public partial class Abuse : Model.Entities.Abuse, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public Abuse()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnKChanging(int value);
			partial void OnKChanged();
			private int _K;
			[Column(Storage="_K", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
			public  override int K {
				get { return _K; }
				set {
					if (_K != value) {
						OnKChanging(value);
						SendPropertyChanging();
						_K = value;
						SendPropertyChanged("K");
						OnKChanged();
					}
				}
			}

			partial void OnReportUsrKChanging(int value);
			partial void OnReportUsrKChanged();
			private int _ReportUsrK;
			[Column(Storage="_ReportUsrK", DbType="Int", CanBeNull=false)]
			public  override int ReportUsrK {
				get { return _ReportUsrK; }
				set {
					if (_ReportUsrK != value) {
						OnReportUsrKChanging(value);
						SendPropertyChanging();
						_ReportUsrK = value;
						SendPropertyChanged("ReportUsrK");
						OnReportUsrKChanged();
					}
				}
			}

			partial void OnAbuseUsrKChanging(int value);
			partial void OnAbuseUsrKChanged();
			private int _AbuseUsrK;
			[Column(Storage="_AbuseUsrK", DbType="Int", CanBeNull=false)]
			public  override int AbuseUsrK {
				get { return _AbuseUsrK; }
				set {
					if (_AbuseUsrK != value) {
						OnAbuseUsrKChanging(value);
						SendPropertyChanging();
						_AbuseUsrK = value;
						SendPropertyChanged("AbuseUsrK");
						OnAbuseUsrKChanged();
					}
				}
			}

			partial void OnObjectTypeChanging(Model.Entities.ObjectType value);
			partial void OnObjectTypeChanged();
			private Model.Entities.ObjectType _ObjectType;
			[Column(Storage="_ObjectType", DbType="Int", CanBeNull=false)]
			public  override Model.Entities.ObjectType ObjectType {
				get { return _ObjectType; }
				set {
					if (_ObjectType != value) {
						OnObjectTypeChanging(value);
						SendPropertyChanging();
						_ObjectType = value;
						SendPropertyChanged("ObjectType");
						OnObjectTypeChanged();
					}
				}
			}

			partial void OnObjectKChanging(int value);
			partial void OnObjectKChanged();
			private int _ObjectK;
			[Column(Storage="_ObjectK", DbType="Int", CanBeNull=false)]
			public  override int ObjectK {
				get { return _ObjectK; }
				set {
					if (_ObjectK != value) {
						OnObjectKChanging(value);
						SendPropertyChanging();
						_ObjectK = value;
						SendPropertyChanged("ObjectK");
						OnObjectKChanged();
					}
				}
			}

			partial void OnObjectStringChanging(string value);
			partial void OnObjectStringChanged();
			private string _ObjectString;
			[Column(Storage="_ObjectString", DbType="VarChar(500)", CanBeNull=false)]
			public  override string ObjectString {
				get { return _ObjectString; }
				set {
					if (_ObjectString != value) {
						OnObjectStringChanging(value);
						SendPropertyChanging();
						_ObjectString = value;
						SendPropertyChanged("ObjectString");
						OnObjectStringChanged();
					}
				}
			}

			partial void OnReportDescriptionChanging(string value);
			partial void OnReportDescriptionChanged();
			private string _ReportDescription;
			[Column(Storage="_ReportDescription", DbType="VarChar(500)", CanBeNull=false)]
			public  override string ReportDescription {
				get { return _ReportDescription; }
				set {
					if (_ReportDescription != value) {
						OnReportDescriptionChanging(value);
						SendPropertyChanging();
						_ReportDescription = value;
						SendPropertyChanged("ReportDescription");
						OnReportDescriptionChanged();
					}
				}
			}

			partial void OnReportDateTimeChanging(DateTime value);
			partial void OnReportDateTimeChanged();
			private DateTime _ReportDateTime;
			[Column(Storage="_ReportDateTime", DbType="DateTime", CanBeNull=false)]
			public  override DateTime ReportDateTime {
				get { return _ReportDateTime; }
				set {
					if (_ReportDateTime != value) {
						OnReportDateTimeChanging(value);
						SendPropertyChanging();
						_ReportDateTime = value;
						SendPropertyChanged("ReportDateTime");
						OnReportDateTimeChanged();
					}
				}
			}

			partial void OnStatusChanging(Model.Entities.Abuse.StatusEnum value);
			partial void OnStatusChanged();
			private Model.Entities.Abuse.StatusEnum _Status;
			[Column(Storage="_Status", DbType="Int", CanBeNull=false)]
			public  override Model.Entities.Abuse.StatusEnum Status {
				get { return _Status; }
				set {
					if (_Status != value) {
						OnStatusChanging(value);
						SendPropertyChanging();
						_Status = value;
						SendPropertyChanged("Status");
						OnStatusChanged();
					}
				}
			}

			partial void OnResolveDateTimeChanging(DateTime value);
			partial void OnResolveDateTimeChanged();
			private DateTime _ResolveDateTime;
			[Column(Storage="_ResolveDateTime", DbType="DateTime", CanBeNull=false)]
			public  override DateTime ResolveDateTime {
				get { return _ResolveDateTime; }
				set {
					if (_ResolveDateTime != value) {
						OnResolveDateTimeChanging(value);
						SendPropertyChanging();
						_ResolveDateTime = value;
						SendPropertyChanged("ResolveDateTime");
						OnResolveDateTimeChanged();
					}
				}
			}

			partial void OnResolveStatusChanging(Model.Entities.Abuse.ResolveStatusEnum value);
			partial void OnResolveStatusChanged();
			private Model.Entities.Abuse.ResolveStatusEnum _ResolveStatus;
			[Column(Storage="_ResolveStatus", DbType="Int", CanBeNull=false)]
			public  override Model.Entities.Abuse.ResolveStatusEnum ResolveStatus {
				get { return _ResolveStatus; }
				set {
					if (_ResolveStatus != value) {
						OnResolveStatusChanging(value);
						SendPropertyChanging();
						_ResolveStatus = value;
						SendPropertyChanged("ResolveStatus");
						OnResolveStatusChanged();
					}
				}
			}

			partial void OnResolveDescriptionChanging(string value);
			partial void OnResolveDescriptionChanged();
			private string _ResolveDescription;
			[Column(Storage="_ResolveDescription", DbType="VarChar(500)", CanBeNull=false)]
			public  override string ResolveDescription {
				get { return _ResolveDescription; }
				set {
					if (_ResolveDescription != value) {
						OnResolveDescriptionChanging(value);
						SendPropertyChanging();
						_ResolveDescription = value;
						SendPropertyChanged("ResolveDescription");
						OnResolveDescriptionChanged();
					}
				}
			}

			partial void OnResolveUsrKChanging(int value);
			partial void OnResolveUsrKChanged();
			private int _ResolveUsrK;
			[Column(Storage="_ResolveUsrK", DbType="Int", CanBeNull=false)]
			public  override int ResolveUsrK {
				get { return _ResolveUsrK; }
				set {
					if (_ResolveUsrK != value) {
						OnResolveUsrKChanging(value);
						SendPropertyChanging();
						_ResolveUsrK = value;
						SendPropertyChanged("ResolveUsrK");
						OnResolveUsrKChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.Admin")]
 		public partial class Admin : Model.Entities.Admin, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public Admin()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnKChanging(int value);
			partial void OnKChanged();
			private int _K;
			[Column(Storage="_K", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
			public  override int K {
				get { return _K; }
				set {
					if (_K != value) {
						OnKChanging(value);
						SendPropertyChanging();
						_K = value;
						SendPropertyChanged("K");
						OnKChanged();
					}
				}
			}

			partial void OnUsrKChanging(int value);
			partial void OnUsrKChanged();
			private int _UsrK;
			[Column(Storage="_UsrK", DbType="Int", CanBeNull=false)]
			public  override int UsrK {
				get { return _UsrK; }
				set {
					if (_UsrK != value) {
						OnUsrKChanging(value);
						SendPropertyChanging();
						_UsrK = value;
						SendPropertyChanged("UsrK");
						OnUsrKChanged();
					}
				}
			}

			partial void OnObjectTypeChanging(Model.Entities.Admin.AdminObjectType value);
			partial void OnObjectTypeChanged();
			private Model.Entities.Admin.AdminObjectType _ObjectType;
			[Column(Storage="_ObjectType", DbType="Int", CanBeNull=false)]
			public  override Model.Entities.Admin.AdminObjectType ObjectType {
				get { return _ObjectType; }
				set {
					if (_ObjectType != value) {
						OnObjectTypeChanging(value);
						SendPropertyChanging();
						_ObjectType = value;
						SendPropertyChanged("ObjectType");
						OnObjectTypeChanged();
					}
				}
			}

			partial void OnObjectKChanging(int value);
			partial void OnObjectKChanged();
			private int _ObjectK;
			[Column(Storage="_ObjectK", DbType="Int", CanBeNull=false)]
			public  override int ObjectK {
				get { return _ObjectK; }
				set {
					if (_ObjectK != value) {
						OnObjectKChanging(value);
						SendPropertyChanging();
						_ObjectK = value;
						SendPropertyChanged("ObjectK");
						OnObjectKChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.Article")]
 		public partial class Article : Model.Entities.Article, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public Article()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnKChanging(int value);
			partial void OnKChanged();
			private int _K;
			[Column(Storage="_K", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
			public  override int K {
				get { return _K; }
				set {
					if (_K != value) {
						OnKChanging(value);
						SendPropertyChanging();
						_K = value;
						SendPropertyChanged("K");
						OnKChanged();
					}
				}
			}

			partial void OnTitleChanging(string value);
			partial void OnTitleChanged();
			private string _Title;
			[Column(Storage="_Title", DbType="VarChar(100)", CanBeNull=false)]
			public  override string Title {
				get { return _Title; }
				set {
					if (_Title != value) {
						OnTitleChanging(value);
						SendPropertyChanging();
						_Title = value;
						SendPropertyChanged("Title");
						OnTitleChanged();
					}
				}
			}

			partial void OnSummaryChanging(string value);
			partial void OnSummaryChanged();
			private string _Summary;
			[Column(Storage="_Summary", DbType="Text", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
			public  override string Summary {
				get { return _Summary; }
				set {
					if (_Summary != value) {
						OnSummaryChanging(value);
						SendPropertyChanging();
						_Summary = value;
						SendPropertyChanged("Summary");
						OnSummaryChanged();
					}
				}
			}

			partial void OnPicChanging(Guid value);
			partial void OnPicChanged();
			private Guid _Pic;
			[Column(Storage="_Pic", DbType="UniqueIdentifier", CanBeNull=false)]
			public  override Guid Pic {
				get { return _Pic; }
				set {
					if (_Pic != value) {
						OnPicChanging(value);
						SendPropertyChanging();
						_Pic = value;
						SendPropertyChanged("Pic");
						OnPicChanged();
					}
				}
			}

			partial void OnOwnerUsrKChanging(int value);
			partial void OnOwnerUsrKChanged();
			private int _OwnerUsrK;
			[Column(Storage="_OwnerUsrK", DbType="Int", CanBeNull=false)]
			public  override int OwnerUsrK {
				get { return _OwnerUsrK; }
				set {
					if (_OwnerUsrK != value) {
						OnOwnerUsrKChanging(value);
						SendPropertyChanging();
						_OwnerUsrK = value;
						SendPropertyChanged("OwnerUsrK");
						OnOwnerUsrKChanged();
					}
				}
			}

			partial void OnAddedDateTimeChanging(DateTime value);
			partial void OnAddedDateTimeChanged();
			private DateTime _AddedDateTime;
			[Column(Storage="_AddedDateTime", DbType="DateTime", CanBeNull=false)]
			public  override DateTime AddedDateTime {
				get { return _AddedDateTime; }
				set {
					if (_AddedDateTime != value) {
						OnAddedDateTimeChanging(value);
						SendPropertyChanging();
						_AddedDateTime = value;
						SendPropertyChanged("AddedDateTime");
						OnAddedDateTimeChanged();
					}
				}
			}

			partial void OnStatusChanging(Model.Entities.Article.StatusEnum value);
			partial void OnStatusChanged();
			private Model.Entities.Article.StatusEnum _Status;
			[Column(Storage="_Status", DbType="Int", CanBeNull=false)]
			public  override Model.Entities.Article.StatusEnum Status {
				get { return _Status; }
				set {
					if (_Status != value) {
						OnStatusChanging(value);
						SendPropertyChanging();
						_Status = value;
						SendPropertyChanged("Status");
						OnStatusChanged();
					}
				}
			}

			partial void OnEnabledDateTimeChanging(DateTime value);
			partial void OnEnabledDateTimeChanged();
			private DateTime _EnabledDateTime;
			[Column(Storage="_EnabledDateTime", DbType="DateTime", CanBeNull=false)]
			public  override DateTime EnabledDateTime {
				get { return _EnabledDateTime; }
				set {
					if (_EnabledDateTime != value) {
						OnEnabledDateTimeChanging(value);
						SendPropertyChanging();
						_EnabledDateTime = value;
						SendPropertyChanged("EnabledDateTime");
						OnEnabledDateTimeChanged();
					}
				}
			}

			partial void OnEnabledUsrKChanging(int value);
			partial void OnEnabledUsrKChanged();
			private int _EnabledUsrK;
			[Column(Storage="_EnabledUsrK", DbType="Int", CanBeNull=false)]
			public  override int EnabledUsrK {
				get { return _EnabledUsrK; }
				set {
					if (_EnabledUsrK != value) {
						OnEnabledUsrKChanging(value);
						SendPropertyChanging();
						_EnabledUsrK = value;
						SendPropertyChanged("EnabledUsrK");
						OnEnabledUsrKChanged();
					}
				}
			}

			partial void OnRelevanceChanging(Model.Entities.Article.RelevanceEnum value);
			partial void OnRelevanceChanged();
			private Model.Entities.Article.RelevanceEnum _Relevance;
			[Column(Storage="_Relevance", DbType="Int", CanBeNull=false)]
			public  override Model.Entities.Article.RelevanceEnum Relevance {
				get { return _Relevance; }
				set {
					if (_Relevance != value) {
						OnRelevanceChanging(value);
						SendPropertyChanging();
						_Relevance = value;
						SendPropertyChanged("Relevance");
						OnRelevanceChanged();
					}
				}
			}

			partial void OnParentObjectTypeChanging(Model.Entities.ObjectType value);
			partial void OnParentObjectTypeChanged();
			private Model.Entities.ObjectType _ParentObjectType;
			[Column(Storage="_ParentObjectType", DbType="Int", CanBeNull=false)]
			public  override Model.Entities.ObjectType ParentObjectType {
				get { return _ParentObjectType; }
				set {
					if (_ParentObjectType != value) {
						OnParentObjectTypeChanging(value);
						SendPropertyChanging();
						_ParentObjectType = value;
						SendPropertyChanged("ParentObjectType");
						OnParentObjectTypeChanged();
					}
				}
			}

			partial void OnParentObjectKChanging(int value);
			partial void OnParentObjectKChanged();
			private int _ParentObjectK;
			[Column(Storage="_ParentObjectK", DbType="Int", CanBeNull=false)]
			public  override int ParentObjectK {
				get { return _ParentObjectK; }
				set {
					if (_ParentObjectK != value) {
						OnParentObjectKChanging(value);
						SendPropertyChanging();
						_ParentObjectK = value;
						SendPropertyChanged("ParentObjectK");
						OnParentObjectKChanged();
					}
				}
			}

			partial void OnEventKChanging(int value);
			partial void OnEventKChanged();
			private int _EventK;
			[Column(Storage="_EventK", DbType="Int", CanBeNull=false)]
			public  override int EventK {
				get { return _EventK; }
				set {
					if (_EventK != value) {
						OnEventKChanging(value);
						SendPropertyChanging();
						_EventK = value;
						SendPropertyChanged("EventK");
						OnEventKChanged();
					}
				}
			}

			partial void OnVenueKChanging(int value);
			partial void OnVenueKChanged();
			private int _VenueK;
			[Column(Storage="_VenueK", DbType="Int", CanBeNull=false)]
			public  override int VenueK {
				get { return _VenueK; }
				set {
					if (_VenueK != value) {
						OnVenueKChanging(value);
						SendPropertyChanging();
						_VenueK = value;
						SendPropertyChanged("VenueK");
						OnVenueKChanged();
					}
				}
			}

			partial void OnPlaceKChanging(int value);
			partial void OnPlaceKChanged();
			private int _PlaceK;
			[Column(Storage="_PlaceK", DbType="Int", CanBeNull=false)]
			public  override int PlaceK {
				get { return _PlaceK; }
				set {
					if (_PlaceK != value) {
						OnPlaceKChanging(value);
						SendPropertyChanging();
						_PlaceK = value;
						SendPropertyChanged("PlaceK");
						OnPlaceKChanged();
					}
				}
			}

			partial void OnCountryKChanging(int value);
			partial void OnCountryKChanged();
			private int _CountryK;
			[Column(Storage="_CountryK", DbType="Int", CanBeNull=false)]
			public  override int CountryK {
				get { return _CountryK; }
				set {
					if (_CountryK != value) {
						OnCountryKChanging(value);
						SendPropertyChanging();
						_CountryK = value;
						SendPropertyChanged("CountryK");
						OnCountryKChanged();
					}
				}
			}

			partial void OnHasSingleThreadChanging(bool value);
			partial void OnHasSingleThreadChanged();
			private bool _HasSingleThread;
			[Column(Storage="_HasSingleThread", DbType="Bit", CanBeNull=false)]
			public  override bool HasSingleThread {
				get { return _HasSingleThread; }
				set {
					if (_HasSingleThread != value) {
						OnHasSingleThreadChanging(value);
						SendPropertyChanging();
						_HasSingleThread = value;
						SendPropertyChanged("HasSingleThread");
						OnHasSingleThreadChanged();
					}
				}
			}

			partial void OnAdminNoteChanging(string value);
			partial void OnAdminNoteChanged();
			private string _AdminNote;
			[Column(Storage="_AdminNote", DbType="Text", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
			public  override string AdminNote {
				get { return _AdminNote; }
				set {
					if (_AdminNote != value) {
						OnAdminNoteChanging(value);
						SendPropertyChanging();
						_AdminNote = value;
						SendPropertyChanged("AdminNote");
						OnAdminNoteChanged();
					}
				}
			}

			partial void OnViewsChanging(int value);
			partial void OnViewsChanged();
			private int _Views;
			[Column(Storage="_Views", DbType="Int", CanBeNull=false)]
			public  override int Views {
				get { return _Views; }
				set {
					if (_Views != value) {
						OnViewsChanging(value);
						SendPropertyChanging();
						_Views = value;
						SendPropertyChanged("Views");
						OnViewsChanged();
					}
				}
			}

			partial void OnIsWorldwideChanging(bool value);
			partial void OnIsWorldwideChanged();
			private bool _IsWorldwide;
			[Column(Storage="_IsWorldwide", DbType="Bit", CanBeNull=false)]
			public  override bool IsWorldwide {
				get { return _IsWorldwide; }
				set {
					if (_IsWorldwide != value) {
						OnIsWorldwideChanging(value);
						SendPropertyChanging();
						_IsWorldwide = value;
						SendPropertyChanged("IsWorldwide");
						OnIsWorldwideChanged();
					}
				}
			}

			partial void OnTotalCommentsChanging(int value);
			partial void OnTotalCommentsChanged();
			private int _TotalComments;
			[Column(Storage="_TotalComments", DbType="Int", CanBeNull=false)]
			public  override int TotalComments {
				get { return _TotalComments; }
				set {
					if (_TotalComments != value) {
						OnTotalCommentsChanging(value);
						SendPropertyChanging();
						_TotalComments = value;
						SendPropertyChanged("TotalComments");
						OnTotalCommentsChanged();
					}
				}
			}

			partial void OnLastPostChanging(DateTime value);
			partial void OnLastPostChanged();
			private DateTime _LastPost;
			[Column(Storage="_LastPost", DbType="DateTime", CanBeNull=false)]
			public  override DateTime LastPost {
				get { return _LastPost; }
				set {
					if (_LastPost != value) {
						OnLastPostChanging(value);
						SendPropertyChanging();
						_LastPost = value;
						SendPropertyChanged("LastPost");
						OnLastPostChanged();
					}
				}
			}

			partial void OnAverageCommentDateTimeChanging(DateTime value);
			partial void OnAverageCommentDateTimeChanged();
			private DateTime _AverageCommentDateTime;
			[Column(Storage="_AverageCommentDateTime", DbType="DateTime", CanBeNull=false)]
			public  override DateTime AverageCommentDateTime {
				get { return _AverageCommentDateTime; }
				set {
					if (_AverageCommentDateTime != value) {
						OnAverageCommentDateTimeChanging(value);
						SendPropertyChanging();
						_AverageCommentDateTime = value;
						SendPropertyChanged("AverageCommentDateTime");
						OnAverageCommentDateTimeChanged();
					}
				}
			}

			partial void OnOverrideContentsChanging(string value);
			partial void OnOverrideContentsChanged();
			private string _OverrideContents;
			[Column(Storage="_OverrideContents", DbType="VarChar(200)", CanBeNull=false)]
			public  override string OverrideContents {
				get { return _OverrideContents; }
				set {
					if (_OverrideContents != value) {
						OnOverrideContentsChanging(value);
						SendPropertyChanging();
						_OverrideContents = value;
						SendPropertyChanged("OverrideContents");
						OnOverrideContentsChanged();
					}
				}
			}

			partial void OnHideOwnerChanging(bool value);
			partial void OnHideOwnerChanged();
			private bool _HideOwner;
			[Column(Storage="_HideOwner", DbType="Bit", CanBeNull=false)]
			public  override bool HideOwner {
				get { return _HideOwner; }
				set {
					if (_HideOwner != value) {
						OnHideOwnerChanging(value);
						SendPropertyChanging();
						_HideOwner = value;
						SendPropertyChanged("HideOwner");
						OnHideOwnerChanged();
					}
				}
			}

			partial void OnPicMiscKChanging(int value);
			partial void OnPicMiscKChanged();
			private int _PicMiscK;
			[Column(Storage="_PicMiscK", DbType="Int", CanBeNull=false)]
			public  override int PicMiscK {
				get { return _PicMiscK; }
				set {
					if (_PicMiscK != value) {
						OnPicMiscKChanging(value);
						SendPropertyChanging();
						_PicMiscK = value;
						SendPropertyChanged("PicMiscK");
						OnPicMiscKChanged();
					}
				}
			}

			partial void OnPicStateChanging(string value);
			partial void OnPicStateChanged();
			private string _PicState;
			[Column(Storage="_PicState", DbType="VarChar(100)", CanBeNull=false)]
			public  override string PicState {
				get { return _PicState; }
				set {
					if (_PicState != value) {
						OnPicStateChanging(value);
						SendPropertyChanging();
						_PicState = value;
						SendPropertyChanged("PicState");
						OnPicStateChanged();
					}
				}
			}

			partial void OnPicPhotoKChanging(int value);
			partial void OnPicPhotoKChanged();
			private int _PicPhotoK;
			[Column(Storage="_PicPhotoK", DbType="Int", CanBeNull=false)]
			public  override int PicPhotoK {
				get { return _PicPhotoK; }
				set {
					if (_PicPhotoK != value) {
						OnPicPhotoKChanging(value);
						SendPropertyChanging();
						_PicPhotoK = value;
						SendPropertyChanged("PicPhotoK");
						OnPicPhotoKChanged();
					}
				}
			}

			partial void OnUrlFragmentChanging(string value);
			partial void OnUrlFragmentChanged();
			private string _UrlFragment;
			[Column(Storage="_UrlFragment", DbType="VarChar(255)", CanBeNull=false)]
			public  override string UrlFragment {
				get { return _UrlFragment; }
				set {
					if (_UrlFragment != value) {
						OnUrlFragmentChanging(value);
						SendPropertyChanging();
						_UrlFragment = value;
						SendPropertyChanged("UrlFragment");
						OnUrlFragmentChanged();
					}
				}
			}

			partial void OnThreadKChanging(int? value);
			partial void OnThreadKChanged();
			private int? _ThreadK;
			[Column(Storage="_ThreadK", DbType="Int")]
			public  override int? ThreadK {
				get { return _ThreadK; }
				set {
					if (_ThreadK != value) {
						OnThreadKChanging(value);
						SendPropertyChanging();
						_ThreadK = value;
						SendPropertyChanged("ThreadK");
						OnThreadKChanged();
					}
				}
			}

			partial void OnTwitterHeadlineChanging(string value);
			partial void OnTwitterHeadlineChanged();
			private string _TwitterHeadline;
			[Column(Storage="_TwitterHeadline", DbType="VarChar(140)")]
			public  override string TwitterHeadline {
				get { return _TwitterHeadline; }
				set {
					if (_TwitterHeadline != value) {
						OnTwitterHeadlineChanging(value);
						SendPropertyChanging();
						_TwitterHeadline = value;
						SendPropertyChanged("TwitterHeadline");
						OnTwitterHeadlineChanged();
					}
				}
			}

			partial void OnIsMixmagNewsChanging(bool value);
			partial void OnIsMixmagNewsChanged();
			private bool _IsMixmagNews;
			[Column(Storage="_IsMixmagNews", DbType="Bit NOT NULL", CanBeNull=false)]
			public  override bool IsMixmagNews {
				get { return _IsMixmagNews; }
				set {
					if (_IsMixmagNews != value) {
						OnIsMixmagNewsChanging(value);
						SendPropertyChanging();
						_IsMixmagNews = value;
						SendPropertyChanged("IsMixmagNews");
						OnIsMixmagNewsChanged();
					}
				}
			}

			partial void OnIsExtendedDisplayChanging(bool value);
			partial void OnIsExtendedDisplayChanged();
			private bool _IsExtendedDisplay;
			[Column(Storage="_IsExtendedDisplay", DbType="Bit NOT NULL", CanBeNull=false)]
			public  override bool IsExtendedDisplay {
				get { return _IsExtendedDisplay; }
				set {
					if (_IsExtendedDisplay != value) {
						OnIsExtendedDisplayChanging(value);
						SendPropertyChanging();
						_IsExtendedDisplay = value;
						SendPropertyChanged("IsExtendedDisplay");
						OnIsExtendedDisplayChanged();
					}
				}
			}

			partial void OnMixmagSectionsChanging(int value);
			partial void OnMixmagSectionsChanged();
			private int _MixmagSections;
			[Column(Storage="_MixmagSections", DbType="Int NOT NULL", CanBeNull=false)]
			public  override int MixmagSections {
				get { return _MixmagSections; }
				set {
					if (_MixmagSections != value) {
						OnMixmagSectionsChanging(value);
						SendPropertyChanging();
						_MixmagSections = value;
						SendPropertyChanged("MixmagSections");
						OnMixmagSectionsChanged();
					}
				}
			}

			partial void OnShowAboveFoldOnFrontPageChanging(bool value);
			partial void OnShowAboveFoldOnFrontPageChanged();
			private bool _ShowAboveFoldOnFrontPage;
			[Column(Storage="_ShowAboveFoldOnFrontPage", DbType="Bit NOT NULL", CanBeNull=false)]
			public  override bool ShowAboveFoldOnFrontPage {
				get { return _ShowAboveFoldOnFrontPage; }
				set {
					if (_ShowAboveFoldOnFrontPage != value) {
						OnShowAboveFoldOnFrontPageChanging(value);
						SendPropertyChanging();
						_ShowAboveFoldOnFrontPage = value;
						SendPropertyChanged("ShowAboveFoldOnFrontPage");
						OnShowAboveFoldOnFrontPageChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.BacardiEmail")]
 		public partial class BacardiEmail : Model.Entities.BacardiEmail, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public BacardiEmail()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnKChanging(int value);
			partial void OnKChanged();
			private int _K;
			[Column(Storage="_K", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
			public  override int K {
				get { return _K; }
				set {
					if (_K != value) {
						OnKChanging(value);
						SendPropertyChanging();
						_K = value;
						SendPropertyChanged("K");
						OnKChanged();
					}
				}
			}

			partial void OnEmailChanging(string value);
			partial void OnEmailChanged();
			private string _Email;
			[Column(Storage="_Email", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
			public  override string Email {
				get { return _Email; }
				set {
					if (_Email != value) {
						OnEmailChanging(value);
						SendPropertyChanging();
						_Email = value;
						SendPropertyChanged("Email");
						OnEmailChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.BankExport")]
 		public partial class BankExport : Model.Entities.BankExport, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public BankExport()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnKChanging(int value);
			partial void OnKChanged();
			private int _K;
			[Column(Storage="_K", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
			public  override int K {
				get { return _K; }
				set {
					if (_K != value) {
						OnKChanging(value);
						SendPropertyChanging();
						_K = value;
						SendPropertyChanged("K");
						OnKChanged();
					}
				}
			}

			partial void OnAddedDateTimeChanging(DateTime value);
			partial void OnAddedDateTimeChanged();
			private DateTime _AddedDateTime;
			[Column(Storage="_AddedDateTime", DbType="DateTime NOT NULL", CanBeNull=false)]
			public  override DateTime AddedDateTime {
				get { return _AddedDateTime; }
				set {
					if (_AddedDateTime != value) {
						OnAddedDateTimeChanging(value);
						SendPropertyChanging();
						_AddedDateTime = value;
						SendPropertyChanged("AddedDateTime");
						OnAddedDateTimeChanged();
					}
				}
			}

			partial void OnOutputDateTimeChanging(DateTime value);
			partial void OnOutputDateTimeChanged();
			private DateTime _OutputDateTime;
			[Column(Storage="_OutputDateTime", DbType="DateTime", CanBeNull=false)]
			public  override DateTime OutputDateTime {
				get { return _OutputDateTime; }
				set {
					if (_OutputDateTime != value) {
						OnOutputDateTimeChanging(value);
						SendPropertyChanging();
						_OutputDateTime = value;
						SendPropertyChanged("OutputDateTime");
						OnOutputDateTimeChanged();
					}
				}
			}

			partial void OnProcessingDateTimeChanging(DateTime value);
			partial void OnProcessingDateTimeChanged();
			private DateTime _ProcessingDateTime;
			[Column(Storage="_ProcessingDateTime", DbType="DateTime", CanBeNull=false)]
			public  override DateTime ProcessingDateTime {
				get { return _ProcessingDateTime; }
				set {
					if (_ProcessingDateTime != value) {
						OnProcessingDateTimeChanging(value);
						SendPropertyChanging();
						_ProcessingDateTime = value;
						SendPropertyChanged("ProcessingDateTime");
						OnProcessingDateTimeChanged();
					}
				}
			}

			partial void OnTransferKChanging(int value);
			partial void OnTransferKChanged();
			private int _TransferK;
			[Column(Storage="_TransferK", DbType="Int", CanBeNull=false)]
			public  override int TransferK {
				get { return _TransferK; }
				set {
					if (_TransferK != value) {
						OnTransferKChanging(value);
						SendPropertyChanging();
						_TransferK = value;
						SendPropertyChanged("TransferK");
						OnTransferKChanged();
					}
				}
			}

			partial void OnPromoterKChanging(int value);
			partial void OnPromoterKChanged();
			private int _PromoterK;
			[Column(Storage="_PromoterK", DbType="Int", CanBeNull=false)]
			public  override int PromoterK {
				get { return _PromoterK; }
				set {
					if (_PromoterK != value) {
						OnPromoterKChanging(value);
						SendPropertyChanging();
						_PromoterK = value;
						SendPropertyChanged("PromoterK");
						OnPromoterKChanged();
					}
				}
			}

			partial void OnTypeChanging(Model.Entities.BankExport.Types value);
			partial void OnTypeChanged();
			private Model.Entities.BankExport.Types _Type;
			[Column(Storage="_Type", DbType="Int", CanBeNull=false)]
			public  override Model.Entities.BankExport.Types Type {
				get { return _Type; }
				set {
					if (_Type != value) {
						OnTypeChanging(value);
						SendPropertyChanging();
						_Type = value;
						SendPropertyChanged("Type");
						OnTypeChanged();
					}
				}
			}

			partial void OnAmountChanging(decimal value);
			partial void OnAmountChanged();
			private decimal _Amount;
			[Column(Storage="_Amount", DbType="Decimal(18,2)", CanBeNull=false)]
			public  override decimal Amount {
				get { return _Amount; }
				set {
					if (_Amount != value) {
						OnAmountChanging(value);
						SendPropertyChanging();
						_Amount = value;
						SendPropertyChanged("Amount");
						OnAmountChanged();
					}
				}
			}

			partial void OnBatchRefChanging(string value);
			partial void OnBatchRefChanged();
			private string _BatchRef;
			[Column(Storage="_BatchRef", DbType="VarChar(18)", CanBeNull=false)]
			public  override string BatchRef {
				get { return _BatchRef; }
				set {
					if (_BatchRef != value) {
						OnBatchRefChanging(value);
						SendPropertyChanging();
						_BatchRef = value;
						SendPropertyChanged("BatchRef");
						OnBatchRefChanged();
					}
				}
			}

			partial void OnStatusChanging(Model.Entities.BankExport.Statuses value);
			partial void OnStatusChanged();
			private Model.Entities.BankExport.Statuses _Status;
			[Column(Storage="_Status", DbType="Int", CanBeNull=false)]
			public  override Model.Entities.BankExport.Statuses Status {
				get { return _Status; }
				set {
					if (_Status != value) {
						OnStatusChanging(value);
						SendPropertyChanging();
						_Status = value;
						SendPropertyChanged("Status");
						OnStatusChanged();
					}
				}
			}

			partial void OnBankNameChanging(string value);
			partial void OnBankNameChanged();
			private string _BankName;
			[Column(Storage="_BankName", DbType="VarChar(35)", CanBeNull=false)]
			public  override string BankName {
				get { return _BankName; }
				set {
					if (_BankName != value) {
						OnBankNameChanging(value);
						SendPropertyChanging();
						_BankName = value;
						SendPropertyChanged("BankName");
						OnBankNameChanged();
					}
				}
			}

			partial void OnBankAccountSortCodeChanging(string value);
			partial void OnBankAccountSortCodeChanged();
			private string _BankAccountSortCode;
			[Column(Storage="_BankAccountSortCode", DbType="VarChar(20)", CanBeNull=false)]
			public  override string BankAccountSortCode {
				get { return _BankAccountSortCode; }
				set {
					if (_BankAccountSortCode != value) {
						OnBankAccountSortCodeChanging(value);
						SendPropertyChanging();
						_BankAccountSortCode = value;
						SendPropertyChanged("BankAccountSortCode");
						OnBankAccountSortCodeChanged();
					}
				}
			}

			partial void OnBankAccountNumberChanging(string value);
			partial void OnBankAccountNumberChanged();
			private string _BankAccountNumber;
			[Column(Storage="_BankAccountNumber", DbType="VarChar(25)", CanBeNull=false)]
			public  override string BankAccountNumber {
				get { return _BankAccountNumber; }
				set {
					if (_BankAccountNumber != value) {
						OnBankAccountNumberChanging(value);
						SendPropertyChanging();
						_BankAccountNumber = value;
						SendPropertyChanged("BankAccountNumber");
						OnBankAccountNumberChanged();
					}
				}
			}

			partial void OnDetailsChanging(string value);
			partial void OnDetailsChanged();
			private string _Details;
			[Column(Storage="_Details", DbType="VarChar(4000)", CanBeNull=false)]
			public  override string Details {
				get { return _Details; }
				set {
					if (_Details != value) {
						OnDetailsChanging(value);
						SendPropertyChanging();
						_Details = value;
						SendPropertyChanged("Details");
						OnDetailsChanged();
					}
				}
			}

			partial void OnReferenceDateTimeChanging(DateTime value);
			partial void OnReferenceDateTimeChanged();
			private DateTime _ReferenceDateTime;
			[Column(Storage="_ReferenceDateTime", DbType="DateTime", CanBeNull=false)]
			public  override DateTime ReferenceDateTime {
				get { return _ReferenceDateTime; }
				set {
					if (_ReferenceDateTime != value) {
						OnReferenceDateTimeChanging(value);
						SendPropertyChanging();
						_ReferenceDateTime = value;
						SendPropertyChanged("ReferenceDateTime");
						OnReferenceDateTimeChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.Banner")]
 		public partial class Banner : Model.Entities.Banner, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public Banner()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnKChanging(int value);
			partial void OnKChanged();
			private int _K;
			[Column(Storage="_K", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
			public  override int K {
				get { return _K; }
				set {
					if (_K != value) {
						OnKChanging(value);
						SendPropertyChanging();
						_K = value;
						SendPropertyChanged("K");
						OnKChanged();
					}
				}
			}

			partial void OnNameChanging(string value);
			partial void OnNameChanged();
			private string _Name;
			[Column(Storage="_Name", DbType="VarChar(250)", CanBeNull=false)]
			public  override string Name {
				get { return _Name; }
				set {
					if (_Name != value) {
						OnNameChanging(value);
						SendPropertyChanging();
						_Name = value;
						SendPropertyChanged("Name");
						OnNameChanged();
					}
				}
			}

			partial void OnFirstDayChanging(DateTime value);
			partial void OnFirstDayChanged();
			private DateTime _FirstDay;
			[Column(Storage="_FirstDay", DbType="DateTime", CanBeNull=false)]
			public  override DateTime FirstDay {
				get { return _FirstDay; }
				set {
					if (_FirstDay != value) {
						OnFirstDayChanging(value);
						SendPropertyChanging();
						_FirstDay = value;
						SendPropertyChanged("FirstDay");
						OnFirstDayChanged();
					}
				}
			}

			partial void OnLastDayChanging(DateTime value);
			partial void OnLastDayChanged();
			private DateTime _LastDay;
			[Column(Storage="_LastDay", DbType="DateTime", CanBeNull=false)]
			public  override DateTime LastDay {
				get { return _LastDay; }
				set {
					if (_LastDay != value) {
						OnLastDayChanging(value);
						SendPropertyChanging();
						_LastDay = value;
						SendPropertyChanged("LastDay");
						OnLastDayChanged();
					}
				}
			}

			partial void OnEventKChanging(int value);
			partial void OnEventKChanged();
			private int _EventK;
			[Column(Storage="_EventK", DbType="Int", CanBeNull=false)]
			public  override int EventK {
				get { return _EventK; }
				set {
					if (_EventK != value) {
						OnEventKChanging(value);
						SendPropertyChanging();
						_EventK = value;
						SendPropertyChanged("EventK");
						OnEventKChanged();
					}
				}
			}

			partial void OnDisplayTypeChanging(Model.Entities.Banner.DisplayTypes value);
			partial void OnDisplayTypeChanged();
			private Model.Entities.Banner.DisplayTypes _DisplayType;
			[Column(Storage="_DisplayType", DbType="Int", CanBeNull=false)]
			public  override Model.Entities.Banner.DisplayTypes DisplayType {
				get { return _DisplayType; }
				set {
					if (_DisplayType != value) {
						OnDisplayTypeChanging(value);
						SendPropertyChanging();
						_DisplayType = value;
						SendPropertyChanged("DisplayType");
						OnDisplayTypeChanged();
					}
				}
			}

			partial void OnMiscKChanging(int value);
			partial void OnMiscKChanged();
			private int _MiscK;
			[Column(Storage="_MiscK", DbType="Int", CanBeNull=false)]
			public  override int MiscK {
				get { return _MiscK; }
				set {
					if (_MiscK != value) {
						OnMiscKChanging(value);
						SendPropertyChanging();
						_MiscK = value;
						SendPropertyChanged("MiscK");
						OnMiscKChanged();
					}
				}
			}

			partial void OnMiscGuidChanging(Guid value);
			partial void OnMiscGuidChanged();
			private Guid _MiscGuid;
			[Column(Storage="_MiscGuid", DbType="UniqueIdentifier", CanBeNull=false)]
			public  override Guid MiscGuid {
				get { return _MiscGuid; }
				set {
					if (_MiscGuid != value) {
						OnMiscGuidChanging(value);
						SendPropertyChanging();
						_MiscGuid = value;
						SendPropertyChanged("MiscGuid");
						OnMiscGuidChanged();
					}
				}
			}

			partial void OnCustomHtmlChanging(string value);
			partial void OnCustomHtmlChanged();
			private string _CustomHtml;
			[Column(Storage="_CustomHtml", DbType="Text", CanBeNull=false)]
			public  override string CustomHtml {
				get { return _CustomHtml; }
				set {
					if (_CustomHtml != value) {
						OnCustomHtmlChanging(value);
						SendPropertyChanging();
						_CustomHtml = value;
						SendPropertyChanged("CustomHtml");
						OnCustomHtmlChanged();
					}
				}
			}

			partial void OnCustomXmlChanging(string value);
			partial void OnCustomXmlChanged();
			private string _CustomXml;
			[Column(Storage="_CustomXml", DbType="Text", CanBeNull=false)]
			public  override string CustomXml {
				get { return _CustomXml; }
				set {
					if (_CustomXml != value) {
						OnCustomXmlChanging(value);
						SendPropertyChanging();
						_CustomXml = value;
						SendPropertyChanged("CustomXml");
						OnCustomXmlChanged();
					}
				}
			}

			partial void OnPositionChanging(Model.Entities.Banner.Positions value);
			partial void OnPositionChanged();
			private Model.Entities.Banner.Positions _Position;
			[Column(Storage="_Position", DbType="Int", CanBeNull=false)]
			public  override Model.Entities.Banner.Positions Position {
				get { return _Position; }
				set {
					if (_Position != value) {
						OnPositionChanging(value);
						SendPropertyChanging();
						_Position = value;
						SendPropertyChanged("Position");
						OnPositionChanged();
					}
				}
			}

			partial void OnStatusChanging(Model.Entities.Banner.StatusEnum value);
			partial void OnStatusChanged();
			private Model.Entities.Banner.StatusEnum _Status;
			[Column(Storage="_Status", DbType="Int", CanBeNull=false)]
			public  override Model.Entities.Banner.StatusEnum Status {
				get { return _Status; }
				set {
					if (_Status != value) {
						OnStatusChanging(value);
						SendPropertyChanging();
						_Status = value;
						SendPropertyChanged("Status");
						OnStatusChanged();
					}
				}
			}

			partial void OnAdminNoteChanging(string value);
			partial void OnAdminNoteChanged();
			private string _AdminNote;
			[Column(Storage="_AdminNote", DbType="Text", CanBeNull=false)]
			public  override string AdminNote {
				get { return _AdminNote; }
				set {
					if (_AdminNote != value) {
						OnAdminNoteChanging(value);
						SendPropertyChanging();
						_AdminNote = value;
						SendPropertyChanged("AdminNote");
						OnAdminNoteChanged();
					}
				}
			}

			partial void OnUsrKChanging(int value);
			partial void OnUsrKChanged();
			private int _UsrK;
			[Column(Storage="_UsrK", DbType="Int", CanBeNull=false)]
			public  override int UsrK {
				get { return _UsrK; }
				set {
					if (_UsrK != value) {
						OnUsrKChanging(value);
						SendPropertyChanging();
						_UsrK = value;
						SendPropertyChanged("UsrK");
						OnUsrKChanged();
					}
				}
			}

			partial void OnPromoterKChanging(int value);
			partial void OnPromoterKChanged();
			private int _PromoterK;
			[Column(Storage="_PromoterK", DbType="Int", CanBeNull=false)]
			public  override int PromoterK {
				get { return _PromoterK; }
				set {
					if (_PromoterK != value) {
						OnPromoterKChanging(value);
						SendPropertyChanging();
						_PromoterK = value;
						SendPropertyChanged("PromoterK");
						OnPromoterKChanged();
					}
				}
			}

			partial void OnBrandKChanging(int value);
			partial void OnBrandKChanged();
			private int _BrandK;
			[Column(Storage="_BrandK", DbType="Int", CanBeNull=false)]
			public  override int BrandK {
				get { return _BrandK; }
				set {
					if (_BrandK != value) {
						OnBrandKChanging(value);
						SendPropertyChanging();
						_BrandK = value;
						SendPropertyChanged("BrandK");
						OnBrandKChanged();
					}
				}
			}

			partial void OnLinkUrlChanging(string value);
			partial void OnLinkUrlChanged();
			private string _LinkUrl;
			[Column(Storage="_LinkUrl", DbType="VarChar(250)", CanBeNull=false)]
			public  override string LinkUrl {
				get { return _LinkUrl; }
				set {
					if (_LinkUrl != value) {
						OnLinkUrlChanging(value);
						SendPropertyChanging();
						_LinkUrl = value;
						SendPropertyChanged("LinkUrl");
						OnLinkUrlChanged();
					}
				}
			}

			partial void OnIsMusicTargettedChanging(bool value);
			partial void OnIsMusicTargettedChanged();
			private bool _IsMusicTargetted;
			[Column(Storage="_IsMusicTargetted", DbType="Bit", CanBeNull=false)]
			public  override bool IsMusicTargetted {
				get { return _IsMusicTargetted; }
				set {
					if (_IsMusicTargetted != value) {
						OnIsMusicTargettedChanging(value);
						SendPropertyChanging();
						_IsMusicTargetted = value;
						SendPropertyChanged("IsMusicTargetted");
						OnIsMusicTargettedChanged();
					}
				}
			}

			partial void OnIsPlaceTargettedChanging(bool value);
			partial void OnIsPlaceTargettedChanged();
			private bool _IsPlaceTargetted;
			[Column(Storage="_IsPlaceTargetted", DbType="Bit", CanBeNull=false)]
			public  override bool IsPlaceTargetted {
				get { return _IsPlaceTargetted; }
				set {
					if (_IsPlaceTargetted != value) {
						OnIsPlaceTargettedChanging(value);
						SendPropertyChanging();
						_IsPlaceTargetted = value;
						SendPropertyChanged("IsPlaceTargetted");
						OnIsPlaceTargettedChanged();
					}
				}
			}

			partial void OnLinkTargetChanging(Model.Entities.Banner.LinkTargets value);
			partial void OnLinkTargetChanged();
			private Model.Entities.Banner.LinkTargets _LinkTarget;
			[Column(Storage="_LinkTarget", DbType="Int", CanBeNull=false)]
			public  override Model.Entities.Banner.LinkTargets LinkTarget {
				get { return _LinkTarget; }
				set {
					if (_LinkTarget != value) {
						OnLinkTargetChanging(value);
						SendPropertyChanging();
						_LinkTarget = value;
						SendPropertyChanged("LinkTarget");
						OnLinkTargetChanged();
					}
				}
			}

			partial void OnIsPriceFixedChanging(bool value);
			partial void OnIsPriceFixedChanged();
			private bool _IsPriceFixed;
			[Column(Storage="_IsPriceFixed", DbType="Bit", CanBeNull=false)]
			public  override bool IsPriceFixed {
				get { return _IsPriceFixed; }
				set {
					if (_IsPriceFixed != value) {
						OnIsPriceFixedChanging(value);
						SendPropertyChanging();
						_IsPriceFixed = value;
						SendPropertyChanged("IsPriceFixed");
						OnIsPriceFixedChanged();
					}
				}
			}

			partial void OnPriceStoredChanging(double value);
			partial void OnPriceStoredChanged();
			private double _PriceStored;
			[Column(Storage="_PriceStored", DbType="Float", CanBeNull=false)]
			public  override double PriceStored {
				get { return _PriceStored; }
				set {
					if (_PriceStored != value) {
						OnPriceStoredChanging(value);
						SendPropertyChanging();
						_PriceStored = value;
						SendPropertyChanged("PriceStored");
						OnPriceStoredChanged();
					}
				}
			}

			partial void OnNewMiscKChanging(int value);
			partial void OnNewMiscKChanged();
			private int _NewMiscK;
			[Column(Storage="_NewMiscK", DbType="Int", CanBeNull=false)]
			public  override int NewMiscK {
				get { return _NewMiscK; }
				set {
					if (_NewMiscK != value) {
						OnNewMiscKChanging(value);
						SendPropertyChanging();
						_NewMiscK = value;
						SendPropertyChanged("NewMiscK");
						OnNewMiscKChanged();
					}
				}
			}

			partial void OnCustomiseFirstLineChanging(string value);
			partial void OnCustomiseFirstLineChanged();
			private string _CustomiseFirstLine;
			[Column(Storage="_CustomiseFirstLine", DbType="VarChar(255)", CanBeNull=false)]
			public  override string CustomiseFirstLine {
				get { return _CustomiseFirstLine; }
				set {
					if (_CustomiseFirstLine != value) {
						OnCustomiseFirstLineChanging(value);
						SendPropertyChanging();
						_CustomiseFirstLine = value;
						SendPropertyChanged("CustomiseFirstLine");
						OnCustomiseFirstLineChanged();
					}
				}
			}

			partial void OnCustomiseFirstLineSizeChanging(int value);
			partial void OnCustomiseFirstLineSizeChanged();
			private int _CustomiseFirstLineSize;
			[Column(Storage="_CustomiseFirstLineSize", DbType="Int", CanBeNull=false)]
			public  override int CustomiseFirstLineSize {
				get { return _CustomiseFirstLineSize; }
				set {
					if (_CustomiseFirstLineSize != value) {
						OnCustomiseFirstLineSizeChanging(value);
						SendPropertyChanging();
						_CustomiseFirstLineSize = value;
						SendPropertyChanged("CustomiseFirstLineSize");
						OnCustomiseFirstLineSizeChanged();
					}
				}
			}

			partial void OnCustomiseSecondLineChanging(string value);
			partial void OnCustomiseSecondLineChanged();
			private string _CustomiseSecondLine;
			[Column(Storage="_CustomiseSecondLine", DbType="VarChar(255)", CanBeNull=false)]
			public  override string CustomiseSecondLine {
				get { return _CustomiseSecondLine; }
				set {
					if (_CustomiseSecondLine != value) {
						OnCustomiseSecondLineChanging(value);
						SendPropertyChanging();
						_CustomiseSecondLine = value;
						SendPropertyChanged("CustomiseSecondLine");
						OnCustomiseSecondLineChanged();
					}
				}
			}

			partial void OnCustomiseThirdLineChanging(string value);
			partial void OnCustomiseThirdLineChanged();
			private string _CustomiseThirdLine;
			[Column(Storage="_CustomiseThirdLine", DbType="VarChar(255)", CanBeNull=false)]
			public  override string CustomiseThirdLine {
				get { return _CustomiseThirdLine; }
				set {
					if (_CustomiseThirdLine != value) {
						OnCustomiseThirdLineChanging(value);
						SendPropertyChanging();
						_CustomiseThirdLine = value;
						SendPropertyChanged("CustomiseThirdLine");
						OnCustomiseThirdLineChanged();
					}
				}
			}

			partial void OnFailedMiscKChanging(int value);
			partial void OnFailedMiscKChanged();
			private int _FailedMiscK;
			[Column(Storage="_FailedMiscK", DbType="Int", CanBeNull=false)]
			public  override int FailedMiscK {
				get { return _FailedMiscK; }
				set {
					if (_FailedMiscK != value) {
						OnFailedMiscKChanging(value);
						SendPropertyChanging();
						_FailedMiscK = value;
						SendPropertyChanged("FailedMiscK");
						OnFailedMiscKChanged();
					}
				}
			}

			partial void OnDesignTypeChanging(Model.Entities.Banner.DesignTypes value);
			partial void OnDesignTypeChanged();
			private Model.Entities.Banner.DesignTypes _DesignType;
			[Column(Storage="_DesignType", DbType="Int", CanBeNull=false)]
			public  override Model.Entities.Banner.DesignTypes DesignType {
				get { return _DesignType; }
				set {
					if (_DesignType != value) {
						OnDesignTypeChanging(value);
						SendPropertyChanging();
						_DesignType = value;
						SendPropertyChanged("DesignType");
						OnDesignTypeChanged();
					}
				}
			}

			partial void OnBuyableLockDateTimeChanging(DateTime value);
			partial void OnBuyableLockDateTimeChanged();
			private DateTime _BuyableLockDateTime;
			[Column(Storage="_BuyableLockDateTime", DbType="DateTime", CanBeNull=false)]
			public  override DateTime BuyableLockDateTime {
				get { return _BuyableLockDateTime; }
				set {
					if (_BuyableLockDateTime != value) {
						OnBuyableLockDateTimeChanging(value);
						SendPropertyChanging();
						_BuyableLockDateTime = value;
						SendPropertyChanged("BuyableLockDateTime");
						OnBuyableLockDateTimeChanged();
					}
				}
			}

			partial void OnDesignProcessedChanging(bool value);
			partial void OnDesignProcessedChanged();
			private bool _DesignProcessed;
			[Column(Storage="_DesignProcessed", DbType="Bit", CanBeNull=false)]
			public  override bool DesignProcessed {
				get { return _DesignProcessed; }
				set {
					if (_DesignProcessed != value) {
						OnDesignProcessedChanging(value);
						SendPropertyChanging();
						_DesignProcessed = value;
						SendPropertyChanged("DesignProcessed");
						OnDesignProcessedChanged();
					}
				}
			}

			partial void OnFrequencyCapPerIdentifierPerDayChanging(int value);
			partial void OnFrequencyCapPerIdentifierPerDayChanged();
			private int _FrequencyCapPerIdentifierPerDay;
			[Column(Storage="_FrequencyCapPerIdentifierPerDay", DbType="Int NOT NULL", CanBeNull=false)]
			public  override int FrequencyCapPerIdentifierPerDay {
				get { return _FrequencyCapPerIdentifierPerDay; }
				set {
					if (_FrequencyCapPerIdentifierPerDay != value) {
						OnFrequencyCapPerIdentifierPerDayChanging(value);
						SendPropertyChanging();
						_FrequencyCapPerIdentifierPerDay = value;
						SendPropertyChanged("FrequencyCapPerIdentifierPerDay");
						OnFrequencyCapPerIdentifierPerDayChanged();
					}
				}
			}

			partial void OnTargettingProperties0Changing(long value);
			partial void OnTargettingProperties0Changed();
			private long _TargettingProperties0;
			[Column(Storage="_TargettingProperties0", DbType="BigInt NOT NULL", CanBeNull=false)]
			public  override long TargettingProperties0 {
				get { return _TargettingProperties0; }
				set {
					if (_TargettingProperties0 != value) {
						OnTargettingProperties0Changing(value);
						SendPropertyChanging();
						_TargettingProperties0 = value;
						SendPropertyChanged("TargettingProperties0");
						OnTargettingProperties0Changed();
					}
				}
			}

			partial void OnTargettingProperties1Changing(long value);
			partial void OnTargettingProperties1Changed();
			private long _TargettingProperties1;
			[Column(Storage="_TargettingProperties1", DbType="BigInt NOT NULL", CanBeNull=false)]
			public  override long TargettingProperties1 {
				get { return _TargettingProperties1; }
				set {
					if (_TargettingProperties1 != value) {
						OnTargettingProperties1Changing(value);
						SendPropertyChanging();
						_TargettingProperties1 = value;
						SendPropertyChanged("TargettingProperties1");
						OnTargettingProperties1Changed();
					}
				}
			}

			partial void OnTotalRequiredImpressionsChanging(int value);
			partial void OnTotalRequiredImpressionsChanged();
			private int _TotalRequiredImpressions;
			[Column(Storage="_TotalRequiredImpressions", DbType="Int", CanBeNull=false)]
			public  override int TotalRequiredImpressions {
				get { return _TotalRequiredImpressions; }
				set {
					if (_TotalRequiredImpressions != value) {
						OnTotalRequiredImpressionsChanging(value);
						SendPropertyChanging();
						_TotalRequiredImpressions = value;
						SendPropertyChanged("TotalRequiredImpressions");
						OnTotalRequiredImpressionsChanged();
					}
				}
			}

			partial void OnBannerFolderKChanging(int value);
			partial void OnBannerFolderKChanged();
			private int _BannerFolderK;
			[Column(Storage="_BannerFolderK", DbType="Int", CanBeNull=false)]
			public  override int BannerFolderK {
				get { return _BannerFolderK; }
				set {
					if (_BannerFolderK != value) {
						OnBannerFolderKChanging(value);
						SendPropertyChanging();
						_BannerFolderK = value;
						SendPropertyChanged("BannerFolderK");
						OnBannerFolderKChanged();
					}
				}
			}

			partial void OnVenueKChanging(int value);
			partial void OnVenueKChanged();
			private int _VenueK;
			[Column(Storage="_VenueK", DbType="Int", CanBeNull=false)]
			public  override int VenueK {
				get { return _VenueK; }
				set {
					if (_VenueK != value) {
						OnVenueKChanging(value);
						SendPropertyChanging();
						_VenueK = value;
						SendPropertyChanged("VenueK");
						OnVenueKChanged();
					}
				}
			}

			partial void OnAutomaticDatesChanging(bool value);
			partial void OnAutomaticDatesChanged();
			private bool _AutomaticDates;
			[Column(Storage="_AutomaticDates", DbType="Bit", CanBeNull=false)]
			public  override bool AutomaticDates {
				get { return _AutomaticDates; }
				set {
					if (_AutomaticDates != value) {
						OnAutomaticDatesChanging(value);
						SendPropertyChanging();
						_AutomaticDates = value;
						SendPropertyChanged("AutomaticDates");
						OnAutomaticDatesChanged();
					}
				}
			}

			partial void OnAutomaticDatesWeeksChanging(int value);
			partial void OnAutomaticDatesWeeksChanged();
			private int _AutomaticDatesWeeks;
			[Column(Storage="_AutomaticDatesWeeks", DbType="Int", CanBeNull=false)]
			public  override int AutomaticDatesWeeks {
				get { return _AutomaticDatesWeeks; }
				set {
					if (_AutomaticDatesWeeks != value) {
						OnAutomaticDatesWeeksChanging(value);
						SendPropertyChanging();
						_AutomaticDatesWeeks = value;
						SendPropertyChanged("AutomaticDatesWeeks");
						OnAutomaticDatesWeeksChanged();
					}
				}
			}

			partial void OnAutomaticTargettingChanging(bool value);
			partial void OnAutomaticTargettingChanged();
			private bool _AutomaticTargetting;
			[Column(Storage="_AutomaticTargetting", DbType="Bit", CanBeNull=false)]
			public  override bool AutomaticTargetting {
				get { return _AutomaticTargetting; }
				set {
					if (_AutomaticTargetting != value) {
						OnAutomaticTargettingChanging(value);
						SendPropertyChanging();
						_AutomaticTargetting = value;
						SendPropertyChanged("AutomaticTargetting");
						OnAutomaticTargettingChanged();
					}
				}
			}

			partial void OnAutomaticExposureChanging(bool value);
			partial void OnAutomaticExposureChanged();
			private bool _AutomaticExposure;
			[Column(Storage="_AutomaticExposure", DbType="Bit", CanBeNull=false)]
			public  override bool AutomaticExposure {
				get { return _AutomaticExposure; }
				set {
					if (_AutomaticExposure != value) {
						OnAutomaticExposureChanging(value);
						SendPropertyChanging();
						_AutomaticExposure = value;
						SendPropertyChanged("AutomaticExposure");
						OnAutomaticExposureChanged();
					}
				}
			}

			partial void OnAutomaticExposureLevelChanging(Model.Entities.Banner.ExposureLevels value);
			partial void OnAutomaticExposureLevelChanged();
			private Model.Entities.Banner.ExposureLevels _AutomaticExposureLevel;
			[Column(Storage="_AutomaticExposureLevel", DbType="Int", CanBeNull=false)]
			public  override Model.Entities.Banner.ExposureLevels AutomaticExposureLevel {
				get { return _AutomaticExposureLevel; }
				set {
					if (_AutomaticExposureLevel != value) {
						OnAutomaticExposureLevelChanging(value);
						SendPropertyChanging();
						_AutomaticExposureLevel = value;
						SendPropertyChanged("AutomaticExposureLevel");
						OnAutomaticExposureLevelChanged();
					}
				}
			}

			partial void OnStatusEnabledChanging(bool value);
			partial void OnStatusEnabledChanged();
			private bool _StatusEnabled;
			[Column(Storage="_StatusEnabled", DbType="Bit", CanBeNull=false)]
			public  override bool StatusEnabled {
				get { return _StatusEnabled; }
				set {
					if (_StatusEnabled != value) {
						OnStatusEnabledChanging(value);
						SendPropertyChanging();
						_StatusEnabled = value;
						SendPropertyChanged("StatusEnabled");
						OnStatusEnabledChanged();
					}
				}
			}

			partial void OnStatusBookedChanging(bool value);
			partial void OnStatusBookedChanged();
			private bool _StatusBooked;
			[Column(Storage="_StatusBooked", DbType="Bit", CanBeNull=false)]
			public  override bool StatusBooked {
				get { return _StatusBooked; }
				set {
					if (_StatusBooked != value) {
						OnStatusBookedChanging(value);
						SendPropertyChanging();
						_StatusBooked = value;
						SendPropertyChanged("StatusBooked");
						OnStatusBookedChanged();
					}
				}
			}

			partial void OnStatusArtworkChanging(bool value);
			partial void OnStatusArtworkChanged();
			private bool _StatusArtwork;
			[Column(Storage="_StatusArtwork", DbType="Bit", CanBeNull=false)]
			public  override bool StatusArtwork {
				get { return _StatusArtwork; }
				set {
					if (_StatusArtwork != value) {
						OnStatusArtworkChanging(value);
						SendPropertyChanging();
						_StatusArtwork = value;
						SendPropertyChanged("StatusArtwork");
						OnStatusArtworkChanged();
					}
				}
			}

			partial void OnRefundedChanging(bool value);
			partial void OnRefundedChanged();
			private bool _Refunded;
			[Column(Storage="_Refunded", DbType="Bit", CanBeNull=false)]
			public  override bool Refunded {
				get { return _Refunded; }
				set {
					if (_Refunded != value) {
						OnRefundedChanging(value);
						SendPropertyChanging();
						_Refunded = value;
						SendPropertyChanged("Refunded");
						OnRefundedChanged();
					}
				}
			}

			partial void OnRefundedCreditsChanging(int value);
			partial void OnRefundedCreditsChanged();
			private int _RefundedCredits;
			[Column(Storage="_RefundedCredits", DbType="Int", CanBeNull=false)]
			public  override int RefundedCredits {
				get { return _RefundedCredits; }
				set {
					if (_RefundedCredits != value) {
						OnRefundedCreditsChanging(value);
						SendPropertyChanging();
						_RefundedCredits = value;
						SendPropertyChanged("RefundedCredits");
						OnRefundedCreditsChanged();
					}
				}
			}

			partial void OnRefundCampaignCreditKChanging(int value);
			partial void OnRefundCampaignCreditKChanged();
			private int _RefundCampaignCreditK;
			[Column(Storage="_RefundCampaignCreditK", DbType="Int", CanBeNull=false)]
			public  override int RefundCampaignCreditK {
				get { return _RefundCampaignCreditK; }
				set {
					if (_RefundCampaignCreditK != value) {
						OnRefundCampaignCreditKChanging(value);
						SendPropertyChanging();
						_RefundCampaignCreditK = value;
						SendPropertyChanged("RefundCampaignCreditK");
						OnRefundCampaignCreditKChanged();
					}
				}
			}

			partial void OnDuplicateGuidChanging(Guid value);
			partial void OnDuplicateGuidChanged();
			private Guid _DuplicateGuid;
			[Column(Storage="_DuplicateGuid", DbType="UniqueIdentifier", CanBeNull=false)]
			public  override Guid DuplicateGuid {
				get { return _DuplicateGuid; }
				set {
					if (_DuplicateGuid != value) {
						OnDuplicateGuidChanging(value);
						SendPropertyChanging();
						_DuplicateGuid = value;
						SendPropertyChanged("DuplicateGuid");
						OnDuplicateGuidChanged();
					}
				}
			}

			partial void OnPriceCreditsStoredChanging(int value);
			partial void OnPriceCreditsStoredChanged();
			private int _PriceCreditsStored;
			[Column(Storage="_PriceCreditsStored", DbType="Int", CanBeNull=false)]
			public  override int PriceCreditsStored {
				get { return _PriceCreditsStored; }
				set {
					if (_PriceCreditsStored != value) {
						OnPriceCreditsStoredChanging(value);
						SendPropertyChanging();
						_PriceCreditsStored = value;
						SendPropertyChanged("PriceCreditsStored");
						OnPriceCreditsStoredChanged();
					}
				}
			}

			partial void OnFixedDiscountChanging(double value);
			partial void OnFixedDiscountChanged();
			private double _FixedDiscount;
			[Column(Storage="_FixedDiscount", DbType="Float", CanBeNull=false)]
			public  override double FixedDiscount {
				get { return _FixedDiscount; }
				set {
					if (_FixedDiscount != value) {
						OnFixedDiscountChanging(value);
						SendPropertyChanging();
						_FixedDiscount = value;
						SendPropertyChanged("FixedDiscount");
						OnFixedDiscountChanged();
					}
				}
			}

			partial void OnPriorityChanging(int value);
			partial void OnPriorityChanged();
			private int _Priority;
			[Column(Storage="_Priority", DbType="Int NOT NULL", CanBeNull=false)]
			public  override int Priority {
				get { return _Priority; }
				set {
					if (_Priority != value) {
						OnPriorityChanging(value);
						SendPropertyChanging();
						_Priority = value;
						SendPropertyChanged("Priority");
						OnPriorityChanged();
					}
				}
			}

			partial void OnAlwaysShowChanging(bool value);
			partial void OnAlwaysShowChanged();
			private bool _AlwaysShow;
			[Column(Storage="_AlwaysShow", DbType="Bit NOT NULL", CanBeNull=false)]
			public  override bool AlwaysShow {
				get { return _AlwaysShow; }
				set {
					if (_AlwaysShow != value) {
						OnAlwaysShowChanging(value);
						SendPropertyChanging();
						_AlwaysShow = value;
						SendPropertyChanged("AlwaysShow");
						OnAlwaysShowChanged();
					}
				}
			}

			partial void OnIsCancelledChanging(bool value);
			partial void OnIsCancelledChanged();
			private bool _IsCancelled;
			[Column(Storage="_IsCancelled", DbType="Bit", CanBeNull=false)]
			public  override bool IsCancelled {
				get { return _IsCancelled; }
				set {
					if (_IsCancelled != value) {
						OnIsCancelledChanging(value);
						SendPropertyChanging();
						_IsCancelled = value;
						SendPropertyChanged("IsCancelled");
						OnIsCancelledChanged();
					}
				}
			}

			partial void OnDisplayDurationChanging(int? value);
			partial void OnDisplayDurationChanged();
			private int? _DisplayDuration;
			[Column(Storage="_DisplayDuration", DbType="Int")]
			public  override int? DisplayDuration {
				get { return _DisplayDuration; }
				set {
					if (_DisplayDuration != value) {
						OnDisplayDurationChanging(value);
						SendPropertyChanging();
						_DisplayDuration = value;
						SendPropertyChanged("DisplayDuration");
						OnDisplayDurationChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.BannerFolder")]
 		public partial class BannerFolder : Model.Entities.BannerFolder, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public BannerFolder()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnKChanging(int value);
			partial void OnKChanged();
			private int _K;
			[Column(Storage="_K", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
			public  override int K {
				get { return _K; }
				set {
					if (_K != value) {
						OnKChanging(value);
						SendPropertyChanging();
						_K = value;
						SendPropertyChanged("K");
						OnKChanged();
					}
				}
			}

			partial void OnNameChanging(string value);
			partial void OnNameChanged();
			private string _Name;
			[Column(Storage="_Name", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
			public  override string Name {
				get { return _Name; }
				set {
					if (_Name != value) {
						OnNameChanging(value);
						SendPropertyChanging();
						_Name = value;
						SendPropertyChanged("Name");
						OnNameChanged();
					}
				}
			}

			partial void OnPromoterKChanging(int value);
			partial void OnPromoterKChanged();
			private int _PromoterK;
			[Column(Storage="_PromoterK", DbType="Int NOT NULL", CanBeNull=false)]
			public  override int PromoterK {
				get { return _PromoterK; }
				set {
					if (_PromoterK != value) {
						OnPromoterKChanging(value);
						SendPropertyChanging();
						_PromoterK = value;
						SendPropertyChanged("PromoterK");
						OnPromoterKChanged();
					}
				}
			}

			partial void OnDateTimeCreatedChanging(DateTime value);
			partial void OnDateTimeCreatedChanged();
			private DateTime _DateTimeCreated;
			[Column(Storage="_DateTimeCreated", DbType="DateTime NOT NULL", CanBeNull=false)]
			public  override DateTime DateTimeCreated {
				get { return _DateTimeCreated; }
				set {
					if (_DateTimeCreated != value) {
						OnDateTimeCreatedChanging(value);
						SendPropertyChanging();
						_DateTimeCreated = value;
						SendPropertyChanged("DateTimeCreated");
						OnDateTimeCreatedChanged();
					}
				}
			}

			partial void OnEventKChanging(int value);
			partial void OnEventKChanged();
			private int _EventK;
			[Column(Storage="_EventK", DbType="Int", CanBeNull=false)]
			public  override int EventK {
				get { return _EventK; }
				set {
					if (_EventK != value) {
						OnEventKChanging(value);
						SendPropertyChanging();
						_EventK = value;
						SendPropertyChanged("EventK");
						OnEventKChanged();
					}
				}
			}

			partial void OnDuplicateGuidChanging(Guid value);
			partial void OnDuplicateGuidChanged();
			private Guid _DuplicateGuid;
			[Column(Storage="_DuplicateGuid", DbType="UniqueIdentifier", CanBeNull=false)]
			public  override Guid DuplicateGuid {
				get { return _DuplicateGuid; }
				set {
					if (_DuplicateGuid != value) {
						OnDuplicateGuidChanging(value);
						SendPropertyChanging();
						_DuplicateGuid = value;
						SendPropertyChanged("DuplicateGuid");
						OnDuplicateGuidChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.BannerMusicType")]
 		public partial class BannerMusicType : Model.Entities.BannerMusicType, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public BannerMusicType()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnBannerKChanging(int value);
			partial void OnBannerKChanged();
			private int _BannerK;
			[Column(Storage="_BannerK", DbType="Int", CanBeNull=false)]
			public  override int BannerK {
				get { return _BannerK; }
				set {
					if (_BannerK != value) {
						OnBannerKChanging(value);
						SendPropertyChanging();
						_BannerK = value;
						SendPropertyChanged("BannerK");
						OnBannerKChanged();
					}
				}
			}

			partial void OnMusicTypeKChanging(int value);
			partial void OnMusicTypeKChanged();
			private int _MusicTypeK;
			[Column(Storage="_MusicTypeK", DbType="Int", CanBeNull=false)]
			public  override int MusicTypeK {
				get { return _MusicTypeK; }
				set {
					if (_MusicTypeK != value) {
						OnMusicTypeKChanging(value);
						SendPropertyChanging();
						_MusicTypeK = value;
						SendPropertyChanged("MusicTypeK");
						OnMusicTypeKChanged();
					}
				}
			}

			partial void OnChosenChanging(bool value);
			partial void OnChosenChanged();
			private bool _Chosen;
			[Column(Storage="_Chosen", DbType="Bit", CanBeNull=false)]
			public  override bool Chosen {
				get { return _Chosen; }
				set {
					if (_Chosen != value) {
						OnChosenChanging(value);
						SendPropertyChanging();
						_Chosen = value;
						SendPropertyChanged("Chosen");
						OnChosenChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.BannerPlace")]
 		public partial class BannerPlace : Model.Entities.BannerPlace, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public BannerPlace()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnBannerKChanging(int value);
			partial void OnBannerKChanged();
			private int _BannerK;
			[Column(Storage="_BannerK", DbType="Int", CanBeNull=false)]
			public  override int BannerK {
				get { return _BannerK; }
				set {
					if (_BannerK != value) {
						OnBannerKChanging(value);
						SendPropertyChanging();
						_BannerK = value;
						SendPropertyChanged("BannerK");
						OnBannerKChanged();
					}
				}
			}

			partial void OnPlaceKChanging(int value);
			partial void OnPlaceKChanged();
			private int _PlaceK;
			[Column(Storage="_PlaceK", DbType="Int", CanBeNull=false)]
			public  override int PlaceK {
				get { return _PlaceK; }
				set {
					if (_PlaceK != value) {
						OnPlaceKChanging(value);
						SendPropertyChanging();
						_PlaceK = value;
						SendPropertyChanged("PlaceK");
						OnPlaceKChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.BannerStat")]
 		public partial class BannerStat : Model.Entities.BannerStat, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public BannerStat()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnBannerKChanging(int value);
			partial void OnBannerKChanged();
			private int _BannerK;
			[Column(Storage="_BannerK", DbType="Int NOT NULL", IsPrimaryKey=true)]
			public  override int BannerK {
				get { return _BannerK; }
				set {
					if (_BannerK != value) {
						OnBannerKChanging(value);
						SendPropertyChanging();
						_BannerK = value;
						SendPropertyChanged("BannerK");
						OnBannerKChanged();
					}
				}
			}

			partial void OnDateChanging(DateTime value);
			partial void OnDateChanged();
			private DateTime _Date;
			[Column(Storage="_Date", DbType="DateTime NOT NULL", IsPrimaryKey=true)]
			public  override DateTime Date {
				get { return _Date; }
				set {
					if (_Date != value) {
						OnDateChanging(value);
						SendPropertyChanging();
						_Date = value;
						SendPropertyChanged("Date");
						OnDateChanged();
					}
				}
			}

			partial void OnHitsChanging(int value);
			partial void OnHitsChanged();
			private int _Hits;
			[Column(Storage="_Hits", DbType="Int", CanBeNull=false)]
			public  override int Hits {
				get { return _Hits; }
				set {
					if (_Hits != value) {
						OnHitsChanging(value);
						SendPropertyChanging();
						_Hits = value;
						SendPropertyChanged("Hits");
						OnHitsChanged();
					}
				}
			}

			partial void OnClicksChanging(int value);
			partial void OnClicksChanged();
			private int _Clicks;
			[Column(Storage="_Clicks", DbType="Int", CanBeNull=false)]
			public  override int Clicks {
				get { return _Clicks; }
				set {
					if (_Clicks != value) {
						OnClicksChanging(value);
						SendPropertyChanging();
						_Clicks = value;
						SendPropertyChanged("Clicks");
						OnClicksChanged();
					}
				}
			}

			partial void OnHitsTargettedChanging(int value);
			partial void OnHitsTargettedChanged();
			private int _HitsTargetted;
			[Column(Storage="_HitsTargetted", DbType="Int", CanBeNull=false)]
			public  override int HitsTargetted {
				get { return _HitsTargetted; }
				set {
					if (_HitsTargetted != value) {
						OnHitsTargettedChanging(value);
						SendPropertyChanging();
						_HitsTargetted = value;
						SendPropertyChanged("HitsTargetted");
						OnHitsTargettedChanged();
					}
				}
			}

			partial void OnHitsPlaceTargettedChanging(int value);
			partial void OnHitsPlaceTargettedChanged();
			private int _HitsPlaceTargetted;
			[Column(Storage="_HitsPlaceTargetted", DbType="Int", CanBeNull=false)]
			public  override int HitsPlaceTargetted {
				get { return _HitsPlaceTargetted; }
				set {
					if (_HitsPlaceTargetted != value) {
						OnHitsPlaceTargettedChanging(value);
						SendPropertyChanging();
						_HitsPlaceTargetted = value;
						SendPropertyChanged("HitsPlaceTargetted");
						OnHitsPlaceTargettedChanged();
					}
				}
			}

			partial void OnHitsMusicTargettedChanging(int value);
			partial void OnHitsMusicTargettedChanged();
			private int _HitsMusicTargetted;
			[Column(Storage="_HitsMusicTargetted", DbType="Int", CanBeNull=false)]
			public  override int HitsMusicTargetted {
				get { return _HitsMusicTargetted; }
				set {
					if (_HitsMusicTargetted != value) {
						OnHitsMusicTargettedChanging(value);
						SendPropertyChanging();
						_HitsMusicTargetted = value;
						SendPropertyChanged("HitsMusicTargetted");
						OnHitsMusicTargettedChanged();
					}
				}
			}

			partial void OnClicksPlaceTargettedChanging(int value);
			partial void OnClicksPlaceTargettedChanged();
			private int _ClicksPlaceTargetted;
			[Column(Storage="_ClicksPlaceTargetted", DbType="Int", CanBeNull=false)]
			public  override int ClicksPlaceTargetted {
				get { return _ClicksPlaceTargetted; }
				set {
					if (_ClicksPlaceTargetted != value) {
						OnClicksPlaceTargettedChanging(value);
						SendPropertyChanging();
						_ClicksPlaceTargetted = value;
						SendPropertyChanged("ClicksPlaceTargetted");
						OnClicksPlaceTargettedChanged();
					}
				}
			}

			partial void OnClicksMusicTargettedChanging(int value);
			partial void OnClicksMusicTargettedChanged();
			private int _ClicksMusicTargetted;
			[Column(Storage="_ClicksMusicTargetted", DbType="Int", CanBeNull=false)]
			public  override int ClicksMusicTargetted {
				get { return _ClicksMusicTargetted; }
				set {
					if (_ClicksMusicTargetted != value) {
						OnClicksMusicTargettedChanging(value);
						SendPropertyChanging();
						_ClicksMusicTargetted = value;
						SendPropertyChanged("ClicksMusicTargetted");
						OnClicksMusicTargettedChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.BinRange")]
 		public partial class BinRange : Model.Entities.BinRange, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public BinRange()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnLowChanging(int value);
			partial void OnLowChanged();
			private int _Low;
			[Column(Storage="_Low", DbType="Int NOT NULL", CanBeNull=false)]
			public  override int Low {
				get { return _Low; }
				set {
					if (_Low != value) {
						OnLowChanging(value);
						SendPropertyChanging();
						_Low = value;
						SendPropertyChanged("Low");
						OnLowChanged();
					}
				}
			}

			partial void OnHighChanging(int value);
			partial void OnHighChanged();
			private int _High;
			[Column(Storage="_High", DbType="Int NOT NULL", CanBeNull=false)]
			public  override int High {
				get { return _High; }
				set {
					if (_High != value) {
						OnHighChanging(value);
						SendPropertyChanging();
						_High = value;
						SendPropertyChanged("High");
						OnHighChanged();
					}
				}
			}

			partial void OnTypeChanging(Model.Entities.BinRange.Types value);
			partial void OnTypeChanged();
			private Model.Entities.BinRange.Types _Type;
			[Column(Storage="_Type", DbType="Int", CanBeNull=false)]
			public  override Model.Entities.BinRange.Types Type {
				get { return _Type; }
				set {
					if (_Type != value) {
						OnTypeChanging(value);
						SendPropertyChanging();
						_Type = value;
						SendPropertyChanged("Type");
						OnTypeChanged();
					}
				}
			}

			partial void OnOrderChanging(int value);
			partial void OnOrderChanged();
			private int _Order;
			[Column(Storage="_Order", DbType="Int", CanBeNull=false)]
			public  override int Order {
				get { return _Order; }
				set {
					if (_Order != value) {
						OnOrderChanging(value);
						SendPropertyChanging();
						_Order = value;
						SendPropertyChanged("Order");
						OnOrderChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.Brand")]
 		public partial class Brand : Model.Entities.Brand, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public Brand()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnKChanging(int value);
			partial void OnKChanged();
			private int _K;
			[Column(Storage="_K", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
			public  override int K {
				get { return _K; }
				set {
					if (_K != value) {
						OnKChanging(value);
						SendPropertyChanging();
						_K = value;
						SendPropertyChanged("K");
						OnKChanged();
					}
				}
			}

			partial void OnNameChanging(string value);
			partial void OnNameChanged();
			private string _Name;
			[Column(Storage="_Name", DbType="VarChar(200)", CanBeNull=false)]
			public  override string Name {
				get { return _Name; }
				set {
					if (_Name != value) {
						OnNameChanging(value);
						SendPropertyChanging();
						_Name = value;
						SendPropertyChanged("Name");
						OnNameChanged();
					}
				}
			}

			partial void OnPromoterKChanging(int value);
			partial void OnPromoterKChanged();
			private int _PromoterK;
			[Column(Storage="_PromoterK", DbType="Int", CanBeNull=false)]
			public  override int PromoterK {
				get { return _PromoterK; }
				set {
					if (_PromoterK != value) {
						OnPromoterKChanging(value);
						SendPropertyChanging();
						_PromoterK = value;
						SendPropertyChanged("PromoterK");
						OnPromoterKChanged();
					}
				}
			}

			partial void OnPicChanging(Guid value);
			partial void OnPicChanged();
			private Guid _Pic;
			[Column(Storage="_Pic", DbType="UniqueIdentifier", CanBeNull=false)]
			public  override Guid Pic {
				get { return _Pic; }
				set {
					if (_Pic != value) {
						OnPicChanging(value);
						SendPropertyChanging();
						_Pic = value;
						SendPropertyChanged("Pic");
						OnPicChanged();
					}
				}
			}

			partial void OnOwnerUsrKChanging(int value);
			partial void OnOwnerUsrKChanged();
			private int _OwnerUsrK;
			[Column(Storage="_OwnerUsrK", DbType="Int", CanBeNull=false)]
			public  override int OwnerUsrK {
				get { return _OwnerUsrK; }
				set {
					if (_OwnerUsrK != value) {
						OnOwnerUsrKChanging(value);
						SendPropertyChanging();
						_OwnerUsrK = value;
						SendPropertyChanged("OwnerUsrK");
						OnOwnerUsrKChanged();
					}
				}
			}

			partial void OnIsNewChanging(bool value);
			partial void OnIsNewChanged();
			private bool _IsNew;
			[Column(Storage="_IsNew", DbType="Bit", CanBeNull=false)]
			public  override bool IsNew {
				get { return _IsNew; }
				set {
					if (_IsNew != value) {
						OnIsNewChanging(value);
						SendPropertyChanging();
						_IsNew = value;
						SendPropertyChanged("IsNew");
						OnIsNewChanged();
					}
				}
			}

			partial void OnIsEditedChanging(bool value);
			partial void OnIsEditedChanged();
			private bool _IsEdited;
			[Column(Storage="_IsEdited", DbType="Bit", CanBeNull=false)]
			public  override bool IsEdited {
				get { return _IsEdited; }
				set {
					if (_IsEdited != value) {
						OnIsEditedChanging(value);
						SendPropertyChanging();
						_IsEdited = value;
						SendPropertyChanged("IsEdited");
						OnIsEditedChanged();
					}
				}
			}

			partial void OnDuplicateGuidChanging(Guid value);
			partial void OnDuplicateGuidChanged();
			private Guid _DuplicateGuid;
			[Column(Storage="_DuplicateGuid", DbType="UniqueIdentifier", CanBeNull=false)]
			public  override Guid DuplicateGuid {
				get { return _DuplicateGuid; }
				set {
					if (_DuplicateGuid != value) {
						OnDuplicateGuidChanging(value);
						SendPropertyChanging();
						_DuplicateGuid = value;
						SendPropertyChanged("DuplicateGuid");
						OnDuplicateGuidChanged();
					}
				}
			}

			partial void OnPromoterStatusChanging(Model.Entities.Brand.PromoterStatusEnum value);
			partial void OnPromoterStatusChanged();
			private Model.Entities.Brand.PromoterStatusEnum _PromoterStatus;
			[Column(Storage="_PromoterStatus", DbType="Int", CanBeNull=false)]
			public  override Model.Entities.Brand.PromoterStatusEnum PromoterStatus {
				get { return _PromoterStatus; }
				set {
					if (_PromoterStatus != value) {
						OnPromoterStatusChanging(value);
						SendPropertyChanging();
						_PromoterStatus = value;
						SendPropertyChanged("PromoterStatus");
						OnPromoterStatusChanged();
					}
				}
			}

			partial void OnUrlNameChanging(string value);
			partial void OnUrlNameChanged();
			private string _UrlName;
			[Column(Storage="_UrlName", DbType="VarChar(200)", CanBeNull=false)]
			public  override string UrlName {
				get { return _UrlName; }
				set {
					if (_UrlName != value) {
						OnUrlNameChanging(value);
						SendPropertyChanging();
						_UrlName = value;
						SendPropertyChanged("UrlName");
						OnUrlNameChanged();
					}
				}
			}

			partial void OnPicStateChanging(string value);
			partial void OnPicStateChanged();
			private string _PicState;
			[Column(Storage="_PicState", DbType="VarChar(100)", CanBeNull=false)]
			public  override string PicState {
				get { return _PicState; }
				set {
					if (_PicState != value) {
						OnPicStateChanging(value);
						SendPropertyChanging();
						_PicState = value;
						SendPropertyChanged("PicState");
						OnPicStateChanged();
					}
				}
			}

			partial void OnPicPhotoKChanging(int value);
			partial void OnPicPhotoKChanged();
			private int _PicPhotoK;
			[Column(Storage="_PicPhotoK", DbType="Int", CanBeNull=false)]
			public  override int PicPhotoK {
				get { return _PicPhotoK; }
				set {
					if (_PicPhotoK != value) {
						OnPicPhotoKChanging(value);
						SendPropertyChanging();
						_PicPhotoK = value;
						SendPropertyChanged("PicPhotoK");
						OnPicPhotoKChanged();
					}
				}
			}

			partial void OnPicMiscKChanging(int value);
			partial void OnPicMiscKChanged();
			private int _PicMiscK;
			[Column(Storage="_PicMiscK", DbType="Int", CanBeNull=false)]
			public  override int PicMiscK {
				get { return _PicMiscK; }
				set {
					if (_PicMiscK != value) {
						OnPicMiscKChanging(value);
						SendPropertyChanging();
						_PicMiscK = value;
						SendPropertyChanged("PicMiscK");
						OnPicMiscKChanged();
					}
				}
			}

			partial void OnGroupKChanging(int value);
			partial void OnGroupKChanged();
			private int _GroupK;
			[Column(Storage="_GroupK", DbType="Int", CanBeNull=false)]
			public  override int GroupK {
				get { return _GroupK; }
				set {
					if (_GroupK != value) {
						OnGroupKChanging(value);
						SendPropertyChanging();
						_GroupK = value;
						SendPropertyChanged("GroupK");
						OnGroupKChanged();
					}
				}
			}

			partial void OnTotalCommentsChanging(int value);
			partial void OnTotalCommentsChanged();
			private int _TotalComments;
			[Column(Storage="_TotalComments", DbType="Int", CanBeNull=false)]
			public  override int TotalComments {
				get { return _TotalComments; }
				set {
					if (_TotalComments != value) {
						OnTotalCommentsChanging(value);
						SendPropertyChanging();
						_TotalComments = value;
						SendPropertyChanged("TotalComments");
						OnTotalCommentsChanged();
					}
				}
			}

			partial void OnLastPostChanging(DateTime value);
			partial void OnLastPostChanged();
			private DateTime _LastPost;
			[Column(Storage="_LastPost", DbType="DateTime", CanBeNull=false)]
			public  override DateTime LastPost {
				get { return _LastPost; }
				set {
					if (_LastPost != value) {
						OnLastPostChanging(value);
						SendPropertyChanging();
						_LastPost = value;
						SendPropertyChanged("LastPost");
						OnLastPostChanged();
					}
				}
			}

			partial void OnAverageCommentDateTimeChanging(DateTime value);
			partial void OnAverageCommentDateTimeChanged();
			private DateTime _AverageCommentDateTime;
			[Column(Storage="_AverageCommentDateTime", DbType="DateTime", CanBeNull=false)]
			public  override DateTime AverageCommentDateTime {
				get { return _AverageCommentDateTime; }
				set {
					if (_AverageCommentDateTime != value) {
						OnAverageCommentDateTimeChanging(value);
						SendPropertyChanging();
						_AverageCommentDateTime = value;
						SendPropertyChanged("AverageCommentDateTime");
						OnAverageCommentDateTimeChanged();
					}
				}
			}

			partial void OnDateTimeCreatedChanging(DateTime value);
			partial void OnDateTimeCreatedChanged();
			private DateTime _DateTimeCreated;
			[Column(Storage="_DateTimeCreated", DbType="DateTime", CanBeNull=false)]
			public  override DateTime DateTimeCreated {
				get { return _DateTimeCreated; }
				set {
					if (_DateTimeCreated != value) {
						OnDateTimeCreatedChanging(value);
						SendPropertyChanging();
						_DateTimeCreated = value;
						SendPropertyChanged("DateTimeCreated");
						OnDateTimeCreatedChanged();
					}
				}
			}

			partial void OnNoPhotosChanging(bool value);
			partial void OnNoPhotosChanged();
			private bool _NoPhotos;
			[Column(Storage="_NoPhotos", DbType="Bit", CanBeNull=false)]
			public  override bool NoPhotos {
				get { return _NoPhotos; }
				set {
					if (_NoPhotos != value) {
						OnNoPhotosChanging(value);
						SendPropertyChanging();
						_NoPhotos = value;
						SendPropertyChanged("NoPhotos");
						OnNoPhotosChanged();
					}
				}
			}

			partial void OnAddedRegularsChanging(bool value);
			partial void OnAddedRegularsChanged();
			private bool _AddedRegulars;
			[Column(Storage="_AddedRegulars", DbType="Bit", CanBeNull=false)]
			public  override bool AddedRegulars {
				get { return _AddedRegulars; }
				set {
					if (_AddedRegulars != value) {
						OnAddedRegularsChanging(value);
						SendPropertyChanging();
						_AddedRegulars = value;
						SendPropertyChanged("AddedRegulars");
						OnAddedRegularsChanged();
					}
				}
			}

			partial void OnStyledCssChanging(string value);
			partial void OnStyledCssChanged();
			private string _StyledCss;
			[Column(Storage="_StyledCss", DbType="Text", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
			public  override string StyledCss {
				get { return _StyledCss; }
				set {
					if (_StyledCss != value) {
						OnStyledCssChanging(value);
						SendPropertyChanging();
						_StyledCss = value;
						SendPropertyChanged("StyledCss");
						OnStyledCssChanged();
					}
				}
			}

			partial void OnStyledXmlChanging(string value);
			partial void OnStyledXmlChanged();
			private string _StyledXml;
			[Column(Storage="_StyledXml", DbType="Text", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
			public  override string StyledXml {
				get { return _StyledXml; }
				set {
					if (_StyledXml != value) {
						OnStyledXmlChanging(value);
						SendPropertyChanging();
						_StyledXml = value;
						SendPropertyChanged("StyledXml");
						OnStyledXmlChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.Buddy")]
 		public partial class Buddy : Model.Entities.Buddy, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public Buddy()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnKChanging(int value);
			partial void OnKChanged();
			private int _K;
			[Column(Storage="_K", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
			public  override int K {
				get { return _K; }
				set {
					if (_K != value) {
						OnKChanging(value);
						SendPropertyChanging();
						_K = value;
						SendPropertyChanged("K");
						OnKChanged();
					}
				}
			}

			partial void OnUsrKChanging(int value);
			partial void OnUsrKChanged();
			private int _UsrK;
			[Column(Storage="_UsrK", DbType="Int NOT NULL", CanBeNull=false)]
			public  override int UsrK {
				get { return _UsrK; }
				set {
					if (_UsrK != value) {
						OnUsrKChanging(value);
						SendPropertyChanging();
						_UsrK = value;
						SendPropertyChanged("UsrK");
						OnUsrKChanged();
					}
				}
			}

			partial void OnBuddyUsrKChanging(int value);
			partial void OnBuddyUsrKChanged();
			private int _BuddyUsrK;
			[Column(Storage="_BuddyUsrK", DbType="Int NOT NULL", CanBeNull=false)]
			public  override int BuddyUsrK {
				get { return _BuddyUsrK; }
				set {
					if (_BuddyUsrK != value) {
						OnBuddyUsrKChanging(value);
						SendPropertyChanging();
						_BuddyUsrK = value;
						SendPropertyChanged("BuddyUsrK");
						OnBuddyUsrKChanged();
					}
				}
			}

			partial void OnFullBuddyChanging(bool value);
			partial void OnFullBuddyChanged();
			private bool _FullBuddy;
			[Column(Storage="_FullBuddy", DbType="Bit", CanBeNull=false)]
			public  override bool FullBuddy {
				get { return _FullBuddy; }
				set {
					if (_FullBuddy != value) {
						OnFullBuddyChanging(value);
						SendPropertyChanging();
						_FullBuddy = value;
						SendPropertyChanged("FullBuddy");
						OnFullBuddyChanged();
					}
				}
			}

			partial void OnLastPopupHoldOffChanging(DateTime value);
			partial void OnLastPopupHoldOffChanged();
			private DateTime _LastPopupHoldOff;
			[Column(Storage="_LastPopupHoldOff", DbType="DateTime", CanBeNull=false)]
			public  override DateTime LastPopupHoldOff {
				get { return _LastPopupHoldOff; }
				set {
					if (_LastPopupHoldOff != value) {
						OnLastPopupHoldOffChanging(value);
						SendPropertyChanging();
						_LastPopupHoldOff = value;
						SendPropertyChanged("LastPopupHoldOff");
						OnLastPopupHoldOffChanged();
					}
				}
			}

			partial void OnCanInviteChanging(bool value);
			partial void OnCanInviteChanged();
			private bool _CanInvite;
			[Column(Storage="_CanInvite", DbType="Bit", CanBeNull=false)]
			public  override bool CanInvite {
				get { return _CanInvite; }
				set {
					if (_CanInvite != value) {
						OnCanInviteChanging(value);
						SendPropertyChanging();
						_CanInvite = value;
						SendPropertyChanged("CanInvite");
						OnCanInviteChanged();
					}
				}
			}

			partial void OnCanBuddyInviteChanging(bool value);
			partial void OnCanBuddyInviteChanged();
			private bool _CanBuddyInvite;
			[Column(Storage="_CanBuddyInvite", DbType="Bit", CanBeNull=false)]
			public  override bool CanBuddyInvite {
				get { return _CanBuddyInvite; }
				set {
					if (_CanBuddyInvite != value) {
						OnCanBuddyInviteChanging(value);
						SendPropertyChanging();
						_CanBuddyInvite = value;
						SendPropertyChanged("CanBuddyInvite");
						OnCanBuddyInviteChanged();
					}
				}
			}

			partial void OnDeniedChanging(bool value);
			partial void OnDeniedChanged();
			private bool _Denied;
			[Column(Storage="_Denied", DbType="Bit", CanBeNull=false)]
			public  override bool Denied {
				get { return _Denied; }
				set {
					if (_Denied != value) {
						OnDeniedChanging(value);
						SendPropertyChanging();
						_Denied = value;
						SendPropertyChanged("Denied");
						OnDeniedChanged();
					}
				}
			}

			partial void OnBuddyFoundByMethodChanging(Model.Entities.Buddy.BuddyFindingMethod value);
			partial void OnBuddyFoundByMethodChanged();
			private Model.Entities.Buddy.BuddyFindingMethod _BuddyFoundByMethod;
			[Column(Storage="_BuddyFoundByMethod", DbType="Int", CanBeNull=false)]
			public  override Model.Entities.Buddy.BuddyFindingMethod BuddyFoundByMethod {
				get { return _BuddyFoundByMethod; }
				set {
					if (_BuddyFoundByMethod != value) {
						OnBuddyFoundByMethodChanging(value);
						SendPropertyChanging();
						_BuddyFoundByMethod = value;
						SendPropertyChanged("BuddyFoundByMethod");
						OnBuddyFoundByMethodChanged();
					}
				}
			}

			partial void OnSkeletonNameChanging(string value);
			partial void OnSkeletonNameChanged();
			private string _SkeletonName;
			[Column(Storage="_SkeletonName", DbType="VarChar(50)", CanBeNull=false)]
			public  override string SkeletonName {
				get { return _SkeletonName; }
				set {
					if (_SkeletonName != value) {
						OnSkeletonNameChanging(value);
						SendPropertyChanging();
						_SkeletonName = value;
						SendPropertyChanged("SkeletonName");
						OnSkeletonNameChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.CampaignCredit")]
 		public partial class CampaignCredit : Model.Entities.CampaignCredit, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public CampaignCredit()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnKChanging(int value);
			partial void OnKChanged();
			private int _K;
			[Column(Storage="_K", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
			public  override int K {
				get { return _K; }
				set {
					if (_K != value) {
						OnKChanging(value);
						SendPropertyChanging();
						_K = value;
						SendPropertyChanged("K");
						OnKChanged();
					}
				}
			}

			partial void OnPromoterKChanging(int value);
			partial void OnPromoterKChanged();
			private int _PromoterK;
			[Column(Storage="_PromoterK", DbType="Int NOT NULL", CanBeNull=false)]
			public  override int PromoterK {
				get { return _PromoterK; }
				set {
					if (_PromoterK != value) {
						OnPromoterKChanging(value);
						SendPropertyChanging();
						_PromoterK = value;
						SendPropertyChanged("PromoterK");
						OnPromoterKChanged();
					}
				}
			}

			partial void OnActionDateTimeChanging(DateTime value);
			partial void OnActionDateTimeChanged();
			private DateTime _ActionDateTime;
			[Column(Storage="_ActionDateTime", DbType="DateTime", CanBeNull=false)]
			public  override DateTime ActionDateTime {
				get { return _ActionDateTime; }
				set {
					if (_ActionDateTime != value) {
						OnActionDateTimeChanging(value);
						SendPropertyChanging();
						_ActionDateTime = value;
						SendPropertyChanged("ActionDateTime");
						OnActionDateTimeChanged();
					}
				}
			}

			partial void OnBuyableObjectTypeChanging(Model.Entities.ObjectType value);
			partial void OnBuyableObjectTypeChanged();
			private Model.Entities.ObjectType _BuyableObjectType;
			[Column(Storage="_BuyableObjectType", DbType="Int", CanBeNull=false)]
			public  override Model.Entities.ObjectType BuyableObjectType {
				get { return _BuyableObjectType; }
				set {
					if (_BuyableObjectType != value) {
						OnBuyableObjectTypeChanging(value);
						SendPropertyChanging();
						_BuyableObjectType = value;
						SendPropertyChanged("BuyableObjectType");
						OnBuyableObjectTypeChanged();
					}
				}
			}

			partial void OnBuyableObjectKChanging(int value);
			partial void OnBuyableObjectKChanged();
			private int _BuyableObjectK;
			[Column(Storage="_BuyableObjectK", DbType="Int", CanBeNull=false)]
			public  override int BuyableObjectK {
				get { return _BuyableObjectK; }
				set {
					if (_BuyableObjectK != value) {
						OnBuyableObjectKChanging(value);
						SendPropertyChanging();
						_BuyableObjectK = value;
						SendPropertyChanged("BuyableObjectK");
						OnBuyableObjectKChanged();
					}
				}
			}

			partial void OnBuyableLockDateTimeChanging(DateTime value);
			partial void OnBuyableLockDateTimeChanged();
			private DateTime _BuyableLockDateTime;
			[Column(Storage="_BuyableLockDateTime", DbType="DateTime", CanBeNull=false)]
			public  override DateTime BuyableLockDateTime {
				get { return _BuyableLockDateTime; }
				set {
					if (_BuyableLockDateTime != value) {
						OnBuyableLockDateTimeChanging(value);
						SendPropertyChanging();
						_BuyableLockDateTime = value;
						SendPropertyChanged("BuyableLockDateTime");
						OnBuyableLockDateTimeChanged();
					}
				}
			}

			partial void OnInvoiceItemTypeChanging(Model.Entities.InvoiceItem.Types value);
			partial void OnInvoiceItemTypeChanged();
			private Model.Entities.InvoiceItem.Types _InvoiceItemType;
			[Column(Storage="_InvoiceItemType", DbType="Int", CanBeNull=false)]
			public  override Model.Entities.InvoiceItem.Types InvoiceItemType {
				get { return _InvoiceItemType; }
				set {
					if (_InvoiceItemType != value) {
						OnInvoiceItemTypeChanging(value);
						SendPropertyChanging();
						_InvoiceItemType = value;
						SendPropertyChanged("InvoiceItemType");
						OnInvoiceItemTypeChanged();
					}
				}
			}

			partial void OnDescriptionChanging(string value);
			partial void OnDescriptionChanged();
			private string _Description;
			[Column(Storage="_Description", DbType="VarChar(250)", CanBeNull=false)]
			public  override string Description {
				get { return _Description; }
				set {
					if (_Description != value) {
						OnDescriptionChanging(value);
						SendPropertyChanging();
						_Description = value;
						SendPropertyChanged("Description");
						OnDescriptionChanged();
					}
				}
			}

			partial void OnCreditsChanging(int value);
			partial void OnCreditsChanged();
			private int _Credits;
			[Column(Storage="_Credits", DbType="Int", CanBeNull=false)]
			public  override int Credits {
				get { return _Credits; }
				set {
					if (_Credits != value) {
						OnCreditsChanging(value);
						SendPropertyChanging();
						_Credits = value;
						SendPropertyChanged("Credits");
						OnCreditsChanged();
					}
				}
			}

			partial void OnEnabledChanging(bool value);
			partial void OnEnabledChanged();
			private bool _Enabled;
			[Column(Storage="_Enabled", DbType="Bit", CanBeNull=false)]
			public  override bool Enabled {
				get { return _Enabled; }
				set {
					if (_Enabled != value) {
						OnEnabledChanging(value);
						SendPropertyChanging();
						_Enabled = value;
						SendPropertyChanged("Enabled");
						OnEnabledChanged();
					}
				}
			}

			partial void OnBalanceToDateChanging(int value);
			partial void OnBalanceToDateChanged();
			private int _BalanceToDate;
			[Column(Storage="_BalanceToDate", DbType="Int", CanBeNull=false)]
			public  override int BalanceToDate {
				get { return _BalanceToDate; }
				set {
					if (_BalanceToDate != value) {
						OnBalanceToDateChanging(value);
						SendPropertyChanging();
						_BalanceToDate = value;
						SendPropertyChanged("BalanceToDate");
						OnBalanceToDateChanged();
					}
				}
			}

			partial void OnDisplayOrderChanging(int value);
			partial void OnDisplayOrderChanged();
			private int _DisplayOrder;
			[Column(Storage="_DisplayOrder", DbType="Int", CanBeNull=false)]
			public  override int DisplayOrder {
				get { return _DisplayOrder; }
				set {
					if (_DisplayOrder != value) {
						OnDisplayOrderChanging(value);
						SendPropertyChanging();
						_DisplayOrder = value;
						SendPropertyChanged("DisplayOrder");
						OnDisplayOrderChanged();
					}
				}
			}

			partial void OnUsrKChanging(int value);
			partial void OnUsrKChanged();
			private int _UsrK;
			[Column(Storage="_UsrK", DbType="Int", CanBeNull=false)]
			public  override int UsrK {
				get { return _UsrK; }
				set {
					if (_UsrK != value) {
						OnUsrKChanging(value);
						SendPropertyChanging();
						_UsrK = value;
						SendPropertyChanged("UsrK");
						OnUsrKChanged();
					}
				}
			}

			partial void OnActionUsrKChanging(int value);
			partial void OnActionUsrKChanged();
			private int _ActionUsrK;
			[Column(Storage="_ActionUsrK", DbType="Int", CanBeNull=false)]
			public  override int ActionUsrK {
				get { return _ActionUsrK; }
				set {
					if (_ActionUsrK != value) {
						OnActionUsrKChanging(value);
						SendPropertyChanging();
						_ActionUsrK = value;
						SendPropertyChanged("ActionUsrK");
						OnActionUsrKChanged();
					}
				}
			}

			partial void OnNotesChanging(string value);
			partial void OnNotesChanged();
			private string _Notes;
			[Column(Storage="_Notes", DbType="Text", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
			public  override string Notes {
				get { return _Notes; }
				set {
					if (_Notes != value) {
						OnNotesChanging(value);
						SendPropertyChanging();
						_Notes = value;
						SendPropertyChanged("Notes");
						OnNotesChanged();
					}
				}
			}

			partial void OnFixedDiscountChanging(double value);
			partial void OnFixedDiscountChanged();
			private double _FixedDiscount;
			[Column(Storage="_FixedDiscount", DbType="Float", CanBeNull=false)]
			public  override double FixedDiscount {
				get { return _FixedDiscount; }
				set {
					if (_FixedDiscount != value) {
						OnFixedDiscountChanging(value);
						SendPropertyChanging();
						_FixedDiscount = value;
						SendPropertyChanged("FixedDiscount");
						OnFixedDiscountChanged();
					}
				}
			}

			partial void OnIsPriceFixedChanging(bool value);
			partial void OnIsPriceFixedChanged();
			private bool _IsPriceFixed;
			[Column(Storage="_IsPriceFixed", DbType="Bit", CanBeNull=false)]
			public  override bool IsPriceFixed {
				get { return _IsPriceFixed; }
				set {
					if (_IsPriceFixed != value) {
						OnIsPriceFixedChanging(value);
						SendPropertyChanging();
						_IsPriceFixed = value;
						SendPropertyChanged("IsPriceFixed");
						OnIsPriceFixedChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.Chat")]
 		public partial class Chat : Model.Entities.Chat, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public Chat()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnUsrKChanging(int value);
			partial void OnUsrKChanged();
			private int _UsrK;
			[Column(Storage="_UsrK", DbType="Int NOT NULL", IsPrimaryKey=true)]
			public  override int UsrK {
				get { return _UsrK; }
				set {
					if (_UsrK != value) {
						OnUsrKChanging(value);
						SendPropertyChanging();
						_UsrK = value;
						SendPropertyChanged("UsrK");
						OnUsrKChanged();
					}
				}
			}

			partial void OnChatItemsChanging(string value);
			partial void OnChatItemsChanged();
			private string _ChatItems;
			[Column(Storage="_ChatItems", DbType="Text", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
			public  override string ChatItems {
				get { return _ChatItems; }
				set {
					if (_ChatItems != value) {
						OnChatItemsChanging(value);
						SendPropertyChanging();
						_ChatItems = value;
						SendPropertyChanged("ChatItems");
						OnChatItemsChanged();
					}
				}
			}

			partial void OnLastChatItemChanging(long value);
			partial void OnLastChatItemChanged();
			private long _LastChatItem;
			[Column(Storage="_LastChatItem", DbType="BigInt", CanBeNull=false)]
			public  override long LastChatItem {
				get { return _LastChatItem; }
				set {
					if (_LastChatItem != value) {
						OnLastChatItemChanging(value);
						SendPropertyChanging();
						_LastChatItem = value;
						SendPropertyChanged("LastChatItem");
						OnLastChatItemChanged();
					}
				}
			}

			partial void OnSessionIdChanging(int value);
			partial void OnSessionIdChanged();
			private int _SessionId;
			[Column(Storage="_SessionId", DbType="Int", CanBeNull=false)]
			public  override int SessionId {
				get { return _SessionId; }
				set {
					if (_SessionId != value) {
						OnSessionIdChanging(value);
						SendPropertyChanging();
						_SessionId = value;
						SendPropertyChanged("SessionId");
						OnSessionIdChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.ChatMessage")]
 		public partial class ChatMessage : Model.Entities.ChatMessage, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public ChatMessage()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnKChanging(int value);
			partial void OnKChanged();
			private int _K;
			[Column(Storage="_K", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
			public  override int K {
				get { return _K; }
				set {
					if (_K != value) {
						OnKChanging(value);
						SendPropertyChanging();
						_K = value;
						SendPropertyChanged("K");
						OnKChanged();
					}
				}
			}

			partial void OnTextChanging(string value);
			partial void OnTextChanged();
			private string _Text;
			[Column(Storage="_Text", DbType="VarChar(200)", CanBeNull=false)]
			public  override string Text {
				get { return _Text; }
				set {
					if (_Text != value) {
						OnTextChanging(value);
						SendPropertyChanging();
						_Text = value;
						SendPropertyChanged("Text");
						OnTextChanged();
					}
				}
			}

			partial void OnDateTimeChanging(DateTime value);
			partial void OnDateTimeChanged();
			private DateTime _DateTime;
			[Column(Storage="_DateTime", DbType="DateTime", CanBeNull=false)]
			public  override DateTime DateTime {
				get { return _DateTime; }
				set {
					if (_DateTime != value) {
						OnDateTimeChanging(value);
						SendPropertyChanging();
						_DateTime = value;
						SendPropertyChanged("DateTime");
						OnDateTimeChanged();
					}
				}
			}

			partial void OnUsrKChanging(int value);
			partial void OnUsrKChanged();
			private int _UsrK;
			[Column(Storage="_UsrK", DbType="Int", CanBeNull=false)]
			public  override int UsrK {
				get { return _UsrK; }
				set {
					if (_UsrK != value) {
						OnUsrKChanging(value);
						SendPropertyChanging();
						_UsrK = value;
						SendPropertyChanged("UsrK");
						OnUsrKChanged();
					}
				}
			}

			partial void OnRoomGuidChanging(Guid value);
			partial void OnRoomGuidChanged();
			private Guid _RoomGuid;
			[Column(Storage="_RoomGuid", DbType="UniqueIdentifier", CanBeNull=false)]
			public  override Guid RoomGuid {
				get { return _RoomGuid; }
				set {
					if (_RoomGuid != value) {
						OnRoomGuidChanging(value);
						SendPropertyChanging();
						_RoomGuid = value;
						SendPropertyChanged("RoomGuid");
						OnRoomGuidChanged();
					}
				}
			}

			partial void OnChatItemGuidChanging(Guid? value);
			partial void OnChatItemGuidChanged();
			private Guid? _ChatItemGuid;
			[Column(Storage="_ChatItemGuid", DbType="UniqueIdentifier")]
			public  override Guid? ChatItemGuid {
				get { return _ChatItemGuid; }
				set {
					if (_ChatItemGuid != value) {
						OnChatItemGuidChanging(value);
						SendPropertyChanging();
						_ChatItemGuid = value;
						SendPropertyChanged("ChatItemGuid");
						OnChatItemGuidChanged();
					}
				}
			}

			partial void OnDeletedChanging(bool? value);
			partial void OnDeletedChanged();
			private bool? _Deleted;
			[Column(Storage="_Deleted", DbType="Bit")]
			public  override bool? Deleted {
				get { return _Deleted; }
				set {
					if (_Deleted != value) {
						OnDeletedChanging(value);
						SendPropertyChanging();
						_Deleted = value;
						SendPropertyChanged("Deleted");
						OnDeletedChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.ClubDetails")]
 		public partial class ClubDetails : Model.Entities.ClubDetails, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public ClubDetails()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnKChanging(int value);
			partial void OnKChanged();
			private int _K;
			[Column(Storage="_K", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
			public  override int K {
				get { return _K; }
				set {
					if (_K != value) {
						OnKChanging(value);
						SendPropertyChanging();
						_K = value;
						SendPropertyChanged("K");
						OnKChanged();
					}
				}
			}

			partial void OnCompanyChanging(string value);
			partial void OnCompanyChanged();
			private string _Company;
			[Column(Storage="_Company", DbType="NVarChar(255)", CanBeNull=false)]
			public  override string Company {
				get { return _Company; }
				set {
					if (_Company != value) {
						OnCompanyChanging(value);
						SendPropertyChanging();
						_Company = value;
						SendPropertyChanged("Company");
						OnCompanyChanged();
					}
				}
			}

			partial void OnWebLinkChanging(string value);
			partial void OnWebLinkChanged();
			private string _WebLink;
			[Column(Storage="_WebLink", DbType="NVarChar(255)", CanBeNull=false)]
			public  override string WebLink {
				get { return _WebLink; }
				set {
					if (_WebLink != value) {
						OnWebLinkChanging(value);
						SendPropertyChanging();
						_WebLink = value;
						SendPropertyChanged("WebLink");
						OnWebLinkChanged();
					}
				}
			}

			partial void OnTelephoneChanging(string value);
			partial void OnTelephoneChanged();
			private string _Telephone;
			[Column(Storage="_Telephone", DbType="NVarChar(64)", CanBeNull=false)]
			public  override string Telephone {
				get { return _Telephone; }
				set {
					if (_Telephone != value) {
						OnTelephoneChanging(value);
						SendPropertyChanging();
						_Telephone = value;
						SendPropertyChanged("Telephone");
						OnTelephoneChanged();
					}
				}
			}

			partial void OnAddressChanging(string value);
			partial void OnAddressChanged();
			private string _Address;
			[Column(Storage="_Address", DbType="NVarChar(255)", CanBeNull=false)]
			public  override string Address {
				get { return _Address; }
				set {
					if (_Address != value) {
						OnAddressChanging(value);
						SendPropertyChanging();
						_Address = value;
						SendPropertyChanged("Address");
						OnAddressChanged();
					}
				}
			}

			partial void OnPostCodeChanging(string value);
			partial void OnPostCodeChanged();
			private string _PostCode;
			[Column(Storage="_PostCode", DbType="NVarChar(10)", CanBeNull=false)]
			public  override string PostCode {
				get { return _PostCode; }
				set {
					if (_PostCode != value) {
						OnPostCodeChanging(value);
						SendPropertyChanging();
						_PostCode = value;
						SendPropertyChanged("PostCode");
						OnPostCodeChanged();
					}
				}
			}

			partial void OnExtraInfoChanging(string value);
			partial void OnExtraInfoChanged();
			private string _ExtraInfo;
			[Column(Storage="_ExtraInfo", DbType="NVarChar(255)", CanBeNull=false)]
			public  override string ExtraInfo {
				get { return _ExtraInfo; }
				set {
					if (_ExtraInfo != value) {
						OnExtraInfoChanging(value);
						SendPropertyChanging();
						_ExtraInfo = value;
						SendPropertyChanged("ExtraInfo");
						OnExtraInfoChanged();
					}
				}
			}

			partial void OnPromoterKChanging(int value);
			partial void OnPromoterKChanged();
			private int _PromoterK;
			[Column(Storage="_PromoterK", DbType="Int", CanBeNull=false)]
			public  override int PromoterK {
				get { return _PromoterK; }
				set {
					if (_PromoterK != value) {
						OnPromoterKChanging(value);
						SendPropertyChanging();
						_PromoterK = value;
						SendPropertyChanged("PromoterK");
						OnPromoterKChanged();
					}
				}
			}

			partial void OnVenueKChanging(int value);
			partial void OnVenueKChanged();
			private int _VenueK;
			[Column(Storage="_VenueK", DbType="Int", CanBeNull=false)]
			public  override int VenueK {
				get { return _VenueK; }
				set {
					if (_VenueK != value) {
						OnVenueKChanging(value);
						SendPropertyChanging();
						_VenueK = value;
						SendPropertyChanged("VenueK");
						OnVenueKChanged();
					}
				}
			}

			partial void OnDoneDateChanging(DateTime value);
			partial void OnDoneDateChanged();
			private DateTime _DoneDate;
			[Column(Storage="_DoneDate", DbType="DateTime", CanBeNull=false)]
			public  override DateTime DoneDate {
				get { return _DoneDate; }
				set {
					if (_DoneDate != value) {
						OnDoneDateChanging(value);
						SendPropertyChanging();
						_DoneDate = value;
						SendPropertyChanged("DoneDate");
						OnDoneDateChanged();
					}
				}
			}

			partial void OnDeadChanging(int value);
			partial void OnDeadChanged();
			private int _Dead;
			[Column(Storage="_Dead", DbType="Int", CanBeNull=false)]
			public  override int Dead {
				get { return _Dead; }
				set {
					if (_Dead != value) {
						OnDeadChanging(value);
						SendPropertyChanging();
						_Dead = value;
						SendPropertyChanged("Dead");
						OnDeadChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.Comment")]
 		public partial class Comment : Model.Entities.Comment, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public Comment()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnKChanging(int value);
			partial void OnKChanged();
			private int _K;
			[Column(Storage="_K", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
			public  override int K {
				get { return _K; }
				set {
					if (_K != value) {
						OnKChanging(value);
						SendPropertyChanging();
						_K = value;
						SendPropertyChanged("K");
						OnKChanged();
					}
				}
			}

			partial void OnTextChanging(string value);
			partial void OnTextChanged();
			private string _Text;
			[Column(Storage="_Text", DbType="Text", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
			public  override string Text {
				get { return _Text; }
				set {
					if (_Text != value) {
						OnTextChanging(value);
						SendPropertyChanging();
						_Text = value;
						SendPropertyChanged("Text");
						OnTextChanged();
					}
				}
			}

			partial void OnDateTimeChanging(DateTime value);
			partial void OnDateTimeChanged();
			private DateTime _DateTime;
			[Column(Storage="_DateTime", DbType="DateTime", CanBeNull=false)]
			public  override DateTime DateTime {
				get { return _DateTime; }
				set {
					if (_DateTime != value) {
						OnDateTimeChanging(value);
						SendPropertyChanging();
						_DateTime = value;
						SendPropertyChanged("DateTime");
						OnDateTimeChanged();
					}
				}
			}

			partial void OnThreadKChanging(int value);
			partial void OnThreadKChanged();
			private int _ThreadK;
			[Column(Storage="_ThreadK", DbType="Int", CanBeNull=false)]
			public  override int ThreadK {
				get { return _ThreadK; }
				set {
					if (_ThreadK != value) {
						OnThreadKChanging(value);
						SendPropertyChanging();
						_ThreadK = value;
						SendPropertyChanged("ThreadK");
						OnThreadKChanged();
					}
				}
			}

			partial void OnUsrKChanging(int value);
			partial void OnUsrKChanged();
			private int _UsrK;
			[Column(Storage="_UsrK", DbType="Int", CanBeNull=false)]
			public  override int UsrK {
				get { return _UsrK; }
				set {
					if (_UsrK != value) {
						OnUsrKChanging(value);
						SendPropertyChanging();
						_UsrK = value;
						SendPropertyChanged("UsrK");
						OnUsrKChanged();
					}
				}
			}

			partial void OnEnabledChanging(bool value);
			partial void OnEnabledChanged();
			private bool _Enabled;
			[Column(Storage="_Enabled", DbType="Bit", CanBeNull=false)]
			public  override bool Enabled {
				get { return _Enabled; }
				set {
					if (_Enabled != value) {
						OnEnabledChanging(value);
						SendPropertyChanging();
						_Enabled = value;
						SendPropertyChanged("Enabled");
						OnEnabledChanged();
					}
				}
			}

			partial void OnDuplicateGuidChanging(Guid value);
			partial void OnDuplicateGuidChanged();
			private Guid _DuplicateGuid;
			[Column(Storage="_DuplicateGuid", DbType="UniqueIdentifier", CanBeNull=false)]
			public  override Guid DuplicateGuid {
				get { return _DuplicateGuid; }
				set {
					if (_DuplicateGuid != value) {
						OnDuplicateGuidChanging(value);
						SendPropertyChanging();
						_DuplicateGuid = value;
						SendPropertyChanged("DuplicateGuid");
						OnDuplicateGuidChanged();
					}
				}
			}

			partial void OnIsEditedChanging(bool value);
			partial void OnIsEditedChanged();
			private bool _IsEdited;
			[Column(Storage="_IsEdited", DbType="Bit", CanBeNull=false)]
			public  override bool IsEdited {
				get { return _IsEdited; }
				set {
					if (_IsEdited != value) {
						OnIsEditedChanging(value);
						SendPropertyChanging();
						_IsEdited = value;
						SendPropertyChanged("IsEdited");
						OnIsEditedChanged();
					}
				}
			}

			partial void OnEditDateTimeChanging(DateTime value);
			partial void OnEditDateTimeChanged();
			private DateTime _EditDateTime;
			[Column(Storage="_EditDateTime", DbType="DateTime", CanBeNull=false)]
			public  override DateTime EditDateTime {
				get { return _EditDateTime; }
				set {
					if (_EditDateTime != value) {
						OnEditDateTimeChanging(value);
						SendPropertyChanging();
						_EditDateTime = value;
						SendPropertyChanged("EditDateTime");
						OnEditDateTimeChanged();
					}
				}
			}

			partial void OnLolCountChanging(int value);
			partial void OnLolCountChanged();
			private int _LolCount;
			[Column(Storage="_LolCount", DbType="Int", CanBeNull=false)]
			public  override int LolCount {
				get { return _LolCount; }
				set {
					if (_LolCount != value) {
						OnLolCountChanging(value);
						SendPropertyChanging();
						_LolCount = value;
						SendPropertyChanged("LolCount");
						OnLolCountChanged();
					}
				}
			}

			partial void OnIndexInThreadChanging(int value);
			partial void OnIndexInThreadChanged();
			private int _IndexInThread;
			[Column(Storage="_IndexInThread", DbType="Int", CanBeNull=false)]
			public  override int IndexInThread {
				get { return _IndexInThread; }
				set {
					if (_IndexInThread != value) {
						OnIndexInThreadChanging(value);
						SendPropertyChanging();
						_IndexInThread = value;
						SendPropertyChanged("IndexInThread");
						OnIndexInThreadChanged();
					}
				}
			}

			partial void OnIpChanging(string value);
			partial void OnIpChanged();
			private string _Ip;
			[Column(Storage="_Ip", DbType="VarChar(15)", CanBeNull=false)]
			public  override string Ip {
				get { return _Ip; }
				set {
					if (_Ip != value) {
						OnIpChanging(value);
						SendPropertyChanging();
						_Ip = value;
						SendPropertyChanged("Ip");
						OnIpChanged();
					}
				}
			}

			partial void OnChatItemGuidChanging(Guid? value);
			partial void OnChatItemGuidChanged();
			private Guid? _ChatItemGuid;
			[Column(Storage="_ChatItemGuid", DbType="UniqueIdentifier")]
			public  override Guid? ChatItemGuid {
				get { return _ChatItemGuid; }
				set {
					if (_ChatItemGuid != value) {
						OnChatItemGuidChanging(value);
						SendPropertyChanging();
						_ChatItemGuid = value;
						SendPropertyChanged("ChatItemGuid");
						OnChatItemGuidChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.CommentAlert")]
 		public partial class CommentAlert : Model.Entities.CommentAlert, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public CommentAlert()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnUsrKChanging(int value);
			partial void OnUsrKChanged();
			private int _UsrK;
			[Column(Storage="_UsrK", DbType="Int", CanBeNull=false)]
			public  override int UsrK {
				get { return _UsrK; }
				set {
					if (_UsrK != value) {
						OnUsrKChanging(value);
						SendPropertyChanging();
						_UsrK = value;
						SendPropertyChanged("UsrK");
						OnUsrKChanged();
					}
				}
			}

			partial void OnParentObjectTypeChanging(Model.Entities.ObjectType value);
			partial void OnParentObjectTypeChanged();
			private Model.Entities.ObjectType _ParentObjectType;
			[Column(Storage="_ParentObjectType", DbType="Int", CanBeNull=false)]
			public  override Model.Entities.ObjectType ParentObjectType {
				get { return _ParentObjectType; }
				set {
					if (_ParentObjectType != value) {
						OnParentObjectTypeChanging(value);
						SendPropertyChanging();
						_ParentObjectType = value;
						SendPropertyChanged("ParentObjectType");
						OnParentObjectTypeChanged();
					}
				}
			}

			partial void OnParentObjectKChanging(int value);
			partial void OnParentObjectKChanged();
			private int _ParentObjectK;
			[Column(Storage="_ParentObjectK", DbType="Int", CanBeNull=false)]
			public  override int ParentObjectK {
				get { return _ParentObjectK; }
				set {
					if (_ParentObjectK != value) {
						OnParentObjectKChanging(value);
						SendPropertyChanging();
						_ParentObjectK = value;
						SendPropertyChanged("ParentObjectK");
						OnParentObjectKChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.Comp")]
 		public partial class Comp : Model.Entities.Comp, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public Comp()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnKChanging(int value);
			partial void OnKChanged();
			private int _K;
			[Column(Storage="_K", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
			public  override int K {
				get { return _K; }
				set {
					if (_K != value) {
						OnKChanging(value);
						SendPropertyChanging();
						_K = value;
						SendPropertyChanged("K");
						OnKChanged();
					}
				}
			}

			partial void OnDateTimeAddedChanging(DateTime value);
			partial void OnDateTimeAddedChanged();
			private DateTime _DateTimeAdded;
			[Column(Storage="_DateTimeAdded", DbType="DateTime", CanBeNull=false)]
			public  override DateTime DateTimeAdded {
				get { return _DateTimeAdded; }
				set {
					if (_DateTimeAdded != value) {
						OnDateTimeAddedChanging(value);
						SendPropertyChanging();
						_DateTimeAdded = value;
						SendPropertyChanged("DateTimeAdded");
						OnDateTimeAddedChanged();
					}
				}
			}

			partial void OnDateTimeStartChanging(DateTime value);
			partial void OnDateTimeStartChanged();
			private DateTime _DateTimeStart;
			[Column(Storage="_DateTimeStart", DbType="DateTime", CanBeNull=false)]
			public  override DateTime DateTimeStart {
				get { return _DateTimeStart; }
				set {
					if (_DateTimeStart != value) {
						OnDateTimeStartChanging(value);
						SendPropertyChanging();
						_DateTimeStart = value;
						SendPropertyChanged("DateTimeStart");
						OnDateTimeStartChanged();
					}
				}
			}

			partial void OnDateTimeCloseChanging(DateTime value);
			partial void OnDateTimeCloseChanged();
			private DateTime _DateTimeClose;
			[Column(Storage="_DateTimeClose", DbType="DateTime", CanBeNull=false)]
			public  override DateTime DateTimeClose {
				get { return _DateTimeClose; }
				set {
					if (_DateTimeClose != value) {
						OnDateTimeCloseChanging(value);
						SendPropertyChanging();
						_DateTimeClose = value;
						SendPropertyChanged("DateTimeClose");
						OnDateTimeCloseChanged();
					}
				}
			}

			partial void OnQuestionChanging(string value);
			partial void OnQuestionChanged();
			private string _Question;
			[Column(Storage="_Question", DbType="VarChar(200)", CanBeNull=false)]
			public  override string Question {
				get { return _Question; }
				set {
					if (_Question != value) {
						OnQuestionChanging(value);
						SendPropertyChanging();
						_Question = value;
						SendPropertyChanged("Question");
						OnQuestionChanged();
					}
				}
			}

			partial void OnAnswer1Changing(string value);
			partial void OnAnswer1Changed();
			private string _Answer1;
			[Column(Storage="_Answer1", DbType="VarChar(100)", CanBeNull=false)]
			public  override string Answer1 {
				get { return _Answer1; }
				set {
					if (_Answer1 != value) {
						OnAnswer1Changing(value);
						SendPropertyChanging();
						_Answer1 = value;
						SendPropertyChanged("Answer1");
						OnAnswer1Changed();
					}
				}
			}

			partial void OnAnswer2Changing(string value);
			partial void OnAnswer2Changed();
			private string _Answer2;
			[Column(Storage="_Answer2", DbType="VarChar(100)", CanBeNull=false)]
			public  override string Answer2 {
				get { return _Answer2; }
				set {
					if (_Answer2 != value) {
						OnAnswer2Changing(value);
						SendPropertyChanging();
						_Answer2 = value;
						SendPropertyChanged("Answer2");
						OnAnswer2Changed();
					}
				}
			}

			partial void OnAnswer3Changing(string value);
			partial void OnAnswer3Changed();
			private string _Answer3;
			[Column(Storage="_Answer3", DbType="VarChar(100)", CanBeNull=false)]
			public  override string Answer3 {
				get { return _Answer3; }
				set {
					if (_Answer3 != value) {
						OnAnswer3Changing(value);
						SendPropertyChanging();
						_Answer3 = value;
						SendPropertyChanged("Answer3");
						OnAnswer3Changed();
					}
				}
			}

			partial void OnCorrectAnswerChanging(int value);
			partial void OnCorrectAnswerChanged();
			private int _CorrectAnswer;
			[Column(Storage="_CorrectAnswer", DbType="Int", CanBeNull=false)]
			public  override int CorrectAnswer {
				get { return _CorrectAnswer; }
				set {
					if (_CorrectAnswer != value) {
						OnCorrectAnswerChanging(value);
						SendPropertyChanging();
						_CorrectAnswer = value;
						SendPropertyChanged("CorrectAnswer");
						OnCorrectAnswerChanged();
					}
				}
			}

			partial void OnPrizeChanging(string value);
			partial void OnPrizeChanged();
			private string _Prize;
			[Column(Storage="_Prize", DbType="VarChar(200)", CanBeNull=false)]
			public  override string Prize {
				get { return _Prize; }
				set {
					if (_Prize != value) {
						OnPrizeChanging(value);
						SendPropertyChanging();
						_Prize = value;
						SendPropertyChanged("Prize");
						OnPrizeChanged();
					}
				}
			}

			partial void OnPrize2Changing(string value);
			partial void OnPrize2Changed();
			private string _Prize2;
			[Column(Storage="_Prize2", DbType="VarChar(200)", CanBeNull=false)]
			public  override string Prize2 {
				get { return _Prize2; }
				set {
					if (_Prize2 != value) {
						OnPrize2Changing(value);
						SendPropertyChanging();
						_Prize2 = value;
						SendPropertyChanged("Prize2");
						OnPrize2Changed();
					}
				}
			}

			partial void OnPrize3Changing(string value);
			partial void OnPrize3Changed();
			private string _Prize3;
			[Column(Storage="_Prize3", DbType="VarChar(200)", CanBeNull=false)]
			public  override string Prize3 {
				get { return _Prize3; }
				set {
					if (_Prize3 != value) {
						OnPrize3Changing(value);
						SendPropertyChanging();
						_Prize3 = value;
						SendPropertyChanged("Prize3");
						OnPrize3Changed();
					}
				}
			}

			partial void OnSponsorDetailsChanging(string value);
			partial void OnSponsorDetailsChanged();
			private string _SponsorDetails;
			[Column(Storage="_SponsorDetails", DbType="Text", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
			public  override string SponsorDetails {
				get { return _SponsorDetails; }
				set {
					if (_SponsorDetails != value) {
						OnSponsorDetailsChanging(value);
						SendPropertyChanging();
						_SponsorDetails = value;
						SendPropertyChanged("SponsorDetails");
						OnSponsorDetailsChanged();
					}
				}
			}

			partial void OnWinnersChanging(int value);
			partial void OnWinnersChanged();
			private int _Winners;
			[Column(Storage="_Winners", DbType="Int", CanBeNull=false)]
			public  override int Winners {
				get { return _Winners; }
				set {
					if (_Winners != value) {
						OnWinnersChanging(value);
						SendPropertyChanging();
						_Winners = value;
						SendPropertyChanged("Winners");
						OnWinnersChanged();
					}
				}
			}

			partial void OnWinners2Changing(int value);
			partial void OnWinners2Changed();
			private int _Winners2;
			[Column(Storage="_Winners2", DbType="Int", CanBeNull=false)]
			public  override int Winners2 {
				get { return _Winners2; }
				set {
					if (_Winners2 != value) {
						OnWinners2Changing(value);
						SendPropertyChanging();
						_Winners2 = value;
						SendPropertyChanged("Winners2");
						OnWinners2Changed();
					}
				}
			}

			partial void OnWinners3Changing(int value);
			partial void OnWinners3Changed();
			private int _Winners3;
			[Column(Storage="_Winners3", DbType="Int", CanBeNull=false)]
			public  override int Winners3 {
				get { return _Winners3; }
				set {
					if (_Winners3 != value) {
						OnWinners3Changing(value);
						SendPropertyChanging();
						_Winners3 = value;
						SendPropertyChanged("Winners3");
						OnWinners3Changed();
					}
				}
			}

			partial void OnWinnersPickedChanging(bool value);
			partial void OnWinnersPickedChanged();
			private bool _WinnersPicked;
			[Column(Storage="_WinnersPicked", DbType="Bit", CanBeNull=false)]
			public  override bool WinnersPicked {
				get { return _WinnersPicked; }
				set {
					if (_WinnersPicked != value) {
						OnWinnersPickedChanging(value);
						SendPropertyChanging();
						_WinnersPicked = value;
						SendPropertyChanged("WinnersPicked");
						OnWinnersPickedChanged();
					}
				}
			}

			partial void OnOwnerUsrKChanging(int value);
			partial void OnOwnerUsrKChanged();
			private int _OwnerUsrK;
			[Column(Storage="_OwnerUsrK", DbType="Int", CanBeNull=false)]
			public  override int OwnerUsrK {
				get { return _OwnerUsrK; }
				set {
					if (_OwnerUsrK != value) {
						OnOwnerUsrKChanging(value);
						SendPropertyChanging();
						_OwnerUsrK = value;
						SendPropertyChanged("OwnerUsrK");
						OnOwnerUsrKChanged();
					}
				}
			}

			partial void OnIconFilenameChanging(string value);
			partial void OnIconFilenameChanged();
			private string _IconFilename;
			[Column(Storage="_IconFilename", DbType="VarChar(100)", CanBeNull=false)]
			public  override string IconFilename {
				get { return _IconFilename; }
				set {
					if (_IconFilename != value) {
						OnIconFilenameChanging(value);
						SendPropertyChanging();
						_IconFilename = value;
						SendPropertyChanged("IconFilename");
						OnIconFilenameChanged();
					}
				}
			}

			partial void OnPrizeValueRangeChanging(int value);
			partial void OnPrizeValueRangeChanged();
			private int _PrizeValueRange;
			[Column(Storage="_PrizeValueRange", DbType="Int", CanBeNull=false)]
			public  override int PrizeValueRange {
				get { return _PrizeValueRange; }
				set {
					if (_PrizeValueRange != value) {
						OnPrizeValueRangeChanging(value);
						SendPropertyChanging();
						_PrizeValueRange = value;
						SendPropertyChanged("PrizeValueRange");
						OnPrizeValueRangeChanged();
					}
				}
			}

			partial void OnEntriesChanging(int value);
			partial void OnEntriesChanged();
			private int _Entries;
			[Column(Storage="_Entries", DbType="Int", CanBeNull=false)]
			public  override int Entries {
				get { return _Entries; }
				set {
					if (_Entries != value) {
						OnEntriesChanging(value);
						SendPropertyChanging();
						_Entries = value;
						SendPropertyChanged("Entries");
						OnEntriesChanged();
					}
				}
			}

			partial void OnPicChanging(Guid value);
			partial void OnPicChanged();
			private Guid _Pic;
			[Column(Storage="_Pic", DbType="UniqueIdentifier", CanBeNull=false)]
			public  override Guid Pic {
				get { return _Pic; }
				set {
					if (_Pic != value) {
						OnPicChanging(value);
						SendPropertyChanging();
						_Pic = value;
						SendPropertyChanged("Pic");
						OnPicChanged();
					}
				}
			}

			partial void OnPicOriginalChanging(Guid value);
			partial void OnPicOriginalChanged();
			private Guid _PicOriginal;
			[Column(Storage="_PicOriginal", DbType="UniqueIdentifier", CanBeNull=false)]
			public  override Guid PicOriginal {
				get { return _PicOriginal; }
				set {
					if (_PicOriginal != value) {
						OnPicOriginalChanging(value);
						SendPropertyChanging();
						_PicOriginal = value;
						SendPropertyChanged("PicOriginal");
						OnPicOriginalChanged();
					}
				}
			}

			partial void OnDisplayTypeChanging(Model.Entities.Comp.DisplayTypes value);
			partial void OnDisplayTypeChanged();
			private Model.Entities.Comp.DisplayTypes _DisplayType;
			[Column(Storage="_DisplayType", DbType="Int", CanBeNull=false)]
			public  override Model.Entities.Comp.DisplayTypes DisplayType {
				get { return _DisplayType; }
				set {
					if (_DisplayType != value) {
						OnDisplayTypeChanging(value);
						SendPropertyChanging();
						_DisplayType = value;
						SendPropertyChanged("DisplayType");
						OnDisplayTypeChanged();
					}
				}
			}

			partial void OnStatusChanging(Model.Entities.Comp.StatusEnum value);
			partial void OnStatusChanged();
			private Model.Entities.Comp.StatusEnum _Status;
			[Column(Storage="_Status", DbType="Int", CanBeNull=false)]
			public  override Model.Entities.Comp.StatusEnum Status {
				get { return _Status; }
				set {
					if (_Status != value) {
						OnStatusChanging(value);
						SendPropertyChanging();
						_Status = value;
						SendPropertyChanged("Status");
						OnStatusChanged();
					}
				}
			}

			partial void OnPromoterKChanging(int value);
			partial void OnPromoterKChanged();
			private int _PromoterK;
			[Column(Storage="_PromoterK", DbType="Int", CanBeNull=false)]
			public  override int PromoterK {
				get { return _PromoterK; }
				set {
					if (_PromoterK != value) {
						OnPromoterKChanging(value);
						SendPropertyChanging();
						_PromoterK = value;
						SendPropertyChanged("PromoterK");
						OnPromoterKChanged();
					}
				}
			}

			partial void OnBrandKChanging(int value);
			partial void OnBrandKChanged();
			private int _BrandK;
			[Column(Storage="_BrandK", DbType="Int", CanBeNull=false)]
			public  override int BrandK {
				get { return _BrandK; }
				set {
					if (_BrandK != value) {
						OnBrandKChanging(value);
						SendPropertyChanging();
						_BrandK = value;
						SendPropertyChanged("BrandK");
						OnBrandKChanged();
					}
				}
			}

			partial void OnEventKChanging(int value);
			partial void OnEventKChanged();
			private int _EventK;
			[Column(Storage="_EventK", DbType="Int", CanBeNull=false)]
			public  override int EventK {
				get { return _EventK; }
				set {
					if (_EventK != value) {
						OnEventKChanging(value);
						SendPropertyChanging();
						_EventK = value;
						SendPropertyChanged("EventK");
						OnEventKChanged();
					}
				}
			}

			partial void OnLinkTypeChanging(Model.Entities.Comp.LinkTypes value);
			partial void OnLinkTypeChanged();
			private Model.Entities.Comp.LinkTypes _LinkType;
			[Column(Storage="_LinkType", DbType="Int", CanBeNull=false)]
			public  override Model.Entities.Comp.LinkTypes LinkType {
				get { return _LinkType; }
				set {
					if (_LinkType != value) {
						OnLinkTypeChanging(value);
						SendPropertyChanging();
						_LinkType = value;
						SendPropertyChanged("LinkType");
						OnLinkTypeChanged();
					}
				}
			}

			partial void OnPicStateChanging(string value);
			partial void OnPicStateChanged();
			private string _PicState;
			[Column(Storage="_PicState", DbType="VarChar(100)", CanBeNull=false)]
			public  override string PicState {
				get { return _PicState; }
				set {
					if (_PicState != value) {
						OnPicStateChanging(value);
						SendPropertyChanging();
						_PicState = value;
						SendPropertyChanged("PicState");
						OnPicStateChanged();
					}
				}
			}

			partial void OnPicPhotoKChanging(int value);
			partial void OnPicPhotoKChanged();
			private int _PicPhotoK;
			[Column(Storage="_PicPhotoK", DbType="Int", CanBeNull=false)]
			public  override int PicPhotoK {
				get { return _PicPhotoK; }
				set {
					if (_PicPhotoK != value) {
						OnPicPhotoKChanging(value);
						SendPropertyChanging();
						_PicPhotoK = value;
						SendPropertyChanged("PicPhotoK");
						OnPicPhotoKChanged();
					}
				}
			}

			partial void OnPicMiscKChanging(int value);
			partial void OnPicMiscKChanged();
			private int _PicMiscK;
			[Column(Storage="_PicMiscK", DbType="Int", CanBeNull=false)]
			public  override int PicMiscK {
				get { return _PicMiscK; }
				set {
					if (_PicMiscK != value) {
						OnPicMiscKChanging(value);
						SendPropertyChanging();
						_PicMiscK = value;
						SendPropertyChanged("PicMiscK");
						OnPicMiscKChanged();
					}
				}
			}

			partial void OnIsHtmlOverrideChanging(bool value);
			partial void OnIsHtmlOverrideChanged();
			private bool _IsHtmlOverride;
			[Column(Storage="_IsHtmlOverride", DbType="Bit", CanBeNull=false)]
			public  override bool IsHtmlOverride {
				get { return _IsHtmlOverride; }
				set {
					if (_IsHtmlOverride != value) {
						OnIsHtmlOverrideChanging(value);
						SendPropertyChanging();
						_IsHtmlOverride = value;
						SendPropertyChanged("IsHtmlOverride");
						OnIsHtmlOverrideChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.CompEntry")]
 		public partial class CompEntry : Model.Entities.CompEntry, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public CompEntry()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnCompKChanging(int value);
			partial void OnCompKChanged();
			private int _CompK;
			[Column(Storage="_CompK", DbType="Int", CanBeNull=false)]
			public  override int CompK {
				get { return _CompK; }
				set {
					if (_CompK != value) {
						OnCompKChanging(value);
						SendPropertyChanging();
						_CompK = value;
						SendPropertyChanged("CompK");
						OnCompKChanged();
					}
				}
			}

			partial void OnUsrKChanging(int value);
			partial void OnUsrKChanged();
			private int _UsrK;
			[Column(Storage="_UsrK", DbType="Int", CanBeNull=false)]
			public  override int UsrK {
				get { return _UsrK; }
				set {
					if (_UsrK != value) {
						OnUsrKChanging(value);
						SendPropertyChanging();
						_UsrK = value;
						SendPropertyChanged("UsrK");
						OnUsrKChanged();
					}
				}
			}

			partial void OnAnswerChanging(int value);
			partial void OnAnswerChanged();
			private int _Answer;
			[Column(Storage="_Answer", DbType="Int", CanBeNull=false)]
			public  override int Answer {
				get { return _Answer; }
				set {
					if (_Answer != value) {
						OnAnswerChanging(value);
						SendPropertyChanging();
						_Answer = value;
						SendPropertyChanged("Answer");
						OnAnswerChanged();
					}
				}
			}

			partial void OnWinnerChanging(bool value);
			partial void OnWinnerChanged();
			private bool _Winner;
			[Column(Storage="_Winner", DbType="Bit", CanBeNull=false)]
			public  override bool Winner {
				get { return _Winner; }
				set {
					if (_Winner != value) {
						OnWinnerChanging(value);
						SendPropertyChanging();
						_Winner = value;
						SendPropertyChanged("Winner");
						OnWinnerChanged();
					}
				}
			}

			partial void OnPrizeChanging(int value);
			partial void OnPrizeChanged();
			private int _Prize;
			[Column(Storage="_Prize", DbType="Int", CanBeNull=false)]
			public  override int Prize {
				get { return _Prize; }
				set {
					if (_Prize != value) {
						OnPrizeChanging(value);
						SendPropertyChanging();
						_Prize = value;
						SendPropertyChanged("Prize");
						OnPrizeChanged();
					}
				}
			}

			partial void OnWinnerThreadKChanging(int value);
			partial void OnWinnerThreadKChanged();
			private int _WinnerThreadK;
			[Column(Storage="_WinnerThreadK", DbType="Int", CanBeNull=false)]
			public  override int WinnerThreadK {
				get { return _WinnerThreadK; }
				set {
					if (_WinnerThreadK != value) {
						OnWinnerThreadKChanging(value);
						SendPropertyChanging();
						_WinnerThreadK = value;
						SendPropertyChanged("WinnerThreadK");
						OnWinnerThreadKChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.Country")]
 		public partial class Country : Model.Entities.Country, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public Country()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnKChanging(int value);
			partial void OnKChanged();
			private int _K;
			[Column(Storage="_K", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
			public  override int K {
				get { return _K; }
				set {
					if (_K != value) {
						OnKChanging(value);
						SendPropertyChanging();
						_K = value;
						SendPropertyChanged("K");
						OnKChanged();
					}
				}
			}

			partial void OnNameChanging(string value);
			partial void OnNameChanged();
			private string _Name;
			[Column(Storage="_Name", DbType="VarChar(255)", CanBeNull=false)]
			public  override string Name {
				get { return _Name; }
				set {
					if (_Name != value) {
						OnNameChanging(value);
						SendPropertyChanging();
						_Name = value;
						SendPropertyChanged("Name");
						OnNameChanged();
					}
				}
			}

			partial void OnCurrencyCodeChanging(string value);
			partial void OnCurrencyCodeChanged();
			private string _CurrencyCode;
			[Column(Storage="_CurrencyCode", DbType="VarChar(255)", CanBeNull=false)]
			public  override string CurrencyCode {
				get { return _CurrencyCode; }
				set {
					if (_CurrencyCode != value) {
						OnCurrencyCodeChanging(value);
						SendPropertyChanging();
						_CurrencyCode = value;
						SendPropertyChanged("CurrencyCode");
						OnCurrencyCodeChanged();
					}
				}
			}

			partial void OnCurrencyNameChanging(string value);
			partial void OnCurrencyNameChanged();
			private string _CurrencyName;
			[Column(Storage="_CurrencyName", DbType="VarChar(255)", CanBeNull=false)]
			public  override string CurrencyName {
				get { return _CurrencyName; }
				set {
					if (_CurrencyName != value) {
						OnCurrencyNameChanging(value);
						SendPropertyChanging();
						_CurrencyName = value;
						SendPropertyChanged("CurrencyName");
						OnCurrencyNameChanged();
					}
				}
			}

			partial void OnCurrencyDecimalsChanging(int value);
			partial void OnCurrencyDecimalsChanged();
			private int _CurrencyDecimals;
			[Column(Storage="_CurrencyDecimals", DbType="Int", CanBeNull=false)]
			public  override int CurrencyDecimals {
				get { return _CurrencyDecimals; }
				set {
					if (_CurrencyDecimals != value) {
						OnCurrencyDecimalsChanging(value);
						SendPropertyChanging();
						_CurrencyDecimals = value;
						SendPropertyChanged("CurrencyDecimals");
						OnCurrencyDecimalsChanged();
					}
				}
			}

			partial void OnRegionChanging(Model.Entities.Country.BillingRegionEnum value);
			partial void OnRegionChanged();
			private Model.Entities.Country.BillingRegionEnum _Region;
			[Column(Storage="_Region", DbType="Int", CanBeNull=false)]
			public  override Model.Entities.Country.BillingRegionEnum Region {
				get { return _Region; }
				set {
					if (_Region != value) {
						OnRegionChanging(value);
						SendPropertyChanging();
						_Region = value;
						SendPropertyChanged("Region");
						OnRegionChanged();
					}
				}
			}

			partial void OnCode2LetterChanging(string value);
			partial void OnCode2LetterChanged();
			private string _Code2Letter;
			[Column(Storage="_Code2Letter", DbType="Char(2)", CanBeNull=false)]
			public  override string Code2Letter {
				get { return _Code2Letter; }
				set {
					if (_Code2Letter != value) {
						OnCode2LetterChanging(value);
						SendPropertyChanging();
						_Code2Letter = value;
						SendPropertyChanged("Code2Letter");
						OnCode2LetterChanged();
					}
				}
			}

			partial void OnCode3LetterChanging(string value);
			partial void OnCode3LetterChanged();
			private string _Code3Letter;
			[Column(Storage="_Code3Letter", DbType="Char(3)", CanBeNull=false)]
			public  override string Code3Letter {
				get { return _Code3Letter; }
				set {
					if (_Code3Letter != value) {
						OnCode3LetterChanging(value);
						SendPropertyChanging();
						_Code3Letter = value;
						SendPropertyChanged("Code3Letter");
						OnCode3LetterChanged();
					}
				}
			}

			partial void OnCode3NumberChanging(string value);
			partial void OnCode3NumberChanged();
			private string _Code3Number;
			[Column(Storage="_Code3Number", DbType="Char(3)", CanBeNull=false)]
			public  override string Code3Number {
				get { return _Code3Number; }
				set {
					if (_Code3Number != value) {
						OnCode3NumberChanging(value);
						SendPropertyChanging();
						_Code3Number = value;
						SendPropertyChanged("Code3Number");
						OnCode3NumberChanged();
					}
				}
			}

			partial void OnEuVatCodePrefixChanging(string value);
			partial void OnEuVatCodePrefixChanged();
			private string _EuVatCodePrefix;
			[Column(Storage="_EuVatCodePrefix", DbType="Char(2)", CanBeNull=false)]
			public  override string EuVatCodePrefix {
				get { return _EuVatCodePrefix; }
				set {
					if (_EuVatCodePrefix != value) {
						OnEuVatCodePrefixChanging(value);
						SendPropertyChanging();
						_EuVatCodePrefix = value;
						SendPropertyChanged("EuVatCodePrefix");
						OnEuVatCodePrefixChanged();
					}
				}
			}

			partial void OnPlacePopulationMinimumChanging(int value);
			partial void OnPlacePopulationMinimumChanged();
			private int _PlacePopulationMinimum;
			[Column(Storage="_PlacePopulationMinimum", DbType="Int", CanBeNull=false)]
			public  override int PlacePopulationMinimum {
				get { return _PlacePopulationMinimum; }
				set {
					if (_PlacePopulationMinimum != value) {
						OnPlacePopulationMinimumChanging(value);
						SendPropertyChanging();
						_PlacePopulationMinimum = value;
						SendPropertyChanged("PlacePopulationMinimum");
						OnPlacePopulationMinimumChanged();
					}
				}
			}

			partial void OnFriendlyNameChanging(string value);
			partial void OnFriendlyNameChanged();
			private string _FriendlyName;
			[Column(Storage="_FriendlyName", DbType="VarChar(255)", CanBeNull=false)]
			public  override string FriendlyName {
				get { return _FriendlyName; }
				set {
					if (_FriendlyName != value) {
						OnFriendlyNameChanging(value);
						SendPropertyChanging();
						_FriendlyName = value;
						SendPropertyChanged("FriendlyName");
						OnFriendlyNameChanged();
					}
				}
			}

			partial void OnPostcodeTypeChanging(int value);
			partial void OnPostcodeTypeChanged();
			private int _PostcodeType;
			[Column(Storage="_PostcodeType", DbType="Int", CanBeNull=false)]
			public  override int PostcodeType {
				get { return _PostcodeType; }
				set {
					if (_PostcodeType != value) {
						OnPostcodeTypeChanging(value);
						SendPropertyChanging();
						_PostcodeType = value;
						SendPropertyChanged("PostcodeType");
						OnPostcodeTypeChanged();
					}
				}
			}

			partial void OnMatureChanging(bool value);
			partial void OnMatureChanged();
			private bool _Mature;
			[Column(Storage="_Mature", DbType="Bit", CanBeNull=false)]
			public  override bool Mature {
				get { return _Mature; }
				set {
					if (_Mature != value) {
						OnMatureChanging(value);
						SendPropertyChanging();
						_Mature = value;
						SendPropertyChanged("Mature");
						OnMatureChanged();
					}
				}
			}

			partial void OnUseRegionChanging(bool value);
			partial void OnUseRegionChanged();
			private bool _UseRegion;
			[Column(Storage="_UseRegion", DbType="Bit", CanBeNull=false)]
			public  override bool UseRegion {
				get { return _UseRegion; }
				set {
					if (_UseRegion != value) {
						OnUseRegionChanging(value);
						SendPropertyChanging();
						_UseRegion = value;
						SendPropertyChanged("UseRegion");
						OnUseRegionChanged();
					}
				}
			}

			partial void OnRegionNameChanging(string value);
			partial void OnRegionNameChanged();
			private string _RegionName;
			[Column(Storage="_RegionName", DbType="VarChar(50)", CanBeNull=false)]
			public  override string RegionName {
				get { return _RegionName; }
				set {
					if (_RegionName != value) {
						OnRegionNameChanging(value);
						SendPropertyChanging();
						_RegionName = value;
						SendPropertyChanged("RegionName");
						OnRegionNameChanged();
					}
				}
			}

			partial void OnEnabledChanging(bool value);
			partial void OnEnabledChanged();
			private bool _Enabled;
			[Column(Storage="_Enabled", DbType="Bit", CanBeNull=false)]
			public  override bool Enabled {
				get { return _Enabled; }
				set {
					if (_Enabled != value) {
						OnEnabledChanging(value);
						SendPropertyChanging();
						_Enabled = value;
						SendPropertyChanged("Enabled");
						OnEnabledChanged();
					}
				}
			}

			partial void OnMinEventsForPlaceMenuChanging(int value);
			partial void OnMinEventsForPlaceMenuChanged();
			private int _MinEventsForPlaceMenu;
			[Column(Storage="_MinEventsForPlaceMenu", DbType="Int", CanBeNull=false)]
			public  override int MinEventsForPlaceMenu {
				get { return _MinEventsForPlaceMenu; }
				set {
					if (_MinEventsForPlaceMenu != value) {
						OnMinEventsForPlaceMenuChanging(value);
						SendPropertyChanging();
						_MinEventsForPlaceMenu = value;
						SendPropertyChanged("MinEventsForPlaceMenu");
						OnMinEventsForPlaceMenuChanged();
					}
				}
			}

			partial void OnDialingCodeChanging(int value);
			partial void OnDialingCodeChanged();
			private int _DialingCode;
			[Column(Storage="_DialingCode", DbType="Int", CanBeNull=false)]
			public  override int DialingCode {
				get { return _DialingCode; }
				set {
					if (_DialingCode != value) {
						OnDialingCodeChanging(value);
						SendPropertyChanging();
						_DialingCode = value;
						SendPropertyChanged("DialingCode");
						OnDialingCodeChanged();
					}
				}
			}

			partial void OnTotalEventsChanging(int value);
			partial void OnTotalEventsChanged();
			private int _TotalEvents;
			[Column(Storage="_TotalEvents", DbType="Int", CanBeNull=false)]
			public  override int TotalEvents {
				get { return _TotalEvents; }
				set {
					if (_TotalEvents != value) {
						OnTotalEventsChanging(value);
						SendPropertyChanging();
						_TotalEvents = value;
						SendPropertyChanged("TotalEvents");
						OnTotalEventsChanged();
					}
				}
			}

			partial void OnUrlNameChanging(string value);
			partial void OnUrlNameChanged();
			private string _UrlName;
			[Column(Storage="_UrlName", DbType="VarChar(255)", CanBeNull=false)]
			public  override string UrlName {
				get { return _UrlName; }
				set {
					if (_UrlName != value) {
						OnUrlNameChanging(value);
						SendPropertyChanging();
						_UrlName = value;
						SendPropertyChanged("UrlName");
						OnUrlNameChanged();
					}
				}
			}

			partial void OnCustomHtmlChanging(string value);
			partial void OnCustomHtmlChanged();
			private string _CustomHtml;
			[Column(Storage="_CustomHtml", DbType="Text", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
			public  override string CustomHtml {
				get { return _CustomHtml; }
				set {
					if (_CustomHtml != value) {
						OnCustomHtmlChanging(value);
						SendPropertyChanging();
						_CustomHtml = value;
						SendPropertyChanged("CustomHtml");
						OnCustomHtmlChanged();
					}
				}
			}

			partial void OnPostageZoneChanging(Model.Entities.Country.PostageZones value);
			partial void OnPostageZoneChanged();
			private Model.Entities.Country.PostageZones _PostageZone;
			[Column(Storage="_PostageZone", DbType="Int", CanBeNull=false)]
			public  override Model.Entities.Country.PostageZones PostageZone {
				get { return _PostageZone; }
				set {
					if (_PostageZone != value) {
						OnPostageZoneChanging(value);
						SendPropertyChanging();
						_PostageZone = value;
						SendPropertyChanged("PostageZone");
						OnPostageZoneChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.Demographics")]
 		public partial class Demographics : Model.Entities.Demographics, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public Demographics()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnGuidChanging(Guid value);
			partial void OnGuidChanged();
			private Guid _Guid;
			[Column(Storage="_Guid", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
			public  override Guid Guid {
				get { return _Guid; }
				set {
					if (_Guid != value) {
						OnGuidChanging(value);
						SendPropertyChanging();
						_Guid = value;
						SendPropertyChanged("Guid");
						OnGuidChanged();
					}
				}
			}

			partial void OnDateTimeChanging(DateTime value);
			partial void OnDateTimeChanged();
			private DateTime _DateTime;
			[Column(Storage="_DateTime", DbType="DateTime", CanBeNull=false)]
			public  override DateTime DateTime {
				get { return _DateTime; }
				set {
					if (_DateTime != value) {
						OnDateTimeChanging(value);
						SendPropertyChanging();
						_DateTime = value;
						SendPropertyChanged("DateTime");
						OnDateTimeChanged();
					}
				}
			}

			partial void OnDrinkWaterChanging(bool value);
			partial void OnDrinkWaterChanged();
			private bool _DrinkWater;
			[Column(Storage="_DrinkWater", DbType="Bit", CanBeNull=false)]
			public  override bool DrinkWater {
				get { return _DrinkWater; }
				set {
					if (_DrinkWater != value) {
						OnDrinkWaterChanging(value);
						SendPropertyChanging();
						_DrinkWater = value;
						SendPropertyChanged("DrinkWater");
						OnDrinkWaterChanged();
					}
				}
			}

			partial void OnDrinkSoftChanging(bool value);
			partial void OnDrinkSoftChanged();
			private bool _DrinkSoft;
			[Column(Storage="_DrinkSoft", DbType="Bit", CanBeNull=false)]
			public  override bool DrinkSoft {
				get { return _DrinkSoft; }
				set {
					if (_DrinkSoft != value) {
						OnDrinkSoftChanging(value);
						SendPropertyChanging();
						_DrinkSoft = value;
						SendPropertyChanged("DrinkSoft");
						OnDrinkSoftChanged();
					}
				}
			}

			partial void OnDrinkEnergyChanging(bool value);
			partial void OnDrinkEnergyChanged();
			private bool _DrinkEnergy;
			[Column(Storage="_DrinkEnergy", DbType="Bit", CanBeNull=false)]
			public  override bool DrinkEnergy {
				get { return _DrinkEnergy; }
				set {
					if (_DrinkEnergy != value) {
						OnDrinkEnergyChanging(value);
						SendPropertyChanging();
						_DrinkEnergy = value;
						SendPropertyChanged("DrinkEnergy");
						OnDrinkEnergyChanged();
					}
				}
			}

			partial void OnDrinkDraftBeerChanging(bool value);
			partial void OnDrinkDraftBeerChanged();
			private bool _DrinkDraftBeer;
			[Column(Storage="_DrinkDraftBeer", DbType="Bit", CanBeNull=false)]
			public  override bool DrinkDraftBeer {
				get { return _DrinkDraftBeer; }
				set {
					if (_DrinkDraftBeer != value) {
						OnDrinkDraftBeerChanging(value);
						SendPropertyChanging();
						_DrinkDraftBeer = value;
						SendPropertyChanged("DrinkDraftBeer");
						OnDrinkDraftBeerChanged();
					}
				}
			}

			partial void OnDrinkBottledBeerChanging(bool value);
			partial void OnDrinkBottledBeerChanged();
			private bool _DrinkBottledBeer;
			[Column(Storage="_DrinkBottledBeer", DbType="Bit", CanBeNull=false)]
			public  override bool DrinkBottledBeer {
				get { return _DrinkBottledBeer; }
				set {
					if (_DrinkBottledBeer != value) {
						OnDrinkBottledBeerChanging(value);
						SendPropertyChanging();
						_DrinkBottledBeer = value;
						SendPropertyChanged("DrinkBottledBeer");
						OnDrinkBottledBeerChanged();
					}
				}
			}

			partial void OnDrinkSpiritsChanging(bool value);
			partial void OnDrinkSpiritsChanged();
			private bool _DrinkSpirits;
			[Column(Storage="_DrinkSpirits", DbType="Bit", CanBeNull=false)]
			public  override bool DrinkSpirits {
				get { return _DrinkSpirits; }
				set {
					if (_DrinkSpirits != value) {
						OnDrinkSpiritsChanging(value);
						SendPropertyChanging();
						_DrinkSpirits = value;
						SendPropertyChanged("DrinkSpirits");
						OnDrinkSpiritsChanged();
					}
				}
			}

			partial void OnDrinkWineChanging(bool value);
			partial void OnDrinkWineChanged();
			private bool _DrinkWine;
			[Column(Storage="_DrinkWine", DbType="Bit", CanBeNull=false)]
			public  override bool DrinkWine {
				get { return _DrinkWine; }
				set {
					if (_DrinkWine != value) {
						OnDrinkWineChanging(value);
						SendPropertyChanging();
						_DrinkWine = value;
						SendPropertyChanged("DrinkWine");
						OnDrinkWineChanged();
					}
				}
			}

			partial void OnDrinkAlcopopsChanging(bool value);
			partial void OnDrinkAlcopopsChanged();
			private bool _DrinkAlcopops;
			[Column(Storage="_DrinkAlcopops", DbType="Bit", CanBeNull=false)]
			public  override bool DrinkAlcopops {
				get { return _DrinkAlcopops; }
				set {
					if (_DrinkAlcopops != value) {
						OnDrinkAlcopopsChanging(value);
						SendPropertyChanging();
						_DrinkAlcopops = value;
						SendPropertyChanged("DrinkAlcopops");
						OnDrinkAlcopopsChanged();
					}
				}
			}

			partial void OnDrinkCiderChanging(bool value);
			partial void OnDrinkCiderChanged();
			private bool _DrinkCider;
			[Column(Storage="_DrinkCider", DbType="Bit", CanBeNull=false)]
			public  override bool DrinkCider {
				get { return _DrinkCider; }
				set {
					if (_DrinkCider != value) {
						OnDrinkCiderChanging(value);
						SendPropertyChanging();
						_DrinkCider = value;
						SendPropertyChanged("DrinkCider");
						OnDrinkCiderChanged();
					}
				}
			}

			partial void OnSmokeChanging(int value);
			partial void OnSmokeChanged();
			private int _Smoke;
			[Column(Storage="_Smoke", DbType="Int", CanBeNull=false)]
			public  override int Smoke {
				get { return _Smoke; }
				set {
					if (_Smoke != value) {
						OnSmokeChanging(value);
						SendPropertyChanging();
						_Smoke = value;
						SendPropertyChanged("Smoke");
						OnSmokeChanged();
					}
				}
			}

			partial void OnEveningAllNightChanging(double value);
			partial void OnEveningAllNightChanged();
			private double _EveningAllNight;
			[Column(Storage="_EveningAllNight", DbType="Float", CanBeNull=false)]
			public  override double EveningAllNight {
				get { return _EveningAllNight; }
				set {
					if (_EveningAllNight != value) {
						OnEveningAllNightChanging(value);
						SendPropertyChanging();
						_EveningAllNight = value;
						SendPropertyChanged("EveningAllNight");
						OnEveningAllNightChanged();
					}
				}
			}

			partial void OnEveningLateNightChanging(double value);
			partial void OnEveningLateNightChanged();
			private double _EveningLateNight;
			[Column(Storage="_EveningLateNight", DbType="Float", CanBeNull=false)]
			public  override double EveningLateNight {
				get { return _EveningLateNight; }
				set {
					if (_EveningLateNight != value) {
						OnEveningLateNightChanging(value);
						SendPropertyChanging();
						_EveningLateNight = value;
						SendPropertyChanged("EveningLateNight");
						OnEveningLateNightChanged();
					}
				}
			}

			partial void OnEveningCoupleDrinksChanging(double value);
			partial void OnEveningCoupleDrinksChanged();
			private double _EveningCoupleDrinks;
			[Column(Storage="_EveningCoupleDrinks", DbType="Float", CanBeNull=false)]
			public  override double EveningCoupleDrinks {
				get { return _EveningCoupleDrinks; }
				set {
					if (_EveningCoupleDrinks != value) {
						OnEveningCoupleDrinksChanging(value);
						SendPropertyChanging();
						_EveningCoupleDrinks = value;
						SendPropertyChanged("EveningCoupleDrinks");
						OnEveningCoupleDrinksChanged();
					}
				}
			}

			partial void OnEveningOtherChanging(double value);
			partial void OnEveningOtherChanged();
			private double _EveningOther;
			[Column(Storage="_EveningOther", DbType="Float", CanBeNull=false)]
			public  override double EveningOther {
				get { return _EveningOther; }
				set {
					if (_EveningOther != value) {
						OnEveningOtherChanging(value);
						SendPropertyChanging();
						_EveningOther = value;
						SendPropertyChanged("EveningOther");
						OnEveningOtherChanged();
					}
				}
			}

			partial void OnEveningStayInChanging(double value);
			partial void OnEveningStayInChanged();
			private double _EveningStayIn;
			[Column(Storage="_EveningStayIn", DbType="Float", CanBeNull=false)]
			public  override double EveningStayIn {
				get { return _EveningStayIn; }
				set {
					if (_EveningStayIn != value) {
						OnEveningStayInChanging(value);
						SendPropertyChanging();
						_EveningStayIn = value;
						SendPropertyChanged("EveningStayIn");
						OnEveningStayInChanged();
					}
				}
			}

			partial void OnEmploymentChanging(int value);
			partial void OnEmploymentChanged();
			private int _Employment;
			[Column(Storage="_Employment", DbType="Int", CanBeNull=false)]
			public  override int Employment {
				get { return _Employment; }
				set {
					if (_Employment != value) {
						OnEmploymentChanging(value);
						SendPropertyChanging();
						_Employment = value;
						SendPropertyChanged("Employment");
						OnEmploymentChanged();
					}
				}
			}

			partial void OnSalaryChanging(int value);
			partial void OnSalaryChanged();
			private int _Salary;
			[Column(Storage="_Salary", DbType="Int", CanBeNull=false)]
			public  override int Salary {
				get { return _Salary; }
				set {
					if (_Salary != value) {
						OnSalaryChanging(value);
						SendPropertyChanging();
						_Salary = value;
						SendPropertyChanged("Salary");
						OnSalaryChanged();
					}
				}
			}

			partial void OnCreditCardChanging(bool value);
			partial void OnCreditCardChanged();
			private bool _CreditCard;
			[Column(Storage="_CreditCard", DbType="Bit", CanBeNull=false)]
			public  override bool CreditCard {
				get { return _CreditCard; }
				set {
					if (_CreditCard != value) {
						OnCreditCardChanging(value);
						SendPropertyChanging();
						_CreditCard = value;
						SendPropertyChanged("CreditCard");
						OnCreditCardChanged();
					}
				}
			}

			partial void OnLoanChanging(bool value);
			partial void OnLoanChanged();
			private bool _Loan;
			[Column(Storage="_Loan", DbType="Bit", CanBeNull=false)]
			public  override bool Loan {
				get { return _Loan; }
				set {
					if (_Loan != value) {
						OnLoanChanging(value);
						SendPropertyChanging();
						_Loan = value;
						SendPropertyChanged("Loan");
						OnLoanChanged();
					}
				}
			}

			partial void OnMortgageChanging(bool value);
			partial void OnMortgageChanged();
			private bool _Mortgage;
			[Column(Storage="_Mortgage", DbType="Bit", CanBeNull=false)]
			public  override bool Mortgage {
				get { return _Mortgage; }
				set {
					if (_Mortgage != value) {
						OnMortgageChanging(value);
						SendPropertyChanging();
						_Mortgage = value;
						SendPropertyChanged("Mortgage");
						OnMortgageChanged();
					}
				}
			}

			partial void OnOwnCarChanging(bool value);
			partial void OnOwnCarChanged();
			private bool _OwnCar;
			[Column(Storage="_OwnCar", DbType="Bit", CanBeNull=false)]
			public  override bool OwnCar {
				get { return _OwnCar; }
				set {
					if (_OwnCar != value) {
						OnOwnCarChanging(value);
						SendPropertyChanging();
						_OwnCar = value;
						SendPropertyChanged("OwnCar");
						OnOwnCarChanged();
					}
				}
			}

			partial void OnOwnBikeChanging(bool value);
			partial void OnOwnBikeChanged();
			private bool _OwnBike;
			[Column(Storage="_OwnBike", DbType="Bit", CanBeNull=false)]
			public  override bool OwnBike {
				get { return _OwnBike; }
				set {
					if (_OwnBike != value) {
						OnOwnBikeChanging(value);
						SendPropertyChanging();
						_OwnBike = value;
						SendPropertyChanged("OwnBike");
						OnOwnBikeChanged();
					}
				}
			}

			partial void OnOwnMp3Changing(bool value);
			partial void OnOwnMp3Changed();
			private bool _OwnMp3;
			[Column(Storage="_OwnMp3", DbType="Bit", CanBeNull=false)]
			public  override bool OwnMp3 {
				get { return _OwnMp3; }
				set {
					if (_OwnMp3 != value) {
						OnOwnMp3Changing(value);
						SendPropertyChanging();
						_OwnMp3 = value;
						SendPropertyChanged("OwnMp3");
						OnOwnMp3Changed();
					}
				}
			}

			partial void OnOwnPcChanging(bool value);
			partial void OnOwnPcChanged();
			private bool _OwnPc;
			[Column(Storage="_OwnPc", DbType="Bit", CanBeNull=false)]
			public  override bool OwnPc {
				get { return _OwnPc; }
				set {
					if (_OwnPc != value) {
						OnOwnPcChanging(value);
						SendPropertyChanging();
						_OwnPc = value;
						SendPropertyChanged("OwnPc");
						OnOwnPcChanged();
					}
				}
			}

			partial void OnOwnLaptopChanging(bool value);
			partial void OnOwnLaptopChanged();
			private bool _OwnLaptop;
			[Column(Storage="_OwnLaptop", DbType="Bit", CanBeNull=false)]
			public  override bool OwnLaptop {
				get { return _OwnLaptop; }
				set {
					if (_OwnLaptop != value) {
						OnOwnLaptopChanging(value);
						SendPropertyChanging();
						_OwnLaptop = value;
						SendPropertyChanged("OwnLaptop");
						OnOwnLaptopChanged();
					}
				}
			}

			partial void OnOwnMacChanging(bool value);
			partial void OnOwnMacChanged();
			private bool _OwnMac;
			[Column(Storage="_OwnMac", DbType="Bit", CanBeNull=false)]
			public  override bool OwnMac {
				get { return _OwnMac; }
				set {
					if (_OwnMac != value) {
						OnOwnMacChanging(value);
						SendPropertyChanging();
						_OwnMac = value;
						SendPropertyChanged("OwnMac");
						OnOwnMacChanged();
					}
				}
			}

			partial void OnOwnBroadbandChanging(bool value);
			partial void OnOwnBroadbandChanged();
			private bool _OwnBroadband;
			[Column(Storage="_OwnBroadband", DbType="Bit", CanBeNull=false)]
			public  override bool OwnBroadband {
				get { return _OwnBroadband; }
				set {
					if (_OwnBroadband != value) {
						OnOwnBroadbandChanging(value);
						SendPropertyChanging();
						_OwnBroadband = value;
						SendPropertyChanged("OwnBroadband");
						OnOwnBroadbandChanged();
					}
				}
			}

			partial void OnOwnConsoleChanging(bool value);
			partial void OnOwnConsoleChanged();
			private bool _OwnConsole;
			[Column(Storage="_OwnConsole", DbType="Bit", CanBeNull=false)]
			public  override bool OwnConsole {
				get { return _OwnConsole; }
				set {
					if (_OwnConsole != value) {
						OnOwnConsoleChanging(value);
						SendPropertyChanging();
						_OwnConsole = value;
						SendPropertyChanged("OwnConsole");
						OnOwnConsoleChanged();
					}
				}
			}

			partial void OnOwnCameraChanging(bool value);
			partial void OnOwnCameraChanged();
			private bool _OwnCamera;
			[Column(Storage="_OwnCamera", DbType="Bit", CanBeNull=false)]
			public  override bool OwnCamera {
				get { return _OwnCamera; }
				set {
					if (_OwnCamera != value) {
						OnOwnCameraChanging(value);
						SendPropertyChanging();
						_OwnCamera = value;
						SendPropertyChanged("OwnCamera");
						OnOwnCameraChanged();
					}
				}
			}

			partial void OnOwnDvdChanging(bool value);
			partial void OnOwnDvdChanged();
			private bool _OwnDvd;
			[Column(Storage="_OwnDvd", DbType="Bit", CanBeNull=false)]
			public  override bool OwnDvd {
				get { return _OwnDvd; }
				set {
					if (_OwnDvd != value) {
						OnOwnDvdChanging(value);
						SendPropertyChanging();
						_OwnDvd = value;
						SendPropertyChanged("OwnDvd");
						OnOwnDvdChanged();
					}
				}
			}

			partial void OnOwnDvdRecChanging(bool value);
			partial void OnOwnDvdRecChanged();
			private bool _OwnDvdRec;
			[Column(Storage="_OwnDvdRec", DbType="Bit", CanBeNull=false)]
			public  override bool OwnDvdRec {
				get { return _OwnDvdRec; }
				set {
					if (_OwnDvdRec != value) {
						OnOwnDvdRecChanging(value);
						SendPropertyChanging();
						_OwnDvdRec = value;
						SendPropertyChanged("OwnDvdRec");
						OnOwnDvdRecChanged();
					}
				}
			}

			partial void OnBuyCarChanging(bool value);
			partial void OnBuyCarChanged();
			private bool _BuyCar;
			[Column(Storage="_BuyCar", DbType="Bit", CanBeNull=false)]
			public  override bool BuyCar {
				get { return _BuyCar; }
				set {
					if (_BuyCar != value) {
						OnBuyCarChanging(value);
						SendPropertyChanging();
						_BuyCar = value;
						SendPropertyChanged("BuyCar");
						OnBuyCarChanged();
					}
				}
			}

			partial void OnBuyBikeChanging(bool value);
			partial void OnBuyBikeChanged();
			private bool _BuyBike;
			[Column(Storage="_BuyBike", DbType="Bit", CanBeNull=false)]
			public  override bool BuyBike {
				get { return _BuyBike; }
				set {
					if (_BuyBike != value) {
						OnBuyBikeChanging(value);
						SendPropertyChanging();
						_BuyBike = value;
						SendPropertyChanged("BuyBike");
						OnBuyBikeChanged();
					}
				}
			}

			partial void OnBuyMp3Changing(bool value);
			partial void OnBuyMp3Changed();
			private bool _BuyMp3;
			[Column(Storage="_BuyMp3", DbType="Bit", CanBeNull=false)]
			public  override bool BuyMp3 {
				get { return _BuyMp3; }
				set {
					if (_BuyMp3 != value) {
						OnBuyMp3Changing(value);
						SendPropertyChanging();
						_BuyMp3 = value;
						SendPropertyChanged("BuyMp3");
						OnBuyMp3Changed();
					}
				}
			}

			partial void OnBuyPcChanging(bool value);
			partial void OnBuyPcChanged();
			private bool _BuyPc;
			[Column(Storage="_BuyPc", DbType="Bit", CanBeNull=false)]
			public  override bool BuyPc {
				get { return _BuyPc; }
				set {
					if (_BuyPc != value) {
						OnBuyPcChanging(value);
						SendPropertyChanging();
						_BuyPc = value;
						SendPropertyChanged("BuyPc");
						OnBuyPcChanged();
					}
				}
			}

			partial void OnBuyLaptopChanging(bool value);
			partial void OnBuyLaptopChanged();
			private bool _BuyLaptop;
			[Column(Storage="_BuyLaptop", DbType="Bit", CanBeNull=false)]
			public  override bool BuyLaptop {
				get { return _BuyLaptop; }
				set {
					if (_BuyLaptop != value) {
						OnBuyLaptopChanging(value);
						SendPropertyChanging();
						_BuyLaptop = value;
						SendPropertyChanged("BuyLaptop");
						OnBuyLaptopChanged();
					}
				}
			}

			partial void OnBuyMacChanging(bool value);
			partial void OnBuyMacChanged();
			private bool _BuyMac;
			[Column(Storage="_BuyMac", DbType="Bit", CanBeNull=false)]
			public  override bool BuyMac {
				get { return _BuyMac; }
				set {
					if (_BuyMac != value) {
						OnBuyMacChanging(value);
						SendPropertyChanging();
						_BuyMac = value;
						SendPropertyChanged("BuyMac");
						OnBuyMacChanged();
					}
				}
			}

			partial void OnBuyBroadbandChanging(bool value);
			partial void OnBuyBroadbandChanged();
			private bool _BuyBroadband;
			[Column(Storage="_BuyBroadband", DbType="Bit", CanBeNull=false)]
			public  override bool BuyBroadband {
				get { return _BuyBroadband; }
				set {
					if (_BuyBroadband != value) {
						OnBuyBroadbandChanging(value);
						SendPropertyChanging();
						_BuyBroadband = value;
						SendPropertyChanged("BuyBroadband");
						OnBuyBroadbandChanged();
					}
				}
			}

			partial void OnBuyConsoleChanging(bool value);
			partial void OnBuyConsoleChanged();
			private bool _BuyConsole;
			[Column(Storage="_BuyConsole", DbType="Bit", CanBeNull=false)]
			public  override bool BuyConsole {
				get { return _BuyConsole; }
				set {
					if (_BuyConsole != value) {
						OnBuyConsoleChanging(value);
						SendPropertyChanging();
						_BuyConsole = value;
						SendPropertyChanged("BuyConsole");
						OnBuyConsoleChanged();
					}
				}
			}

			partial void OnBuyCameraChanging(bool value);
			partial void OnBuyCameraChanged();
			private bool _BuyCamera;
			[Column(Storage="_BuyCamera", DbType="Bit", CanBeNull=false)]
			public  override bool BuyCamera {
				get { return _BuyCamera; }
				set {
					if (_BuyCamera != value) {
						OnBuyCameraChanging(value);
						SendPropertyChanging();
						_BuyCamera = value;
						SendPropertyChanged("BuyCamera");
						OnBuyCameraChanged();
					}
				}
			}

			partial void OnBuyDvdChanging(bool value);
			partial void OnBuyDvdChanged();
			private bool _BuyDvd;
			[Column(Storage="_BuyDvd", DbType="Bit", CanBeNull=false)]
			public  override bool BuyDvd {
				get { return _BuyDvd; }
				set {
					if (_BuyDvd != value) {
						OnBuyDvdChanging(value);
						SendPropertyChanging();
						_BuyDvd = value;
						SendPropertyChanged("BuyDvd");
						OnBuyDvdChanged();
					}
				}
			}

			partial void OnBuyDvdRecChanging(bool value);
			partial void OnBuyDvdRecChanged();
			private bool _BuyDvdRec;
			[Column(Storage="_BuyDvdRec", DbType="Bit", CanBeNull=false)]
			public  override bool BuyDvdRec {
				get { return _BuyDvdRec; }
				set {
					if (_BuyDvdRec != value) {
						OnBuyDvdRecChanging(value);
						SendPropertyChanging();
						_BuyDvdRec = value;
						SendPropertyChanged("BuyDvdRec");
						OnBuyDvdRecChanged();
					}
				}
			}

			partial void OnSpendDesignerClothesChanging(int value);
			partial void OnSpendDesignerClothesChanged();
			private int _SpendDesignerClothes;
			[Column(Storage="_SpendDesignerClothes", DbType="Int", CanBeNull=false)]
			public  override int SpendDesignerClothes {
				get { return _SpendDesignerClothes; }
				set {
					if (_SpendDesignerClothes != value) {
						OnSpendDesignerClothesChanging(value);
						SendPropertyChanging();
						_SpendDesignerClothes = value;
						SendPropertyChanged("SpendDesignerClothes");
						OnSpendDesignerClothesChanged();
					}
				}
			}

			partial void OnSpendHighStreetClothesChanging(int value);
			partial void OnSpendHighStreetClothesChanged();
			private int _SpendHighStreetClothes;
			[Column(Storage="_SpendHighStreetClothes", DbType="Int", CanBeNull=false)]
			public  override int SpendHighStreetClothes {
				get { return _SpendHighStreetClothes; }
				set {
					if (_SpendHighStreetClothes != value) {
						OnSpendHighStreetClothesChanging(value);
						SendPropertyChanging();
						_SpendHighStreetClothes = value;
						SendPropertyChanged("SpendHighStreetClothes");
						OnSpendHighStreetClothesChanged();
					}
				}
			}

			partial void OnSpendMusicCdChanging(int value);
			partial void OnSpendMusicCdChanged();
			private int _SpendMusicCd;
			[Column(Storage="_SpendMusicCd", DbType="Int", CanBeNull=false)]
			public  override int SpendMusicCd {
				get { return _SpendMusicCd; }
				set {
					if (_SpendMusicCd != value) {
						OnSpendMusicCdChanging(value);
						SendPropertyChanging();
						_SpendMusicCd = value;
						SendPropertyChanged("SpendMusicCd");
						OnSpendMusicCdChanged();
					}
				}
			}

			partial void OnSpendMusicVinylChanging(int value);
			partial void OnSpendMusicVinylChanged();
			private int _SpendMusicVinyl;
			[Column(Storage="_SpendMusicVinyl", DbType="Int", CanBeNull=false)]
			public  override int SpendMusicVinyl {
				get { return _SpendMusicVinyl; }
				set {
					if (_SpendMusicVinyl != value) {
						OnSpendMusicVinylChanging(value);
						SendPropertyChanging();
						_SpendMusicVinyl = value;
						SendPropertyChanged("SpendMusicVinyl");
						OnSpendMusicVinylChanged();
					}
				}
			}

			partial void OnSpendMusicDownloadChanging(int value);
			partial void OnSpendMusicDownloadChanged();
			private int _SpendMusicDownload;
			[Column(Storage="_SpendMusicDownload", DbType="Int", CanBeNull=false)]
			public  override int SpendMusicDownload {
				get { return _SpendMusicDownload; }
				set {
					if (_SpendMusicDownload != value) {
						OnSpendMusicDownloadChanging(value);
						SendPropertyChanging();
						_SpendMusicDownload = value;
						SendPropertyChanged("SpendMusicDownload");
						OnSpendMusicDownloadChanged();
					}
				}
			}

			partial void OnSpendDvdChanging(int value);
			partial void OnSpendDvdChanged();
			private int _SpendDvd;
			[Column(Storage="_SpendDvd", DbType="Int", CanBeNull=false)]
			public  override int SpendDvd {
				get { return _SpendDvd; }
				set {
					if (_SpendDvd != value) {
						OnSpendDvdChanging(value);
						SendPropertyChanging();
						_SpendDvd = value;
						SendPropertyChanged("SpendDvd");
						OnSpendDvdChanged();
					}
				}
			}

			partial void OnSpendGamesChanging(int value);
			partial void OnSpendGamesChanged();
			private int _SpendGames;
			[Column(Storage="_SpendGames", DbType="Int", CanBeNull=false)]
			public  override int SpendGames {
				get { return _SpendGames; }
				set {
					if (_SpendGames != value) {
						OnSpendGamesChanging(value);
						SendPropertyChanging();
						_SpendGames = value;
						SendPropertyChanged("SpendGames");
						OnSpendGamesChanged();
					}
				}
			}

			partial void OnSpendMobileChanging(int value);
			partial void OnSpendMobileChanged();
			private int _SpendMobile;
			[Column(Storage="_SpendMobile", DbType="Int", CanBeNull=false)]
			public  override int SpendMobile {
				get { return _SpendMobile; }
				set {
					if (_SpendMobile != value) {
						OnSpendMobileChanging(value);
						SendPropertyChanging();
						_SpendMobile = value;
						SendPropertyChanged("SpendMobile");
						OnSpendMobileChanged();
					}
				}
			}

			partial void OnSpendSmsChanging(int value);
			partial void OnSpendSmsChanged();
			private int _SpendSms;
			[Column(Storage="_SpendSms", DbType="Int", CanBeNull=false)]
			public  override int SpendSms {
				get { return _SpendSms; }
				set {
					if (_SpendSms != value) {
						OnSpendSmsChanging(value);
						SendPropertyChanging();
						_SpendSms = value;
						SendPropertyChanged("SpendSms");
						OnSpendSmsChanged();
					}
				}
			}

			partial void OnSpendCarChanging(int value);
			partial void OnSpendCarChanged();
			private int _SpendCar;
			[Column(Storage="_SpendCar", DbType="Int", CanBeNull=false)]
			public  override int SpendCar {
				get { return _SpendCar; }
				set {
					if (_SpendCar != value) {
						OnSpendCarChanging(value);
						SendPropertyChanging();
						_SpendCar = value;
						SendPropertyChanged("SpendCar");
						OnSpendCarChanged();
					}
				}
			}

			partial void OnSpendTravelChanging(int value);
			partial void OnSpendTravelChanged();
			private int _SpendTravel;
			[Column(Storage="_SpendTravel", DbType="Int", CanBeNull=false)]
			public  override int SpendTravel {
				get { return _SpendTravel; }
				set {
					if (_SpendTravel != value) {
						OnSpendTravelChanging(value);
						SendPropertyChanging();
						_SpendTravel = value;
						SendPropertyChanged("SpendTravel");
						OnSpendTravelChanged();
					}
				}
			}

			partial void OnHolidaysChanging(int value);
			partial void OnHolidaysChanged();
			private int _Holidays;
			[Column(Storage="_Holidays", DbType="Int", CanBeNull=false)]
			public  override int Holidays {
				get { return _Holidays; }
				set {
					if (_Holidays != value) {
						OnHolidaysChanging(value);
						SendPropertyChanging();
						_Holidays = value;
						SendPropertyChanged("Holidays");
						OnHolidaysChanged();
					}
				}
			}

			partial void OnImagingManufacturerChanging(string value);
			partial void OnImagingManufacturerChanged();
			private string _ImagingManufacturer;
			[Column(Storage="_ImagingManufacturer", DbType="VarChar(255)", CanBeNull=false)]
			public  override string ImagingManufacturer {
				get { return _ImagingManufacturer; }
				set {
					if (_ImagingManufacturer != value) {
						OnImagingManufacturerChanging(value);
						SendPropertyChanging();
						_ImagingManufacturer = value;
						SendPropertyChanged("ImagingManufacturer");
						OnImagingManufacturerChanged();
					}
				}
			}

			partial void OnImagingImportantChanging(int value);
			partial void OnImagingImportantChanged();
			private int _ImagingImportant;
			[Column(Storage="_ImagingImportant", DbType="Int", CanBeNull=false)]
			public  override int ImagingImportant {
				get { return _ImagingImportant; }
				set {
					if (_ImagingImportant != value) {
						OnImagingImportantChanging(value);
						SendPropertyChanging();
						_ImagingImportant = value;
						SendPropertyChanged("ImagingImportant");
						OnImagingImportantChanged();
					}
				}
			}

			partial void OnImagingOpinionSonyChanging(int value);
			partial void OnImagingOpinionSonyChanged();
			private int _ImagingOpinionSony;
			[Column(Storage="_ImagingOpinionSony", DbType="Int", CanBeNull=false)]
			public  override int ImagingOpinionSony {
				get { return _ImagingOpinionSony; }
				set {
					if (_ImagingOpinionSony != value) {
						OnImagingOpinionSonyChanging(value);
						SendPropertyChanging();
						_ImagingOpinionSony = value;
						SendPropertyChanged("ImagingOpinionSony");
						OnImagingOpinionSonyChanged();
					}
				}
			}

			partial void OnImagingOpinionNokiaChanging(int value);
			partial void OnImagingOpinionNokiaChanged();
			private int _ImagingOpinionNokia;
			[Column(Storage="_ImagingOpinionNokia", DbType="Int", CanBeNull=false)]
			public  override int ImagingOpinionNokia {
				get { return _ImagingOpinionNokia; }
				set {
					if (_ImagingOpinionNokia != value) {
						OnImagingOpinionNokiaChanging(value);
						SendPropertyChanging();
						_ImagingOpinionNokia = value;
						SendPropertyChanged("ImagingOpinionNokia");
						OnImagingOpinionNokiaChanged();
					}
				}
			}

			partial void OnImagingOpinionMotorolaChanging(int value);
			partial void OnImagingOpinionMotorolaChanged();
			private int _ImagingOpinionMotorola;
			[Column(Storage="_ImagingOpinionMotorola", DbType="Int", CanBeNull=false)]
			public  override int ImagingOpinionMotorola {
				get { return _ImagingOpinionMotorola; }
				set {
					if (_ImagingOpinionMotorola != value) {
						OnImagingOpinionMotorolaChanging(value);
						SendPropertyChanging();
						_ImagingOpinionMotorola = value;
						SendPropertyChanged("ImagingOpinionMotorola");
						OnImagingOpinionMotorolaChanged();
					}
				}
			}

			partial void OnImagingOpinionSiemensChanging(int value);
			partial void OnImagingOpinionSiemensChanged();
			private int _ImagingOpinionSiemens;
			[Column(Storage="_ImagingOpinionSiemens", DbType="Int", CanBeNull=false)]
			public  override int ImagingOpinionSiemens {
				get { return _ImagingOpinionSiemens; }
				set {
					if (_ImagingOpinionSiemens != value) {
						OnImagingOpinionSiemensChanging(value);
						SendPropertyChanging();
						_ImagingOpinionSiemens = value;
						SendPropertyChanged("ImagingOpinionSiemens");
						OnImagingOpinionSiemensChanged();
					}
				}
			}

			partial void OnImagingOpinionLgChanging(int value);
			partial void OnImagingOpinionLgChanged();
			private int _ImagingOpinionLg;
			[Column(Storage="_ImagingOpinionLg", DbType="Int", CanBeNull=false)]
			public  override int ImagingOpinionLg {
				get { return _ImagingOpinionLg; }
				set {
					if (_ImagingOpinionLg != value) {
						OnImagingOpinionLgChanging(value);
						SendPropertyChanging();
						_ImagingOpinionLg = value;
						SendPropertyChanged("ImagingOpinionLg");
						OnImagingOpinionLgChanged();
					}
				}
			}

			partial void OnImagingOpinionSamsungChanging(int value);
			partial void OnImagingOpinionSamsungChanged();
			private int _ImagingOpinionSamsung;
			[Column(Storage="_ImagingOpinionSamsung", DbType="Int", CanBeNull=false)]
			public  override int ImagingOpinionSamsung {
				get { return _ImagingOpinionSamsung; }
				set {
					if (_ImagingOpinionSamsung != value) {
						OnImagingOpinionSamsungChanging(value);
						SendPropertyChanging();
						_ImagingOpinionSamsung = value;
						SendPropertyChanged("ImagingOpinionSamsung");
						OnImagingOpinionSamsungChanged();
					}
				}
			}

			partial void OnImagingCapabilitySonyChanging(int value);
			partial void OnImagingCapabilitySonyChanged();
			private int _ImagingCapabilitySony;
			[Column(Storage="_ImagingCapabilitySony", DbType="Int", CanBeNull=false)]
			public  override int ImagingCapabilitySony {
				get { return _ImagingCapabilitySony; }
				set {
					if (_ImagingCapabilitySony != value) {
						OnImagingCapabilitySonyChanging(value);
						SendPropertyChanging();
						_ImagingCapabilitySony = value;
						SendPropertyChanged("ImagingCapabilitySony");
						OnImagingCapabilitySonyChanged();
					}
				}
			}

			partial void OnImagingCapabilityNokiaChanging(int value);
			partial void OnImagingCapabilityNokiaChanged();
			private int _ImagingCapabilityNokia;
			[Column(Storage="_ImagingCapabilityNokia", DbType="Int", CanBeNull=false)]
			public  override int ImagingCapabilityNokia {
				get { return _ImagingCapabilityNokia; }
				set {
					if (_ImagingCapabilityNokia != value) {
						OnImagingCapabilityNokiaChanging(value);
						SendPropertyChanging();
						_ImagingCapabilityNokia = value;
						SendPropertyChanged("ImagingCapabilityNokia");
						OnImagingCapabilityNokiaChanged();
					}
				}
			}

			partial void OnImagingCapabilityMotorolaChanging(int value);
			partial void OnImagingCapabilityMotorolaChanged();
			private int _ImagingCapabilityMotorola;
			[Column(Storage="_ImagingCapabilityMotorola", DbType="Int", CanBeNull=false)]
			public  override int ImagingCapabilityMotorola {
				get { return _ImagingCapabilityMotorola; }
				set {
					if (_ImagingCapabilityMotorola != value) {
						OnImagingCapabilityMotorolaChanging(value);
						SendPropertyChanging();
						_ImagingCapabilityMotorola = value;
						SendPropertyChanged("ImagingCapabilityMotorola");
						OnImagingCapabilityMotorolaChanged();
					}
				}
			}

			partial void OnImagingCapabilitySiemensChanging(int value);
			partial void OnImagingCapabilitySiemensChanged();
			private int _ImagingCapabilitySiemens;
			[Column(Storage="_ImagingCapabilitySiemens", DbType="Int", CanBeNull=false)]
			public  override int ImagingCapabilitySiemens {
				get { return _ImagingCapabilitySiemens; }
				set {
					if (_ImagingCapabilitySiemens != value) {
						OnImagingCapabilitySiemensChanging(value);
						SendPropertyChanging();
						_ImagingCapabilitySiemens = value;
						SendPropertyChanged("ImagingCapabilitySiemens");
						OnImagingCapabilitySiemensChanged();
					}
				}
			}

			partial void OnImagingCapabilityLgChanging(int value);
			partial void OnImagingCapabilityLgChanged();
			private int _ImagingCapabilityLg;
			[Column(Storage="_ImagingCapabilityLg", DbType="Int", CanBeNull=false)]
			public  override int ImagingCapabilityLg {
				get { return _ImagingCapabilityLg; }
				set {
					if (_ImagingCapabilityLg != value) {
						OnImagingCapabilityLgChanging(value);
						SendPropertyChanging();
						_ImagingCapabilityLg = value;
						SendPropertyChanged("ImagingCapabilityLg");
						OnImagingCapabilityLgChanged();
					}
				}
			}

			partial void OnImagingCapabilitySamsungChanging(int value);
			partial void OnImagingCapabilitySamsungChanged();
			private int _ImagingCapabilitySamsung;
			[Column(Storage="_ImagingCapabilitySamsung", DbType="Int", CanBeNull=false)]
			public  override int ImagingCapabilitySamsung {
				get { return _ImagingCapabilitySamsung; }
				set {
					if (_ImagingCapabilitySamsung != value) {
						OnImagingCapabilitySamsungChanging(value);
						SendPropertyChanging();
						_ImagingCapabilitySamsung = value;
						SendPropertyChanged("ImagingCapabilitySamsung");
						OnImagingCapabilitySamsungChanged();
					}
				}
			}

			partial void OnImagingBuySonyChanging(int value);
			partial void OnImagingBuySonyChanged();
			private int _ImagingBuySony;
			[Column(Storage="_ImagingBuySony", DbType="Int", CanBeNull=false)]
			public  override int ImagingBuySony {
				get { return _ImagingBuySony; }
				set {
					if (_ImagingBuySony != value) {
						OnImagingBuySonyChanging(value);
						SendPropertyChanging();
						_ImagingBuySony = value;
						SendPropertyChanged("ImagingBuySony");
						OnImagingBuySonyChanged();
					}
				}
			}

			partial void OnImagingBuyNokiaChanging(int value);
			partial void OnImagingBuyNokiaChanged();
			private int _ImagingBuyNokia;
			[Column(Storage="_ImagingBuyNokia", DbType="Int", CanBeNull=false)]
			public  override int ImagingBuyNokia {
				get { return _ImagingBuyNokia; }
				set {
					if (_ImagingBuyNokia != value) {
						OnImagingBuyNokiaChanging(value);
						SendPropertyChanging();
						_ImagingBuyNokia = value;
						SendPropertyChanged("ImagingBuyNokia");
						OnImagingBuyNokiaChanged();
					}
				}
			}

			partial void OnImagingBuyMotorolaChanging(int value);
			partial void OnImagingBuyMotorolaChanged();
			private int _ImagingBuyMotorola;
			[Column(Storage="_ImagingBuyMotorola", DbType="Int", CanBeNull=false)]
			public  override int ImagingBuyMotorola {
				get { return _ImagingBuyMotorola; }
				set {
					if (_ImagingBuyMotorola != value) {
						OnImagingBuyMotorolaChanging(value);
						SendPropertyChanging();
						_ImagingBuyMotorola = value;
						SendPropertyChanged("ImagingBuyMotorola");
						OnImagingBuyMotorolaChanged();
					}
				}
			}

			partial void OnImagingBuySiemensChanging(int value);
			partial void OnImagingBuySiemensChanged();
			private int _ImagingBuySiemens;
			[Column(Storage="_ImagingBuySiemens", DbType="Int", CanBeNull=false)]
			public  override int ImagingBuySiemens {
				get { return _ImagingBuySiemens; }
				set {
					if (_ImagingBuySiemens != value) {
						OnImagingBuySiemensChanging(value);
						SendPropertyChanging();
						_ImagingBuySiemens = value;
						SendPropertyChanged("ImagingBuySiemens");
						OnImagingBuySiemensChanged();
					}
				}
			}

			partial void OnImagingBuyLgChanging(int value);
			partial void OnImagingBuyLgChanged();
			private int _ImagingBuyLg;
			[Column(Storage="_ImagingBuyLg", DbType="Int", CanBeNull=false)]
			public  override int ImagingBuyLg {
				get { return _ImagingBuyLg; }
				set {
					if (_ImagingBuyLg != value) {
						OnImagingBuyLgChanging(value);
						SendPropertyChanging();
						_ImagingBuyLg = value;
						SendPropertyChanged("ImagingBuyLg");
						OnImagingBuyLgChanged();
					}
				}
			}

			partial void OnImagingBuySamsungChanging(int value);
			partial void OnImagingBuySamsungChanged();
			private int _ImagingBuySamsung;
			[Column(Storage="_ImagingBuySamsung", DbType="Int", CanBeNull=false)]
			public  override int ImagingBuySamsung {
				get { return _ImagingBuySamsung; }
				set {
					if (_ImagingBuySamsung != value) {
						OnImagingBuySamsungChanging(value);
						SendPropertyChanging();
						_ImagingBuySamsung = value;
						SendPropertyChanged("ImagingBuySamsung");
						OnImagingBuySamsungChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.Domain")]
 		public partial class Domain : Model.Entities.Domain, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public Domain()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnKChanging(int value);
			partial void OnKChanged();
			private int _K;
			[Column(Storage="_K", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
			public  override int K {
				get { return _K; }
				set {
					if (_K != value) {
						OnKChanging(value);
						SendPropertyChanging();
						_K = value;
						SendPropertyChanged("K");
						OnKChanged();
					}
				}
			}

			partial void OnDomainNameChanging(string value);
			partial void OnDomainNameChanged();
			private string _DomainName;
			[Column(Storage="_DomainName", DbType="VarChar(50)", CanBeNull=false)]
			public  override string DomainName {
				get { return _DomainName; }
				set {
					if (_DomainName != value) {
						OnDomainNameChanging(value);
						SendPropertyChanging();
						_DomainName = value;
						SendPropertyChanged("DomainName");
						OnDomainNameChanged();
					}
				}
			}

			partial void OnPromoterKChanging(int value);
			partial void OnPromoterKChanged();
			private int _PromoterK;
			[Column(Storage="_PromoterK", DbType="Int", CanBeNull=false)]
			public  override int PromoterK {
				get { return _PromoterK; }
				set {
					if (_PromoterK != value) {
						OnPromoterKChanging(value);
						SendPropertyChanging();
						_PromoterK = value;
						SendPropertyChanged("PromoterK");
						OnPromoterKChanged();
					}
				}
			}

			partial void OnRedirectObjectTypeChanging(Model.Entities.ObjectType value);
			partial void OnRedirectObjectTypeChanged();
			private Model.Entities.ObjectType _RedirectObjectType;
			[Column(Storage="_RedirectObjectType", DbType="Int", CanBeNull=false)]
			public  override Model.Entities.ObjectType RedirectObjectType {
				get { return _RedirectObjectType; }
				set {
					if (_RedirectObjectType != value) {
						OnRedirectObjectTypeChanging(value);
						SendPropertyChanging();
						_RedirectObjectType = value;
						SendPropertyChanged("RedirectObjectType");
						OnRedirectObjectTypeChanged();
					}
				}
			}

			partial void OnRedirectObjectKChanging(int value);
			partial void OnRedirectObjectKChanged();
			private int _RedirectObjectK;
			[Column(Storage="_RedirectObjectK", DbType="Int", CanBeNull=false)]
			public  override int RedirectObjectK {
				get { return _RedirectObjectK; }
				set {
					if (_RedirectObjectK != value) {
						OnRedirectObjectKChanging(value);
						SendPropertyChanging();
						_RedirectObjectK = value;
						SendPropertyChanged("RedirectObjectK");
						OnRedirectObjectKChanged();
					}
				}
			}

			partial void OnRedirectUrlChanging(string value);
			partial void OnRedirectUrlChanged();
			private string _RedirectUrl;
			[Column(Storage="_RedirectUrl", DbType="VarChar(200)", CanBeNull=false)]
			public  override string RedirectUrl {
				get { return _RedirectUrl; }
				set {
					if (_RedirectUrl != value) {
						OnRedirectUrlChanging(value);
						SendPropertyChanging();
						_RedirectUrl = value;
						SendPropertyChanged("RedirectUrl");
						OnRedirectUrlChanged();
					}
				}
			}

			partial void OnRedirectAppChanging(string value);
			partial void OnRedirectAppChanged();
			private string _RedirectApp;
			[Column(Storage="_RedirectApp", DbType="VarChar(50)", CanBeNull=false)]
			public  override string RedirectApp {
				get { return _RedirectApp; }
				set {
					if (_RedirectApp != value) {
						OnRedirectAppChanging(value);
						SendPropertyChanging();
						_RedirectApp = value;
						SendPropertyChanged("RedirectApp");
						OnRedirectAppChanged();
					}
				}
			}

			partial void OnWwdResourceIDChanging(string value);
			partial void OnWwdResourceIDChanged();
			private string _WwdResourceID;
			[Column(Storage="_WwdResourceID", DbType="VarChar(50)", CanBeNull=false)]
			public  override string WwdResourceID {
				get { return _WwdResourceID; }
				set {
					if (_WwdResourceID != value) {
						OnWwdResourceIDChanging(value);
						SendPropertyChanging();
						_WwdResourceID = value;
						SendPropertyChanged("WwdResourceID");
						OnWwdResourceIDChanged();
					}
				}
			}

			partial void OnRegisteredPrimaryChanging(bool value);
			partial void OnRegisteredPrimaryChanged();
			private bool _RegisteredPrimary;
			[Column(Storage="_RegisteredPrimary", DbType="Bit", CanBeNull=false)]
			public  override bool RegisteredPrimary {
				get { return _RegisteredPrimary; }
				set {
					if (_RegisteredPrimary != value) {
						OnRegisteredPrimaryChanging(value);
						SendPropertyChanging();
						_RegisteredPrimary = value;
						SendPropertyChanged("RegisteredPrimary");
						OnRegisteredPrimaryChanged();
					}
				}
			}

			partial void OnRegisteredSecondaryChanging(bool value);
			partial void OnRegisteredSecondaryChanged();
			private bool _RegisteredSecondary;
			[Column(Storage="_RegisteredSecondary", DbType="Bit", CanBeNull=false)]
			public  override bool RegisteredSecondary {
				get { return _RegisteredSecondary; }
				set {
					if (_RegisteredSecondary != value) {
						OnRegisteredSecondaryChanging(value);
						SendPropertyChanging();
						_RegisteredSecondary = value;
						SendPropertyChanged("RegisteredSecondary");
						OnRegisteredSecondaryChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.DomainStats")]
 		public partial class DomainStats : Model.Entities.DomainStats, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public DomainStats()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnDomainKChanging(int value);
			partial void OnDomainKChanged();
			private int _DomainK;
			[Column(Storage="_DomainK", DbType="Int NOT NULL", CanBeNull=false)]
			public  override int DomainK {
				get { return _DomainK; }
				set {
					if (_DomainK != value) {
						OnDomainKChanging(value);
						SendPropertyChanging();
						_DomainK = value;
						SendPropertyChanged("DomainK");
						OnDomainKChanged();
					}
				}
			}

			partial void OnDateChanging(DateTime value);
			partial void OnDateChanged();
			private DateTime _Date;
			[Column(Storage="_Date", DbType="DateTime NOT NULL", CanBeNull=false)]
			public  override DateTime Date {
				get { return _Date; }
				set {
					if (_Date != value) {
						OnDateChanging(value);
						SendPropertyChanging();
						_Date = value;
						SendPropertyChanged("Date");
						OnDateChanged();
					}
				}
			}

			partial void OnHitsChanging(int value);
			partial void OnHitsChanged();
			private int _Hits;
			[Column(Storage="_Hits", DbType="Int", CanBeNull=false)]
			public  override int Hits {
				get { return _Hits; }
				set {
					if (_Hits != value) {
						OnHitsChanging(value);
						SendPropertyChanging();
						_Hits = value;
						SendPropertyChanged("Hits");
						OnHitsChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.DonationIcon")]
 		public partial class DonationIcon : Model.Entities.DonationIcon, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public DonationIcon()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnKChanging(int value);
			partial void OnKChanged();
			private int _K;
			[Column(Storage="_K", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
			public  override int K {
				get { return _K; }
				set {
					if (_K != value) {
						OnKChanging(value);
						SendPropertyChanging();
						_K = value;
						SendPropertyChanged("K");
						OnKChanged();
					}
				}
			}

			partial void OnIconNameChanging(string value);
			partial void OnIconNameChanged();
			private string _IconName;
			[Column(Storage="_IconName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
			public  override string IconName {
				get { return _IconName; }
				set {
					if (_IconName != value) {
						OnIconNameChanging(value);
						SendPropertyChanging();
						_IconName = value;
						SendPropertyChanged("IconName");
						OnIconNameChanged();
					}
				}
			}

			partial void OnIconTextChanging(string value);
			partial void OnIconTextChanged();
			private string _IconText;
			[Column(Storage="_IconText", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
			public  override string IconText {
				get { return _IconText; }
				set {
					if (_IconText != value) {
						OnIconTextChanging(value);
						SendPropertyChanging();
						_IconText = value;
						SendPropertyChanged("IconText");
						OnIconTextChanged();
					}
				}
			}

			partial void OnImgUrlChanging(string value);
			partial void OnImgUrlChanged();
			private string _ImgUrl;
			[Column(Storage="_ImgUrl", DbType="VarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
			public  override string ImgUrl {
				get { return _ImgUrl; }
				set {
					if (_ImgUrl != value) {
						OnImgUrlChanging(value);
						SendPropertyChanging();
						_ImgUrl = value;
						SendPropertyChanged("ImgUrl");
						OnImgUrlChanged();
					}
				}
			}

			partial void OnThreadKChanging(int value);
			partial void OnThreadKChanged();
			private int _ThreadK;
			[Column(Storage="_ThreadK", DbType="Int NOT NULL", CanBeNull=false)]
			public  override int ThreadK {
				get { return _ThreadK; }
				set {
					if (_ThreadK != value) {
						OnThreadKChanging(value);
						SendPropertyChanging();
						_ThreadK = value;
						SendPropertyChanged("ThreadK");
						OnThreadKChanged();
					}
				}
			}

			partial void OnStartDateTimeChanging(DateTime value);
			partial void OnStartDateTimeChanged();
			private DateTime _StartDateTime;
			[Column(Storage="_StartDateTime", DbType="DateTime NOT NULL", CanBeNull=false)]
			public  override DateTime StartDateTime {
				get { return _StartDateTime; }
				set {
					if (_StartDateTime != value) {
						OnStartDateTimeChanging(value);
						SendPropertyChanging();
						_StartDateTime = value;
						SendPropertyChanged("StartDateTime");
						OnStartDateTimeChanged();
					}
				}
			}

			partial void OnPriceWhenActiveChanging(decimal value);
			partial void OnPriceWhenActiveChanged();
			private decimal _PriceWhenActive;
			[Column(Storage="_PriceWhenActive", DbType="Decimal(18,2) NOT NULL", CanBeNull=false)]
			public  override decimal PriceWhenActive {
				get { return _PriceWhenActive; }
				set {
					if (_PriceWhenActive != value) {
						OnPriceWhenActiveChanging(value);
						SendPropertyChanging();
						_PriceWhenActive = value;
						SendPropertyChanged("PriceWhenActive");
						OnPriceWhenActiveChanged();
					}
				}
			}

			partial void OnPriceWhenRetroactiveChanging(decimal value);
			partial void OnPriceWhenRetroactiveChanged();
			private decimal _PriceWhenRetroactive;
			[Column(Storage="_PriceWhenRetroactive", DbType="Decimal(18,2) NOT NULL", CanBeNull=false)]
			public  override decimal PriceWhenRetroactive {
				get { return _PriceWhenRetroactive; }
				set {
					if (_PriceWhenRetroactive != value) {
						OnPriceWhenRetroactiveChanging(value);
						SendPropertyChanging();
						_PriceWhenRetroactive = value;
						SendPropertyChanged("PriceWhenRetroactive");
						OnPriceWhenRetroactiveChanged();
					}
				}
			}

			partial void OnDonatePageControlChanging(Model.Entities.DonationIcon.Control value);
			partial void OnDonatePageControlChanged();
			private Model.Entities.DonationIcon.Control _DonatePageControl;
			[Column(Storage="_DonatePageControl", DbType="Int NOT NULL", CanBeNull=false)]
			public  override Model.Entities.DonationIcon.Control DonatePageControl {
				get { return _DonatePageControl; }
				set {
					if (_DonatePageControl != value) {
						OnDonatePageControlChanging(value);
						SendPropertyChanging();
						_DonatePageControl = value;
						SendPropertyChanged("DonatePageControl");
						OnDonatePageControlChanged();
					}
				}
			}

			partial void OnDonatePageHeaderChanging(string value);
			partial void OnDonatePageHeaderChanged();
			private string _DonatePageHeader;
			[Column(Storage="_DonatePageHeader", DbType="VarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
			public  override string DonatePageHeader {
				get { return _DonatePageHeader; }
				set {
					if (_DonatePageHeader != value) {
						OnDonatePageHeaderChanging(value);
						SendPropertyChanging();
						_DonatePageHeader = value;
						SendPropertyChanged("DonatePageHeader");
						OnDonatePageHeaderChanged();
					}
				}
			}

			partial void OnDonatePageCenterTextChanging(string value);
			partial void OnDonatePageCenterTextChanged();
			private string _DonatePageCenterText;
			[Column(Storage="_DonatePageCenterText", DbType="VarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
			public  override string DonatePageCenterText {
				get { return _DonatePageCenterText; }
				set {
					if (_DonatePageCenterText != value) {
						OnDonatePageCenterTextChanging(value);
						SendPropertyChanging();
						_DonatePageCenterText = value;
						SendPropertyChanged("DonatePageCenterText");
						OnDonatePageCenterTextChanged();
					}
				}
			}

			partial void OnDonatePageLine1TextChanging(string value);
			partial void OnDonatePageLine1TextChanged();
			private string _DonatePageLine1Text;
			[Column(Storage="_DonatePageLine1Text", DbType="VarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
			public  override string DonatePageLine1Text {
				get { return _DonatePageLine1Text; }
				set {
					if (_DonatePageLine1Text != value) {
						OnDonatePageLine1TextChanging(value);
						SendPropertyChanging();
						_DonatePageLine1Text = value;
						SendPropertyChanged("DonatePageLine1Text");
						OnDonatePageLine1TextChanged();
					}
				}
			}

			partial void OnDonatePageLine2TextChanging(string value);
			partial void OnDonatePageLine2TextChanged();
			private string _DonatePageLine2Text;
			[Column(Storage="_DonatePageLine2Text", DbType="VarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
			public  override string DonatePageLine2Text {
				get { return _DonatePageLine2Text; }
				set {
					if (_DonatePageLine2Text != value) {
						OnDonatePageLine2TextChanging(value);
						SendPropertyChanging();
						_DonatePageLine2Text = value;
						SendPropertyChanged("DonatePageLine2Text");
						OnDonatePageLine2TextChanged();
					}
				}
			}

			partial void OnEnabledChanging(bool value);
			partial void OnEnabledChanged();
			private bool _Enabled;
			[Column(Storage="_Enabled", DbType="Bit NOT NULL", CanBeNull=false)]
			public  override bool Enabled {
				get { return _Enabled; }
				set {
					if (_Enabled != value) {
						OnEnabledChanging(value);
						SendPropertyChanging();
						_Enabled = value;
						SendPropertyChanged("Enabled");
						OnEnabledChanged();
					}
				}
			}

			partial void OnImgGuidChanging(Guid? value);
			partial void OnImgGuidChanged();
			private Guid? _ImgGuid;
			[Column(Storage="_ImgGuid", DbType="UniqueIdentifier")]
			public  override Guid? ImgGuid {
				get { return _ImgGuid; }
				set {
					if (_ImgGuid != value) {
						OnImgGuidChanging(value);
						SendPropertyChanging();
						_ImgGuid = value;
						SendPropertyChanged("ImgGuid");
						OnImgGuidChanged();
					}
				}
			}

			partial void OnImgExtensionChanging(string value);
			partial void OnImgExtensionChanged();
			private string _ImgExtension;
			[Column(Storage="_ImgExtension", DbType="VarChar(4)")]
			public  override string ImgExtension {
				get { return _ImgExtension; }
				set {
					if (_ImgExtension != value) {
						OnImgExtensionChanging(value);
						SendPropertyChanging();
						_ImgExtension = value;
						SendPropertyChanged("ImgExtension");
						OnImgExtensionChanged();
					}
				}
			}

			partial void OnVatableChanging(bool? value);
			partial void OnVatableChanged();
			private bool? _Vatable;
			[Column(Storage="_Vatable", DbType="Bit")]
			public  override bool? Vatable {
				get { return _Vatable; }
				set {
					if (_Vatable != value) {
						OnVatableChanging(value);
						SendPropertyChanging();
						_Vatable = value;
						SendPropertyChanged("Vatable");
						OnVatableChanged();
					}
				}
			}

			partial void OnDescriptionChanging(string value);
			partial void OnDescriptionChanged();
			private string _Description;
			[Column(Storage="_Description", DbType="Text", UpdateCheck=UpdateCheck.Never)]
			public  override string Description {
				get { return _Description; }
				set {
					if (_Description != value) {
						OnDescriptionChanging(value);
						SendPropertyChanging();
						_Description = value;
						SendPropertyChanged("Description");
						OnDescriptionChanged();
					}
				}
			}

			partial void OnCharityChanging(bool value);
			partial void OnCharityChanged();
			private bool _Charity;
			[Column(Storage="_Charity", DbType="Bit NOT NULL", CanBeNull=false)]
			public  override bool Charity {
				get { return _Charity; }
				set {
					if (_Charity != value) {
						OnCharityChanging(value);
						SendPropertyChanging();
						_Charity = value;
						SendPropertyChanged("Charity");
						OnCharityChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.Event")]
 		public partial class Event : Model.Entities.Event, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public Event()
			{
				_Venue = default(EntityRef<Venue>); 
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnKChanging(int value);
			partial void OnKChanged();
			private int _K;
			[Column(Storage="_K", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
			public  override int K {
				get { return _K; }
				set {
					if (_K != value) {
						OnKChanging(value);
						SendPropertyChanging();
						_K = value;
						SendPropertyChanged("K");
						OnKChanged();
					}
				}
			}

			partial void OnNameChanging(string value);
			partial void OnNameChanged();
			private string _Name;
			[Column(Storage="_Name", DbType="VarChar(200)", CanBeNull=false)]
			public  override string Name {
				get { return _Name; }
				set {
					if (_Name != value) {
						OnNameChanging(value);
						SendPropertyChanging();
						_Name = value;
						SendPropertyChanged("Name");
						OnNameChanged();
					}
				}
			}

			partial void OnShortDetailsHtmlChanging(string value);
			partial void OnShortDetailsHtmlChanged();
			private string _ShortDetailsHtml;
			[Column(Storage="_ShortDetailsHtml", DbType="Text", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
			public  override string ShortDetailsHtml {
				get { return _ShortDetailsHtml; }
				set {
					if (_ShortDetailsHtml != value) {
						OnShortDetailsHtmlChanging(value);
						SendPropertyChanging();
						_ShortDetailsHtml = value;
						SendPropertyChanged("ShortDetailsHtml");
						OnShortDetailsHtmlChanged();
					}
				}
			}

			partial void OnLongDetailsHtmlChanging(string value);
			partial void OnLongDetailsHtmlChanged();
			private string _LongDetailsHtml;
			[Column(Storage="_LongDetailsHtml", DbType="Text", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
			public  override string LongDetailsHtml {
				get { return _LongDetailsHtml; }
				set {
					if (_LongDetailsHtml != value) {
						OnLongDetailsHtmlChanging(value);
						SendPropertyChanging();
						_LongDetailsHtml = value;
						SendPropertyChanged("LongDetailsHtml");
						OnLongDetailsHtmlChanged();
					}
				}
			}

			partial void OnLongDetailsPlainChanging(bool value);
			partial void OnLongDetailsPlainChanged();
			private bool _LongDetailsPlain;
			[Column(Storage="_LongDetailsPlain", DbType="Bit", CanBeNull=false)]
			public  override bool LongDetailsPlain {
				get { return _LongDetailsPlain; }
				set {
					if (_LongDetailsPlain != value) {
						OnLongDetailsPlainChanging(value);
						SendPropertyChanging();
						_LongDetailsPlain = value;
						SendPropertyChanged("LongDetailsPlain");
						OnLongDetailsPlainChanged();
					}
				}
			}

			partial void OnPicChanging(Guid value);
			partial void OnPicChanged();
			private Guid _Pic;
			[Column(Storage="_Pic", DbType="UniqueIdentifier", CanBeNull=false)]
			public  override Guid Pic {
				get { return _Pic; }
				set {
					if (_Pic != value) {
						OnPicChanging(value);
						SendPropertyChanging();
						_Pic = value;
						SendPropertyChanged("Pic");
						OnPicChanged();
					}
				}
			}

			partial void OnDateTimeChanging(DateTime value);
			partial void OnDateTimeChanged();
			private DateTime _DateTime;
			[Column(Storage="_DateTime", DbType="DateTime", CanBeNull=false)]
			public  override DateTime DateTime {
				get { return _DateTime; }
				set {
					if (_DateTime != value) {
						OnDateTimeChanging(value);
						SendPropertyChanging();
						_DateTime = value;
						SendPropertyChanged("DateTime");
						OnDateTimeChanged();
					}
				}
			}

			partial void OnVenueKChanging(int value);
			partial void OnVenueKChanged();
			private int _VenueK;
			[Column(Storage="_VenueK", DbType="Int", CanBeNull=false)]
			public  override int VenueK {
				get { return _VenueK; }
				set {
					if (_VenueK != value) {
						OnVenueKChanging(value);
						SendPropertyChanging();
						_VenueK = value;
						SendPropertyChanged("VenueK");
						OnVenueKChanged();
					}
				}
			}

			partial void OnAdminNoteChanging(string value);
			partial void OnAdminNoteChanged();
			private string _AdminNote;
			[Column(Storage="_AdminNote", DbType="Text", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
			public  override string AdminNote {
				get { return _AdminNote; }
				set {
					if (_AdminNote != value) {
						OnAdminNoteChanging(value);
						SendPropertyChanging();
						_AdminNote = value;
						SendPropertyChanged("AdminNote");
						OnAdminNoteChanged();
					}
				}
			}

			partial void OnCapacityChanging(int value);
			partial void OnCapacityChanged();
			private int _Capacity;
			[Column(Storage="_Capacity", DbType="Int", CanBeNull=false)]
			public  override int Capacity {
				get { return _Capacity; }
				set {
					if (_Capacity != value) {
						OnCapacityChanging(value);
						SendPropertyChanging();
						_Capacity = value;
						SendPropertyChanged("Capacity");
						OnCapacityChanged();
					}
				}
			}

			partial void OnOwnerUsrKChanging(int value);
			partial void OnOwnerUsrKChanged();
			private int _OwnerUsrK;
			[Column(Storage="_OwnerUsrK", DbType="Int", CanBeNull=false)]
			public  override int OwnerUsrK {
				get { return _OwnerUsrK; }
				set {
					if (_OwnerUsrK != value) {
						OnOwnerUsrKChanging(value);
						SendPropertyChanging();
						_OwnerUsrK = value;
						SendPropertyChanged("OwnerUsrK");
						OnOwnerUsrKChanged();
					}
				}
			}

			partial void OnPicNewChanging(Guid value);
			partial void OnPicNewChanged();
			private Guid _PicNew;
			[Column(Storage="_PicNew", DbType="UniqueIdentifier", CanBeNull=false)]
			public  override Guid PicNew {
				get { return _PicNew; }
				set {
					if (_PicNew != value) {
						OnPicNewChanging(value);
						SendPropertyChanging();
						_PicNew = value;
						SendPropertyChanged("PicNew");
						OnPicNewChanged();
					}
				}
			}

			partial void OnTotalCommentsChanging(int value);
			partial void OnTotalCommentsChanged();
			private int _TotalComments;
			[Column(Storage="_TotalComments", DbType="Int", CanBeNull=false)]
			public  override int TotalComments {
				get { return _TotalComments; }
				set {
					if (_TotalComments != value) {
						OnTotalCommentsChanging(value);
						SendPropertyChanging();
						_TotalComments = value;
						SendPropertyChanged("TotalComments");
						OnTotalCommentsChanged();
					}
				}
			}

			partial void OnLastPostChanging(DateTime value);
			partial void OnLastPostChanged();
			private DateTime _LastPost;
			[Column(Storage="_LastPost", DbType="DateTime", CanBeNull=false)]
			public  override DateTime LastPost {
				get { return _LastPost; }
				set {
					if (_LastPost != value) {
						OnLastPostChanging(value);
						SendPropertyChanging();
						_LastPost = value;
						SendPropertyChanged("LastPost");
						OnLastPostChanged();
					}
				}
			}

			partial void OnAverageCommentDateTimeChanging(DateTime value);
			partial void OnAverageCommentDateTimeChanged();
			private DateTime _AverageCommentDateTime;
			[Column(Storage="_AverageCommentDateTime", DbType="DateTime", CanBeNull=false)]
			public  override DateTime AverageCommentDateTime {
				get { return _AverageCommentDateTime; }
				set {
					if (_AverageCommentDateTime != value) {
						OnAverageCommentDateTimeChanging(value);
						SendPropertyChanging();
						_AverageCommentDateTime = value;
						SendPropertyChanged("AverageCommentDateTime");
						OnAverageCommentDateTimeChanged();
					}
				}
			}

			partial void OnTotalPhotosChanging(int value);
			partial void OnTotalPhotosChanged();
			private int _TotalPhotos;
			[Column(Storage="_TotalPhotos", DbType="Int", CanBeNull=false)]
			public  override int TotalPhotos {
				get { return _TotalPhotos; }
				set {
					if (_TotalPhotos != value) {
						OnTotalPhotosChanging(value);
						SendPropertyChanging();
						_TotalPhotos = value;
						SendPropertyChanged("TotalPhotos");
						OnTotalPhotosChanged();
					}
				}
			}

			partial void OnLivePhotosChanging(int value);
			partial void OnLivePhotosChanged();
			private int _LivePhotos;
			[Column(Storage="_LivePhotos", DbType="Int", CanBeNull=false)]
			public  override int LivePhotos {
				get { return _LivePhotos; }
				set {
					if (_LivePhotos != value) {
						OnLivePhotosChanging(value);
						SendPropertyChanging();
						_LivePhotos = value;
						SendPropertyChanged("LivePhotos");
						OnLivePhotosChanged();
					}
				}
			}

			partial void OnAddedDateTimeChanging(DateTime value);
			partial void OnAddedDateTimeChanged();
			private DateTime _AddedDateTime;
			[Column(Storage="_AddedDateTime", DbType="DateTime", CanBeNull=false)]
			public  override DateTime AddedDateTime {
				get { return _AddedDateTime; }
				set {
					if (_AddedDateTime != value) {
						OnAddedDateTimeChanging(value);
						SendPropertyChanging();
						_AddedDateTime = value;
						SendPropertyChanged("AddedDateTime");
						OnAddedDateTimeChanged();
					}
				}
			}

			partial void OnHasGuestlistChanging(bool value);
			partial void OnHasGuestlistChanged();
			private bool _HasGuestlist;
			[Column(Storage="_HasGuestlist", DbType="Bit", CanBeNull=false)]
			public  override bool HasGuestlist {
				get { return _HasGuestlist; }
				set {
					if (_HasGuestlist != value) {
						OnHasGuestlistChanging(value);
						SendPropertyChanging();
						_HasGuestlist = value;
						SendPropertyChanged("HasGuestlist");
						OnHasGuestlistChanged();
					}
				}
			}

			partial void OnLastLivePhotoChanging(DateTime value);
			partial void OnLastLivePhotoChanged();
			private DateTime _LastLivePhoto;
			[Column(Storage="_LastLivePhoto", DbType="DateTime", CanBeNull=false)]
			public  override DateTime LastLivePhoto {
				get { return _LastLivePhoto; }
				set {
					if (_LastLivePhoto != value) {
						OnLastLivePhotoChanging(value);
						SendPropertyChanging();
						_LastLivePhoto = value;
						SendPropertyChanged("LastLivePhoto");
						OnLastLivePhotoChanged();
					}
				}
			}

			partial void OnHasSpotterChanging(bool value);
			partial void OnHasSpotterChanged();
			private bool _HasSpotter;
			[Column(Storage="_HasSpotter", DbType="Bit", CanBeNull=false)]
			public  override bool HasSpotter {
				get { return _HasSpotter; }
				set {
					if (_HasSpotter != value) {
						OnHasSpotterChanging(value);
						SendPropertyChanging();
						_HasSpotter = value;
						SendPropertyChanged("HasSpotter");
						OnHasSpotterChanged();
					}
				}
			}

			partial void OnGuestlistOpenChanging(bool value);
			partial void OnGuestlistOpenChanged();
			private bool _GuestlistOpen;
			[Column(Storage="_GuestlistOpen", DbType="Bit", CanBeNull=false)]
			public  override bool GuestlistOpen {
				get { return _GuestlistOpen; }
				set {
					if (_GuestlistOpen != value) {
						OnGuestlistOpenChanging(value);
						SendPropertyChanging();
						_GuestlistOpen = value;
						SendPropertyChanged("GuestlistOpen");
						OnGuestlistOpenChanged();
					}
				}
			}

			partial void OnGuestlistFinishedChanging(bool value);
			partial void OnGuestlistFinishedChanged();
			private bool _GuestlistFinished;
			[Column(Storage="_GuestlistFinished", DbType="Bit", CanBeNull=false)]
			public  override bool GuestlistFinished {
				get { return _GuestlistFinished; }
				set {
					if (_GuestlistFinished != value) {
						OnGuestlistFinishedChanging(value);
						SendPropertyChanging();
						_GuestlistFinished = value;
						SendPropertyChanged("GuestlistFinished");
						OnGuestlistFinishedChanged();
					}
				}
			}

			partial void OnGuestlistLimitChanging(int value);
			partial void OnGuestlistLimitChanged();
			private int _GuestlistLimit;
			[Column(Storage="_GuestlistLimit", DbType="Int", CanBeNull=false)]
			public  override int GuestlistLimit {
				get { return _GuestlistLimit; }
				set {
					if (_GuestlistLimit != value) {
						OnGuestlistLimitChanging(value);
						SendPropertyChanging();
						_GuestlistLimit = value;
						SendPropertyChanged("GuestlistLimit");
						OnGuestlistLimitChanged();
					}
				}
			}

			partial void OnGuestlistCountChanging(int value);
			partial void OnGuestlistCountChanged();
			private int _GuestlistCount;
			[Column(Storage="_GuestlistCount", DbType="Int", CanBeNull=false)]
			public  override int GuestlistCount {
				get { return _GuestlistCount; }
				set {
					if (_GuestlistCount != value) {
						OnGuestlistCountChanging(value);
						SendPropertyChanging();
						_GuestlistCount = value;
						SendPropertyChanged("GuestlistCount");
						OnGuestlistCountChanged();
					}
				}
			}

			partial void OnGuestlistDetailsChanging(string value);
			partial void OnGuestlistDetailsChanged();
			private string _GuestlistDetails;
			[Column(Storage="_GuestlistDetails", DbType="Text", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
			public  override string GuestlistDetails {
				get { return _GuestlistDetails; }
				set {
					if (_GuestlistDetails != value) {
						OnGuestlistDetailsChanging(value);
						SendPropertyChanging();
						_GuestlistDetails = value;
						SendPropertyChanged("GuestlistDetails");
						OnGuestlistDetailsChanged();
					}
				}
			}

			partial void OnGuestlistPromoterKChanging(int value);
			partial void OnGuestlistPromoterKChanged();
			private int _GuestlistPromoterK;
			[Column(Storage="_GuestlistPromoterK", DbType="Int", CanBeNull=false)]
			public  override int GuestlistPromoterK {
				get { return _GuestlistPromoterK; }
				set {
					if (_GuestlistPromoterK != value) {
						OnGuestlistPromoterKChanging(value);
						SendPropertyChanging();
						_GuestlistPromoterK = value;
						SendPropertyChanged("GuestlistPromoterK");
						OnGuestlistPromoterKChanged();
					}
				}
			}

			partial void OnGuestlistRegularPriceChanging(double value);
			partial void OnGuestlistRegularPriceChanged();
			private double _GuestlistRegularPrice;
			[Column(Storage="_GuestlistRegularPrice", DbType="Float", CanBeNull=false)]
			public  override double GuestlistRegularPrice {
				get { return _GuestlistRegularPrice; }
				set {
					if (_GuestlistRegularPrice != value) {
						OnGuestlistRegularPriceChanging(value);
						SendPropertyChanging();
						_GuestlistRegularPrice = value;
						SendPropertyChanged("GuestlistRegularPrice");
						OnGuestlistRegularPriceChanged();
					}
				}
			}

			partial void OnGuestlistPriceChanging(double value);
			partial void OnGuestlistPriceChanged();
			private double _GuestlistPrice;
			[Column(Storage="_GuestlistPrice", DbType="Float", CanBeNull=false)]
			public  override double GuestlistPrice {
				get { return _GuestlistPrice; }
				set {
					if (_GuestlistPrice != value) {
						OnGuestlistPriceChanging(value);
						SendPropertyChanging();
						_GuestlistPrice = value;
						SendPropertyChanged("GuestlistPrice");
						OnGuestlistPriceChanged();
					}
				}
			}

			partial void OnGuestlistPromotionChanging(bool value);
			partial void OnGuestlistPromotionChanged();
			private bool _GuestlistPromotion;
			[Column(Storage="_GuestlistPromotion", DbType="Bit", CanBeNull=false)]
			public  override bool GuestlistPromotion {
				get { return _GuestlistPromotion; }
				set {
					if (_GuestlistPromotion != value) {
						OnGuestlistPromotionChanging(value);
						SendPropertyChanging();
						_GuestlistPromotion = value;
						SendPropertyChanged("GuestlistPromotion");
						OnGuestlistPromotionChanged();
					}
				}
			}

			partial void OnStartTimeChanging(Model.Entities.Event.StartTimes value);
			partial void OnStartTimeChanged();
			private Model.Entities.Event.StartTimes _StartTime;
			[Column(Storage="_StartTime", DbType="Int", CanBeNull=false)]
			public  override Model.Entities.Event.StartTimes StartTime {
				get { return _StartTime; }
				set {
					if (_StartTime != value) {
						OnStartTimeChanging(value);
						SendPropertyChanging();
						_StartTime = value;
						SendPropertyChanged("StartTime");
						OnStartTimeChanged();
					}
				}
			}

			partial void OnAdminEmailChanging(string value);
			partial void OnAdminEmailChanged();
			private string _AdminEmail;
			[Column(Storage="_AdminEmail", DbType="VarChar(50)", CanBeNull=false)]
			public  override string AdminEmail {
				get { return _AdminEmail; }
				set {
					if (_AdminEmail != value) {
						OnAdminEmailChanging(value);
						SendPropertyChanging();
						_AdminEmail = value;
						SendPropertyChanged("AdminEmail");
						OnAdminEmailChanged();
					}
				}
			}

			partial void OnDonatedChanging(bool value);
			partial void OnDonatedChanged();
			private bool _Donated;
			[Column(Storage="_Donated", DbType="Bit", CanBeNull=false)]
			public  override bool Donated {
				get { return _Donated; }
				set {
					if (_Donated != value) {
						OnDonatedChanging(value);
						SendPropertyChanging();
						_Donated = value;
						SendPropertyChanged("Donated");
						OnDonatedChanged();
					}
				}
			}

			partial void OnIsDescriptionTextChanging(bool value);
			partial void OnIsDescriptionTextChanged();
			private bool _IsDescriptionText;
			[Column(Storage="_IsDescriptionText", DbType="Bit", CanBeNull=false)]
			public  override bool IsDescriptionText {
				get { return _IsDescriptionText; }
				set {
					if (_IsDescriptionText != value) {
						OnIsDescriptionTextChanging(value);
						SendPropertyChanging();
						_IsDescriptionText = value;
						SendPropertyChanged("IsDescriptionText");
						OnIsDescriptionTextChanged();
					}
				}
			}

			partial void OnIsNewChanging(bool value);
			partial void OnIsNewChanged();
			private bool _IsNew;
			[Column(Storage="_IsNew", DbType="Bit", CanBeNull=false)]
			public  override bool IsNew {
				get { return _IsNew; }
				set {
					if (_IsNew != value) {
						OnIsNewChanging(value);
						SendPropertyChanging();
						_IsNew = value;
						SendPropertyChanged("IsNew");
						OnIsNewChanged();
					}
				}
			}

			partial void OnIsDescriptionCleanHtmlChanging(bool value);
			partial void OnIsDescriptionCleanHtmlChanged();
			private bool _IsDescriptionCleanHtml;
			[Column(Storage="_IsDescriptionCleanHtml", DbType="Bit", CanBeNull=false)]
			public  override bool IsDescriptionCleanHtml {
				get { return _IsDescriptionCleanHtml; }
				set {
					if (_IsDescriptionCleanHtml != value) {
						OnIsDescriptionCleanHtmlChanging(value);
						SendPropertyChanging();
						_IsDescriptionCleanHtml = value;
						SendPropertyChanged("IsDescriptionCleanHtml");
						OnIsDescriptionCleanHtmlChanged();
					}
				}
			}

			partial void OnIsEditedChanging(bool value);
			partial void OnIsEditedChanged();
			private bool _IsEdited;
			[Column(Storage="_IsEdited", DbType="Bit", CanBeNull=false)]
			public  override bool IsEdited {
				get { return _IsEdited; }
				set {
					if (_IsEdited != value) {
						OnIsEditedChanging(value);
						SendPropertyChanging();
						_IsEdited = value;
						SendPropertyChanged("IsEdited");
						OnIsEditedChanged();
					}
				}
			}

			partial void OnDuplicateGuidChanging(Guid value);
			partial void OnDuplicateGuidChanged();
			private Guid _DuplicateGuid;
			[Column(Storage="_DuplicateGuid", DbType="UniqueIdentifier", CanBeNull=false)]
			public  override Guid DuplicateGuid {
				get { return _DuplicateGuid; }
				set {
					if (_DuplicateGuid != value) {
						OnDuplicateGuidChanging(value);
						SendPropertyChanging();
						_DuplicateGuid = value;
						SendPropertyChanged("DuplicateGuid");
						OnDuplicateGuidChanged();
					}
				}
			}

			partial void OnPicStateChanging(string value);
			partial void OnPicStateChanged();
			private string _PicState;
			[Column(Storage="_PicState", DbType="VarChar(100)", CanBeNull=false)]
			public  override string PicState {
				get { return _PicState; }
				set {
					if (_PicState != value) {
						OnPicStateChanging(value);
						SendPropertyChanging();
						_PicState = value;
						SendPropertyChanged("PicState");
						OnPicStateChanged();
					}
				}
			}

			partial void OnPicPhotoKChanging(int value);
			partial void OnPicPhotoKChanged();
			private int _PicPhotoK;
			[Column(Storage="_PicPhotoK", DbType="Int", CanBeNull=false)]
			public  override int PicPhotoK {
				get { return _PicPhotoK; }
				set {
					if (_PicPhotoK != value) {
						OnPicPhotoKChanging(value);
						SendPropertyChanging();
						_PicPhotoK = value;
						SendPropertyChanged("PicPhotoK");
						OnPicPhotoKChanged();
					}
				}
			}

			partial void OnPicMiscKChanging(int value);
			partial void OnPicMiscKChanged();
			private int _PicMiscK;
			[Column(Storage="_PicMiscK", DbType="Int", CanBeNull=false)]
			public  override int PicMiscK {
				get { return _PicMiscK; }
				set {
					if (_PicMiscK != value) {
						OnPicMiscKChanging(value);
						SendPropertyChanging();
						_PicMiscK = value;
						SendPropertyChanged("PicMiscK");
						OnPicMiscKChanged();
					}
				}
			}

			partial void OnUrlFragmentChanging(string value);
			partial void OnUrlFragmentChanged();
			private string _UrlFragment;
			[Column(Storage="_UrlFragment", DbType="VarChar(255)", CanBeNull=false)]
			public  override string UrlFragment {
				get { return _UrlFragment; }
				set {
					if (_UrlFragment != value) {
						OnUrlFragmentChanging(value);
						SendPropertyChanging();
						_UrlFragment = value;
						SendPropertyChanged("UrlFragment");
						OnUrlFragmentChanged();
					}
				}
			}

			partial void OnMusicTypesStringChanging(string value);
			partial void OnMusicTypesStringChanged();
			private string _MusicTypesString;
			[Column(Storage="_MusicTypesString", DbType="Text", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
			public  override string MusicTypesString {
				get { return _MusicTypesString; }
				set {
					if (_MusicTypesString != value) {
						OnMusicTypesStringChanging(value);
						SendPropertyChanging();
						_MusicTypesString = value;
						SendPropertyChanged("MusicTypesString");
						OnMusicTypesStringChanged();
					}
				}
			}

			partial void OnModeratorUsrKChanging(int value);
			partial void OnModeratorUsrKChanged();
			private int _ModeratorUsrK;
			[Column(Storage="_ModeratorUsrK", DbType="Int", CanBeNull=false)]
			public  override int ModeratorUsrK {
				get { return _ModeratorUsrK; }
				set {
					if (_ModeratorUsrK != value) {
						OnModeratorUsrKChanging(value);
						SendPropertyChanging();
						_ModeratorUsrK = value;
						SendPropertyChanged("ModeratorUsrK");
						OnModeratorUsrKChanged();
					}
				}
			}

			partial void OnBuyableLockDateTimeChanging(DateTime value);
			partial void OnBuyableLockDateTimeChanged();
			private DateTime _BuyableLockDateTime;
			[Column(Storage="_BuyableLockDateTime", DbType="DateTime", CanBeNull=false)]
			public  override DateTime BuyableLockDateTime {
				get { return _BuyableLockDateTime; }
				set {
					if (_BuyableLockDateTime != value) {
						OnBuyableLockDateTimeChanging(value);
						SendPropertyChanging();
						_BuyableLockDateTime = value;
						SendPropertyChanged("BuyableLockDateTime");
						OnBuyableLockDateTimeChanged();
					}
				}
			}

			partial void OnIsTicketsAvailableChanging(bool value);
			partial void OnIsTicketsAvailableChanged();
			private bool _IsTicketsAvailable;
			[Column(Storage="_IsTicketsAvailable", DbType="Bit", CanBeNull=false)]
			public  override bool IsTicketsAvailable {
				get { return _IsTicketsAvailable; }
				set {
					if (_IsTicketsAvailable != value) {
						OnIsTicketsAvailableChanging(value);
						SendPropertyChanging();
						_IsTicketsAvailable = value;
						SendPropertyChanged("IsTicketsAvailable");
						OnIsTicketsAvailableChanged();
					}
				}
			}

			partial void OnTicketHeatChanging(double value);
			partial void OnTicketHeatChanged();
			private double _TicketHeat;
			[Column(Storage="_TicketHeat", DbType="Float", CanBeNull=false)]
			public  override double TicketHeat {
				get { return _TicketHeat; }
				set {
					if (_TicketHeat != value) {
						OnTicketHeatChanging(value);
						SendPropertyChanging();
						_TicketHeat = value;
						SendPropertyChanged("TicketHeat");
						OnTicketHeatChanged();
					}
				}
			}

			partial void OnHasHilightChanging(bool value);
			partial void OnHasHilightChanged();
			private bool _HasHilight;
			[Column(Storage="_HasHilight", DbType="Bit", CanBeNull=false)]
			public  override bool HasHilight {
				get { return _HasHilight; }
				set {
					if (_HasHilight != value) {
						OnHasHilightChanging(value);
						SendPropertyChanging();
						_HasHilight = value;
						SendPropertyChanged("HasHilight");
						OnHasHilightChanged();
					}
				}
			}

			partial void OnUsrAttendCountChanging(int value);
			partial void OnUsrAttendCountChanged();
			private int _UsrAttendCount;
			[Column(Storage="_UsrAttendCount", DbType="Int", CanBeNull=false)]
			public  override int UsrAttendCount {
				get { return _UsrAttendCount; }
				set {
					if (_UsrAttendCount != value) {
						OnUsrAttendCountChanging(value);
						SendPropertyChanging();
						_UsrAttendCount = value;
						SendPropertyChanged("UsrAttendCount");
						OnUsrAttendCountChanged();
					}
				}
			}

			partial void OnFixedDiscountChanging(double value);
			partial void OnFixedDiscountChanged();
			private double _FixedDiscount;
			[Column(Storage="_FixedDiscount", DbType="Float", CanBeNull=false)]
			public  override double FixedDiscount {
				get { return _FixedDiscount; }
				set {
					if (_FixedDiscount != value) {
						OnFixedDiscountChanging(value);
						SendPropertyChanging();
						_FixedDiscount = value;
						SendPropertyChanged("FixedDiscount");
						OnFixedDiscountChanged();
					}
				}
			}

			partial void OnIsPriceFixedChanging(bool value);
			partial void OnIsPriceFixedChanged();
			private bool _IsPriceFixed;
			[Column(Storage="_IsPriceFixed", DbType="Bit", CanBeNull=false)]
			public  override bool IsPriceFixed {
				get { return _IsPriceFixed; }
				set {
					if (_IsPriceFixed != value) {
						OnIsPriceFixedChanging(value);
						SendPropertyChanging();
						_IsPriceFixed = value;
						SendPropertyChanged("IsPriceFixed");
						OnIsPriceFixedChanged();
					}
				}
			}



			partial void OnDontShowHotelLinkChanging(bool? value);
			partial void OnDontShowHotelLinkChanged();
			private bool? _DontShowHotelLink;
			[Column(Storage="_DontShowHotelLink", DbType="Bit")]
			public  override bool? DontShowHotelLink {
				get { return _DontShowHotelLink; }
				set {
					if (_DontShowHotelLink != value) {
						OnDontShowHotelLinkChanging(value);
						SendPropertyChanging();
						_DontShowHotelLink = value;
						SendPropertyChanged("DontShowHotelLink");
						OnDontShowHotelLinkChanged();
					}
				}
			}

			partial void OnSpotterRequestChanging(bool? value);
			partial void OnSpotterRequestChanged();
			private bool? _SpotterRequest;
			[Column(Storage="_SpotterRequest", DbType="Bit")]
			public  override bool? SpotterRequest {
				get { return _SpotterRequest; }
				set {
					if (_SpotterRequest != value) {
						OnSpotterRequestChanging(value);
						SendPropertyChanging();
						_SpotterRequest = value;
						SendPropertyChanged("SpotterRequest");
						OnSpotterRequestChanged();
					}
				}
			}

			partial void OnSpotterRequestNameChanging(string value);
			partial void OnSpotterRequestNameChanged();
			private string _SpotterRequestName;
			[Column(Storage="_SpotterRequestName", DbType="VarChar(100)")]
			public  override string SpotterRequestName {
				get { return _SpotterRequestName; }
				set {
					if (_SpotterRequestName != value) {
						OnSpotterRequestNameChanging(value);
						SendPropertyChanging();
						_SpotterRequestName = value;
						SendPropertyChanged("SpotterRequestName");
						OnSpotterRequestNameChanged();
					}
				}
			}

			partial void OnSpotterRequestNumberChanging(string value);
			partial void OnSpotterRequestNumberChanged();
			private string _SpotterRequestNumber;
			[Column(Storage="_SpotterRequestNumber", DbType="VarChar(100)")]
			public  override string SpotterRequestNumber {
				get { return _SpotterRequestNumber; }
				set {
					if (_SpotterRequestNumber != value) {
						OnSpotterRequestNumberChanging(value);
						SendPropertyChanging();
						_SpotterRequestNumber = value;
						SendPropertyChanged("SpotterRequestNumber");
						OnSpotterRequestNumberChanged();
					}
				}
			}

			partial void OnFacebookEventIdChanging(long? value);
			partial void OnFacebookEventIdChanged();
			private long? _FacebookEventId;
			[Column(Storage="_FacebookEventId", DbType="BigInt")]
			public  override long? FacebookEventId {
				get { return _FacebookEventId; }
				set {
					if (_FacebookEventId != value) {
						OnFacebookEventIdChanging(value);
						SendPropertyChanging();
						_FacebookEventId = value;
						SendPropertyChanged("FacebookEventId");
						OnFacebookEventIdChanged();
					}
				}
			}

			#endregion

			#region Associations

			private EntityRef<Venue> _Venue;
			[Association(Name="Venue_Event", Storage="_Venue", ThisKey="VenueK", IsForeignKey=true)]
			public Venue Venue {
				get { return _Venue.Entity; }
				set {
					Venue previousValue = _Venue.Entity;
					if ((previousValue != value) || (!_Venue.HasLoadedOrAssignedValue)) {
						SendPropertyChanging();
						if (previousValue != null) {
							_Venue.Entity = null;
							previousValue.Events.Remove(this);
						}
						_Venue.Entity = value;
						if (value != null) {
							value.Events.Add(this);
							_VenueK = value.K;
						}
						else {
							_VenueK = default(int);
						}
						SendPropertyChanged("Venue");
					}
				}
			}
			#endregion
		

		}

		[Table(Name=@"dbo.EventBrand")]
 		public partial class EventBrand : Model.Entities.EventBrand, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public EventBrand()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnEventKChanging(int value);
			partial void OnEventKChanged();
			private int _EventK;
			[Column(Storage="_EventK", DbType="Int", CanBeNull=false)]
			public  override int EventK {
				get { return _EventK; }
				set {
					if (_EventK != value) {
						OnEventKChanging(value);
						SendPropertyChanging();
						_EventK = value;
						SendPropertyChanged("EventK");
						OnEventKChanged();
					}
				}
			}

			partial void OnBrandKChanging(int value);
			partial void OnBrandKChanged();
			private int _BrandK;
			[Column(Storage="_BrandK", DbType="Int", CanBeNull=false)]
			public  override int BrandK {
				get { return _BrandK; }
				set {
					if (_BrandK != value) {
						OnBrandKChanging(value);
						SendPropertyChanging();
						_BrandK = value;
						SendPropertyChanged("BrandK");
						OnBrandKChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.EventMusicType")]
 		public partial class EventMusicType : Model.Entities.EventMusicType, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public EventMusicType()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnEventKChanging(int value);
			partial void OnEventKChanged();
			private int _EventK;
			[Column(Storage="_EventK", DbType="Int NOT NULL", CanBeNull=false)]
			public  override int EventK {
				get { return _EventK; }
				set {
					if (_EventK != value) {
						OnEventKChanging(value);
						SendPropertyChanging();
						_EventK = value;
						SendPropertyChanged("EventK");
						OnEventKChanged();
					}
				}
			}

			partial void OnMusicTypeKChanging(int value);
			partial void OnMusicTypeKChanged();
			private int _MusicTypeK;
			[Column(Storage="_MusicTypeK", DbType="Int NOT NULL", CanBeNull=false)]
			public  override int MusicTypeK {
				get { return _MusicTypeK; }
				set {
					if (_MusicTypeK != value) {
						OnMusicTypeKChanging(value);
						SendPropertyChanging();
						_MusicTypeK = value;
						SendPropertyChanged("MusicTypeK");
						OnMusicTypeKChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.EventPromoter")]
 		public partial class EventPromoter : Model.Entities.EventPromoter, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public EventPromoter()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnEventKChanging(int value);
			partial void OnEventKChanged();
			private int _EventK;
			[Column(Storage="_EventK", DbType="Int NOT NULL", CanBeNull=false)]
			public  override int EventK {
				get { return _EventK; }
				set {
					if (_EventK != value) {
						OnEventKChanging(value);
						SendPropertyChanging();
						_EventK = value;
						SendPropertyChanged("EventK");
						OnEventKChanged();
					}
				}
			}

			partial void OnPromoterKChanging(int? value);
			partial void OnPromoterKChanged();
			private int? _PromoterK;
			[Column(Storage="_PromoterK", DbType="Int")]
			public  override int? PromoterK {
				get { return _PromoterK; }
				set {
					if (_PromoterK != value) {
						OnPromoterKChanging(value);
						SendPropertyChanging();
						_PromoterK = value;
						SendPropertyChanged("PromoterK");
						OnPromoterKChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.FacebookPost")]
 		public partial class FacebookPost : Model.Entities.FacebookPost, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public FacebookPost()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnKChanging(int value);
			partial void OnKChanged();
			private int _K;
			[Column(Storage="_K", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
			public  override int K {
				get { return _K; }
				set {
					if (_K != value) {
						OnKChanging(value);
						SendPropertyChanging();
						_K = value;
						SendPropertyChanged("K");
						OnKChanged();
					}
				}
			}

			partial void OnDateTimeChanging(DateTime? value);
			partial void OnDateTimeChanged();
			private DateTime? _DateTime;
			[Column(Storage="_DateTime", DbType="DateTime")]
			public  override DateTime? DateTime {
				get { return _DateTime; }
				set {
					if (_DateTime != value) {
						OnDateTimeChanging(value);
						SendPropertyChanging();
						_DateTime = value;
						SendPropertyChanged("DateTime");
						OnDateTimeChanged();
					}
				}
			}

			partial void OnTypeChanging(Model.Entities.FacebookPost.TypeEnum value);
			partial void OnTypeChanged();
			private Model.Entities.FacebookPost.TypeEnum _Type;
			[Column(Storage="_Type", DbType="Int")]
			public  override Model.Entities.FacebookPost.TypeEnum Type {
				get { return _Type; }
				set {
					if (_Type != value) {
						OnTypeChanging(value);
						SendPropertyChanging();
						_Type = value;
						SendPropertyChanged("Type");
						OnTypeChanged();
					}
				}
			}

			partial void OnUsrKChanging(int? value);
			partial void OnUsrKChanged();
			private int? _UsrK;
			[Column(Storage="_UsrK", DbType="Int")]
			public  override int? UsrK {
				get { return _UsrK; }
				set {
					if (_UsrK != value) {
						OnUsrKChanging(value);
						SendPropertyChanging();
						_UsrK = value;
						SendPropertyChanged("UsrK");
						OnUsrKChanged();
					}
				}
			}

			partial void OnContentChanging(string value);
			partial void OnContentChanged();
			private string _Content;
			[Column(Storage="_Content", DbType="Text", UpdateCheck=UpdateCheck.Never)]
			public  override string Content {
				get { return _Content; }
				set {
					if (_Content != value) {
						OnContentChanging(value);
						SendPropertyChanging();
						_Content = value;
						SendPropertyChanged("Content");
						OnContentChanged();
					}
				}
			}

			partial void OnFacebookUidChanging(long? value);
			partial void OnFacebookUidChanged();
			private long? _FacebookUid;
			[Column(Storage="_FacebookUid", DbType="BigInt")]
			public  override long? FacebookUid {
				get { return _FacebookUid; }
				set {
					if (_FacebookUid != value) {
						OnFacebookUidChanging(value);
						SendPropertyChanging();
						_FacebookUid = value;
						SendPropertyChanged("FacebookUid");
						OnFacebookUidChanged();
					}
				}
			}

			partial void OnDataIntChanging(int value);
			partial void OnDataIntChanged();
			private int _DataInt;
			[Column(Storage="_DataInt", DbType="Int NOT NULL", CanBeNull=false)]
			public  override int DataInt {
				get { return _DataInt; }
				set {
					if (_DataInt != value) {
						OnDataIntChanging(value);
						SendPropertyChanging();
						_DataInt = value;
						SendPropertyChanged("DataInt");
						OnDataIntChanged();
					}
				}
			}

			partial void OnHitsChanging(int? value);
			partial void OnHitsChanged();
			private int? _Hits;
			[Column(Storage="_Hits", DbType="Int")]
			public  override int? Hits {
				get { return _Hits; }
				set {
					if (_Hits != value) {
						OnHitsChanging(value);
						SendPropertyChanging();
						_Hits = value;
						SendPropertyChanged("Hits");
						OnHitsChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.Fiat500Entry")]
 		public partial class Fiat500Entry : Model.Entities.Fiat500Entry, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public Fiat500Entry()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnKChanging(int value);
			partial void OnKChanged();
			private int _K;
			[Column(Storage="_K", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
			public  override int K {
				get { return _K; }
				set {
					if (_K != value) {
						OnKChanging(value);
						SendPropertyChanging();
						_K = value;
						SendPropertyChanged("K");
						OnKChanged();
					}
				}
			}

			partial void OnUsrKChanging(int value);
			partial void OnUsrKChanged();
			private int _UsrK;
			[Column(Storage="_UsrK", DbType="Int", CanBeNull=false)]
			public  override int UsrK {
				get { return _UsrK; }
				set {
					if (_UsrK != value) {
						OnUsrKChanging(value);
						SendPropertyChanging();
						_UsrK = value;
						SendPropertyChanged("UsrK");
						OnUsrKChanged();
					}
				}
			}

			partial void OnSubmittedChanging(DateTime value);
			partial void OnSubmittedChanged();
			private DateTime _Submitted;
			[Column(Storage="_Submitted", DbType="DateTime NOT NULL", CanBeNull=false)]
			public  override DateTime Submitted {
				get { return _Submitted; }
				set {
					if (_Submitted != value) {
						OnSubmittedChanging(value);
						SendPropertyChanging();
						_Submitted = value;
						SendPropertyChanged("Submitted");
						OnSubmittedChanged();
					}
				}
			}

			partial void OnFirstNameChanging(string value);
			partial void OnFirstNameChanged();
			private string _FirstName;
			[Column(Storage="_FirstName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
			public  override string FirstName {
				get { return _FirstName; }
				set {
					if (_FirstName != value) {
						OnFirstNameChanging(value);
						SendPropertyChanging();
						_FirstName = value;
						SendPropertyChanged("FirstName");
						OnFirstNameChanged();
					}
				}
			}

			partial void OnLastNameChanging(string value);
			partial void OnLastNameChanged();
			private string _LastName;
			[Column(Storage="_LastName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
			public  override string LastName {
				get { return _LastName; }
				set {
					if (_LastName != value) {
						OnLastNameChanging(value);
						SendPropertyChanging();
						_LastName = value;
						SendPropertyChanged("LastName");
						OnLastNameChanged();
					}
				}
			}

			partial void OnMobileNumberChanging(string value);
			partial void OnMobileNumberChanged();
			private string _MobileNumber;
			[Column(Storage="_MobileNumber", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
			public  override string MobileNumber {
				get { return _MobileNumber; }
				set {
					if (_MobileNumber != value) {
						OnMobileNumberChanging(value);
						SendPropertyChanging();
						_MobileNumber = value;
						SendPropertyChanged("MobileNumber");
						OnMobileNumberChanged();
					}
				}
			}

			partial void OnEmailAddressChanging(string value);
			partial void OnEmailAddressChanged();
			private string _EmailAddress;
			[Column(Storage="_EmailAddress", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
			public  override string EmailAddress {
				get { return _EmailAddress; }
				set {
					if (_EmailAddress != value) {
						OnEmailAddressChanging(value);
						SendPropertyChanging();
						_EmailAddress = value;
						SendPropertyChanged("EmailAddress");
						OnEmailAddressChanged();
					}
				}
			}

			partial void OnHouseNumberAndStreetNameChanging(string value);
			partial void OnHouseNumberAndStreetNameChanged();
			private string _HouseNumberAndStreetName;
			[Column(Storage="_HouseNumberAndStreetName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
			public  override string HouseNumberAndStreetName {
				get { return _HouseNumberAndStreetName; }
				set {
					if (_HouseNumberAndStreetName != value) {
						OnHouseNumberAndStreetNameChanging(value);
						SendPropertyChanging();
						_HouseNumberAndStreetName = value;
						SendPropertyChanged("HouseNumberAndStreetName");
						OnHouseNumberAndStreetNameChanged();
					}
				}
			}

			partial void OnTownChanging(string value);
			partial void OnTownChanged();
			private string _Town;
			[Column(Storage="_Town", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
			public  override string Town {
				get { return _Town; }
				set {
					if (_Town != value) {
						OnTownChanging(value);
						SendPropertyChanging();
						_Town = value;
						SendPropertyChanged("Town");
						OnTownChanged();
					}
				}
			}

			partial void OnCityChanging(string value);
			partial void OnCityChanged();
			private string _City;
			[Column(Storage="_City", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
			public  override string City {
				get { return _City; }
				set {
					if (_City != value) {
						OnCityChanging(value);
						SendPropertyChanging();
						_City = value;
						SendPropertyChanged("City");
						OnCityChanged();
					}
				}
			}

			partial void OnCountyChanging(string value);
			partial void OnCountyChanged();
			private string _County;
			[Column(Storage="_County", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
			public  override string County {
				get { return _County; }
				set {
					if (_County != value) {
						OnCountyChanging(value);
						SendPropertyChanging();
						_County = value;
						SendPropertyChanged("County");
						OnCountyChanged();
					}
				}
			}

			partial void OnPostCodeChanging(string value);
			partial void OnPostCodeChanged();
			private string _PostCode;
			[Column(Storage="_PostCode", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
			public  override string PostCode {
				get { return _PostCode; }
				set {
					if (_PostCode != value) {
						OnPostCodeChanging(value);
						SendPropertyChanging();
						_PostCode = value;
						SendPropertyChanged("PostCode");
						OnPostCodeChanged();
					}
				}
			}

			partial void OnAcceptConditionsChanging(bool value);
			partial void OnAcceptConditionsChanged();
			private bool _AcceptConditions;
			[Column(Storage="_AcceptConditions", DbType="Bit NOT NULL", CanBeNull=false)]
			public  override bool AcceptConditions {
				get { return _AcceptConditions; }
				set {
					if (_AcceptConditions != value) {
						OnAcceptConditionsChanging(value);
						SendPropertyChanging();
						_AcceptConditions = value;
						SendPropertyChanged("AcceptConditions");
						OnAcceptConditionsChanged();
					}
				}
			}

			partial void OnNumberOfKidsChanging(int value);
			partial void OnNumberOfKidsChanged();
			private int _NumberOfKids;
			[Column(Storage="_NumberOfKids", DbType="Int NOT NULL", CanBeNull=false)]
			public  override int NumberOfKids {
				get { return _NumberOfKids; }
				set {
					if (_NumberOfKids != value) {
						OnNumberOfKidsChanging(value);
						SendPropertyChanging();
						_NumberOfKids = value;
						SendPropertyChanged("NumberOfKids");
						OnNumberOfKidsChanged();
					}
				}
			}

			partial void OnNotifyByEmailChanging(bool value);
			partial void OnNotifyByEmailChanged();
			private bool _NotifyByEmail;
			[Column(Storage="_NotifyByEmail", DbType="Bit NOT NULL", CanBeNull=false)]
			public  override bool NotifyByEmail {
				get { return _NotifyByEmail; }
				set {
					if (_NotifyByEmail != value) {
						OnNotifyByEmailChanging(value);
						SendPropertyChanging();
						_NotifyByEmail = value;
						SendPropertyChanged("NotifyByEmail");
						OnNotifyByEmailChanged();
					}
				}
			}

			partial void OnNotifyByPostChanging(bool value);
			partial void OnNotifyByPostChanged();
			private bool _NotifyByPost;
			[Column(Storage="_NotifyByPost", DbType="Bit NOT NULL", CanBeNull=false)]
			public  override bool NotifyByPost {
				get { return _NotifyByPost; }
				set {
					if (_NotifyByPost != value) {
						OnNotifyByPostChanging(value);
						SendPropertyChanging();
						_NotifyByPost = value;
						SendPropertyChanged("NotifyByPost");
						OnNotifyByPostChanged();
					}
				}
			}

			partial void OnNotifyByPhoneChanging(bool value);
			partial void OnNotifyByPhoneChanged();
			private bool _NotifyByPhone;
			[Column(Storage="_NotifyByPhone", DbType="Bit NOT NULL", CanBeNull=false)]
			public  override bool NotifyByPhone {
				get { return _NotifyByPhone; }
				set {
					if (_NotifyByPhone != value) {
						OnNotifyByPhoneChanging(value);
						SendPropertyChanging();
						_NotifyByPhone = value;
						SendPropertyChanged("NotifyByPhone");
						OnNotifyByPhoneChanged();
					}
				}
			}

			partial void OnNotifyBySmsChanging(bool value);
			partial void OnNotifyBySmsChanged();
			private bool _NotifyBySms;
			[Column(Storage="_NotifyBySms", DbType="Bit NOT NULL", CanBeNull=false)]
			public  override bool NotifyBySms {
				get { return _NotifyBySms; }
				set {
					if (_NotifyBySms != value) {
						OnNotifyBySmsChanging(value);
						SendPropertyChanging();
						_NotifyBySms = value;
						SendPropertyChanged("NotifyBySms");
						OnNotifyBySmsChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.Flyer")]
 		public partial class Flyer : Model.Entities.Flyer, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public Flyer()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnKChanging(int value);
			partial void OnKChanged();
			private int _K;
			[Column(Storage="_K", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
			public  override int K {
				get { return _K; }
				set {
					if (_K != value) {
						OnKChanging(value);
						SendPropertyChanging();
						_K = value;
						SendPropertyChanged("K");
						OnKChanged();
					}
				}
			}

			partial void OnPromoterKChanging(int value);
			partial void OnPromoterKChanged();
			private int _PromoterK;
			[Column(Storage="_PromoterK", DbType="Int NOT NULL", CanBeNull=false)]
			public  override int PromoterK {
				get { return _PromoterK; }
				set {
					if (_PromoterK != value) {
						OnPromoterKChanging(value);
						SendPropertyChanging();
						_PromoterK = value;
						SendPropertyChanged("PromoterK");
						OnPromoterKChanged();
					}
				}
			}

			partial void OnNameChanging(string value);
			partial void OnNameChanged();
			private string _Name;
			[Column(Storage="_Name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
			public  override string Name {
				get { return _Name; }
				set {
					if (_Name != value) {
						OnNameChanging(value);
						SendPropertyChanging();
						_Name = value;
						SendPropertyChanged("Name");
						OnNameChanged();
					}
				}
			}

			partial void OnSubjectChanging(string value);
			partial void OnSubjectChanged();
			private string _Subject;
			[Column(Storage="_Subject", DbType="VarChar(150)", CanBeNull=false)]
			public  override string Subject {
				get { return _Subject; }
				set {
					if (_Subject != value) {
						OnSubjectChanging(value);
						SendPropertyChanging();
						_Subject = value;
						SendPropertyChanged("Subject");
						OnSubjectChanged();
					}
				}
			}

			partial void OnBackgroundColorChanging(string value);
			partial void OnBackgroundColorChanged();
			private string _BackgroundColor;
			[Column(Storage="_BackgroundColor", DbType="VarChar(6)", CanBeNull=false)]
			public  override string BackgroundColor {
				get { return _BackgroundColor; }
				set {
					if (_BackgroundColor != value) {
						OnBackgroundColorChanging(value);
						SendPropertyChanging();
						_BackgroundColor = value;
						SendPropertyChanged("BackgroundColor");
						OnBackgroundColorChanged();
					}
				}
			}

			partial void OnMiscKChanging(int value);
			partial void OnMiscKChanged();
			private int _MiscK;
			[Column(Storage="_MiscK", DbType="Int NOT NULL", CanBeNull=false)]
			public  override int MiscK {
				get { return _MiscK; }
				set {
					if (_MiscK != value) {
						OnMiscKChanging(value);
						SendPropertyChanging();
						_MiscK = value;
						SendPropertyChanged("MiscK");
						OnMiscKChanged();
					}
				}
			}

			partial void OnSendDateTimeChanging(DateTime value);
			partial void OnSendDateTimeChanged();
			private DateTime _SendDateTime;
			[Column(Storage="_SendDateTime", DbType="DateTime NOT NULL", CanBeNull=false)]
			public  override DateTime SendDateTime {
				get { return _SendDateTime; }
				set {
					if (_SendDateTime != value) {
						OnSendDateTimeChanging(value);
						SendPropertyChanging();
						_SendDateTime = value;
						SendPropertyChanged("SendDateTime");
						OnSendDateTimeChanged();
					}
				}
			}

			partial void OnLinkTargetUrlChanging(string value);
			partial void OnLinkTargetUrlChanged();
			private string _LinkTargetUrl;
			[Column(Storage="_LinkTargetUrl", DbType="VarChar(250)", CanBeNull=false)]
			public  override string LinkTargetUrl {
				get { return _LinkTargetUrl; }
				set {
					if (_LinkTargetUrl != value) {
						OnLinkTargetUrlChanging(value);
						SendPropertyChanging();
						_LinkTargetUrl = value;
						SendPropertyChanged("LinkTargetUrl");
						OnLinkTargetUrlChanged();
					}
				}
			}

			partial void OnPlaceKsChanging(string value);
			partial void OnPlaceKsChanged();
			private string _PlaceKs;
			[Column(Storage="_PlaceKs", DbType="VarChar(400)", CanBeNull=false)]
			public  override string PlaceKs {
				get { return _PlaceKs; }
				set {
					if (_PlaceKs != value) {
						OnPlaceKsChanging(value);
						SendPropertyChanging();
						_PlaceKs = value;
						SendPropertyChanged("PlaceKs");
						OnPlaceKsChanged();
					}
				}
			}

			partial void OnMusicTypeKsChanging(string value);
			partial void OnMusicTypeKsChanged();
			private string _MusicTypeKs;
			[Column(Storage="_MusicTypeKs", DbType="VarChar(400)", CanBeNull=false)]
			public  override string MusicTypeKs {
				get { return _MusicTypeKs; }
				set {
					if (_MusicTypeKs != value) {
						OnMusicTypeKsChanging(value);
						SendPropertyChanging();
						_MusicTypeKs = value;
						SendPropertyChanged("MusicTypeKs");
						OnMusicTypeKsChanged();
					}
				}
			}

			partial void OnSendsChanging(int value);
			partial void OnSendsChanged();
			private int _Sends;
			[Column(Storage="_Sends", DbType="Int", CanBeNull=false)]
			public  override int Sends {
				get { return _Sends; }
				set {
					if (_Sends != value) {
						OnSendsChanging(value);
						SendPropertyChanging();
						_Sends = value;
						SendPropertyChanged("Sends");
						OnSendsChanged();
					}
				}
			}

			partial void OnViewsChanging(int value);
			partial void OnViewsChanged();
			private int _Views;
			[Column(Storage="_Views", DbType="Int", CanBeNull=false)]
			public  override int Views {
				get { return _Views; }
				set {
					if (_Views != value) {
						OnViewsChanging(value);
						SendPropertyChanging();
						_Views = value;
						SendPropertyChanged("Views");
						OnViewsChanged();
					}
				}
			}

			partial void OnClicksChanging(int value);
			partial void OnClicksChanged();
			private int _Clicks;
			[Column(Storage="_Clicks", DbType="Int", CanBeNull=false)]
			public  override int Clicks {
				get { return _Clicks; }
				set {
					if (_Clicks != value) {
						OnClicksChanging(value);
						SendPropertyChanging();
						_Clicks = value;
						SendPropertyChanged("Clicks");
						OnClicksChanged();
					}
				}
			}

			partial void OnUnsubscribesChanging(int value);
			partial void OnUnsubscribesChanged();
			private int _Unsubscribes;
			[Column(Storage="_Unsubscribes", DbType="Int", CanBeNull=false)]
			public  override int Unsubscribes {
				get { return _Unsubscribes; }
				set {
					if (_Unsubscribes != value) {
						OnUnsubscribesChanging(value);
						SendPropertyChanging();
						_Unsubscribes = value;
						SendPropertyChanged("Unsubscribes");
						OnUnsubscribesChanged();
					}
				}
			}

			partial void OnMailFromDisplayNameChanging(string value);
			partial void OnMailFromDisplayNameChanged();
			private string _MailFromDisplayName;
			[Column(Storage="_MailFromDisplayName", DbType="VarChar(50)", CanBeNull=false)]
			public  override string MailFromDisplayName {
				get { return _MailFromDisplayName; }
				set {
					if (_MailFromDisplayName != value) {
						OnMailFromDisplayNameChanging(value);
						SendPropertyChanging();
						_MailFromDisplayName = value;
						SendPropertyChanged("MailFromDisplayName");
						OnMailFromDisplayNameChanged();
					}
				}
			}

			partial void OnPromotersOnlyChanging(bool value);
			partial void OnPromotersOnlyChanged();
			private bool _PromotersOnly;
			[Column(Storage="_PromotersOnly", DbType="Bit", CanBeNull=false)]
			public  override bool PromotersOnly {
				get { return _PromotersOnly; }
				set {
					if (_PromotersOnly != value) {
						OnPromotersOnlyChanging(value);
						SendPropertyChanging();
						_PromotersOnly = value;
						SendPropertyChanged("PromotersOnly");
						OnPromotersOnlyChanged();
					}
				}
			}

			partial void OnIsReadyToSendChanging(bool value);
			partial void OnIsReadyToSendChanged();
			private bool _IsReadyToSend;
			[Column(Storage="_IsReadyToSend", DbType="Bit", CanBeNull=false)]
			public  override bool IsReadyToSend {
				get { return _IsReadyToSend; }
				set {
					if (_IsReadyToSend != value) {
						OnIsReadyToSendChanging(value);
						SendPropertyChanging();
						_IsReadyToSend = value;
						SendPropertyChanged("IsReadyToSend");
						OnIsReadyToSendChanged();
					}
				}
			}

			partial void OnIsSendingChanging(bool value);
			partial void OnIsSendingChanged();
			private bool _IsSending;
			[Column(Storage="_IsSending", DbType="Bit", CanBeNull=false)]
			public  override bool IsSending {
				get { return _IsSending; }
				set {
					if (_IsSending != value) {
						OnIsSendingChanging(value);
						SendPropertyChanging();
						_IsSending = value;
						SendPropertyChanged("IsSending");
						OnIsSendingChanged();
					}
				}
			}

			partial void OnPausedAtUsrKChanging(int value);
			partial void OnPausedAtUsrKChanged();
			private int _PausedAtUsrK;
			[Column(Storage="_PausedAtUsrK", DbType="Int", CanBeNull=false)]
			public  override int PausedAtUsrK {
				get { return _PausedAtUsrK; }
				set {
					if (_PausedAtUsrK != value) {
						OnPausedAtUsrKChanging(value);
						SendPropertyChanging();
						_PausedAtUsrK = value;
						SendPropertyChanged("PausedAtUsrK");
						OnPausedAtUsrKChanged();
					}
				}
			}

			partial void OnHasFinishedSendingChanging(bool value);
			partial void OnHasFinishedSendingChanged();
			private bool _HasFinishedSending;
			[Column(Storage="_HasFinishedSending", DbType="Bit", CanBeNull=false)]
			public  override bool HasFinishedSending {
				get { return _HasFinishedSending; }
				set {
					if (_HasFinishedSending != value) {
						OnHasFinishedSendingChanging(value);
						SendPropertyChanging();
						_HasFinishedSending = value;
						SendPropertyChanged("HasFinishedSending");
						OnHasFinishedSendingChanged();
					}
				}
			}

			partial void OnEventKsChanging(string value);
			partial void OnEventKsChanged();
			private string _EventKs;
			[Column(Storage="_EventKs", DbType="VarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
			public  override string EventKs {
				get { return _EventKs; }
				set {
					if (_EventKs != value) {
						OnEventKsChanging(value);
						SendPropertyChanging();
						_EventKs = value;
						SendPropertyChanged("EventKs");
						OnEventKsChanged();
					}
				}
			}

			partial void OnDateTimeLastMessageSentChanging(DateTime? value);
			partial void OnDateTimeLastMessageSentChanged();
			private DateTime? _DateTimeLastMessageSent;
			[Column(Storage="_DateTimeLastMessageSent", DbType="DateTime")]
			public  override DateTime? DateTimeLastMessageSent {
				get { return _DateTimeLastMessageSent; }
				set {
					if (_DateTimeLastMessageSent != value) {
						OnDateTimeLastMessageSentChanging(value);
						SendPropertyChanging();
						_DateTimeLastMessageSent = value;
						SendPropertyChanged("DateTimeLastMessageSent");
						OnDateTimeLastMessageSentChanged();
					}
				}
			}

			partial void OnIsHtmlChanging(bool value);
			partial void OnIsHtmlChanged();
			private bool _IsHtml;
			[Column(Storage="_IsHtml", DbType="Bit NOT NULL", CanBeNull=false)]
			public  override bool IsHtml {
				get { return _IsHtml; }
				set {
					if (_IsHtml != value) {
						OnIsHtmlChanging(value);
						SendPropertyChanging();
						_IsHtml = value;
						SendPropertyChanged("IsHtml");
						OnIsHtmlChanged();
					}
				}
			}

			partial void OnHtmlChanging(string value);
			partial void OnHtmlChanged();
			private string _Html;
			[Column(Storage="_Html", DbType="Text", UpdateCheck=UpdateCheck.Never)]
			public  override string Html {
				get { return _Html; }
				set {
					if (_Html != value) {
						OnHtmlChanging(value);
						SendPropertyChanging();
						_Html = value;
						SendPropertyChanged("Html");
						OnHtmlChanged();
					}
				}
			}

			partial void OnTextAlternativeChanging(string value);
			partial void OnTextAlternativeChanged();
			private string _TextAlternative;
			[Column(Storage="_TextAlternative", DbType="Text", UpdateCheck=UpdateCheck.Never)]
			public  override string TextAlternative {
				get { return _TextAlternative; }
				set {
					if (_TextAlternative != value) {
						OnTextAlternativeChanging(value);
						SendPropertyChanging();
						_TextAlternative = value;
						SendPropertyChanged("TextAlternative");
						OnTextAlternativeChanged();
					}
				}
			}

			partial void OnBrokenChanging(int value);
			partial void OnBrokenChanged();
			private int _Broken;
			[Column(Storage="_Broken", DbType="Int NOT NULL", CanBeNull=false)]
			public  override int Broken {
				get { return _Broken; }
				set {
					if (_Broken != value) {
						OnBrokenChanging(value);
						SendPropertyChanging();
						_Broken = value;
						SendPropertyChanged("Broken");
						OnBrokenChanged();
					}
				}
			}

			partial void OnExceptionsChanging(int value);
			partial void OnExceptionsChanged();
			private int _Exceptions;
			[Column(Storage="_Exceptions", DbType="Int NOT NULL", CanBeNull=false)]
			public  override int Exceptions {
				get { return _Exceptions; }
				set {
					if (_Exceptions != value) {
						OnExceptionsChanging(value);
						SendPropertyChanging();
						_Exceptions = value;
						SendPropertyChanged("Exceptions");
						OnExceptionsChanged();
					}
				}
			}

			partial void OnMailServerRetriesChanging(int value);
			partial void OnMailServerRetriesChanged();
			private int _MailServerRetries;
			[Column(Storage="_MailServerRetries", DbType="Int NOT NULL", CanBeNull=false)]
			public  override int MailServerRetries {
				get { return _MailServerRetries; }
				set {
					if (_MailServerRetries != value) {
						OnMailServerRetriesChanging(value);
						SendPropertyChanging();
						_MailServerRetries = value;
						SendPropertyChanged("MailServerRetries");
						OnMailServerRetriesChanged();
					}
				}
			}

			partial void OnMailServerLastRetryChanging(DateTime? value);
			partial void OnMailServerLastRetryChanged();
			private DateTime? _MailServerLastRetry;
			[Column(Storage="_MailServerLastRetry", DbType="DateTime")]
			public  override DateTime? MailServerLastRetry {
				get { return _MailServerLastRetry; }
				set {
					if (_MailServerLastRetry != value) {
						OnMailServerLastRetryChanging(value);
						SendPropertyChanging();
						_MailServerLastRetry = value;
						SendPropertyChanged("MailServerLastRetry");
						OnMailServerLastRetryChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.Gallery")]
 		public partial class Gallery : Model.Entities.Gallery, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public Gallery()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnKChanging(int value);
			partial void OnKChanged();
			private int _K;
			[Column(Storage="_K", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
			public  override int K {
				get { return _K; }
				set {
					if (_K != value) {
						OnKChanging(value);
						SendPropertyChanging();
						_K = value;
						SendPropertyChanged("K");
						OnKChanged();
					}
				}
			}

			partial void OnEventKChanging(int value);
			partial void OnEventKChanged();
			private int _EventK;
			[Column(Storage="_EventK", DbType="Int", CanBeNull=false)]
			public  override int EventK {
				get { return _EventK; }
				set {
					if (_EventK != value) {
						OnEventKChanging(value);
						SendPropertyChanging();
						_EventK = value;
						SendPropertyChanged("EventK");
						OnEventKChanged();
					}
				}
			}

			partial void OnArticleKChanging(int value);
			partial void OnArticleKChanged();
			private int _ArticleK;
			[Column(Storage="_ArticleK", DbType="Int", CanBeNull=false)]
			public  override int ArticleK {
				get { return _ArticleK; }
				set {
					if (_ArticleK != value) {
						OnArticleKChanging(value);
						SendPropertyChanging();
						_ArticleK = value;
						SendPropertyChanged("ArticleK");
						OnArticleKChanged();
					}
				}
			}

			partial void OnNameChanging(string value);
			partial void OnNameChanged();
			private string _Name;
			[Column(Storage="_Name", DbType="VarChar(50)", CanBeNull=false)]
			public  override string Name {
				get { return _Name; }
				set {
					if (_Name != value) {
						OnNameChanging(value);
						SendPropertyChanging();
						_Name = value;
						SendPropertyChanged("Name");
						OnNameChanged();
					}
				}
			}

			partial void OnMainPhotoKChanging(int value);
			partial void OnMainPhotoKChanged();
			private int _MainPhotoK;
			[Column(Storage="_MainPhotoK", DbType="Int", CanBeNull=false)]
			public  override int MainPhotoK {
				get { return _MainPhotoK; }
				set {
					if (_MainPhotoK != value) {
						OnMainPhotoKChanging(value);
						SendPropertyChanging();
						_MainPhotoK = value;
						SendPropertyChanged("MainPhotoK");
						OnMainPhotoKChanged();
					}
				}
			}

			partial void OnOwnerUsrKChanging(int value);
			partial void OnOwnerUsrKChanged();
			private int _OwnerUsrK;
			[Column(Storage="_OwnerUsrK", DbType="Int", CanBeNull=false)]
			public  override int OwnerUsrK {
				get { return _OwnerUsrK; }
				set {
					if (_OwnerUsrK != value) {
						OnOwnerUsrKChanging(value);
						SendPropertyChanging();
						_OwnerUsrK = value;
						SendPropertyChanged("OwnerUsrK");
						OnOwnerUsrKChanged();
					}
				}
			}

			partial void OnTotalPhotosChanging(int value);
			partial void OnTotalPhotosChanged();
			private int _TotalPhotos;
			[Column(Storage="_TotalPhotos", DbType="Int", CanBeNull=false)]
			public  override int TotalPhotos {
				get { return _TotalPhotos; }
				set {
					if (_TotalPhotos != value) {
						OnTotalPhotosChanging(value);
						SendPropertyChanging();
						_TotalPhotos = value;
						SendPropertyChanged("TotalPhotos");
						OnTotalPhotosChanged();
					}
				}
			}

			partial void OnLivePhotosChanging(int value);
			partial void OnLivePhotosChanged();
			private int _LivePhotos;
			[Column(Storage="_LivePhotos", DbType="Int", CanBeNull=false)]
			public  override int LivePhotos {
				get { return _LivePhotos; }
				set {
					if (_LivePhotos != value) {
						OnLivePhotosChanging(value);
						SendPropertyChanging();
						_LivePhotos = value;
						SendPropertyChanged("LivePhotos");
						OnLivePhotosChanged();
					}
				}
			}

			partial void OnCreateDateTimeChanging(DateTime value);
			partial void OnCreateDateTimeChanged();
			private DateTime _CreateDateTime;
			[Column(Storage="_CreateDateTime", DbType="DateTime", CanBeNull=false)]
			public  override DateTime CreateDateTime {
				get { return _CreateDateTime; }
				set {
					if (_CreateDateTime != value) {
						OnCreateDateTimeChanging(value);
						SendPropertyChanging();
						_CreateDateTime = value;
						SendPropertyChanged("CreateDateTime");
						OnCreateDateTimeChanged();
					}
				}
			}

			partial void OnLastLiveDateTimeChanging(DateTime value);
			partial void OnLastLiveDateTimeChanged();
			private DateTime _LastLiveDateTime;
			[Column(Storage="_LastLiveDateTime", DbType="DateTime", CanBeNull=false)]
			public  override DateTime LastLiveDateTime {
				get { return _LastLiveDateTime; }
				set {
					if (_LastLiveDateTime != value) {
						OnLastLiveDateTimeChanging(value);
						SendPropertyChanging();
						_LastLiveDateTime = value;
						SendPropertyChanged("LastLiveDateTime");
						OnLastLiveDateTimeChanged();
					}
				}
			}

			partial void OnAdminNoteChanging(string value);
			partial void OnAdminNoteChanged();
			private string _AdminNote;
			[Column(Storage="_AdminNote", DbType="Text", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
			public  override string AdminNote {
				get { return _AdminNote; }
				set {
					if (_AdminNote != value) {
						OnAdminNoteChanging(value);
						SendPropertyChanging();
						_AdminNote = value;
						SendPropertyChanged("AdminNote");
						OnAdminNoteChanged();
					}
				}
			}

			partial void OnIsMobileChanging(bool value);
			partial void OnIsMobileChanged();
			private bool _IsMobile;
			[Column(Storage="_IsMobile", DbType="Bit", CanBeNull=false)]
			public  override bool IsMobile {
				get { return _IsMobile; }
				set {
					if (_IsMobile != value) {
						OnIsMobileChanging(value);
						SendPropertyChanging();
						_IsMobile = value;
						SendPropertyChanged("IsMobile");
						OnIsMobileChanged();
					}
				}
			}

			partial void OnPicStateChanging(string value);
			partial void OnPicStateChanged();
			private string _PicState;
			[Column(Storage="_PicState", DbType="VarChar(100)", CanBeNull=false)]
			public  override string PicState {
				get { return _PicState; }
				set {
					if (_PicState != value) {
						OnPicStateChanging(value);
						SendPropertyChanging();
						_PicState = value;
						SendPropertyChanged("PicState");
						OnPicStateChanged();
					}
				}
			}

			partial void OnPicPhotoKChanging(int value);
			partial void OnPicPhotoKChanged();
			private int _PicPhotoK;
			[Column(Storage="_PicPhotoK", DbType="Int", CanBeNull=false)]
			public  override int PicPhotoK {
				get { return _PicPhotoK; }
				set {
					if (_PicPhotoK != value) {
						OnPicPhotoKChanging(value);
						SendPropertyChanging();
						_PicPhotoK = value;
						SendPropertyChanged("PicPhotoK");
						OnPicPhotoKChanged();
					}
				}
			}

			partial void OnPicMiscKChanging(int value);
			partial void OnPicMiscKChanged();
			private int _PicMiscK;
			[Column(Storage="_PicMiscK", DbType="Int", CanBeNull=false)]
			public  override int PicMiscK {
				get { return _PicMiscK; }
				set {
					if (_PicMiscK != value) {
						OnPicMiscKChanging(value);
						SendPropertyChanging();
						_PicMiscK = value;
						SendPropertyChanged("PicMiscK");
						OnPicMiscKChanged();
					}
				}
			}

			partial void OnUrlFragmentChanging(string value);
			partial void OnUrlFragmentChanged();
			private string _UrlFragment;
			[Column(Storage="_UrlFragment", DbType="VarChar(255)", CanBeNull=false)]
			public  override string UrlFragment {
				get { return _UrlFragment; }
				set {
					if (_UrlFragment != value) {
						OnUrlFragmentChanging(value);
						SendPropertyChanging();
						_UrlFragment = value;
						SendPropertyChanged("UrlFragment");
						OnUrlFragmentChanged();
					}
				}
			}

			partial void OnModeratorUsrKChanging(int value);
			partial void OnModeratorUsrKChanged();
			private int _ModeratorUsrK;
			[Column(Storage="_ModeratorUsrK", DbType="Int", CanBeNull=false)]
			public  override int ModeratorUsrK {
				get { return _ModeratorUsrK; }
				set {
					if (_ModeratorUsrK != value) {
						OnModeratorUsrKChanging(value);
						SendPropertyChanging();
						_ModeratorUsrK = value;
						SendPropertyChanged("ModeratorUsrK");
						OnModeratorUsrKChanged();
					}
				}
			}

			partial void OnCurrentPackageCountChanging(int value);
			partial void OnCurrentPackageCountChanged();
			private int _CurrentPackageCount;
			[Column(Storage="_CurrentPackageCount", DbType="Int", CanBeNull=false)]
			public  override int CurrentPackageCount {
				get { return _CurrentPackageCount; }
				set {
					if (_CurrentPackageCount != value) {
						OnCurrentPackageCountChanging(value);
						SendPropertyChanging();
						_CurrentPackageCount = value;
						SendPropertyChanged("CurrentPackageCount");
						OnCurrentPackageCountChanged();
					}
				}
			}

			partial void OnLastPackageDateTimeChanging(DateTime value);
			partial void OnLastPackageDateTimeChanged();
			private DateTime _LastPackageDateTime;
			[Column(Storage="_LastPackageDateTime", DbType="DateTime", CanBeNull=false)]
			public  override DateTime LastPackageDateTime {
				get { return _LastPackageDateTime; }
				set {
					if (_LastPackageDateTime != value) {
						OnLastPackageDateTimeChanging(value);
						SendPropertyChanging();
						_LastPackageDateTime = value;
						SendPropertyChanged("LastPackageDateTime");
						OnLastPackageDateTimeChanged();
					}
				}
			}

			partial void OnLastPackageIndexChanging(int value);
			partial void OnLastPackageIndexChanged();
			private int _LastPackageIndex;
			[Column(Storage="_LastPackageIndex", DbType="Int", CanBeNull=false)]
			public  override int LastPackageIndex {
				get { return _LastPackageIndex; }
				set {
					if (_LastPackageIndex != value) {
						OnLastPackageIndexChanging(value);
						SendPropertyChanging();
						_LastPackageIndex = value;
						SendPropertyChanged("LastPackageIndex");
						OnLastPackageIndexChanged();
					}
				}
			}

			partial void OnUploadInProgressChanging(bool value);
			partial void OnUploadInProgressChanged();
			private bool _UploadInProgress;
			[Column(Storage="_UploadInProgress", DbType="Bit", CanBeNull=false)]
			public  override bool UploadInProgress {
				get { return _UploadInProgress; }
				set {
					if (_UploadInProgress != value) {
						OnUploadInProgressChanging(value);
						SendPropertyChanging();
						_UploadInProgress = value;
						SendPropertyChanged("UploadInProgress");
						OnUploadInProgressChanged();
					}
				}
			}

			partial void OnUploadFailsChanging(int value);
			partial void OnUploadFailsChanged();
			private int _UploadFails;
			[Column(Storage="_UploadFails", DbType="Int", CanBeNull=false)]
			public  override int UploadFails {
				get { return _UploadFails; }
				set {
					if (_UploadFails != value) {
						OnUploadFailsChanging(value);
						SendPropertyChanging();
						_UploadFails = value;
						SendPropertyChanged("UploadFails");
						OnUploadFailsChanged();
					}
				}
			}

			partial void OnWatchUploadsChanging(bool? value);
			partial void OnWatchUploadsChanged();
			private bool? _WatchUploads;
			[Column(Storage="_WatchUploads", DbType="Bit")]
			public  override bool? WatchUploads {
				get { return _WatchUploads; }
				set {
					if (_WatchUploads != value) {
						OnWatchUploadsChanging(value);
						SendPropertyChanging();
						_WatchUploads = value;
						SendPropertyChanged("WatchUploads");
						OnWatchUploadsChanged();
					}
				}
			}

			partial void OnRunFinishedUploadingTaskChanging(bool? value);
			partial void OnRunFinishedUploadingTaskChanged();
			private bool? _RunFinishedUploadingTask;
			[Column(Storage="_RunFinishedUploadingTask", DbType="Bit")]
			public  override bool? RunFinishedUploadingTask {
				get { return _RunFinishedUploadingTask; }
				set {
					if (_RunFinishedUploadingTask != value) {
						OnRunFinishedUploadingTaskChanging(value);
						SendPropertyChanging();
						_RunFinishedUploadingTask = value;
						SendPropertyChanged("RunFinishedUploadingTask");
						OnRunFinishedUploadingTaskChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.GalleryUsr")]
 		public partial class GalleryUsr : Model.Entities.GalleryUsr, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public GalleryUsr()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnGalleryKChanging(int value);
			partial void OnGalleryKChanged();
			private int _GalleryK;
			[Column(Storage="_GalleryK", DbType="Int NOT NULL", CanBeNull=false)]
			public  override int GalleryK {
				get { return _GalleryK; }
				set {
					if (_GalleryK != value) {
						OnGalleryKChanging(value);
						SendPropertyChanging();
						_GalleryK = value;
						SendPropertyChanged("GalleryK");
						OnGalleryKChanged();
					}
				}
			}

			partial void OnUsrKChanging(int value);
			partial void OnUsrKChanged();
			private int _UsrK;
			[Column(Storage="_UsrK", DbType="Int NOT NULL", CanBeNull=false)]
			public  override int UsrK {
				get { return _UsrK; }
				set {
					if (_UsrK != value) {
						OnUsrKChanging(value);
						SendPropertyChanging();
						_UsrK = value;
						SendPropertyChanged("UsrK");
						OnUsrKChanged();
					}
				}
			}

			partial void OnViewDateTimeChanging(DateTime value);
			partial void OnViewDateTimeChanged();
			private DateTime _ViewDateTime;
			[Column(Storage="_ViewDateTime", DbType="DateTime", CanBeNull=false)]
			public  override DateTime ViewDateTime {
				get { return _ViewDateTime; }
				set {
					if (_ViewDateTime != value) {
						OnViewDateTimeChanging(value);
						SendPropertyChanging();
						_ViewDateTime = value;
						SendPropertyChanged("ViewDateTime");
						OnViewDateTimeChanged();
					}
				}
			}

			partial void OnViewDateTimeLatestChanging(DateTime value);
			partial void OnViewDateTimeLatestChanged();
			private DateTime _ViewDateTimeLatest;
			[Column(Storage="_ViewDateTimeLatest", DbType="DateTime", CanBeNull=false)]
			public  override DateTime ViewDateTimeLatest {
				get { return _ViewDateTimeLatest; }
				set {
					if (_ViewDateTimeLatest != value) {
						OnViewDateTimeLatestChanging(value);
						SendPropertyChanging();
						_ViewDateTimeLatest = value;
						SendPropertyChanged("ViewDateTimeLatest");
						OnViewDateTimeLatestChanged();
					}
				}
			}

			partial void OnViewPhotosChanging(int value);
			partial void OnViewPhotosChanged();
			private int _ViewPhotos;
			[Column(Storage="_ViewPhotos", DbType="Int", CanBeNull=false)]
			public  override int ViewPhotos {
				get { return _ViewPhotos; }
				set {
					if (_ViewPhotos != value) {
						OnViewPhotosChanging(value);
						SendPropertyChanging();
						_ViewPhotos = value;
						SendPropertyChanged("ViewPhotos");
						OnViewPhotosChanged();
					}
				}
			}

			partial void OnViewPhotosLatestChanging(int value);
			partial void OnViewPhotosLatestChanged();
			private int _ViewPhotosLatest;
			[Column(Storage="_ViewPhotosLatest", DbType="Int", CanBeNull=false)]
			public  override int ViewPhotosLatest {
				get { return _ViewPhotosLatest; }
				set {
					if (_ViewPhotosLatest != value) {
						OnViewPhotosLatestChanging(value);
						SendPropertyChanging();
						_ViewPhotosLatest = value;
						SendPropertyChanged("ViewPhotosLatest");
						OnViewPhotosLatestChanged();
					}
				}
			}

			partial void OnFavouriteChanging(bool value);
			partial void OnFavouriteChanged();
			private bool _Favourite;
			[Column(Storage="_Favourite", DbType="Bit", CanBeNull=false)]
			public  override bool Favourite {
				get { return _Favourite; }
				set {
					if (_Favourite != value) {
						OnFavouriteChanging(value);
						SendPropertyChanging();
						_Favourite = value;
						SendPropertyChanged("Favourite");
						OnFavouriteChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.Global")]
 		public partial class Global : Model.Entities.Global, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public Global()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnKChanging(int value);
			partial void OnKChanged();
			private int _K;
			[Column(Storage="_K", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
			public  override int K {
				get { return _K; }
				set {
					if (_K != value) {
						OnKChanging(value);
						SendPropertyChanging();
						_K = value;
						SendPropertyChanged("K");
						OnKChanged();
					}
				}
			}

			partial void OnNameChanging(string value);
			partial void OnNameChanged();
			private string _Name;
			[Column(Storage="_Name", DbType="VarChar(50)", CanBeNull=false)]
			public  override string Name {
				get { return _Name; }
				set {
					if (_Name != value) {
						OnNameChanging(value);
						SendPropertyChanging();
						_Name = value;
						SendPropertyChanged("Name");
						OnNameChanged();
					}
				}
			}

			partial void OnDescriptionChanging(string value);
			partial void OnDescriptionChanged();
			private string _Description;
			[Column(Storage="_Description", DbType="VarChar(200)", CanBeNull=false)]
			public  override string Description {
				get { return _Description; }
				set {
					if (_Description != value) {
						OnDescriptionChanging(value);
						SendPropertyChanging();
						_Description = value;
						SendPropertyChanged("Description");
						OnDescriptionChanged();
					}
				}
			}

			partial void OnValueStringChanging(string value);
			partial void OnValueStringChanged();
			private string _ValueString;
			[Column(Storage="_ValueString", DbType="VarChar(200)", CanBeNull=false)]
			public  override string ValueString {
				get { return _ValueString; }
				set {
					if (_ValueString != value) {
						OnValueStringChanging(value);
						SendPropertyChanging();
						_ValueString = value;
						SendPropertyChanged("ValueString");
						OnValueStringChanged();
					}
				}
			}

			partial void OnValueIntChanging(int value);
			partial void OnValueIntChanged();
			private int _ValueInt;
			[Column(Storage="_ValueInt", DbType="Int", CanBeNull=false)]
			public  override int ValueInt {
				get { return _ValueInt; }
				set {
					if (_ValueInt != value) {
						OnValueIntChanging(value);
						SendPropertyChanging();
						_ValueInt = value;
						SendPropertyChanged("ValueInt");
						OnValueIntChanged();
					}
				}
			}

			partial void OnValueDoubleChanging(double value);
			partial void OnValueDoubleChanged();
			private double _ValueDouble;
			[Column(Storage="_ValueDouble", DbType="Float", CanBeNull=false)]
			public  override double ValueDouble {
				get { return _ValueDouble; }
				set {
					if (_ValueDouble != value) {
						OnValueDoubleChanging(value);
						SendPropertyChanging();
						_ValueDouble = value;
						SendPropertyChanged("ValueDouble");
						OnValueDoubleChanged();
					}
				}
			}

			partial void OnValueDateTimeChanging(DateTime value);
			partial void OnValueDateTimeChanged();
			private DateTime _ValueDateTime;
			[Column(Storage="_ValueDateTime", DbType="DateTime", CanBeNull=false)]
			public  override DateTime ValueDateTime {
				get { return _ValueDateTime; }
				set {
					if (_ValueDateTime != value) {
						OnValueDateTimeChanging(value);
						SendPropertyChanging();
						_ValueDateTime = value;
						SendPropertyChanged("ValueDateTime");
						OnValueDateTimeChanged();
					}
				}
			}

			partial void OnValueTextChanging(string value);
			partial void OnValueTextChanged();
			private string _ValueText;
			[Column(Storage="_ValueText", DbType="Text", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
			public  override string ValueText {
				get { return _ValueText; }
				set {
					if (_ValueText != value) {
						OnValueTextChanging(value);
						SendPropertyChanging();
						_ValueText = value;
						SendPropertyChanged("ValueText");
						OnValueTextChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.Group")]
 		public partial class Group : Model.Entities.Group, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public Group()
			{
				_Theme = default(EntityRef<Theme>); 
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnKChanging(int value);
			partial void OnKChanged();
			private int _K;
			[Column(Storage="_K", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
			public  override int K {
				get { return _K; }
				set {
					if (_K != value) {
						OnKChanging(value);
						SendPropertyChanging();
						_K = value;
						SendPropertyChanged("K");
						OnKChanged();
					}
				}
			}

			partial void OnNameChanging(string value);
			partial void OnNameChanged();
			private string _Name;
			[Column(Storage="_Name", DbType="VarChar(200)", CanBeNull=false)]
			public  override string Name {
				get { return _Name; }
				set {
					if (_Name != value) {
						OnNameChanging(value);
						SendPropertyChanging();
						_Name = value;
						SendPropertyChanged("Name");
						OnNameChanged();
					}
				}
			}

			partial void OnDescriptionChanging(string value);
			partial void OnDescriptionChanged();
			private string _Description;
			[Column(Storage="_Description", DbType="VarChar(255)", CanBeNull=false)]
			public  override string Description {
				get { return _Description; }
				set {
					if (_Description != value) {
						OnDescriptionChanging(value);
						SendPropertyChanging();
						_Description = value;
						SendPropertyChanged("Description");
						OnDescriptionChanged();
					}
				}
			}

			partial void OnLongDescriptionHtmlChanging(string value);
			partial void OnLongDescriptionHtmlChanged();
			private string _LongDescriptionHtml;
			[Column(Storage="_LongDescriptionHtml", DbType="Text", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
			public  override string LongDescriptionHtml {
				get { return _LongDescriptionHtml; }
				set {
					if (_LongDescriptionHtml != value) {
						OnLongDescriptionHtmlChanging(value);
						SendPropertyChanging();
						_LongDescriptionHtml = value;
						SendPropertyChanged("LongDescriptionHtml");
						OnLongDescriptionHtmlChanged();
					}
				}
			}

			partial void OnLongDescriptionPlainChanging(bool value);
			partial void OnLongDescriptionPlainChanged();
			private bool _LongDescriptionPlain;
			[Column(Storage="_LongDescriptionPlain", DbType="Bit", CanBeNull=false)]
			public  override bool LongDescriptionPlain {
				get { return _LongDescriptionPlain; }
				set {
					if (_LongDescriptionPlain != value) {
						OnLongDescriptionPlainChanging(value);
						SendPropertyChanging();
						_LongDescriptionPlain = value;
						SendPropertyChanged("LongDescriptionPlain");
						OnLongDescriptionPlainChanged();
					}
				}
			}

			partial void OnPostingRulesChanging(string value);
			partial void OnPostingRulesChanged();
			private string _PostingRules;
			[Column(Storage="_PostingRules", DbType="Text", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
			public  override string PostingRules {
				get { return _PostingRules; }
				set {
					if (_PostingRules != value) {
						OnPostingRulesChanging(value);
						SendPropertyChanging();
						_PostingRules = value;
						SendPropertyChanged("PostingRules");
						OnPostingRulesChanged();
					}
				}
			}

			partial void OnDateTimeCreatedChanging(DateTime value);
			partial void OnDateTimeCreatedChanged();
			private DateTime _DateTimeCreated;
			[Column(Storage="_DateTimeCreated", DbType="DateTime", CanBeNull=false)]
			public  override DateTime DateTimeCreated {
				get { return _DateTimeCreated; }
				set {
					if (_DateTimeCreated != value) {
						OnDateTimeCreatedChanging(value);
						SendPropertyChanging();
						_DateTimeCreated = value;
						SendPropertyChanged("DateTimeCreated");
						OnDateTimeCreatedChanged();
					}
				}
			}

			partial void OnTotalMembersChanging(int value);
			partial void OnTotalMembersChanged();
			private int _TotalMembers;
			[Column(Storage="_TotalMembers", DbType="Int", CanBeNull=false)]
			public  override int TotalMembers {
				get { return _TotalMembers; }
				set {
					if (_TotalMembers != value) {
						OnTotalMembersChanging(value);
						SendPropertyChanging();
						_TotalMembers = value;
						SendPropertyChanged("TotalMembers");
						OnTotalMembersChanged();
					}
				}
			}

			partial void OnTotalModeratorsChanging(int value);
			partial void OnTotalModeratorsChanged();
			private int _TotalModerators;
			[Column(Storage="_TotalModerators", DbType="Int", CanBeNull=false)]
			public  override int TotalModerators {
				get { return _TotalModerators; }
				set {
					if (_TotalModerators != value) {
						OnTotalModeratorsChanging(value);
						SendPropertyChanging();
						_TotalModerators = value;
						SendPropertyChanged("TotalModerators");
						OnTotalModeratorsChanged();
					}
				}
			}

			partial void OnTotalOwnersChanging(int value);
			partial void OnTotalOwnersChanged();
			private int _TotalOwners;
			[Column(Storage="_TotalOwners", DbType="Int", CanBeNull=false)]
			public  override int TotalOwners {
				get { return _TotalOwners; }
				set {
					if (_TotalOwners != value) {
						OnTotalOwnersChanging(value);
						SendPropertyChanging();
						_TotalOwners = value;
						SendPropertyChanged("TotalOwners");
						OnTotalOwnersChanged();
					}
				}
			}

			partial void OnTotalCommentsChanging(int value);
			partial void OnTotalCommentsChanged();
			private int _TotalComments;
			[Column(Storage="_TotalComments", DbType="Int", CanBeNull=false)]
			public  override int TotalComments {
				get { return _TotalComments; }
				set {
					if (_TotalComments != value) {
						OnTotalCommentsChanging(value);
						SendPropertyChanging();
						_TotalComments = value;
						SendPropertyChanged("TotalComments");
						OnTotalCommentsChanged();
					}
				}
			}

			partial void OnLastPostChanging(DateTime? value);
			partial void OnLastPostChanged();
			private DateTime? _LastPost;
			[Column(Storage="_LastPost", DbType="DateTime")]
			public  override DateTime? LastPost {
				get { return _LastPost; }
				set {
					if (_LastPost != value) {
						OnLastPostChanging(value);
						SendPropertyChanging();
						_LastPost = value;
						SendPropertyChanged("LastPost");
						OnLastPostChanged();
					}
				}
			}

			partial void OnAverageCommentDateTimeChanging(DateTime? value);
			partial void OnAverageCommentDateTimeChanged();
			private DateTime? _AverageCommentDateTime;
			[Column(Storage="_AverageCommentDateTime", DbType="DateTime")]
			public  override DateTime? AverageCommentDateTime {
				get { return _AverageCommentDateTime; }
				set {
					if (_AverageCommentDateTime != value) {
						OnAverageCommentDateTimeChanging(value);
						SendPropertyChanging();
						_AverageCommentDateTime = value;
						SendPropertyChanged("AverageCommentDateTime");
						OnAverageCommentDateTimeChanged();
					}
				}
			}

			partial void OnPrivateGroupPageChanging(bool value);
			partial void OnPrivateGroupPageChanged();
			private bool _PrivateGroupPage;
			[Column(Storage="_PrivateGroupPage", DbType="Bit", CanBeNull=false)]
			public  override bool PrivateGroupPage {
				get { return _PrivateGroupPage; }
				set {
					if (_PrivateGroupPage != value) {
						OnPrivateGroupPageChanging(value);
						SendPropertyChanging();
						_PrivateGroupPage = value;
						SendPropertyChanged("PrivateGroupPage");
						OnPrivateGroupPageChanged();
					}
				}
			}

			partial void OnPrivateChatChanging(bool value);
			partial void OnPrivateChatChanged();
			private bool _PrivateChat;
			[Column(Storage="_PrivateChat", DbType="Bit", CanBeNull=false)]
			public  override bool PrivateChat {
				get { return _PrivateChat; }
				set {
					if (_PrivateChat != value) {
						OnPrivateChatChanging(value);
						SendPropertyChanging();
						_PrivateChat = value;
						SendPropertyChanged("PrivateChat");
						OnPrivateChatChanged();
					}
				}
			}

			partial void OnPrivateMemberListChanging(bool value);
			partial void OnPrivateMemberListChanged();
			private bool _PrivateMemberList;
			[Column(Storage="_PrivateMemberList", DbType="Bit", CanBeNull=false)]
			public  override bool PrivateMemberList {
				get { return _PrivateMemberList; }
				set {
					if (_PrivateMemberList != value) {
						OnPrivateMemberListChanging(value);
						SendPropertyChanging();
						_PrivateMemberList = value;
						SendPropertyChanged("PrivateMemberList");
						OnPrivateMemberListChanged();
					}
				}
			}

			partial void OnRestrictionChanging(Model.Entities.Group.RestrictionEnum value);
			partial void OnRestrictionChanged();
			private Model.Entities.Group.RestrictionEnum _Restriction;
			[Column(Storage="_Restriction", DbType="Int", CanBeNull=false)]
			public  override Model.Entities.Group.RestrictionEnum Restriction {
				get { return _Restriction; }
				set {
					if (_Restriction != value) {
						OnRestrictionChanging(value);
						SendPropertyChanging();
						_Restriction = value;
						SendPropertyChanged("Restriction");
						OnRestrictionChanged();
					}
				}
			}

			partial void OnCustomRestrictionTypeChanging(Model.Entities.Group.CustomRestrictionTypes value);
			partial void OnCustomRestrictionTypeChanged();
			private Model.Entities.Group.CustomRestrictionTypes _CustomRestrictionType;
			[Column(Storage="_CustomRestrictionType", DbType="Int", CanBeNull=false)]
			public  override Model.Entities.Group.CustomRestrictionTypes CustomRestrictionType {
				get { return _CustomRestrictionType; }
				set {
					if (_CustomRestrictionType != value) {
						OnCustomRestrictionTypeChanging(value);
						SendPropertyChanging();
						_CustomRestrictionType = value;
						SendPropertyChanged("CustomRestrictionType");
						OnCustomRestrictionTypeChanged();
					}
				}
			}

			partial void OnThemeKChanging(int value);
			partial void OnThemeKChanged();
			private int _ThemeK;
			[Column(Storage="_ThemeK", DbType="Int", CanBeNull=false)]
			public  override int ThemeK {
				get { return _ThemeK; }
				set {
					if (_ThemeK != value) {
						OnThemeKChanging(value);
						SendPropertyChanging();
						_ThemeK = value;
						SendPropertyChanged("ThemeK");
						OnThemeKChanged();
					}
				}
			}

			partial void OnCountryKChanging(int value);
			partial void OnCountryKChanged();
			private int _CountryK;
			[Column(Storage="_CountryK", DbType="Int", CanBeNull=false)]
			public  override int CountryK {
				get { return _CountryK; }
				set {
					if (_CountryK != value) {
						OnCountryKChanging(value);
						SendPropertyChanging();
						_CountryK = value;
						SendPropertyChanged("CountryK");
						OnCountryKChanged();
					}
				}
			}

			partial void OnPlaceKChanging(int value);
			partial void OnPlaceKChanged();
			private int _PlaceK;
			[Column(Storage="_PlaceK", DbType="Int", CanBeNull=false)]
			public  override int PlaceK {
				get { return _PlaceK; }
				set {
					if (_PlaceK != value) {
						OnPlaceKChanging(value);
						SendPropertyChanging();
						_PlaceK = value;
						SendPropertyChanged("PlaceK");
						OnPlaceKChanged();
					}
				}
			}

			partial void OnMusicTypeKChanging(int value);
			partial void OnMusicTypeKChanged();
			private int _MusicTypeK;
			[Column(Storage="_MusicTypeK", DbType="Int", CanBeNull=false)]
			public  override int MusicTypeK {
				get { return _MusicTypeK; }
				set {
					if (_MusicTypeK != value) {
						OnMusicTypeKChanging(value);
						SendPropertyChanging();
						_MusicTypeK = value;
						SendPropertyChanged("MusicTypeK");
						OnMusicTypeKChanged();
					}
				}
			}

			partial void OnBrandKChanging(int value);
			partial void OnBrandKChanged();
			private int _BrandK;
			[Column(Storage="_BrandK", DbType="Int", CanBeNull=false)]
			public  override int BrandK {
				get { return _BrandK; }
				set {
					if (_BrandK != value) {
						OnBrandKChanging(value);
						SendPropertyChanging();
						_BrandK = value;
						SendPropertyChanged("BrandK");
						OnBrandKChanged();
					}
				}
			}

			partial void OnUrlNameChanging(string value);
			partial void OnUrlNameChanged();
			private string _UrlName;
			[Column(Storage="_UrlName", DbType="VarChar(200)", CanBeNull=false)]
			public  override string UrlName {
				get { return _UrlName; }
				set {
					if (_UrlName != value) {
						OnUrlNameChanging(value);
						SendPropertyChanging();
						_UrlName = value;
						SendPropertyChanged("UrlName");
						OnUrlNameChanged();
					}
				}
			}

			partial void OnPicChanging(Guid value);
			partial void OnPicChanged();
			private Guid _Pic;
			[Column(Storage="_Pic", DbType="UniqueIdentifier NOT NULL", CanBeNull=false)]
			public  override Guid Pic {
				get { return _Pic; }
				set {
					if (_Pic != value) {
						OnPicChanging(value);
						SendPropertyChanging();
						_Pic = value;
						SendPropertyChanged("Pic");
						OnPicChanged();
					}
				}
			}

			partial void OnPicStateChanging(string value);
			partial void OnPicStateChanged();
			private string _PicState;
			[Column(Storage="_PicState", DbType="VarChar(100)", CanBeNull=false)]
			public  override string PicState {
				get { return _PicState; }
				set {
					if (_PicState != value) {
						OnPicStateChanging(value);
						SendPropertyChanging();
						_PicState = value;
						SendPropertyChanged("PicState");
						OnPicStateChanged();
					}
				}
			}

			partial void OnPicPhotoKChanging(int value);
			partial void OnPicPhotoKChanged();
			private int _PicPhotoK;
			[Column(Storage="_PicPhotoK", DbType="Int", CanBeNull=false)]
			public  override int PicPhotoK {
				get { return _PicPhotoK; }
				set {
					if (_PicPhotoK != value) {
						OnPicPhotoKChanging(value);
						SendPropertyChanging();
						_PicPhotoK = value;
						SendPropertyChanged("PicPhotoK");
						OnPicPhotoKChanged();
					}
				}
			}

			partial void OnPicMiscKChanging(int value);
			partial void OnPicMiscKChanged();
			private int _PicMiscK;
			[Column(Storage="_PicMiscK", DbType="Int", CanBeNull=false)]
			public  override int PicMiscK {
				get { return _PicMiscK; }
				set {
					if (_PicMiscK != value) {
						OnPicMiscKChanging(value);
						SendPropertyChanging();
						_PicMiscK = value;
						SendPropertyChanged("PicMiscK");
						OnPicMiscKChanged();
					}
				}
			}

			partial void OnDuplicateGuidChanging(Guid value);
			partial void OnDuplicateGuidChanged();
			private Guid _DuplicateGuid;
			[Column(Storage="_DuplicateGuid", DbType="UniqueIdentifier NOT NULL", CanBeNull=false)]
			public  override Guid DuplicateGuid {
				get { return _DuplicateGuid; }
				set {
					if (_DuplicateGuid != value) {
						OnDuplicateGuidChanging(value);
						SendPropertyChanging();
						_DuplicateGuid = value;
						SendPropertyChanged("DuplicateGuid");
						OnDuplicateGuidChanged();
					}
				}
			}

			partial void OnEmailOnAllThreadsChanging(bool value);
			partial void OnEmailOnAllThreadsChanged();
			private bool _EmailOnAllThreads;
			[Column(Storage="_EmailOnAllThreads", DbType="Bit", CanBeNull=false)]
			public  override bool EmailOnAllThreads {
				get { return _EmailOnAllThreads; }
				set {
					if (_EmailOnAllThreads != value) {
						OnEmailOnAllThreadsChanging(value);
						SendPropertyChanging();
						_EmailOnAllThreads = value;
						SendPropertyChanged("EmailOnAllThreads");
						OnEmailOnAllThreadsChanged();
					}
				}
			}

			partial void OnFavouriteCountChanging(int value);
			partial void OnFavouriteCountChanged();
			private int _FavouriteCount;
			[Column(Storage="_FavouriteCount", DbType="Int", CanBeNull=false)]
			public  override int FavouriteCount {
				get { return _FavouriteCount; }
				set {
					if (_FavouriteCount != value) {
						OnFavouriteCountChanging(value);
						SendPropertyChanging();
						_FavouriteCount = value;
						SendPropertyChanged("FavouriteCount");
						OnFavouriteCountChanged();
					}
				}
			}

			partial void OnWatchCountChanging(int value);
			partial void OnWatchCountChanged();
			private int _WatchCount;
			[Column(Storage="_WatchCount", DbType="Int", CanBeNull=false)]
			public  override int WatchCount {
				get { return _WatchCount; }
				set {
					if (_WatchCount != value) {
						OnWatchCountChanging(value);
						SendPropertyChanging();
						_WatchCount = value;
						SendPropertyChanged("WatchCount");
						OnWatchCountChanged();
					}
				}
			}

			#endregion

			#region Associations

			private EntityRef<Theme> _Theme;
			[Association(Name="Theme_Group", Storage="_Theme", ThisKey="ThemeK", IsForeignKey=true)]
			public Theme Theme {
				get { return _Theme.Entity; }
				set {
					Theme previousValue = _Theme.Entity;
					if ((previousValue != value) || (!_Theme.HasLoadedOrAssignedValue)) {
						SendPropertyChanging();
						if (previousValue != null) {
							_Theme.Entity = null;
							previousValue.Groups.Remove(this);
						}
						_Theme.Entity = value;
						if (value != null) {
							value.Groups.Add(this);
							_ThemeK = value.K;
						}
						else {
							_ThemeK = default(int);
						}
						SendPropertyChanged("Theme");
					}
				}
			}
			#endregion
		

		}

		[Table(Name=@"dbo.GroupEvent")]
 		public partial class GroupEvent : Model.Entities.GroupEvent, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public GroupEvent()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnGroupKChanging(int value);
			partial void OnGroupKChanged();
			private int _GroupK;
			[Column(Storage="_GroupK", DbType="Int NOT NULL", CanBeNull=false)]
			public  override int GroupK {
				get { return _GroupK; }
				set {
					if (_GroupK != value) {
						OnGroupKChanging(value);
						SendPropertyChanging();
						_GroupK = value;
						SendPropertyChanged("GroupK");
						OnGroupKChanged();
					}
				}
			}

			partial void OnEventKChanging(int value);
			partial void OnEventKChanged();
			private int _EventK;
			[Column(Storage="_EventK", DbType="Int NOT NULL", CanBeNull=false)]
			public  override int EventK {
				get { return _EventK; }
				set {
					if (_EventK != value) {
						OnEventKChanging(value);
						SendPropertyChanging();
						_EventK = value;
						SendPropertyChanged("EventK");
						OnEventKChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.GroupPhoto")]
 		public partial class GroupPhoto : Model.Entities.GroupPhoto, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public GroupPhoto()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnKChanging(int value);
			partial void OnKChanged();
			private int _K;
			[Column(Storage="_K", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
			public  override int K {
				get { return _K; }
				set {
					if (_K != value) {
						OnKChanging(value);
						SendPropertyChanging();
						_K = value;
						SendPropertyChanged("K");
						OnKChanged();
					}
				}
			}

			partial void OnGroupKChanging(int value);
			partial void OnGroupKChanged();
			private int _GroupK;
			[Column(Storage="_GroupK", DbType="Int NOT NULL", CanBeNull=false)]
			public  override int GroupK {
				get { return _GroupK; }
				set {
					if (_GroupK != value) {
						OnGroupKChanging(value);
						SendPropertyChanging();
						_GroupK = value;
						SendPropertyChanged("GroupK");
						OnGroupKChanged();
					}
				}
			}

			partial void OnPhotoKChanging(int value);
			partial void OnPhotoKChanged();
			private int _PhotoK;
			[Column(Storage="_PhotoK", DbType="Int NOT NULL", CanBeNull=false)]
			public  override int PhotoK {
				get { return _PhotoK; }
				set {
					if (_PhotoK != value) {
						OnPhotoKChanging(value);
						SendPropertyChanging();
						_PhotoK = value;
						SendPropertyChanged("PhotoK");
						OnPhotoKChanged();
					}
				}
			}

			partial void OnCaptionChanging(string value);
			partial void OnCaptionChanged();
			private string _Caption;
			[Column(Storage="_Caption", DbType="VarChar(255)", CanBeNull=false)]
			public  override string Caption {
				get { return _Caption; }
				set {
					if (_Caption != value) {
						OnCaptionChanging(value);
						SendPropertyChanging();
						_Caption = value;
						SendPropertyChanged("Caption");
						OnCaptionChanged();
					}
				}
			}

			partial void OnDateTimeChanging(DateTime value);
			partial void OnDateTimeChanged();
			private DateTime _DateTime;
			[Column(Storage="_DateTime", DbType="DateTime", CanBeNull=false)]
			public  override DateTime DateTime {
				get { return _DateTime; }
				set {
					if (_DateTime != value) {
						OnDateTimeChanging(value);
						SendPropertyChanging();
						_DateTime = value;
						SendPropertyChanged("DateTime");
						OnDateTimeChanged();
					}
				}
			}

			partial void OnAddedByUsrKChanging(int value);
			partial void OnAddedByUsrKChanged();
			private int _AddedByUsrK;
			[Column(Storage="_AddedByUsrK", DbType="Int", CanBeNull=false)]
			public  override int AddedByUsrK {
				get { return _AddedByUsrK; }
				set {
					if (_AddedByUsrK != value) {
						OnAddedByUsrKChanging(value);
						SendPropertyChanging();
						_AddedByUsrK = value;
						SendPropertyChanged("AddedByUsrK");
						OnAddedByUsrKChanged();
					}
				}
			}

			partial void OnShowOnFrontPageChanging(bool value);
			partial void OnShowOnFrontPageChanged();
			private bool _ShowOnFrontPage;
			[Column(Storage="_ShowOnFrontPage", DbType="Bit", CanBeNull=false)]
			public  override bool ShowOnFrontPage {
				get { return _ShowOnFrontPage; }
				set {
					if (_ShowOnFrontPage != value) {
						OnShowOnFrontPageChanging(value);
						SendPropertyChanging();
						_ShowOnFrontPage = value;
						SendPropertyChanged("ShowOnFrontPage");
						OnShowOnFrontPageChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.GroupUsr")]
 		public partial class GroupUsr : Model.Entities.GroupUsr, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public GroupUsr()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnUsrKChanging(int value);
			partial void OnUsrKChanged();
			private int _UsrK;
			[Column(Storage="_UsrK", DbType="Int NOT NULL", CanBeNull=false)]
			public  override int UsrK {
				get { return _UsrK; }
				set {
					if (_UsrK != value) {
						OnUsrKChanging(value);
						SendPropertyChanging();
						_UsrK = value;
						SendPropertyChanged("UsrK");
						OnUsrKChanged();
					}
				}
			}

			partial void OnGroupKChanging(int value);
			partial void OnGroupKChanged();
			private int _GroupK;
			[Column(Storage="_GroupK", DbType="Int NOT NULL", CanBeNull=false)]
			public  override int GroupK {
				get { return _GroupK; }
				set {
					if (_GroupK != value) {
						OnGroupKChanging(value);
						SendPropertyChanging();
						_GroupK = value;
						SendPropertyChanged("GroupK");
						OnGroupKChanged();
					}
				}
			}

			partial void OnStatusChanging(Model.Entities.GroupUsr.StatusEnum value);
			partial void OnStatusChanged();
			private Model.Entities.GroupUsr.StatusEnum _Status;
			[Column(Storage="_Status", DbType="Int", CanBeNull=false)]
			public  override Model.Entities.GroupUsr.StatusEnum Status {
				get { return _Status; }
				set {
					if (_Status != value) {
						OnStatusChanging(value);
						SendPropertyChanging();
						_Status = value;
						SendPropertyChanged("Status");
						OnStatusChanged();
					}
				}
			}

			partial void OnStatusChangeDateTimeChanging(DateTime value);
			partial void OnStatusChangeDateTimeChanged();
			private DateTime _StatusChangeDateTime;
			[Column(Storage="_StatusChangeDateTime", DbType="DateTime", CanBeNull=false)]
			public  override DateTime StatusChangeDateTime {
				get { return _StatusChangeDateTime; }
				set {
					if (_StatusChangeDateTime != value) {
						OnStatusChangeDateTimeChanging(value);
						SendPropertyChanging();
						_StatusChangeDateTime = value;
						SendPropertyChanged("StatusChangeDateTime");
						OnStatusChangeDateTimeChanged();
					}
				}
			}

			partial void OnStatusChangeUsrKChanging(int value);
			partial void OnStatusChangeUsrKChanged();
			private int _StatusChangeUsrK;
			[Column(Storage="_StatusChangeUsrK", DbType="Int", CanBeNull=false)]
			public  override int StatusChangeUsrK {
				get { return _StatusChangeUsrK; }
				set {
					if (_StatusChangeUsrK != value) {
						OnStatusChangeUsrKChanging(value);
						SendPropertyChanging();
						_StatusChangeUsrK = value;
						SendPropertyChanged("StatusChangeUsrK");
						OnStatusChangeUsrKChanged();
					}
				}
			}

			partial void OnOwnerChanging(bool value);
			partial void OnOwnerChanged();
			private bool _Owner;
			[Column(Storage="_Owner", DbType="Bit", CanBeNull=false)]
			public  override bool Owner {
				get { return _Owner; }
				set {
					if (_Owner != value) {
						OnOwnerChanging(value);
						SendPropertyChanging();
						_Owner = value;
						SendPropertyChanged("Owner");
						OnOwnerChanged();
					}
				}
			}

			partial void OnModeratorChanging(bool value);
			partial void OnModeratorChanged();
			private bool _Moderator;
			[Column(Storage="_Moderator", DbType="Bit", CanBeNull=false)]
			public  override bool Moderator {
				get { return _Moderator; }
				set {
					if (_Moderator != value) {
						OnModeratorChanging(value);
						SendPropertyChanging();
						_Moderator = value;
						SendPropertyChanged("Moderator");
						OnModeratorChanged();
					}
				}
			}

			partial void OnNewsAdminChanging(bool value);
			partial void OnNewsAdminChanged();
			private bool _NewsAdmin;
			[Column(Storage="_NewsAdmin", DbType="Bit", CanBeNull=false)]
			public  override bool NewsAdmin {
				get { return _NewsAdmin; }
				set {
					if (_NewsAdmin != value) {
						OnNewsAdminChanging(value);
						SendPropertyChanging();
						_NewsAdmin = value;
						SendPropertyChanged("NewsAdmin");
						OnNewsAdminChanged();
					}
				}
			}

			partial void OnMemberAdminChanging(bool value);
			partial void OnMemberAdminChanged();
			private bool _MemberAdmin;
			[Column(Storage="_MemberAdmin", DbType="Bit", CanBeNull=false)]
			public  override bool MemberAdmin {
				get { return _MemberAdmin; }
				set {
					if (_MemberAdmin != value) {
						OnMemberAdminChanging(value);
						SendPropertyChanging();
						_MemberAdmin = value;
						SendPropertyChanged("MemberAdmin");
						OnMemberAdminChanged();
					}
				}
			}

			partial void OnFavouriteChanging(bool value);
			partial void OnFavouriteChanged();
			private bool _Favourite;
			[Column(Storage="_Favourite", DbType="Bit", CanBeNull=false)]
			public  override bool Favourite {
				get { return _Favourite; }
				set {
					if (_Favourite != value) {
						OnFavouriteChanging(value);
						SendPropertyChanging();
						_Favourite = value;
						SendPropertyChanged("Favourite");
						OnFavouriteChanged();
					}
				}
			}

			partial void OnInviteMessageChanging(string value);
			partial void OnInviteMessageChanged();
			private string _InviteMessage;
			[Column(Storage="_InviteMessage", DbType="Text", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
			public  override string InviteMessage {
				get { return _InviteMessage; }
				set {
					if (_InviteMessage != value) {
						OnInviteMessageChanging(value);
						SendPropertyChanging();
						_InviteMessage = value;
						SendPropertyChanged("InviteMessage");
						OnInviteMessageChanged();
					}
				}
			}

			partial void OnInviteUsrKChanging(int value);
			partial void OnInviteUsrKChanged();
			private int _InviteUsrK;
			[Column(Storage="_InviteUsrK", DbType="Int", CanBeNull=false)]
			public  override int InviteUsrK {
				get { return _InviteUsrK; }
				set {
					if (_InviteUsrK != value) {
						OnInviteUsrKChanging(value);
						SendPropertyChanging();
						_InviteUsrK = value;
						SendPropertyChanged("InviteUsrK");
						OnInviteUsrKChanged();
					}
				}
			}

			partial void OnMemberAdminNewUserEmailsChanging(bool value);
			partial void OnMemberAdminNewUserEmailsChanged();
			private bool _MemberAdminNewUserEmails;
			[Column(Storage="_MemberAdminNewUserEmails", DbType="Bit", CanBeNull=false)]
			public  override bool MemberAdminNewUserEmails {
				get { return _MemberAdminNewUserEmails; }
				set {
					if (_MemberAdminNewUserEmails != value) {
						OnMemberAdminNewUserEmailsChanging(value);
						SendPropertyChanging();
						_MemberAdminNewUserEmails = value;
						SendPropertyChanged("MemberAdminNewUserEmails");
						OnMemberAdminNewUserEmailsChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.GuestlistCredit")]
 		public partial class GuestlistCredit : Model.Entities.GuestlistCredit, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public GuestlistCredit()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnKChanging(int value);
			partial void OnKChanged();
			private int _K;
			[Column(Storage="_K", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
			public  override int K {
				get { return _K; }
				set {
					if (_K != value) {
						OnKChanging(value);
						SendPropertyChanging();
						_K = value;
						SendPropertyChanged("K");
						OnKChanged();
					}
				}
			}

			partial void OnPromoterKChanging(int value);
			partial void OnPromoterKChanged();
			private int _PromoterK;
			[Column(Storage="_PromoterK", DbType="Int", CanBeNull=false)]
			public  override int PromoterK {
				get { return _PromoterK; }
				set {
					if (_PromoterK != value) {
						OnPromoterKChanging(value);
						SendPropertyChanging();
						_PromoterK = value;
						SendPropertyChanged("PromoterK");
						OnPromoterKChanged();
					}
				}
			}

			partial void OnDateTimeCreatedChanging(DateTime value);
			partial void OnDateTimeCreatedChanged();
			private DateTime _DateTimeCreated;
			[Column(Storage="_DateTimeCreated", DbType="DateTime", CanBeNull=false)]
			public  override DateTime DateTimeCreated {
				get { return _DateTimeCreated; }
				set {
					if (_DateTimeCreated != value) {
						OnDateTimeCreatedChanging(value);
						SendPropertyChanging();
						_DateTimeCreated = value;
						SendPropertyChanged("DateTimeCreated");
						OnDateTimeCreatedChanged();
					}
				}
			}

			partial void OnCreditsChanging(int value);
			partial void OnCreditsChanged();
			private int _Credits;
			[Column(Storage="_Credits", DbType="Int", CanBeNull=false)]
			public  override int Credits {
				get { return _Credits; }
				set {
					if (_Credits != value) {
						OnCreditsChanging(value);
						SendPropertyChanging();
						_Credits = value;
						SendPropertyChanged("Credits");
						OnCreditsChanged();
					}
				}
			}

			partial void OnTotalPriceChanging(decimal value);
			partial void OnTotalPriceChanged();
			private decimal _TotalPrice;
			[Column(Storage="_TotalPrice", DbType="Decimal(18,2)", CanBeNull=false)]
			public  override decimal TotalPrice {
				get { return _TotalPrice; }
				set {
					if (_TotalPrice != value) {
						OnTotalPriceChanging(value);
						SendPropertyChanging();
						_TotalPrice = value;
						SendPropertyChanged("TotalPrice");
						OnTotalPriceChanged();
					}
				}
			}

			partial void OnDoneChanging(bool value);
			partial void OnDoneChanged();
			private bool _Done;
			[Column(Storage="_Done", DbType="Bit", CanBeNull=false)]
			public  override bool Done {
				get { return _Done; }
				set {
					if (_Done != value) {
						OnDoneChanging(value);
						SendPropertyChanging();
						_Done = value;
						SendPropertyChanged("Done");
						OnDoneChanged();
					}
				}
			}

			partial void OnDateTimeDoneChanging(DateTime value);
			partial void OnDateTimeDoneChanged();
			private DateTime _DateTimeDone;
			[Column(Storage="_DateTimeDone", DbType="DateTime", CanBeNull=false)]
			public  override DateTime DateTimeDone {
				get { return _DateTimeDone; }
				set {
					if (_DateTimeDone != value) {
						OnDateTimeDoneChanging(value);
						SendPropertyChanging();
						_DateTimeDone = value;
						SendPropertyChanged("DateTimeDone");
						OnDateTimeDoneChanged();
					}
				}
			}

			partial void OnBuyableLockDateTimeChanging(DateTime value);
			partial void OnBuyableLockDateTimeChanged();
			private DateTime _BuyableLockDateTime;
			[Column(Storage="_BuyableLockDateTime", DbType="DateTime", CanBeNull=false)]
			public  override DateTime BuyableLockDateTime {
				get { return _BuyableLockDateTime; }
				set {
					if (_BuyableLockDateTime != value) {
						OnBuyableLockDateTimeChanging(value);
						SendPropertyChanging();
						_BuyableLockDateTime = value;
						SendPropertyChanged("BuyableLockDateTime");
						OnBuyableLockDateTimeChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.Hit")]
 		public partial class Hit : Model.Entities.Hit, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public Hit()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnKChanging(int value);
			partial void OnKChanged();
			private int _K;
			[Column(Storage="_K", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
			public  override int K {
				get { return _K; }
				set {
					if (_K != value) {
						OnKChanging(value);
						SendPropertyChanging();
						_K = value;
						SendPropertyChanged("K");
						OnKChanged();
					}
				}
			}

			partial void OnServerIdChanging(int value);
			partial void OnServerIdChanged();
			private int _ServerId;
			[Column(Storage="_ServerId", DbType="Int", CanBeNull=false)]
			public  override int ServerId {
				get { return _ServerId; }
				set {
					if (_ServerId != value) {
						OnServerIdChanging(value);
						SendPropertyChanging();
						_ServerId = value;
						SendPropertyChanged("ServerId");
						OnServerIdChanged();
					}
				}
			}

			partial void OnStartTimeChanging(DateTime value);
			partial void OnStartTimeChanged();
			private DateTime _StartTime;
			[Column(Storage="_StartTime", DbType="DateTime", CanBeNull=false)]
			public  override DateTime StartTime {
				get { return _StartTime; }
				set {
					if (_StartTime != value) {
						OnStartTimeChanging(value);
						SendPropertyChanging();
						_StartTime = value;
						SendPropertyChanged("StartTime");
						OnStartTimeChanged();
					}
				}
			}

			partial void OnHasEndedChanging(bool value);
			partial void OnHasEndedChanged();
			private bool _HasEnded;
			[Column(Storage="_HasEnded", DbType="Bit", CanBeNull=false)]
			public  override bool HasEnded {
				get { return _HasEnded; }
				set {
					if (_HasEnded != value) {
						OnHasEndedChanging(value);
						SendPropertyChanging();
						_HasEnded = value;
						SendPropertyChanged("HasEnded");
						OnHasEndedChanged();
					}
				}
			}

			partial void OnEndTimeChanging(DateTime value);
			partial void OnEndTimeChanged();
			private DateTime _EndTime;
			[Column(Storage="_EndTime", DbType="DateTime", CanBeNull=false)]
			public  override DateTime EndTime {
				get { return _EndTime; }
				set {
					if (_EndTime != value) {
						OnEndTimeChanging(value);
						SendPropertyChanging();
						_EndTime = value;
						SendPropertyChanged("EndTime");
						OnEndTimeChanged();
					}
				}
			}

			partial void OnGetDataChanging(string value);
			partial void OnGetDataChanged();
			private string _GetData;
			[Column(Storage="_GetData", DbType="Text", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
			public  override string GetData {
				get { return _GetData; }
				set {
					if (_GetData != value) {
						OnGetDataChanging(value);
						SendPropertyChanging();
						_GetData = value;
						SendPropertyChanged("GetData");
						OnGetDataChanged();
					}
				}
			}

			partial void OnPostDataChanging(string value);
			partial void OnPostDataChanged();
			private string _PostData;
			[Column(Storage="_PostData", DbType="Text", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
			public  override string PostData {
				get { return _PostData; }
				set {
					if (_PostData != value) {
						OnPostDataChanging(value);
						SendPropertyChanging();
						_PostData = value;
						SendPropertyChanged("PostData");
						OnPostDataChanged();
					}
				}
			}

			partial void OnUsrKChanging(int value);
			partial void OnUsrKChanged();
			private int _UsrK;
			[Column(Storage="_UsrK", DbType="Int", CanBeNull=false)]
			public  override int UsrK {
				get { return _UsrK; }
				set {
					if (_UsrK != value) {
						OnUsrKChanging(value);
						SendPropertyChanging();
						_UsrK = value;
						SendPropertyChanged("UsrK");
						OnUsrKChanged();
					}
				}
			}

			partial void OnCookieDataChanging(string value);
			partial void OnCookieDataChanged();
			private string _CookieData;
			[Column(Storage="_CookieData", DbType="Text", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
			public  override string CookieData {
				get { return _CookieData; }
				set {
					if (_CookieData != value) {
						OnCookieDataChanging(value);
						SendPropertyChanging();
						_CookieData = value;
						SendPropertyChanged("CookieData");
						OnCookieDataChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.HitView")]
 		public partial class HitView : Model.Entities.HitView, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public HitView()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnKChanging(int value);
			partial void OnKChanged();
			private int _K;
			[Column(Storage="_K", DbType="Int NOT NULL IDENTITY", CanBeNull=false)]
			public  override int K {
				get { return _K; }
				set {
					if (_K != value) {
						OnKChanging(value);
						SendPropertyChanging();
						_K = value;
						SendPropertyChanged("K");
						OnKChanged();
					}
				}
			}

			partial void OnServerIdChanging(int? value);
			partial void OnServerIdChanged();
			private int? _ServerId;
			[Column(Storage="_ServerId", DbType="Int")]
			public  override int? ServerId {
				get { return _ServerId; }
				set {
					if (_ServerId != value) {
						OnServerIdChanging(value);
						SendPropertyChanging();
						_ServerId = value;
						SendPropertyChanged("ServerId");
						OnServerIdChanged();
					}
				}
			}

			partial void OnStartTimeChanging(DateTime? value);
			partial void OnStartTimeChanged();
			private DateTime? _StartTime;
			[Column(Storage="_StartTime", DbType="DateTime")]
			public  override DateTime? StartTime {
				get { return _StartTime; }
				set {
					if (_StartTime != value) {
						OnStartTimeChanging(value);
						SendPropertyChanging();
						_StartTime = value;
						SendPropertyChanged("StartTime");
						OnStartTimeChanged();
					}
				}
			}

			partial void OnHasEndedChanging(bool? value);
			partial void OnHasEndedChanged();
			private bool? _HasEnded;
			[Column(Storage="_HasEnded", DbType="Bit")]
			public  override bool? HasEnded {
				get { return _HasEnded; }
				set {
					if (_HasEnded != value) {
						OnHasEndedChanging(value);
						SendPropertyChanging();
						_HasEnded = value;
						SendPropertyChanged("HasEnded");
						OnHasEndedChanged();
					}
				}
			}

			partial void OnEndTimeChanging(DateTime? value);
			partial void OnEndTimeChanged();
			private DateTime? _EndTime;
			[Column(Storage="_EndTime", DbType="DateTime")]
			public  override DateTime? EndTime {
				get { return _EndTime; }
				set {
					if (_EndTime != value) {
						OnEndTimeChanging(value);
						SendPropertyChanging();
						_EndTime = value;
						SendPropertyChanged("EndTime");
						OnEndTimeChanged();
					}
				}
			}

			partial void OnGetDataChanging(string value);
			partial void OnGetDataChanged();
			private string _GetData;
			[Column(Storage="_GetData", DbType="Text", UpdateCheck=UpdateCheck.Never)]
			public  override string GetData {
				get { return _GetData; }
				set {
					if (_GetData != value) {
						OnGetDataChanging(value);
						SendPropertyChanging();
						_GetData = value;
						SendPropertyChanged("GetData");
						OnGetDataChanged();
					}
				}
			}

			partial void OnPostDataChanging(string value);
			partial void OnPostDataChanged();
			private string _PostData;
			[Column(Storage="_PostData", DbType="Text", UpdateCheck=UpdateCheck.Never)]
			public  override string PostData {
				get { return _PostData; }
				set {
					if (_PostData != value) {
						OnPostDataChanging(value);
						SendPropertyChanging();
						_PostData = value;
						SendPropertyChanged("PostData");
						OnPostDataChanged();
					}
				}
			}

			partial void OnUsrKChanging(int? value);
			partial void OnUsrKChanged();
			private int? _UsrK;
			[Column(Storage="_UsrK", DbType="Int")]
			public  override int? UsrK {
				get { return _UsrK; }
				set {
					if (_UsrK != value) {
						OnUsrKChanging(value);
						SendPropertyChanging();
						_UsrK = value;
						SendPropertyChanged("UsrK");
						OnUsrKChanged();
					}
				}
			}

			partial void OnCookieDataChanging(string value);
			partial void OnCookieDataChanged();
			private string _CookieData;
			[Column(Storage="_CookieData", DbType="Text", UpdateCheck=UpdateCheck.Never)]
			public  override string CookieData {
				get { return _CookieData; }
				set {
					if (_CookieData != value) {
						OnCookieDataChanging(value);
						SendPropertyChanging();
						_CookieData = value;
						SendPropertyChanged("CookieData");
						OnCookieDataChanged();
					}
				}
			}

			partial void OnDurationChanging(int? value);
			partial void OnDurationChanged();
			private int? _Duration;
			[Column(Storage="_Duration", DbType="Int")]
			public  override int? Duration {
				get { return _Duration; }
				set {
					if (_Duration != value) {
						OnDurationChanging(value);
						SendPropertyChanging();
						_Duration = value;
						SendPropertyChanged("Duration");
						OnDurationChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.IncomingSms")]
 		public partial class IncomingSm : Model.Entities.IncomingSm, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public IncomingSm()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnKChanging(int value);
			partial void OnKChanged();
			private int _K;
			[Column(Storage="_K", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
			public  override int K {
				get { return _K; }
				set {
					if (_K != value) {
						OnKChanging(value);
						SendPropertyChanging();
						_K = value;
						SendPropertyChanged("K");
						OnKChanged();
					}
				}
			}

			partial void OnMessageChanging(string value);
			partial void OnMessageChanged();
			private string _Message;
			[Column(Storage="_Message", DbType="VarChar(400)")]
			public  override string Message {
				get { return _Message; }
				set {
					if (_Message != value) {
						OnMessageChanging(value);
						SendPropertyChanging();
						_Message = value;
						SendPropertyChanged("Message");
						OnMessageChanged();
					}
				}
			}

			partial void OnDateTimeChanging(DateTime? value);
			partial void OnDateTimeChanged();
			private DateTime? _DateTime;
			[Column(Storage="_DateTime", DbType="DateTime")]
			public  override DateTime? DateTime {
				get { return _DateTime; }
				set {
					if (_DateTime != value) {
						OnDateTimeChanging(value);
						SendPropertyChanging();
						_DateTime = value;
						SendPropertyChanged("DateTime");
						OnDateTimeChanged();
					}
				}
			}

			partial void OnMobileKChanging(int? value);
			partial void OnMobileKChanged();
			private int? _MobileK;
			[Column(Storage="_MobileK", DbType="Int")]
			public  override int? MobileK {
				get { return _MobileK; }
				set {
					if (_MobileK != value) {
						OnMobileKChanging(value);
						SendPropertyChanging();
						_MobileK = value;
						SendPropertyChanged("MobileK");
						OnMobileKChanged();
					}
				}
			}

			partial void OnServiceTypeChanging(int? value);
			partial void OnServiceTypeChanged();
			private int? _ServiceType;
			[Column(Storage="_ServiceType", DbType="Int")]
			public  override int? ServiceType {
				get { return _ServiceType; }
				set {
					if (_ServiceType != value) {
						OnServiceTypeChanging(value);
						SendPropertyChanging();
						_ServiceType = value;
						SendPropertyChanged("ServiceType");
						OnServiceTypeChanged();
					}
				}
			}

			partial void OnPostDataChanging(string value);
			partial void OnPostDataChanged();
			private string _PostData;
			[Column(Storage="_PostData", DbType="Text", UpdateCheck=UpdateCheck.Never)]
			public  override string PostData {
				get { return _PostData; }
				set {
					if (_PostData != value) {
						OnPostDataChanging(value);
						SendPropertyChanging();
						_PostData = value;
						SendPropertyChanged("PostData");
						OnPostDataChanged();
					}
				}
			}

			partial void OnMessageIDChanging(string value);
			partial void OnMessageIDChanged();
			private string _MessageID;
			[Column(Storage="_MessageID", DbType="VarChar(64)")]
			public  override string MessageID {
				get { return _MessageID; }
				set {
					if (_MessageID != value) {
						OnMessageIDChanging(value);
						SendPropertyChanging();
						_MessageID = value;
						SendPropertyChanged("MessageID");
						OnMessageIDChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.InsertionOrder")]
 		public partial class InsertionOrder : Model.Entities.InsertionOrder, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public InsertionOrder()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnKChanging(int value);
			partial void OnKChanged();
			private int _K;
			[Column(Storage="_K", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
			public  override int K {
				get { return _K; }
				set {
					if (_K != value) {
						OnKChanging(value);
						SendPropertyChanging();
						_K = value;
						SendPropertyChanged("K");
						OnKChanged();
					}
				}
			}

			partial void OnStatusChanging(Model.Entities.InsertionOrder.InsertionOrderStatus value);
			partial void OnStatusChanged();
			private Model.Entities.InsertionOrder.InsertionOrderStatus _Status;
			[Column(Storage="_Status", DbType="Int NOT NULL", CanBeNull=false)]
			public  override Model.Entities.InsertionOrder.InsertionOrderStatus Status {
				get { return _Status; }
				set {
					if (_Status != value) {
						OnStatusChanging(value);
						SendPropertyChanging();
						_Status = value;
						SendPropertyChanged("Status");
						OnStatusChanged();
					}
				}
			}

			partial void OnCampaignCreditsChanging(int value);
			partial void OnCampaignCreditsChanged();
			private int _CampaignCredits;
			[Column(Storage="_CampaignCredits", DbType="Int", CanBeNull=false)]
			public  override int CampaignCredits {
				get { return _CampaignCredits; }
				set {
					if (_CampaignCredits != value) {
						OnCampaignCreditsChanging(value);
						SendPropertyChanging();
						_CampaignCredits = value;
						SendPropertyChanged("CampaignCredits");
						OnCampaignCreditsChanged();
					}
				}
			}

			partial void OnNextInvoiceDueChanging(DateTime value);
			partial void OnNextInvoiceDueChanged();
			private DateTime _NextInvoiceDue;
			[Column(Storage="_NextInvoiceDue", DbType="DateTime", CanBeNull=false)]
			public  override DateTime NextInvoiceDue {
				get { return _NextInvoiceDue; }
				set {
					if (_NextInvoiceDue != value) {
						OnNextInvoiceDueChanging(value);
						SendPropertyChanging();
						_NextInvoiceDue = value;
						SendPropertyChanged("NextInvoiceDue");
						OnNextInvoiceDueChanged();
					}
				}
			}

			partial void OnPromoterKChanging(int value);
			partial void OnPromoterKChanged();
			private int _PromoterK;
			[Column(Storage="_PromoterK", DbType="Int NOT NULL", CanBeNull=false)]
			public  override int PromoterK {
				get { return _PromoterK; }
				set {
					if (_PromoterK != value) {
						OnPromoterKChanging(value);
						SendPropertyChanging();
						_PromoterK = value;
						SendPropertyChanged("PromoterK");
						OnPromoterKChanged();
					}
				}
			}

			partial void OnUsrKChanging(int value);
			partial void OnUsrKChanged();
			private int _UsrK;
			[Column(Storage="_UsrK", DbType="Int NOT NULL", CanBeNull=false)]
			public  override int UsrK {
				get { return _UsrK; }
				set {
					if (_UsrK != value) {
						OnUsrKChanging(value);
						SendPropertyChanging();
						_UsrK = value;
						SendPropertyChanged("UsrK");
						OnUsrKChanged();
					}
				}
			}

			partial void OnUsrNameOverrideChanging(string value);
			partial void OnUsrNameOverrideChanged();
			private string _UsrNameOverride;
			[Column(Storage="_UsrNameOverride", DbType="VarChar(250)", CanBeNull=false)]
			public  override string UsrNameOverride {
				get { return _UsrNameOverride; }
				set {
					if (_UsrNameOverride != value) {
						OnUsrNameOverrideChanging(value);
						SendPropertyChanging();
						_UsrNameOverride = value;
						SendPropertyChanged("UsrNameOverride");
						OnUsrNameOverrideChanged();
					}
				}
			}

			partial void OnDateTimeCreatedChanging(DateTime value);
			partial void OnDateTimeCreatedChanged();
			private DateTime _DateTimeCreated;
			[Column(Storage="_DateTimeCreated", DbType="DateTime NOT NULL", CanBeNull=false)]
			public  override DateTime DateTimeCreated {
				get { return _DateTimeCreated; }
				set {
					if (_DateTimeCreated != value) {
						OnDateTimeCreatedChanging(value);
						SendPropertyChanging();
						_DateTimeCreated = value;
						SendPropertyChanged("DateTimeCreated");
						OnDateTimeCreatedChanged();
					}
				}
			}

			partial void OnClientRefChanging(string value);
			partial void OnClientRefChanged();
			private string _ClientRef;
			[Column(Storage="_ClientRef", DbType="VarChar(250)", CanBeNull=false)]
			public  override string ClientRef {
				get { return _ClientRef; }
				set {
					if (_ClientRef != value) {
						OnClientRefChanging(value);
						SendPropertyChanging();
						_ClientRef = value;
						SendPropertyChanged("ClientRef");
						OnClientRefChanged();
					}
				}
			}

			partial void OnCampaignStartDateChanging(DateTime value);
			partial void OnCampaignStartDateChanged();
			private DateTime _CampaignStartDate;
			[Column(Storage="_CampaignStartDate", DbType="DateTime", CanBeNull=false)]
			public  override DateTime CampaignStartDate {
				get { return _CampaignStartDate; }
				set {
					if (_CampaignStartDate != value) {
						OnCampaignStartDateChanging(value);
						SendPropertyChanging();
						_CampaignStartDate = value;
						SendPropertyChanged("CampaignStartDate");
						OnCampaignStartDateChanged();
					}
				}
			}

			partial void OnCampaignEndDateChanging(DateTime value);
			partial void OnCampaignEndDateChanged();
			private DateTime _CampaignEndDate;
			[Column(Storage="_CampaignEndDate", DbType="DateTime", CanBeNull=false)]
			public  override DateTime CampaignEndDate {
				get { return _CampaignEndDate; }
				set {
					if (_CampaignEndDate != value) {
						OnCampaignEndDateChanging(value);
						SendPropertyChanging();
						_CampaignEndDate = value;
						SendPropertyChanged("CampaignEndDate");
						OnCampaignEndDateChanged();
					}
				}
			}

			partial void OnTrafficUsrKChanging(int value);
			partial void OnTrafficUsrKChanged();
			private int _TrafficUsrK;
			[Column(Storage="_TrafficUsrK", DbType="Int", CanBeNull=false)]
			public  override int TrafficUsrK {
				get { return _TrafficUsrK; }
				set {
					if (_TrafficUsrK != value) {
						OnTrafficUsrKChanging(value);
						SendPropertyChanging();
						_TrafficUsrK = value;
						SendPropertyChanged("TrafficUsrK");
						OnTrafficUsrKChanged();
					}
				}
			}

			partial void OnNotesChanging(string value);
			partial void OnNotesChanged();
			private string _Notes;
			[Column(Storage="_Notes", DbType="VarChar(MAX)", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
			public  override string Notes {
				get { return _Notes; }
				set {
					if (_Notes != value) {
						OnNotesChanging(value);
						SendPropertyChanging();
						_Notes = value;
						SendPropertyChanged("Notes");
						OnNotesChanged();
					}
				}
			}

			partial void OnActionUsrKChanging(int value);
			partial void OnActionUsrKChanged();
			private int _ActionUsrK;
			[Column(Storage="_ActionUsrK", DbType="Int", CanBeNull=false)]
			public  override int ActionUsrK {
				get { return _ActionUsrK; }
				set {
					if (_ActionUsrK != value) {
						OnActionUsrKChanging(value);
						SendPropertyChanging();
						_ActionUsrK = value;
						SendPropertyChanged("ActionUsrK");
						OnActionUsrKChanged();
					}
				}
			}

			partial void OnPaymentTermsChanging(string value);
			partial void OnPaymentTermsChanged();
			private string _PaymentTerms;
			[Column(Storage="_PaymentTerms", DbType="VarChar(250)", CanBeNull=false)]
			public  override string PaymentTerms {
				get { return _PaymentTerms; }
				set {
					if (_PaymentTerms != value) {
						OnPaymentTermsChanging(value);
						SendPropertyChanging();
						_PaymentTerms = value;
						SendPropertyChanged("PaymentTerms");
						OnPaymentTermsChanged();
					}
				}
			}

			partial void OnInvoicePeriodChanging(string value);
			partial void OnInvoicePeriodChanged();
			private string _InvoicePeriod;
			[Column(Storage="_InvoicePeriod", DbType="VarChar(250)", CanBeNull=false)]
			public  override string InvoicePeriod {
				get { return _InvoicePeriod; }
				set {
					if (_InvoicePeriod != value) {
						OnInvoicePeriodChanging(value);
						SendPropertyChanging();
						_InvoicePeriod = value;
						SendPropertyChanged("InvoicePeriod");
						OnInvoicePeriodChanged();
					}
				}
			}

			partial void OnCampaignNameChanging(string value);
			partial void OnCampaignNameChanged();
			private string _CampaignName;
			[Column(Storage="_CampaignName", DbType="VarChar(50)", CanBeNull=false)]
			public  override string CampaignName {
				get { return _CampaignName; }
				set {
					if (_CampaignName != value) {
						OnCampaignNameChanging(value);
						SendPropertyChanging();
						_CampaignName = value;
						SendPropertyChanged("CampaignName");
						OnCampaignNameChanged();
					}
				}
			}

			partial void OnAgencyDiscountChanging(double value);
			partial void OnAgencyDiscountChanged();
			private double _AgencyDiscount;
			[Column(Storage="_AgencyDiscount", DbType="Float", CanBeNull=false)]
			public  override double AgencyDiscount {
				get { return _AgencyDiscount; }
				set {
					if (_AgencyDiscount != value) {
						OnAgencyDiscountChanging(value);
						SendPropertyChanging();
						_AgencyDiscount = value;
						SendPropertyChanged("AgencyDiscount");
						OnAgencyDiscountChanged();
					}
				}
			}

			partial void OnDuplicateGuidChanging(Guid value);
			partial void OnDuplicateGuidChanged();
			private Guid _DuplicateGuid;
			[Column(Storage="_DuplicateGuid", DbType="UniqueIdentifier", CanBeNull=false)]
			public  override Guid DuplicateGuid {
				get { return _DuplicateGuid; }
				set {
					if (_DuplicateGuid != value) {
						OnDuplicateGuidChanging(value);
						SendPropertyChanging();
						_DuplicateGuid = value;
						SendPropertyChanged("DuplicateGuid");
						OnDuplicateGuidChanged();
					}
				}
			}

			partial void OnCampaignCreditsOverridenChanging(bool value);
			partial void OnCampaignCreditsOverridenChanged();
			private bool _CampaignCreditsOverriden;
			[Column(Storage="_CampaignCreditsOverriden", DbType="Bit", CanBeNull=false)]
			public  override bool CampaignCreditsOverriden {
				get { return _CampaignCreditsOverriden; }
				set {
					if (_CampaignCreditsOverriden != value) {
						OnCampaignCreditsOverridenChanging(value);
						SendPropertyChanging();
						_CampaignCreditsOverriden = value;
						SendPropertyChanged("CampaignCreditsOverriden");
						OnCampaignCreditsOverridenChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.InsertionOrderItem")]
 		public partial class InsertionOrderItem : Model.Entities.InsertionOrderItem, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public InsertionOrderItem()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnKChanging(int value);
			partial void OnKChanged();
			private int _K;
			[Column(Storage="_K", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
			public  override int K {
				get { return _K; }
				set {
					if (_K != value) {
						OnKChanging(value);
						SendPropertyChanging();
						_K = value;
						SendPropertyChanged("K");
						OnKChanged();
					}
				}
			}

			partial void OnInsertionOrderKChanging(int value);
			partial void OnInsertionOrderKChanged();
			private int _InsertionOrderK;
			[Column(Storage="_InsertionOrderK", DbType="Int", CanBeNull=false)]
			public  override int InsertionOrderK {
				get { return _InsertionOrderK; }
				set {
					if (_InsertionOrderK != value) {
						OnInsertionOrderKChanging(value);
						SendPropertyChanging();
						_InsertionOrderK = value;
						SendPropertyChanged("InsertionOrderK");
						OnInsertionOrderKChanged();
					}
				}
			}

			partial void OnDescriptionChanging(string value);
			partial void OnDescriptionChanged();
			private string _Description;
			[Column(Storage="_Description", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
			public  override string Description {
				get { return _Description; }
				set {
					if (_Description != value) {
						OnDescriptionChanging(value);
						SendPropertyChanging();
						_Description = value;
						SendPropertyChanged("Description");
						OnDescriptionChanged();
					}
				}
			}

			partial void OnBannerPositionChanging(int value);
			partial void OnBannerPositionChanged();
			private int _BannerPosition;
			[Column(Storage="_BannerPosition", DbType="Int NOT NULL", CanBeNull=false)]
			public  override int BannerPosition {
				get { return _BannerPosition; }
				set {
					if (_BannerPosition != value) {
						OnBannerPositionChanging(value);
						SendPropertyChanging();
						_BannerPosition = value;
						SendPropertyChanged("BannerPosition");
						OnBannerPositionChanged();
					}
				}
			}

			partial void OnImpressionQuantityChanging(int value);
			partial void OnImpressionQuantityChanged();
			private int _ImpressionQuantity;
			[Column(Storage="_ImpressionQuantity", DbType="Int NOT NULL", CanBeNull=false)]
			public  override int ImpressionQuantity {
				get { return _ImpressionQuantity; }
				set {
					if (_ImpressionQuantity != value) {
						OnImpressionQuantityChanging(value);
						SendPropertyChanging();
						_ImpressionQuantity = value;
						SendPropertyChanged("ImpressionQuantity");
						OnImpressionQuantityChanged();
					}
				}
			}

			partial void OnPriceBeforeDiscountChanging(decimal value);
			partial void OnPriceBeforeDiscountChanged();
			private decimal _PriceBeforeDiscount;
			[Column(Storage="_PriceBeforeDiscount", DbType="Decimal(18,2) NOT NULL", CanBeNull=false)]
			public  override decimal PriceBeforeDiscount {
				get { return _PriceBeforeDiscount; }
				set {
					if (_PriceBeforeDiscount != value) {
						OnPriceBeforeDiscountChanging(value);
						SendPropertyChanging();
						_PriceBeforeDiscount = value;
						SendPropertyChanged("PriceBeforeDiscount");
						OnPriceBeforeDiscountChanged();
					}
				}
			}

			partial void OnDiscountChanging(double value);
			partial void OnDiscountChanged();
			private double _Discount;
			[Column(Storage="_Discount", DbType="Float NOT NULL", CanBeNull=false)]
			public  override double Discount {
				get { return _Discount; }
				set {
					if (_Discount != value) {
						OnDiscountChanging(value);
						SendPropertyChanging();
						_Discount = value;
						SendPropertyChanged("Discount");
						OnDiscountChanged();
					}
				}
			}

			partial void OnPriceBeforeAgencyDiscountChanging(decimal value);
			partial void OnPriceBeforeAgencyDiscountChanged();
			private decimal _PriceBeforeAgencyDiscount;
			[Column(Storage="_PriceBeforeAgencyDiscount", DbType="Decimal(18,2) NOT NULL", CanBeNull=false)]
			public  override decimal PriceBeforeAgencyDiscount {
				get { return _PriceBeforeAgencyDiscount; }
				set {
					if (_PriceBeforeAgencyDiscount != value) {
						OnPriceBeforeAgencyDiscountChanging(value);
						SendPropertyChanging();
						_PriceBeforeAgencyDiscount = value;
						SendPropertyChanged("PriceBeforeAgencyDiscount");
						OnPriceBeforeAgencyDiscountChanged();
					}
				}
			}

			partial void OnAgencyDiscountChanging(double value);
			partial void OnAgencyDiscountChanged();
			private double _AgencyDiscount;
			[Column(Storage="_AgencyDiscount", DbType="Float NOT NULL", CanBeNull=false)]
			public  override double AgencyDiscount {
				get { return _AgencyDiscount; }
				set {
					if (_AgencyDiscount != value) {
						OnAgencyDiscountChanging(value);
						SendPropertyChanging();
						_AgencyDiscount = value;
						SendPropertyChanged("AgencyDiscount");
						OnAgencyDiscountChanged();
					}
				}
			}

			partial void OnPriceChanging(decimal value);
			partial void OnPriceChanged();
			private decimal _Price;
			[Column(Storage="_Price", DbType="Decimal(18,2) NOT NULL", CanBeNull=false)]
			public  override decimal Price {
				get { return _Price; }
				set {
					if (_Price != value) {
						OnPriceChanging(value);
						SendPropertyChanging();
						_Price = value;
						SendPropertyChanged("Price");
						OnPriceChanged();
					}
				}
			}

			partial void OnCpmChanging(decimal value);
			partial void OnCpmChanged();
			private decimal _Cpm;
			[Column(Storage="_Cpm", DbType="Decimal(18,2) NOT NULL", CanBeNull=false)]
			public  override decimal Cpm {
				get { return _Cpm; }
				set {
					if (_Cpm != value) {
						OnCpmChanging(value);
						SendPropertyChanging();
						_Cpm = value;
						SendPropertyChanged("Cpm");
						OnCpmChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.Invoice")]
 		public partial class Invoice : Model.Entities.Invoice, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public Invoice()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnKChanging(int value);
			partial void OnKChanged();
			private int _K;
			[Column(Storage="_K", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
			public  override int K {
				get { return _K; }
				set {
					if (_K != value) {
						OnKChanging(value);
						SendPropertyChanging();
						_K = value;
						SendPropertyChanged("K");
						OnKChanged();
					}
				}
			}

			partial void OnTypeChanging(Model.Entities.Invoice.Types value);
			partial void OnTypeChanged();
			private Model.Entities.Invoice.Types _Type;
			[Column(Storage="_Type", DbType="Int NOT NULL", CanBeNull=false)]
			public  override Model.Entities.Invoice.Types Type {
				get { return _Type; }
				set {
					if (_Type != value) {
						OnTypeChanging(value);
						SendPropertyChanging();
						_Type = value;
						SendPropertyChanged("Type");
						OnTypeChanged();
					}
				}
			}

			partial void OnUsrKChanging(int value);
			partial void OnUsrKChanged();
			private int _UsrK;
			[Column(Storage="_UsrK", DbType="Int", CanBeNull=false)]
			public  override int UsrK {
				get { return _UsrK; }
				set {
					if (_UsrK != value) {
						OnUsrKChanging(value);
						SendPropertyChanging();
						_UsrK = value;
						SendPropertyChanged("UsrK");
						OnUsrKChanged();
					}
				}
			}

			partial void OnPromoterKChanging(int value);
			partial void OnPromoterKChanged();
			private int _PromoterK;
			[Column(Storage="_PromoterK", DbType="Int", CanBeNull=false)]
			public  override int PromoterK {
				get { return _PromoterK; }
				set {
					if (_PromoterK != value) {
						OnPromoterKChanging(value);
						SendPropertyChanging();
						_PromoterK = value;
						SendPropertyChanged("PromoterK");
						OnPromoterKChanged();
					}
				}
			}

			partial void OnActionUsrKChanging(int value);
			partial void OnActionUsrKChanged();
			private int _ActionUsrK;
			[Column(Storage="_ActionUsrK", DbType="Int", CanBeNull=false)]
			public  override int ActionUsrK {
				get { return _ActionUsrK; }
				set {
					if (_ActionUsrK != value) {
						OnActionUsrKChanging(value);
						SendPropertyChanging();
						_ActionUsrK = value;
						SendPropertyChanged("ActionUsrK");
						OnActionUsrKChanged();
					}
				}
			}

			partial void OnNameChanging(string value);
			partial void OnNameChanged();
			private string _Name;
			[Column(Storage="_Name", DbType="VarChar(150)", CanBeNull=false)]
			public  override string Name {
				get { return _Name; }
				set {
					if (_Name != value) {
						OnNameChanging(value);
						SendPropertyChanging();
						_Name = value;
						SendPropertyChanged("Name");
						OnNameChanged();
					}
				}
			}

			partial void OnAddressChanging(string value);
			partial void OnAddressChanged();
			private string _Address;
			[Column(Storage="_Address", DbType="VarChar(150)", CanBeNull=false)]
			public  override string Address {
				get { return _Address; }
				set {
					if (_Address != value) {
						OnAddressChanging(value);
						SendPropertyChanging();
						_Address = value;
						SendPropertyChanged("Address");
						OnAddressChanged();
					}
				}
			}

			partial void OnPostcodeChanging(string value);
			partial void OnPostcodeChanged();
			private string _Postcode;
			[Column(Storage="_Postcode", DbType="VarChar(150)", CanBeNull=false)]
			public  override string Postcode {
				get { return _Postcode; }
				set {
					if (_Postcode != value) {
						OnPostcodeChanging(value);
						SendPropertyChanging();
						_Postcode = value;
						SendPropertyChanged("Postcode");
						OnPostcodeChanged();
					}
				}
			}

			partial void OnPaymentTypeChanging(Model.Entities.Invoice.PaymentTypes value);
			partial void OnPaymentTypeChanged();
			private Model.Entities.Invoice.PaymentTypes _PaymentType;
			[Column(Storage="_PaymentType", DbType="Int NOT NULL", CanBeNull=false)]
			public  override Model.Entities.Invoice.PaymentTypes PaymentType {
				get { return _PaymentType; }
				set {
					if (_PaymentType != value) {
						OnPaymentTypeChanging(value);
						SendPropertyChanging();
						_PaymentType = value;
						SendPropertyChanged("PaymentType");
						OnPaymentTypeChanged();
					}
				}
			}

			partial void OnPaidChanging(bool value);
			partial void OnPaidChanged();
			private bool _Paid;
			[Column(Storage="_Paid", DbType="Bit NOT NULL", CanBeNull=false)]
			public  override bool Paid {
				get { return _Paid; }
				set {
					if (_Paid != value) {
						OnPaidChanging(value);
						SendPropertyChanging();
						_Paid = value;
						SendPropertyChanged("Paid");
						OnPaidChanged();
					}
				}
			}

			partial void OnCreatedDateTimeChanging(DateTime value);
			partial void OnCreatedDateTimeChanged();
			private DateTime _CreatedDateTime;
			[Column(Storage="_CreatedDateTime", DbType="DateTime NOT NULL", CanBeNull=false)]
			public  override DateTime CreatedDateTime {
				get { return _CreatedDateTime; }
				set {
					if (_CreatedDateTime != value) {
						OnCreatedDateTimeChanging(value);
						SendPropertyChanging();
						_CreatedDateTime = value;
						SendPropertyChanged("CreatedDateTime");
						OnCreatedDateTimeChanged();
					}
				}
			}

			partial void OnDueDateTimeChanging(DateTime value);
			partial void OnDueDateTimeChanged();
			private DateTime _DueDateTime;
			[Column(Storage="_DueDateTime", DbType="DateTime NOT NULL", CanBeNull=false)]
			public  override DateTime DueDateTime {
				get { return _DueDateTime; }
				set {
					if (_DueDateTime != value) {
						OnDueDateTimeChanging(value);
						SendPropertyChanging();
						_DueDateTime = value;
						SendPropertyChanged("DueDateTime");
						OnDueDateTimeChanged();
					}
				}
			}

			partial void OnPaidDateTimeChanging(DateTime value);
			partial void OnPaidDateTimeChanged();
			private DateTime _PaidDateTime;
			[Column(Storage="_PaidDateTime", DbType="DateTime", CanBeNull=false)]
			public  override DateTime PaidDateTime {
				get { return _PaidDateTime; }
				set {
					if (_PaidDateTime != value) {
						OnPaidDateTimeChanging(value);
						SendPropertyChanging();
						_PaidDateTime = value;
						SendPropertyChanged("PaidDateTime");
						OnPaidDateTimeChanged();
					}
				}
			}

			partial void OnPriceChanging(decimal value);
			partial void OnPriceChanged();
			private decimal _Price;
			[Column(Storage="_Price", DbType="Decimal(18,2) NOT NULL", CanBeNull=false)]
			public  override decimal Price {
				get { return _Price; }
				set {
					if (_Price != value) {
						OnPriceChanging(value);
						SendPropertyChanging();
						_Price = value;
						SendPropertyChanged("Price");
						OnPriceChanged();
					}
				}
			}

			partial void OnVatChanging(decimal value);
			partial void OnVatChanged();
			private decimal _Vat;
			[Column(Storage="_Vat", DbType="Decimal(18,2) NOT NULL", CanBeNull=false)]
			public  override decimal Vat {
				get { return _Vat; }
				set {
					if (_Vat != value) {
						OnVatChanging(value);
						SendPropertyChanging();
						_Vat = value;
						SendPropertyChanged("Vat");
						OnVatChanged();
					}
				}
			}

			partial void OnTotalChanging(decimal value);
			partial void OnTotalChanged();
			private decimal _Total;
			[Column(Storage="_Total", DbType="Decimal(18,2) NOT NULL", CanBeNull=false)]
			public  override decimal Total {
				get { return _Total; }
				set {
					if (_Total != value) {
						OnTotalChanging(value);
						SendPropertyChanging();
						_Total = value;
						SendPropertyChanged("Total");
						OnTotalChanged();
					}
				}
			}

			partial void OnDuplicateGuidChanging(Guid value);
			partial void OnDuplicateGuidChanged();
			private Guid _DuplicateGuid;
			[Column(Storage="_DuplicateGuid", DbType="UniqueIdentifier", CanBeNull=false)]
			public  override Guid DuplicateGuid {
				get { return _DuplicateGuid; }
				set {
					if (_DuplicateGuid != value) {
						OnDuplicateGuidChanging(value);
						SendPropertyChanging();
						_DuplicateGuid = value;
						SendPropertyChanged("DuplicateGuid");
						OnDuplicateGuidChanged();
					}
				}
			}

			partial void OnNotesChanging(string value);
			partial void OnNotesChanged();
			private string _Notes;
			[Column(Storage="_Notes", DbType="Text", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
			public  override string Notes {
				get { return _Notes; }
				set {
					if (_Notes != value) {
						OnNotesChanging(value);
						SendPropertyChanging();
						_Notes = value;
						SendPropertyChanged("Notes");
						OnNotesChanged();
					}
				}
			}

			partial void OnVatCodeChanging(Model.Entities.Invoice.VATCodes value);
			partial void OnVatCodeChanged();
			private Model.Entities.Invoice.VATCodes _VatCode;
			[Column(Storage="_VatCode", DbType="Int NOT NULL", CanBeNull=false)]
			public  override Model.Entities.Invoice.VATCodes VatCode {
				get { return _VatCode; }
				set {
					if (_VatCode != value) {
						OnVatCodeChanging(value);
						SendPropertyChanging();
						_VatCode = value;
						SendPropertyChanged("VatCode");
						OnVatCodeChanged();
					}
				}
			}

			partial void OnSalesUsrKChanging(int value);
			partial void OnSalesUsrKChanged();
			private int _SalesUsrK;
			[Column(Storage="_SalesUsrK", DbType="Int", CanBeNull=false)]
			public  override int SalesUsrK {
				get { return _SalesUsrK; }
				set {
					if (_SalesUsrK != value) {
						OnSalesUsrKChanging(value);
						SendPropertyChanging();
						_SalesUsrK = value;
						SendPropertyChanged("SalesUsrK");
						OnSalesUsrKChanged();
					}
				}
			}

			partial void OnSalesUsrAmountChanging(decimal value);
			partial void OnSalesUsrAmountChanged();
			private decimal _SalesUsrAmount;
			[Column(Storage="_SalesUsrAmount", DbType="Decimal(18,2)", CanBeNull=false)]
			public  override decimal SalesUsrAmount {
				get { return _SalesUsrAmount; }
				set {
					if (_SalesUsrAmount != value) {
						OnSalesUsrAmountChanging(value);
						SendPropertyChanging();
						_SalesUsrAmount = value;
						SendPropertyChanged("SalesUsrAmount");
						OnSalesUsrAmountChanged();
					}
				}
			}

			partial void OnIsImmediateCreditCardPaymentChanging(bool value);
			partial void OnIsImmediateCreditCardPaymentChanged();
			private bool _IsImmediateCreditCardPayment;
			[Column(Storage="_IsImmediateCreditCardPayment", DbType="Bit NOT NULL", CanBeNull=false)]
			public  override bool IsImmediateCreditCardPayment {
				get { return _IsImmediateCreditCardPayment; }
				set {
					if (_IsImmediateCreditCardPayment != value) {
						OnIsImmediateCreditCardPaymentChanging(value);
						SendPropertyChanging();
						_IsImmediateCreditCardPayment = value;
						SendPropertyChanged("IsImmediateCreditCardPayment");
						OnIsImmediateCreditCardPaymentChanged();
					}
				}
			}

			partial void OnTaxDateTimeChanging(DateTime value);
			partial void OnTaxDateTimeChanged();
			private DateTime _TaxDateTime;
			[Column(Storage="_TaxDateTime", DbType="DateTime NOT NULL", CanBeNull=false)]
			public  override DateTime TaxDateTime {
				get { return _TaxDateTime; }
				set {
					if (_TaxDateTime != value) {
						OnTaxDateTimeChanging(value);
						SendPropertyChanging();
						_TaxDateTime = value;
						SendPropertyChanged("TaxDateTime");
						OnTaxDateTimeChanged();
					}
				}
			}

			partial void OnPurchaseOrderNumberChanging(string value);
			partial void OnPurchaseOrderNumberChanged();
			private string _PurchaseOrderNumber;
			[Column(Storage="_PurchaseOrderNumber", DbType="VarChar(50)", CanBeNull=false)]
			public  override string PurchaseOrderNumber {
				get { return _PurchaseOrderNumber; }
				set {
					if (_PurchaseOrderNumber != value) {
						OnPurchaseOrderNumberChanging(value);
						SendPropertyChanging();
						_PurchaseOrderNumber = value;
						SendPropertyChanged("PurchaseOrderNumber");
						OnPurchaseOrderNumberChanged();
					}
				}
			}

			partial void OnBuyerTypeChanging(Model.Entities.Invoice.BuyerTypes value);
			partial void OnBuyerTypeChanged();
			private Model.Entities.Invoice.BuyerTypes _BuyerType;
			[Column(Storage="_BuyerType", DbType="Int NOT NULL", CanBeNull=false)]
			public  override Model.Entities.Invoice.BuyerTypes BuyerType {
				get { return _BuyerType; }
				set {
					if (_BuyerType != value) {
						OnBuyerTypeChanging(value);
						SendPropertyChanging();
						_BuyerType = value;
						SendPropertyChanged("BuyerType");
						OnBuyerTypeChanged();
					}
				}
			}

			partial void OnPriceBeforeDiscountChanging(decimal value);
			partial void OnPriceBeforeDiscountChanged();
			private decimal _PriceBeforeDiscount;
			[Column(Storage="_PriceBeforeDiscount", DbType="Decimal(18,2) NOT NULL", CanBeNull=false)]
			public  override decimal PriceBeforeDiscount {
				get { return _PriceBeforeDiscount; }
				set {
					if (_PriceBeforeDiscount != value) {
						OnPriceBeforeDiscountChanging(value);
						SendPropertyChanging();
						_PriceBeforeDiscount = value;
						SendPropertyChanged("PriceBeforeDiscount");
						OnPriceBeforeDiscountChanged();
					}
				}
			}

			partial void OnDiscountChanging(double value);
			partial void OnDiscountChanged();
			private double _Discount;
			[Column(Storage="_Discount", DbType="Float NOT NULL", CanBeNull=false)]
			public  override double Discount {
				get { return _Discount; }
				set {
					if (_Discount != value) {
						OnDiscountChanging(value);
						SendPropertyChanging();
						_Discount = value;
						SendPropertyChanged("Discount");
						OnDiscountChanged();
					}
				}
			}

			partial void OnPriceBeforeAgencyDiscountChanging(decimal value);
			partial void OnPriceBeforeAgencyDiscountChanged();
			private decimal _PriceBeforeAgencyDiscount;
			[Column(Storage="_PriceBeforeAgencyDiscount", DbType="Decimal(18,2) NOT NULL", CanBeNull=false)]
			public  override decimal PriceBeforeAgencyDiscount {
				get { return _PriceBeforeAgencyDiscount; }
				set {
					if (_PriceBeforeAgencyDiscount != value) {
						OnPriceBeforeAgencyDiscountChanging(value);
						SendPropertyChanging();
						_PriceBeforeAgencyDiscount = value;
						SendPropertyChanged("PriceBeforeAgencyDiscount");
						OnPriceBeforeAgencyDiscountChanged();
					}
				}
			}

			partial void OnAgencyDiscountChanging(double value);
			partial void OnAgencyDiscountChanged();
			private double _AgencyDiscount;
			[Column(Storage="_AgencyDiscount", DbType="Float NOT NULL", CanBeNull=false)]
			public  override double AgencyDiscount {
				get { return _AgencyDiscount; }
				set {
					if (_AgencyDiscount != value) {
						OnAgencyDiscountChanging(value);
						SendPropertyChanging();
						_AgencyDiscount = value;
						SendPropertyChanged("AgencyDiscount");
						OnAgencyDiscountChanged();
					}
				}
			}

			partial void OnInsertionOrderKChanging(int value);
			partial void OnInsertionOrderKChanged();
			private int _InsertionOrderK;
			[Column(Storage="_InsertionOrderK", DbType="Int", CanBeNull=false)]
			public  override int InsertionOrderK {
				get { return _InsertionOrderK; }
				set {
					if (_InsertionOrderK != value) {
						OnInsertionOrderKChanging(value);
						SendPropertyChanging();
						_InsertionOrderK = value;
						SendPropertyChanged("InsertionOrderK");
						OnInsertionOrderKChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.InvoiceCredit")]
 		public partial class InvoiceCredit : Model.Entities.InvoiceCredit, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public InvoiceCredit()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnInvoiceKChanging(int value);
			partial void OnInvoiceKChanged();
			private int _InvoiceK;
			[Column(Storage="_InvoiceK", DbType="Int NOT NULL", IsPrimaryKey=true)]
			public  override int InvoiceK {
				get { return _InvoiceK; }
				set {
					if (_InvoiceK != value) {
						OnInvoiceKChanging(value);
						SendPropertyChanging();
						_InvoiceK = value;
						SendPropertyChanged("InvoiceK");
						OnInvoiceKChanged();
					}
				}
			}

			partial void OnCreditInvoiceKChanging(int value);
			partial void OnCreditInvoiceKChanged();
			private int _CreditInvoiceK;
			[Column(Storage="_CreditInvoiceK", DbType="Int NOT NULL", IsPrimaryKey=true)]
			public  override int CreditInvoiceK {
				get { return _CreditInvoiceK; }
				set {
					if (_CreditInvoiceK != value) {
						OnCreditInvoiceKChanging(value);
						SendPropertyChanging();
						_CreditInvoiceK = value;
						SendPropertyChanged("CreditInvoiceK");
						OnCreditInvoiceKChanged();
					}
				}
			}

			partial void OnAmountChanging(decimal value);
			partial void OnAmountChanged();
			private decimal _Amount;
			[Column(Storage="_Amount", DbType="Decimal(18,2) NOT NULL", CanBeNull=false)]
			public  override decimal Amount {
				get { return _Amount; }
				set {
					if (_Amount != value) {
						OnAmountChanging(value);
						SendPropertyChanging();
						_Amount = value;
						SendPropertyChanged("Amount");
						OnAmountChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.InvoiceItem")]
 		public partial class InvoiceItem : Model.Entities.InvoiceItem, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public InvoiceItem()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnKChanging(int value);
			partial void OnKChanged();
			private int _K;
			[Column(Storage="_K", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
			public  override int K {
				get { return _K; }
				set {
					if (_K != value) {
						OnKChanging(value);
						SendPropertyChanging();
						_K = value;
						SendPropertyChanged("K");
						OnKChanged();
					}
				}
			}

			partial void OnInvoiceKChanging(int value);
			partial void OnInvoiceKChanged();
			private int _InvoiceK;
			[Column(Storage="_InvoiceK", DbType="Int NOT NULL", CanBeNull=false)]
			public  override int InvoiceK {
				get { return _InvoiceK; }
				set {
					if (_InvoiceK != value) {
						OnInvoiceKChanging(value);
						SendPropertyChanging();
						_InvoiceK = value;
						SendPropertyChanged("InvoiceK");
						OnInvoiceKChanged();
					}
				}
			}

			partial void OnTypeChanging(Model.Entities.InvoiceItem.Types value);
			partial void OnTypeChanged();
			private Model.Entities.InvoiceItem.Types _Type;
			[Column(Storage="_Type", DbType="Int NOT NULL", CanBeNull=false)]
			public  override Model.Entities.InvoiceItem.Types Type {
				get { return _Type; }
				set {
					if (_Type != value) {
						OnTypeChanging(value);
						SendPropertyChanging();
						_Type = value;
						SendPropertyChanged("Type");
						OnTypeChanged();
					}
				}
			}

			partial void OnKeyDataChanging(int value);
			partial void OnKeyDataChanged();
			private int _KeyData;
			[Column(Storage="_KeyData", DbType="Int", CanBeNull=false)]
			public  override int KeyData {
				get { return _KeyData; }
				set {
					if (_KeyData != value) {
						OnKeyDataChanging(value);
						SendPropertyChanging();
						_KeyData = value;
						SendPropertyChanged("KeyData");
						OnKeyDataChanged();
					}
				}
			}

			partial void OnCustomDataChanging(string value);
			partial void OnCustomDataChanged();
			private string _CustomData;
			[Column(Storage="_CustomData", DbType="VarChar(255)", CanBeNull=false)]
			public  override string CustomData {
				get { return _CustomData; }
				set {
					if (_CustomData != value) {
						OnCustomDataChanging(value);
						SendPropertyChanging();
						_CustomData = value;
						SendPropertyChanged("CustomData");
						OnCustomDataChanged();
					}
				}
			}

			partial void OnItemProcessedChanging(bool value);
			partial void OnItemProcessedChanged();
			private bool _ItemProcessed;
			[Column(Storage="_ItemProcessed", DbType="Bit NOT NULL", CanBeNull=false)]
			public  override bool ItemProcessed {
				get { return _ItemProcessed; }
				set {
					if (_ItemProcessed != value) {
						OnItemProcessedChanging(value);
						SendPropertyChanging();
						_ItemProcessed = value;
						SendPropertyChanged("ItemProcessed");
						OnItemProcessedChanged();
					}
				}
			}

			partial void OnDescriptionChanging(string value);
			partial void OnDescriptionChanged();
			private string _Description;
			[Column(Storage="_Description", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
			public  override string Description {
				get { return _Description; }
				set {
					if (_Description != value) {
						OnDescriptionChanging(value);
						SendPropertyChanging();
						_Description = value;
						SendPropertyChanged("Description");
						OnDescriptionChanged();
					}
				}
			}

			partial void OnPriceChanging(decimal value);
			partial void OnPriceChanged();
			private decimal _Price;
			[Column(Storage="_Price", DbType="Decimal(18,2) NOT NULL", CanBeNull=false)]
			public  override decimal Price {
				get { return _Price; }
				set {
					if (_Price != value) {
						OnPriceChanging(value);
						SendPropertyChanging();
						_Price = value;
						SendPropertyChanged("Price");
						OnPriceChanged();
					}
				}
			}

			partial void OnVatChanging(decimal value);
			partial void OnVatChanged();
			private decimal _Vat;
			[Column(Storage="_Vat", DbType="Decimal(18,2) NOT NULL", CanBeNull=false)]
			public  override decimal Vat {
				get { return _Vat; }
				set {
					if (_Vat != value) {
						OnVatChanging(value);
						SendPropertyChanging();
						_Vat = value;
						SendPropertyChanged("Vat");
						OnVatChanged();
					}
				}
			}

			partial void OnTotalChanging(decimal value);
			partial void OnTotalChanged();
			private decimal _Total;
			[Column(Storage="_Total", DbType="Decimal(18,2) NOT NULL", CanBeNull=false)]
			public  override decimal Total {
				get { return _Total; }
				set {
					if (_Total != value) {
						OnTotalChanging(value);
						SendPropertyChanging();
						_Total = value;
						SendPropertyChanged("Total");
						OnTotalChanged();
					}
				}
			}

			partial void OnRevenueStartDateChanging(DateTime value);
			partial void OnRevenueStartDateChanged();
			private DateTime _RevenueStartDate;
			[Column(Storage="_RevenueStartDate", DbType="DateTime", CanBeNull=false)]
			public  override DateTime RevenueStartDate {
				get { return _RevenueStartDate; }
				set {
					if (_RevenueStartDate != value) {
						OnRevenueStartDateChanging(value);
						SendPropertyChanging();
						_RevenueStartDate = value;
						SendPropertyChanged("RevenueStartDate");
						OnRevenueStartDateChanged();
					}
				}
			}

			partial void OnRevenueEndDateChanging(DateTime value);
			partial void OnRevenueEndDateChanged();
			private DateTime _RevenueEndDate;
			[Column(Storage="_RevenueEndDate", DbType="DateTime", CanBeNull=false)]
			public  override DateTime RevenueEndDate {
				get { return _RevenueEndDate; }
				set {
					if (_RevenueEndDate != value) {
						OnRevenueEndDateChanging(value);
						SendPropertyChanging();
						_RevenueEndDate = value;
						SendPropertyChanged("RevenueEndDate");
						OnRevenueEndDateChanged();
					}
				}
			}

			partial void OnVatCodeChanging(Model.Entities.InvoiceItem.VATCodes value);
			partial void OnVatCodeChanged();
			private Model.Entities.InvoiceItem.VATCodes _VatCode;
			[Column(Storage="_VatCode", DbType="Int NOT NULL", CanBeNull=false)]
			public  override Model.Entities.InvoiceItem.VATCodes VatCode {
				get { return _VatCode; }
				set {
					if (_VatCode != value) {
						OnVatCodeChanging(value);
						SendPropertyChanging();
						_VatCode = value;
						SendPropertyChanged("VatCode");
						OnVatCodeChanged();
					}
				}
			}

			partial void OnBuyableObjectTypeChanging(Model.Entities.ObjectType value);
			partial void OnBuyableObjectTypeChanged();
			private Model.Entities.ObjectType _BuyableObjectType;
			[Column(Storage="_BuyableObjectType", DbType="Int", CanBeNull=false)]
			public  override Model.Entities.ObjectType BuyableObjectType {
				get { return _BuyableObjectType; }
				set {
					if (_BuyableObjectType != value) {
						OnBuyableObjectTypeChanging(value);
						SendPropertyChanging();
						_BuyableObjectType = value;
						SendPropertyChanged("BuyableObjectType");
						OnBuyableObjectTypeChanged();
					}
				}
			}

			partial void OnBuyableObjectKChanging(int value);
			partial void OnBuyableObjectKChanged();
			private int _BuyableObjectK;
			[Column(Storage="_BuyableObjectK", DbType="Int", CanBeNull=false)]
			public  override int BuyableObjectK {
				get { return _BuyableObjectK; }
				set {
					if (_BuyableObjectK != value) {
						OnBuyableObjectKChanging(value);
						SendPropertyChanging();
						_BuyableObjectK = value;
						SendPropertyChanged("BuyableObjectK");
						OnBuyableObjectKChanged();
					}
				}
			}

			partial void OnPriceBeforeDiscountChanging(decimal value);
			partial void OnPriceBeforeDiscountChanged();
			private decimal _PriceBeforeDiscount;
			[Column(Storage="_PriceBeforeDiscount", DbType="Decimal(18,2) NOT NULL", CanBeNull=false)]
			public  override decimal PriceBeforeDiscount {
				get { return _PriceBeforeDiscount; }
				set {
					if (_PriceBeforeDiscount != value) {
						OnPriceBeforeDiscountChanging(value);
						SendPropertyChanging();
						_PriceBeforeDiscount = value;
						SendPropertyChanged("PriceBeforeDiscount");
						OnPriceBeforeDiscountChanged();
					}
				}
			}

			partial void OnDiscountChanging(double value);
			partial void OnDiscountChanged();
			private double _Discount;
			[Column(Storage="_Discount", DbType="Float NOT NULL", CanBeNull=false)]
			public  override double Discount {
				get { return _Discount; }
				set {
					if (_Discount != value) {
						OnDiscountChanging(value);
						SendPropertyChanging();
						_Discount = value;
						SendPropertyChanged("Discount");
						OnDiscountChanged();
					}
				}
			}

			partial void OnPriceBeforeAgencyDiscountChanging(decimal value);
			partial void OnPriceBeforeAgencyDiscountChanged();
			private decimal _PriceBeforeAgencyDiscount;
			[Column(Storage="_PriceBeforeAgencyDiscount", DbType="Decimal(18,2) NOT NULL", CanBeNull=false)]
			public  override decimal PriceBeforeAgencyDiscount {
				get { return _PriceBeforeAgencyDiscount; }
				set {
					if (_PriceBeforeAgencyDiscount != value) {
						OnPriceBeforeAgencyDiscountChanging(value);
						SendPropertyChanging();
						_PriceBeforeAgencyDiscount = value;
						SendPropertyChanged("PriceBeforeAgencyDiscount");
						OnPriceBeforeAgencyDiscountChanged();
					}
				}
			}

			partial void OnAgencyDiscountChanging(double value);
			partial void OnAgencyDiscountChanged();
			private double _AgencyDiscount;
			[Column(Storage="_AgencyDiscount", DbType="Float NOT NULL", CanBeNull=false)]
			public  override double AgencyDiscount {
				get { return _AgencyDiscount; }
				set {
					if (_AgencyDiscount != value) {
						OnAgencyDiscountChanging(value);
						SendPropertyChanging();
						_AgencyDiscount = value;
						SendPropertyChanged("AgencyDiscount");
						OnAgencyDiscountChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.InvoiceTransfer")]
 		public partial class InvoiceTransfer : Model.Entities.InvoiceTransfer, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public InvoiceTransfer()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnInvoiceKChanging(int value);
			partial void OnInvoiceKChanged();
			private int _InvoiceK;
			[Column(Storage="_InvoiceK", DbType="Int NOT NULL", IsPrimaryKey=true)]
			public  override int InvoiceK {
				get { return _InvoiceK; }
				set {
					if (_InvoiceK != value) {
						OnInvoiceKChanging(value);
						SendPropertyChanging();
						_InvoiceK = value;
						SendPropertyChanged("InvoiceK");
						OnInvoiceKChanged();
					}
				}
			}

			partial void OnTransferKChanging(int value);
			partial void OnTransferKChanged();
			private int _TransferK;
			[Column(Storage="_TransferK", DbType="Int NOT NULL", IsPrimaryKey=true)]
			public  override int TransferK {
				get { return _TransferK; }
				set {
					if (_TransferK != value) {
						OnTransferKChanging(value);
						SendPropertyChanging();
						_TransferK = value;
						SendPropertyChanged("TransferK");
						OnTransferKChanged();
					}
				}
			}

			partial void OnAmountChanging(decimal value);
			partial void OnAmountChanged();
			private decimal _Amount;
			[Column(Storage="_Amount", DbType="Decimal(18,2) NOT NULL", CanBeNull=false)]
			public  override decimal Amount {
				get { return _Amount; }
				set {
					if (_Amount != value) {
						OnAmountChanging(value);
						SendPropertyChanging();
						_Amount = value;
						SendPropertyChanged("Amount");
						OnAmountChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.IpCountry")]
 		public partial class IpCountry : Model.Entities.IpCountry, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public IpCountry()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnIpFromChanging(long value);
			partial void OnIpFromChanged();
			private long _IpFrom;
			[Column(Storage="_IpFrom", DbType="BigInt NOT NULL", CanBeNull=false)]
			public  override long IpFrom {
				get { return _IpFrom; }
				set {
					if (_IpFrom != value) {
						OnIpFromChanging(value);
						SendPropertyChanging();
						_IpFrom = value;
						SendPropertyChanged("IpFrom");
						OnIpFromChanged();
					}
				}
			}

			partial void OnIpToChanging(long value);
			partial void OnIpToChanged();
			private long _IpTo;
			[Column(Storage="_IpTo", DbType="BigInt NOT NULL", CanBeNull=false)]
			public  override long IpTo {
				get { return _IpTo; }
				set {
					if (_IpTo != value) {
						OnIpToChanging(value);
						SendPropertyChanging();
						_IpTo = value;
						SendPropertyChanged("IpTo");
						OnIpToChanged();
					}
				}
			}

			partial void OnCode2LetterChanging(string value);
			partial void OnCode2LetterChanged();
			private string _Code2Letter;
			[Column(Storage="_Code2Letter", DbType="VarChar(2)", CanBeNull=false)]
			public  override string Code2Letter {
				get { return _Code2Letter; }
				set {
					if (_Code2Letter != value) {
						OnCode2LetterChanging(value);
						SendPropertyChanging();
						_Code2Letter = value;
						SendPropertyChanged("Code2Letter");
						OnCode2LetterChanged();
					}
				}
			}

			partial void OnCode3LetterChanging(string value);
			partial void OnCode3LetterChanged();
			private string _Code3Letter;
			[Column(Storage="_Code3Letter", DbType="VarChar(3)", CanBeNull=false)]
			public  override string Code3Letter {
				get { return _Code3Letter; }
				set {
					if (_Code3Letter != value) {
						OnCode3LetterChanging(value);
						SendPropertyChanging();
						_Code3Letter = value;
						SendPropertyChanged("Code3Letter");
						OnCode3LetterChanged();
					}
				}
			}

			partial void OnNameChanging(string value);
			partial void OnNameChanged();
			private string _Name;
			[Column(Storage="_Name", DbType="VarChar(50)", CanBeNull=false)]
			public  override string Name {
				get { return _Name; }
				set {
					if (_Name != value) {
						OnNameChanging(value);
						SendPropertyChanging();
						_Name = value;
						SendPropertyChanged("Name");
						OnNameChanged();
					}
				}
			}

			partial void OnCountryKChanging(int value);
			partial void OnCountryKChanged();
			private int _CountryK;
			[Column(Storage="_CountryK", DbType="Int", CanBeNull=false)]
			public  override int CountryK {
				get { return _CountryK; }
				set {
					if (_CountryK != value) {
						OnCountryKChanging(value);
						SendPropertyChanging();
						_CountryK = value;
						SendPropertyChanged("CountryK");
						OnCountryKChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.Log")]
 		public partial class Log : Model.Entities.Log, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public Log()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnItemTypeChanging(Model.Entities.Log.Items value);
			partial void OnItemTypeChanged();
			private Model.Entities.Log.Items _ItemType;
			[Column(Storage="_ItemType", DbType="Int NOT NULL", CanBeNull=false)]
			public  override Model.Entities.Log.Items ItemType {
				get { return _ItemType; }
				set {
					if (_ItemType != value) {
						OnItemTypeChanging(value);
						SendPropertyChanging();
						_ItemType = value;
						SendPropertyChanged("ItemType");
						OnItemTypeChanged();
					}
				}
			}

			partial void OnDateChanging(DateTime value);
			partial void OnDateChanged();
			private DateTime _Date;
			[Column(Storage="_Date", DbType="DateTime NOT NULL", CanBeNull=false)]
			public  override DateTime Date {
				get { return _Date; }
				set {
					if (_Date != value) {
						OnDateChanging(value);
						SendPropertyChanging();
						_Date = value;
						SendPropertyChanged("Date");
						OnDateChanged();
					}
				}
			}

			partial void OnCountChanging(int value);
			partial void OnCountChanged();
			private int _Count;
			[Column(Storage="_Count", DbType="Int", CanBeNull=false)]
			public  override int Count {
				get { return _Count; }
				set {
					if (_Count != value) {
						OnCountChanging(value);
						SendPropertyChanging();
						_Count = value;
						SendPropertyChanged("Count");
						OnCountChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.LogPageTime")]
 		public partial class LogPageTime : Model.Entities.LogPageTime, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public LogPageTime()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnKChanging(int value);
			partial void OnKChanged();
			private int _K;
			[Column(Storage="_K", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
			public  override int K {
				get { return _K; }
				set {
					if (_K != value) {
						OnKChanging(value);
						SendPropertyChanging();
						_K = value;
						SendPropertyChanged("K");
						OnKChanged();
					}
				}
			}

			partial void OnStartDateTimeChanging(DateTime value);
			partial void OnStartDateTimeChanged();
			private DateTime _StartDateTime;
			[Column(Storage="_StartDateTime", DbType="DateTime NOT NULL", CanBeNull=false)]
			public  override DateTime StartDateTime {
				get { return _StartDateTime; }
				set {
					if (_StartDateTime != value) {
						OnStartDateTimeChanging(value);
						SendPropertyChanging();
						_StartDateTime = value;
						SendPropertyChanged("StartDateTime");
						OnStartDateTimeChanged();
					}
				}
			}

			partial void OnEndDateTimeChanging(DateTime value);
			partial void OnEndDateTimeChanged();
			private DateTime _EndDateTime;
			[Column(Storage="_EndDateTime", DbType="DateTime NOT NULL", CanBeNull=false)]
			public  override DateTime EndDateTime {
				get { return _EndDateTime; }
				set {
					if (_EndDateTime != value) {
						OnEndDateTimeChanging(value);
						SendPropertyChanging();
						_EndDateTime = value;
						SendPropertyChanged("EndDateTime");
						OnEndDateTimeChanged();
					}
				}
			}

			partial void OnCurrentFilterChanging(string value);
			partial void OnCurrentFilterChanged();
			private string _CurrentFilter;
			[Column(Storage="_CurrentFilter", DbType="VarChar(150)", CanBeNull=false)]
			public  override string CurrentFilter {
				get { return _CurrentFilter; }
				set {
					if (_CurrentFilter != value) {
						OnCurrentFilterChanging(value);
						SendPropertyChanging();
						_CurrentFilter = value;
						SendPropertyChanged("CurrentFilter");
						OnCurrentFilterChanged();
					}
				}
			}

			partial void OnMasterPathChanging(string value);
			partial void OnMasterPathChanged();
			private string _MasterPath;
			[Column(Storage="_MasterPath", DbType="VarChar(50)", CanBeNull=false)]
			public  override string MasterPath {
				get { return _MasterPath; }
				set {
					if (_MasterPath != value) {
						OnMasterPathChanging(value);
						SendPropertyChanging();
						_MasterPath = value;
						SendPropertyChanged("MasterPath");
						OnMasterPathChanged();
					}
				}
			}

			partial void OnPagePathChanging(string value);
			partial void OnPagePathChanged();
			private string _PagePath;
			[Column(Storage="_PagePath", DbType="VarChar(50)", CanBeNull=false)]
			public  override string PagePath {
				get { return _PagePath; }
				set {
					if (_PagePath != value) {
						OnPagePathChanging(value);
						SendPropertyChanging();
						_PagePath = value;
						SendPropertyChanged("PagePath");
						OnPagePathChanged();
					}
				}
			}

			partial void OnObjectFilterKChanging(int value);
			partial void OnObjectFilterKChanged();
			private int _ObjectFilterK;
			[Column(Storage="_ObjectFilterK", DbType="Int", CanBeNull=false)]
			public  override int ObjectFilterK {
				get { return _ObjectFilterK; }
				set {
					if (_ObjectFilterK != value) {
						OnObjectFilterKChanging(value);
						SendPropertyChanging();
						_ObjectFilterK = value;
						SendPropertyChanged("ObjectFilterK");
						OnObjectFilterKChanged();
					}
				}
			}

			partial void OnObjectFilterTypeChanging(Model.Entities.ObjectType value);
			partial void OnObjectFilterTypeChanged();
			private Model.Entities.ObjectType _ObjectFilterType;
			[Column(Storage="_ObjectFilterType", DbType="Int", CanBeNull=false)]
			public  override Model.Entities.ObjectType ObjectFilterType {
				get { return _ObjectFilterType; }
				set {
					if (_ObjectFilterType != value) {
						OnObjectFilterTypeChanging(value);
						SendPropertyChanging();
						_ObjectFilterType = value;
						SendPropertyChanged("ObjectFilterType");
						OnObjectFilterTypeChanged();
					}
				}
			}

			partial void OnMachineNameChanging(string value);
			partial void OnMachineNameChanged();
			private string _MachineName;
			[Column(Storage="_MachineName", DbType="VarChar(50)", CanBeNull=false)]
			public  override string MachineName {
				get { return _MachineName; }
				set {
					if (_MachineName != value) {
						OnMachineNameChanging(value);
						SendPropertyChanging();
						_MachineName = value;
						SendPropertyChanged("MachineName");
						OnMachineNameChanged();
					}
				}
			}

			partial void OnUsrKChanging(int value);
			partial void OnUsrKChanged();
			private int _UsrK;
			[Column(Storage="_UsrK", DbType="Int", CanBeNull=false)]
			public  override int UsrK {
				get { return _UsrK; }
				set {
					if (_UsrK != value) {
						OnUsrKChanging(value);
						SendPropertyChanging();
						_UsrK = value;
						SendPropertyChanged("UsrK");
						OnUsrKChanged();
					}
				}
			}

			partial void OnSelectsChanging(int value);
			partial void OnSelectsChanged();
			private int _Selects;
			[Column(Storage="_Selects", DbType="Int", CanBeNull=false)]
			public  override int Selects {
				get { return _Selects; }
				set {
					if (_Selects != value) {
						OnSelectsChanging(value);
						SendPropertyChanging();
						_Selects = value;
						SendPropertyChanged("Selects");
						OnSelectsChanged();
					}
				}
			}

			partial void OnUpdatesChanging(int value);
			partial void OnUpdatesChanged();
			private int _Updates;
			[Column(Storage="_Updates", DbType="Int", CanBeNull=false)]
			public  override int Updates {
				get { return _Updates; }
				set {
					if (_Updates != value) {
						OnUpdatesChanging(value);
						SendPropertyChanging();
						_Updates = value;
						SendPropertyChanged("Updates");
						OnUpdatesChanged();
					}
				}
			}

			partial void OnInsertsChanging(int value);
			partial void OnInsertsChanged();
			private int _Inserts;
			[Column(Storage="_Inserts", DbType="Int", CanBeNull=false)]
			public  override int Inserts {
				get { return _Inserts; }
				set {
					if (_Inserts != value) {
						OnInsertsChanging(value);
						SendPropertyChanging();
						_Inserts = value;
						SendPropertyChanged("Inserts");
						OnInsertsChanged();
					}
				}
			}

			partial void OnDeletesChanging(int value);
			partial void OnDeletesChanged();
			private int _Deletes;
			[Column(Storage="_Deletes", DbType="Int", CanBeNull=false)]
			public  override int Deletes {
				get { return _Deletes; }
				set {
					if (_Deletes != value) {
						OnDeletesChanging(value);
						SendPropertyChanging();
						_Deletes = value;
						SendPropertyChanged("Deletes");
						OnDeletesChanged();
					}
				}
			}

			partial void OnIsGetChanging(bool value);
			partial void OnIsGetChanged();
			private bool _IsGet;
			[Column(Storage="_IsGet", DbType="Bit", CanBeNull=false)]
			public  override bool IsGet {
				get { return _IsGet; }
				set {
					if (_IsGet != value) {
						OnIsGetChanging(value);
						SendPropertyChanging();
						_IsGet = value;
						SendPropertyChanged("IsGet");
						OnIsGetChanged();
					}
				}
			}

			partial void OnUrlChanging(string value);
			partial void OnUrlChanged();
			private string _Url;
			[Column(Storage="_Url", DbType="VarChar(150)", CanBeNull=false)]
			public  override string Url {
				get { return _Url; }
				set {
					if (_Url != value) {
						OnUrlChanging(value);
						SendPropertyChanging();
						_Url = value;
						SendPropertyChanged("Url");
						OnUrlChanged();
					}
				}
			}

			partial void OnPostDataChanging(string value);
			partial void OnPostDataChanged();
			private string _PostData;
			[Column(Storage="_PostData", DbType="VarChar(4000)", CanBeNull=false)]
			public  override string PostData {
				get { return _PostData; }
				set {
					if (_PostData != value) {
						OnPostDataChanging(value);
						SendPropertyChanging();
						_PostData = value;
						SendPropertyChanged("PostData");
						OnPostDataChanged();
					}
				}
			}

			partial void OnDsiGuidChanging(Guid value);
			partial void OnDsiGuidChanged();
			private Guid _DsiGuid;
			[Column(Storage="_DsiGuid", DbType="UniqueIdentifier", CanBeNull=false)]
			public  override Guid DsiGuid {
				get { return _DsiGuid; }
				set {
					if (_DsiGuid != value) {
						OnDsiGuidChanging(value);
						SendPropertyChanging();
						_DsiGuid = value;
						SendPropertyChanged("DsiGuid");
						OnDsiGuidChanged();
					}
				}
			}

			partial void OnIpAddressChanging(string value);
			partial void OnIpAddressChanged();
			private string _IpAddress;
			[Column(Storage="_IpAddress", DbType="VarChar(15)", CanBeNull=false)]
			public  override string IpAddress {
				get { return _IpAddress; }
				set {
					if (_IpAddress != value) {
						OnIpAddressChanging(value);
						SendPropertyChanging();
						_IpAddress = value;
						SendPropertyChanged("IpAddress");
						OnIpAddressChanged();
					}
				}
			}

			partial void OnIsCrawlerChanging(bool? value);
			partial void OnIsCrawlerChanged();
			private bool? _IsCrawler;
			[Column(Storage="_IsCrawler", DbType="Bit")]
			public  override bool? IsCrawler {
				get { return _IsCrawler; }
				set {
					if (_IsCrawler != value) {
						OnIsCrawlerChanging(value);
						SendPropertyChanging();
						_IsCrawler = value;
						SendPropertyChanged("IsCrawler");
						OnIsCrawlerChanged();
					}
				}
			}

			partial void OnIsAjaxRequestChanging(bool? value);
			partial void OnIsAjaxRequestChanged();
			private bool? _IsAjaxRequest;
			[Column(Storage="_IsAjaxRequest", DbType="Bit")]
			public  override bool? IsAjaxRequest {
				get { return _IsAjaxRequest; }
				set {
					if (_IsAjaxRequest != value) {
						OnIsAjaxRequestChanging(value);
						SendPropertyChanging();
						_IsAjaxRequest = value;
						SendPropertyChanged("IsAjaxRequest");
						OnIsAjaxRequestChanged();
					}
				}
			}

			partial void OnIsRenderedChanging(bool? value);
			partial void OnIsRenderedChanged();
			private bool? _IsRendered;
			[Column(Storage="_IsRendered", DbType="Bit")]
			public  override bool? IsRendered {
				get { return _IsRendered; }
				set {
					if (_IsRendered != value) {
						OnIsRenderedChanging(value);
						SendPropertyChanging();
						_IsRendered = value;
						SendPropertyChanged("IsRendered");
						OnIsRenderedChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.Lol")]
 		public partial class Lol : Model.Entities.Lol, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public Lol()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnKChanging(int value);
			partial void OnKChanged();
			private int _K;
			[Column(Storage="_K", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
			public  override int K {
				get { return _K; }
				set {
					if (_K != value) {
						OnKChanging(value);
						SendPropertyChanging();
						_K = value;
						SendPropertyChanged("K");
						OnKChanged();
					}
				}
			}

			partial void OnUsrKChanging(int value);
			partial void OnUsrKChanged();
			private int _UsrK;
			[Column(Storage="_UsrK", DbType="Int", CanBeNull=false)]
			public  override int UsrK {
				get { return _UsrK; }
				set {
					if (_UsrK != value) {
						OnUsrKChanging(value);
						SendPropertyChanging();
						_UsrK = value;
						SendPropertyChanged("UsrK");
						OnUsrKChanged();
					}
				}
			}

			partial void OnCommentKChanging(int value);
			partial void OnCommentKChanged();
			private int _CommentK;
			[Column(Storage="_CommentK", DbType="Int", CanBeNull=false)]
			public  override int CommentK {
				get { return _CommentK; }
				set {
					if (_CommentK != value) {
						OnCommentKChanging(value);
						SendPropertyChanging();
						_CommentK = value;
						SendPropertyChanged("CommentK");
						OnCommentKChanged();
					}
				}
			}

			partial void OnCommentUsrKChanging(int value);
			partial void OnCommentUsrKChanged();
			private int _CommentUsrK;
			[Column(Storage="_CommentUsrK", DbType="Int", CanBeNull=false)]
			public  override int CommentUsrK {
				get { return _CommentUsrK; }
				set {
					if (_CommentUsrK != value) {
						OnCommentUsrKChanging(value);
						SendPropertyChanging();
						_CommentUsrK = value;
						SendPropertyChanged("CommentUsrK");
						OnCommentUsrKChanged();
					}
				}
			}

			partial void OnDateTimeChanging(DateTime value);
			partial void OnDateTimeChanged();
			private DateTime _DateTime;
			[Column(Storage="_DateTime", DbType="DateTime", CanBeNull=false)]
			public  override DateTime DateTime {
				get { return _DateTime; }
				set {
					if (_DateTime != value) {
						OnDateTimeChanging(value);
						SendPropertyChanging();
						_DateTime = value;
						SendPropertyChanged("DateTime");
						OnDateTimeChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.Misc")]
 		public partial class Misc : Model.Entities.Misc, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public Misc()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnKChanging(int value);
			partial void OnKChanged();
			private int _K;
			[Column(Storage="_K", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
			public  override int K {
				get { return _K; }
				set {
					if (_K != value) {
						OnKChanging(value);
						SendPropertyChanging();
						_K = value;
						SendPropertyChanged("K");
						OnKChanged();
					}
				}
			}

			partial void OnGuidChanging(Guid value);
			partial void OnGuidChanged();
			private Guid _Guid;
			[Column(Storage="_Guid", DbType="UniqueIdentifier", CanBeNull=false)]
			public  override Guid Guid {
				get { return _Guid; }
				set {
					if (_Guid != value) {
						OnGuidChanging(value);
						SendPropertyChanging();
						_Guid = value;
						SendPropertyChanged("Guid");
						OnGuidChanged();
					}
				}
			}

			partial void OnExtentionChanging(string value);
			partial void OnExtentionChanged();
			private string _Extention;
			[Column(Storage="_Extention", DbType="VarChar(50)", CanBeNull=false)]
			public  override string Extention {
				get { return _Extention; }
				set {
					if (_Extention != value) {
						OnExtentionChanging(value);
						SendPropertyChanging();
						_Extention = value;
						SendPropertyChanged("Extention");
						OnExtentionChanged();
					}
				}
			}

			partial void OnUsrKChanging(int value);
			partial void OnUsrKChanged();
			private int _UsrK;
			[Column(Storage="_UsrK", DbType="Int", CanBeNull=false)]
			public  override int UsrK {
				get { return _UsrK; }
				set {
					if (_UsrK != value) {
						OnUsrKChanging(value);
						SendPropertyChanging();
						_UsrK = value;
						SendPropertyChanged("UsrK");
						OnUsrKChanged();
					}
				}
			}

			partial void OnPromoterKChanging(int value);
			partial void OnPromoterKChanged();
			private int _PromoterK;
			[Column(Storage="_PromoterK", DbType="Int", CanBeNull=false)]
			public  override int PromoterK {
				get { return _PromoterK; }
				set {
					if (_PromoterK != value) {
						OnPromoterKChanging(value);
						SendPropertyChanging();
						_PromoterK = value;
						SendPropertyChanged("PromoterK");
						OnPromoterKChanged();
					}
				}
			}

			partial void OnSizeChanging(int value);
			partial void OnSizeChanged();
			private int _Size;
			[Column(Storage="_Size", DbType="Int", CanBeNull=false)]
			public  override int Size {
				get { return _Size; }
				set {
					if (_Size != value) {
						OnSizeChanging(value);
						SendPropertyChanging();
						_Size = value;
						SendPropertyChanged("Size");
						OnSizeChanged();
					}
				}
			}

			partial void OnDateTimeChanging(DateTime value);
			partial void OnDateTimeChanged();
			private DateTime _DateTime;
			[Column(Storage="_DateTime", DbType="DateTime", CanBeNull=false)]
			public  override DateTime DateTime {
				get { return _DateTime; }
				set {
					if (_DateTime != value) {
						OnDateTimeChanging(value);
						SendPropertyChanging();
						_DateTime = value;
						SendPropertyChanged("DateTime");
						OnDateTimeChanged();
					}
				}
			}

			partial void OnDateTimeExpiresChanging(DateTime value);
			partial void OnDateTimeExpiresChanged();
			private DateTime _DateTimeExpires;
			[Column(Storage="_DateTimeExpires", DbType="DateTime", CanBeNull=false)]
			public  override DateTime DateTimeExpires {
				get { return _DateTimeExpires; }
				set {
					if (_DateTimeExpires != value) {
						OnDateTimeExpiresChanging(value);
						SendPropertyChanging();
						_DateTimeExpires = value;
						SendPropertyChanged("DateTimeExpires");
						OnDateTimeExpiresChanged();
					}
				}
			}

			partial void OnFolderChanging(string value);
			partial void OnFolderChanged();
			private string _Folder;
			[Column(Storage="_Folder", DbType="VarChar(255)", CanBeNull=false)]
			public  override string Folder {
				get { return _Folder; }
				set {
					if (_Folder != value) {
						OnFolderChanging(value);
						SendPropertyChanging();
						_Folder = value;
						SendPropertyChanged("Folder");
						OnFolderChanged();
					}
				}
			}

			partial void OnNameChanging(string value);
			partial void OnNameChanged();
			private string _Name;
			[Column(Storage="_Name", DbType="VarChar(255)", CanBeNull=false)]
			public  override string Name {
				get { return _Name; }
				set {
					if (_Name != value) {
						OnNameChanging(value);
						SendPropertyChanging();
						_Name = value;
						SendPropertyChanged("Name");
						OnNameChanged();
					}
				}
			}

			partial void OnNoteChanging(string value);
			partial void OnNoteChanged();
			private string _Note;
			[Column(Storage="_Note", DbType="Text", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
			public  override string Note {
				get { return _Note; }
				set {
					if (_Note != value) {
						OnNoteChanging(value);
						SendPropertyChanging();
						_Note = value;
						SendPropertyChanged("Note");
						OnNoteChanged();
					}
				}
			}

			partial void OnXmlChanging(string value);
			partial void OnXmlChanged();
			private string _Xml;
			[Column(Storage="_Xml", DbType="Text", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
			public  override string Xml {
				get { return _Xml; }
				set {
					if (_Xml != value) {
						OnXmlChanging(value);
						SendPropertyChanging();
						_Xml = value;
						SendPropertyChanged("Xml");
						OnXmlChanged();
					}
				}
			}

			partial void OnNeedsAuthChanging(bool value);
			partial void OnNeedsAuthChanged();
			private bool _NeedsAuth;
			[Column(Storage="_NeedsAuth", DbType="Bit", CanBeNull=false)]
			public  override bool NeedsAuth {
				get { return _NeedsAuth; }
				set {
					if (_NeedsAuth != value) {
						OnNeedsAuthChanging(value);
						SendPropertyChanging();
						_NeedsAuth = value;
						SendPropertyChanged("NeedsAuth");
						OnNeedsAuthChanged();
					}
				}
			}

			partial void OnBannerLinkTagChanging(bool value);
			partial void OnBannerLinkTagChanged();
			private bool _BannerLinkTag;
			[Column(Storage="_BannerLinkTag", DbType="Bit", CanBeNull=false)]
			public  override bool BannerLinkTag {
				get { return _BannerLinkTag; }
				set {
					if (_BannerLinkTag != value) {
						OnBannerLinkTagChanging(value);
						SendPropertyChanging();
						_BannerLinkTag = value;
						SendPropertyChanged("BannerLinkTag");
						OnBannerLinkTagChanged();
					}
				}
			}

			partial void OnBannerTargetTagChanging(bool value);
			partial void OnBannerTargetTagChanged();
			private bool _BannerTargetTag;
			[Column(Storage="_BannerTargetTag", DbType="Bit", CanBeNull=false)]
			public  override bool BannerTargetTag {
				get { return _BannerTargetTag; }
				set {
					if (_BannerTargetTag != value) {
						OnBannerTargetTagChanging(value);
						SendPropertyChanging();
						_BannerTargetTag = value;
						SendPropertyChanged("BannerTargetTag");
						OnBannerTargetTagChanged();
					}
				}
			}

			partial void OnWidthChanging(int value);
			partial void OnWidthChanged();
			private int _Width;
			[Column(Storage="_Width", DbType="Int", CanBeNull=false)]
			public  override int Width {
				get { return _Width; }
				set {
					if (_Width != value) {
						OnWidthChanging(value);
						SendPropertyChanging();
						_Width = value;
						SendPropertyChanged("Width");
						OnWidthChanged();
					}
				}
			}

			partial void OnHeightChanging(int value);
			partial void OnHeightChanged();
			private int _Height;
			[Column(Storage="_Height", DbType="Int", CanBeNull=false)]
			public  override int Height {
				get { return _Height; }
				set {
					if (_Height != value) {
						OnHeightChanging(value);
						SendPropertyChanging();
						_Height = value;
						SendPropertyChanged("Height");
						OnHeightChanged();
					}
				}
			}

			partial void OnRequiredFlashVersionChanging(string value);
			partial void OnRequiredFlashVersionChanged();
			private string _RequiredFlashVersion;
			[Column(Storage="_RequiredFlashVersion", DbType="VarChar(15)", CanBeNull=false)]
			public  override string RequiredFlashVersion {
				get { return _RequiredFlashVersion; }
				set {
					if (_RequiredFlashVersion != value) {
						OnRequiredFlashVersionChanging(value);
						SendPropertyChanging();
						_RequiredFlashVersion = value;
						SendPropertyChanged("RequiredFlashVersion");
						OnRequiredFlashVersionChanged();
					}
				}
			}

			partial void OnBannerBrokenChanging(bool value);
			partial void OnBannerBrokenChanged();
			private bool _BannerBroken;
			[Column(Storage="_BannerBroken", DbType="Bit", CanBeNull=false)]
			public  override bool BannerBroken {
				get { return _BannerBroken; }
				set {
					if (_BannerBroken != value) {
						OnBannerBrokenChanging(value);
						SendPropertyChanging();
						_BannerBroken = value;
						SendPropertyChanged("BannerBroken");
						OnBannerBrokenChanged();
					}
				}
			}

			partial void OnBannerBrokenReasonChanging(string value);
			partial void OnBannerBrokenReasonChanged();
			private string _BannerBrokenReason;
			[Column(Storage="_BannerBrokenReason", DbType="VarChar(50)", CanBeNull=false)]
			public  override string BannerBrokenReason {
				get { return _BannerBrokenReason; }
				set {
					if (_BannerBrokenReason != value) {
						OnBannerBrokenReasonChanging(value);
						SendPropertyChanging();
						_BannerBrokenReason = value;
						SendPropertyChanged("BannerBrokenReason");
						OnBannerBrokenReasonChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.MixmagEntry")]
 		public partial class MixmagEntry : Model.Entities.MixmagEntry, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public MixmagEntry()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnKChanging(int value);
			partial void OnKChanged();
			private int _K;
			[Column(Storage="_K", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
			public  override int K {
				get { return _K; }
				set {
					if (_K != value) {
						OnKChanging(value);
						SendPropertyChanging();
						_K = value;
						SendPropertyChanged("K");
						OnKChanged();
					}
				}
			}

			partial void OnMixmagCompKChanging(int value);
			partial void OnMixmagCompKChanged();
			private int _MixmagCompK;
			[Column(Storage="_MixmagCompK", DbType="Int NOT NULL", CanBeNull=false)]
			public  override int MixmagCompK {
				get { return _MixmagCompK; }
				set {
					if (_MixmagCompK != value) {
						OnMixmagCompKChanging(value);
						SendPropertyChanging();
						_MixmagCompK = value;
						SendPropertyChanged("MixmagCompK");
						OnMixmagCompKChanged();
					}
				}
			}

			partial void OnFacebookUidChanging(long? value);
			partial void OnFacebookUidChanged();
			private long? _FacebookUid;
			[Column(Storage="_FacebookUid", DbType="BigInt")]
			public  override long? FacebookUid {
				get { return _FacebookUid; }
				set {
					if (_FacebookUid != value) {
						OnFacebookUidChanging(value);
						SendPropertyChanging();
						_FacebookUid = value;
						SendPropertyChanged("FacebookUid");
						OnFacebookUidChanged();
					}
				}
			}

			partial void OnDateTimeChanging(DateTime? value);
			partial void OnDateTimeChanged();
			private DateTime? _DateTime;
			[Column(Storage="_DateTime", DbType="DateTime")]
			public  override DateTime? DateTime {
				get { return _DateTime; }
				set {
					if (_DateTime != value) {
						OnDateTimeChanging(value);
						SendPropertyChanging();
						_DateTime = value;
						SendPropertyChanged("DateTime");
						OnDateTimeChanged();
					}
				}
			}

			partial void OnImageUrlChanging(string value);
			partial void OnImageUrlChanged();
			private string _ImageUrl;
			[Column(Storage="_ImageUrl", DbType="VarChar(500)")]
			public  override string ImageUrl {
				get { return _ImageUrl; }
				set {
					if (_ImageUrl != value) {
						OnImageUrlChanging(value);
						SendPropertyChanging();
						_ImageUrl = value;
						SendPropertyChanged("ImageUrl");
						OnImageUrlChanged();
					}
				}
			}

			partial void OnEmailChanging(string value);
			partial void OnEmailChanged();
			private string _Email;
			[Column(Storage="_Email", DbType="VarChar(255)")]
			public  override string Email {
				get { return _Email; }
				set {
					if (_Email != value) {
						OnEmailChanging(value);
						SendPropertyChanging();
						_Email = value;
						SendPropertyChanged("Email");
						OnEmailChanged();
					}
				}
			}

			partial void OnFirstNameChanging(string value);
			partial void OnFirstNameChanged();
			private string _FirstName;
			[Column(Storage="_FirstName", DbType="VarChar(255)")]
			public  override string FirstName {
				get { return _FirstName; }
				set {
					if (_FirstName != value) {
						OnFirstNameChanging(value);
						SendPropertyChanging();
						_FirstName = value;
						SendPropertyChanged("FirstName");
						OnFirstNameChanged();
					}
				}
			}

			partial void OnLastNameChanging(string value);
			partial void OnLastNameChanged();
			private string _LastName;
			[Column(Storage="_LastName", DbType="VarChar(255)")]
			public  override string LastName {
				get { return _LastName; }
				set {
					if (_LastName != value) {
						OnLastNameChanging(value);
						SendPropertyChanging();
						_LastName = value;
						SendPropertyChanged("LastName");
						OnLastNameChanged();
					}
				}
			}

			partial void OnSendDailyEmailsChanging(bool value);
			partial void OnSendDailyEmailsChanged();
			private bool _SendDailyEmails;
			[Column(Storage="_SendDailyEmails", DbType="Bit NOT NULL", CanBeNull=false)]
			public  override bool SendDailyEmails {
				get { return _SendDailyEmails; }
				set {
					if (_SendDailyEmails != value) {
						OnSendDailyEmailsChanging(value);
						SendPropertyChanging();
						_SendDailyEmails = value;
						SendPropertyChanged("SendDailyEmails");
						OnSendDailyEmailsChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.MixmagGreatestDj")]
 		public partial class MixmagGreatestDj : Model.Entities.MixmagGreatestDj, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public MixmagGreatestDj()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnKChanging(int value);
			partial void OnKChanged();
			private int _K;
			[Column(Storage="_K", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
			public  override int K {
				get { return _K; }
				set {
					if (_K != value) {
						OnKChanging(value);
						SendPropertyChanging();
						_K = value;
						SendPropertyChanged("K");
						OnKChanged();
					}
				}
			}

			partial void OnUrlNameChanging(string value);
			partial void OnUrlNameChanged();
			private string _UrlName;
			[Column(Storage="_UrlName", DbType="VarChar(255)")]
			public  override string UrlName {
				get { return _UrlName; }
				set {
					if (_UrlName != value) {
						OnUrlNameChanging(value);
						SendPropertyChanging();
						_UrlName = value;
						SendPropertyChanged("UrlName");
						OnUrlNameChanged();
					}
				}
			}

			partial void OnNameChanging(string value);
			partial void OnNameChanged();
			private string _Name;
			[Column(Storage="_Name", DbType="VarChar(255)")]
			public  override string Name {
				get { return _Name; }
				set {
					if (_Name != value) {
						OnNameChanging(value);
						SendPropertyChanging();
						_Name = value;
						SendPropertyChanged("Name");
						OnNameChanged();
					}
				}
			}

			partial void OnImageUrlChanging(string value);
			partial void OnImageUrlChanged();
			private string _ImageUrl;
			[Column(Storage="_ImageUrl", DbType="VarChar(255)")]
			public  override string ImageUrl {
				get { return _ImageUrl; }
				set {
					if (_ImageUrl != value) {
						OnImageUrlChanging(value);
						SendPropertyChanging();
						_ImageUrl = value;
						SendPropertyChanged("ImageUrl");
						OnImageUrlChanged();
					}
				}
			}

			partial void OnYoutubeIdChanging(string value);
			partial void OnYoutubeIdChanged();
			private string _YoutubeId;
			[Column(Storage="_YoutubeId", DbType="VarChar(255)")]
			public  override string YoutubeId {
				get { return _YoutubeId; }
				set {
					if (_YoutubeId != value) {
						OnYoutubeIdChanging(value);
						SendPropertyChanging();
						_YoutubeId = value;
						SendPropertyChanged("YoutubeId");
						OnYoutubeIdChanged();
					}
				}
			}

			partial void OnDescriptionChanging(string value);
			partial void OnDescriptionChanged();
			private string _Description;
			[Column(Storage="_Description", DbType="Text", UpdateCheck=UpdateCheck.Never)]
			public  override string Description {
				get { return _Description; }
				set {
					if (_Description != value) {
						OnDescriptionChanging(value);
						SendPropertyChanging();
						_Description = value;
						SendPropertyChanged("Description");
						OnDescriptionChanged();
					}
				}
			}

			partial void OnLongDescriptionChanging(string value);
			partial void OnLongDescriptionChanged();
			private string _LongDescription;
			[Column(Storage="_LongDescription", DbType="Text", UpdateCheck=UpdateCheck.Never)]
			public  override string LongDescription {
				get { return _LongDescription; }
				set {
					if (_LongDescription != value) {
						OnLongDescriptionChanging(value);
						SendPropertyChanging();
						_LongDescription = value;
						SendPropertyChanged("LongDescription");
						OnLongDescriptionChanged();
					}
				}
			}

			partial void OnShortDescriptionChanging(string value);
			partial void OnShortDescriptionChanged();
			private string _ShortDescription;
			[Column(Storage="_ShortDescription", DbType="Text", UpdateCheck=UpdateCheck.Never)]
			public  override string ShortDescription {
				get { return _ShortDescription; }
				set {
					if (_ShortDescription != value) {
						OnShortDescriptionChanging(value);
						SendPropertyChanging();
						_ShortDescription = value;
						SendPropertyChanged("ShortDescription");
						OnShortDescriptionChanged();
					}
				}
			}

			partial void OnLargeImageUrlChanging(string value);
			partial void OnLargeImageUrlChanged();
			private string _LargeImageUrl;
			[Column(Storage="_LargeImageUrl", DbType="VarChar(200)")]
			public  override string LargeImageUrl {
				get { return _LargeImageUrl; }
				set {
					if (_LargeImageUrl != value) {
						OnLargeImageUrlChanging(value);
						SendPropertyChanging();
						_LargeImageUrl = value;
						SendPropertyChanged("LargeImageUrl");
						OnLargeImageUrlChanged();
					}
				}
			}

			partial void OnInterviewImageUrlChanging(string value);
			partial void OnInterviewImageUrlChanged();
			private string _InterviewImageUrl;
			[Column(Storage="_InterviewImageUrl", DbType="VarChar(200)")]
			public  override string InterviewImageUrl {
				get { return _InterviewImageUrl; }
				set {
					if (_InterviewImageUrl != value) {
						OnInterviewImageUrlChanging(value);
						SendPropertyChanging();
						_InterviewImageUrl = value;
						SendPropertyChanged("InterviewImageUrl");
						OnInterviewImageUrlChanged();
					}
				}
			}

			partial void OnTwitterNameChanging(string value);
			partial void OnTwitterNameChanged();
			private string _TwitterName;
			[Column(Storage="_TwitterName", DbType="VarChar(255)")]
			public  override string TwitterName {
				get { return _TwitterName; }
				set {
					if (_TwitterName != value) {
						OnTwitterNameChanging(value);
						SendPropertyChanging();
						_TwitterName = value;
						SendPropertyChanged("TwitterName");
						OnTwitterNameChanged();
					}
				}
			}

			partial void OnYoutubeId2Changing(string value);
			partial void OnYoutubeId2Changed();
			private string _YoutubeId2;
			[Column(Storage="_YoutubeId2", DbType="VarChar(255)")]
			public  override string YoutubeId2 {
				get { return _YoutubeId2; }
				set {
					if (_YoutubeId2 != value) {
						OnYoutubeId2Changing(value);
						SendPropertyChanging();
						_YoutubeId2 = value;
						SendPropertyChanged("YoutubeId2");
						OnYoutubeId2Changed();
					}
				}
			}

			partial void OnTotalVotesChanging(int? value);
			partial void OnTotalVotesChanged();
			private int? _TotalVotes;
			[Column(Storage="_TotalVotes", DbType="Int")]
			public  override int? TotalVotes {
				get { return _TotalVotes; }
				set {
					if (_TotalVotes != value) {
						OnTotalVotesChanging(value);
						SendPropertyChanging();
						_TotalVotes = value;
						SendPropertyChanged("TotalVotes");
						OnTotalVotesChanged();
					}
				}
			}

			partial void OnIsPublicNominatedChanging(bool? value);
			partial void OnIsPublicNominatedChanged();
			private bool? _IsPublicNominated;
			[Column(Storage="_IsPublicNominated", DbType="Bit")]
			public  override bool? IsPublicNominated {
				get { return _IsPublicNominated; }
				set {
					if (_IsPublicNominated != value) {
						OnIsPublicNominatedChanging(value);
						SendPropertyChanging();
						_IsPublicNominated = value;
						SendPropertyChanged("IsPublicNominated");
						OnIsPublicNominatedChanged();
					}
				}
			}

			partial void OnPluralWordChanging(string value);
			partial void OnPluralWordChanged();
			private string _PluralWord;
			[Column(Storage="_PluralWord", DbType="VarChar(255)")]
			public  override string PluralWord {
				get { return _PluralWord; }
				set {
					if (_PluralWord != value) {
						OnPluralWordChanging(value);
						SendPropertyChanging();
						_PluralWord = value;
						SendPropertyChanged("PluralWord");
						OnPluralWordChanged();
					}
				}
			}

			partial void OnShortNameChanging(string value);
			partial void OnShortNameChanged();
			private string _ShortName;
			[Column(Storage="_ShortName", DbType="VarChar(255)")]
			public  override string ShortName {
				get { return _ShortName; }
				set {
					if (_ShortName != value) {
						OnShortNameChanging(value);
						SendPropertyChanging();
						_ShortName = value;
						SendPropertyChanged("ShortName");
						OnShortNameChanged();
					}
				}
			}

			partial void OnStealthModeChanging(bool value);
			partial void OnStealthModeChanged();
			private bool _StealthMode;
			[Column(Storage="_StealthMode", DbType="Bit NOT NULL", CanBeNull=false)]
			public  override bool StealthMode {
				get { return _StealthMode; }
				set {
					if (_StealthMode != value) {
						OnStealthModeChanging(value);
						SendPropertyChanging();
						_StealthMode = value;
						SendPropertyChanged("StealthMode");
						OnStealthModeChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.MixmagGreatestVote")]
 		public partial class MixmagGreatestVote : Model.Entities.MixmagGreatestVote, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public MixmagGreatestVote()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnFacebookUidChanging(long value);
			partial void OnFacebookUidChanged();
			private long _FacebookUid;
			[Column(Storage="_FacebookUid", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
			public  override long FacebookUid {
				get { return _FacebookUid; }
				set {
					if (_FacebookUid != value) {
						OnFacebookUidChanging(value);
						SendPropertyChanging();
						_FacebookUid = value;
						SendPropertyChanged("FacebookUid");
						OnFacebookUidChanged();
					}
				}
			}

			partial void OnMixmagGreatestDjKChanging(int value);
			partial void OnMixmagGreatestDjKChanged();
			private int _MixmagGreatestDjK;
			[Column(Storage="_MixmagGreatestDjK", DbType="Int NOT NULL", CanBeNull=false)]
			public  override int MixmagGreatestDjK {
				get { return _MixmagGreatestDjK; }
				set {
					if (_MixmagGreatestDjK != value) {
						OnMixmagGreatestDjKChanging(value);
						SendPropertyChanging();
						_MixmagGreatestDjK = value;
						SendPropertyChanged("MixmagGreatestDjK");
						OnMixmagGreatestDjKChanged();
					}
				}
			}

			partial void OnDateTimeChanging(DateTime? value);
			partial void OnDateTimeChanged();
			private DateTime? _DateTime;
			[Column(Storage="_DateTime", DbType="DateTime")]
			public  override DateTime? DateTime {
				get { return _DateTime; }
				set {
					if (_DateTime != value) {
						OnDateTimeChanging(value);
						SendPropertyChanging();
						_DateTime = value;
						SendPropertyChanged("DateTime");
						OnDateTimeChanged();
					}
				}
			}

			partial void OnDidWallPostChanging(bool? value);
			partial void OnDidWallPostChanged();
			private bool? _DidWallPost;
			[Column(Storage="_DidWallPost", DbType="Bit")]
			public  override bool? DidWallPost {
				get { return _DidWallPost; }
				set {
					if (_DidWallPost != value) {
						OnDidWallPostChanging(value);
						SendPropertyChanging();
						_DidWallPost = value;
						SendPropertyChanged("DidWallPost");
						OnDidWallPostChanged();
					}
				}
			}

			partial void OnFacebookEmailChanging(string value);
			partial void OnFacebookEmailChanged();
			private string _FacebookEmail;
			[Column(Storage="_FacebookEmail", DbType="VarChar(255)")]
			public  override string FacebookEmail {
				get { return _FacebookEmail; }
				set {
					if (_FacebookEmail != value) {
						OnFacebookEmailChanging(value);
						SendPropertyChanging();
						_FacebookEmail = value;
						SendPropertyChanged("FacebookEmail");
						OnFacebookEmailChanged();
					}
				}
			}

			partial void OnWallPostPermissionChanging(bool? value);
			partial void OnWallPostPermissionChanged();
			private bool? _WallPostPermission;
			[Column(Storage="_WallPostPermission", DbType="Bit")]
			public  override bool? WallPostPermission {
				get { return _WallPostPermission; }
				set {
					if (_WallPostPermission != value) {
						OnWallPostPermissionChanging(value);
						SendPropertyChanging();
						_WallPostPermission = value;
						SendPropertyChanged("WallPostPermission");
						OnWallPostPermissionChanged();
					}
				}
			}

			partial void OnEmailPermissionChanging(bool? value);
			partial void OnEmailPermissionChanged();
			private bool? _EmailPermission;
			[Column(Storage="_EmailPermission", DbType="Bit")]
			public  override bool? EmailPermission {
				get { return _EmailPermission; }
				set {
					if (_EmailPermission != value) {
						OnEmailPermissionChanging(value);
						SendPropertyChanging();
						_EmailPermission = value;
						SendPropertyChanged("EmailPermission");
						OnEmailPermissionChanged();
					}
				}
			}

			partial void OnFacebookSourceChanging(bool? value);
			partial void OnFacebookSourceChanged();
			private bool? _FacebookSource;
			[Column(Storage="_FacebookSource", DbType="Bit")]
			public  override bool? FacebookSource {
				get { return _FacebookSource; }
				set {
					if (_FacebookSource != value) {
						OnFacebookSourceChanging(value);
						SendPropertyChanging();
						_FacebookSource = value;
						SendPropertyChanged("FacebookSource");
						OnFacebookSourceChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.MixmagIssue")]
 		public partial class MixmagIssue : Model.Entities.MixmagIssue, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public MixmagIssue()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnKChanging(int value);
			partial void OnKChanged();
			private int _K;
			[Column(Storage="_K", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
			public  override int K {
				get { return _K; }
				set {
					if (_K != value) {
						OnKChanging(value);
						SendPropertyChanging();
						_K = value;
						SendPropertyChanged("K");
						OnKChanged();
					}
				}
			}

			partial void OnCerosUrlChanging(string value);
			partial void OnCerosUrlChanged();
			private string _CerosUrl;
			[Column(Storage="_CerosUrl", DbType="VarChar(255)")]
			public  override string CerosUrl {
				get { return _CerosUrl; }
				set {
					if (_CerosUrl != value) {
						OnCerosUrlChanging(value);
						SendPropertyChanging();
						_CerosUrl = value;
						SendPropertyChanged("CerosUrl");
						OnCerosUrlChanged();
					}
				}
			}

			partial void OnReadyChanging(bool? value);
			partial void OnReadyChanged();
			private bool? _Ready;
			[Column(Storage="_Ready", DbType="Bit")]
			public  override bool? Ready {
				get { return _Ready; }
				set {
					if (_Ready != value) {
						OnReadyChanging(value);
						SendPropertyChanging();
						_Ready = value;
						SendPropertyChanged("Ready");
						OnReadyChanged();
					}
				}
			}

			partial void OnDateTimeSendChanging(DateTime? value);
			partial void OnDateTimeSendChanged();
			private DateTime? _DateTimeSend;
			[Column(Storage="_DateTimeSend", DbType="DateTime")]
			public  override DateTime? DateTimeSend {
				get { return _DateTimeSend; }
				set {
					if (_DateTimeSend != value) {
						OnDateTimeSendChanging(value);
						SendPropertyChanging();
						_DateTimeSend = value;
						SendPropertyChanged("DateTimeSend");
						OnDateTimeSendChanged();
					}
				}
			}

			partial void OnIssueCoverDateChanging(DateTime? value);
			partial void OnIssueCoverDateChanged();
			private DateTime? _IssueCoverDate;
			[Column(Storage="_IssueCoverDate", DbType="DateTime")]
			public  override DateTime? IssueCoverDate {
				get { return _IssueCoverDate; }
				set {
					if (_IssueCoverDate != value) {
						OnIssueCoverDateChanging(value);
						SendPropertyChanging();
						_IssueCoverDate = value;
						SendPropertyChanged("IssueCoverDate");
						OnIssueCoverDateChanged();
					}
				}
			}

			partial void OnTotalSentChanging(int? value);
			partial void OnTotalSentChanged();
			private int? _TotalSent;
			[Column(Storage="_TotalSent", DbType="Int")]
			public  override int? TotalSent {
				get { return _TotalSent; }
				set {
					if (_TotalSent != value) {
						OnTotalSentChanging(value);
						SendPropertyChanging();
						_TotalSent = value;
						SendPropertyChanged("TotalSent");
						OnTotalSentChanged();
					}
				}
			}

			partial void OnTotalReadChanging(int? value);
			partial void OnTotalReadChanged();
			private int? _TotalRead;
			[Column(Storage="_TotalRead", DbType="Int")]
			public  override int? TotalRead {
				get { return _TotalRead; }
				set {
					if (_TotalRead != value) {
						OnTotalReadChanging(value);
						SendPropertyChanging();
						_TotalRead = value;
						SendPropertyChanged("TotalRead");
						OnTotalReadChanged();
					}
				}
			}

			partial void OnSendingNowChanging(bool? value);
			partial void OnSendingNowChanged();
			private bool? _SendingNow;
			[Column(Storage="_SendingNow", DbType="Bit")]
			public  override bool? SendingNow {
				get { return _SendingNow; }
				set {
					if (_SendingNow != value) {
						OnSendingNowChanging(value);
						SendPropertyChanging();
						_SendingNow = value;
						SendPropertyChanged("SendingNow");
						OnSendingNowChanged();
					}
				}
			}

			partial void OnSendingFinishedChanging(bool? value);
			partial void OnSendingFinishedChanged();
			private bool? _SendingFinished;
			[Column(Storage="_SendingFinished", DbType="Bit")]
			public  override bool? SendingFinished {
				get { return _SendingFinished; }
				set {
					if (_SendingFinished != value) {
						OnSendingFinishedChanging(value);
						SendPropertyChanging();
						_SendingFinished = value;
						SendPropertyChanged("SendingFinished");
						OnSendingFinishedChanged();
					}
				}
			}

			partial void OnLastSendDateTimeChanging(DateTime? value);
			partial void OnLastSendDateTimeChanged();
			private DateTime? _LastSendDateTime;
			[Column(Storage="_LastSendDateTime", DbType="DateTime")]
			public  override DateTime? LastSendDateTime {
				get { return _LastSendDateTime; }
				set {
					if (_LastSendDateTime != value) {
						OnLastSendDateTimeChanging(value);
						SendPropertyChanging();
						_LastSendDateTime = value;
						SendPropertyChanged("LastSendDateTime");
						OnLastSendDateTimeChanged();
					}
				}
			}

			partial void OnSummaryChanging(string value);
			partial void OnSummaryChanged();
			private string _Summary;
			[Column(Storage="_Summary", DbType="VarChar(255)")]
			public  override string Summary {
				get { return _Summary; }
				set {
					if (_Summary != value) {
						OnSummaryChanging(value);
						SendPropertyChanging();
						_Summary = value;
						SendPropertyChanged("Summary");
						OnSummaryChanged();
					}
				}
			}

			partial void OnCoverImageUrlChanging(string value);
			partial void OnCoverImageUrlChanged();
			private string _CoverImageUrl;
			[Column(Storage="_CoverImageUrl", DbType="VarChar(255)")]
			public  override string CoverImageUrl {
				get { return _CoverImageUrl; }
				set {
					if (_CoverImageUrl != value) {
						OnCoverImageUrlChanging(value);
						SendPropertyChanging();
						_CoverImageUrl = value;
						SendPropertyChanged("CoverImageUrl");
						OnCoverImageUrlChanged();
					}
				}
			}

			partial void OnContentsDataChanging(string value);
			partial void OnContentsDataChanged();
			private string _ContentsData;
			[Column(Storage="_ContentsData", DbType="Text", UpdateCheck=UpdateCheck.Never)]
			public  override string ContentsData {
				get { return _ContentsData; }
				set {
					if (_ContentsData != value) {
						OnContentsDataChanging(value);
						SendPropertyChanging();
						_ContentsData = value;
						SendPropertyChanged("ContentsData");
						OnContentsDataChanged();
					}
				}
			}

			partial void OnIssueNoteChanging(string value);
			partial void OnIssueNoteChanged();
			private string _IssueNote;
			[Column(Storage="_IssueNote", DbType="VarChar(1000)")]
			public  override string IssueNote {
				get { return _IssueNote; }
				set {
					if (_IssueNote != value) {
						OnIssueNoteChanging(value);
						SendPropertyChanging();
						_IssueNote = value;
						SendPropertyChanged("IssueNote");
						OnIssueNoteChanged();
					}
				}
			}

			partial void OnIssueCoverIdChanging(int? value);
			partial void OnIssueCoverIdChanged();
			private int? _IssueCoverId;
			[Column(Storage="_IssueCoverId", DbType="Int")]
			public  override int? IssueCoverId {
				get { return _IssueCoverId; }
				set {
					if (_IssueCoverId != value) {
						OnIssueCoverIdChanging(value);
						SendPropertyChanging();
						_IssueCoverId = value;
						SendPropertyChanged("IssueCoverId");
						OnIssueCoverIdChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.MixmagRead")]
 		public partial class MixmagRead : Model.Entities.MixmagRead, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public MixmagRead()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnMixmagSubscriberKChanging(int value);
			partial void OnMixmagSubscriberKChanged();
			private int _MixmagSubscriberK;
			[Column(Storage="_MixmagSubscriberK", DbType="Int NOT NULL", IsPrimaryKey=true)]
			public  override int MixmagSubscriberK {
				get { return _MixmagSubscriberK; }
				set {
					if (_MixmagSubscriberK != value) {
						OnMixmagSubscriberKChanging(value);
						SendPropertyChanging();
						_MixmagSubscriberK = value;
						SendPropertyChanged("MixmagSubscriberK");
						OnMixmagSubscriberKChanged();
					}
				}
			}

			partial void OnMixmagIssueKChanging(int value);
			partial void OnMixmagIssueKChanged();
			private int _MixmagIssueK;
			[Column(Storage="_MixmagIssueK", DbType="Int NOT NULL", IsPrimaryKey=true)]
			public  override int MixmagIssueK {
				get { return _MixmagIssueK; }
				set {
					if (_MixmagIssueK != value) {
						OnMixmagIssueKChanging(value);
						SendPropertyChanging();
						_MixmagIssueK = value;
						SendPropertyChanged("MixmagIssueK");
						OnMixmagIssueKChanged();
					}
				}
			}

			partial void OnDateTimeReadChanging(DateTime? value);
			partial void OnDateTimeReadChanged();
			private DateTime? _DateTimeRead;
			[Column(Storage="_DateTimeRead", DbType="DateTime")]
			public  override DateTime? DateTimeRead {
				get { return _DateTimeRead; }
				set {
					if (_DateTimeRead != value) {
						OnDateTimeReadChanging(value);
						SendPropertyChanging();
						_DateTimeRead = value;
						SendPropertyChanged("DateTimeRead");
						OnDateTimeReadChanged();
					}
				}
			}

			partial void OnStoryPublishedChanging(bool? value);
			partial void OnStoryPublishedChanged();
			private bool? _StoryPublished;
			[Column(Storage="_StoryPublished", DbType="Bit")]
			public  override bool? StoryPublished {
				get { return _StoryPublished; }
				set {
					if (_StoryPublished != value) {
						OnStoryPublishedChanging(value);
						SendPropertyChanging();
						_StoryPublished = value;
						SendPropertyChanged("StoryPublished");
						OnStoryPublishedChanged();
					}
				}
			}

			partial void OnDateTimeLastReadChanging(DateTime? value);
			partial void OnDateTimeLastReadChanged();
			private DateTime? _DateTimeLastRead;
			[Column(Storage="_DateTimeLastRead", DbType="DateTime")]
			public  override DateTime? DateTimeLastRead {
				get { return _DateTimeLastRead; }
				set {
					if (_DateTimeLastRead != value) {
						OnDateTimeLastReadChanging(value);
						SendPropertyChanging();
						_DateTimeLastRead = value;
						SendPropertyChanged("DateTimeLastRead");
						OnDateTimeLastReadChanged();
					}
				}
			}

			partial void OnTotalReadsChanging(int? value);
			partial void OnTotalReadsChanged();
			private int? _TotalReads;
			[Column(Storage="_TotalReads", DbType="Int")]
			public  override int? TotalReads {
				get { return _TotalReads; }
				set {
					if (_TotalReads != value) {
						OnTotalReadsChanging(value);
						SendPropertyChanging();
						_TotalReads = value;
						SendPropertyChanged("TotalReads");
						OnTotalReadsChanged();
					}
				}
			}

			partial void OnDateTimeLastStoryPublishedChanging(DateTime? value);
			partial void OnDateTimeLastStoryPublishedChanged();
			private DateTime? _DateTimeLastStoryPublished;
			[Column(Storage="_DateTimeLastStoryPublished", DbType="DateTime")]
			public  override DateTime? DateTimeLastStoryPublished {
				get { return _DateTimeLastStoryPublished; }
				set {
					if (_DateTimeLastStoryPublished != value) {
						OnDateTimeLastStoryPublishedChanging(value);
						SendPropertyChanging();
						_DateTimeLastStoryPublished = value;
						SendPropertyChanged("DateTimeLastStoryPublished");
						OnDateTimeLastStoryPublishedChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.MixmagSubscription")]
 		public partial class MixmagSubscription : Model.Entities.MixmagSubscription, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public MixmagSubscription()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnKChanging(int value);
			partial void OnKChanged();
			private int _K;
			[Column(Storage="_K", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
			public  override int K {
				get { return _K; }
				set {
					if (_K != value) {
						OnKChanging(value);
						SendPropertyChanging();
						_K = value;
						SendPropertyChanged("K");
						OnKChanged();
					}
				}
			}

			partial void OnFacebookUIDChanging(long value);
			partial void OnFacebookUIDChanged();
			private long _FacebookUID;
			[Column(Storage="_FacebookUID", DbType="BigInt NOT NULL", CanBeNull=false)]
			public  override long FacebookUID {
				get { return _FacebookUID; }
				set {
					if (_FacebookUID != value) {
						OnFacebookUIDChanging(value);
						SendPropertyChanging();
						_FacebookUID = value;
						SendPropertyChanged("FacebookUID");
						OnFacebookUIDChanged();
					}
				}
			}

			partial void OnFacebookPermissionEmailChanging(bool? value);
			partial void OnFacebookPermissionEmailChanged();
			private bool? _FacebookPermissionEmail;
			[Column(Storage="_FacebookPermissionEmail", DbType="Bit")]
			public  override bool? FacebookPermissionEmail {
				get { return _FacebookPermissionEmail; }
				set {
					if (_FacebookPermissionEmail != value) {
						OnFacebookPermissionEmailChanging(value);
						SendPropertyChanging();
						_FacebookPermissionEmail = value;
						SendPropertyChanged("FacebookPermissionEmail");
						OnFacebookPermissionEmailChanged();
					}
				}
			}

			partial void OnFacebookPermissionPublishChanging(bool? value);
			partial void OnFacebookPermissionPublishChanged();
			private bool? _FacebookPermissionPublish;
			[Column(Storage="_FacebookPermissionPublish", DbType="Bit")]
			public  override bool? FacebookPermissionPublish {
				get { return _FacebookPermissionPublish; }
				set {
					if (_FacebookPermissionPublish != value) {
						OnFacebookPermissionPublishChanging(value);
						SendPropertyChanging();
						_FacebookPermissionPublish = value;
						SendPropertyChanged("FacebookPermissionPublish");
						OnFacebookPermissionPublishChanged();
					}
				}
			}

			partial void OnDateTimeCreatedChanging(DateTime? value);
			partial void OnDateTimeCreatedChanged();
			private DateTime? _DateTimeCreated;
			[Column(Storage="_DateTimeCreated", DbType="DateTime")]
			public  override DateTime? DateTimeCreated {
				get { return _DateTimeCreated; }
				set {
					if (_DateTimeCreated != value) {
						OnDateTimeCreatedChanging(value);
						SendPropertyChanging();
						_DateTimeCreated = value;
						SendPropertyChanged("DateTimeCreated");
						OnDateTimeCreatedChanged();
					}
				}
			}

			partial void OnSendMixmagChanging(bool? value);
			partial void OnSendMixmagChanged();
			private bool? _SendMixmag;
			[Column(Storage="_SendMixmag", DbType="Bit")]
			public  override bool? SendMixmag {
				get { return _SendMixmag; }
				set {
					if (_SendMixmag != value) {
						OnSendMixmagChanging(value);
						SendPropertyChanging();
						_SendMixmag = value;
						SendPropertyChanged("SendMixmag");
						OnSendMixmagChanged();
					}
				}
			}

			partial void OnPublishStoryOnReadChanging(bool? value);
			partial void OnPublishStoryOnReadChanged();
			private bool? _PublishStoryOnRead;
			[Column(Storage="_PublishStoryOnRead", DbType="Bit")]
			public  override bool? PublishStoryOnRead {
				get { return _PublishStoryOnRead; }
				set {
					if (_PublishStoryOnRead != value) {
						OnPublishStoryOnReadChanging(value);
						SendPropertyChanging();
						_PublishStoryOnRead = value;
						SendPropertyChanged("PublishStoryOnRead");
						OnPublishStoryOnReadChanged();
					}
				}
			}

			partial void OnTotalSentChanging(int? value);
			partial void OnTotalSentChanged();
			private int? _TotalSent;
			[Column(Storage="_TotalSent", DbType="Int")]
			public  override int? TotalSent {
				get { return _TotalSent; }
				set {
					if (_TotalSent != value) {
						OnTotalSentChanging(value);
						SendPropertyChanging();
						_TotalSent = value;
						SendPropertyChanged("TotalSent");
						OnTotalSentChanged();
					}
				}
			}

			partial void OnTotalReadChanging(int? value);
			partial void OnTotalReadChanged();
			private int? _TotalRead;
			[Column(Storage="_TotalRead", DbType="Int")]
			public  override int? TotalRead {
				get { return _TotalRead; }
				set {
					if (_TotalRead != value) {
						OnTotalReadChanging(value);
						SendPropertyChanging();
						_TotalRead = value;
						SendPropertyChanged("TotalRead");
						OnTotalReadChanged();
					}
				}
			}

			partial void OnFirstNameChanging(string value);
			partial void OnFirstNameChanged();
			private string _FirstName;
			[Column(Storage="_FirstName", DbType="VarChar(100)")]
			public  override string FirstName {
				get { return _FirstName; }
				set {
					if (_FirstName != value) {
						OnFirstNameChanging(value);
						SendPropertyChanging();
						_FirstName = value;
						SendPropertyChanged("FirstName");
						OnFirstNameChanged();
					}
				}
			}

			partial void OnLastNameChanging(string value);
			partial void OnLastNameChanged();
			private string _LastName;
			[Column(Storage="_LastName", DbType="VarChar(100)")]
			public  override string LastName {
				get { return _LastName; }
				set {
					if (_LastName != value) {
						OnLastNameChanging(value);
						SendPropertyChanging();
						_LastName = value;
						SendPropertyChanged("LastName");
						OnLastNameChanged();
					}
				}
			}

			partial void OnAddressFirstLineChanging(string value);
			partial void OnAddressFirstLineChanged();
			private string _AddressFirstLine;
			[Column(Storage="_AddressFirstLine", DbType="VarChar(100)")]
			public  override string AddressFirstLine {
				get { return _AddressFirstLine; }
				set {
					if (_AddressFirstLine != value) {
						OnAddressFirstLineChanging(value);
						SendPropertyChanging();
						_AddressFirstLine = value;
						SendPropertyChanged("AddressFirstLine");
						OnAddressFirstLineChanged();
					}
				}
			}

			partial void OnAddressPostCodeChanging(string value);
			partial void OnAddressPostCodeChanged();
			private string _AddressPostCode;
			[Column(Storage="_AddressPostCode", DbType="VarChar(100)")]
			public  override string AddressPostCode {
				get { return _AddressPostCode; }
				set {
					if (_AddressPostCode != value) {
						OnAddressPostCodeChanging(value);
						SendPropertyChanging();
						_AddressPostCode = value;
						SendPropertyChanged("AddressPostCode");
						OnAddressPostCodeChanged();
					}
				}
			}

			partial void OnAddressCountryKChanging(int? value);
			partial void OnAddressCountryKChanged();
			private int? _AddressCountryK;
			[Column(Storage="_AddressCountryK", DbType="Int")]
			public  override int? AddressCountryK {
				get { return _AddressCountryK; }
				set {
					if (_AddressCountryK != value) {
						OnAddressCountryKChanging(value);
						SendPropertyChanging();
						_AddressCountryK = value;
						SendPropertyChanged("AddressCountryK");
						OnAddressCountryKChanged();
					}
				}
			}

			partial void OnIsAddressCompleteChanging(bool? value);
			partial void OnIsAddressCompleteChanged();
			private bool? _IsAddressComplete;
			[Column(Storage="_IsAddressComplete", DbType="Bit")]
			public  override bool? IsAddressComplete {
				get { return _IsAddressComplete; }
				set {
					if (_IsAddressComplete != value) {
						OnIsAddressCompleteChanging(value);
						SendPropertyChanging();
						_IsAddressComplete = value;
						SendPropertyChanged("IsAddressComplete");
						OnIsAddressCompleteChanged();
					}
				}
			}

			partial void OnIsEmailVerifiedChanging(bool? value);
			partial void OnIsEmailVerifiedChanged();
			private bool? _IsEmailVerified;
			[Column(Storage="_IsEmailVerified", DbType="Bit")]
			public  override bool? IsEmailVerified {
				get { return _IsEmailVerified; }
				set {
					if (_IsEmailVerified != value) {
						OnIsEmailVerifiedChanging(value);
						SendPropertyChanging();
						_IsEmailVerified = value;
						SendPropertyChanged("IsEmailVerified");
						OnIsEmailVerifiedChanged();
					}
				}
			}

			partial void OnEmailChanging(string value);
			partial void OnEmailChanged();
			private string _Email;
			[Column(Storage="_Email", DbType="VarChar(100)")]
			public  override string Email {
				get { return _Email; }
				set {
					if (_Email != value) {
						OnEmailChanging(value);
						SendPropertyChanging();
						_Email = value;
						SendPropertyChanged("Email");
						OnEmailChanged();
					}
				}
			}

			partial void OnIsEmailCompleteChanging(bool? value);
			partial void OnIsEmailCompleteChanged();
			private bool? _IsEmailComplete;
			[Column(Storage="_IsEmailComplete", DbType="Bit")]
			public  override bool? IsEmailComplete {
				get { return _IsEmailComplete; }
				set {
					if (_IsEmailComplete != value) {
						OnIsEmailCompleteChanging(value);
						SendPropertyChanging();
						_IsEmailComplete = value;
						SendPropertyChanged("IsEmailComplete");
						OnIsEmailCompleteChanged();
					}
				}
			}

			partial void OnEmailVerificationSecretChanging(string value);
			partial void OnEmailVerificationSecretChanged();
			private string _EmailVerificationSecret;
			[Column(Storage="_EmailVerificationSecret", DbType="VarChar(10)")]
			public  override string EmailVerificationSecret {
				get { return _EmailVerificationSecret; }
				set {
					if (_EmailVerificationSecret != value) {
						OnEmailVerificationSecretChanging(value);
						SendPropertyChanging();
						_EmailVerificationSecret = value;
						SendPropertyChanged("EmailVerificationSecret");
						OnEmailVerificationSecretChanged();
					}
				}
			}

			partial void OnIsEmailBrokenChanging(bool? value);
			partial void OnIsEmailBrokenChanged();
			private bool? _IsEmailBroken;
			[Column(Storage="_IsEmailBroken", DbType="Bit")]
			public  override bool? IsEmailBroken {
				get { return _IsEmailBroken; }
				set {
					if (_IsEmailBroken != value) {
						OnIsEmailBrokenChanging(value);
						SendPropertyChanging();
						_IsEmailBroken = value;
						SendPropertyChanged("IsEmailBroken");
						OnIsEmailBrokenChanged();
					}
				}
			}

			partial void OnEmailBrokenDateTimeChanging(DateTime? value);
			partial void OnEmailBrokenDateTimeChanged();
			private DateTime? _EmailBrokenDateTime;
			[Column(Storage="_EmailBrokenDateTime", DbType="DateTime")]
			public  override DateTime? EmailBrokenDateTime {
				get { return _EmailBrokenDateTime; }
				set {
					if (_EmailBrokenDateTime != value) {
						OnEmailBrokenDateTimeChanging(value);
						SendPropertyChanging();
						_EmailBrokenDateTime = value;
						SendPropertyChanged("EmailBrokenDateTime");
						OnEmailBrokenDateTimeChanged();
					}
				}
			}

			partial void OnIsEmailFromFacebookChanging(bool? value);
			partial void OnIsEmailFromFacebookChanged();
			private bool? _IsEmailFromFacebook;
			[Column(Storage="_IsEmailFromFacebook", DbType="Bit")]
			public  override bool? IsEmailFromFacebook {
				get { return _IsEmailFromFacebook; }
				set {
					if (_IsEmailFromFacebook != value) {
						OnIsEmailFromFacebookChanging(value);
						SendPropertyChanging();
						_IsEmailFromFacebook = value;
						SendPropertyChanged("IsEmailFromFacebook");
						OnIsEmailFromFacebookChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.MixmagVote")]
 		public partial class MixmagVote : Model.Entities.MixmagVote, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public MixmagVote()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnKChanging(int value);
			partial void OnKChanged();
			private int _K;
			[Column(Storage="_K", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
			public  override int K {
				get { return _K; }
				set {
					if (_K != value) {
						OnKChanging(value);
						SendPropertyChanging();
						_K = value;
						SendPropertyChanged("K");
						OnKChanged();
					}
				}
			}

			partial void OnFacebookUIDChanging(long value);
			partial void OnFacebookUIDChanged();
			private long _FacebookUID;
			[Column(Storage="_FacebookUID", DbType="BigInt NOT NULL", CanBeNull=false)]
			public  override long FacebookUID {
				get { return _FacebookUID; }
				set {
					if (_FacebookUID != value) {
						OnFacebookUIDChanging(value);
						SendPropertyChanging();
						_FacebookUID = value;
						SendPropertyChanged("FacebookUID");
						OnFacebookUIDChanged();
					}
				}
			}

			partial void OnMixmagEntryKChanging(int? value);
			partial void OnMixmagEntryKChanged();
			private int? _MixmagEntryK;
			[Column(Storage="_MixmagEntryK", DbType="Int")]
			public  override int? MixmagEntryK {
				get { return _MixmagEntryK; }
				set {
					if (_MixmagEntryK != value) {
						OnMixmagEntryKChanging(value);
						SendPropertyChanging();
						_MixmagEntryK = value;
						SendPropertyChanged("MixmagEntryK");
						OnMixmagEntryKChanged();
					}
				}
			}

			partial void OnDateTimeChanging(DateTime? value);
			partial void OnDateTimeChanged();
			private DateTime? _DateTime;
			[Column(Storage="_DateTime", DbType="DateTime")]
			public  override DateTime? DateTime {
				get { return _DateTime; }
				set {
					if (_DateTime != value) {
						OnDateTimeChanging(value);
						SendPropertyChanging();
						_DateTime = value;
						SendPropertyChanged("DateTime");
						OnDateTimeChanged();
					}
				}
			}

			partial void OnTextField1Changing(string value);
			partial void OnTextField1Changed();
			private string _TextField1;
			[Column(Storage="_TextField1", DbType="VarChar(255)")]
			public  override string TextField1 {
				get { return _TextField1; }
				set {
					if (_TextField1 != value) {
						OnTextField1Changing(value);
						SendPropertyChanging();
						_TextField1 = value;
						SendPropertyChanged("TextField1");
						OnTextField1Changed();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.Mobile")]
 		public partial class Mobile : Model.Entities.Mobile, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public Mobile()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnKChanging(int value);
			partial void OnKChanged();
			private int _K;
			[Column(Storage="_K", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
			public  override int K {
				get { return _K; }
				set {
					if (_K != value) {
						OnKChanging(value);
						SendPropertyChanging();
						_K = value;
						SendPropertyChanged("K");
						OnKChanged();
					}
				}
			}

			partial void OnUsrKChanging(int value);
			partial void OnUsrKChanged();
			private int _UsrK;
			[Column(Storage="_UsrK", DbType="Int", CanBeNull=false)]
			public  override int UsrK {
				get { return _UsrK; }
				set {
					if (_UsrK != value) {
						OnUsrKChanging(value);
						SendPropertyChanging();
						_UsrK = value;
						SendPropertyChanged("UsrK");
						OnUsrKChanged();
					}
				}
			}

			partial void OnNumberChanging(string value);
			partial void OnNumberChanged();
			private string _Number;
			[Column(Storage="_Number", DbType="VarChar(20)", CanBeNull=false)]
			public  override string Number {
				get { return _Number; }
				set {
					if (_Number != value) {
						OnNumberChanging(value);
						SendPropertyChanging();
						_Number = value;
						SendPropertyChanged("Number");
						OnNumberChanged();
					}
				}
			}

			partial void OnNetworkChanging(int value);
			partial void OnNetworkChanged();
			private int _Network;
			[Column(Storage="_Network", DbType="Int", CanBeNull=false)]
			public  override int Network {
				get { return _Network; }
				set {
					if (_Network != value) {
						OnNetworkChanging(value);
						SendPropertyChanging();
						_Network = value;
						SendPropertyChanged("Network");
						OnNetworkChanged();
					}
				}
			}

			partial void OnTotalIncomingChanging(int value);
			partial void OnTotalIncomingChanged();
			private int _TotalIncoming;
			[Column(Storage="_TotalIncoming", DbType="Int", CanBeNull=false)]
			public  override int TotalIncoming {
				get { return _TotalIncoming; }
				set {
					if (_TotalIncoming != value) {
						OnTotalIncomingChanging(value);
						SendPropertyChanging();
						_TotalIncoming = value;
						SendPropertyChanged("TotalIncoming");
						OnTotalIncomingChanged();
					}
				}
			}

			partial void OnTotalOutgoingChanging(int value);
			partial void OnTotalOutgoingChanged();
			private int _TotalOutgoing;
			[Column(Storage="_TotalOutgoing", DbType="Int", CanBeNull=false)]
			public  override int TotalOutgoing {
				get { return _TotalOutgoing; }
				set {
					if (_TotalOutgoing != value) {
						OnTotalOutgoingChanging(value);
						SendPropertyChanging();
						_TotalOutgoing = value;
						SendPropertyChanged("TotalOutgoing");
						OnTotalOutgoingChanged();
					}
				}
			}

			partial void OnDateTimeCreatedChanging(DateTime value);
			partial void OnDateTimeCreatedChanged();
			private DateTime _DateTimeCreated;
			[Column(Storage="_DateTimeCreated", DbType="DateTime", CanBeNull=false)]
			public  override DateTime DateTimeCreated {
				get { return _DateTimeCreated; }
				set {
					if (_DateTimeCreated != value) {
						OnDateTimeCreatedChanging(value);
						SendPropertyChanging();
						_DateTimeCreated = value;
						SendPropertyChanged("DateTimeCreated");
						OnDateTimeCreatedChanged();
					}
				}
			}

			partial void OnDateTimeLastIncomingChanging(DateTime value);
			partial void OnDateTimeLastIncomingChanged();
			private DateTime _DateTimeLastIncoming;
			[Column(Storage="_DateTimeLastIncoming", DbType="DateTime", CanBeNull=false)]
			public  override DateTime DateTimeLastIncoming {
				get { return _DateTimeLastIncoming; }
				set {
					if (_DateTimeLastIncoming != value) {
						OnDateTimeLastIncomingChanging(value);
						SendPropertyChanging();
						_DateTimeLastIncoming = value;
						SendPropertyChanged("DateTimeLastIncoming");
						OnDateTimeLastIncomingChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.MusicType")]
 		public partial class MusicType : Model.Entities.MusicType, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public MusicType()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnKChanging(int value);
			partial void OnKChanged();
			private int _K;
			[Column(Storage="_K", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
			public  override int K {
				get { return _K; }
				set {
					if (_K != value) {
						OnKChanging(value);
						SendPropertyChanging();
						_K = value;
						SendPropertyChanged("K");
						OnKChanged();
					}
				}
			}

			partial void OnNameChanging(string value);
			partial void OnNameChanged();
			private string _Name;
			[Column(Storage="_Name", DbType="VarChar(50)", CanBeNull=false)]
			public  override string Name {
				get { return _Name; }
				set {
					if (_Name != value) {
						OnNameChanging(value);
						SendPropertyChanging();
						_Name = value;
						SendPropertyChanged("Name");
						OnNameChanged();
					}
				}
			}

			partial void OnParentKChanging(int value);
			partial void OnParentKChanged();
			private int _ParentK;
			[Column(Storage="_ParentK", DbType="Int", CanBeNull=false)]
			public  override int ParentK {
				get { return _ParentK; }
				set {
					if (_ParentK != value) {
						OnParentKChanging(value);
						SendPropertyChanging();
						_ParentK = value;
						SendPropertyChanged("ParentK");
						OnParentKChanged();
					}
				}
			}

			partial void OnGenericNameChanging(string value);
			partial void OnGenericNameChanged();
			private string _GenericName;
			[Column(Storage="_GenericName", DbType="VarChar(50)", CanBeNull=false)]
			public  override string GenericName {
				get { return _GenericName; }
				set {
					if (_GenericName != value) {
						OnGenericNameChanging(value);
						SendPropertyChanging();
						_GenericName = value;
						SendPropertyChanged("GenericName");
						OnGenericNameChanged();
					}
				}
			}

			partial void OnOrderChanging(double value);
			partial void OnOrderChanged();
			private double _Order;
			[Column(Storage="_Order", DbType="Float", CanBeNull=false)]
			public  override double Order {
				get { return _Order; }
				set {
					if (_Order != value) {
						OnOrderChanging(value);
						SendPropertyChanging();
						_Order = value;
						SendPropertyChanged("Order");
						OnOrderChanged();
					}
				}
			}

			partial void OnSmsCodeChanging(string value);
			partial void OnSmsCodeChanged();
			private string _SmsCode;
			[Column(Storage="_SmsCode", DbType="VarChar(20)", CanBeNull=false)]
			public  override string SmsCode {
				get { return _SmsCode; }
				set {
					if (_SmsCode != value) {
						OnSmsCodeChanging(value);
						SendPropertyChanging();
						_SmsCode = value;
						SendPropertyChanged("SmsCode");
						OnSmsCodeChanged();
					}
				}
			}

			partial void OnSmsNameChanging(string value);
			partial void OnSmsNameChanged();
			private string _SmsName;
			[Column(Storage="_SmsName", DbType="VarChar(20)", CanBeNull=false)]
			public  override string SmsName {
				get { return _SmsName; }
				set {
					if (_SmsName != value) {
						OnSmsNameChanging(value);
						SendPropertyChanging();
						_SmsName = value;
						SendPropertyChanged("SmsName");
						OnSmsNameChanged();
					}
				}
			}

			partial void OnDescriptionChanging(string value);
			partial void OnDescriptionChanged();
			private string _Description;
			[Column(Storage="_Description", DbType="VarChar(50)", CanBeNull=false)]
			public  override string Description {
				get { return _Description; }
				set {
					if (_Description != value) {
						OnDescriptionChanging(value);
						SendPropertyChanging();
						_Description = value;
						SendPropertyChanged("Description");
						OnDescriptionChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.NovemberVisitors")]
 		public partial class NovemberVisitor : Model.Entities.NovemberVisitor, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public NovemberVisitor()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnPagesChanging(int? value);
			partial void OnPagesChanged();
			private int? _Pages;
			[Column(Storage="_Pages", DbType="Int")]
			public  override int? Pages {
				get { return _Pages; }
				set {
					if (_Pages != value) {
						OnPagesChanging(value);
						SendPropertyChanging();
						_Pages = value;
						SendPropertyChanged("Pages");
						OnPagesChanged();
					}
				}
			}

			partial void OnGuidChanging(string value);
			partial void OnGuidChanged();
			private string _Guid;
			[Column(Storage="_Guid", DbType="Char(36)")]
			public  override string Guid {
				get { return _Guid; }
				set {
					if (_Guid != value) {
						OnGuidChanging(value);
						SendPropertyChanging();
						_Guid = value;
						SendPropertyChanged("Guid");
						OnGuidChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.OutgoingSms")]
 		public partial class OutgoingSms : Model.Entities.OutgoingSms, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public OutgoingSms()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnKChanging(int value);
			partial void OnKChanged();
			private int _K;
			[Column(Storage="_K", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
			public  override int K {
				get { return _K; }
				set {
					if (_K != value) {
						OnKChanging(value);
						SendPropertyChanging();
						_K = value;
						SendPropertyChanged("K");
						OnKChanged();
					}
				}
			}

			partial void OnDateTimeChanging(DateTime value);
			partial void OnDateTimeChanged();
			private DateTime _DateTime;
			[Column(Storage="_DateTime", DbType="DateTime", CanBeNull=false)]
			public  override DateTime DateTime {
				get { return _DateTime; }
				set {
					if (_DateTime != value) {
						OnDateTimeChanging(value);
						SendPropertyChanging();
						_DateTime = value;
						SendPropertyChanged("DateTime");
						OnDateTimeChanged();
					}
				}
			}

			partial void OnTypeChanging(Model.Entities.OutgoingSms.Types value);
			partial void OnTypeChanged();
			private Model.Entities.OutgoingSms.Types _Type;
			[Column(Storage="_Type", DbType="Int")]
			public  override Model.Entities.OutgoingSms.Types Type {
				get { return _Type; }
				set {
					if (_Type != value) {
						OnTypeChanging(value);
						SendPropertyChanging();
						_Type = value;
						SendPropertyChanged("Type");
						OnTypeChanged();
					}
				}
			}

			partial void OnIncomingSmsKChanging(int? value);
			partial void OnIncomingSmsKChanged();
			private int? _IncomingSmsK;
			[Column(Storage="_IncomingSmsK", DbType="Int")]
			public  override int? IncomingSmsK {
				get { return _IncomingSmsK; }
				set {
					if (_IncomingSmsK != value) {
						OnIncomingSmsKChanging(value);
						SendPropertyChanging();
						_IncomingSmsK = value;
						SendPropertyChanged("IncomingSmsK");
						OnIncomingSmsKChanged();
					}
				}
			}

			partial void OnPostStringChanging(string value);
			partial void OnPostStringChanged();
			private string _PostString;
			[Column(Storage="_PostString", DbType="VarChar(500)")]
			public  override string PostString {
				get { return _PostString; }
				set {
					if (_PostString != value) {
						OnPostStringChanging(value);
						SendPropertyChanging();
						_PostString = value;
						SendPropertyChanged("PostString");
						OnPostStringChanged();
					}
				}
			}

			partial void OnMessageChanging(string value);
			partial void OnMessageChanged();
			private string _Message;
			[Column(Storage="_Message", DbType="VarChar(400)")]
			public  override string Message {
				get { return _Message; }
				set {
					if (_Message != value) {
						OnMessageChanging(value);
						SendPropertyChanging();
						_Message = value;
						SendPropertyChanged("Message");
						OnMessageChanged();
					}
				}
			}

			partial void OnErrorCodeChanging(int value);
			partial void OnErrorCodeChanged();
			private int _ErrorCode;
			[Column(Storage="_ErrorCode", DbType="Int", CanBeNull=false)]
			public  override int ErrorCode {
				get { return _ErrorCode; }
				set {
					if (_ErrorCode != value) {
						OnErrorCodeChanging(value);
						SendPropertyChanging();
						_ErrorCode = value;
						SendPropertyChanged("ErrorCode");
						OnErrorCodeChanged();
					}
				}
			}

			partial void OnErrorTextChanging(string value);
			partial void OnErrorTextChanged();
			private string _ErrorText;
			[Column(Storage="_ErrorText", DbType="VarChar(100)")]
			public  override string ErrorText {
				get { return _ErrorText; }
				set {
					if (_ErrorText != value) {
						OnErrorTextChanging(value);
						SendPropertyChanging();
						_ErrorText = value;
						SendPropertyChanged("ErrorText");
						OnErrorTextChanged();
					}
				}
			}

			partial void OnSubmissionReferenceChanging(string value);
			partial void OnSubmissionReferenceChanged();
			private string _SubmissionReference;
			[Column(Storage="_SubmissionReference", DbType="VarChar(100)")]
			public  override string SubmissionReference {
				get { return _SubmissionReference; }
				set {
					if (_SubmissionReference != value) {
						OnSubmissionReferenceChanging(value);
						SendPropertyChanging();
						_SubmissionReference = value;
						SendPropertyChanged("SubmissionReference");
						OnSubmissionReferenceChanged();
					}
				}
			}

			partial void OnChargeTypeChanging(Model.Entities.OutgoingSms.ChargeTypes value);
			partial void OnChargeTypeChanged();
			private Model.Entities.OutgoingSms.ChargeTypes _ChargeType;
			[Column(Storage="_ChargeType", DbType="Int")]
			public  override Model.Entities.OutgoingSms.ChargeTypes ChargeType {
				get { return _ChargeType; }
				set {
					if (_ChargeType != value) {
						OnChargeTypeChanging(value);
						SendPropertyChanging();
						_ChargeType = value;
						SendPropertyChanged("ChargeType");
						OnChargeTypeChanged();
					}
				}
			}

			partial void OnSentChanging(bool value);
			partial void OnSentChanged();
			private bool _Sent;
			[Column(Storage="_Sent", DbType="Bit", CanBeNull=false)]
			public  override bool Sent {
				get { return _Sent; }
				set {
					if (_Sent != value) {
						OnSentChanging(value);
						SendPropertyChanging();
						_Sent = value;
						SendPropertyChanged("Sent");
						OnSentChanged();
					}
				}
			}

			partial void OnMobileKChanging(int value);
			partial void OnMobileKChanged();
			private int _MobileK;
			[Column(Storage="_MobileK", DbType="Int", CanBeNull=false)]
			public  override int MobileK {
				get { return _MobileK; }
				set {
					if (_MobileK != value) {
						OnMobileKChanging(value);
						SendPropertyChanging();
						_MobileK = value;
						SendPropertyChanged("MobileK");
						OnMobileKChanged();
					}
				}
			}

			partial void OnServiceTypeChanging(Model.Entities.IncomingSms.ServiceTypes value);
			partial void OnServiceTypeChanged();
			private Model.Entities.IncomingSms.ServiceTypes _ServiceType;
			[Column(Storage="_ServiceType", DbType="Int")]
			public  override Model.Entities.IncomingSms.ServiceTypes ServiceType {
				get { return _ServiceType; }
				set {
					if (_ServiceType != value) {
						OnServiceTypeChanging(value);
						SendPropertyChanging();
						_ServiceType = value;
						SendPropertyChanged("ServiceType");
						OnServiceTypeChanged();
					}
				}
			}

			partial void OnDeliveredChanging(bool value);
			partial void OnDeliveredChanged();
			private bool _Delivered;
			[Column(Storage="_Delivered", DbType="Bit", CanBeNull=false)]
			public  override bool Delivered {
				get { return _Delivered; }
				set {
					if (_Delivered != value) {
						OnDeliveredChanging(value);
						SendPropertyChanging();
						_Delivered = value;
						SendPropertyChanged("Delivered");
						OnDeliveredChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.PageTime")]
 		public partial class PageTime : Model.Entities.PageTime, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public PageTime()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnKChanging(int value);
			partial void OnKChanged();
			private int _K;
			[Column(Storage="_K", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
			public  override int K {
				get { return _K; }
				set {
					if (_K != value) {
						OnKChanging(value);
						SendPropertyChanging();
						_K = value;
						SendPropertyChanged("K");
						OnKChanged();
					}
				}
			}

			partial void OnCobKChanging(int value);
			partial void OnCobKChanged();
			private int _CobK;
			[Column(Storage="_CobK", DbType="Int", CanBeNull=false)]
			public  override int CobK {
				get { return _CobK; }
				set {
					if (_CobK != value) {
						OnCobKChanging(value);
						SendPropertyChanging();
						_CobK = value;
						SendPropertyChanged("CobK");
						OnCobKChanged();
					}
				}
			}

			partial void OnDateChanging(DateTime value);
			partial void OnDateChanged();
			private DateTime _Date;
			[Column(Storage="_Date", DbType="DateTime", CanBeNull=false)]
			public  override DateTime Date {
				get { return _Date; }
				set {
					if (_Date != value) {
						OnDateChanging(value);
						SendPropertyChanging();
						_Date = value;
						SendPropertyChanged("Date");
						OnDateChanged();
					}
				}
			}

			partial void OnImpressionsChanging(int value);
			partial void OnImpressionsChanged();
			private int _Impressions;
			[Column(Storage="_Impressions", DbType="Int", CanBeNull=false)]
			public  override int Impressions {
				get { return _Impressions; }
				set {
					if (_Impressions != value) {
						OnImpressionsChanging(value);
						SendPropertyChanging();
						_Impressions = value;
						SendPropertyChanged("Impressions");
						OnImpressionsChanged();
					}
				}
			}

			partial void OnTotalTimeChanging(int value);
			partial void OnTotalTimeChanged();
			private int _TotalTime;
			[Column(Storage="_TotalTime", DbType="Int", CanBeNull=false)]
			public  override int TotalTime {
				get { return _TotalTime; }
				set {
					if (_TotalTime != value) {
						OnTotalTimeChanging(value);
						SendPropertyChanging();
						_TotalTime = value;
						SendPropertyChanged("TotalTime");
						OnTotalTimeChanged();
					}
				}
			}

			partial void OnMaxTimeChanging(int value);
			partial void OnMaxTimeChanged();
			private int _MaxTime;
			[Column(Storage="_MaxTime", DbType="Int", CanBeNull=false)]
			public  override int MaxTime {
				get { return _MaxTime; }
				set {
					if (_MaxTime != value) {
						OnMaxTimeChanging(value);
						SendPropertyChanging();
						_MaxTime = value;
						SendPropertyChanged("MaxTime");
						OnMaxTimeChanged();
					}
				}
			}

			partial void OnMinTimeChanging(int value);
			partial void OnMinTimeChanged();
			private int _MinTime;
			[Column(Storage="_MinTime", DbType="Int", CanBeNull=false)]
			public  override int MinTime {
				get { return _MinTime; }
				set {
					if (_MinTime != value) {
						OnMinTimeChanging(value);
						SendPropertyChanging();
						_MinTime = value;
						SendPropertyChanged("MinTime");
						OnMinTimeChanged();
					}
				}
			}

			partial void OnMaxUrlChanging(string value);
			partial void OnMaxUrlChanged();
			private string _MaxUrl;
			[Column(Storage="_MaxUrl", DbType="VarChar(1000)", CanBeNull=false)]
			public  override string MaxUrl {
				get { return _MaxUrl; }
				set {
					if (_MaxUrl != value) {
						OnMaxUrlChanging(value);
						SendPropertyChanging();
						_MaxUrl = value;
						SendPropertyChanged("MaxUrl");
						OnMaxUrlChanged();
					}
				}
			}

			partial void OnMinUrlChanging(string value);
			partial void OnMinUrlChanged();
			private string _MinUrl;
			[Column(Storage="_MinUrl", DbType="VarChar(1000)", CanBeNull=false)]
			public  override string MinUrl {
				get { return _MinUrl; }
				set {
					if (_MinUrl != value) {
						OnMinUrlChanging(value);
						SendPropertyChanging();
						_MinUrl = value;
						SendPropertyChanged("MinUrl");
						OnMinUrlChanged();
					}
				}
			}

			partial void OnCustPageChanging(string value);
			partial void OnCustPageChanged();
			private string _CustPage;
			[Column(Storage="_CustPage", DbType="VarChar(50)", CanBeNull=false)]
			public  override string CustPage {
				get { return _CustPage; }
				set {
					if (_CustPage != value) {
						OnCustPageChanging(value);
						SendPropertyChanging();
						_CustPage = value;
						SendPropertyChanged("CustPage");
						OnCustPageChanged();
					}
				}
			}

			partial void OnLogItemChanging(Model.Entities.PageTime.LogItems value);
			partial void OnLogItemChanged();
			private Model.Entities.PageTime.LogItems _LogItem;
			[Column(Storage="_LogItem", DbType="Int", CanBeNull=false)]
			public  override Model.Entities.PageTime.LogItems LogItem {
				get { return _LogItem; }
				set {
					if (_LogItem != value) {
						OnLogItemChanging(value);
						SendPropertyChanging();
						_LogItem = value;
						SendPropertyChanged("LogItem");
						OnLogItemChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.Para")]
 		public partial class Para : Model.Entities.Para, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public Para()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnKChanging(int value);
			partial void OnKChanged();
			private int _K;
			[Column(Storage="_K", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
			public  override int K {
				get { return _K; }
				set {
					if (_K != value) {
						OnKChanging(value);
						SendPropertyChanging();
						_K = value;
						SendPropertyChanged("K");
						OnKChanged();
					}
				}
			}

			partial void OnArticleKChanging(int value);
			partial void OnArticleKChanged();
			private int _ArticleK;
			[Column(Storage="_ArticleK", DbType="Int", CanBeNull=false)]
			public  override int ArticleK {
				get { return _ArticleK; }
				set {
					if (_ArticleK != value) {
						OnArticleKChanging(value);
						SendPropertyChanging();
						_ArticleK = value;
						SendPropertyChanged("ArticleK");
						OnArticleKChanged();
					}
				}
			}

			partial void OnPageChanging(int value);
			partial void OnPageChanged();
			private int _Page;
			[Column(Storage="_Page", DbType="Int", CanBeNull=false)]
			public  override int Page {
				get { return _Page; }
				set {
					if (_Page != value) {
						OnPageChanging(value);
						SendPropertyChanging();
						_Page = value;
						SendPropertyChanged("Page");
						OnPageChanged();
					}
				}
			}

			partial void OnOrderChanging(double value);
			partial void OnOrderChanged();
			private double _Order;
			[Column(Storage="_Order", DbType="Float", CanBeNull=false)]
			public  override double Order {
				get { return _Order; }
				set {
					if (_Order != value) {
						OnOrderChanging(value);
						SendPropertyChanging();
						_Order = value;
						SendPropertyChanged("Order");
						OnOrderChanged();
					}
				}
			}

			partial void OnTypeChanging(Model.Entities.Para.TypeEnum value);
			partial void OnTypeChanged();
			private Model.Entities.Para.TypeEnum _Type;
			[Column(Storage="_Type", DbType="Int", CanBeNull=false)]
			public  override Model.Entities.Para.TypeEnum Type {
				get { return _Type; }
				set {
					if (_Type != value) {
						OnTypeChanging(value);
						SendPropertyChanging();
						_Type = value;
						SendPropertyChanged("Type");
						OnTypeChanged();
					}
				}
			}

			partial void OnPhotoKChanging(int value);
			partial void OnPhotoKChanged();
			private int _PhotoK;
			[Column(Storage="_PhotoK", DbType="Int", CanBeNull=false)]
			public  override int PhotoK {
				get { return _PhotoK; }
				set {
					if (_PhotoK != value) {
						OnPhotoKChanging(value);
						SendPropertyChanging();
						_PhotoK = value;
						SendPropertyChanged("PhotoK");
						OnPhotoKChanged();
					}
				}
			}

			partial void OnTextChanging(string value);
			partial void OnTextChanged();
			private string _Text;
			[Column(Storage="_Text", DbType="Text", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
			public  override string Text {
				get { return _Text; }
				set {
					if (_Text != value) {
						OnTextChanging(value);
						SendPropertyChanging();
						_Text = value;
						SendPropertyChanged("Text");
						OnTextChanged();
					}
				}
			}

			partial void OnThreadKChanging(int value);
			partial void OnThreadKChanged();
			private int _ThreadK;
			[Column(Storage="_ThreadK", DbType="Int", CanBeNull=false)]
			public  override int ThreadK {
				get { return _ThreadK; }
				set {
					if (_ThreadK != value) {
						OnThreadKChanging(value);
						SendPropertyChanging();
						_ThreadK = value;
						SendPropertyChanged("ThreadK");
						OnThreadKChanged();
					}
				}
			}

			partial void OnPhotoAlignChanging(Model.Entities.Para.PhotoAlignEnum value);
			partial void OnPhotoAlignChanged();
			private Model.Entities.Para.PhotoAlignEnum _PhotoAlign;
			[Column(Storage="_PhotoAlign", DbType="Int", CanBeNull=false)]
			public  override Model.Entities.Para.PhotoAlignEnum PhotoAlign {
				get { return _PhotoAlign; }
				set {
					if (_PhotoAlign != value) {
						OnPhotoAlignChanging(value);
						SendPropertyChanging();
						_PhotoAlign = value;
						SendPropertyChanged("PhotoAlign");
						OnPhotoAlignChanged();
					}
				}
			}

			partial void OnPicChanging(Guid value);
			partial void OnPicChanged();
			private Guid _Pic;
			[Column(Storage="_Pic", DbType="UniqueIdentifier", CanBeNull=false)]
			public  override Guid Pic {
				get { return _Pic; }
				set {
					if (_Pic != value) {
						OnPicChanging(value);
						SendPropertyChanging();
						_Pic = value;
						SendPropertyChanged("Pic");
						OnPicChanged();
					}
				}
			}

			partial void OnPhotoTypeChanging(Model.Entities.Para.PhotoTypes value);
			partial void OnPhotoTypeChanged();
			private Model.Entities.Para.PhotoTypes _PhotoType;
			[Column(Storage="_PhotoType", DbType="Int", CanBeNull=false)]
			public  override Model.Entities.Para.PhotoTypes PhotoType {
				get { return _PhotoType; }
				set {
					if (_PhotoType != value) {
						OnPhotoTypeChanging(value);
						SendPropertyChanging();
						_PhotoType = value;
						SendPropertyChanged("PhotoType");
						OnPhotoTypeChanged();
					}
				}
			}

			partial void OnCaptionChanging(string value);
			partial void OnCaptionChanged();
			private string _Caption;
			[Column(Storage="_Caption", DbType="VarChar(200)", CanBeNull=false)]
			public  override string Caption {
				get { return _Caption; }
				set {
					if (_Caption != value) {
						OnCaptionChanging(value);
						SendPropertyChanging();
						_Caption = value;
						SendPropertyChanged("Caption");
						OnCaptionChanged();
					}
				}
			}

			partial void OnPicWidthChanging(int value);
			partial void OnPicWidthChanged();
			private int _PicWidth;
			[Column(Storage="_PicWidth", DbType="Int", CanBeNull=false)]
			public  override int PicWidth {
				get { return _PicWidth; }
				set {
					if (_PicWidth != value) {
						OnPicWidthChanging(value);
						SendPropertyChanging();
						_PicWidth = value;
						SendPropertyChanged("PicWidth");
						OnPicWidthChanged();
					}
				}
			}

			partial void OnPicHeightChanging(int value);
			partial void OnPicHeightChanged();
			private int _PicHeight;
			[Column(Storage="_PicHeight", DbType="Int", CanBeNull=false)]
			public  override int PicHeight {
				get { return _PicHeight; }
				set {
					if (_PicHeight != value) {
						OnPicHeightChanging(value);
						SendPropertyChanging();
						_PicHeight = value;
						SendPropertyChanged("PicHeight");
						OnPicHeightChanged();
					}
				}
			}

			partial void OnPicStateChanging(string value);
			partial void OnPicStateChanged();
			private string _PicState;
			[Column(Storage="_PicState", DbType="VarChar(100)", CanBeNull=false)]
			public  override string PicState {
				get { return _PicState; }
				set {
					if (_PicState != value) {
						OnPicStateChanging(value);
						SendPropertyChanging();
						_PicState = value;
						SendPropertyChanged("PicState");
						OnPicStateChanged();
					}
				}
			}

			partial void OnPicPhotoKChanging(int value);
			partial void OnPicPhotoKChanged();
			private int _PicPhotoK;
			[Column(Storage="_PicPhotoK", DbType="Int", CanBeNull=false)]
			public  override int PicPhotoK {
				get { return _PicPhotoK; }
				set {
					if (_PicPhotoK != value) {
						OnPicPhotoKChanging(value);
						SendPropertyChanging();
						_PicPhotoK = value;
						SendPropertyChanged("PicPhotoK");
						OnPicPhotoKChanged();
					}
				}
			}

			partial void OnPicMiscKChanging(int value);
			partial void OnPicMiscKChanged();
			private int _PicMiscK;
			[Column(Storage="_PicMiscK", DbType="Int", CanBeNull=false)]
			public  override int PicMiscK {
				get { return _PicMiscK; }
				set {
					if (_PicMiscK != value) {
						OnPicMiscKChanging(value);
						SendPropertyChanging();
						_PicMiscK = value;
						SendPropertyChanged("PicMiscK");
						OnPicMiscKChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.Phone")]
 		public partial class Phone : Model.Entities.Phone, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public Phone()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnKChanging(int value);
			partial void OnKChanged();
			private int _K;
			[Column(Storage="_K", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
			public  override int K {
				get { return _K; }
				set {
					if (_K != value) {
						OnKChanging(value);
						SendPropertyChanging();
						_K = value;
						SendPropertyChanged("K");
						OnKChanged();
					}
				}
			}

			partial void OnUsrKChanging(int value);
			partial void OnUsrKChanged();
			private int _UsrK;
			[Column(Storage="_UsrK", DbType="Int", CanBeNull=false)]
			public  override int UsrK {
				get { return _UsrK; }
				set {
					if (_UsrK != value) {
						OnUsrKChanging(value);
						SendPropertyChanging();
						_UsrK = value;
						SendPropertyChanged("UsrK");
						OnUsrKChanged();
					}
				}
			}

			partial void OnExtentionChanging(int value);
			partial void OnExtentionChanged();
			private int _Extention;
			[Column(Storage="_Extention", DbType="Int", CanBeNull=false)]
			public  override int Extention {
				get { return _Extention; }
				set {
					if (_Extention != value) {
						OnExtentionChanging(value);
						SendPropertyChanging();
						_Extention = value;
						SendPropertyChanged("Extention");
						OnExtentionChanged();
					}
				}
			}

			partial void OnMacChanging(string value);
			partial void OnMacChanged();
			private string _Mac;
			[Column(Storage="_Mac", DbType="VarChar(50)", CanBeNull=false)]
			public  override string Mac {
				get { return _Mac; }
				set {
					if (_Mac != value) {
						OnMacChanging(value);
						SendPropertyChanging();
						_Mac = value;
						SendPropertyChanged("Mac");
						OnMacChanged();
					}
				}
			}

			partial void OnIpAddressChanging(string value);
			partial void OnIpAddressChanged();
			private string _IpAddress;
			[Column(Storage="_IpAddress", DbType="VarChar(100)")]
			public  override string IpAddress {
				get { return _IpAddress; }
				set {
					if (_IpAddress != value) {
						OnIpAddressChanging(value);
						SendPropertyChanging();
						_IpAddress = value;
						SendPropertyChanged("IpAddress");
						OnIpAddressChanged();
					}
				}
			}

			partial void OnLocalIpAddressChanging(string value);
			partial void OnLocalIpAddressChanged();
			private string _LocalIpAddress;
			[Column(Storage="_LocalIpAddress", DbType="VarChar(100)")]
			public  override string LocalIpAddress {
				get { return _LocalIpAddress; }
				set {
					if (_LocalIpAddress != value) {
						OnLocalIpAddressChanging(value);
						SendPropertyChanging();
						_LocalIpAddress = value;
						SendPropertyChanged("LocalIpAddress");
						OnLocalIpAddressChanged();
					}
				}
			}

			partial void OnLocalGatewayChanging(string value);
			partial void OnLocalGatewayChanged();
			private string _LocalGateway;
			[Column(Storage="_LocalGateway", DbType="VarChar(100)")]
			public  override string LocalGateway {
				get { return _LocalGateway; }
				set {
					if (_LocalGateway != value) {
						OnLocalGatewayChanging(value);
						SendPropertyChanging();
						_LocalGateway = value;
						SendPropertyChanged("LocalGateway");
						OnLocalGatewayChanged();
					}
				}
			}

			partial void OnLocalDnsChanging(string value);
			partial void OnLocalDnsChanged();
			private string _LocalDns;
			[Column(Storage="_LocalDns", DbType="VarChar(100)")]
			public  override string LocalDns {
				get { return _LocalDns; }
				set {
					if (_LocalDns != value) {
						OnLocalDnsChanging(value);
						SendPropertyChanging();
						_LocalDns = value;
						SendPropertyChanged("LocalDns");
						OnLocalDnsChanged();
					}
				}
			}

			partial void OnNatPortChanging(string value);
			partial void OnNatPortChanged();
			private string _NatPort;
			[Column(Storage="_NatPort", DbType="VarChar(100)")]
			public  override string NatPort {
				get { return _NatPort; }
				set {
					if (_NatPort != value) {
						OnNatPortChanging(value);
						SendPropertyChanging();
						_NatPort = value;
						SendPropertyChanged("NatPort");
						OnNatPortChanged();
					}
				}
			}

			partial void OnTestColumnChanging(string value);
			partial void OnTestColumnChanged();
			private string _TestColumn;
			[Column(Storage="_TestColumn", DbType="VarChar(100)")]
			public  override string TestColumn {
				get { return _TestColumn; }
				set {
					if (_TestColumn != value) {
						OnTestColumnChanging(value);
						SendPropertyChanging();
						_TestColumn = value;
						SendPropertyChanged("TestColumn");
						OnTestColumnChanged();
					}
				}
			}

			partial void OnTestColumn1Changing(string value);
			partial void OnTestColumn1Changed();
			private string _TestColumn1;
			[Column(Storage="_TestColumn1", DbType="VarChar(100)")]
			public  override string TestColumn1 {
				get { return _TestColumn1; }
				set {
					if (_TestColumn1 != value) {
						OnTestColumn1Changing(value);
						SendPropertyChanging();
						_TestColumn1 = value;
						SendPropertyChanged("TestColumn1");
						OnTestColumn1Changed();
					}
				}
			}

			partial void OnTestColumn2Changing(string value);
			partial void OnTestColumn2Changed();
			private string _TestColumn2;
			[Column(Storage="_TestColumn2", DbType="VarChar(100)")]
			public  override string TestColumn2 {
				get { return _TestColumn2; }
				set {
					if (_TestColumn2 != value) {
						OnTestColumn2Changing(value);
						SendPropertyChanging();
						_TestColumn2 = value;
						SendPropertyChanged("TestColumn2");
						OnTestColumn2Changed();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.Photo")]
 		public partial class Photo : Model.Entities.Photo, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public Photo()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnKChanging(int value);
			partial void OnKChanged();
			private int _K;
			[Column(Storage="_K", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
			public  override int K {
				get { return _K; }
				set {
					if (_K != value) {
						OnKChanging(value);
						SendPropertyChanging();
						_K = value;
						SendPropertyChanged("K");
						OnKChanged();
					}
				}
			}

			partial void OnGalleryKChanging(int value);
			partial void OnGalleryKChanged();
			private int _GalleryK;
			[Column(Storage="_GalleryK", DbType="Int", CanBeNull=false)]
			public  override int GalleryK {
				get { return _GalleryK; }
				set {
					if (_GalleryK != value) {
						OnGalleryKChanging(value);
						SendPropertyChanging();
						_GalleryK = value;
						SendPropertyChanged("GalleryK");
						OnGalleryKChanged();
					}
				}
			}

			partial void OnEventKChanging(int value);
			partial void OnEventKChanged();
			private int _EventK;
			[Column(Storage="_EventK", DbType="Int", CanBeNull=false)]
			public  override int EventK {
				get { return _EventK; }
				set {
					if (_EventK != value) {
						OnEventKChanging(value);
						SendPropertyChanging();
						_EventK = value;
						SendPropertyChanged("EventK");
						OnEventKChanged();
					}
				}
			}

			partial void OnArticleKChanging(int value);
			partial void OnArticleKChanged();
			private int _ArticleK;
			[Column(Storage="_ArticleK", DbType="Int", CanBeNull=false)]
			public  override int ArticleK {
				get { return _ArticleK; }
				set {
					if (_ArticleK != value) {
						OnArticleKChanging(value);
						SendPropertyChanging();
						_ArticleK = value;
						SendPropertyChanged("ArticleK");
						OnArticleKChanged();
					}
				}
			}

			partial void OnUsrKChanging(int value);
			partial void OnUsrKChanged();
			private int _UsrK;
			[Column(Storage="_UsrK", DbType="Int", CanBeNull=false)]
			public  override int UsrK {
				get { return _UsrK; }
				set {
					if (_UsrK != value) {
						OnUsrKChanging(value);
						SendPropertyChanging();
						_UsrK = value;
						SendPropertyChanged("UsrK");
						OnUsrKChanged();
					}
				}
			}

			partial void OnMobileKChanging(int value);
			partial void OnMobileKChanged();
			private int _MobileK;
			[Column(Storage="_MobileK", DbType="Int", CanBeNull=false)]
			public  override int MobileK {
				get { return _MobileK; }
				set {
					if (_MobileK != value) {
						OnMobileKChanging(value);
						SendPropertyChanging();
						_MobileK = value;
						SendPropertyChanged("MobileK");
						OnMobileKChanged();
					}
				}
			}

			partial void OnOrderChanging(double value);
			partial void OnOrderChanged();
			private double _Order;
			[Column(Storage="_Order", DbType="Float", CanBeNull=false)]
			public  override double Order {
				get { return _Order; }
				set {
					if (_Order != value) {
						OnOrderChanging(value);
						SendPropertyChanging();
						_Order = value;
						SendPropertyChanged("Order");
						OnOrderChanged();
					}
				}
			}

			partial void OnThreadKChanging(int? value);
			partial void OnThreadKChanged();
			private int? _ThreadK;
			[Column(Storage="_ThreadK", DbType="Int")]
			public  override int? ThreadK {
				get { return _ThreadK; }
				set {
					if (_ThreadK != value) {
						OnThreadKChanging(value);
						SendPropertyChanging();
						_ThreadK = value;
						SendPropertyChanged("ThreadK");
						OnThreadKChanged();
					}
				}
			}

			partial void OnDateTimeChanging(DateTime value);
			partial void OnDateTimeChanged();
			private DateTime _DateTime;
			[Column(Storage="_DateTime", DbType="DateTime", CanBeNull=false)]
			public  override DateTime DateTime {
				get { return _DateTime; }
				set {
					if (_DateTime != value) {
						OnDateTimeChanging(value);
						SendPropertyChanging();
						_DateTime = value;
						SendPropertyChanged("DateTime");
						OnDateTimeChanged();
					}
				}
			}

			partial void OnViewsChanging(int value);
			partial void OnViewsChanged();
			private int _Views;
			[Column(Storage="_Views", DbType="Int", CanBeNull=false)]
			public  override int Views {
				get { return _Views; }
				set {
					if (_Views != value) {
						OnViewsChanging(value);
						SendPropertyChanging();
						_Views = value;
						SendPropertyChanged("Views");
						OnViewsChanged();
					}
				}
			}

			partial void OnAverageCoolRatingChanging(double value);
			partial void OnAverageCoolRatingChanged();
			private double _AverageCoolRating;
			[Column(Storage="_AverageCoolRating", DbType="Float", CanBeNull=false)]
			public  override double AverageCoolRating {
				get { return _AverageCoolRating; }
				set {
					if (_AverageCoolRating != value) {
						OnAverageCoolRatingChanging(value);
						SendPropertyChanging();
						_AverageCoolRating = value;
						SendPropertyChanged("AverageCoolRating");
						OnAverageCoolRatingChanged();
					}
				}
			}

			partial void OnAverageSexyRatingChanging(double value);
			partial void OnAverageSexyRatingChanged();
			private double _AverageSexyRating;
			[Column(Storage="_AverageSexyRating", DbType="Float", CanBeNull=false)]
			public  override double AverageSexyRating {
				get { return _AverageSexyRating; }
				set {
					if (_AverageSexyRating != value) {
						OnAverageSexyRatingChanging(value);
						SendPropertyChanging();
						_AverageSexyRating = value;
						SendPropertyChanged("AverageSexyRating");
						OnAverageSexyRatingChanged();
					}
				}
			}

			partial void OnTotalCoolRatingsChanging(int value);
			partial void OnTotalCoolRatingsChanged();
			private int _TotalCoolRatings;
			[Column(Storage="_TotalCoolRatings", DbType="Int", CanBeNull=false)]
			public  override int TotalCoolRatings {
				get { return _TotalCoolRatings; }
				set {
					if (_TotalCoolRatings != value) {
						OnTotalCoolRatingsChanging(value);
						SendPropertyChanging();
						_TotalCoolRatings = value;
						SendPropertyChanged("TotalCoolRatings");
						OnTotalCoolRatingsChanged();
					}
				}
			}

			partial void OnTotalSexyRatingsChanging(int value);
			partial void OnTotalSexyRatingsChanged();
			private int _TotalSexyRatings;
			[Column(Storage="_TotalSexyRatings", DbType="Int", CanBeNull=false)]
			public  override int TotalSexyRatings {
				get { return _TotalSexyRatings; }
				set {
					if (_TotalSexyRatings != value) {
						OnTotalSexyRatingsChanging(value);
						SendPropertyChanging();
						_TotalSexyRatings = value;
						SendPropertyChanged("TotalSexyRatings");
						OnTotalSexyRatingsChanged();
					}
				}
			}

			partial void OnWeightedCoolRatingChanging(double value);
			partial void OnWeightedCoolRatingChanged();
			private double _WeightedCoolRating;
			[Column(Storage="_WeightedCoolRating", DbType="Float", CanBeNull=false)]
			public  override double WeightedCoolRating {
				get { return _WeightedCoolRating; }
				set {
					if (_WeightedCoolRating != value) {
						OnWeightedCoolRatingChanging(value);
						SendPropertyChanging();
						_WeightedCoolRating = value;
						SendPropertyChanged("WeightedCoolRating");
						OnWeightedCoolRatingChanged();
					}
				}
			}

			partial void OnWeightedSexyRatingChanging(double value);
			partial void OnWeightedSexyRatingChanged();
			private double _WeightedSexyRating;
			[Column(Storage="_WeightedSexyRating", DbType="Float", CanBeNull=false)]
			public  override double WeightedSexyRating {
				get { return _WeightedSexyRating; }
				set {
					if (_WeightedSexyRating != value) {
						OnWeightedSexyRatingChanging(value);
						SendPropertyChanging();
						_WeightedSexyRating = value;
						SendPropertyChanged("WeightedSexyRating");
						OnWeightedSexyRatingChanged();
					}
				}
			}

			partial void OnMasterChanging(Guid value);
			partial void OnMasterChanged();
			private Guid _Master;
			[Column(Storage="_Master", DbType="UniqueIdentifier", CanBeNull=false)]
			public  override Guid Master {
				get { return _Master; }
				set {
					if (_Master != value) {
						OnMasterChanging(value);
						SendPropertyChanging();
						_Master = value;
						SendPropertyChanged("Master");
						OnMasterChanged();
					}
				}
			}

			partial void OnOriginalChanging(Guid value);
			partial void OnOriginalChanged();
			private Guid _Original;
			[Column(Storage="_Original", DbType="UniqueIdentifier", CanBeNull=false)]
			public  override Guid Original {
				get { return _Original; }
				set {
					if (_Original != value) {
						OnOriginalChanging(value);
						SendPropertyChanging();
						_Original = value;
						SendPropertyChanged("Original");
						OnOriginalChanged();
					}
				}
			}

			partial void OnIconChanging(Guid value);
			partial void OnIconChanged();
			private Guid _Icon;
			[Column(Storage="_Icon", DbType="UniqueIdentifier", CanBeNull=false)]
			public  override Guid Icon {
				get { return _Icon; }
				set {
					if (_Icon != value) {
						OnIconChanging(value);
						SendPropertyChanging();
						_Icon = value;
						SendPropertyChanged("Icon");
						OnIconChanged();
					}
				}
			}

			partial void OnThumbChanging(Guid value);
			partial void OnThumbChanged();
			private Guid _Thumb;
			[Column(Storage="_Thumb", DbType="UniqueIdentifier", CanBeNull=false)]
			public  override Guid Thumb {
				get { return _Thumb; }
				set {
					if (_Thumb != value) {
						OnThumbChanging(value);
						SendPropertyChanging();
						_Thumb = value;
						SendPropertyChanged("Thumb");
						OnThumbChanged();
					}
				}
			}

			partial void OnWebChanging(Guid value);
			partial void OnWebChanged();
			private Guid _Web;
			[Column(Storage="_Web", DbType="UniqueIdentifier", CanBeNull=false)]
			public  override Guid Web {
				get { return _Web; }
				set {
					if (_Web != value) {
						OnWebChanging(value);
						SendPropertyChanging();
						_Web = value;
						SendPropertyChanged("Web");
						OnWebChanged();
					}
				}
			}

			partial void OnOriginalWidthChanging(int value);
			partial void OnOriginalWidthChanged();
			private int _OriginalWidth;
			[Column(Storage="_OriginalWidth", DbType="Int", CanBeNull=false)]
			public  override int OriginalWidth {
				get { return _OriginalWidth; }
				set {
					if (_OriginalWidth != value) {
						OnOriginalWidthChanging(value);
						SendPropertyChanging();
						_OriginalWidth = value;
						SendPropertyChanged("OriginalWidth");
						OnOriginalWidthChanged();
					}
				}
			}

			partial void OnOriginalHeightChanging(int value);
			partial void OnOriginalHeightChanged();
			private int _OriginalHeight;
			[Column(Storage="_OriginalHeight", DbType="Int", CanBeNull=false)]
			public  override int OriginalHeight {
				get { return _OriginalHeight; }
				set {
					if (_OriginalHeight != value) {
						OnOriginalHeightChanging(value);
						SendPropertyChanging();
						_OriginalHeight = value;
						SendPropertyChanged("OriginalHeight");
						OnOriginalHeightChanged();
					}
				}
			}

			partial void OnWebWidthChanging(int value);
			partial void OnWebWidthChanged();
			private int _WebWidth;
			[Column(Storage="_WebWidth", DbType="Int", CanBeNull=false)]
			public  override int WebWidth {
				get { return _WebWidth; }
				set {
					if (_WebWidth != value) {
						OnWebWidthChanging(value);
						SendPropertyChanging();
						_WebWidth = value;
						SendPropertyChanged("WebWidth");
						OnWebWidthChanged();
					}
				}
			}

			partial void OnWebHeightChanging(int value);
			partial void OnWebHeightChanged();
			private int _WebHeight;
			[Column(Storage="_WebHeight", DbType="Int", CanBeNull=false)]
			public  override int WebHeight {
				get { return _WebHeight; }
				set {
					if (_WebHeight != value) {
						OnWebHeightChanging(value);
						SendPropertyChanging();
						_WebHeight = value;
						SendPropertyChanged("WebHeight");
						OnWebHeightChanged();
					}
				}
			}

			partial void OnThumbWidthChanging(int value);
			partial void OnThumbWidthChanged();
			private int _ThumbWidth;
			[Column(Storage="_ThumbWidth", DbType="Int", CanBeNull=false)]
			public  override int ThumbWidth {
				get { return _ThumbWidth; }
				set {
					if (_ThumbWidth != value) {
						OnThumbWidthChanging(value);
						SendPropertyChanging();
						_ThumbWidth = value;
						SendPropertyChanged("ThumbWidth");
						OnThumbWidthChanged();
					}
				}
			}

			partial void OnThumbHeightChanging(int value);
			partial void OnThumbHeightChanged();
			private int _ThumbHeight;
			[Column(Storage="_ThumbHeight", DbType="Int", CanBeNull=false)]
			public  override int ThumbHeight {
				get { return _ThumbHeight; }
				set {
					if (_ThumbHeight != value) {
						OnThumbHeightChanging(value);
						SendPropertyChanging();
						_ThumbHeight = value;
						SendPropertyChanged("ThumbHeight");
						OnThumbHeightChanged();
					}
				}
			}

			partial void OnIsLandscapeChanging(bool value);
			partial void OnIsLandscapeChanged();
			private bool _IsLandscape;
			[Column(Storage="_IsLandscape", DbType="Bit", CanBeNull=false)]
			public  override bool IsLandscape {
				get { return _IsLandscape; }
				set {
					if (_IsLandscape != value) {
						OnIsLandscapeChanging(value);
						SendPropertyChanging();
						_IsLandscape = value;
						SendPropertyChanged("IsLandscape");
						OnIsLandscapeChanged();
					}
				}
			}

			partial void OnAdminNoteChanging(string value);
			partial void OnAdminNoteChanged();
			private string _AdminNote;
			[Column(Storage="_AdminNote", DbType="Text", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
			public  override string AdminNote {
				get { return _AdminNote; }
				set {
					if (_AdminNote != value) {
						OnAdminNoteChanging(value);
						SendPropertyChanging();
						_AdminNote = value;
						SendPropertyChanged("AdminNote");
						OnAdminNoteChanged();
					}
				}
			}

			partial void OnEquipmentMakeChanging(string value);
			partial void OnEquipmentMakeChanged();
			private string _EquipmentMake;
			[Column(Storage="_EquipmentMake", DbType="VarChar(100)", CanBeNull=false)]
			public  override string EquipmentMake {
				get { return _EquipmentMake; }
				set {
					if (_EquipmentMake != value) {
						OnEquipmentMakeChanging(value);
						SendPropertyChanging();
						_EquipmentMake = value;
						SendPropertyChanged("EquipmentMake");
						OnEquipmentMakeChanged();
					}
				}
			}

			partial void OnCameraModelChanging(string value);
			partial void OnCameraModelChanged();
			private string _CameraModel;
			[Column(Storage="_CameraModel", DbType="VarChar(100)", CanBeNull=false)]
			public  override string CameraModel {
				get { return _CameraModel; }
				set {
					if (_CameraModel != value) {
						OnCameraModelChanging(value);
						SendPropertyChanging();
						_CameraModel = value;
						SendPropertyChanged("CameraModel");
						OnCameraModelChanged();
					}
				}
			}

			partial void OnOriginalFileSizeChanging(int value);
			partial void OnOriginalFileSizeChanged();
			private int _OriginalFileSize;
			[Column(Storage="_OriginalFileSize", DbType="Int", CanBeNull=false)]
			public  override int OriginalFileSize {
				get { return _OriginalFileSize; }
				set {
					if (_OriginalFileSize != value) {
						OnOriginalFileSizeChanging(value);
						SendPropertyChanging();
						_OriginalFileSize = value;
						SendPropertyChanged("OriginalFileSize");
						OnOriginalFileSizeChanged();
					}
				}
			}

			partial void OnMasterFileSizeChanging(int value);
			partial void OnMasterFileSizeChanged();
			private int _MasterFileSize;
			[Column(Storage="_MasterFileSize", DbType="Int", CanBeNull=false)]
			public  override int MasterFileSize {
				get { return _MasterFileSize; }
				set {
					if (_MasterFileSize != value) {
						OnMasterFileSizeChanging(value);
						SendPropertyChanging();
						_MasterFileSize = value;
						SendPropertyChanged("MasterFileSize");
						OnMasterFileSizeChanged();
					}
				}
			}

			partial void OnTotalCommentsChanging(int value);
			partial void OnTotalCommentsChanged();
			private int _TotalComments;
			[Column(Storage="_TotalComments", DbType="Int", CanBeNull=false)]
			public  override int TotalComments {
				get { return _TotalComments; }
				set {
					if (_TotalComments != value) {
						OnTotalCommentsChanging(value);
						SendPropertyChanging();
						_TotalComments = value;
						SendPropertyChanged("TotalComments");
						OnTotalCommentsChanged();
					}
				}
			}

			partial void OnLastPostChanging(DateTime value);
			partial void OnLastPostChanged();
			private DateTime _LastPost;
			[Column(Storage="_LastPost", DbType="DateTime", CanBeNull=false)]
			public  override DateTime LastPost {
				get { return _LastPost; }
				set {
					if (_LastPost != value) {
						OnLastPostChanging(value);
						SendPropertyChanging();
						_LastPost = value;
						SendPropertyChanged("LastPost");
						OnLastPostChanged();
					}
				}
			}

			partial void OnAverageCommentDateTimeChanging(DateTime value);
			partial void OnAverageCommentDateTimeChanged();
			private DateTime _AverageCommentDateTime;
			[Column(Storage="_AverageCommentDateTime", DbType="DateTime", CanBeNull=false)]
			public  override DateTime AverageCommentDateTime {
				get { return _AverageCommentDateTime; }
				set {
					if (_AverageCommentDateTime != value) {
						OnAverageCommentDateTimeChanging(value);
						SendPropertyChanging();
						_AverageCommentDateTime = value;
						SendPropertyChanged("AverageCommentDateTime");
						OnAverageCommentDateTimeChanged();
					}
				}
			}

			partial void OnCropChanging(Guid value);
			partial void OnCropChanged();
			private Guid _Crop;
			[Column(Storage="_Crop", DbType="UniqueIdentifier", CanBeNull=false)]
			public  override Guid Crop {
				get { return _Crop; }
				set {
					if (_Crop != value) {
						OnCropChanging(value);
						SendPropertyChanging();
						_Crop = value;
						SendPropertyChanged("Crop");
						OnCropChanged();
					}
				}
			}

			partial void OnDsiConvertedChanging(bool value);
			partial void OnDsiConvertedChanged();
			private bool _DsiConverted;
			[Column(Storage="_DsiConverted", DbType="Bit", CanBeNull=false)]
			public  override bool DsiConverted {
				get { return _DsiConverted; }
				set {
					if (_DsiConverted != value) {
						OnDsiConvertedChanging(value);
						SendPropertyChanging();
						_DsiConverted = value;
						SendPropertyChanged("DsiConverted");
						OnDsiConvertedChanged();
					}
				}
			}

			partial void OnPhotoOfWeekChanging(bool value);
			partial void OnPhotoOfWeekChanged();
			private bool _PhotoOfWeek;
			[Column(Storage="_PhotoOfWeek", DbType="Bit", CanBeNull=false)]
			public  override bool PhotoOfWeek {
				get { return _PhotoOfWeek; }
				set {
					if (_PhotoOfWeek != value) {
						OnPhotoOfWeekChanging(value);
						SendPropertyChanging();
						_PhotoOfWeek = value;
						SendPropertyChanged("PhotoOfWeek");
						OnPhotoOfWeekChanged();
					}
				}
			}

			partial void OnPhotoOfWeekDateTimeChanging(DateTime value);
			partial void OnPhotoOfWeekDateTimeChanged();
			private DateTime _PhotoOfWeekDateTime;
			[Column(Storage="_PhotoOfWeekDateTime", DbType="DateTime", CanBeNull=false)]
			public  override DateTime PhotoOfWeekDateTime {
				get { return _PhotoOfWeekDateTime; }
				set {
					if (_PhotoOfWeekDateTime != value) {
						OnPhotoOfWeekDateTimeChanging(value);
						SendPropertyChanging();
						_PhotoOfWeekDateTime = value;
						SendPropertyChanged("PhotoOfWeekDateTime");
						OnPhotoOfWeekDateTimeChanged();
					}
				}
			}

			partial void OnPhotoOfWeekCaptionChanging(string value);
			partial void OnPhotoOfWeekCaptionChanged();
			private string _PhotoOfWeekCaption;
			[Column(Storage="_PhotoOfWeekCaption", DbType="VarChar(255)", CanBeNull=false)]
			public  override string PhotoOfWeekCaption {
				get { return _PhotoOfWeekCaption; }
				set {
					if (_PhotoOfWeekCaption != value) {
						OnPhotoOfWeekCaptionChanging(value);
						SendPropertyChanging();
						_PhotoOfWeekCaption = value;
						SendPropertyChanged("PhotoOfWeekCaption");
						OnPhotoOfWeekCaptionChanged();
					}
				}
			}

			partial void OnRandomNumberChanging(double value);
			partial void OnRandomNumberChanged();
			private double _RandomNumber;
			[Column(Storage="_RandomNumber", DbType="Float", CanBeNull=false)]
			public  override double RandomNumber {
				get { return _RandomNumber; }
				set {
					if (_RandomNumber != value) {
						OnRandomNumberChanging(value);
						SendPropertyChanging();
						_RandomNumber = value;
						SendPropertyChanged("RandomNumber");
						OnRandomNumberChanged();
					}
				}
			}

			partial void OnContentDisabledChanging(bool value);
			partial void OnContentDisabledChanged();
			private bool _ContentDisabled;
			[Column(Storage="_ContentDisabled", DbType="Bit", CanBeNull=false)]
			public  override bool ContentDisabled {
				get { return _ContentDisabled; }
				set {
					if (_ContentDisabled != value) {
						OnContentDisabledChanging(value);
						SendPropertyChanging();
						_ContentDisabled = value;
						SendPropertyChanged("ContentDisabled");
						OnContentDisabledChanged();
					}
				}
			}

			partial void OnStatusChanging(Model.Entities.Photo.StatusEnum value);
			partial void OnStatusChanged();
			private Model.Entities.Photo.StatusEnum _Status;
			[Column(Storage="_Status", DbType="Int", CanBeNull=false)]
			public  override Model.Entities.Photo.StatusEnum Status {
				get { return _Status; }
				set {
					if (_Status != value) {
						OnStatusChanging(value);
						SendPropertyChanging();
						_Status = value;
						SendPropertyChanged("Status");
						OnStatusChanged();
					}
				}
			}

			partial void OnGalleryTimeOrderChanging(int value);
			partial void OnGalleryTimeOrderChanged();
			private int _GalleryTimeOrder;
			[Column(Storage="_GalleryTimeOrder", DbType="Int", CanBeNull=false)]
			public  override int GalleryTimeOrder {
				get { return _GalleryTimeOrder; }
				set {
					if (_GalleryTimeOrder != value) {
						OnGalleryTimeOrderChanging(value);
						SendPropertyChanging();
						_GalleryTimeOrder = value;
						SendPropertyChanged("GalleryTimeOrder");
						OnGalleryTimeOrderChanged();
					}
				}
			}

			partial void OnGalleryRatingOrderChanging(int value);
			partial void OnGalleryRatingOrderChanged();
			private int _GalleryRatingOrder;
			[Column(Storage="_GalleryRatingOrder", DbType="Int", CanBeNull=false)]
			public  override int GalleryRatingOrder {
				get { return _GalleryRatingOrder; }
				set {
					if (_GalleryRatingOrder != value) {
						OnGalleryRatingOrderChanging(value);
						SendPropertyChanging();
						_GalleryRatingOrder = value;
						SendPropertyChanged("GalleryRatingOrder");
						OnGalleryRatingOrderChanged();
					}
				}
			}

			partial void OnEnabledByUsrKChanging(int value);
			partial void OnEnabledByUsrKChanged();
			private int _EnabledByUsrK;
			[Column(Storage="_EnabledByUsrK", DbType="Int", CanBeNull=false)]
			public  override int EnabledByUsrK {
				get { return _EnabledByUsrK; }
				set {
					if (_EnabledByUsrK != value) {
						OnEnabledByUsrKChanging(value);
						SendPropertyChanging();
						_EnabledByUsrK = value;
						SendPropertyChanged("EnabledByUsrK");
						OnEnabledByUsrKChanged();
					}
				}
			}

			partial void OnEnabledDateTimeChanging(DateTime value);
			partial void OnEnabledDateTimeChanged();
			private DateTime _EnabledDateTime;
			[Column(Storage="_EnabledDateTime", DbType="DateTime", CanBeNull=false)]
			public  override DateTime EnabledDateTime {
				get { return _EnabledDateTime; }
				set {
					if (_EnabledDateTime != value) {
						OnEnabledDateTimeChanging(value);
						SendPropertyChanging();
						_EnabledDateTime = value;
						SendPropertyChanged("EnabledDateTime");
						OnEnabledDateTimeChanged();
					}
				}
			}

			partial void OnParentDateTimeChanging(DateTime value);
			partial void OnParentDateTimeChanged();
			private DateTime _ParentDateTime;
			[Column(Storage="_ParentDateTime", DbType="DateTime", CanBeNull=false)]
			public  override DateTime ParentDateTime {
				get { return _ParentDateTime; }
				set {
					if (_ParentDateTime != value) {
						OnParentDateTimeChanging(value);
						SendPropertyChanging();
						_ParentDateTime = value;
						SendPropertyChanged("ParentDateTime");
						OnParentDateTimeChanged();
					}
				}
			}

			partial void OnNextPhoto1KChanging(int value);
			partial void OnNextPhoto1KChanged();
			private int _NextPhoto1K;
			[Column(Storage="_NextPhoto1K", DbType="Int", CanBeNull=false)]
			public  override int NextPhoto1K {
				get { return _NextPhoto1K; }
				set {
					if (_NextPhoto1K != value) {
						OnNextPhoto1KChanging(value);
						SendPropertyChanging();
						_NextPhoto1K = value;
						SendPropertyChanged("NextPhoto1K");
						OnNextPhoto1KChanged();
					}
				}
			}

			partial void OnNextPhoto2KChanging(int value);
			partial void OnNextPhoto2KChanged();
			private int _NextPhoto2K;
			[Column(Storage="_NextPhoto2K", DbType="Int", CanBeNull=false)]
			public  override int NextPhoto2K {
				get { return _NextPhoto2K; }
				set {
					if (_NextPhoto2K != value) {
						OnNextPhoto2KChanging(value);
						SendPropertyChanging();
						_NextPhoto2K = value;
						SendPropertyChanged("NextPhoto2K");
						OnNextPhoto2KChanged();
					}
				}
			}

			partial void OnNextPhoto3KChanging(int value);
			partial void OnNextPhoto3KChanged();
			private int _NextPhoto3K;
			[Column(Storage="_NextPhoto3K", DbType="Int", CanBeNull=false)]
			public  override int NextPhoto3K {
				get { return _NextPhoto3K; }
				set {
					if (_NextPhoto3K != value) {
						OnNextPhoto3KChanging(value);
						SendPropertyChanging();
						_NextPhoto3K = value;
						SendPropertyChanged("NextPhoto3K");
						OnNextPhoto3KChanged();
					}
				}
			}

			partial void OnPreviousPhoto1KChanging(int value);
			partial void OnPreviousPhoto1KChanged();
			private int _PreviousPhoto1K;
			[Column(Storage="_PreviousPhoto1K", DbType="Int", CanBeNull=false)]
			public  override int PreviousPhoto1K {
				get { return _PreviousPhoto1K; }
				set {
					if (_PreviousPhoto1K != value) {
						OnPreviousPhoto1KChanging(value);
						SendPropertyChanging();
						_PreviousPhoto1K = value;
						SendPropertyChanged("PreviousPhoto1K");
						OnPreviousPhoto1KChanged();
					}
				}
			}

			partial void OnPreviousPhoto2KChanging(int value);
			partial void OnPreviousPhoto2KChanged();
			private int _PreviousPhoto2K;
			[Column(Storage="_PreviousPhoto2K", DbType="Int", CanBeNull=false)]
			public  override int PreviousPhoto2K {
				get { return _PreviousPhoto2K; }
				set {
					if (_PreviousPhoto2K != value) {
						OnPreviousPhoto2KChanging(value);
						SendPropertyChanging();
						_PreviousPhoto2K = value;
						SendPropertyChanged("PreviousPhoto2K");
						OnPreviousPhoto2KChanged();
					}
				}
			}

			partial void OnPreviousPhoto3KChanging(int value);
			partial void OnPreviousPhoto3KChanged();
			private int _PreviousPhoto3K;
			[Column(Storage="_PreviousPhoto3K", DbType="Int", CanBeNull=false)]
			public  override int PreviousPhoto3K {
				get { return _PreviousPhoto3K; }
				set {
					if (_PreviousPhoto3K != value) {
						OnPreviousPhoto3KChanging(value);
						SendPropertyChanging();
						_PreviousPhoto3K = value;
						SendPropertyChanged("PreviousPhoto3K");
						OnPreviousPhoto3KChanged();
					}
				}
			}

			partial void OnUrlFragmentChanging(string value);
			partial void OnUrlFragmentChanged();
			private string _UrlFragment;
			[Column(Storage="_UrlFragment", DbType="VarChar(255)", CanBeNull=false)]
			public  override string UrlFragment {
				get { return _UrlFragment; }
				set {
					if (_UrlFragment != value) {
						OnUrlFragmentChanging(value);
						SendPropertyChanging();
						_UrlFragment = value;
						SendPropertyChanged("UrlFragment");
						OnUrlFragmentChanged();
					}
				}
			}

			partial void OnUsrCountChanging(int value);
			partial void OnUsrCountChanged();
			private int _UsrCount;
			[Column(Storage="_UsrCount", DbType="Int", CanBeNull=false)]
			public  override int UsrCount {
				get { return _UsrCount; }
				set {
					if (_UsrCount != value) {
						OnUsrCountChanging(value);
						SendPropertyChanging();
						_UsrCount = value;
						SendPropertyChanged("UsrCount");
						OnUsrCountChanged();
					}
				}
			}

			partial void OnFirstUsrKChanging(int value);
			partial void OnFirstUsrKChanged();
			private int _FirstUsrK;
			[Column(Storage="_FirstUsrK", DbType="Int", CanBeNull=false)]
			public  override int FirstUsrK {
				get { return _FirstUsrK; }
				set {
					if (_FirstUsrK != value) {
						OnFirstUsrKChanging(value);
						SendPropertyChanging();
						_FirstUsrK = value;
						SendPropertyChanged("FirstUsrK");
						OnFirstUsrKChanged();
					}
				}
			}

			partial void OnIsMasterCompressedChanging(bool value);
			partial void OnIsMasterCompressedChanged();
			private bool _IsMasterCompressed;
			[Column(Storage="_IsMasterCompressed", DbType="Bit", CanBeNull=false)]
			public  override bool IsMasterCompressed {
				get { return _IsMasterCompressed; }
				set {
					if (_IsMasterCompressed != value) {
						OnIsMasterCompressedChanging(value);
						SendPropertyChanging();
						_IsMasterCompressed = value;
						SendPropertyChanged("IsMasterCompressed");
						OnIsMasterCompressedChanged();
					}
				}
			}

			partial void OnIsProcessingChanging(bool value);
			partial void OnIsProcessingChanged();
			private bool _IsProcessing;
			[Column(Storage="_IsProcessing", DbType="Bit", CanBeNull=false)]
			public  override bool IsProcessing {
				get { return _IsProcessing; }
				set {
					if (_IsProcessing != value) {
						OnIsProcessingChanging(value);
						SendPropertyChanging();
						_IsProcessing = value;
						SendPropertyChanged("IsProcessing");
						OnIsProcessingChanged();
					}
				}
			}

			partial void OnMediaTypeChanging(Model.Entities.Photo.MediaTypes value);
			partial void OnMediaTypeChanged();
			private Model.Entities.Photo.MediaTypes _MediaType;
			[Column(Storage="_MediaType", DbType="Int", CanBeNull=false)]
			public  override Model.Entities.Photo.MediaTypes MediaType {
				get { return _MediaType; }
				set {
					if (_MediaType != value) {
						OnMediaTypeChanging(value);
						SendPropertyChanging();
						_MediaType = value;
						SendPropertyChanged("MediaType");
						OnMediaTypeChanged();
					}
				}
			}

			partial void OnProcessingProgressChanging(int value);
			partial void OnProcessingProgressChanged();
			private int _ProcessingProgress;
			[Column(Storage="_ProcessingProgress", DbType="Int", CanBeNull=false)]
			public  override int ProcessingProgress {
				get { return _ProcessingProgress; }
				set {
					if (_ProcessingProgress != value) {
						OnProcessingProgressChanging(value);
						SendPropertyChanging();
						_ProcessingProgress = value;
						SendPropertyChanged("ProcessingProgress");
						OnProcessingProgressChanged();
					}
				}
			}

			partial void OnProcessingStartDateTimeChanging(DateTime? value);
			partial void OnProcessingStartDateTimeChanged();
			private DateTime? _ProcessingStartDateTime;
			[Column(Storage="_ProcessingStartDateTime", DbType="DateTime")]
			public  override DateTime? ProcessingStartDateTime {
				get { return _ProcessingStartDateTime; }
				set {
					if (_ProcessingStartDateTime != value) {
						OnProcessingStartDateTimeChanging(value);
						SendPropertyChanging();
						_ProcessingStartDateTime = value;
						SendPropertyChanged("ProcessingStartDateTime");
						OnProcessingStartDateTimeChanged();
					}
				}
			}

			partial void OnVideoLoChanging(Guid value);
			partial void OnVideoLoChanged();
			private Guid _VideoLo;
			[Column(Storage="_VideoLo", DbType="UniqueIdentifier", CanBeNull=false)]
			public  override Guid VideoLo {
				get { return _VideoLo; }
				set {
					if (_VideoLo != value) {
						OnVideoLoChanging(value);
						SendPropertyChanging();
						_VideoLo = value;
						SendPropertyChanged("VideoLo");
						OnVideoLoChanged();
					}
				}
			}

			partial void OnVideoMedChanging(Guid value);
			partial void OnVideoMedChanged();
			private Guid _VideoMed;
			[Column(Storage="_VideoMed", DbType="UniqueIdentifier", CanBeNull=false)]
			public  override Guid VideoMed {
				get { return _VideoMed; }
				set {
					if (_VideoMed != value) {
						OnVideoMedChanging(value);
						SendPropertyChanging();
						_VideoMed = value;
						SendPropertyChanged("VideoMed");
						OnVideoMedChanged();
					}
				}
			}

			partial void OnVideoHiChanging(Guid value);
			partial void OnVideoHiChanged();
			private Guid _VideoHi;
			[Column(Storage="_VideoHi", DbType="UniqueIdentifier", CanBeNull=false)]
			public  override Guid VideoHi {
				get { return _VideoHi; }
				set {
					if (_VideoHi != value) {
						OnVideoHiChanging(value);
						SendPropertyChanging();
						_VideoHi = value;
						SendPropertyChanged("VideoHi");
						OnVideoHiChanged();
					}
				}
			}

			partial void OnAudioLoChanging(Guid value);
			partial void OnAudioLoChanged();
			private Guid _AudioLo;
			[Column(Storage="_AudioLo", DbType="UniqueIdentifier", CanBeNull=false)]
			public  override Guid AudioLo {
				get { return _AudioLo; }
				set {
					if (_AudioLo != value) {
						OnAudioLoChanging(value);
						SendPropertyChanging();
						_AudioLo = value;
						SendPropertyChanged("AudioLo");
						OnAudioLoChanged();
					}
				}
			}

			partial void OnAudioMedChanging(Guid value);
			partial void OnAudioMedChanged();
			private Guid _AudioMed;
			[Column(Storage="_AudioMed", DbType="UniqueIdentifier", CanBeNull=false)]
			public  override Guid AudioMed {
				get { return _AudioMed; }
				set {
					if (_AudioMed != value) {
						OnAudioMedChanging(value);
						SendPropertyChanging();
						_AudioMed = value;
						SendPropertyChanged("AudioMed");
						OnAudioMedChanged();
					}
				}
			}

			partial void OnAudioHiChanging(Guid value);
			partial void OnAudioHiChanged();
			private Guid _AudioHi;
			[Column(Storage="_AudioHi", DbType="UniqueIdentifier", CanBeNull=false)]
			public  override Guid AudioHi {
				get { return _AudioHi; }
				set {
					if (_AudioHi != value) {
						OnAudioHiChanging(value);
						SendPropertyChanging();
						_AudioHi = value;
						SendPropertyChanged("AudioHi");
						OnAudioHiChanged();
					}
				}
			}

			partial void OnAudioMasterChanging(Guid value);
			partial void OnAudioMasterChanged();
			private Guid _AudioMaster;
			[Column(Storage="_AudioMaster", DbType="UniqueIdentifier", CanBeNull=false)]
			public  override Guid AudioMaster {
				get { return _AudioMaster; }
				set {
					if (_AudioMaster != value) {
						OnAudioMasterChanging(value);
						SendPropertyChanging();
						_AudioMaster = value;
						SendPropertyChanged("AudioMaster");
						OnAudioMasterChanged();
					}
				}
			}

			partial void OnVideoMasterChanging(Guid value);
			partial void OnVideoMasterChanged();
			private Guid _VideoMaster;
			[Column(Storage="_VideoMaster", DbType="UniqueIdentifier", CanBeNull=false)]
			public  override Guid VideoMaster {
				get { return _VideoMaster; }
				set {
					if (_VideoMaster != value) {
						OnVideoMasterChanging(value);
						SendPropertyChanging();
						_VideoMaster = value;
						SendPropertyChanged("VideoMaster");
						OnVideoMasterChanged();
					}
				}
			}

			partial void OnAudioFileExtentionChanging(string value);
			partial void OnAudioFileExtentionChanged();
			private string _AudioFileExtention;
			[Column(Storage="_AudioFileExtention", DbType="VarChar(4)", CanBeNull=false)]
			public  override string AudioFileExtention {
				get { return _AudioFileExtention; }
				set {
					if (_AudioFileExtention != value) {
						OnAudioFileExtentionChanging(value);
						SendPropertyChanging();
						_AudioFileExtention = value;
						SendPropertyChanged("AudioFileExtention");
						OnAudioFileExtentionChanged();
					}
				}
			}

			partial void OnVideoFileExtentionChanging(string value);
			partial void OnVideoFileExtentionChanged();
			private string _VideoFileExtention;
			[Column(Storage="_VideoFileExtention", DbType="VarChar(4)", CanBeNull=false)]
			public  override string VideoFileExtention {
				get { return _VideoFileExtention; }
				set {
					if (_VideoFileExtention != value) {
						OnVideoFileExtentionChanging(value);
						SendPropertyChanging();
						_VideoFileExtention = value;
						SendPropertyChanged("VideoFileExtention");
						OnVideoFileExtentionChanged();
					}
				}
			}

			partial void OnVideoMasterFileSizeChanging(int value);
			partial void OnVideoMasterFileSizeChanged();
			private int _VideoMasterFileSize;
			[Column(Storage="_VideoMasterFileSize", DbType="Int", CanBeNull=false)]
			public  override int VideoMasterFileSize {
				get { return _VideoMasterFileSize; }
				set {
					if (_VideoMasterFileSize != value) {
						OnVideoMasterFileSizeChanging(value);
						SendPropertyChanging();
						_VideoMasterFileSize = value;
						SendPropertyChanged("VideoMasterFileSize");
						OnVideoMasterFileSizeChanged();
					}
				}
			}

			partial void OnAudioMasterFileSizeChanging(int value);
			partial void OnAudioMasterFileSizeChanged();
			private int _AudioMasterFileSize;
			[Column(Storage="_AudioMasterFileSize", DbType="Int", CanBeNull=false)]
			public  override int AudioMasterFileSize {
				get { return _AudioMasterFileSize; }
				set {
					if (_AudioMasterFileSize != value) {
						OnAudioMasterFileSizeChanging(value);
						SendPropertyChanging();
						_AudioMasterFileSize = value;
						SendPropertyChanged("AudioMasterFileSize");
						OnAudioMasterFileSizeChanged();
					}
				}
			}

			partial void OnVideoMasterFramerateChanging(double value);
			partial void OnVideoMasterFramerateChanged();
			private double _VideoMasterFramerate;
			[Column(Storage="_VideoMasterFramerate", DbType="Float", CanBeNull=false)]
			public  override double VideoMasterFramerate {
				get { return _VideoMasterFramerate; }
				set {
					if (_VideoMasterFramerate != value) {
						OnVideoMasterFramerateChanging(value);
						SendPropertyChanging();
						_VideoMasterFramerate = value;
						SendPropertyChanged("VideoMasterFramerate");
						OnVideoMasterFramerateChanged();
					}
				}
			}

			partial void OnVideoMasterHeightChanging(int value);
			partial void OnVideoMasterHeightChanged();
			private int _VideoMasterHeight;
			[Column(Storage="_VideoMasterHeight", DbType="Int", CanBeNull=false)]
			public  override int VideoMasterHeight {
				get { return _VideoMasterHeight; }
				set {
					if (_VideoMasterHeight != value) {
						OnVideoMasterHeightChanging(value);
						SendPropertyChanging();
						_VideoMasterHeight = value;
						SendPropertyChanged("VideoMasterHeight");
						OnVideoMasterHeightChanged();
					}
				}
			}

			partial void OnVideoMasterWidthChanging(int value);
			partial void OnVideoMasterWidthChanged();
			private int _VideoMasterWidth;
			[Column(Storage="_VideoMasterWidth", DbType="Int", CanBeNull=false)]
			public  override int VideoMasterWidth {
				get { return _VideoMasterWidth; }
				set {
					if (_VideoMasterWidth != value) {
						OnVideoMasterWidthChanging(value);
						SendPropertyChanging();
						_VideoMasterWidth = value;
						SendPropertyChanged("VideoMasterWidth");
						OnVideoMasterWidthChanged();
					}
				}
			}

			partial void OnVideoDurationChanging(int value);
			partial void OnVideoDurationChanged();
			private int _VideoDuration;
			[Column(Storage="_VideoDuration", DbType="Int", CanBeNull=false)]
			public  override int VideoDuration {
				get { return _VideoDuration; }
				set {
					if (_VideoDuration != value) {
						OnVideoDurationChanging(value);
						SendPropertyChanging();
						_VideoDuration = value;
						SendPropertyChanged("VideoDuration");
						OnVideoDurationChanged();
					}
				}
			}

			partial void OnAudioDurationChanging(int value);
			partial void OnAudioDurationChanged();
			private int _AudioDuration;
			[Column(Storage="_AudioDuration", DbType="Int", CanBeNull=false)]
			public  override int AudioDuration {
				get { return _AudioDuration; }
				set {
					if (_AudioDuration != value) {
						OnAudioDurationChanging(value);
						SendPropertyChanging();
						_AudioDuration = value;
						SendPropertyChanged("AudioDuration");
						OnAudioDurationChanged();
					}
				}
			}

			partial void OnProcessingLastChangeChanging(DateTime? value);
			partial void OnProcessingLastChangeChanged();
			private DateTime? _ProcessingLastChange;
			[Column(Storage="_ProcessingLastChange", DbType="DateTime")]
			public  override DateTime? ProcessingLastChange {
				get { return _ProcessingLastChange; }
				set {
					if (_ProcessingLastChange != value) {
						OnProcessingLastChangeChanging(value);
						SendPropertyChanging();
						_ProcessingLastChange = value;
						SendPropertyChanged("ProcessingLastChange");
						OnProcessingLastChangeChanged();
					}
				}
			}

			partial void OnVideoLoFramerateChanging(double value);
			partial void OnVideoLoFramerateChanged();
			private double _VideoLoFramerate;
			[Column(Storage="_VideoLoFramerate", DbType="Float", CanBeNull=false)]
			public  override double VideoLoFramerate {
				get { return _VideoLoFramerate; }
				set {
					if (_VideoLoFramerate != value) {
						OnVideoLoFramerateChanging(value);
						SendPropertyChanging();
						_VideoLoFramerate = value;
						SendPropertyChanged("VideoLoFramerate");
						OnVideoLoFramerateChanged();
					}
				}
			}

			partial void OnVideoMedFramerateChanging(double value);
			partial void OnVideoMedFramerateChanged();
			private double _VideoMedFramerate;
			[Column(Storage="_VideoMedFramerate", DbType="Float", CanBeNull=false)]
			public  override double VideoMedFramerate {
				get { return _VideoMedFramerate; }
				set {
					if (_VideoMedFramerate != value) {
						OnVideoMedFramerateChanging(value);
						SendPropertyChanging();
						_VideoMedFramerate = value;
						SendPropertyChanged("VideoMedFramerate");
						OnVideoMedFramerateChanged();
					}
				}
			}

			partial void OnVideoHiFramerateChanging(double value);
			partial void OnVideoHiFramerateChanged();
			private double _VideoHiFramerate;
			[Column(Storage="_VideoHiFramerate", DbType="Float", CanBeNull=false)]
			public  override double VideoHiFramerate {
				get { return _VideoHiFramerate; }
				set {
					if (_VideoHiFramerate != value) {
						OnVideoHiFramerateChanging(value);
						SendPropertyChanging();
						_VideoHiFramerate = value;
						SendPropertyChanged("VideoHiFramerate");
						OnVideoHiFramerateChanged();
					}
				}
			}

			partial void OnVideoLoHeightChanging(int value);
			partial void OnVideoLoHeightChanged();
			private int _VideoLoHeight;
			[Column(Storage="_VideoLoHeight", DbType="Int", CanBeNull=false)]
			public  override int VideoLoHeight {
				get { return _VideoLoHeight; }
				set {
					if (_VideoLoHeight != value) {
						OnVideoLoHeightChanging(value);
						SendPropertyChanging();
						_VideoLoHeight = value;
						SendPropertyChanged("VideoLoHeight");
						OnVideoLoHeightChanged();
					}
				}
			}

			partial void OnVideoMedHeightChanging(int value);
			partial void OnVideoMedHeightChanged();
			private int _VideoMedHeight;
			[Column(Storage="_VideoMedHeight", DbType="Int", CanBeNull=false)]
			public  override int VideoMedHeight {
				get { return _VideoMedHeight; }
				set {
					if (_VideoMedHeight != value) {
						OnVideoMedHeightChanging(value);
						SendPropertyChanging();
						_VideoMedHeight = value;
						SendPropertyChanged("VideoMedHeight");
						OnVideoMedHeightChanged();
					}
				}
			}

			partial void OnVideoHiHeightChanging(int value);
			partial void OnVideoHiHeightChanged();
			private int _VideoHiHeight;
			[Column(Storage="_VideoHiHeight", DbType="Int", CanBeNull=false)]
			public  override int VideoHiHeight {
				get { return _VideoHiHeight; }
				set {
					if (_VideoHiHeight != value) {
						OnVideoHiHeightChanging(value);
						SendPropertyChanging();
						_VideoHiHeight = value;
						SendPropertyChanged("VideoHiHeight");
						OnVideoHiHeightChanged();
					}
				}
			}

			partial void OnVideoLoWidthChanging(int value);
			partial void OnVideoLoWidthChanged();
			private int _VideoLoWidth;
			[Column(Storage="_VideoLoWidth", DbType="Int", CanBeNull=false)]
			public  override int VideoLoWidth {
				get { return _VideoLoWidth; }
				set {
					if (_VideoLoWidth != value) {
						OnVideoLoWidthChanging(value);
						SendPropertyChanging();
						_VideoLoWidth = value;
						SendPropertyChanged("VideoLoWidth");
						OnVideoLoWidthChanged();
					}
				}
			}

			partial void OnVideoMedWidthChanging(int value);
			partial void OnVideoMedWidthChanged();
			private int _VideoMedWidth;
			[Column(Storage="_VideoMedWidth", DbType="Int", CanBeNull=false)]
			public  override int VideoMedWidth {
				get { return _VideoMedWidth; }
				set {
					if (_VideoMedWidth != value) {
						OnVideoMedWidthChanging(value);
						SendPropertyChanging();
						_VideoMedWidth = value;
						SendPropertyChanged("VideoMedWidth");
						OnVideoMedWidthChanged();
					}
				}
			}

			partial void OnVideoHiWidthChanging(int value);
			partial void OnVideoHiWidthChanged();
			private int _VideoHiWidth;
			[Column(Storage="_VideoHiWidth", DbType="Int", CanBeNull=false)]
			public  override int VideoHiWidth {
				get { return _VideoHiWidth; }
				set {
					if (_VideoHiWidth != value) {
						OnVideoHiWidthChanging(value);
						SendPropertyChanging();
						_VideoHiWidth = value;
						SendPropertyChanged("VideoHiWidth");
						OnVideoHiWidthChanged();
					}
				}
			}

			partial void OnProcessingAttemptsChanging(int value);
			partial void OnProcessingAttemptsChanged();
			private int _ProcessingAttempts;
			[Column(Storage="_ProcessingAttempts", DbType="Int", CanBeNull=false)]
			public  override int ProcessingAttempts {
				get { return _ProcessingAttempts; }
				set {
					if (_ProcessingAttempts != value) {
						OnProcessingAttemptsChanging(value);
						SendPropertyChanging();
						_ProcessingAttempts = value;
						SendPropertyChanged("ProcessingAttempts");
						OnProcessingAttemptsChanged();
					}
				}
			}

			partial void OnOriginalHitsTodayChanging(int value);
			partial void OnOriginalHitsTodayChanged();
			private int _OriginalHitsToday;
			[Column(Storage="_OriginalHitsToday", DbType="Int", CanBeNull=false)]
			public  override int OriginalHitsToday {
				get { return _OriginalHitsToday; }
				set {
					if (_OriginalHitsToday != value) {
						OnOriginalHitsTodayChanging(value);
						SendPropertyChanging();
						_OriginalHitsToday = value;
						SendPropertyChanged("OriginalHitsToday");
						OnOriginalHitsTodayChanged();
					}
				}
			}

			partial void OnOriginalHitsDateChanging(DateTime value);
			partial void OnOriginalHitsDateChanged();
			private DateTime _OriginalHitsDate;
			[Column(Storage="_OriginalHitsDate", DbType="DateTime", CanBeNull=false)]
			public  override DateTime OriginalHitsDate {
				get { return _OriginalHitsDate; }
				set {
					if (_OriginalHitsDate != value) {
						OnOriginalHitsDateChanging(value);
						SendPropertyChanging();
						_OriginalHitsDate = value;
						SendPropertyChanged("OriginalHitsDate");
						OnOriginalHitsDateChanged();
					}
				}
			}

			partial void OnProcessingServerNameChanging(string value);
			partial void OnProcessingServerNameChanged();
			private string _ProcessingServerName;
			[Column(Storage="_ProcessingServerName", DbType="VarChar(50)", CanBeNull=false)]
			public  override string ProcessingServerName {
				get { return _ProcessingServerName; }
				set {
					if (_ProcessingServerName != value) {
						OnProcessingServerNameChanging(value);
						SendPropertyChanging();
						_ProcessingServerName = value;
						SendPropertyChanged("ProcessingServerName");
						OnProcessingServerNameChanged();
					}
				}
			}

			partial void OnIsSonyK800iChanging(bool value);
			partial void OnIsSonyK800iChanged();
			private bool _IsSonyK800i;
			[Column(Storage="_IsSonyK800i", DbType="Bit", CanBeNull=false)]
			public  override bool IsSonyK800i {
				get { return _IsSonyK800i; }
				set {
					if (_IsSonyK800i != value) {
						OnIsSonyK800iChanging(value);
						SendPropertyChanging();
						_IsSonyK800i = value;
						SendPropertyChanged("IsSonyK800i");
						OnIsSonyK800iChanged();
					}
				}
			}

			partial void OnIsInCaptionCompetitionChanging(bool value);
			partial void OnIsInCaptionCompetitionChanged();
			private bool _IsInCaptionCompetition;
			[Column(Storage="_IsInCaptionCompetition", DbType="Bit", CanBeNull=false)]
			public  override bool IsInCaptionCompetition {
				get { return _IsInCaptionCompetition; }
				set {
					if (_IsInCaptionCompetition != value) {
						OnIsInCaptionCompetitionChanging(value);
						SendPropertyChanging();
						_IsInCaptionCompetition = value;
						SendPropertyChanged("IsInCaptionCompetition");
						OnIsInCaptionCompetitionChanged();
					}
				}
			}

			partial void OnRotateChanging(int value);
			partial void OnRotateChanged();
			private int _Rotate;
			[Column(Storage="_Rotate", DbType="Int", CanBeNull=false)]
			public  override int Rotate {
				get { return _Rotate; }
				set {
					if (_Rotate != value) {
						OnRotateChanging(value);
						SendPropertyChanging();
						_Rotate = value;
						SendPropertyChanged("Rotate");
						OnRotateChanged();
					}
				}
			}

			partial void OnUploadTemporaryChanging(Guid value);
			partial void OnUploadTemporaryChanged();
			private Guid _UploadTemporary;
			[Column(Storage="_UploadTemporary", DbType="UniqueIdentifier", CanBeNull=false)]
			public  override Guid UploadTemporary {
				get { return _UploadTemporary; }
				set {
					if (_UploadTemporary != value) {
						OnUploadTemporaryChanging(value);
						SendPropertyChanging();
						_UploadTemporary = value;
						SendPropertyChanged("UploadTemporary");
						OnUploadTemporaryChanged();
					}
				}
			}

			partial void OnUploadTemporaryExtentionChanging(string value);
			partial void OnUploadTemporaryExtentionChanged();
			private string _UploadTemporaryExtention;
			[Column(Storage="_UploadTemporaryExtention", DbType="VarChar(10)", CanBeNull=false)]
			public  override string UploadTemporaryExtention {
				get { return _UploadTemporaryExtention; }
				set {
					if (_UploadTemporaryExtention != value) {
						OnUploadTemporaryExtentionChanging(value);
						SendPropertyChanging();
						_UploadTemporaryExtention = value;
						SendPropertyChanged("UploadTemporaryExtention");
						OnUploadTemporaryExtentionChanged();
					}
				}
			}

			partial void OnOverlayChanging(Model.Entities.Photo.Overlays value);
			partial void OnOverlayChanged();
			private Model.Entities.Photo.Overlays _Overlay;
			[Column(Storage="_Overlay", DbType="Int", CanBeNull=false)]
			public  override Model.Entities.Photo.Overlays Overlay {
				get { return _Overlay; }
				set {
					if (_Overlay != value) {
						OnOverlayChanging(value);
						SendPropertyChanging();
						_Overlay = value;
						SendPropertyChanged("Overlay");
						OnOverlayChanged();
					}
				}
			}

			partial void OnUploadTemporaryTagsChanging(string value);
			partial void OnUploadTemporaryTagsChanged();
			private string _UploadTemporaryTags;
			[Column(Storage="_UploadTemporaryTags", DbType="VarChar(512)", CanBeNull=false)]
			public  override string UploadTemporaryTags {
				get { return _UploadTemporaryTags; }
				set {
					if (_UploadTemporaryTags != value) {
						OnUploadTemporaryTagsChanging(value);
						SendPropertyChanging();
						_UploadTemporaryTags = value;
						SendPropertyChanged("UploadTemporaryTags");
						OnUploadTemporaryTagsChanged();
					}
				}
			}

			partial void OnDoneAmazonPixMasterChanging(bool value);
			partial void OnDoneAmazonPixMasterChanged();
			private bool _DoneAmazonPixMaster;
			[Column(Storage="_DoneAmazonPixMaster", DbType="Bit", CanBeNull=false)]
			public  override bool DoneAmazonPixMaster {
				get { return _DoneAmazonPixMaster; }
				set {
					if (_DoneAmazonPixMaster != value) {
						OnDoneAmazonPixMasterChanging(value);
						SendPropertyChanging();
						_DoneAmazonPixMaster = value;
						SendPropertyChanged("DoneAmazonPixMaster");
						OnDoneAmazonPixMasterChanged();
					}
				}
			}

			partial void OnIsSonyC902Changing(bool value);
			partial void OnIsSonyC902Changed();
			private bool _IsSonyC902;
			[Column(Storage="_IsSonyC902", DbType="Bit", CanBeNull=false)]
			public  override bool IsSonyC902 {
				get { return _IsSonyC902; }
				set {
					if (_IsSonyC902 != value) {
						OnIsSonyC902Changing(value);
						SendPropertyChanging();
						_IsSonyC902 = value;
						SendPropertyChanged("IsSonyC902");
						OnIsSonyC902Changed();
					}
				}
			}

			partial void OnPhotoOfWeekUserChanging(bool value);
			partial void OnPhotoOfWeekUserChanged();
			private bool _PhotoOfWeekUser;
			[Column(Storage="_PhotoOfWeekUser", DbType="Bit", CanBeNull=false)]
			public  override bool PhotoOfWeekUser {
				get { return _PhotoOfWeekUser; }
				set {
					if (_PhotoOfWeekUser != value) {
						OnPhotoOfWeekUserChanging(value);
						SendPropertyChanging();
						_PhotoOfWeekUser = value;
						SendPropertyChanged("PhotoOfWeekUser");
						OnPhotoOfWeekUserChanged();
					}
				}
			}

			partial void OnPhotoOfWeekUserCaptionChanging(string value);
			partial void OnPhotoOfWeekUserCaptionChanged();
			private string _PhotoOfWeekUserCaption;
			[Column(Storage="_PhotoOfWeekUserCaption", DbType="VarChar(200)")]
			public  override string PhotoOfWeekUserCaption {
				get { return _PhotoOfWeekUserCaption; }
				set {
					if (_PhotoOfWeekUserCaption != value) {
						OnPhotoOfWeekUserCaptionChanging(value);
						SendPropertyChanging();
						_PhotoOfWeekUserCaption = value;
						SendPropertyChanged("PhotoOfWeekUserCaption");
						OnPhotoOfWeekUserCaptionChanged();
					}
				}
			}

			partial void OnPhotoOfWeekUserDateTimeChanging(DateTime? value);
			partial void OnPhotoOfWeekUserDateTimeChanged();
			private DateTime? _PhotoOfWeekUserDateTime;
			[Column(Storage="_PhotoOfWeekUserDateTime", DbType="DateTime")]
			public  override DateTime? PhotoOfWeekUserDateTime {
				get { return _PhotoOfWeekUserDateTime; }
				set {
					if (_PhotoOfWeekUserDateTime != value) {
						OnPhotoOfWeekUserDateTimeChanging(value);
						SendPropertyChanging();
						_PhotoOfWeekUserDateTime = value;
						SendPropertyChanged("PhotoOfWeekUserDateTime");
						OnPhotoOfWeekUserDateTimeChanged();
					}
				}
			}

			partial void OnBlockedFromPhotoOfWeekUserChanging(bool value);
			partial void OnBlockedFromPhotoOfWeekUserChanged();
			private bool _BlockedFromPhotoOfWeekUser;
			[Column(Storage="_BlockedFromPhotoOfWeekUser", DbType="Bit", CanBeNull=false)]
			public  override bool BlockedFromPhotoOfWeekUser {
				get { return _BlockedFromPhotoOfWeekUser; }
				set {
					if (_BlockedFromPhotoOfWeekUser != value) {
						OnBlockedFromPhotoOfWeekUserChanging(value);
						SendPropertyChanging();
						_BlockedFromPhotoOfWeekUser = value;
						SendPropertyChanged("BlockedFromPhotoOfWeekUser");
						OnBlockedFromPhotoOfWeekUserChanged();
					}
				}
			}

			partial void OnFrontPagePicChanging(Guid? value);
			partial void OnFrontPagePicChanged();
			private Guid? _FrontPagePic;
			[Column(Storage="_FrontPagePic", DbType="UniqueIdentifier")]
			public  override Guid? FrontPagePic {
				get { return _FrontPagePic; }
				set {
					if (_FrontPagePic != value) {
						OnFrontPagePicChanging(value);
						SendPropertyChanging();
						_FrontPagePic = value;
						SendPropertyChanged("FrontPagePic");
						OnFrontPagePicChanged();
					}
				}
			}

			partial void OnFrontPagePicStateChanging(string value);
			partial void OnFrontPagePicStateChanged();
			private string _FrontPagePicState;
			[Column(Storage="_FrontPagePicState", DbType="VarChar(100)")]
			public  override string FrontPagePicState {
				get { return _FrontPagePicState; }
				set {
					if (_FrontPagePicState != value) {
						OnFrontPagePicStateChanging(value);
						SendPropertyChanging();
						_FrontPagePicState = value;
						SendPropertyChanged("FrontPagePicState");
						OnFrontPagePicStateChanged();
					}
				}
			}

			partial void OnFrontPageCaptionClassChanging(string value);
			partial void OnFrontPageCaptionClassChanged();
			private string _FrontPageCaptionClass;
			[Column(Storage="_FrontPageCaptionClass", DbType="VarChar(50)")]
			public  override string FrontPageCaptionClass {
				get { return _FrontPageCaptionClass; }
				set {
					if (_FrontPageCaptionClass != value) {
						OnFrontPageCaptionClassChanging(value);
						SendPropertyChanging();
						_FrontPageCaptionClass = value;
						SendPropertyChanged("FrontPageCaptionClass");
						OnFrontPageCaptionClassChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.PhotoReview")]
 		public partial class PhotoReview : Model.Entities.PhotoReview, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public PhotoReview()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnKChanging(int value);
			partial void OnKChanged();
			private int _K;
			[Column(Storage="_K", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
			public  override int K {
				get { return _K; }
				set {
					if (_K != value) {
						OnKChanging(value);
						SendPropertyChanging();
						_K = value;
						SendPropertyChanged("K");
						OnKChanged();
					}
				}
			}

			partial void OnUsrKChanging(int value);
			partial void OnUsrKChanged();
			private int _UsrK;
			[Column(Storage="_UsrK", DbType="Int", CanBeNull=false)]
			public  override int UsrK {
				get { return _UsrK; }
				set {
					if (_UsrK != value) {
						OnUsrKChanging(value);
						SendPropertyChanging();
						_UsrK = value;
						SendPropertyChanged("UsrK");
						OnUsrKChanged();
					}
				}
			}

			partial void OnPhotoKChanging(int value);
			partial void OnPhotoKChanged();
			private int _PhotoK;
			[Column(Storage="_PhotoK", DbType="Int", CanBeNull=false)]
			public  override int PhotoK {
				get { return _PhotoK; }
				set {
					if (_PhotoK != value) {
						OnPhotoKChanging(value);
						SendPropertyChanging();
						_PhotoK = value;
						SendPropertyChanged("PhotoK");
						OnPhotoKChanged();
					}
				}
			}

			partial void OnDateTimeChanging(DateTime value);
			partial void OnDateTimeChanged();
			private DateTime _DateTime;
			[Column(Storage="_DateTime", DbType="DateTime", CanBeNull=false)]
			public  override DateTime DateTime {
				get { return _DateTime; }
				set {
					if (_DateTime != value) {
						OnDateTimeChanging(value);
						SendPropertyChanging();
						_DateTime = value;
						SendPropertyChanged("DateTime");
						OnDateTimeChanged();
					}
				}
			}

			partial void OnRatingChanging(int value);
			partial void OnRatingChanged();
			private int _Rating;
			[Column(Storage="_Rating", DbType="Int", CanBeNull=false)]
			public  override int Rating {
				get { return _Rating; }
				set {
					if (_Rating != value) {
						OnRatingChanging(value);
						SendPropertyChanging();
						_Rating = value;
						SendPropertyChanged("Rating");
						OnRatingChanged();
					}
				}
			}

			partial void OnRatingTypeChanging(Model.Entities.PhotoReview.RatingTypes value);
			partial void OnRatingTypeChanged();
			private Model.Entities.PhotoReview.RatingTypes _RatingType;
			[Column(Storage="_RatingType", DbType="Int", CanBeNull=false)]
			public  override Model.Entities.PhotoReview.RatingTypes RatingType {
				get { return _RatingType; }
				set {
					if (_RatingType != value) {
						OnRatingTypeChanging(value);
						SendPropertyChanging();
						_RatingType = value;
						SendPropertyChanged("RatingType");
						OnRatingTypeChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.Place")]
 		public partial class Place : Model.Entities.Place, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public Place()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnKChanging(int value);
			partial void OnKChanged();
			private int _K;
			[Column(Storage="_K", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
			public  override int K {
				get { return _K; }
				set {
					if (_K != value) {
						OnKChanging(value);
						SendPropertyChanging();
						_K = value;
						SendPropertyChanged("K");
						OnKChanged();
					}
				}
			}

			partial void OnNameChanging(string value);
			partial void OnNameChanged();
			private string _Name;
			[Column(Storage="_Name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
			public  override string Name {
				get { return _Name; }
				set {
					if (_Name != value) {
						OnNameChanging(value);
						SendPropertyChanging();
						_Name = value;
						SendPropertyChanged("Name");
						OnNameChanged();
					}
				}
			}

			partial void OnUniqueNameChanging(string value);
			partial void OnUniqueNameChanged();
			private string _UniqueName;
			[Column(Storage="_UniqueName", DbType="VarChar(111)", UpdateCheck=UpdateCheck.Never)]
			public  override string UniqueName {
				get { return _UniqueName; }
				set {
					if (_UniqueName != value) {
						OnUniqueNameChanging(value);
						SendPropertyChanging();
						_UniqueName = value;
						SendPropertyChanged("UniqueName");
						OnUniqueNameChanged();
					}
				}
			}

			partial void OnPopulationChanging(double value);
			partial void OnPopulationChanged();
			private double _Population;
			[Column(Storage="_Population", DbType="Float", CanBeNull=false)]
			public  override double Population {
				get { return _Population; }
				set {
					if (_Population != value) {
						OnPopulationChanging(value);
						SendPropertyChanging();
						_Population = value;
						SendPropertyChanged("Population");
						OnPopulationChanged();
					}
				}
			}

			partial void OnLatitudeDegreesNorthChanging(double value);
			partial void OnLatitudeDegreesNorthChanged();
			private double _LatitudeDegreesNorth;
			[Column(Storage="_LatitudeDegreesNorth", DbType="Float NOT NULL", CanBeNull=false)]
			public  override double LatitudeDegreesNorth {
				get { return _LatitudeDegreesNorth; }
				set {
					if (_LatitudeDegreesNorth != value) {
						OnLatitudeDegreesNorthChanging(value);
						SendPropertyChanging();
						_LatitudeDegreesNorth = value;
						SendPropertyChanged("LatitudeDegreesNorth");
						OnLatitudeDegreesNorthChanged();
					}
				}
			}

			partial void OnLongitudeDegreesWestChanging(double value);
			partial void OnLongitudeDegreesWestChanged();
			private double _LongitudeDegreesWest;
			[Column(Storage="_LongitudeDegreesWest", DbType="Float NOT NULL", CanBeNull=false)]
			public  override double LongitudeDegreesWest {
				get { return _LongitudeDegreesWest; }
				set {
					if (_LongitudeDegreesWest != value) {
						OnLongitudeDegreesWestChanging(value);
						SendPropertyChanging();
						_LongitudeDegreesWest = value;
						SendPropertyChanged("LongitudeDegreesWest");
						OnLongitudeDegreesWestChanged();
					}
				}
			}

			partial void OnSubCountryChanging(int value);
			partial void OnSubCountryChanged();
			private int _SubCountry;
			[Column(Storage="_SubCountry", DbType="Int NOT NULL", CanBeNull=false)]
			public  override int SubCountry {
				get { return _SubCountry; }
				set {
					if (_SubCountry != value) {
						OnSubCountryChanging(value);
						SendPropertyChanging();
						_SubCountry = value;
						SendPropertyChanged("SubCountry");
						OnSubCountryChanged();
					}
				}
			}

			partial void OnCountryKChanging(int value);
			partial void OnCountryKChanged();
			private int _CountryK;
			[Column(Storage="_CountryK", DbType="Int NOT NULL", CanBeNull=false)]
			public  override int CountryK {
				get { return _CountryK; }
				set {
					if (_CountryK != value) {
						OnCountryKChanging(value);
						SendPropertyChanging();
						_CountryK = value;
						SendPropertyChanged("CountryK");
						OnCountryKChanged();
					}
				}
			}

			partial void OnEnabledChanging(bool value);
			partial void OnEnabledChanged();
			private bool _Enabled;
			[Column(Storage="_Enabled", DbType="Bit", CanBeNull=false)]
			public  override bool Enabled {
				get { return _Enabled; }
				set {
					if (_Enabled != value) {
						OnEnabledChanging(value);
						SendPropertyChanging();
						_Enabled = value;
						SendPropertyChanged("Enabled");
						OnEnabledChanged();
					}
				}
			}

			partial void OnPicChanging(Guid value);
			partial void OnPicChanged();
			private Guid _Pic;
			[Column(Storage="_Pic", DbType="UniqueIdentifier", CanBeNull=false)]
			public  override Guid Pic {
				get { return _Pic; }
				set {
					if (_Pic != value) {
						OnPicChanging(value);
						SendPropertyChanging();
						_Pic = value;
						SendPropertyChanged("Pic");
						OnPicChanged();
					}
				}
			}

			partial void OnDetailsHtmlChanging(string value);
			partial void OnDetailsHtmlChanged();
			private string _DetailsHtml;
			[Column(Storage="_DetailsHtml", DbType="Text", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
			public  override string DetailsHtml {
				get { return _DetailsHtml; }
				set {
					if (_DetailsHtml != value) {
						OnDetailsHtmlChanging(value);
						SendPropertyChanging();
						_DetailsHtml = value;
						SendPropertyChanged("DetailsHtml");
						OnDetailsHtmlChanged();
					}
				}
			}

			partial void OnTotalEventsChanging(int value);
			partial void OnTotalEventsChanged();
			private int _TotalEvents;
			[Column(Storage="_TotalEvents", DbType="Int", CanBeNull=false)]
			public  override int TotalEvents {
				get { return _TotalEvents; }
				set {
					if (_TotalEvents != value) {
						OnTotalEventsChanging(value);
						SendPropertyChanging();
						_TotalEvents = value;
						SendPropertyChanged("TotalEvents");
						OnTotalEventsChanged();
					}
				}
			}

			partial void OnTotalCommentsChanging(int value);
			partial void OnTotalCommentsChanged();
			private int _TotalComments;
			[Column(Storage="_TotalComments", DbType="Int", CanBeNull=false)]
			public  override int TotalComments {
				get { return _TotalComments; }
				set {
					if (_TotalComments != value) {
						OnTotalCommentsChanging(value);
						SendPropertyChanging();
						_TotalComments = value;
						SendPropertyChanged("TotalComments");
						OnTotalCommentsChanged();
					}
				}
			}

			partial void OnLastPostChanging(DateTime value);
			partial void OnLastPostChanged();
			private DateTime _LastPost;
			[Column(Storage="_LastPost", DbType="DateTime", CanBeNull=false)]
			public  override DateTime LastPost {
				get { return _LastPost; }
				set {
					if (_LastPost != value) {
						OnLastPostChanging(value);
						SendPropertyChanging();
						_LastPost = value;
						SendPropertyChanged("LastPost");
						OnLastPostChanged();
					}
				}
			}

			partial void OnAverageCommentDateTimeChanging(DateTime value);
			partial void OnAverageCommentDateTimeChanged();
			private DateTime _AverageCommentDateTime;
			[Column(Storage="_AverageCommentDateTime", DbType="DateTime", CanBeNull=false)]
			public  override DateTime AverageCommentDateTime {
				get { return _AverageCommentDateTime; }
				set {
					if (_AverageCommentDateTime != value) {
						OnAverageCommentDateTimeChanging(value);
						SendPropertyChanging();
						_AverageCommentDateTime = value;
						SendPropertyChanged("AverageCommentDateTime");
						OnAverageCommentDateTimeChanged();
					}
				}
			}

			partial void OnRegionAbbreviationChanging(string value);
			partial void OnRegionAbbreviationChanged();
			private string _RegionAbbreviation;
			[Column(Storage="_RegionAbbreviation", DbType="VarChar(10)", CanBeNull=false)]
			public  override string RegionAbbreviation {
				get { return _RegionAbbreviation; }
				set {
					if (_RegionAbbreviation != value) {
						OnRegionAbbreviationChanging(value);
						SendPropertyChanging();
						_RegionAbbreviation = value;
						SendPropertyChanged("RegionAbbreviation");
						OnRegionAbbreviationChanged();
					}
				}
			}

			partial void OnRegionKChanging(int value);
			partial void OnRegionKChanged();
			private int _RegionK;
			[Column(Storage="_RegionK", DbType="Int NOT NULL", CanBeNull=false)]
			public  override int RegionK {
				get { return _RegionK; }
				set {
					if (_RegionK != value) {
						OnRegionKChanging(value);
						SendPropertyChanging();
						_RegionK = value;
						SendPropertyChanged("RegionK");
						OnRegionKChanged();
					}
				}
			}

			partial void OnCodeChanging(string value);
			partial void OnCodeChanged();
			private string _Code;
			[Column(Storage="_Code", DbType="VarChar(10)", CanBeNull=false)]
			public  override string Code {
				get { return _Code; }
				set {
					if (_Code != value) {
						OnCodeChanging(value);
						SendPropertyChanging();
						_Code = value;
						SendPropertyChanged("Code");
						OnCodeChanged();
					}
				}
			}

			partial void OnTypeChanging(string value);
			partial void OnTypeChanged();
			private string _Type;
			[Column(Storage="_Type", DbType="VarChar(10)", CanBeNull=false)]
			public  override string Type {
				get { return _Type; }
				set {
					if (_Type != value) {
						OnTypeChanging(value);
						SendPropertyChanging();
						_Type = value;
						SendPropertyChanged("Type");
						OnTypeChanged();
					}
				}
			}

			partial void OnIsRegionCapitalChanging(bool value);
			partial void OnIsRegionCapitalChanged();
			private bool _IsRegionCapital;
			[Column(Storage="_IsRegionCapital", DbType="Bit", CanBeNull=false)]
			public  override bool IsRegionCapital {
				get { return _IsRegionCapital; }
				set {
					if (_IsRegionCapital != value) {
						OnIsRegionCapitalChanging(value);
						SendPropertyChanging();
						_IsRegionCapital = value;
						SendPropertyChanged("IsRegionCapital");
						OnIsRegionCapitalChanged();
					}
				}
			}

			partial void OnIsCountryCapitalChanging(bool value);
			partial void OnIsCountryCapitalChanged();
			private bool _IsCountryCapital;
			[Column(Storage="_IsCountryCapital", DbType="Bit", CanBeNull=false)]
			public  override bool IsCountryCapital {
				get { return _IsCountryCapital; }
				set {
					if (_IsCountryCapital != value) {
						OnIsCountryCapitalChanging(value);
						SendPropertyChanging();
						_IsCountryCapital = value;
						SendPropertyChanged("IsCountryCapital");
						OnIsCountryCapitalChanged();
					}
				}
			}

			partial void OnExcludeFromMapChanging(bool value);
			partial void OnExcludeFromMapChanged();
			private bool _ExcludeFromMap;
			[Column(Storage="_ExcludeFromMap", DbType="Bit", CanBeNull=false)]
			public  override bool ExcludeFromMap {
				get { return _ExcludeFromMap; }
				set {
					if (_ExcludeFromMap != value) {
						OnExcludeFromMapChanging(value);
						SendPropertyChanging();
						_ExcludeFromMap = value;
						SendPropertyChanged("ExcludeFromMap");
						OnExcludeFromMapChanged();
					}
				}
			}

			partial void OnUrlNameChanging(string value);
			partial void OnUrlNameChanged();
			private string _UrlName;
			[Column(Storage="_UrlName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
			public  override string UrlName {
				get { return _UrlName; }
				set {
					if (_UrlName != value) {
						OnUrlNameChanging(value);
						SendPropertyChanging();
						_UrlName = value;
						SendPropertyChanged("UrlName");
						OnUrlNameChanged();
					}
				}
			}

			partial void OnPicStateChanging(string value);
			partial void OnPicStateChanged();
			private string _PicState;
			[Column(Storage="_PicState", DbType="VarChar(100)", CanBeNull=false)]
			public  override string PicState {
				get { return _PicState; }
				set {
					if (_PicState != value) {
						OnPicStateChanging(value);
						SendPropertyChanging();
						_PicState = value;
						SendPropertyChanged("PicState");
						OnPicStateChanged();
					}
				}
			}

			partial void OnPicPhotoKChanging(int value);
			partial void OnPicPhotoKChanged();
			private int _PicPhotoK;
			[Column(Storage="_PicPhotoK", DbType="Int", CanBeNull=false)]
			public  override int PicPhotoK {
				get { return _PicPhotoK; }
				set {
					if (_PicPhotoK != value) {
						OnPicPhotoKChanging(value);
						SendPropertyChanging();
						_PicPhotoK = value;
						SendPropertyChanged("PicPhotoK");
						OnPicPhotoKChanged();
					}
				}
			}

			partial void OnPicMiscKChanging(int value);
			partial void OnPicMiscKChanged();
			private int _PicMiscK;
			[Column(Storage="_PicMiscK", DbType="Int", CanBeNull=false)]
			public  override int PicMiscK {
				get { return _PicMiscK; }
				set {
					if (_PicMiscK != value) {
						OnPicMiscKChanging(value);
						SendPropertyChanging();
						_PicMiscK = value;
						SendPropertyChanged("PicMiscK");
						OnPicMiscKChanged();
					}
				}
			}

			partial void OnUrlFragmentChanging(string value);
			partial void OnUrlFragmentChanged();
			private string _UrlFragment;
			[Column(Storage="_UrlFragment", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
			public  override string UrlFragment {
				get { return _UrlFragment; }
				set {
					if (_UrlFragment != value) {
						OnUrlFragmentChanging(value);
						SendPropertyChanging();
						_UrlFragment = value;
						SendPropertyChanged("UrlFragment");
						OnUrlFragmentChanged();
					}
				}
			}

			partial void OnMeridianFeatureIdChanging(int value);
			partial void OnMeridianFeatureIdChanged();
			private int _MeridianFeatureId;
			[Column(Storage="_MeridianFeatureId", DbType="Int NOT NULL", CanBeNull=false)]
			public  override int MeridianFeatureId {
				get { return _MeridianFeatureId; }
				set {
					if (_MeridianFeatureId != value) {
						OnMeridianFeatureIdChanging(value);
						SendPropertyChanging();
						_MeridianFeatureId = value;
						SendPropertyChanged("MeridianFeatureId");
						OnMeridianFeatureIdChanged();
					}
				}
			}

			partial void OnLatChanging(double value);
			partial void OnLatChanged();
			private double _Lat;
			[Column(Storage="_Lat", DbType="Float NOT NULL", CanBeNull=false)]
			public  override double Lat {
				get { return _Lat; }
				set {
					if (_Lat != value) {
						OnLatChanging(value);
						SendPropertyChanging();
						_Lat = value;
						SendPropertyChanged("Lat");
						OnLatChanged();
					}
				}
			}

			partial void OnLonChanging(double value);
			partial void OnLonChanged();
			private double _Lon;
			[Column(Storage="_Lon", DbType="Float NOT NULL", CanBeNull=false)]
			public  override double Lon {
				get { return _Lon; }
				set {
					if (_Lon != value) {
						OnLonChanging(value);
						SendPropertyChanging();
						_Lon = value;
						SendPropertyChanged("Lon");
						OnLonChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.Prefs")]
 		public partial class Prefs : Model.Entities.Prefs, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public Prefs()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnGuidChanging(Guid value);
			partial void OnGuidChanged();
			private Guid _Guid;
			[Column(Storage="_Guid", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
			public  override Guid Guid {
				get { return _Guid; }
				set {
					if (_Guid != value) {
						OnGuidChanging(value);
						SendPropertyChanging();
						_Guid = value;
						SendPropertyChanged("Guid");
						OnGuidChanged();
					}
				}
			}

			partial void OnPrefsStringChanging(string value);
			partial void OnPrefsStringChanged();
			private string _PrefsString;
			[Column(Storage="_PrefsString", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
			public  override string PrefsString {
				get { return _PrefsString; }
				set {
					if (_PrefsString != value) {
						OnPrefsStringChanging(value);
						SendPropertyChanging();
						_PrefsString = value;
						SendPropertyChanged("PrefsString");
						OnPrefsStringChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.Promoter")]
 		public partial class Promoter : Model.Entities.Promoter, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public Promoter()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnKChanging(int value);
			partial void OnKChanged();
			private int _K;
			[Column(Storage="_K", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
			public  override int K {
				get { return _K; }
				set {
					if (_K != value) {
						OnKChanging(value);
						SendPropertyChanging();
						_K = value;
						SendPropertyChanged("K");
						OnKChanged();
					}
				}
			}

			partial void OnNameChanging(string value);
			partial void OnNameChanged();
			private string _Name;
			[Column(Storage="_Name", DbType="VarChar(200)", CanBeNull=false)]
			public  override string Name {
				get { return _Name; }
				set {
					if (_Name != value) {
						OnNameChanging(value);
						SendPropertyChanging();
						_Name = value;
						SendPropertyChanged("Name");
						OnNameChanged();
					}
				}
			}

			partial void OnPicChanging(Guid value);
			partial void OnPicChanged();
			private Guid _Pic;
			[Column(Storage="_Pic", DbType="UniqueIdentifier", CanBeNull=false)]
			public  override Guid Pic {
				get { return _Pic; }
				set {
					if (_Pic != value) {
						OnPicChanging(value);
						SendPropertyChanging();
						_Pic = value;
						SendPropertyChanged("Pic");
						OnPicChanged();
					}
				}
			}

			partial void OnPrimaryUsrKChanging(int value);
			partial void OnPrimaryUsrKChanged();
			private int _PrimaryUsrK;
			[Column(Storage="_PrimaryUsrK", DbType="Int", CanBeNull=false)]
			public  override int PrimaryUsrK {
				get { return _PrimaryUsrK; }
				set {
					if (_PrimaryUsrK != value) {
						OnPrimaryUsrKChanging(value);
						SendPropertyChanging();
						_PrimaryUsrK = value;
						SendPropertyChanged("PrimaryUsrK");
						OnPrimaryUsrKChanged();
					}
				}
			}

			partial void OnContactNameChanging(string value);
			partial void OnContactNameChanged();
			private string _ContactName;
			[Column(Storage="_ContactName", DbType="VarChar(200)", CanBeNull=false)]
			public  override string ContactName {
				get { return _ContactName; }
				set {
					if (_ContactName != value) {
						OnContactNameChanging(value);
						SendPropertyChanging();
						_ContactName = value;
						SendPropertyChanged("ContactName");
						OnContactNameChanged();
					}
				}
			}

			partial void OnCompanyNameChanging(string value);
			partial void OnCompanyNameChanged();
			private string _CompanyName;
			[Column(Storage="_CompanyName", DbType="VarChar(200)", CanBeNull=false)]
			public  override string CompanyName {
				get { return _CompanyName; }
				set {
					if (_CompanyName != value) {
						OnCompanyNameChanging(value);
						SendPropertyChanging();
						_CompanyName = value;
						SendPropertyChanged("CompanyName");
						OnCompanyNameChanged();
					}
				}
			}

			partial void OnPayPalAddressChanging(string value);
			partial void OnPayPalAddressChanged();
			private string _PayPalAddress;
			[Column(Storage="_PayPalAddress", DbType="VarChar(200)", CanBeNull=false)]
			public  override string PayPalAddress {
				get { return _PayPalAddress; }
				set {
					if (_PayPalAddress != value) {
						OnPayPalAddressChanging(value);
						SendPropertyChanging();
						_PayPalAddress = value;
						SendPropertyChanged("PayPalAddress");
						OnPayPalAddressChanged();
					}
				}
			}

			partial void OnPhoneNumberChanging(string value);
			partial void OnPhoneNumberChanged();
			private string _PhoneNumber;
			[Column(Storage="_PhoneNumber", DbType="VarChar(200)", CanBeNull=false)]
			public  override string PhoneNumber {
				get { return _PhoneNumber; }
				set {
					if (_PhoneNumber != value) {
						OnPhoneNumberChanging(value);
						SendPropertyChanging();
						_PhoneNumber = value;
						SendPropertyChanged("PhoneNumber");
						OnPhoneNumberChanged();
					}
				}
			}

			partial void OnAddressStreetChanging(string value);
			partial void OnAddressStreetChanged();
			private string _AddressStreet;
			[Column(Storage="_AddressStreet", DbType="VarChar(200)", CanBeNull=false)]
			public  override string AddressStreet {
				get { return _AddressStreet; }
				set {
					if (_AddressStreet != value) {
						OnAddressStreetChanging(value);
						SendPropertyChanging();
						_AddressStreet = value;
						SendPropertyChanged("AddressStreet");
						OnAddressStreetChanged();
					}
				}
			}

			partial void OnAddressAreaChanging(string value);
			partial void OnAddressAreaChanged();
			private string _AddressArea;
			[Column(Storage="_AddressArea", DbType="VarChar(200)", CanBeNull=false)]
			public  override string AddressArea {
				get { return _AddressArea; }
				set {
					if (_AddressArea != value) {
						OnAddressAreaChanging(value);
						SendPropertyChanging();
						_AddressArea = value;
						SendPropertyChanged("AddressArea");
						OnAddressAreaChanged();
					}
				}
			}

			partial void OnAddressTownChanging(string value);
			partial void OnAddressTownChanged();
			private string _AddressTown;
			[Column(Storage="_AddressTown", DbType="VarChar(200)", CanBeNull=false)]
			public  override string AddressTown {
				get { return _AddressTown; }
				set {
					if (_AddressTown != value) {
						OnAddressTownChanging(value);
						SendPropertyChanging();
						_AddressTown = value;
						SendPropertyChanged("AddressTown");
						OnAddressTownChanged();
					}
				}
			}

			partial void OnAddressCountyChanging(string value);
			partial void OnAddressCountyChanged();
			private string _AddressCounty;
			[Column(Storage="_AddressCounty", DbType="VarChar(200)", CanBeNull=false)]
			public  override string AddressCounty {
				get { return _AddressCounty; }
				set {
					if (_AddressCounty != value) {
						OnAddressCountyChanging(value);
						SendPropertyChanging();
						_AddressCounty = value;
						SendPropertyChanged("AddressCounty");
						OnAddressCountyChanged();
					}
				}
			}

			partial void OnAddressPostcodeChanging(string value);
			partial void OnAddressPostcodeChanged();
			private string _AddressPostcode;
			[Column(Storage="_AddressPostcode", DbType="VarChar(200)", CanBeNull=false)]
			public  override string AddressPostcode {
				get { return _AddressPostcode; }
				set {
					if (_AddressPostcode != value) {
						OnAddressPostcodeChanging(value);
						SendPropertyChanging();
						_AddressPostcode = value;
						SendPropertyChanged("AddressPostcode");
						OnAddressPostcodeChanged();
					}
				}
			}

			partial void OnAddressCountryKChanging(int value);
			partial void OnAddressCountryKChanged();
			private int _AddressCountryK;
			[Column(Storage="_AddressCountryK", DbType="Int", CanBeNull=false)]
			public  override int AddressCountryK {
				get { return _AddressCountryK; }
				set {
					if (_AddressCountryK != value) {
						OnAddressCountryKChanging(value);
						SendPropertyChanging();
						_AddressCountryK = value;
						SendPropertyChanged("AddressCountryK");
						OnAddressCountryKChanged();
					}
				}
			}

			partial void OnPricingMultiplierChanging(double value);
			partial void OnPricingMultiplierChanged();
			private double _PricingMultiplier;
			[Column(Storage="_PricingMultiplier", DbType="Float", CanBeNull=false)]
			public  override double PricingMultiplier {
				get { return _PricingMultiplier; }
				set {
					if (_PricingMultiplier != value) {
						OnPricingMultiplierChanging(value);
						SendPropertyChanging();
						_PricingMultiplier = value;
						SendPropertyChanged("PricingMultiplier");
						OnPricingMultiplierChanged();
					}
				}
			}

			partial void OnDateTimeSignUpChanging(DateTime value);
			partial void OnDateTimeSignUpChanged();
			private DateTime _DateTimeSignUp;
			[Column(Storage="_DateTimeSignUp", DbType="DateTime", CanBeNull=false)]
			public  override DateTime DateTimeSignUp {
				get { return _DateTimeSignUp; }
				set {
					if (_DateTimeSignUp != value) {
						OnDateTimeSignUpChanging(value);
						SendPropertyChanging();
						_DateTimeSignUp = value;
						SendPropertyChanged("DateTimeSignUp");
						OnDateTimeSignUpChanged();
					}
				}
			}

			partial void OnStatusChanging(Model.Entities.Promoter.StatusEnum value);
			partial void OnStatusChanged();
			private Model.Entities.Promoter.StatusEnum _Status;
			[Column(Storage="_Status", DbType="Int", CanBeNull=false)]
			public  override Model.Entities.Promoter.StatusEnum Status {
				get { return _Status; }
				set {
					if (_Status != value) {
						OnStatusChanging(value);
						SendPropertyChanging();
						_Status = value;
						SendPropertyChanged("Status");
						OnStatusChanged();
					}
				}
			}

			partial void OnTotalPaidChanging(decimal value);
			partial void OnTotalPaidChanged();
			private decimal _TotalPaid;
			[Column(Storage="_TotalPaid", DbType="Decimal(18,2)", CanBeNull=false)]
			public  override decimal TotalPaid {
				get { return _TotalPaid; }
				set {
					if (_TotalPaid != value) {
						OnTotalPaidChanging(value);
						SendPropertyChanging();
						_TotalPaid = value;
						SendPropertyChanged("TotalPaid");
						OnTotalPaidChanged();
					}
				}
			}

			partial void OnDateExpiresChanging(DateTime value);
			partial void OnDateExpiresChanged();
			private DateTime _DateExpires;
			[Column(Storage="_DateExpires", DbType="DateTime", CanBeNull=false)]
			public  override DateTime DateExpires {
				get { return _DateExpires; }
				set {
					if (_DateExpires != value) {
						OnDateExpiresChanging(value);
						SendPropertyChanging();
						_DateExpires = value;
						SendPropertyChanged("DateExpires");
						OnDateExpiresChanged();
					}
				}
			}

			partial void OnRenewalFeeChanging(decimal value);
			partial void OnRenewalFeeChanged();
			private decimal _RenewalFee;
			[Column(Storage="_RenewalFee", DbType="Decimal(18,2)", CanBeNull=false)]
			public  override decimal RenewalFee {
				get { return _RenewalFee; }
				set {
					if (_RenewalFee != value) {
						OnRenewalFeeChanging(value);
						SendPropertyChanging();
						_RenewalFee = value;
						SendPropertyChanged("RenewalFee");
						OnRenewalFeeChanged();
					}
				}
			}

			partial void OnRenewalMonthsChanging(int value);
			partial void OnRenewalMonthsChanged();
			private int _RenewalMonths;
			[Column(Storage="_RenewalMonths", DbType="Int", CanBeNull=false)]
			public  override int RenewalMonths {
				get { return _RenewalMonths; }
				set {
					if (_RenewalMonths != value) {
						OnRenewalMonthsChanging(value);
						SendPropertyChanging();
						_RenewalMonths = value;
						SendPropertyChanged("RenewalMonths");
						OnRenewalMonthsChanged();
					}
				}
			}

			partial void OnAdminNoteChanging(string value);
			partial void OnAdminNoteChanged();
			private string _AdminNote;
			[Column(Storage="_AdminNote", DbType="Text", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
			public  override string AdminNote {
				get { return _AdminNote; }
				set {
					if (_AdminNote != value) {
						OnAdminNoteChanging(value);
						SendPropertyChanging();
						_AdminNote = value;
						SendPropertyChanged("AdminNote");
						OnAdminNoteChanged();
					}
				}
			}

			partial void OnQuestionsThreadKChanging(int value);
			partial void OnQuestionsThreadKChanged();
			private int _QuestionsThreadK;
			[Column(Storage="_QuestionsThreadK", DbType="Int", CanBeNull=false)]
			public  override int QuestionsThreadK {
				get { return _QuestionsThreadK; }
				set {
					if (_QuestionsThreadK != value) {
						OnQuestionsThreadKChanging(value);
						SendPropertyChanging();
						_QuestionsThreadK = value;
						SendPropertyChanged("QuestionsThreadK");
						OnQuestionsThreadKChanged();
					}
				}
			}

			partial void OnDuplicateGuidChanging(Guid value);
			partial void OnDuplicateGuidChanged();
			private Guid _DuplicateGuid;
			[Column(Storage="_DuplicateGuid", DbType="UniqueIdentifier", CanBeNull=false)]
			public  override Guid DuplicateGuid {
				get { return _DuplicateGuid; }
				set {
					if (_DuplicateGuid != value) {
						OnDuplicateGuidChanging(value);
						SendPropertyChanging();
						_DuplicateGuid = value;
						SendPropertyChanged("DuplicateGuid");
						OnDuplicateGuidChanged();
					}
				}
			}

			partial void OnUrlNameChanging(string value);
			partial void OnUrlNameChanged();
			private string _UrlName;
			[Column(Storage="_UrlName", DbType="VarChar(200)", CanBeNull=false)]
			public  override string UrlName {
				get { return _UrlName; }
				set {
					if (_UrlName != value) {
						OnUrlNameChanging(value);
						SendPropertyChanging();
						_UrlName = value;
						SendPropertyChanged("UrlName");
						OnUrlNameChanged();
					}
				}
			}

			partial void OnHasGuestlistChanging(bool value);
			partial void OnHasGuestlistChanged();
			private bool _HasGuestlist;
			[Column(Storage="_HasGuestlist", DbType="Bit", CanBeNull=false)]
			public  override bool HasGuestlist {
				get { return _HasGuestlist; }
				set {
					if (_HasGuestlist != value) {
						OnHasGuestlistChanging(value);
						SendPropertyChanging();
						_HasGuestlist = value;
						SendPropertyChanged("HasGuestlist");
						OnHasGuestlistChanged();
					}
				}
			}

			partial void OnGuestlistChargeChanging(decimal value);
			partial void OnGuestlistChargeChanged();
			private decimal _GuestlistCharge;
			[Column(Storage="_GuestlistCharge", DbType="Decimal(18,2)", CanBeNull=false)]
			public  override decimal GuestlistCharge {
				get { return _GuestlistCharge; }
				set {
					if (_GuestlistCharge != value) {
						OnGuestlistChargeChanging(value);
						SendPropertyChanging();
						_GuestlistCharge = value;
						SendPropertyChanged("GuestlistCharge");
						OnGuestlistChargeChanged();
					}
				}
			}

			partial void OnGuestlistCreditChanging(int value);
			partial void OnGuestlistCreditChanged();
			private int _GuestlistCredit;
			[Column(Storage="_GuestlistCredit", DbType="Int", CanBeNull=false)]
			public  override int GuestlistCredit {
				get { return _GuestlistCredit; }
				set {
					if (_GuestlistCredit != value) {
						OnGuestlistCreditChanging(value);
						SendPropertyChanging();
						_GuestlistCredit = value;
						SendPropertyChanged("GuestlistCredit");
						OnGuestlistCreditChanged();
					}
				}
			}

			partial void OnGuestlistCreditLimitChanging(int value);
			partial void OnGuestlistCreditLimitChanged();
			private int _GuestlistCreditLimit;
			[Column(Storage="_GuestlistCreditLimit", DbType="Int", CanBeNull=false)]
			public  override int GuestlistCreditLimit {
				get { return _GuestlistCreditLimit; }
				set {
					if (_GuestlistCreditLimit != value) {
						OnGuestlistCreditLimitChanging(value);
						SendPropertyChanging();
						_GuestlistCreditLimit = value;
						SendPropertyChanged("GuestlistCreditLimit");
						OnGuestlistCreditLimitChanged();
					}
				}
			}

			partial void OnPicStateChanging(string value);
			partial void OnPicStateChanged();
			private string _PicState;
			[Column(Storage="_PicState", DbType="VarChar(100)", CanBeNull=false)]
			public  override string PicState {
				get { return _PicState; }
				set {
					if (_PicState != value) {
						OnPicStateChanging(value);
						SendPropertyChanging();
						_PicState = value;
						SendPropertyChanged("PicState");
						OnPicStateChanged();
					}
				}
			}

			partial void OnPicPhotoKChanging(int value);
			partial void OnPicPhotoKChanged();
			private int _PicPhotoK;
			[Column(Storage="_PicPhotoK", DbType="Int", CanBeNull=false)]
			public  override int PicPhotoK {
				get { return _PicPhotoK; }
				set {
					if (_PicPhotoK != value) {
						OnPicPhotoKChanging(value);
						SendPropertyChanging();
						_PicPhotoK = value;
						SendPropertyChanged("PicPhotoK");
						OnPicPhotoKChanged();
					}
				}
			}

			partial void OnPicMiscKChanging(int value);
			partial void OnPicMiscKChanged();
			private int _PicMiscK;
			[Column(Storage="_PicMiscK", DbType="Int", CanBeNull=false)]
			public  override int PicMiscK {
				get { return _PicMiscK; }
				set {
					if (_PicMiscK != value) {
						OnPicMiscKChanging(value);
						SendPropertyChanging();
						_PicMiscK = value;
						SendPropertyChanged("PicMiscK");
						OnPicMiscKChanged();
					}
				}
			}

			partial void OnClientsPerMonthChanging(int value);
			partial void OnClientsPerMonthChanged();
			private int _ClientsPerMonth;
			[Column(Storage="_ClientsPerMonth", DbType="Int", CanBeNull=false)]
			public  override int ClientsPerMonth {
				get { return _ClientsPerMonth; }
				set {
					if (_ClientsPerMonth != value) {
						OnClientsPerMonthChanging(value);
						SendPropertyChanging();
						_ClientsPerMonth = value;
						SendPropertyChanged("ClientsPerMonth");
						OnClientsPerMonthChanged();
					}
				}
			}

			partial void OnLastMessageChanging(int value);
			partial void OnLastMessageChanged();
			private int _LastMessage;
			[Column(Storage="_LastMessage", DbType="Int", CanBeNull=false)]
			public  override int LastMessage {
				get { return _LastMessage; }
				set {
					if (_LastMessage != value) {
						OnLastMessageChanging(value);
						SendPropertyChanging();
						_LastMessage = value;
						SendPropertyChanged("LastMessage");
						OnLastMessageChanged();
					}
				}
			}

			partial void OnManualNoteChanging(string value);
			partial void OnManualNoteChanged();
			private string _ManualNote;
			[Column(Storage="_ManualNote", DbType="Text", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
			public  override string ManualNote {
				get { return _ManualNote; }
				set {
					if (_ManualNote != value) {
						OnManualNoteChanging(value);
						SendPropertyChanging();
						_ManualNote = value;
						SendPropertyChanged("ManualNote");
						OnManualNoteChanged();
					}
				}
			}

			partial void OnCreditLimitChanging(decimal value);
			partial void OnCreditLimitChanged();
			private decimal _CreditLimit;
			[Column(Storage="_CreditLimit", DbType="Decimal(18,2)", CanBeNull=false)]
			public  override decimal CreditLimit {
				get { return _CreditLimit; }
				set {
					if (_CreditLimit != value) {
						OnCreditLimitChanging(value);
						SendPropertyChanging();
						_CreditLimit = value;
						SendPropertyChanged("CreditLimit");
						OnCreditLimitChanged();
					}
				}
			}

			partial void OnInvoiceDueDaysChanging(int value);
			partial void OnInvoiceDueDaysChanged();
			private int _InvoiceDueDays;
			[Column(Storage="_InvoiceDueDays", DbType="Int", CanBeNull=false)]
			public  override int InvoiceDueDays {
				get { return _InvoiceDueDays; }
				set {
					if (_InvoiceDueDays != value) {
						OnInvoiceDueDaysChanging(value);
						SendPropertyChanging();
						_InvoiceDueDays = value;
						SendPropertyChanged("InvoiceDueDays");
						OnInvoiceDueDaysChanged();
					}
				}
			}

			partial void OnEnabledDateTimeChanging(DateTime value);
			partial void OnEnabledDateTimeChanged();
			private DateTime _EnabledDateTime;
			[Column(Storage="_EnabledDateTime", DbType="DateTime", CanBeNull=false)]
			public  override DateTime EnabledDateTime {
				get { return _EnabledDateTime; }
				set {
					if (_EnabledDateTime != value) {
						OnEnabledDateTimeChanging(value);
						SendPropertyChanging();
						_EnabledDateTime = value;
						SendPropertyChanged("EnabledDateTime");
						OnEnabledDateTimeChanged();
					}
				}
			}

			partial void OnEnabledByUsrKChanging(int value);
			partial void OnEnabledByUsrKChanged();
			private int _EnabledByUsrK;
			[Column(Storage="_EnabledByUsrK", DbType="Int", CanBeNull=false)]
			public  override int EnabledByUsrK {
				get { return _EnabledByUsrK; }
				set {
					if (_EnabledByUsrK != value) {
						OnEnabledByUsrKChanging(value);
						SendPropertyChanging();
						_EnabledByUsrK = value;
						SendPropertyChanged("EnabledByUsrK");
						OnEnabledByUsrKChanged();
					}
				}
			}

			partial void OnSalesUsrKChanging(int value);
			partial void OnSalesUsrKChanged();
			private int _SalesUsrK;
			[Column(Storage="_SalesUsrK", DbType="Int", CanBeNull=false)]
			public  override int SalesUsrK {
				get { return _SalesUsrK; }
				set {
					if (_SalesUsrK != value) {
						OnSalesUsrKChanging(value);
						SendPropertyChanging();
						_SalesUsrK = value;
						SendPropertyChanged("SalesUsrK");
						OnSalesUsrKChanged();
					}
				}
			}

			partial void OnSalesStatusChanging(Model.Entities.Promoter.SalesStatusEnum value);
			partial void OnSalesStatusChanged();
			private Model.Entities.Promoter.SalesStatusEnum _SalesStatus;
			[Column(Storage="_SalesStatus", DbType="Int", CanBeNull=false)]
			public  override Model.Entities.Promoter.SalesStatusEnum SalesStatus {
				get { return _SalesStatus; }
				set {
					if (_SalesStatus != value) {
						OnSalesStatusChanging(value);
						SendPropertyChanging();
						_SalesStatus = value;
						SendPropertyChanged("SalesStatus");
						OnSalesStatusChanged();
					}
				}
			}

			partial void OnSalesStatusExpiresChanging(DateTime? value);
			partial void OnSalesStatusExpiresChanged();
			private DateTime? _SalesStatusExpires;
			[Column(Storage="_SalesStatusExpires", DbType="DateTime")]
			public  override DateTime? SalesStatusExpires {
				get { return _SalesStatusExpires; }
				set {
					if (_SalesStatusExpires != value) {
						OnSalesStatusExpiresChanging(value);
						SendPropertyChanging();
						_SalesStatusExpires = value;
						SendPropertyChanged("SalesStatusExpires");
						OnSalesStatusExpiresChanged();
					}
				}
			}

			partial void OnSalesNextCallChanging(DateTime value);
			partial void OnSalesNextCallChanged();
			private DateTime _SalesNextCall;
			[Column(Storage="_SalesNextCall", DbType="DateTime", CanBeNull=false)]
			public  override DateTime SalesNextCall {
				get { return _SalesNextCall; }
				set {
					if (_SalesNextCall != value) {
						OnSalesNextCallChanging(value);
						SendPropertyChanging();
						_SalesNextCall = value;
						SendPropertyChanged("SalesNextCall");
						OnSalesNextCallChanged();
					}
				}
			}

			partial void OnLetterTypeChanging(Model.Entities.Promoter.LetterTypes value);
			partial void OnLetterTypeChanged();
			private Model.Entities.Promoter.LetterTypes _LetterType;
			[Column(Storage="_LetterType", DbType="Int", CanBeNull=false)]
			public  override Model.Entities.Promoter.LetterTypes LetterType {
				get { return _LetterType; }
				set {
					if (_LetterType != value) {
						OnLetterTypeChanging(value);
						SendPropertyChanging();
						_LetterType = value;
						SendPropertyChanged("LetterType");
						OnLetterTypeChanged();
					}
				}
			}

			partial void OnLetterStatusChanging(Model.Entities.Promoter.LetterStatusEnum value);
			partial void OnLetterStatusChanged();
			private Model.Entities.Promoter.LetterStatusEnum _LetterStatus;
			[Column(Storage="_LetterStatus", DbType="Int", CanBeNull=false)]
			public  override Model.Entities.Promoter.LetterStatusEnum LetterStatus {
				get { return _LetterStatus; }
				set {
					if (_LetterStatus != value) {
						OnLetterStatusChanging(value);
						SendPropertyChanging();
						_LetterStatus = value;
						SendPropertyChanged("LetterStatus");
						OnLetterStatusChanged();
					}
				}
			}

			partial void OnIsSkeletonChanging(bool value);
			partial void OnIsSkeletonChanged();
			private bool _IsSkeleton;
			[Column(Storage="_IsSkeleton", DbType="Bit", CanBeNull=false)]
			public  override bool IsSkeleton {
				get { return _IsSkeleton; }
				set {
					if (_IsSkeleton != value) {
						OnIsSkeletonChanging(value);
						SendPropertyChanging();
						_IsSkeleton = value;
						SendPropertyChanged("IsSkeleton");
						OnIsSkeletonChanged();
					}
				}
			}

			partial void OnAccessCodeRandomChanging(string value);
			partial void OnAccessCodeRandomChanged();
			private string _AccessCodeRandom;
			[Column(Storage="_AccessCodeRandom", DbType="VarChar(50)", CanBeNull=false)]
			public  override string AccessCodeRandom {
				get { return _AccessCodeRandom; }
				set {
					if (_AccessCodeRandom != value) {
						OnAccessCodeRandomChanging(value);
						SendPropertyChanging();
						_AccessCodeRandom = value;
						SendPropertyChanged("AccessCodeRandom");
						OnAccessCodeRandomChanged();
					}
				}
			}

			partial void OnOfferTypeChanging(Model.Entities.Promoter.OfferTypes value);
			partial void OnOfferTypeChanged();
			private Model.Entities.Promoter.OfferTypes _OfferType;
			[Column(Storage="_OfferType", DbType="Int", CanBeNull=false)]
			public  override Model.Entities.Promoter.OfferTypes OfferType {
				get { return _OfferType; }
				set {
					if (_OfferType != value) {
						OnOfferTypeChanging(value);
						SendPropertyChanging();
						_OfferType = value;
						SendPropertyChanged("OfferType");
						OnOfferTypeChanged();
					}
				}
			}

			partial void OnOfferExpireDateTimeChanging(DateTime value);
			partial void OnOfferExpireDateTimeChanged();
			private DateTime _OfferExpireDateTime;
			[Column(Storage="_OfferExpireDateTime", DbType="DateTime", CanBeNull=false)]
			public  override DateTime OfferExpireDateTime {
				get { return _OfferExpireDateTime; }
				set {
					if (_OfferExpireDateTime != value) {
						OnOfferExpireDateTimeChanging(value);
						SendPropertyChanging();
						_OfferExpireDateTime = value;
						SendPropertyChanged("OfferExpireDateTime");
						OnOfferExpireDateTimeChanged();
					}
				}
			}

			partial void OnSalesEstimateChanging(Model.Entities.Promoter.SalesEstimateEnum value);
			partial void OnSalesEstimateChanged();
			private Model.Entities.Promoter.SalesEstimateEnum _SalesEstimate;
			[Column(Storage="_SalesEstimate", DbType="Int", CanBeNull=false)]
			public  override Model.Entities.Promoter.SalesEstimateEnum SalesEstimate {
				get { return _SalesEstimate; }
				set {
					if (_SalesEstimate != value) {
						OnSalesEstimateChanging(value);
						SendPropertyChanging();
						_SalesEstimate = value;
						SendPropertyChanged("SalesEstimate");
						OnSalesEstimateChanged();
					}
				}
			}

			partial void OnSalesHoldChanging(bool value);
			partial void OnSalesHoldChanged();
			private bool _SalesHold;
			[Column(Storage="_SalesHold", DbType="Bit", CanBeNull=false)]
			public  override bool SalesHold {
				get { return _SalesHold; }
				set {
					if (_SalesHold != value) {
						OnSalesHoldChanging(value);
						SendPropertyChanging();
						_SalesHold = value;
						SendPropertyChanged("SalesHold");
						OnSalesHoldChanged();
					}
				}
			}

			partial void OnFutureEventsChanging(int value);
			partial void OnFutureEventsChanged();
			private int _FutureEvents;
			[Column(Storage="_FutureEvents", DbType="Int", CanBeNull=false)]
			public  override int FutureEvents {
				get { return _FutureEvents; }
				set {
					if (_FutureEvents != value) {
						OnFutureEventsChanging(value);
						SendPropertyChanging();
						_FutureEvents = value;
						SendPropertyChanged("FutureEvents");
						OnFutureEventsChanged();
					}
				}
			}

			partial void OnDisableOverdueRedirectChanging(bool value);
			partial void OnDisableOverdueRedirectChanged();
			private bool _DisableOverdueRedirect;
			[Column(Storage="_DisableOverdueRedirect", DbType="Bit", CanBeNull=false)]
			public  override bool DisableOverdueRedirect {
				get { return _DisableOverdueRedirect; }
				set {
					if (_DisableOverdueRedirect != value) {
						OnDisableOverdueRedirectChanging(value);
						SendPropertyChanging();
						_DisableOverdueRedirect = value;
						SendPropertyChanged("DisableOverdueRedirect");
						OnDisableOverdueRedirectChanged();
					}
				}
			}

			partial void OnContactEmailChanging(string value);
			partial void OnContactEmailChanged();
			private string _ContactEmail;
			[Column(Storage="_ContactEmail", DbType="VarChar(200)", CanBeNull=false)]
			public  override string ContactEmail {
				get { return _ContactEmail; }
				set {
					if (_ContactEmail != value) {
						OnContactEmailChanging(value);
						SendPropertyChanging();
						_ContactEmail = value;
						SendPropertyChanged("ContactEmail");
						OnContactEmailChanged();
					}
				}
			}

			partial void OnContactTitleChanging(string value);
			partial void OnContactTitleChanged();
			private string _ContactTitle;
			[Column(Storage="_ContactTitle", DbType="VarChar(200)", CanBeNull=false)]
			public  override string ContactTitle {
				get { return _ContactTitle; }
				set {
					if (_ContactTitle != value) {
						OnContactTitleChanging(value);
						SendPropertyChanging();
						_ContactTitle = value;
						SendPropertyChanged("ContactTitle");
						OnContactTitleChanged();
					}
				}
			}

			partial void OnContactPersonalTitleChanging(string value);
			partial void OnContactPersonalTitleChanged();
			private string _ContactPersonalTitle;
			[Column(Storage="_ContactPersonalTitle", DbType="VarChar(50)", CanBeNull=false)]
			public  override string ContactPersonalTitle {
				get { return _ContactPersonalTitle; }
				set {
					if (_ContactPersonalTitle != value) {
						OnContactPersonalTitleChanging(value);
						SendPropertyChanging();
						_ContactPersonalTitle = value;
						SendPropertyChanged("ContactPersonalTitle");
						OnContactPersonalTitleChanged();
					}
				}
			}

			partial void OnPhoneNumber2Changing(string value);
			partial void OnPhoneNumber2Changed();
			private string _PhoneNumber2;
			[Column(Storage="_PhoneNumber2", DbType="VarChar(200)", CanBeNull=false)]
			public  override string PhoneNumber2 {
				get { return _PhoneNumber2; }
				set {
					if (_PhoneNumber2 != value) {
						OnPhoneNumber2Changing(value);
						SendPropertyChanging();
						_PhoneNumber2 = value;
						SendPropertyChanged("PhoneNumber2");
						OnPhoneNumber2Changed();
					}
				}
			}

			partial void OnWebAddressChanging(string value);
			partial void OnWebAddressChanged();
			private string _WebAddress;
			[Column(Storage="_WebAddress", DbType="VarChar(200)", CanBeNull=false)]
			public  override string WebAddress {
				get { return _WebAddress; }
				set {
					if (_WebAddress != value) {
						OnWebAddressChanging(value);
						SendPropertyChanging();
						_WebAddress = value;
						SendPropertyChanged("WebAddress");
						OnWebAddressChanged();
					}
				}
			}

			partial void OnAlarmChanging(bool value);
			partial void OnAlarmChanged();
			private bool _Alarm;
			[Column(Storage="_Alarm", DbType="Bit", CanBeNull=false)]
			public  override bool Alarm {
				get { return _Alarm; }
				set {
					if (_Alarm != value) {
						OnAlarmChanging(value);
						SendPropertyChanging();
						_Alarm = value;
						SendPropertyChanged("Alarm");
						OnAlarmChanged();
					}
				}
			}

			partial void OnAccountsNameChanging(string value);
			partial void OnAccountsNameChanged();
			private string _AccountsName;
			[Column(Storage="_AccountsName", DbType="VarChar(200)", CanBeNull=false)]
			public  override string AccountsName {
				get { return _AccountsName; }
				set {
					if (_AccountsName != value) {
						OnAccountsNameChanging(value);
						SendPropertyChanging();
						_AccountsName = value;
						SendPropertyChanged("AccountsName");
						OnAccountsNameChanged();
					}
				}
			}

			partial void OnAccountsEmailChanging(string value);
			partial void OnAccountsEmailChanged();
			private string _AccountsEmail;
			[Column(Storage="_AccountsEmail", DbType="VarChar(200)", CanBeNull=false)]
			public  override string AccountsEmail {
				get { return _AccountsEmail; }
				set {
					if (_AccountsEmail != value) {
						OnAccountsEmailChanging(value);
						SendPropertyChanging();
						_AccountsEmail = value;
						SendPropertyChanged("AccountsEmail");
						OnAccountsEmailChanged();
					}
				}
			}

			partial void OnAccountsPhoneChanging(string value);
			partial void OnAccountsPhoneChanged();
			private string _AccountsPhone;
			[Column(Storage="_AccountsPhone", DbType="VarChar(200)", CanBeNull=false)]
			public  override string AccountsPhone {
				get { return _AccountsPhone; }
				set {
					if (_AccountsPhone != value) {
						OnAccountsPhoneChanging(value);
						SendPropertyChanging();
						_AccountsPhone = value;
						SendPropertyChanged("AccountsPhone");
						OnAccountsPhoneChanged();
					}
				}
			}

			partial void OnClientSectorChanging(Model.Entities.Promoter.ClientSectorEnum value);
			partial void OnClientSectorChanged();
			private Model.Entities.Promoter.ClientSectorEnum _ClientSector;
			[Column(Storage="_ClientSector", DbType="Int", CanBeNull=false)]
			public  override Model.Entities.Promoter.ClientSectorEnum ClientSector {
				get { return _ClientSector; }
				set {
					if (_ClientSector != value) {
						OnClientSectorChanging(value);
						SendPropertyChanging();
						_ClientSector = value;
						SendPropertyChanged("ClientSector");
						OnClientSectorChanged();
					}
				}
			}

			partial void OnEnableTicketsChanging(bool value);
			partial void OnEnableTicketsChanged();
			private bool _EnableTickets;
			[Column(Storage="_EnableTickets", DbType="Bit", CanBeNull=false)]
			public  override bool EnableTickets {
				get { return _EnableTickets; }
				set {
					if (_EnableTickets != value) {
						OnEnableTicketsChanging(value);
						SendPropertyChanging();
						_EnableTickets = value;
						SendPropertyChanged("EnableTickets");
						OnEnableTicketsChanged();
					}
				}
			}

			partial void OnVatStatusChanging(Model.Entities.Promoter.VatStatusEnum value);
			partial void OnVatStatusChanged();
			private Model.Entities.Promoter.VatStatusEnum _VatStatus;
			[Column(Storage="_VatStatus", DbType="Int", CanBeNull=false)]
			public  override Model.Entities.Promoter.VatStatusEnum VatStatus {
				get { return _VatStatus; }
				set {
					if (_VatStatus != value) {
						OnVatStatusChanging(value);
						SendPropertyChanging();
						_VatStatus = value;
						SendPropertyChanged("VatStatus");
						OnVatStatusChanged();
					}
				}
			}

			partial void OnVatNumberChanging(string value);
			partial void OnVatNumberChanged();
			private string _VatNumber;
			[Column(Storage="_VatNumber", DbType="VarChar(50)", CanBeNull=false)]
			public  override string VatNumber {
				get { return _VatNumber; }
				set {
					if (_VatNumber != value) {
						OnVatNumberChanging(value);
						SendPropertyChanging();
						_VatNumber = value;
						SendPropertyChanged("VatNumber");
						OnVatNumberChanged();
					}
				}
			}

			partial void OnVatCountryKChanging(int value);
			partial void OnVatCountryKChanged();
			private int _VatCountryK;
			[Column(Storage="_VatCountryK", DbType="Int", CanBeNull=false)]
			public  override int VatCountryK {
				get { return _VatCountryK; }
				set {
					if (_VatCountryK != value) {
						OnVatCountryKChanging(value);
						SendPropertyChanging();
						_VatCountryK = value;
						SendPropertyChanged("VatCountryK");
						OnVatCountryKChanged();
					}
				}
			}

			partial void OnAddedByUsrKChanging(int value);
			partial void OnAddedByUsrKChanged();
			private int _AddedByUsrK;
			[Column(Storage="_AddedByUsrK", DbType="Int", CanBeNull=false)]
			public  override int AddedByUsrK {
				get { return _AddedByUsrK; }
				set {
					if (_AddedByUsrK != value) {
						OnAddedByUsrKChanging(value);
						SendPropertyChanging();
						_AddedByUsrK = value;
						SendPropertyChanged("AddedByUsrK");
						OnAddedByUsrKChanged();
					}
				}
			}

			partial void OnAddedMethodChanging(Model.Entities.Promoter.AddedMedhods value);
			partial void OnAddedMethodChanged();
			private Model.Entities.Promoter.AddedMedhods _AddedMethod;
			[Column(Storage="_AddedMethod", DbType="Int", CanBeNull=false)]
			public  override Model.Entities.Promoter.AddedMedhods AddedMethod {
				get { return _AddedMethod; }
				set {
					if (_AddedMethod != value) {
						OnAddedMethodChanging(value);
						SendPropertyChanging();
						_AddedMethod = value;
						SendPropertyChanged("AddedMethod");
						OnAddedMethodChanged();
					}
				}
			}

			partial void OnBankNameChanging(string value);
			partial void OnBankNameChanged();
			private string _BankName;
			[Column(Storage="_BankName", DbType="VarChar(100)", CanBeNull=false)]
			public  override string BankName {
				get { return _BankName; }
				set {
					if (_BankName != value) {
						OnBankNameChanging(value);
						SendPropertyChanging();
						_BankName = value;
						SendPropertyChanged("BankName");
						OnBankNameChanged();
					}
				}
			}

			partial void OnBankAccountNameChanging(string value);
			partial void OnBankAccountNameChanged();
			private string _BankAccountName;
			[Column(Storage="_BankAccountName", DbType="VarChar(100)", CanBeNull=false)]
			public  override string BankAccountName {
				get { return _BankAccountName; }
				set {
					if (_BankAccountName != value) {
						OnBankAccountNameChanging(value);
						SendPropertyChanging();
						_BankAccountName = value;
						SendPropertyChanged("BankAccountName");
						OnBankAccountNameChanged();
					}
				}
			}

			partial void OnBankAccountSortCodeChanging(string value);
			partial void OnBankAccountSortCodeChanged();
			private string _BankAccountSortCode;
			[Column(Storage="_BankAccountSortCode", DbType="VarChar(50)", CanBeNull=false)]
			public  override string BankAccountSortCode {
				get { return _BankAccountSortCode; }
				set {
					if (_BankAccountSortCode != value) {
						OnBankAccountSortCodeChanging(value);
						SendPropertyChanging();
						_BankAccountSortCode = value;
						SendPropertyChanged("BankAccountSortCode");
						OnBankAccountSortCodeChanged();
					}
				}
			}

			partial void OnBankAccountNumberChanging(string value);
			partial void OnBankAccountNumberChanged();
			private string _BankAccountNumber;
			[Column(Storage="_BankAccountNumber", DbType="VarChar(50)", CanBeNull=false)]
			public  override string BankAccountNumber {
				get { return _BankAccountNumber; }
				set {
					if (_BankAccountNumber != value) {
						OnBankAccountNumberChanging(value);
						SendPropertyChanging();
						_BankAccountNumber = value;
						SendPropertyChanged("BankAccountNumber");
						OnBankAccountNumberChanged();
					}
				}
			}

			partial void OnOverrideApplyTicketFundsToInvoicesChanging(bool value);
			partial void OnOverrideApplyTicketFundsToInvoicesChanged();
			private bool _OverrideApplyTicketFundsToInvoices;
			[Column(Storage="_OverrideApplyTicketFundsToInvoices", DbType="Bit", CanBeNull=false)]
			public  override bool OverrideApplyTicketFundsToInvoices {
				get { return _OverrideApplyTicketFundsToInvoices; }
				set {
					if (_OverrideApplyTicketFundsToInvoices != value) {
						OnOverrideApplyTicketFundsToInvoicesChanging(value);
						SendPropertyChanging();
						_OverrideApplyTicketFundsToInvoices = value;
						SendPropertyChanged("OverrideApplyTicketFundsToInvoices");
						OnOverrideApplyTicketFundsToInvoicesChanged();
					}
				}
			}

			partial void OnSalesCallCountChanging(int value);
			partial void OnSalesCallCountChanged();
			private int _SalesCallCount;
			[Column(Storage="_SalesCallCount", DbType="Int", CanBeNull=false)]
			public  override int SalesCallCount {
				get { return _SalesCallCount; }
				set {
					if (_SalesCallCount != value) {
						OnSalesCallCountChanging(value);
						SendPropertyChanging();
						_SalesCallCount = value;
						SendPropertyChanged("SalesCallCount");
						OnSalesCallCountChanged();
					}
				}
			}

			partial void OnRecentlyTransferredChanging(bool value);
			partial void OnRecentlyTransferredChanged();
			private bool _RecentlyTransferred;
			[Column(Storage="_RecentlyTransferred", DbType="Bit", CanBeNull=false)]
			public  override bool RecentlyTransferred {
				get { return _RecentlyTransferred; }
				set {
					if (_RecentlyTransferred != value) {
						OnRecentlyTransferredChanging(value);
						SendPropertyChanging();
						_RecentlyTransferred = value;
						SendPropertyChanged("RecentlyTransferred");
						OnRecentlyTransferredChanged();
					}
				}
			}

			partial void OnIsAgencyChanging(bool value);
			partial void OnIsAgencyChanged();
			private bool _IsAgency;
			[Column(Storage="_IsAgency", DbType="Bit NOT NULL", CanBeNull=false)]
			public  override bool IsAgency {
				get { return _IsAgency; }
				set {
					if (_IsAgency != value) {
						OnIsAgencyChanging(value);
						SendPropertyChanging();
						_IsAgency = value;
						SendPropertyChanged("IsAgency");
						OnIsAgencyChanged();
					}
				}
			}

			partial void OnDiscountChanging(int value);
			partial void OnDiscountChanged();
			private int _Discount;
			[Column(Storage="_Discount", DbType="Int", CanBeNull=false)]
			public  override int Discount {
				get { return _Discount; }
				set {
					if (_Discount != value) {
						OnDiscountChanging(value);
						SendPropertyChanging();
						_Discount = value;
						SendPropertyChanged("Discount");
						OnDiscountChanged();
					}
				}
			}

			partial void OnAddRandomCodeToTicketsChanging(bool value);
			partial void OnAddRandomCodeToTicketsChanged();
			private bool _AddRandomCodeToTickets;
			[Column(Storage="_AddRandomCodeToTickets", DbType="Bit", CanBeNull=false)]
			public  override bool AddRandomCodeToTickets {
				get { return _AddRandomCodeToTickets; }
				set {
					if (_AddRandomCodeToTickets != value) {
						OnAddRandomCodeToTicketsChanging(value);
						SendPropertyChanging();
						_AddRandomCodeToTickets = value;
						SendPropertyChanged("AddRandomCodeToTickets");
						OnAddRandomCodeToTicketsChanged();
					}
				}
			}

			partial void OnWillCheckCardsForPurchasedTicketsChanging(bool value);
			partial void OnWillCheckCardsForPurchasedTicketsChanged();
			private bool _WillCheckCardsForPurchasedTickets;
			[Column(Storage="_WillCheckCardsForPurchasedTickets", DbType="Bit", CanBeNull=false)]
			public  override bool WillCheckCardsForPurchasedTickets {
				get { return _WillCheckCardsForPurchasedTickets; }
				set {
					if (_WillCheckCardsForPurchasedTickets != value) {
						OnWillCheckCardsForPurchasedTicketsChanging(value);
						SendPropertyChanging();
						_WillCheckCardsForPurchasedTickets = value;
						SendPropertyChanged("WillCheckCardsForPurchasedTickets");
						OnWillCheckCardsForPurchasedTicketsChanged();
					}
				}
			}

			partial void OnSalesCampaignKChanging(int value);
			partial void OnSalesCampaignKChanged();
			private int _SalesCampaignK;
			[Column(Storage="_SalesCampaignK", DbType="Int", CanBeNull=false)]
			public  override int SalesCampaignK {
				get { return _SalesCampaignK; }
				set {
					if (_SalesCampaignK != value) {
						OnSalesCampaignKChanging(value);
						SendPropertyChanging();
						_SalesCampaignK = value;
						SendPropertyChanged("SalesCampaignK");
						OnSalesCampaignKChanged();
					}
				}
			}

			partial void OnCostPerCampaignCreditChanging(decimal value);
			partial void OnCostPerCampaignCreditChanged();
			private decimal _CostPerCampaignCredit;
			[Column(Storage="_CostPerCampaignCredit", DbType="Decimal(18,2)", CanBeNull=false)]
			public  override decimal CostPerCampaignCredit {
				get { return _CostPerCampaignCredit; }
				set {
					if (_CostPerCampaignCredit != value) {
						OnCostPerCampaignCreditChanging(value);
						SendPropertyChanging();
						_CostPerCampaignCredit = value;
						SendPropertyChanged("CostPerCampaignCredit");
						OnCostPerCampaignCreditChanged();
					}
				}
			}

			partial void OnSuspendReminderEmailsChanging(bool value);
			partial void OnSuspendReminderEmailsChanged();
			private bool _SuspendReminderEmails;
			[Column(Storage="_SuspendReminderEmails", DbType="Bit NOT NULL", CanBeNull=false)]
			public  override bool SuspendReminderEmails {
				get { return _SuspendReminderEmails; }
				set {
					if (_SuspendReminderEmails != value) {
						OnSuspendReminderEmailsChanging(value);
						SendPropertyChanging();
						_SuspendReminderEmails = value;
						SendPropertyChanged("SuspendReminderEmails");
						OnSuspendReminderEmailsChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.PromoterUsr")]
 		public partial class PromoterUsr : Model.Entities.PromoterUsr, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public PromoterUsr()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnPromoterKChanging(int value);
			partial void OnPromoterKChanged();
			private int _PromoterK;
			[Column(Storage="_PromoterK", DbType="Int", CanBeNull=false)]
			public  override int PromoterK {
				get { return _PromoterK; }
				set {
					if (_PromoterK != value) {
						OnPromoterKChanging(value);
						SendPropertyChanging();
						_PromoterK = value;
						SendPropertyChanged("PromoterK");
						OnPromoterKChanged();
					}
				}
			}

			partial void OnUsrKChanging(int value);
			partial void OnUsrKChanged();
			private int _UsrK;
			[Column(Storage="_UsrK", DbType="Int", CanBeNull=false)]
			public  override int UsrK {
				get { return _UsrK; }
				set {
					if (_UsrK != value) {
						OnUsrKChanging(value);
						SendPropertyChanging();
						_UsrK = value;
						SendPropertyChanged("UsrK");
						OnUsrKChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.Region")]
 		public partial class Region : Model.Entities.Region, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public Region()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnKChanging(int value);
			partial void OnKChanged();
			private int _K;
			[Column(Storage="_K", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
			public  override int K {
				get { return _K; }
				set {
					if (_K != value) {
						OnKChanging(value);
						SendPropertyChanging();
						_K = value;
						SendPropertyChanged("K");
						OnKChanged();
					}
				}
			}

			partial void OnCountryKChanging(int value);
			partial void OnCountryKChanged();
			private int _CountryK;
			[Column(Storage="_CountryK", DbType="Int", CanBeNull=false)]
			public  override int CountryK {
				get { return _CountryK; }
				set {
					if (_CountryK != value) {
						OnCountryKChanging(value);
						SendPropertyChanging();
						_CountryK = value;
						SendPropertyChanged("CountryK");
						OnCountryKChanged();
					}
				}
			}

			partial void OnSubCountryChanging(int value);
			partial void OnSubCountryChanged();
			private int _SubCountry;
			[Column(Storage="_SubCountry", DbType="Int", CanBeNull=false)]
			public  override int SubCountry {
				get { return _SubCountry; }
				set {
					if (_SubCountry != value) {
						OnSubCountryChanging(value);
						SendPropertyChanging();
						_SubCountry = value;
						SendPropertyChanged("SubCountry");
						OnSubCountryChanged();
					}
				}
			}

			partial void OnNameChanging(string value);
			partial void OnNameChanged();
			private string _Name;
			[Column(Storage="_Name", DbType="VarChar(100)", CanBeNull=false)]
			public  override string Name {
				get { return _Name; }
				set {
					if (_Name != value) {
						OnNameChanging(value);
						SendPropertyChanging();
						_Name = value;
						SendPropertyChanged("Name");
						OnNameChanged();
					}
				}
			}

			partial void OnAbbreviationChanging(string value);
			partial void OnAbbreviationChanged();
			private string _Abbreviation;
			[Column(Storage="_Abbreviation", DbType="VarChar(10)", CanBeNull=false)]
			public  override string Abbreviation {
				get { return _Abbreviation; }
				set {
					if (_Abbreviation != value) {
						OnAbbreviationChanging(value);
						SendPropertyChanging();
						_Abbreviation = value;
						SendPropertyChanged("Abbreviation");
						OnAbbreviationChanged();
					}
				}
			}

			partial void OnPopulationChanging(double value);
			partial void OnPopulationChanged();
			private double _Population;
			[Column(Storage="_Population", DbType="Float", CanBeNull=false)]
			public  override double Population {
				get { return _Population; }
				set {
					if (_Population != value) {
						OnPopulationChanging(value);
						SendPropertyChanging();
						_Population = value;
						SendPropertyChanged("Population");
						OnPopulationChanged();
					}
				}
			}

			partial void OnAreaChanging(double value);
			partial void OnAreaChanged();
			private double _Area;
			[Column(Storage="_Area", DbType="Float", CanBeNull=false)]
			public  override double Area {
				get { return _Area; }
				set {
					if (_Area != value) {
						OnAreaChanging(value);
						SendPropertyChanging();
						_Area = value;
						SendPropertyChanged("Area");
						OnAreaChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.RoomPin")]
 		public partial class RoomPin : Model.Entities.RoomPin, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public RoomPin()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnUsrKChanging(int value);
			partial void OnUsrKChanged();
			private int _UsrK;
			[Column(Storage="_UsrK", DbType="Int NOT NULL", IsPrimaryKey=true)]
			public  override int UsrK {
				get { return _UsrK; }
				set {
					if (_UsrK != value) {
						OnUsrKChanging(value);
						SendPropertyChanging();
						_UsrK = value;
						SendPropertyChanged("UsrK");
						OnUsrKChanged();
					}
				}
			}

			partial void OnRoomGuidChanging(Guid value);
			partial void OnRoomGuidChanged();
			private Guid _RoomGuid;
			[Column(Storage="_RoomGuid", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
			public  override Guid RoomGuid {
				get { return _RoomGuid; }
				set {
					if (_RoomGuid != value) {
						OnRoomGuidChanging(value);
						SendPropertyChanging();
						_RoomGuid = value;
						SendPropertyChanged("RoomGuid");
						OnRoomGuidChanged();
					}
				}
			}

			partial void OnDateTimeChanging(DateTime value);
			partial void OnDateTimeChanged();
			private DateTime _DateTime;
			[Column(Storage="_DateTime", DbType="DateTime", CanBeNull=false)]
			public  override DateTime DateTime {
				get { return _DateTime; }
				set {
					if (_DateTime != value) {
						OnDateTimeChanging(value);
						SendPropertyChanging();
						_DateTime = value;
						SendPropertyChanged("DateTime");
						OnDateTimeChanged();
					}
				}
			}

			partial void OnListOrderChanging(int value);
			partial void OnListOrderChanged();
			private int _ListOrder;
			[Column(Storage="_ListOrder", DbType="Int", CanBeNull=false)]
			public  override int ListOrder {
				get { return _ListOrder; }
				set {
					if (_ListOrder != value) {
						OnListOrderChanging(value);
						SendPropertyChanging();
						_ListOrder = value;
						SendPropertyChanged("ListOrder");
						OnListOrderChanged();
					}
				}
			}

			partial void OnPinnedChanging(bool value);
			partial void OnPinnedChanged();
			private bool _Pinned;
			[Column(Storage="_Pinned", DbType="Bit", CanBeNull=false)]
			public  override bool Pinned {
				get { return _Pinned; }
				set {
					if (_Pinned != value) {
						OnPinnedChanging(value);
						SendPropertyChanging();
						_Pinned = value;
						SendPropertyChanged("Pinned");
						OnPinnedChanged();
					}
				}
			}

			partial void OnExpiresChanging(bool value);
			partial void OnExpiresChanged();
			private bool _Expires;
			[Column(Storage="_Expires", DbType="Bit", CanBeNull=false)]
			public  override bool Expires {
				get { return _Expires; }
				set {
					if (_Expires != value) {
						OnExpiresChanging(value);
						SendPropertyChanging();
						_Expires = value;
						SendPropertyChanged("Expires");
						OnExpiresChanged();
					}
				}
			}

			partial void OnDateTimeExpiresChanging(DateTime value);
			partial void OnDateTimeExpiresChanged();
			private DateTime _DateTimeExpires;
			[Column(Storage="_DateTimeExpires", DbType="DateTime", CanBeNull=false)]
			public  override DateTime DateTimeExpires {
				get { return _DateTimeExpires; }
				set {
					if (_DateTimeExpires != value) {
						OnDateTimeExpiresChanging(value);
						SendPropertyChanging();
						_DateTimeExpires = value;
						SendPropertyChanged("DateTimeExpires");
						OnDateTimeExpiresChanged();
					}
				}
			}

			partial void OnStarredChanging(bool? value);
			partial void OnStarredChanged();
			private bool? _Starred;
			[Column(Storage="_Starred", DbType="Bit")]
			public  override bool? Starred {
				get { return _Starred; }
				set {
					if (_Starred != value) {
						OnStarredChanging(value);
						SendPropertyChanging();
						_Starred = value;
						SendPropertyChanged("Starred");
						OnStarredChanged();
					}
				}
			}

			partial void OnStateStubChanging(string value);
			partial void OnStateStubChanged();
			private string _StateStub;
			[Column(Storage="_StateStub", DbType="VarChar(4096)")]
			public  override string StateStub {
				get { return _StateStub; }
				set {
					if (_StateStub != value) {
						OnStateStubChanging(value);
						SendPropertyChanging();
						_StateStub = value;
						SendPropertyChanged("StateStub");
						OnStateStubChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.SalesCall")]
 		public partial class SalesCall : Model.Entities.SalesCall, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public SalesCall()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnKChanging(int value);
			partial void OnKChanged();
			private int _K;
			[Column(Storage="_K", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
			public  override int K {
				get { return _K; }
				set {
					if (_K != value) {
						OnKChanging(value);
						SendPropertyChanging();
						_K = value;
						SendPropertyChanged("K");
						OnKChanged();
					}
				}
			}

			partial void OnDuplicateGuidChanging(Guid value);
			partial void OnDuplicateGuidChanged();
			private Guid _DuplicateGuid;
			[Column(Storage="_DuplicateGuid", DbType="UniqueIdentifier NOT NULL", CanBeNull=false)]
			public  override Guid DuplicateGuid {
				get { return _DuplicateGuid; }
				set {
					if (_DuplicateGuid != value) {
						OnDuplicateGuidChanging(value);
						SendPropertyChanging();
						_DuplicateGuid = value;
						SendPropertyChanged("DuplicateGuid");
						OnDuplicateGuidChanged();
					}
				}
			}

			partial void OnUsrKChanging(int value);
			partial void OnUsrKChanged();
			private int _UsrK;
			[Column(Storage="_UsrK", DbType="Int NOT NULL", CanBeNull=false)]
			public  override int UsrK {
				get { return _UsrK; }
				set {
					if (_UsrK != value) {
						OnUsrKChanging(value);
						SendPropertyChanging();
						_UsrK = value;
						SendPropertyChanged("UsrK");
						OnUsrKChanged();
					}
				}
			}

			partial void OnPromoterKChanging(int value);
			partial void OnPromoterKChanged();
			private int _PromoterK;
			[Column(Storage="_PromoterK", DbType="Int NOT NULL", CanBeNull=false)]
			public  override int PromoterK {
				get { return _PromoterK; }
				set {
					if (_PromoterK != value) {
						OnPromoterKChanging(value);
						SendPropertyChanging();
						_PromoterK = value;
						SendPropertyChanged("PromoterK");
						OnPromoterKChanged();
					}
				}
			}

			partial void OnDateTimeStartChanging(DateTime value);
			partial void OnDateTimeStartChanged();
			private DateTime _DateTimeStart;
			[Column(Storage="_DateTimeStart", DbType="DateTime NOT NULL", CanBeNull=false)]
			public  override DateTime DateTimeStart {
				get { return _DateTimeStart; }
				set {
					if (_DateTimeStart != value) {
						OnDateTimeStartChanging(value);
						SendPropertyChanging();
						_DateTimeStart = value;
						SendPropertyChanged("DateTimeStart");
						OnDateTimeStartChanged();
					}
				}
			}

			partial void OnDateTimeEndChanging(DateTime value);
			partial void OnDateTimeEndChanged();
			private DateTime _DateTimeEnd;
			[Column(Storage="_DateTimeEnd", DbType="DateTime", CanBeNull=false)]
			public  override DateTime DateTimeEnd {
				get { return _DateTimeEnd; }
				set {
					if (_DateTimeEnd != value) {
						OnDateTimeEndChanging(value);
						SendPropertyChanging();
						_DateTimeEnd = value;
						SendPropertyChanged("DateTimeEnd");
						OnDateTimeEndChanged();
					}
				}
			}

			partial void OnDurationChanging(double value);
			partial void OnDurationChanged();
			private double _Duration;
			[Column(Storage="_Duration", DbType="Float", CanBeNull=false)]
			public  override double Duration {
				get { return _Duration; }
				set {
					if (_Duration != value) {
						OnDurationChanging(value);
						SendPropertyChanging();
						_Duration = value;
						SendPropertyChanged("Duration");
						OnDurationChanged();
					}
				}
			}

			partial void OnInProgressChanging(bool value);
			partial void OnInProgressChanged();
			private bool _InProgress;
			[Column(Storage="_InProgress", DbType="Bit NOT NULL", CanBeNull=false)]
			public  override bool InProgress {
				get { return _InProgress; }
				set {
					if (_InProgress != value) {
						OnInProgressChanging(value);
						SendPropertyChanging();
						_InProgress = value;
						SendPropertyChanged("InProgress");
						OnInProgressChanged();
					}
				}
			}

			partial void OnDirectionChanging(Model.Entities.SalesCall.Directions value);
			partial void OnDirectionChanged();
			private Model.Entities.SalesCall.Directions _Direction;
			[Column(Storage="_Direction", DbType="Int NOT NULL", CanBeNull=false)]
			public  override Model.Entities.SalesCall.Directions Direction {
				get { return _Direction; }
				set {
					if (_Direction != value) {
						OnDirectionChanging(value);
						SendPropertyChanging();
						_Direction = value;
						SendPropertyChanged("Direction");
						OnDirectionChanged();
					}
				}
			}

			partial void OnTypeChanging(Model.Entities.SalesCall.Types value);
			partial void OnTypeChanged();
			private Model.Entities.SalesCall.Types _Type;
			[Column(Storage="_Type", DbType="Int NOT NULL", CanBeNull=false)]
			public  override Model.Entities.SalesCall.Types Type {
				get { return _Type; }
				set {
					if (_Type != value) {
						OnTypeChanging(value);
						SendPropertyChanging();
						_Type = value;
						SendPropertyChanged("Type");
						OnTypeChanged();
					}
				}
			}

			partial void OnEffectiveChanging(bool value);
			partial void OnEffectiveChanged();
			private bool _Effective;
			[Column(Storage="_Effective", DbType="Bit NOT NULL", CanBeNull=false)]
			public  override bool Effective {
				get { return _Effective; }
				set {
					if (_Effective != value) {
						OnEffectiveChanging(value);
						SendPropertyChanging();
						_Effective = value;
						SendPropertyChanged("Effective");
						OnEffectiveChanged();
					}
				}
			}

			partial void OnIsCallChanging(bool value);
			partial void OnIsCallChanged();
			private bool _IsCall;
			[Column(Storage="_IsCall", DbType="Bit NOT NULL", CanBeNull=false)]
			public  override bool IsCall {
				get { return _IsCall; }
				set {
					if (_IsCall != value) {
						OnIsCallChanging(value);
						SendPropertyChanging();
						_IsCall = value;
						SendPropertyChanged("IsCall");
						OnIsCallChanged();
					}
				}
			}

			partial void OnNoteChanging(string value);
			partial void OnNoteChanged();
			private string _Note;
			[Column(Storage="_Note", DbType="Text", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
			public  override string Note {
				get { return _Note; }
				set {
					if (_Note != value) {
						OnNoteChanging(value);
						SendPropertyChanging();
						_Note = value;
						SendPropertyChanged("Note");
						OnNoteChanged();
					}
				}
			}

			partial void OnDismissedChanging(bool value);
			partial void OnDismissedChanged();
			private bool _Dismissed;
			[Column(Storage="_Dismissed", DbType="Bit", CanBeNull=false)]
			public  override bool Dismissed {
				get { return _Dismissed; }
				set {
					if (_Dismissed != value) {
						OnDismissedChanging(value);
						SendPropertyChanging();
						_Dismissed = value;
						SendPropertyChanged("Dismissed");
						OnDismissedChanged();
					}
				}
			}

			partial void OnIsImportantChanging(bool value);
			partial void OnIsImportantChanged();
			private bool _IsImportant;
			[Column(Storage="_IsImportant", DbType="Bit", CanBeNull=false)]
			public  override bool IsImportant {
				get { return _IsImportant; }
				set {
					if (_IsImportant != value) {
						OnIsImportantChanging(value);
						SendPropertyChanging();
						_IsImportant = value;
						SendPropertyChanged("IsImportant");
						OnIsImportantChanged();
					}
				}
			}

			partial void OnIsCallToNewLeadChanging(bool value);
			partial void OnIsCallToNewLeadChanged();
			private bool _IsCallToNewLead;
			[Column(Storage="_IsCallToNewLead", DbType="Bit", CanBeNull=false)]
			public  override bool IsCallToNewLead {
				get { return _IsCallToNewLead; }
				set {
					if (_IsCallToNewLead != value) {
						OnIsCallToNewLeadChanging(value);
						SendPropertyChanging();
						_IsCallToNewLead = value;
						SendPropertyChanged("IsCallToNewLead");
						OnIsCallToNewLeadChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.SalesCampaign")]
 		public partial class SalesCampaign : Model.Entities.SalesCampaign, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public SalesCampaign()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnKChanging(int value);
			partial void OnKChanged();
			private int _K;
			[Column(Storage="_K", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
			public  override int K {
				get { return _K; }
				set {
					if (_K != value) {
						OnKChanging(value);
						SendPropertyChanging();
						_K = value;
						SendPropertyChanged("K");
						OnKChanged();
					}
				}
			}

			partial void OnUsrKChanging(int value);
			partial void OnUsrKChanged();
			private int _UsrK;
			[Column(Storage="_UsrK", DbType="Int NOT NULL", CanBeNull=false)]
			public  override int UsrK {
				get { return _UsrK; }
				set {
					if (_UsrK != value) {
						OnUsrKChanging(value);
						SendPropertyChanging();
						_UsrK = value;
						SendPropertyChanged("UsrK");
						OnUsrKChanged();
					}
				}
			}

			partial void OnNameChanging(string value);
			partial void OnNameChanged();
			private string _Name;
			[Column(Storage="_Name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
			public  override string Name {
				get { return _Name; }
				set {
					if (_Name != value) {
						OnNameChanging(value);
						SendPropertyChanging();
						_Name = value;
						SendPropertyChanged("Name");
						OnNameChanged();
					}
				}
			}

			partial void OnDescriptionChanging(string value);
			partial void OnDescriptionChanged();
			private string _Description;
			[Column(Storage="_Description", DbType="Text", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
			public  override string Description {
				get { return _Description; }
				set {
					if (_Description != value) {
						OnDescriptionChanging(value);
						SendPropertyChanging();
						_Description = value;
						SendPropertyChanged("Description");
						OnDescriptionChanged();
					}
				}
			}

			partial void OnDateStartChanging(DateTime value);
			partial void OnDateStartChanged();
			private DateTime _DateStart;
			[Column(Storage="_DateStart", DbType="DateTime", CanBeNull=false)]
			public  override DateTime DateStart {
				get { return _DateStart; }
				set {
					if (_DateStart != value) {
						OnDateStartChanging(value);
						SendPropertyChanging();
						_DateStart = value;
						SendPropertyChanged("DateStart");
						OnDateStartChanged();
					}
				}
			}

			partial void OnDateEndChanging(DateTime value);
			partial void OnDateEndChanged();
			private DateTime _DateEnd;
			[Column(Storage="_DateEnd", DbType="DateTime", CanBeNull=false)]
			public  override DateTime DateEnd {
				get { return _DateEnd; }
				set {
					if (_DateEnd != value) {
						OnDateEndChanging(value);
						SendPropertyChanging();
						_DateEnd = value;
						SendPropertyChanged("DateEnd");
						OnDateEndChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.SalesStatusChange")]
 		public partial class SalesStatusChange : Model.Entities.SalesStatusChange, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public SalesStatusChange()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnKChanging(int value);
			partial void OnKChanged();
			private int _K;
			[Column(Storage="_K", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
			public  override int K {
				get { return _K; }
				set {
					if (_K != value) {
						OnKChanging(value);
						SendPropertyChanging();
						_K = value;
						SendPropertyChanged("K");
						OnKChanged();
					}
				}
			}

			partial void OnDuplicateGuidChanging(Guid value);
			partial void OnDuplicateGuidChanged();
			private Guid _DuplicateGuid;
			[Column(Storage="_DuplicateGuid", DbType="UniqueIdentifier NOT NULL", CanBeNull=false)]
			public  override Guid DuplicateGuid {
				get { return _DuplicateGuid; }
				set {
					if (_DuplicateGuid != value) {
						OnDuplicateGuidChanging(value);
						SendPropertyChanging();
						_DuplicateGuid = value;
						SendPropertyChanged("DuplicateGuid");
						OnDuplicateGuidChanged();
					}
				}
			}

			partial void OnUsrKChanging(int value);
			partial void OnUsrKChanged();
			private int _UsrK;
			[Column(Storage="_UsrK", DbType="Int NOT NULL", CanBeNull=false)]
			public  override int UsrK {
				get { return _UsrK; }
				set {
					if (_UsrK != value) {
						OnUsrKChanging(value);
						SendPropertyChanging();
						_UsrK = value;
						SendPropertyChanged("UsrK");
						OnUsrKChanged();
					}
				}
			}

			partial void OnPromoterKChanging(int value);
			partial void OnPromoterKChanged();
			private int _PromoterK;
			[Column(Storage="_PromoterK", DbType="Int NOT NULL", CanBeNull=false)]
			public  override int PromoterK {
				get { return _PromoterK; }
				set {
					if (_PromoterK != value) {
						OnPromoterKChanging(value);
						SendPropertyChanging();
						_PromoterK = value;
						SendPropertyChanged("PromoterK");
						OnPromoterKChanged();
					}
				}
			}

			partial void OnDateTimeChanging(DateTime value);
			partial void OnDateTimeChanged();
			private DateTime _DateTime;
			[Column(Storage="_DateTime", DbType="DateTime NOT NULL", CanBeNull=false)]
			public  override DateTime DateTime {
				get { return _DateTime; }
				set {
					if (_DateTime != value) {
						OnDateTimeChanging(value);
						SendPropertyChanging();
						_DateTime = value;
						SendPropertyChanged("DateTime");
						OnDateTimeChanged();
					}
				}
			}

			partial void OnTypeChanging(Model.Entities.SalesStatusChange.Types value);
			partial void OnTypeChanged();
			private Model.Entities.SalesStatusChange.Types _Type;
			[Column(Storage="_Type", DbType="Int NOT NULL", CanBeNull=false)]
			public  override Model.Entities.SalesStatusChange.Types Type {
				get { return _Type; }
				set {
					if (_Type != value) {
						OnTypeChanging(value);
						SendPropertyChanging();
						_Type = value;
						SendPropertyChanged("Type");
						OnTypeChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.Setting")]
 		public partial class Setting : Model.Entities.Setting, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public Setting()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnNameChanging(string value);
			partial void OnNameChanged();
			private string _Name;
			[Column(Storage="_Name", DbType="VarChar(100) NOT NULL", IsPrimaryKey=true)]
			public  override string Name {
				get { return _Name; }
				set {
					if (_Name != value) {
						OnNameChanging(value);
						SendPropertyChanging();
						_Name = value;
						SendPropertyChanged("Name");
						OnNameChanged();
					}
				}
			}

			partial void OnValueChanging(object value);
			partial void OnValueChanged();
			private object _Value;
			[Column(Storage="_Value", DbType="sql_variant NOT NULL", CanBeNull=false)]
			public  override object Value {
				get { return _Value; }
				set {
					if (_Value != value) {
						OnValueChanging(value);
						SendPropertyChanging();
						_Value = value;
						SendPropertyChanged("Value");
						OnValueChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.SpottedException")]
 		public partial class SpottedException : Model.Entities.SpottedException, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public SpottedException()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnKChanging(int value);
			partial void OnKChanged();
			private int _K;
			[Column(Storage="_K", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
			public  override int K {
				get { return _K; }
				set {
					if (_K != value) {
						OnKChanging(value);
						SendPropertyChanging();
						_K = value;
						SendPropertyChanged("K");
						OnKChanged();
					}
				}
			}

			partial void OnParentKChanging(int value);
			partial void OnParentKChanged();
			private int _ParentK;
			[Column(Storage="_ParentK", DbType="Int", CanBeNull=false)]
			public  override int ParentK {
				get { return _ParentK; }
				set {
					if (_ParentK != value) {
						OnParentKChanging(value);
						SendPropertyChanging();
						_ParentK = value;
						SendPropertyChanged("ParentK");
						OnParentKChanged();
					}
				}
			}

			partial void OnExceptionDateTimeChanging(DateTime value);
			partial void OnExceptionDateTimeChanged();
			private DateTime _ExceptionDateTime;
			[Column(Storage="_ExceptionDateTime", DbType="DateTime NOT NULL", CanBeNull=false)]
			public  override DateTime ExceptionDateTime {
				get { return _ExceptionDateTime; }
				set {
					if (_ExceptionDateTime != value) {
						OnExceptionDateTimeChanging(value);
						SendPropertyChanging();
						_ExceptionDateTime = value;
						SendPropertyChanged("ExceptionDateTime");
						OnExceptionDateTimeChanged();
					}
				}
			}

			partial void OnExceptionTypeChanging(string value);
			partial void OnExceptionTypeChanged();
			private string _ExceptionType;
			[Column(Storage="_ExceptionType", DbType="VarChar(50)", CanBeNull=false)]
			public  override string ExceptionType {
				get { return _ExceptionType; }
				set {
					if (_ExceptionType != value) {
						OnExceptionTypeChanging(value);
						SendPropertyChanging();
						_ExceptionType = value;
						SendPropertyChanged("ExceptionType");
						OnExceptionTypeChanged();
					}
				}
			}

			partial void OnMessageChanging(string value);
			partial void OnMessageChanged();
			private string _Message;
			[Column(Storage="_Message", DbType="VarChar(4000)", CanBeNull=false)]
			public  override string Message {
				get { return _Message; }
				set {
					if (_Message != value) {
						OnMessageChanging(value);
						SendPropertyChanging();
						_Message = value;
						SendPropertyChanged("Message");
						OnMessageChanged();
					}
				}
			}

			partial void OnSourceChanging(string value);
			partial void OnSourceChanged();
			private string _Source;
			[Column(Storage="_Source", DbType="VarChar(50)", CanBeNull=false)]
			public  override string Source {
				get { return _Source; }
				set {
					if (_Source != value) {
						OnSourceChanging(value);
						SendPropertyChanging();
						_Source = value;
						SendPropertyChanged("Source");
						OnSourceChanged();
					}
				}
			}

			partial void OnStackTraceChanging(string value);
			partial void OnStackTraceChanged();
			private string _StackTrace;
			[Column(Storage="_StackTrace", DbType="VarChar(4000)", CanBeNull=false)]
			public  override string StackTrace {
				get { return _StackTrace; }
				set {
					if (_StackTrace != value) {
						OnStackTraceChanging(value);
						SendPropertyChanging();
						_StackTrace = value;
						SendPropertyChanged("StackTrace");
						OnStackTraceChanged();
					}
				}
			}

			partial void OnUrlChanging(string value);
			partial void OnUrlChanged();
			private string _Url;
			[Column(Storage="_Url", DbType="VarChar(150)", CanBeNull=false)]
			public  override string Url {
				get { return _Url; }
				set {
					if (_Url != value) {
						OnUrlChanging(value);
						SendPropertyChanging();
						_Url = value;
						SendPropertyChanged("Url");
						OnUrlChanged();
					}
				}
			}

			partial void OnMasterPathChanging(string value);
			partial void OnMasterPathChanged();
			private string _MasterPath;
			[Column(Storage="_MasterPath", DbType="VarChar(50)", CanBeNull=false)]
			public  override string MasterPath {
				get { return _MasterPath; }
				set {
					if (_MasterPath != value) {
						OnMasterPathChanging(value);
						SendPropertyChanging();
						_MasterPath = value;
						SendPropertyChanged("MasterPath");
						OnMasterPathChanged();
					}
				}
			}

			partial void OnPagePathChanging(string value);
			partial void OnPagePathChanged();
			private string _PagePath;
			[Column(Storage="_PagePath", DbType="VarChar(50)", CanBeNull=false)]
			public  override string PagePath {
				get { return _PagePath; }
				set {
					if (_PagePath != value) {
						OnPagePathChanging(value);
						SendPropertyChanging();
						_PagePath = value;
						SendPropertyChanged("PagePath");
						OnPagePathChanged();
					}
				}
			}

			partial void OnCurrentFilterChanging(string value);
			partial void OnCurrentFilterChanged();
			private string _CurrentFilter;
			[Column(Storage="_CurrentFilter", DbType="VarChar(150)", CanBeNull=false)]
			public  override string CurrentFilter {
				get { return _CurrentFilter; }
				set {
					if (_CurrentFilter != value) {
						OnCurrentFilterChanging(value);
						SendPropertyChanging();
						_CurrentFilter = value;
						SendPropertyChanged("CurrentFilter");
						OnCurrentFilterChanged();
					}
				}
			}

			partial void OnObjectFilterKChanging(int value);
			partial void OnObjectFilterKChanged();
			private int _ObjectFilterK;
			[Column(Storage="_ObjectFilterK", DbType="Int", CanBeNull=false)]
			public  override int ObjectFilterK {
				get { return _ObjectFilterK; }
				set {
					if (_ObjectFilterK != value) {
						OnObjectFilterKChanging(value);
						SendPropertyChanging();
						_ObjectFilterK = value;
						SendPropertyChanged("ObjectFilterK");
						OnObjectFilterKChanged();
					}
				}
			}

			partial void OnObjectFilterTypeChanging(Model.Entities.ObjectType value);
			partial void OnObjectFilterTypeChanged();
			private Model.Entities.ObjectType _ObjectFilterType;
			[Column(Storage="_ObjectFilterType", DbType="Int", CanBeNull=false)]
			public  override Model.Entities.ObjectType ObjectFilterType {
				get { return _ObjectFilterType; }
				set {
					if (_ObjectFilterType != value) {
						OnObjectFilterTypeChanging(value);
						SendPropertyChanging();
						_ObjectFilterType = value;
						SendPropertyChanged("ObjectFilterType");
						OnObjectFilterTypeChanged();
					}
				}
			}

			partial void OnMachineNameChanging(string value);
			partial void OnMachineNameChanged();
			private string _MachineName;
			[Column(Storage="_MachineName", DbType="VarChar(50)", CanBeNull=false)]
			public  override string MachineName {
				get { return _MachineName; }
				set {
					if (_MachineName != value) {
						OnMachineNameChanging(value);
						SendPropertyChanging();
						_MachineName = value;
						SendPropertyChanged("MachineName");
						OnMachineNameChanged();
					}
				}
			}

			partial void OnUsrKChanging(int value);
			partial void OnUsrKChanged();
			private int _UsrK;
			[Column(Storage="_UsrK", DbType="Int", CanBeNull=false)]
			public  override int UsrK {
				get { return _UsrK; }
				set {
					if (_UsrK != value) {
						OnUsrKChanging(value);
						SendPropertyChanging();
						_UsrK = value;
						SendPropertyChanged("UsrK");
						OnUsrKChanged();
					}
				}
			}

			partial void OnDsiGuidChanging(Guid value);
			partial void OnDsiGuidChanged();
			private Guid _DsiGuid;
			[Column(Storage="_DsiGuid", DbType="UniqueIdentifier", CanBeNull=false)]
			public  override Guid DsiGuid {
				get { return _DsiGuid; }
				set {
					if (_DsiGuid != value) {
						OnDsiGuidChanging(value);
						SendPropertyChanging();
						_DsiGuid = value;
						SendPropertyChanged("DsiGuid");
						OnDsiGuidChanged();
					}
				}
			}

			partial void OnCookiesChanging(string value);
			partial void OnCookiesChanged();
			private string _Cookies;
			[Column(Storage="_Cookies", DbType="VarChar(4000)", CanBeNull=false)]
			public  override string Cookies {
				get { return _Cookies; }
				set {
					if (_Cookies != value) {
						OnCookiesChanging(value);
						SendPropertyChanging();
						_Cookies = value;
						SendPropertyChanged("Cookies");
						OnCookiesChanged();
					}
				}
			}

			partial void OnPostDataChanging(string value);
			partial void OnPostDataChanged();
			private string _PostData;
			[Column(Storage="_PostData", DbType="VarChar(4000)", CanBeNull=false)]
			public  override string PostData {
				get { return _PostData; }
				set {
					if (_PostData != value) {
						OnPostDataChanging(value);
						SendPropertyChanging();
						_PostData = value;
						SendPropertyChanged("PostData");
						OnPostDataChanged();
					}
				}
			}

			partial void OnIpAddressChanging(string value);
			partial void OnIpAddressChanged();
			private string _IpAddress;
			[Column(Storage="_IpAddress", DbType="VarChar(15)", CanBeNull=false)]
			public  override string IpAddress {
				get { return _IpAddress; }
				set {
					if (_IpAddress != value) {
						OnIpAddressChanging(value);
						SendPropertyChanging();
						_IpAddress = value;
						SendPropertyChanged("IpAddress");
						OnIpAddressChanged();
					}
				}
			}

			partial void OnCommonTimeNowChanging(DateTime value);
			partial void OnCommonTimeNowChanged();
			private DateTime _CommonTimeNow;
			[Column(Storage="_CommonTimeNow", DbType="DateTime", CanBeNull=false)]
			public  override DateTime CommonTimeNow {
				get { return _CommonTimeNow; }
				set {
					if (_CommonTimeNow != value) {
						OnCommonTimeNowChanging(value);
						SendPropertyChanging();
						_CommonTimeNow = value;
						SendPropertyChanged("CommonTimeNow");
						OnCommonTimeNowChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.Tag")]
 		public partial class Tag : Model.Entities.Tag, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public Tag()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnKChanging(int value);
			partial void OnKChanged();
			private int _K;
			[Column(Storage="_K", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
			public  override int K {
				get { return _K; }
				set {
					if (_K != value) {
						OnKChanging(value);
						SendPropertyChanging();
						_K = value;
						SendPropertyChanged("K");
						OnKChanged();
					}
				}
			}

			partial void OnTagTextChanging(string value);
			partial void OnTagTextChanged();
			private string _TagText;
			[Column(Storage="_TagText", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
			public  override string TagText {
				get { return _TagText; }
				set {
					if (_TagText != value) {
						OnTagTextChanging(value);
						SendPropertyChanging();
						_TagText = value;
						SendPropertyChanged("TagText");
						OnTagTextChanged();
					}
				}
			}

			partial void OnBlockedChanging(bool value);
			partial void OnBlockedChanged();
			private bool _Blocked;
			[Column(Storage="_Blocked", DbType="Bit NOT NULL", CanBeNull=false)]
			public  override bool Blocked {
				get { return _Blocked; }
				set {
					if (_Blocked != value) {
						OnBlockedChanging(value);
						SendPropertyChanging();
						_Blocked = value;
						SendPropertyChanged("Blocked");
						OnBlockedChanged();
					}
				}
			}

			partial void OnBlockedByUsrKChanging(int value);
			partial void OnBlockedByUsrKChanged();
			private int _BlockedByUsrK;
			[Column(Storage="_BlockedByUsrK", DbType="Int", CanBeNull=false)]
			public  override int BlockedByUsrK {
				get { return _BlockedByUsrK; }
				set {
					if (_BlockedByUsrK != value) {
						OnBlockedByUsrKChanging(value);
						SendPropertyChanging();
						_BlockedByUsrK = value;
						SendPropertyChanged("BlockedByUsrK");
						OnBlockedByUsrKChanged();
					}
				}
			}

			partial void OnBlockedDateTimeChanging(DateTime value);
			partial void OnBlockedDateTimeChanged();
			private DateTime _BlockedDateTime;
			[Column(Storage="_BlockedDateTime", DbType="DateTime", CanBeNull=false)]
			public  override DateTime BlockedDateTime {
				get { return _BlockedDateTime; }
				set {
					if (_BlockedDateTime != value) {
						OnBlockedDateTimeChanging(value);
						SendPropertyChanging();
						_BlockedDateTime = value;
						SendPropertyChanged("BlockedDateTime");
						OnBlockedDateTimeChanged();
					}
				}
			}

			partial void OnShowInTagCloudChanging(bool value);
			partial void OnShowInTagCloudChanged();
			private bool _ShowInTagCloud;
			[Column(Storage="_ShowInTagCloud", DbType="Bit NOT NULL", CanBeNull=false)]
			public  override bool ShowInTagCloud {
				get { return _ShowInTagCloud; }
				set {
					if (_ShowInTagCloud != value) {
						OnShowInTagCloudChanging(value);
						SendPropertyChanging();
						_ShowInTagCloud = value;
						SendPropertyChanged("ShowInTagCloud");
						OnShowInTagCloudChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.TagPhoto")]
 		public partial class TagPhoto : Model.Entities.TagPhoto, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public TagPhoto()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnKChanging(int value);
			partial void OnKChanged();
			private int _K;
			[Column(Storage="_K", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
			public  override int K {
				get { return _K; }
				set {
					if (_K != value) {
						OnKChanging(value);
						SendPropertyChanging();
						_K = value;
						SendPropertyChanged("K");
						OnKChanged();
					}
				}
			}

			partial void OnTagKChanging(int value);
			partial void OnTagKChanged();
			private int _TagK;
			[Column(Storage="_TagK", DbType="Int NOT NULL", CanBeNull=false)]
			public  override int TagK {
				get { return _TagK; }
				set {
					if (_TagK != value) {
						OnTagKChanging(value);
						SendPropertyChanging();
						_TagK = value;
						SendPropertyChanged("TagK");
						OnTagKChanged();
					}
				}
			}

			partial void OnPhotoKChanging(int value);
			partial void OnPhotoKChanged();
			private int _PhotoK;
			[Column(Storage="_PhotoK", DbType="Int NOT NULL", CanBeNull=false)]
			public  override int PhotoK {
				get { return _PhotoK; }
				set {
					if (_PhotoK != value) {
						OnPhotoKChanging(value);
						SendPropertyChanging();
						_PhotoK = value;
						SendPropertyChanged("PhotoK");
						OnPhotoKChanged();
					}
				}
			}

			partial void OnDisabledChanging(bool value);
			partial void OnDisabledChanged();
			private bool _Disabled;
			[Column(Storage="_Disabled", DbType="Bit NOT NULL", CanBeNull=false)]
			public  override bool Disabled {
				get { return _Disabled; }
				set {
					if (_Disabled != value) {
						OnDisabledChanging(value);
						SendPropertyChanging();
						_Disabled = value;
						SendPropertyChanged("Disabled");
						OnDisabledChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.TagPhotoHistory")]
 		public partial class TagPhotoHistory : Model.Entities.TagPhotoHistory, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public TagPhotoHistory()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnKChanging(int value);
			partial void OnKChanged();
			private int _K;
			[Column(Storage="_K", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
			public  override int K {
				get { return _K; }
				set {
					if (_K != value) {
						OnKChanging(value);
						SendPropertyChanging();
						_K = value;
						SendPropertyChanged("K");
						OnKChanged();
					}
				}
			}

			partial void OnTagPhotoKChanging(int value);
			partial void OnTagPhotoKChanged();
			private int _TagPhotoK;
			[Column(Storage="_TagPhotoK", DbType="Int NOT NULL", CanBeNull=false)]
			public  override int TagPhotoK {
				get { return _TagPhotoK; }
				set {
					if (_TagPhotoK != value) {
						OnTagPhotoKChanging(value);
						SendPropertyChanging();
						_TagPhotoK = value;
						SendPropertyChanged("TagPhotoK");
						OnTagPhotoKChanged();
					}
				}
			}

			partial void OnActionChanging(Model.Entities.TagPhotoHistory.TagPhotoHistoryAction value);
			partial void OnActionChanged();
			private Model.Entities.TagPhotoHistory.TagPhotoHistoryAction _Action;
			[Column(Storage="_Action", DbType="Int NOT NULL", CanBeNull=false)]
			public  override Model.Entities.TagPhotoHistory.TagPhotoHistoryAction Action {
				get { return _Action; }
				set {
					if (_Action != value) {
						OnActionChanging(value);
						SendPropertyChanging();
						_Action = value;
						SendPropertyChanged("Action");
						OnActionChanged();
					}
				}
			}

			partial void OnUsrKChanging(int value);
			partial void OnUsrKChanged();
			private int _UsrK;
			[Column(Storage="_UsrK", DbType="Int NOT NULL", CanBeNull=false)]
			public  override int UsrK {
				get { return _UsrK; }
				set {
					if (_UsrK != value) {
						OnUsrKChanging(value);
						SendPropertyChanging();
						_UsrK = value;
						SendPropertyChanged("UsrK");
						OnUsrKChanged();
					}
				}
			}

			partial void OnDateTimeChanging(DateTime value);
			partial void OnDateTimeChanged();
			private DateTime _DateTime;
			[Column(Storage="_DateTime", DbType="DateTime NOT NULL", CanBeNull=false)]
			public  override DateTime DateTime {
				get { return _DateTime; }
				set {
					if (_DateTime != value) {
						OnDateTimeChanging(value);
						SendPropertyChanging();
						_DateTime = value;
						SendPropertyChanged("DateTime");
						OnDateTimeChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.TeamTarget")]
 		public partial class TeamTarget : Model.Entities.TeamTarget, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public TeamTarget()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnYearChanging(int value);
			partial void OnYearChanged();
			private int _Year;
			[Column(Storage="_Year", DbType="Int NOT NULL", CanBeNull=false)]
			public  override int Year {
				get { return _Year; }
				set {
					if (_Year != value) {
						OnYearChanging(value);
						SendPropertyChanging();
						_Year = value;
						SendPropertyChanged("Year");
						OnYearChanged();
					}
				}
			}

			partial void OnMonthChanging(int value);
			partial void OnMonthChanged();
			private int _Month;
			[Column(Storage="_Month", DbType="Int NOT NULL", CanBeNull=false)]
			public  override int Month {
				get { return _Month; }
				set {
					if (_Month != value) {
						OnMonthChanging(value);
						SendPropertyChanging();
						_Month = value;
						SendPropertyChanged("Month");
						OnMonthChanged();
					}
				}
			}

			partial void OnTargetChanging(double value);
			partial void OnTargetChanged();
			private double _Target;
			[Column(Storage="_Target", DbType="Float", CanBeNull=false)]
			public  override double Target {
				get { return _Target; }
				set {
					if (_Target != value) {
						OnTargetChanging(value);
						SendPropertyChanging();
						_Target = value;
						SendPropertyChanged("Target");
						OnTargetChanged();
					}
				}
			}

			partial void OnActualChanging(double value);
			partial void OnActualChanged();
			private double _Actual;
			[Column(Storage="_Actual", DbType="Float", CanBeNull=false)]
			public  override double Actual {
				get { return _Actual; }
				set {
					if (_Actual != value) {
						OnActualChanging(value);
						SendPropertyChanging();
						_Actual = value;
						SendPropertyChanged("Actual");
						OnActualChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.Theme")]
 		public partial class Theme : Model.Entities.Theme, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public Theme()
			{
				_Groups = new EntitySet<Group>(attach_Groups, detach_Groups);
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnKChanging(int value);
			partial void OnKChanged();
			private int _K;
			[Column(Storage="_K", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
			public  override int K {
				get { return _K; }
				set {
					if (_K != value) {
						OnKChanging(value);
						SendPropertyChanging();
						_K = value;
						SendPropertyChanged("K");
						OnKChanged();
					}
				}
			}

			partial void OnUrlNameChanging(string value);
			partial void OnUrlNameChanged();
			private string _UrlName;
			[Column(Storage="_UrlName", DbType="VarChar(50)", CanBeNull=false)]
			public  override string UrlName {
				get { return _UrlName; }
				set {
					if (_UrlName != value) {
						OnUrlNameChanging(value);
						SendPropertyChanging();
						_UrlName = value;
						SendPropertyChanged("UrlName");
						OnUrlNameChanged();
					}
				}
			}

			partial void OnNameChanging(string value);
			partial void OnNameChanged();
			private string _Name;
			[Column(Storage="_Name", DbType="VarChar(50)", CanBeNull=false)]
			public  override string Name {
				get { return _Name; }
				set {
					if (_Name != value) {
						OnNameChanging(value);
						SendPropertyChanging();
						_Name = value;
						SendPropertyChanged("Name");
						OnNameChanged();
					}
				}
			}

			partial void OnDescriptionChanging(string value);
			partial void OnDescriptionChanged();
			private string _Description;
			[Column(Storage="_Description", DbType="VarChar(255)", CanBeNull=false)]
			public  override string Description {
				get { return _Description; }
				set {
					if (_Description != value) {
						OnDescriptionChanging(value);
						SendPropertyChanging();
						_Description = value;
						SendPropertyChanged("Description");
						OnDescriptionChanged();
					}
				}
			}

			partial void OnExamplesChanging(string value);
			partial void OnExamplesChanged();
			private string _Examples;
			[Column(Storage="_Examples", DbType="VarChar(255)", CanBeNull=false)]
			public  override string Examples {
				get { return _Examples; }
				set {
					if (_Examples != value) {
						OnExamplesChanging(value);
						SendPropertyChanging();
						_Examples = value;
						SendPropertyChanged("Examples");
						OnExamplesChanged();
					}
				}
			}

			partial void OnOrderChanging(double value);
			partial void OnOrderChanged();
			private double _Order;
			[Column(Storage="_Order", DbType="Float", CanBeNull=false)]
			public  override double Order {
				get { return _Order; }
				set {
					if (_Order != value) {
						OnOrderChanging(value);
						SendPropertyChanging();
						_Order = value;
						SendPropertyChanged("Order");
						OnOrderChanged();
					}
				}
			}

			#endregion

			#region Associations

			private EntitySet<Group> _Groups;
			[Association(Name="Theme_Group", Storage="_Groups", OtherKey="ThemeK")]
			public EntitySet<Group> Groups {
				get {
					return _Groups; 
				}
				set { _Groups.Assign(value); }
			}
		
			private void attach_Groups(Group entity) {
				SendPropertyChanging();
				entity.Theme = this;
			}
		
			private void detach_Groups(Group entity) {
				SendPropertyChanging();
				entity.Theme = null;
			}
			#endregion
		

		}

		[Table(Name=@"dbo.Thread")]
 		public partial class Thread : Model.Entities.Thread, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public Thread()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnKChanging(int value);
			partial void OnKChanged();
			private int _K;
			[Column(Storage="_K", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
			public  override int K {
				get { return _K; }
				set {
					if (_K != value) {
						OnKChanging(value);
						SendPropertyChanging();
						_K = value;
						SendPropertyChanged("K");
						OnKChanged();
					}
				}
			}

			partial void OnSubjectChanging(string value);
			partial void OnSubjectChanged();
			private string _Subject;
			[Column(Storage="_Subject", DbType="VarChar(200)", CanBeNull=false)]
			public  override string Subject {
				get { return _Subject; }
				set {
					if (_Subject != value) {
						OnSubjectChanging(value);
						SendPropertyChanging();
						_Subject = value;
						SendPropertyChanged("Subject");
						OnSubjectChanged();
					}
				}
			}

			partial void OnParentObjectTypeChanging(Model.Entities.ObjectType value);
			partial void OnParentObjectTypeChanged();
			private Model.Entities.ObjectType _ParentObjectType;
			[Column(Storage="_ParentObjectType", DbType="Int", CanBeNull=false)]
			public  override Model.Entities.ObjectType ParentObjectType {
				get { return _ParentObjectType; }
				set {
					if (_ParentObjectType != value) {
						OnParentObjectTypeChanging(value);
						SendPropertyChanging();
						_ParentObjectType = value;
						SendPropertyChanged("ParentObjectType");
						OnParentObjectTypeChanged();
					}
				}
			}

			partial void OnParentObjectKChanging(int value);
			partial void OnParentObjectKChanged();
			private int _ParentObjectK;
			[Column(Storage="_ParentObjectK", DbType="Int", CanBeNull=false)]
			public  override int ParentObjectK {
				get { return _ParentObjectK; }
				set {
					if (_ParentObjectK != value) {
						OnParentObjectKChanging(value);
						SendPropertyChanging();
						_ParentObjectK = value;
						SendPropertyChanged("ParentObjectK");
						OnParentObjectKChanged();
					}
				}
			}

			partial void OnUsrKChanging(int value);
			partial void OnUsrKChanged();
			private int _UsrK;
			[Column(Storage="_UsrK", DbType="Int", CanBeNull=false)]
			public  override int UsrK {
				get { return _UsrK; }
				set {
					if (_UsrK != value) {
						OnUsrKChanging(value);
						SendPropertyChanging();
						_UsrK = value;
						SendPropertyChanged("UsrK");
						OnUsrKChanged();
					}
				}
			}

			partial void OnEnabledChanging(bool value);
			partial void OnEnabledChanged();
			private bool _Enabled;
			[Column(Storage="_Enabled", DbType="Bit", CanBeNull=false)]
			public  override bool Enabled {
				get { return _Enabled; }
				set {
					if (_Enabled != value) {
						OnEnabledChanging(value);
						SendPropertyChanging();
						_Enabled = value;
						SendPropertyChanged("Enabled");
						OnEnabledChanged();
					}
				}
			}

			partial void OnLastPostChanging(DateTime value);
			partial void OnLastPostChanged();
			private DateTime _LastPost;
			[Column(Storage="_LastPost", DbType="DateTime", CanBeNull=false)]
			public  override DateTime LastPost {
				get { return _LastPost; }
				set {
					if (_LastPost != value) {
						OnLastPostChanging(value);
						SendPropertyChanging();
						_LastPost = value;
						SendPropertyChanged("LastPost");
						OnLastPostChanged();
					}
				}
			}

			partial void OnLastPostUsrKChanging(int value);
			partial void OnLastPostUsrKChanged();
			private int _LastPostUsrK;
			[Column(Storage="_LastPostUsrK", DbType="Int", CanBeNull=false)]
			public  override int LastPostUsrK {
				get { return _LastPostUsrK; }
				set {
					if (_LastPostUsrK != value) {
						OnLastPostUsrKChanging(value);
						SendPropertyChanging();
						_LastPostUsrK = value;
						SendPropertyChanged("LastPostUsrK");
						OnLastPostUsrKChanged();
					}
				}
			}

			partial void OnTotalCommentsChanging(int value);
			partial void OnTotalCommentsChanged();
			private int _TotalComments;
			[Column(Storage="_TotalComments", DbType="Int", CanBeNull=false)]
			public  override int TotalComments {
				get { return _TotalComments; }
				set {
					if (_TotalComments != value) {
						OnTotalCommentsChanging(value);
						SendPropertyChanging();
						_TotalComments = value;
						SendPropertyChanged("TotalComments");
						OnTotalCommentsChanged();
					}
				}
			}

			partial void OnAverageCommentDateTimeChanging(DateTime value);
			partial void OnAverageCommentDateTimeChanged();
			private DateTime _AverageCommentDateTime;
			[Column(Storage="_AverageCommentDateTime", DbType="DateTime", CanBeNull=false)]
			public  override DateTime AverageCommentDateTime {
				get { return _AverageCommentDateTime; }
				set {
					if (_AverageCommentDateTime != value) {
						OnAverageCommentDateTimeChanging(value);
						SendPropertyChanging();
						_AverageCommentDateTime = value;
						SendPropertyChanged("AverageCommentDateTime");
						OnAverageCommentDateTimeChanged();
					}
				}
			}

			partial void OnPrivateChanging(bool value);
			partial void OnPrivateChanged();
			private bool _Private;
			[Column(Storage="_Private", DbType="Bit", CanBeNull=false)]
			public  override bool Private {
				get { return _Private; }
				set {
					if (_Private != value) {
						OnPrivateChanging(value);
						SendPropertyChanging();
						_Private = value;
						SendPropertyChanged("Private");
						OnPrivateChanged();
					}
				}
			}

			partial void OnGroupPrivateChanging(bool value);
			partial void OnGroupPrivateChanged();
			private bool _GroupPrivate;
			[Column(Storage="_GroupPrivate", DbType="Bit", CanBeNull=false)]
			public  override bool GroupPrivate {
				get { return _GroupPrivate; }
				set {
					if (_GroupPrivate != value) {
						OnGroupPrivateChanging(value);
						SendPropertyChanging();
						_GroupPrivate = value;
						SendPropertyChanged("GroupPrivate");
						OnGroupPrivateChanged();
					}
				}
			}

			partial void OnPrivateGroupChanging(bool value);
			partial void OnPrivateGroupChanged();
			private bool _PrivateGroup;
			[Column(Storage="_PrivateGroup", DbType="Bit", CanBeNull=false)]
			public  override bool PrivateGroup {
				get { return _PrivateGroup; }
				set {
					if (_PrivateGroup != value) {
						OnPrivateGroupChanging(value);
						SendPropertyChanging();
						_PrivateGroup = value;
						SendPropertyChanged("PrivateGroup");
						OnPrivateGroupChanged();
					}
				}
			}

			partial void OnThemeKChanging(int value);
			partial void OnThemeKChanged();
			private int _ThemeK;
			[Column(Storage="_ThemeK", DbType="Int", CanBeNull=false)]
			public  override int ThemeK {
				get { return _ThemeK; }
				set {
					if (_ThemeK != value) {
						OnThemeKChanging(value);
						SendPropertyChanging();
						_ThemeK = value;
						SendPropertyChanged("ThemeK");
						OnThemeKChanged();
					}
				}
			}

			partial void OnArticleKChanging(int value);
			partial void OnArticleKChanged();
			private int _ArticleK;
			[Column(Storage="_ArticleK", DbType="Int", CanBeNull=false)]
			public  override int ArticleK {
				get { return _ArticleK; }
				set {
					if (_ArticleK != value) {
						OnArticleKChanging(value);
						SendPropertyChanging();
						_ArticleK = value;
						SendPropertyChanged("ArticleK");
						OnArticleKChanged();
					}
				}
			}

			partial void OnPhotoKChanging(int value);
			partial void OnPhotoKChanged();
			private int _PhotoK;
			[Column(Storage="_PhotoK", DbType="Int", CanBeNull=false)]
			public  override int PhotoK {
				get { return _PhotoK; }
				set {
					if (_PhotoK != value) {
						OnPhotoKChanging(value);
						SendPropertyChanging();
						_PhotoK = value;
						SendPropertyChanged("PhotoK");
						OnPhotoKChanged();
					}
				}
			}

			partial void OnEventKChanging(int value);
			partial void OnEventKChanged();
			private int _EventK;
			[Column(Storage="_EventK", DbType="Int", CanBeNull=false)]
			public  override int EventK {
				get { return _EventK; }
				set {
					if (_EventK != value) {
						OnEventKChanging(value);
						SendPropertyChanging();
						_EventK = value;
						SendPropertyChanged("EventK");
						OnEventKChanged();
					}
				}
			}

			partial void OnVenueKChanging(int value);
			partial void OnVenueKChanged();
			private int _VenueK;
			[Column(Storage="_VenueK", DbType="Int", CanBeNull=false)]
			public  override int VenueK {
				get { return _VenueK; }
				set {
					if (_VenueK != value) {
						OnVenueKChanging(value);
						SendPropertyChanging();
						_VenueK = value;
						SendPropertyChanged("VenueK");
						OnVenueKChanged();
					}
				}
			}

			partial void OnPlaceKChanging(int value);
			partial void OnPlaceKChanged();
			private int _PlaceK;
			[Column(Storage="_PlaceK", DbType="Int", CanBeNull=false)]
			public  override int PlaceK {
				get { return _PlaceK; }
				set {
					if (_PlaceK != value) {
						OnPlaceKChanging(value);
						SendPropertyChanging();
						_PlaceK = value;
						SendPropertyChanged("PlaceK");
						OnPlaceKChanged();
					}
				}
			}

			partial void OnCountryKChanging(int value);
			partial void OnCountryKChanged();
			private int _CountryK;
			[Column(Storage="_CountryK", DbType="Int", CanBeNull=false)]
			public  override int CountryK {
				get { return _CountryK; }
				set {
					if (_CountryK != value) {
						OnCountryKChanging(value);
						SendPropertyChanging();
						_CountryK = value;
						SendPropertyChanged("CountryK");
						OnCountryKChanged();
					}
				}
			}

			partial void OnBrandKChanging(int value);
			partial void OnBrandKChanged();
			private int _BrandK;
			[Column(Storage="_BrandK", DbType="Int", CanBeNull=false)]
			public  override int BrandK {
				get { return _BrandK; }
				set {
					if (_BrandK != value) {
						OnBrandKChanging(value);
						SendPropertyChanging();
						_BrandK = value;
						SendPropertyChanged("BrandK");
						OnBrandKChanged();
					}
				}
			}

			partial void OnGroupKChanging(int value);
			partial void OnGroupKChanged();
			private int _GroupK;
			[Column(Storage="_GroupK", DbType="Int", CanBeNull=false)]
			public  override int GroupK {
				get { return _GroupK; }
				set {
					if (_GroupK != value) {
						OnGroupKChanging(value);
						SendPropertyChanging();
						_GroupK = value;
						SendPropertyChanged("GroupK");
						OnGroupKChanged();
					}
				}
			}

			partial void OnMusicTypeKChanging(int value);
			partial void OnMusicTypeKChanged();
			private int _MusicTypeK;
			[Column(Storage="_MusicTypeK", DbType="Int", CanBeNull=false)]
			public  override int MusicTypeK {
				get { return _MusicTypeK; }
				set {
					if (_MusicTypeK != value) {
						OnMusicTypeKChanging(value);
						SendPropertyChanging();
						_MusicTypeK = value;
						SendPropertyChanged("MusicTypeK");
						OnMusicTypeKChanged();
					}
				}
			}

			partial void OnIsNewsChanging(bool value);
			partial void OnIsNewsChanged();
			private bool _IsNews;
			[Column(Storage="_IsNews", DbType="Bit", CanBeNull=false)]
			public  override bool IsNews {
				get { return _IsNews; }
				set {
					if (_IsNews != value) {
						OnIsNewsChanging(value);
						SendPropertyChanging();
						_IsNews = value;
						SendPropertyChanged("IsNews");
						OnIsNewsChanged();
					}
				}
			}

			partial void OnDateTimeChanging(DateTime value);
			partial void OnDateTimeChanged();
			private DateTime _DateTime;
			[Column(Storage="_DateTime", DbType="DateTime", CanBeNull=false)]
			public  override DateTime DateTime {
				get { return _DateTime; }
				set {
					if (_DateTime != value) {
						OnDateTimeChanging(value);
						SendPropertyChanging();
						_DateTime = value;
						SendPropertyChanged("DateTime");
						OnDateTimeChanged();
					}
				}
			}

			partial void OnIsNationwideNewsChanging(bool value);
			partial void OnIsNationwideNewsChanged();
			private bool _IsNationwideNews;
			[Column(Storage="_IsNationwideNews", DbType="Bit", CanBeNull=false)]
			public  override bool IsNationwideNews {
				get { return _IsNationwideNews; }
				set {
					if (_IsNationwideNews != value) {
						OnIsNationwideNewsChanging(value);
						SendPropertyChanging();
						_IsNationwideNews = value;
						SendPropertyChanged("IsNationwideNews");
						OnIsNationwideNewsChanged();
					}
				}
			}

			partial void OnIsReviewChanging(bool value);
			partial void OnIsReviewChanged();
			private bool _IsReview;
			[Column(Storage="_IsReview", DbType="Bit", CanBeNull=false)]
			public  override bool IsReview {
				get { return _IsReview; }
				set {
					if (_IsReview != value) {
						OnIsReviewChanging(value);
						SendPropertyChanging();
						_IsReview = value;
						SendPropertyChanged("IsReview");
						OnIsReviewChanged();
					}
				}
			}

			partial void OnIsStickyChanging(bool value);
			partial void OnIsStickyChanged();
			private bool _IsSticky;
			[Column(Storage="_IsSticky", DbType="Bit", CanBeNull=false)]
			public  override bool IsSticky {
				get { return _IsSticky; }
				set {
					if (_IsSticky != value) {
						OnIsStickyChanging(value);
						SendPropertyChanging();
						_IsSticky = value;
						SendPropertyChanged("IsSticky");
						OnIsStickyChanged();
					}
				}
			}

			partial void OnIsWorldwideNewsChanging(bool value);
			partial void OnIsWorldwideNewsChanged();
			private bool _IsWorldwideNews;
			[Column(Storage="_IsWorldwideNews", DbType="Bit", CanBeNull=false)]
			public  override bool IsWorldwideNews {
				get { return _IsWorldwideNews; }
				set {
					if (_IsWorldwideNews != value) {
						OnIsWorldwideNewsChanging(value);
						SendPropertyChanging();
						_IsWorldwideNews = value;
						SendPropertyChanged("IsWorldwideNews");
						OnIsWorldwideNewsChanged();
					}
				}
			}

			partial void OnTotalParticipantsChanging(int value);
			partial void OnTotalParticipantsChanged();
			private int _TotalParticipants;
			[Column(Storage="_TotalParticipants", DbType="Int", CanBeNull=false)]
			public  override int TotalParticipants {
				get { return _TotalParticipants; }
				set {
					if (_TotalParticipants != value) {
						OnTotalParticipantsChanging(value);
						SendPropertyChanging();
						_TotalParticipants = value;
						SendPropertyChanged("TotalParticipants");
						OnTotalParticipantsChanged();
					}
				}
			}

			partial void OnFirstParticipantUsrKChanging(int value);
			partial void OnFirstParticipantUsrKChanged();
			private int _FirstParticipantUsrK;
			[Column(Storage="_FirstParticipantUsrK", DbType="Int", CanBeNull=false)]
			public  override int FirstParticipantUsrK {
				get { return _FirstParticipantUsrK; }
				set {
					if (_FirstParticipantUsrK != value) {
						OnFirstParticipantUsrKChanging(value);
						SendPropertyChanging();
						_FirstParticipantUsrK = value;
						SendPropertyChanged("FirstParticipantUsrK");
						OnFirstParticipantUsrKChanged();
					}
				}
			}

			partial void OnHideFromHighlightsChanging(bool value);
			partial void OnHideFromHighlightsChanged();
			private bool _HideFromHighlights;
			[Column(Storage="_HideFromHighlights", DbType="Bit", CanBeNull=false)]
			public  override bool HideFromHighlights {
				get { return _HideFromHighlights; }
				set {
					if (_HideFromHighlights != value) {
						OnHideFromHighlightsChanging(value);
						SendPropertyChanging();
						_HideFromHighlights = value;
						SendPropertyChanged("HideFromHighlights");
						OnHideFromHighlightsChanged();
					}
				}
			}

			partial void OnHotTopicsOrderChanging(DateTime value);
			partial void OnHotTopicsOrderChanged();
			private DateTime _HotTopicsOrder;
			[Column(Storage="_HotTopicsOrder", DbType="DateTime", CanBeNull=false)]
			public  override DateTime HotTopicsOrder {
				get { return _HotTopicsOrder; }
				set {
					if (_HotTopicsOrder != value) {
						OnHotTopicsOrderChanging(value);
						SendPropertyChanging();
						_HotTopicsOrder = value;
						SendPropertyChanged("HotTopicsOrder");
						OnHotTopicsOrderChanged();
					}
				}
			}

			partial void OnUrlFragmentChanging(string value);
			partial void OnUrlFragmentChanged();
			private string _UrlFragment;
			[Column(Storage="_UrlFragment", DbType="VarChar(255)", CanBeNull=false)]
			public  override string UrlFragment {
				get { return _UrlFragment; }
				set {
					if (_UrlFragment != value) {
						OnUrlFragmentChanging(value);
						SendPropertyChanging();
						_UrlFragment = value;
						SendPropertyChanged("UrlFragment");
						OnUrlFragmentChanged();
					}
				}
			}

			partial void OnSealedChanging(bool value);
			partial void OnSealedChanged();
			private bool _Sealed;
			[Column(Storage="_Sealed", DbType="Bit", CanBeNull=false)]
			public  override bool Sealed {
				get { return _Sealed; }
				set {
					if (_Sealed != value) {
						OnSealedChanging(value);
						SendPropertyChanging();
						_Sealed = value;
						SendPropertyChanged("Sealed");
						OnSealedChanged();
					}
				}
			}

			partial void OnClosedChanging(bool value);
			partial void OnClosedChanged();
			private bool _Closed;
			[Column(Storage="_Closed", DbType="Bit", CanBeNull=false)]
			public  override bool Closed {
				get { return _Closed; }
				set {
					if (_Closed != value) {
						OnClosedChanging(value);
						SendPropertyChanging();
						_Closed = value;
						SendPropertyChanged("Closed");
						OnClosedChanged();
					}
				}
			}

			partial void OnNewsStatusChanging(Model.Entities.Thread.NewsStatusEnum value);
			partial void OnNewsStatusChanged();
			private Model.Entities.Thread.NewsStatusEnum _NewsStatus;
			[Column(Storage="_NewsStatus", DbType="Int", CanBeNull=false)]
			public  override Model.Entities.Thread.NewsStatusEnum NewsStatus {
				get { return _NewsStatus; }
				set {
					if (_NewsStatus != value) {
						OnNewsStatusChanging(value);
						SendPropertyChanging();
						_NewsStatus = value;
						SendPropertyChanged("NewsStatus");
						OnNewsStatusChanged();
					}
				}
			}

			partial void OnNewsLevelChanging(int value);
			partial void OnNewsLevelChanged();
			private int _NewsLevel;
			[Column(Storage="_NewsLevel", DbType="Int", CanBeNull=false)]
			public  override int NewsLevel {
				get { return _NewsLevel; }
				set {
					if (_NewsLevel != value) {
						OnNewsLevelChanging(value);
						SendPropertyChanging();
						_NewsLevel = value;
						SendPropertyChanged("NewsLevel");
						OnNewsLevelChanged();
					}
				}
			}

			partial void OnNewsUsrKChanging(int value);
			partial void OnNewsUsrKChanged();
			private int _NewsUsrK;
			[Column(Storage="_NewsUsrK", DbType="Int", CanBeNull=false)]
			public  override int NewsUsrK {
				get { return _NewsUsrK; }
				set {
					if (_NewsUsrK != value) {
						OnNewsUsrKChanging(value);
						SendPropertyChanging();
						_NewsUsrK = value;
						SendPropertyChanged("NewsUsrK");
						OnNewsUsrKChanged();
					}
				}
			}

			partial void OnTotalWatchingChanging(int value);
			partial void OnTotalWatchingChanged();
			private int _TotalWatching;
			[Column(Storage="_TotalWatching", DbType="Int", CanBeNull=false)]
			public  override int TotalWatching {
				get { return _TotalWatching; }
				set {
					if (_TotalWatching != value) {
						OnTotalWatchingChanging(value);
						SendPropertyChanging();
						_TotalWatching = value;
						SendPropertyChanged("TotalWatching");
						OnTotalWatchingChanged();
					}
				}
			}

			partial void OnNewsModeratorUsrKChanging(int value);
			partial void OnNewsModeratorUsrKChanged();
			private int _NewsModeratorUsrK;
			[Column(Storage="_NewsModeratorUsrK", DbType="Int", CanBeNull=false)]
			public  override int NewsModeratorUsrK {
				get { return _NewsModeratorUsrK; }
				set {
					if (_NewsModeratorUsrK != value) {
						OnNewsModeratorUsrKChanging(value);
						SendPropertyChanging();
						_NewsModeratorUsrK = value;
						SendPropertyChanged("NewsModeratorUsrK");
						OnNewsModeratorUsrKChanged();
					}
				}
			}

			partial void OnNewsModeratedByUsrKChanging(int value);
			partial void OnNewsModeratedByUsrKChanged();
			private int _NewsModeratedByUsrK;
			[Column(Storage="_NewsModeratedByUsrK", DbType="Int", CanBeNull=false)]
			public  override int NewsModeratedByUsrK {
				get { return _NewsModeratedByUsrK; }
				set {
					if (_NewsModeratedByUsrK != value) {
						OnNewsModeratedByUsrKChanging(value);
						SendPropertyChanging();
						_NewsModeratedByUsrK = value;
						SendPropertyChanged("NewsModeratedByUsrK");
						OnNewsModeratedByUsrKChanged();
					}
				}
			}

			partial void OnNewsModerationDateTimeChanging(DateTime value);
			partial void OnNewsModerationDateTimeChanged();
			private DateTime _NewsModerationDateTime;
			[Column(Storage="_NewsModerationDateTime", DbType="DateTime", CanBeNull=false)]
			public  override DateTime NewsModerationDateTime {
				get { return _NewsModerationDateTime; }
				set {
					if (_NewsModerationDateTime != value) {
						OnNewsModerationDateTimeChanging(value);
						SendPropertyChanging();
						_NewsModerationDateTime = value;
						SendPropertyChanged("NewsModerationDateTime");
						OnNewsModerationDateTimeChanged();
					}
				}
			}

			partial void OnIsInCaptionCompetitionChanging(bool value);
			partial void OnIsInCaptionCompetitionChanged();
			private bool _IsInCaptionCompetition;
			[Column(Storage="_IsInCaptionCompetition", DbType="Bit", CanBeNull=false)]
			public  override bool IsInCaptionCompetition {
				get { return _IsInCaptionCompetition; }
				set {
					if (_IsInCaptionCompetition != value) {
						OnIsInCaptionCompetitionChanging(value);
						SendPropertyChanging();
						_IsInCaptionCompetition = value;
						SendPropertyChanged("IsInCaptionCompetition");
						OnIsInCaptionCompetitionChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.ThreadUsr")]
 		public partial class ThreadUsr : Model.Entities.ThreadUsr, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public ThreadUsr()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnThreadKChanging(int value);
			partial void OnThreadKChanged();
			private int _ThreadK;
			[Column(Storage="_ThreadK", DbType="Int", CanBeNull=false)]
			public  override int ThreadK {
				get { return _ThreadK; }
				set {
					if (_ThreadK != value) {
						OnThreadKChanging(value);
						SendPropertyChanging();
						_ThreadK = value;
						SendPropertyChanged("ThreadK");
						OnThreadKChanged();
					}
				}
			}

			partial void OnUsrKChanging(int value);
			partial void OnUsrKChanged();
			private int _UsrK;
			[Column(Storage="_UsrK", DbType="Int", CanBeNull=false)]
			public  override int UsrK {
				get { return _UsrK; }
				set {
					if (_UsrK != value) {
						OnUsrKChanging(value);
						SendPropertyChanging();
						_UsrK = value;
						SendPropertyChanged("UsrK");
						OnUsrKChanged();
					}
				}
			}

			partial void OnInvitingUsrKChanging(int value);
			partial void OnInvitingUsrKChanged();
			private int _InvitingUsrK;
			[Column(Storage="_InvitingUsrK", DbType="Int", CanBeNull=false)]
			public  override int InvitingUsrK {
				get { return _InvitingUsrK; }
				set {
					if (_InvitingUsrK != value) {
						OnInvitingUsrKChanging(value);
						SendPropertyChanging();
						_InvitingUsrK = value;
						SendPropertyChanged("InvitingUsrK");
						OnInvitingUsrKChanged();
					}
				}
			}

			partial void OnStatusChanging(Model.Entities.ThreadUsr.StatusEnum value);
			partial void OnStatusChanged();
			private Model.Entities.ThreadUsr.StatusEnum _Status;
			[Column(Storage="_Status", DbType="Int", CanBeNull=false)]
			public  override Model.Entities.ThreadUsr.StatusEnum Status {
				get { return _Status; }
				set {
					if (_Status != value) {
						OnStatusChanging(value);
						SendPropertyChanging();
						_Status = value;
						SendPropertyChanged("Status");
						OnStatusChanged();
					}
				}
			}

			partial void OnDateTimeChanging(DateTime value);
			partial void OnDateTimeChanged();
			private DateTime _DateTime;
			[Column(Storage="_DateTime", DbType="DateTime", CanBeNull=false)]
			public  override DateTime DateTime {
				get { return _DateTime; }
				set {
					if (_DateTime != value) {
						OnDateTimeChanging(value);
						SendPropertyChanging();
						_DateTime = value;
						SendPropertyChanged("DateTime");
						OnDateTimeChanged();
					}
				}
			}

			partial void OnPrivateChatTypeChanging(Model.Entities.ThreadUsr.PrivateChatTypes value);
			partial void OnPrivateChatTypeChanged();
			private Model.Entities.ThreadUsr.PrivateChatTypes _PrivateChatType;
			[Column(Storage="_PrivateChatType", DbType="Int", CanBeNull=false)]
			public  override Model.Entities.ThreadUsr.PrivateChatTypes PrivateChatType {
				get { return _PrivateChatType; }
				set {
					if (_PrivateChatType != value) {
						OnPrivateChatTypeChanging(value);
						SendPropertyChanging();
						_PrivateChatType = value;
						SendPropertyChanged("PrivateChatType");
						OnPrivateChatTypeChanged();
					}
				}
			}

			partial void OnFavouriteChanging(bool value);
			partial void OnFavouriteChanged();
			private bool _Favourite;
			[Column(Storage="_Favourite", DbType="Bit", CanBeNull=false)]
			public  override bool Favourite {
				get { return _Favourite; }
				set {
					if (_Favourite != value) {
						OnFavouriteChanging(value);
						SendPropertyChanging();
						_Favourite = value;
						SendPropertyChanged("Favourite");
						OnFavouriteChanged();
					}
				}
			}

			partial void OnDeletedChanging(bool value);
			partial void OnDeletedChanged();
			private bool _Deleted;
			[Column(Storage="_Deleted", DbType="Bit", CanBeNull=false)]
			public  override bool Deleted {
				get { return _Deleted; }
				set {
					if (_Deleted != value) {
						OnDeletedChanging(value);
						SendPropertyChanging();
						_Deleted = value;
						SendPropertyChanged("Deleted");
						OnDeletedChanged();
					}
				}
			}

			partial void OnViewDateTimeChanging(DateTime value);
			partial void OnViewDateTimeChanged();
			private DateTime _ViewDateTime;
			[Column(Storage="_ViewDateTime", DbType="DateTime", CanBeNull=false)]
			public  override DateTime ViewDateTime {
				get { return _ViewDateTime; }
				set {
					if (_ViewDateTime != value) {
						OnViewDateTimeChanging(value);
						SendPropertyChanging();
						_ViewDateTime = value;
						SendPropertyChanged("ViewDateTime");
						OnViewDateTimeChanged();
					}
				}
			}

			partial void OnViewDateTimeLatestChanging(DateTime value);
			partial void OnViewDateTimeLatestChanged();
			private DateTime _ViewDateTimeLatest;
			[Column(Storage="_ViewDateTimeLatest", DbType="DateTime", CanBeNull=false)]
			public  override DateTime ViewDateTimeLatest {
				get { return _ViewDateTimeLatest; }
				set {
					if (_ViewDateTimeLatest != value) {
						OnViewDateTimeLatestChanging(value);
						SendPropertyChanging();
						_ViewDateTimeLatest = value;
						SendPropertyChanged("ViewDateTimeLatest");
						OnViewDateTimeLatestChanged();
					}
				}
			}

			partial void OnViewCommentsChanging(int value);
			partial void OnViewCommentsChanged();
			private int _ViewComments;
			[Column(Storage="_ViewComments", DbType="Int", CanBeNull=false)]
			public  override int ViewComments {
				get { return _ViewComments; }
				set {
					if (_ViewComments != value) {
						OnViewCommentsChanging(value);
						SendPropertyChanging();
						_ViewComments = value;
						SendPropertyChanged("ViewComments");
						OnViewCommentsChanged();
					}
				}
			}

			partial void OnViewCommentsLatestChanging(int value);
			partial void OnViewCommentsLatestChanged();
			private int _ViewCommentsLatest;
			[Column(Storage="_ViewCommentsLatest", DbType="Int", CanBeNull=false)]
			public  override int ViewCommentsLatest {
				get { return _ViewCommentsLatest; }
				set {
					if (_ViewCommentsLatest != value) {
						OnViewCommentsLatestChanging(value);
						SendPropertyChanging();
						_ViewCommentsLatest = value;
						SendPropertyChanged("ViewCommentsLatest");
						OnViewCommentsLatestChanged();
					}
				}
			}

			partial void OnStatusChangeDateTimeChanging(DateTime value);
			partial void OnStatusChangeDateTimeChanged();
			private DateTime _StatusChangeDateTime;
			[Column(Storage="_StatusChangeDateTime", DbType="DateTime", CanBeNull=false)]
			public  override DateTime StatusChangeDateTime {
				get { return _StatusChangeDateTime; }
				set {
					if (_StatusChangeDateTime != value) {
						OnStatusChangeDateTimeChanging(value);
						SendPropertyChanging();
						_StatusChangeDateTime = value;
						SendPropertyChanged("StatusChangeDateTime");
						OnStatusChangeDateTimeChanged();
					}
				}
			}

			partial void OnStatusChangeObjectTypeChanging(Model.Entities.ObjectType value);
			partial void OnStatusChangeObjectTypeChanged();
			private Model.Entities.ObjectType _StatusChangeObjectType;
			[Column(Storage="_StatusChangeObjectType", DbType="Int", CanBeNull=false)]
			public  override Model.Entities.ObjectType StatusChangeObjectType {
				get { return _StatusChangeObjectType; }
				set {
					if (_StatusChangeObjectType != value) {
						OnStatusChangeObjectTypeChanging(value);
						SendPropertyChanging();
						_StatusChangeObjectType = value;
						SendPropertyChanged("StatusChangeObjectType");
						OnStatusChangeObjectTypeChanged();
					}
				}
			}

			partial void OnStatusChangeObjectKChanging(int value);
			partial void OnStatusChangeObjectKChanged();
			private int _StatusChangeObjectK;
			[Column(Storage="_StatusChangeObjectK", DbType="Int", CanBeNull=false)]
			public  override int StatusChangeObjectK {
				get { return _StatusChangeObjectK; }
				set {
					if (_StatusChangeObjectK != value) {
						OnStatusChangeObjectKChanging(value);
						SendPropertyChanging();
						_StatusChangeObjectK = value;
						SendPropertyChanged("StatusChangeObjectK");
						OnStatusChangeObjectKChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.Ticket")]
 		public partial class Ticket : Model.Entities.Ticket, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public Ticket()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnKChanging(int value);
			partial void OnKChanged();
			private int _K;
			[Column(Storage="_K", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
			public  override int K {
				get { return _K; }
				set {
					if (_K != value) {
						OnKChanging(value);
						SendPropertyChanging();
						_K = value;
						SendPropertyChanged("K");
						OnKChanged();
					}
				}
			}

			partial void OnTicketRunKChanging(int value);
			partial void OnTicketRunKChanged();
			private int _TicketRunK;
			[Column(Storage="_TicketRunK", DbType="Int", CanBeNull=false)]
			public  override int TicketRunK {
				get { return _TicketRunK; }
				set {
					if (_TicketRunK != value) {
						OnTicketRunKChanging(value);
						SendPropertyChanging();
						_TicketRunK = value;
						SendPropertyChanged("TicketRunK");
						OnTicketRunKChanged();
					}
				}
			}

			partial void OnEventKChanging(int value);
			partial void OnEventKChanged();
			private int _EventK;
			[Column(Storage="_EventK", DbType="Int", CanBeNull=false)]
			public  override int EventK {
				get { return _EventK; }
				set {
					if (_EventK != value) {
						OnEventKChanging(value);
						SendPropertyChanging();
						_EventK = value;
						SendPropertyChanged("EventK");
						OnEventKChanged();
					}
				}
			}

			partial void OnBuyerUsrKChanging(int value);
			partial void OnBuyerUsrKChanged();
			private int _BuyerUsrK;
			[Column(Storage="_BuyerUsrK", DbType="Int", CanBeNull=false)]
			public  override int BuyerUsrK {
				get { return _BuyerUsrK; }
				set {
					if (_BuyerUsrK != value) {
						OnBuyerUsrKChanging(value);
						SendPropertyChanging();
						_BuyerUsrK = value;
						SendPropertyChanged("BuyerUsrK");
						OnBuyerUsrKChanged();
					}
				}
			}

			partial void OnEnabledChanging(bool value);
			partial void OnEnabledChanged();
			private bool _Enabled;
			[Column(Storage="_Enabled", DbType="Bit", CanBeNull=false)]
			public  override bool Enabled {
				get { return _Enabled; }
				set {
					if (_Enabled != value) {
						OnEnabledChanging(value);
						SendPropertyChanging();
						_Enabled = value;
						SendPropertyChanged("Enabled");
						OnEnabledChanged();
					}
				}
			}

			partial void OnCancelledChanging(bool value);
			partial void OnCancelledChanged();
			private bool _Cancelled;
			[Column(Storage="_Cancelled", DbType="Bit", CanBeNull=false)]
			public  override bool Cancelled {
				get { return _Cancelled; }
				set {
					if (_Cancelled != value) {
						OnCancelledChanging(value);
						SendPropertyChanging();
						_Cancelled = value;
						SendPropertyChanged("Cancelled");
						OnCancelledChanged();
					}
				}
			}

			partial void OnBuyDateTimeChanging(DateTime value);
			partial void OnBuyDateTimeChanged();
			private DateTime _BuyDateTime;
			[Column(Storage="_BuyDateTime", DbType="DateTime", CanBeNull=false)]
			public  override DateTime BuyDateTime {
				get { return _BuyDateTime; }
				set {
					if (_BuyDateTime != value) {
						OnBuyDateTimeChanging(value);
						SendPropertyChanging();
						_BuyDateTime = value;
						SendPropertyChanged("BuyDateTime");
						OnBuyDateTimeChanged();
					}
				}
			}

			partial void OnAddressStreetChanging(string value);
			partial void OnAddressStreetChanged();
			private string _AddressStreet;
			[Column(Storage="_AddressStreet", DbType="VarChar(150)", CanBeNull=false)]
			public  override string AddressStreet {
				get { return _AddressStreet; }
				set {
					if (_AddressStreet != value) {
						OnAddressStreetChanging(value);
						SendPropertyChanging();
						_AddressStreet = value;
						SendPropertyChanged("AddressStreet");
						OnAddressStreetChanged();
					}
				}
			}

			partial void OnAddressAreaChanging(string value);
			partial void OnAddressAreaChanged();
			private string _AddressArea;
			[Column(Storage="_AddressArea", DbType="VarChar(50)", CanBeNull=false)]
			public  override string AddressArea {
				get { return _AddressArea; }
				set {
					if (_AddressArea != value) {
						OnAddressAreaChanging(value);
						SendPropertyChanging();
						_AddressArea = value;
						SendPropertyChanged("AddressArea");
						OnAddressAreaChanged();
					}
				}
			}

			partial void OnAddressTownChanging(string value);
			partial void OnAddressTownChanged();
			private string _AddressTown;
			[Column(Storage="_AddressTown", DbType="VarChar(50)", CanBeNull=false)]
			public  override string AddressTown {
				get { return _AddressTown; }
				set {
					if (_AddressTown != value) {
						OnAddressTownChanging(value);
						SendPropertyChanging();
						_AddressTown = value;
						SendPropertyChanged("AddressTown");
						OnAddressTownChanged();
					}
				}
			}

			partial void OnAddressCountyChanging(string value);
			partial void OnAddressCountyChanged();
			private string _AddressCounty;
			[Column(Storage="_AddressCounty", DbType="VarChar(50)", CanBeNull=false)]
			public  override string AddressCounty {
				get { return _AddressCounty; }
				set {
					if (_AddressCounty != value) {
						OnAddressCountyChanging(value);
						SendPropertyChanging();
						_AddressCounty = value;
						SendPropertyChanged("AddressCounty");
						OnAddressCountyChanged();
					}
				}
			}

			partial void OnAddressPostcodeChanging(string value);
			partial void OnAddressPostcodeChanged();
			private string _AddressPostcode;
			[Column(Storage="_AddressPostcode", DbType="VarChar(50)", CanBeNull=false)]
			public  override string AddressPostcode {
				get { return _AddressPostcode; }
				set {
					if (_AddressPostcode != value) {
						OnAddressPostcodeChanging(value);
						SendPropertyChanging();
						_AddressPostcode = value;
						SendPropertyChanged("AddressPostcode");
						OnAddressPostcodeChanged();
					}
				}
			}

			partial void OnAddressCountryKChanging(int value);
			partial void OnAddressCountryKChanged();
			private int _AddressCountryK;
			[Column(Storage="_AddressCountryK", DbType="Int", CanBeNull=false)]
			public  override int AddressCountryK {
				get { return _AddressCountryK; }
				set {
					if (_AddressCountryK != value) {
						OnAddressCountryKChanging(value);
						SendPropertyChanging();
						_AddressCountryK = value;
						SendPropertyChanged("AddressCountryK");
						OnAddressCountryKChanged();
					}
				}
			}

			partial void OnMobileChanging(string value);
			partial void OnMobileChanged();
			private string _Mobile;
			[Column(Storage="_Mobile", DbType="VarChar(50)", CanBeNull=false)]
			public  override string Mobile {
				get { return _Mobile; }
				set {
					if (_Mobile != value) {
						OnMobileChanging(value);
						SendPropertyChanging();
						_Mobile = value;
						SendPropertyChanged("Mobile");
						OnMobileChanged();
					}
				}
			}

			partial void OnMobileCountryCodeChanging(string value);
			partial void OnMobileCountryCodeChanged();
			private string _MobileCountryCode;
			[Column(Storage="_MobileCountryCode", DbType="VarChar(3)", CanBeNull=false)]
			public  override string MobileCountryCode {
				get { return _MobileCountryCode; }
				set {
					if (_MobileCountryCode != value) {
						OnMobileCountryCodeChanging(value);
						SendPropertyChanging();
						_MobileCountryCode = value;
						SendPropertyChanged("MobileCountryCode");
						OnMobileCountryCodeChanged();
					}
				}
			}

			partial void OnMobileNumberChanging(string value);
			partial void OnMobileNumberChanged();
			private string _MobileNumber;
			[Column(Storage="_MobileNumber", DbType="VarChar(50)", CanBeNull=false)]
			public  override string MobileNumber {
				get { return _MobileNumber; }
				set {
					if (_MobileNumber != value) {
						OnMobileNumberChanging(value);
						SendPropertyChanging();
						_MobileNumber = value;
						SendPropertyChanged("MobileNumber");
						OnMobileNumberChanged();
					}
				}
			}

			partial void OnFirstNameChanging(string value);
			partial void OnFirstNameChanged();
			private string _FirstName;
			[Column(Storage="_FirstName", DbType="VarChar(100)", CanBeNull=false)]
			public  override string FirstName {
				get { return _FirstName; }
				set {
					if (_FirstName != value) {
						OnFirstNameChanging(value);
						SendPropertyChanging();
						_FirstName = value;
						SendPropertyChanged("FirstName");
						OnFirstNameChanged();
					}
				}
			}

			partial void OnLastNameChanging(string value);
			partial void OnLastNameChanged();
			private string _LastName;
			[Column(Storage="_LastName", DbType="VarChar(100)", CanBeNull=false)]
			public  override string LastName {
				get { return _LastName; }
				set {
					if (_LastName != value) {
						OnLastNameChanging(value);
						SendPropertyChanging();
						_LastName = value;
						SendPropertyChanged("LastName");
						OnLastNameChanged();
					}
				}
			}

			partial void OnCardNumberHashChanging(Guid value);
			partial void OnCardNumberHashChanged();
			private Guid _CardNumberHash;
			[Column(Storage="_CardNumberHash", DbType="UniqueIdentifier", CanBeNull=false)]
			public  override Guid CardNumberHash {
				get { return _CardNumberHash; }
				set {
					if (_CardNumberHash != value) {
						OnCardNumberHashChanging(value);
						SendPropertyChanging();
						_CardNumberHash = value;
						SendPropertyChanged("CardNumberHash");
						OnCardNumberHashChanged();
					}
				}
			}

			partial void OnCardNumberEndChanging(string value);
			partial void OnCardNumberEndChanged();
			private string _CardNumberEnd;
			[Column(Storage="_CardNumberEnd", DbType="VarChar(6)", CanBeNull=false)]
			public  override string CardNumberEnd {
				get { return _CardNumberEnd; }
				set {
					if (_CardNumberEnd != value) {
						OnCardNumberEndChanging(value);
						SendPropertyChanging();
						_CardNumberEnd = value;
						SendPropertyChanged("CardNumberEnd");
						OnCardNumberEndChanged();
					}
				}
			}

			partial void OnCardNumberDigitsChanging(int value);
			partial void OnCardNumberDigitsChanged();
			private int _CardNumberDigits;
			[Column(Storage="_CardNumberDigits", DbType="Int", CanBeNull=false)]
			public  override int CardNumberDigits {
				get { return _CardNumberDigits; }
				set {
					if (_CardNumberDigits != value) {
						OnCardNumberDigitsChanging(value);
						SendPropertyChanging();
						_CardNumberDigits = value;
						SendPropertyChanged("CardNumberDigits");
						OnCardNumberDigitsChanged();
					}
				}
			}

			partial void OnQuantityChanging(int value);
			partial void OnQuantityChanged();
			private int _Quantity;
			[Column(Storage="_Quantity", DbType="Int", CanBeNull=false)]
			public  override int Quantity {
				get { return _Quantity; }
				set {
					if (_Quantity != value) {
						OnQuantityChanging(value);
						SendPropertyChanging();
						_Quantity = value;
						SendPropertyChanged("Quantity");
						OnQuantityChanged();
					}
				}
			}

			partial void OnCustomDataChanging(string value);
			partial void OnCustomDataChanged();
			private string _CustomData;
			[Column(Storage="_CustomData", DbType="Text", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
			public  override string CustomData {
				get { return _CustomData; }
				set {
					if (_CustomData != value) {
						OnCustomDataChanging(value);
						SendPropertyChanging();
						_CustomData = value;
						SendPropertyChanged("CustomData");
						OnCustomDataChanged();
					}
				}
			}

			partial void OnCustomXmlChanging(string value);
			partial void OnCustomXmlChanged();
			private string _CustomXml;
			[Column(Storage="_CustomXml", DbType="Xml", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
			public  override string CustomXml {
				get { return _CustomXml; }
				set {
					if (_CustomXml != value) {
						OnCustomXmlChanging(value);
						SendPropertyChanging();
						_CustomXml = value;
						SendPropertyChanged("CustomXml");
						OnCustomXmlChanged();
					}
				}
			}

			partial void OnInvoiceItemKChanging(int value);
			partial void OnInvoiceItemKChanged();
			private int _InvoiceItemK;
			[Column(Storage="_InvoiceItemK", DbType="Int", CanBeNull=false)]
			public  override int InvoiceItemK {
				get { return _InvoiceItemK; }
				set {
					if (_InvoiceItemK != value) {
						OnInvoiceItemKChanging(value);
						SendPropertyChanging();
						_InvoiceItemK = value;
						SendPropertyChanged("InvoiceItemK");
						OnInvoiceItemKChanged();
					}
				}
			}

			partial void OnBrowserGuidChanging(Guid value);
			partial void OnBrowserGuidChanged();
			private Guid _BrowserGuid;
			[Column(Storage="_BrowserGuid", DbType="UniqueIdentifier", CanBeNull=false)]
			public  override Guid BrowserGuid {
				get { return _BrowserGuid; }
				set {
					if (_BrowserGuid != value) {
						OnBrowserGuidChanging(value);
						SendPropertyChanging();
						_BrowserGuid = value;
						SendPropertyChanged("BrowserGuid");
						OnBrowserGuidChanged();
					}
				}
			}

			partial void OnPriceChanging(decimal value);
			partial void OnPriceChanged();
			private decimal _Price;
			[Column(Storage="_Price", DbType="Decimal(18,2)", CanBeNull=false)]
			public  override decimal Price {
				get { return _Price; }
				set {
					if (_Price != value) {
						OnPriceChanging(value);
						SendPropertyChanging();
						_Price = value;
						SendPropertyChanged("Price");
						OnPriceChanged();
					}
				}
			}

			partial void OnBookingFeeChanging(decimal value);
			partial void OnBookingFeeChanged();
			private decimal _BookingFee;
			[Column(Storage="_BookingFee", DbType="Decimal(18,2)", CanBeNull=false)]
			public  override decimal BookingFee {
				get { return _BookingFee; }
				set {
					if (_BookingFee != value) {
						OnBookingFeeChanging(value);
						SendPropertyChanging();
						_BookingFee = value;
						SendPropertyChanged("BookingFee");
						OnBookingFeeChanged();
					}
				}
			}

			partial void OnIpAddressChanging(string value);
			partial void OnIpAddressChanged();
			private string _IpAddress;
			[Column(Storage="_IpAddress", DbType="VarChar(15)", CanBeNull=false)]
			public  override string IpAddress {
				get { return _IpAddress; }
				set {
					if (_IpAddress != value) {
						OnIpAddressChanging(value);
						SendPropertyChanging();
						_IpAddress = value;
						SendPropertyChanged("IpAddress");
						OnIpAddressChanged();
					}
				}
			}

			partial void OnFeedbackChanging(Model.Entities.Ticket.FeedbackEnum value);
			partial void OnFeedbackChanged();
			private Model.Entities.Ticket.FeedbackEnum _Feedback;
			[Column(Storage="_Feedback", DbType="Int", CanBeNull=false)]
			public  override Model.Entities.Ticket.FeedbackEnum Feedback {
				get { return _Feedback; }
				set {
					if (_Feedback != value) {
						OnFeedbackChanging(value);
						SendPropertyChanging();
						_Feedback = value;
						SendPropertyChanged("Feedback");
						OnFeedbackChanged();
					}
				}
			}

			partial void OnFeedbackNoteChanging(string value);
			partial void OnFeedbackNoteChanged();
			private string _FeedbackNote;
			[Column(Storage="_FeedbackNote", DbType="VarChar(4096)", CanBeNull=false)]
			public  override string FeedbackNote {
				get { return _FeedbackNote; }
				set {
					if (_FeedbackNote != value) {
						OnFeedbackNoteChanging(value);
						SendPropertyChanging();
						_FeedbackNote = value;
						SendPropertyChanged("FeedbackNote");
						OnFeedbackNoteChanged();
					}
				}
			}

			partial void OnReserveDateTimeChanging(DateTime value);
			partial void OnReserveDateTimeChanged();
			private DateTime _ReserveDateTime;
			[Column(Storage="_ReserveDateTime", DbType="DateTime", CanBeNull=false)]
			public  override DateTime ReserveDateTime {
				get { return _ReserveDateTime; }
				set {
					if (_ReserveDateTime != value) {
						OnReserveDateTimeChanging(value);
						SendPropertyChanging();
						_ReserveDateTime = value;
						SendPropertyChanged("ReserveDateTime");
						OnReserveDateTimeChanged();
					}
				}
			}

			partial void OnCodeChanging(string value);
			partial void OnCodeChanged();
			private string _Code;
			[Column(Storage="_Code", DbType="VarChar(4)", CanBeNull=false)]
			public  override string Code {
				get { return _Code; }
				set {
					if (_Code != value) {
						OnCodeChanging(value);
						SendPropertyChanging();
						_Code = value;
						SendPropertyChanged("Code");
						OnCodeChanged();
					}
				}
			}

			partial void OnDomainKChanging(int value);
			partial void OnDomainKChanged();
			private int _DomainK;
			[Column(Storage="_DomainK", DbType="Int", CanBeNull=false)]
			public  override int DomainK {
				get { return _DomainK; }
				set {
					if (_DomainK != value) {
						OnDomainKChanging(value);
						SendPropertyChanging();
						_DomainK = value;
						SendPropertyChanged("DomainK");
						OnDomainKChanged();
					}
				}
			}

			partial void OnCancelledBeforeFundsReleaseChanging(bool value);
			partial void OnCancelledBeforeFundsReleaseChanged();
			private bool _CancelledBeforeFundsRelease;
			[Column(Storage="_CancelledBeforeFundsRelease", DbType="Bit", CanBeNull=false)]
			public  override bool CancelledBeforeFundsRelease {
				get { return _CancelledBeforeFundsRelease; }
				set {
					if (_CancelledBeforeFundsRelease != value) {
						OnCancelledBeforeFundsReleaseChanging(value);
						SendPropertyChanging();
						_CancelledBeforeFundsRelease = value;
						SendPropertyChanged("CancelledBeforeFundsRelease");
						OnCancelledBeforeFundsReleaseChanged();
					}
				}
			}

			partial void OnCancelledDateTimeChanging(DateTime value);
			partial void OnCancelledDateTimeChanged();
			private DateTime _CancelledDateTime;
			[Column(Storage="_CancelledDateTime", DbType="DateTime", CanBeNull=false)]
			public  override DateTime CancelledDateTime {
				get { return _CancelledDateTime; }
				set {
					if (_CancelledDateTime != value) {
						OnCancelledDateTimeChanging(value);
						SendPropertyChanging();
						_CancelledDateTime = value;
						SendPropertyChanged("CancelledDateTime");
						OnCancelledDateTimeChanged();
					}
				}
			}

			partial void OnCardCV2Changing(string value);
			partial void OnCardCV2Changed();
			private string _CardCV2;
			[Column(Storage="_CardCV2", DbType="VarChar(3)", CanBeNull=false)]
			public  override string CardCV2 {
				get { return _CardCV2; }
				set {
					if (_CardCV2 != value) {
						OnCardCV2Changing(value);
						SendPropertyChanging();
						_CardCV2 = value;
						SendPropertyChanged("CardCV2");
						OnCardCV2Changed();
					}
				}
			}

			partial void OnCardCheckedByPromoterChanging(bool value);
			partial void OnCardCheckedByPromoterChanged();
			private bool _CardCheckedByPromoter;
			[Column(Storage="_CardCheckedByPromoter", DbType="Bit", CanBeNull=false)]
			public  override bool CardCheckedByPromoter {
				get { return _CardCheckedByPromoter; }
				set {
					if (_CardCheckedByPromoter != value) {
						OnCardCheckedByPromoterChanging(value);
						SendPropertyChanging();
						_CardCheckedByPromoter = value;
						SendPropertyChanged("CardCheckedByPromoter");
						OnCardCheckedByPromoterChanged();
					}
				}
			}

			partial void OnCardCheckAttemptsChanging(int value);
			partial void OnCardCheckAttemptsChanged();
			private int _CardCheckAttempts;
			[Column(Storage="_CardCheckAttempts", DbType="Int", CanBeNull=false)]
			public  override int CardCheckAttempts {
				get { return _CardCheckAttempts; }
				set {
					if (_CardCheckAttempts != value) {
						OnCardCheckAttemptsChanging(value);
						SendPropertyChanging();
						_CardCheckAttempts = value;
						SendPropertyChanged("CardCheckAttempts");
						OnCardCheckAttemptsChanged();
					}
				}
			}

			partial void OnAddressNameChanging(string value);
			partial void OnAddressNameChanged();
			private string _AddressName;
			[Column(Storage="_AddressName", DbType="VarChar(150)", CanBeNull=false)]
			public  override string AddressName {
				get { return _AddressName; }
				set {
					if (_AddressName != value) {
						OnAddressNameChanging(value);
						SendPropertyChanging();
						_AddressName = value;
						SendPropertyChanged("AddressName");
						OnAddressNameChanged();
					}
				}
			}

			partial void OnIsFraudChanging(bool? value);
			partial void OnIsFraudChanged();
			private bool? _IsFraud;
			[Column(Storage="_IsFraud", DbType="Bit")]
			public  override bool? IsFraud {
				get { return _IsFraud; }
				set {
					if (_IsFraud != value) {
						OnIsFraudChanging(value);
						SendPropertyChanging();
						_IsFraud = value;
						SendPropertyChanged("IsFraud");
						OnIsFraudChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.TicketPromoterEvent")]
 		public partial class TicketPromoterEvent : Model.Entities.TicketPromoterEvent, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public TicketPromoterEvent()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnPromoterKChanging(int value);
			partial void OnPromoterKChanged();
			private int _PromoterK;
			[Column(Storage="_PromoterK", DbType="Int NOT NULL", IsPrimaryKey=true)]
			public  override int PromoterK {
				get { return _PromoterK; }
				set {
					if (_PromoterK != value) {
						OnPromoterKChanging(value);
						SendPropertyChanging();
						_PromoterK = value;
						SendPropertyChanged("PromoterK");
						OnPromoterKChanged();
					}
				}
			}

			partial void OnEventKChanging(int value);
			partial void OnEventKChanged();
			private int _EventK;
			[Column(Storage="_EventK", DbType="Int NOT NULL", IsPrimaryKey=true)]
			public  override int EventK {
				get { return _EventK; }
				set {
					if (_EventK != value) {
						OnEventKChanging(value);
						SendPropertyChanging();
						_EventK = value;
						SendPropertyChanged("EventK");
						OnEventKChanged();
					}
				}
			}

			partial void OnTotalTicketsChanging(int value);
			partial void OnTotalTicketsChanged();
			private int _TotalTickets;
			[Column(Storage="_TotalTickets", DbType="Int", CanBeNull=false)]
			public  override int TotalTickets {
				get { return _TotalTickets; }
				set {
					if (_TotalTickets != value) {
						OnTotalTicketsChanging(value);
						SendPropertyChanging();
						_TotalTickets = value;
						SendPropertyChanged("TotalTickets");
						OnTotalTicketsChanged();
					}
				}
			}

			partial void OnSoldTicketsChanging(int value);
			partial void OnSoldTicketsChanged();
			private int _SoldTickets;
			[Column(Storage="_SoldTickets", DbType="Int", CanBeNull=false)]
			public  override int SoldTickets {
				get { return _SoldTickets; }
				set {
					if (_SoldTickets != value) {
						OnSoldTicketsChanging(value);
						SendPropertyChanging();
						_SoldTickets = value;
						SendPropertyChanged("SoldTickets");
						OnSoldTicketsChanged();
					}
				}
			}

			partial void OnTotalFundsChanging(decimal value);
			partial void OnTotalFundsChanged();
			private decimal _TotalFunds;
			[Column(Storage="_TotalFunds", DbType="Decimal(18,2)", CanBeNull=false)]
			public  override decimal TotalFunds {
				get { return _TotalFunds; }
				set {
					if (_TotalFunds != value) {
						OnTotalFundsChanging(value);
						SendPropertyChanging();
						_TotalFunds = value;
						SendPropertyChanged("TotalFunds");
						OnTotalFundsChanged();
					}
				}
			}

			partial void OnFundsLockManualChanging(bool value);
			partial void OnFundsLockManualChanged();
			private bool _FundsLockManual;
			[Column(Storage="_FundsLockManual", DbType="Bit", CanBeNull=false)]
			public  override bool FundsLockManual {
				get { return _FundsLockManual; }
				set {
					if (_FundsLockManual != value) {
						OnFundsLockManualChanging(value);
						SendPropertyChanging();
						_FundsLockManual = value;
						SendPropertyChanged("FundsLockManual");
						OnFundsLockManualChanged();
					}
				}
			}

			partial void OnFundsLockManualUsrKChanging(int value);
			partial void OnFundsLockManualUsrKChanged();
			private int _FundsLockManualUsrK;
			[Column(Storage="_FundsLockManualUsrK", DbType="Int", CanBeNull=false)]
			public  override int FundsLockManualUsrK {
				get { return _FundsLockManualUsrK; }
				set {
					if (_FundsLockManualUsrK != value) {
						OnFundsLockManualUsrKChanging(value);
						SendPropertyChanging();
						_FundsLockManualUsrK = value;
						SendPropertyChanged("FundsLockManualUsrK");
						OnFundsLockManualUsrKChanged();
					}
				}
			}

			partial void OnFundsLockManualDateTimeChanging(DateTime value);
			partial void OnFundsLockManualDateTimeChanged();
			private DateTime _FundsLockManualDateTime;
			[Column(Storage="_FundsLockManualDateTime", DbType="DateTime", CanBeNull=false)]
			public  override DateTime FundsLockManualDateTime {
				get { return _FundsLockManualDateTime; }
				set {
					if (_FundsLockManualDateTime != value) {
						OnFundsLockManualDateTimeChanging(value);
						SendPropertyChanging();
						_FundsLockManualDateTime = value;
						SendPropertyChanged("FundsLockManualDateTime");
						OnFundsLockManualDateTimeChanged();
					}
				}
			}

			partial void OnFundsLockManualNoteChanging(string value);
			partial void OnFundsLockManualNoteChanged();
			private string _FundsLockManualNote;
			[Column(Storage="_FundsLockManualNote", DbType="VarChar(500)", CanBeNull=false)]
			public  override string FundsLockManualNote {
				get { return _FundsLockManualNote; }
				set {
					if (_FundsLockManualNote != value) {
						OnFundsLockManualNoteChanging(value);
						SendPropertyChanging();
						_FundsLockManualNote = value;
						SendPropertyChanged("FundsLockManualNote");
						OnFundsLockManualNoteChanged();
					}
				}
			}

			partial void OnFundsLockFraudIpDuplicateChanging(bool value);
			partial void OnFundsLockFraudIpDuplicateChanged();
			private bool _FundsLockFraudIpDuplicate;
			[Column(Storage="_FundsLockFraudIpDuplicate", DbType="Bit", CanBeNull=false)]
			public  override bool FundsLockFraudIpDuplicate {
				get { return _FundsLockFraudIpDuplicate; }
				set {
					if (_FundsLockFraudIpDuplicate != value) {
						OnFundsLockFraudIpDuplicateChanging(value);
						SendPropertyChanging();
						_FundsLockFraudIpDuplicate = value;
						SendPropertyChanged("FundsLockFraudIpDuplicate");
						OnFundsLockFraudIpDuplicateChanged();
					}
				}
			}

			partial void OnFundsLockFraudIpCountryChanging(int value);
			partial void OnFundsLockFraudIpCountryChanged();
			private int _FundsLockFraudIpCountry;
			[Column(Storage="_FundsLockFraudIpCountry", DbType="Int", CanBeNull=false)]
			public  override int FundsLockFraudIpCountry {
				get { return _FundsLockFraudIpCountry; }
				set {
					if (_FundsLockFraudIpCountry != value) {
						OnFundsLockFraudIpCountryChanging(value);
						SendPropertyChanging();
						_FundsLockFraudIpCountry = value;
						SendPropertyChanged("FundsLockFraudIpCountry");
						OnFundsLockFraudIpCountryChanged();
					}
				}
			}

			partial void OnFundsLockFraudGuidChanging(bool value);
			partial void OnFundsLockFraudGuidChanged();
			private bool _FundsLockFraudGuid;
			[Column(Storage="_FundsLockFraudGuid", DbType="Bit", CanBeNull=false)]
			public  override bool FundsLockFraudGuid {
				get { return _FundsLockFraudGuid; }
				set {
					if (_FundsLockFraudGuid != value) {
						OnFundsLockFraudGuidChanging(value);
						SendPropertyChanging();
						_FundsLockFraudGuid = value;
						SendPropertyChanged("FundsLockFraudGuid");
						OnFundsLockFraudGuidChanged();
					}
				}
			}

			partial void OnFundsLockUsrResponsesChanging(bool value);
			partial void OnFundsLockUsrResponsesChanged();
			private bool _FundsLockUsrResponses;
			[Column(Storage="_FundsLockUsrResponses", DbType="Bit", CanBeNull=false)]
			public  override bool FundsLockUsrResponses {
				get { return _FundsLockUsrResponses; }
				set {
					if (_FundsLockUsrResponses != value) {
						OnFundsLockUsrResponsesChanging(value);
						SendPropertyChanging();
						_FundsLockUsrResponses = value;
						SendPropertyChanged("FundsLockUsrResponses");
						OnFundsLockUsrResponsesChanged();
					}
				}
			}

			partial void OnFundsLockTextChanging(string value);
			partial void OnFundsLockTextChanged();
			private string _FundsLockText;
			[Column(Storage="_FundsLockText", DbType="VarChar(2000)", CanBeNull=false)]
			public  override string FundsLockText {
				get { return _FundsLockText; }
				set {
					if (_FundsLockText != value) {
						OnFundsLockTextChanging(value);
						SendPropertyChanging();
						_FundsLockText = value;
						SendPropertyChanged("FundsLockText");
						OnFundsLockTextChanged();
					}
				}
			}

			partial void OnFundsLockOverrideChanging(bool value);
			partial void OnFundsLockOverrideChanged();
			private bool _FundsLockOverride;
			[Column(Storage="_FundsLockOverride", DbType="Bit", CanBeNull=false)]
			public  override bool FundsLockOverride {
				get { return _FundsLockOverride; }
				set {
					if (_FundsLockOverride != value) {
						OnFundsLockOverrideChanging(value);
						SendPropertyChanging();
						_FundsLockOverride = value;
						SendPropertyChanged("FundsLockOverride");
						OnFundsLockOverrideChanged();
					}
				}
			}

			partial void OnFundsLockOverrideUsrKChanging(int value);
			partial void OnFundsLockOverrideUsrKChanged();
			private int _FundsLockOverrideUsrK;
			[Column(Storage="_FundsLockOverrideUsrK", DbType="Int", CanBeNull=false)]
			public  override int FundsLockOverrideUsrK {
				get { return _FundsLockOverrideUsrK; }
				set {
					if (_FundsLockOverrideUsrK != value) {
						OnFundsLockOverrideUsrKChanging(value);
						SendPropertyChanging();
						_FundsLockOverrideUsrK = value;
						SendPropertyChanged("FundsLockOverrideUsrK");
						OnFundsLockOverrideUsrKChanged();
					}
				}
			}

			partial void OnFundsLockOverrideDateTimeChanging(DateTime value);
			partial void OnFundsLockOverrideDateTimeChanged();
			private DateTime _FundsLockOverrideDateTime;
			[Column(Storage="_FundsLockOverrideDateTime", DbType="DateTime", CanBeNull=false)]
			public  override DateTime FundsLockOverrideDateTime {
				get { return _FundsLockOverrideDateTime; }
				set {
					if (_FundsLockOverrideDateTime != value) {
						OnFundsLockOverrideDateTimeChanging(value);
						SendPropertyChanging();
						_FundsLockOverrideDateTime = value;
						SendPropertyChanged("FundsLockOverrideDateTime");
						OnFundsLockOverrideDateTimeChanged();
					}
				}
			}

			partial void OnFundsLockOverrideNoteChanging(string value);
			partial void OnFundsLockOverrideNoteChanged();
			private string _FundsLockOverrideNote;
			[Column(Storage="_FundsLockOverrideNote", DbType="VarChar(500)", CanBeNull=false)]
			public  override string FundsLockOverrideNote {
				get { return _FundsLockOverrideNote; }
				set {
					if (_FundsLockOverrideNote != value) {
						OnFundsLockOverrideNoteChanging(value);
						SendPropertyChanging();
						_FundsLockOverrideNote = value;
						SendPropertyChanged("FundsLockOverrideNote");
						OnFundsLockOverrideNoteChanged();
					}
				}
			}

			partial void OnFundsReleasedChanging(bool value);
			partial void OnFundsReleasedChanged();
			private bool _FundsReleased;
			[Column(Storage="_FundsReleased", DbType="Bit", CanBeNull=false)]
			public  override bool FundsReleased {
				get { return _FundsReleased; }
				set {
					if (_FundsReleased != value) {
						OnFundsReleasedChanging(value);
						SendPropertyChanging();
						_FundsReleased = value;
						SendPropertyChanged("FundsReleased");
						OnFundsReleasedChanged();
					}
				}
			}

			partial void OnFundsTransferKChanging(int value);
			partial void OnFundsTransferKChanged();
			private int _FundsTransferK;
			[Column(Storage="_FundsTransferK", DbType="Int", CanBeNull=false)]
			public  override int FundsTransferK {
				get { return _FundsTransferK; }
				set {
					if (_FundsTransferK != value) {
						OnFundsTransferKChanging(value);
						SendPropertyChanging();
						_FundsTransferK = value;
						SendPropertyChanged("FundsTransferK");
						OnFundsTransferKChanged();
					}
				}
			}

			partial void OnCancelledTicketsChanging(int value);
			partial void OnCancelledTicketsChanged();
			private int _CancelledTickets;
			[Column(Storage="_CancelledTickets", DbType="Int", CanBeNull=false)]
			public  override int CancelledTickets {
				get { return _CancelledTickets; }
				set {
					if (_CancelledTickets != value) {
						OnCancelledTicketsChanging(value);
						SendPropertyChanging();
						_CancelledTickets = value;
						SendPropertyChanged("CancelledTickets");
						OnCancelledTicketsChanged();
					}
				}
			}

			partial void OnFundsLockTotalFundsDontMatchChanging(bool value);
			partial void OnFundsLockTotalFundsDontMatchChanged();
			private bool _FundsLockTotalFundsDontMatch;
			[Column(Storage="_FundsLockTotalFundsDontMatch", DbType="Bit", CanBeNull=false)]
			public  override bool FundsLockTotalFundsDontMatch {
				get { return _FundsLockTotalFundsDontMatch; }
				set {
					if (_FundsLockTotalFundsDontMatch != value) {
						OnFundsLockTotalFundsDontMatchChanging(value);
						SendPropertyChanging();
						_FundsLockTotalFundsDontMatch = value;
						SendPropertyChanged("FundsLockTotalFundsDontMatch");
						OnFundsLockTotalFundsDontMatchChanged();
					}
				}
			}

			partial void OnTotalVatChanging(decimal value);
			partial void OnTotalVatChanged();
			private decimal _TotalVat;
			[Column(Storage="_TotalVat", DbType="Decimal(18,2)", CanBeNull=false)]
			public  override decimal TotalVat {
				get { return _TotalVat; }
				set {
					if (_TotalVat != value) {
						OnTotalVatChanging(value);
						SendPropertyChanging();
						_TotalVat = value;
						SendPropertyChanged("TotalVat");
						OnTotalVatChanged();
					}
				}
			}

			partial void OnTotalBookingFeesChanging(decimal value);
			partial void OnTotalBookingFeesChanged();
			private decimal _TotalBookingFees;
			[Column(Storage="_TotalBookingFees", DbType="Decimal(18,2)", CanBeNull=false)]
			public  override decimal TotalBookingFees {
				get { return _TotalBookingFees; }
				set {
					if (_TotalBookingFees != value) {
						OnTotalBookingFeesChanging(value);
						SendPropertyChanging();
						_TotalBookingFees = value;
						SendPropertyChanged("TotalBookingFees");
						OnTotalBookingFeesChanged();
					}
				}
			}

			partial void OnContactEmailChanging(string value);
			partial void OnContactEmailChanged();
			private string _ContactEmail;
			[Column(Storage="_ContactEmail", DbType="VarChar(100)", CanBeNull=false)]
			public  override string ContactEmail {
				get { return _ContactEmail; }
				set {
					if (_ContactEmail != value) {
						OnContactEmailChanging(value);
						SendPropertyChanging();
						_ContactEmail = value;
						SendPropertyChanged("ContactEmail");
						OnContactEmailChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.TicketRun")]
 		public partial class TicketRun : Model.Entities.TicketRun, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public TicketRun()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnKChanging(int value);
			partial void OnKChanged();
			private int _K;
			[Column(Storage="_K", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
			public  override int K {
				get { return _K; }
				set {
					if (_K != value) {
						OnKChanging(value);
						SendPropertyChanging();
						_K = value;
						SendPropertyChanged("K");
						OnKChanged();
					}
				}
			}

			partial void OnEventKChanging(int value);
			partial void OnEventKChanged();
			private int _EventK;
			[Column(Storage="_EventK", DbType="Int", CanBeNull=false)]
			public  override int EventK {
				get { return _EventK; }
				set {
					if (_EventK != value) {
						OnEventKChanging(value);
						SendPropertyChanging();
						_EventK = value;
						SendPropertyChanged("EventK");
						OnEventKChanged();
					}
				}
			}

			partial void OnPromoterKChanging(int value);
			partial void OnPromoterKChanged();
			private int _PromoterK;
			[Column(Storage="_PromoterK", DbType="Int", CanBeNull=false)]
			public  override int PromoterK {
				get { return _PromoterK; }
				set {
					if (_PromoterK != value) {
						OnPromoterKChanging(value);
						SendPropertyChanging();
						_PromoterK = value;
						SendPropertyChanged("PromoterK");
						OnPromoterKChanged();
					}
				}
			}

			partial void OnBrandKChanging(int value);
			partial void OnBrandKChanged();
			private int _BrandK;
			[Column(Storage="_BrandK", DbType="Int", CanBeNull=false)]
			public  override int BrandK {
				get { return _BrandK; }
				set {
					if (_BrandK != value) {
						OnBrandKChanging(value);
						SendPropertyChanging();
						_BrandK = value;
						SendPropertyChanged("BrandK");
						OnBrandKChanged();
					}
				}
			}

			partial void OnNameChanging(string value);
			partial void OnNameChanged();
			private string _Name;
			[Column(Storage="_Name", DbType="VarChar(30)", CanBeNull=false)]
			public  override string Name {
				get { return _Name; }
				set {
					if (_Name != value) {
						OnNameChanging(value);
						SendPropertyChanging();
						_Name = value;
						SendPropertyChanged("Name");
						OnNameChanged();
					}
				}
			}

			partial void OnDescriptionChanging(string value);
			partial void OnDescriptionChanged();
			private string _Description;
			[Column(Storage="_Description", DbType="VarChar(256)", CanBeNull=false)]
			public  override string Description {
				get { return _Description; }
				set {
					if (_Description != value) {
						OnDescriptionChanging(value);
						SendPropertyChanging();
						_Description = value;
						SendPropertyChanged("Description");
						OnDescriptionChanged();
					}
				}
			}

			partial void OnPriceChanging(decimal value);
			partial void OnPriceChanged();
			private decimal _Price;
			[Column(Storage="_Price", DbType="Decimal(18,2)", CanBeNull=false)]
			public  override decimal Price {
				get { return _Price; }
				set {
					if (_Price != value) {
						OnPriceChanging(value);
						SendPropertyChanging();
						_Price = value;
						SendPropertyChanged("Price");
						OnPriceChanged();
					}
				}
			}

			partial void OnBookingFeeChanging(decimal value);
			partial void OnBookingFeeChanged();
			private decimal _BookingFee;
			[Column(Storage="_BookingFee", DbType="Decimal(18,2)", CanBeNull=false)]
			public  override decimal BookingFee {
				get { return _BookingFee; }
				set {
					if (_BookingFee != value) {
						OnBookingFeeChanging(value);
						SendPropertyChanging();
						_BookingFee = value;
						SendPropertyChanged("BookingFee");
						OnBookingFeeChanged();
					}
				}
			}

			partial void OnLockPriceChanging(bool value);
			partial void OnLockPriceChanged();
			private bool _LockPrice;
			[Column(Storage="_LockPrice", DbType="Bit", CanBeNull=false)]
			public  override bool LockPrice {
				get { return _LockPrice; }
				set {
					if (_LockPrice != value) {
						OnLockPriceChanging(value);
						SendPropertyChanging();
						_LockPrice = value;
						SendPropertyChanged("LockPrice");
						OnLockPriceChanged();
					}
				}
			}

			partial void OnFollowsTicketRunKChanging(int value);
			partial void OnFollowsTicketRunKChanged();
			private int _FollowsTicketRunK;
			[Column(Storage="_FollowsTicketRunK", DbType="Int", CanBeNull=false)]
			public  override int FollowsTicketRunK {
				get { return _FollowsTicketRunK; }
				set {
					if (_FollowsTicketRunK != value) {
						OnFollowsTicketRunKChanging(value);
						SendPropertyChanging();
						_FollowsTicketRunK = value;
						SendPropertyChanged("FollowsTicketRunK");
						OnFollowsTicketRunKChanged();
					}
				}
			}

			partial void OnStartDateTimeChanging(DateTime value);
			partial void OnStartDateTimeChanged();
			private DateTime _StartDateTime;
			[Column(Storage="_StartDateTime", DbType="DateTime", CanBeNull=false)]
			public  override DateTime StartDateTime {
				get { return _StartDateTime; }
				set {
					if (_StartDateTime != value) {
						OnStartDateTimeChanging(value);
						SendPropertyChanging();
						_StartDateTime = value;
						SendPropertyChanged("StartDateTime");
						OnStartDateTimeChanged();
					}
				}
			}

			partial void OnEndDateTimeChanging(DateTime value);
			partial void OnEndDateTimeChanged();
			private DateTime _EndDateTime;
			[Column(Storage="_EndDateTime", DbType="DateTime", CanBeNull=false)]
			public  override DateTime EndDateTime {
				get { return _EndDateTime; }
				set {
					if (_EndDateTime != value) {
						OnEndDateTimeChanging(value);
						SendPropertyChanging();
						_EndDateTime = value;
						SendPropertyChanged("EndDateTime");
						OnEndDateTimeChanged();
					}
				}
			}

			partial void OnMaxTicketsChanging(int value);
			partial void OnMaxTicketsChanged();
			private int _MaxTickets;
			[Column(Storage="_MaxTickets", DbType="Int", CanBeNull=false)]
			public  override int MaxTickets {
				get { return _MaxTickets; }
				set {
					if (_MaxTickets != value) {
						OnMaxTicketsChanging(value);
						SendPropertyChanging();
						_MaxTickets = value;
						SendPropertyChanged("MaxTickets");
						OnMaxTicketsChanged();
					}
				}
			}

			partial void OnSoldTicketsChanging(int value);
			partial void OnSoldTicketsChanged();
			private int _SoldTickets;
			[Column(Storage="_SoldTickets", DbType="Int", CanBeNull=false)]
			public  override int SoldTickets {
				get { return _SoldTickets; }
				set {
					if (_SoldTickets != value) {
						OnSoldTicketsChanging(value);
						SendPropertyChanging();
						_SoldTickets = value;
						SendPropertyChanged("SoldTickets");
						OnSoldTicketsChanged();
					}
				}
			}

			partial void OnListOrderChanging(double value);
			partial void OnListOrderChanged();
			private double _ListOrder;
			[Column(Storage="_ListOrder", DbType="Float", CanBeNull=false)]
			public  override double ListOrder {
				get { return _ListOrder; }
				set {
					if (_ListOrder != value) {
						OnListOrderChanging(value);
						SendPropertyChanging();
						_ListOrder = value;
						SendPropertyChanged("ListOrder");
						OnListOrderChanged();
					}
				}
			}

			partial void OnPausedChanging(bool value);
			partial void OnPausedChanged();
			private bool _Paused;
			[Column(Storage="_Paused", DbType="Bit", CanBeNull=false)]
			public  override bool Paused {
				get { return _Paused; }
				set {
					if (_Paused != value) {
						OnPausedChanging(value);
						SendPropertyChanging();
						_Paused = value;
						SendPropertyChanged("Paused");
						OnPausedChanged();
					}
				}
			}

			partial void OnDuplicateGuidChanging(Guid value);
			partial void OnDuplicateGuidChanged();
			private Guid _DuplicateGuid;
			[Column(Storage="_DuplicateGuid", DbType="UniqueIdentifier", CanBeNull=false)]
			public  override Guid DuplicateGuid {
				get { return _DuplicateGuid; }
				set {
					if (_DuplicateGuid != value) {
						OnDuplicateGuidChanging(value);
						SendPropertyChanging();
						_DuplicateGuid = value;
						SendPropertyChanged("DuplicateGuid");
						OnDuplicateGuidChanged();
					}
				}
			}

			partial void OnEmailSentChanging(bool value);
			partial void OnEmailSentChanged();
			private bool _EmailSent;
			[Column(Storage="_EmailSent", DbType="Bit", CanBeNull=false)]
			public  override bool EmailSent {
				get { return _EmailSent; }
				set {
					if (_EmailSent != value) {
						OnEmailSentChanging(value);
						SendPropertyChanging();
						_EmailSent = value;
						SendPropertyChanged("EmailSent");
						OnEmailSentChanged();
					}
				}
			}

			partial void OnDeliveryDateChanging(DateTime value);
			partial void OnDeliveryDateChanged();
			private DateTime _DeliveryDate;
			[Column(Storage="_DeliveryDate", DbType="DateTime", CanBeNull=false)]
			public  override DateTime DeliveryDate {
				get { return _DeliveryDate; }
				set {
					if (_DeliveryDate != value) {
						OnDeliveryDateChanging(value);
						SendPropertyChanging();
						_DeliveryDate = value;
						SendPropertyChanged("DeliveryDate");
						OnDeliveryDateChanged();
					}
				}
			}

			partial void OnDeliveryMethodChanging(Model.Entities.TicketRun.DeliveryMethodType value);
			partial void OnDeliveryMethodChanged();
			private Model.Entities.TicketRun.DeliveryMethodType _DeliveryMethod;
			[Column(Storage="_DeliveryMethod", DbType="Int", CanBeNull=false)]
			public  override Model.Entities.TicketRun.DeliveryMethodType DeliveryMethod {
				get { return _DeliveryMethod; }
				set {
					if (_DeliveryMethod != value) {
						OnDeliveryMethodChanging(value);
						SendPropertyChanging();
						_DeliveryMethod = value;
						SendPropertyChanged("DeliveryMethod");
						OnDeliveryMethodChanged();
					}
				}
			}

			partial void OnDeliveryChargeChanging(decimal value);
			partial void OnDeliveryChargeChanged();
			private decimal _DeliveryCharge;
			[Column(Storage="_DeliveryCharge", DbType="Decimal(6,2)", CanBeNull=false)]
			public  override decimal DeliveryCharge {
				get { return _DeliveryCharge; }
				set {
					if (_DeliveryCharge != value) {
						OnDeliveryChargeChanging(value);
						SendPropertyChanging();
						_DeliveryCharge = value;
						SendPropertyChanged("DeliveryCharge");
						OnDeliveryChargeChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.TrafficExceptionDay")]
 		public partial class TrafficExceptionDay : Model.Entities.TrafficExceptionDay, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public TrafficExceptionDay()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnExceptionDateChanging(DateTime value);
			partial void OnExceptionDateChanged();
			private DateTime _ExceptionDate;
			[Column(Storage="_ExceptionDate", DbType="DateTime NOT NULL", IsPrimaryKey=true)]
			public  override DateTime ExceptionDate {
				get { return _ExceptionDate; }
				set {
					if (_ExceptionDate != value) {
						OnExceptionDateChanging(value);
						SendPropertyChanging();
						_ExceptionDate = value;
						SendPropertyChanged("ExceptionDate");
						OnExceptionDateChanged();
					}
				}
			}

			partial void OnDateToUseInsteadChanging(DateTime value);
			partial void OnDateToUseInsteadChanged();
			private DateTime _DateToUseInstead;
			[Column(Storage="_DateToUseInstead", DbType="DateTime NOT NULL", CanBeNull=false)]
			public  override DateTime DateToUseInstead {
				get { return _DateToUseInstead; }
				set {
					if (_DateToUseInstead != value) {
						OnDateToUseInsteadChanging(value);
						SendPropertyChanging();
						_DateToUseInstead = value;
						SendPropertyChanged("DateToUseInstead");
						OnDateToUseInsteadChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.TrafficLevelRelativeToMinuteOfDay")]
 		public partial class TrafficLevelRelativeToMinuteOfDay : Model.Entities.TrafficLevelRelativeToMinuteOfDay, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public TrafficLevelRelativeToMinuteOfDay()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnMinuteChanging(int value);
			partial void OnMinuteChanged();
			private int _Minute;
			[Column(Storage="_Minute", DbType="Int NOT NULL", IsPrimaryKey=true)]
			public  override int Minute {
				get { return _Minute; }
				set {
					if (_Minute != value) {
						OnMinuteChanging(value);
						SendPropertyChanging();
						_Minute = value;
						SendPropertyChanged("Minute");
						OnMinuteChanged();
					}
				}
			}

			partial void OnTrafficLevelChanging(int value);
			partial void OnTrafficLevelChanged();
			private int _TrafficLevel;
			[Column(Storage="_TrafficLevel", DbType="Int NOT NULL", CanBeNull=false)]
			public  override int TrafficLevel {
				get { return _TrafficLevel; }
				set {
					if (_TrafficLevel != value) {
						OnTrafficLevelChanging(value);
						SendPropertyChanging();
						_TrafficLevel = value;
						SendPropertyChanged("TrafficLevel");
						OnTrafficLevelChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.Transfer")]
 		public partial class Transfer : Model.Entities.Transfer, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public Transfer()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnKChanging(int value);
			partial void OnKChanged();
			private int _K;
			[Column(Storage="_K", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
			public  override int K {
				get { return _K; }
				set {
					if (_K != value) {
						OnKChanging(value);
						SendPropertyChanging();
						_K = value;
						SendPropertyChanged("K");
						OnKChanged();
					}
				}
			}

			partial void OnTypeChanging(Model.Entities.Transfer.TransferTypes value);
			partial void OnTypeChanged();
			private Model.Entities.Transfer.TransferTypes _Type;
			[Column(Storage="_Type", DbType="Int", CanBeNull=false)]
			public  override Model.Entities.Transfer.TransferTypes Type {
				get { return _Type; }
				set {
					if (_Type != value) {
						OnTypeChanging(value);
						SendPropertyChanging();
						_Type = value;
						SendPropertyChanged("Type");
						OnTypeChanged();
					}
				}
			}

			partial void OnStatusChanging(Model.Entities.Transfer.StatusEnum value);
			partial void OnStatusChanged();
			private Model.Entities.Transfer.StatusEnum _Status;
			[Column(Storage="_Status", DbType="Int", CanBeNull=false)]
			public  override Model.Entities.Transfer.StatusEnum Status {
				get { return _Status; }
				set {
					if (_Status != value) {
						OnStatusChanging(value);
						SendPropertyChanging();
						_Status = value;
						SendPropertyChanged("Status");
						OnStatusChanged();
					}
				}
			}

			partial void OnMethodChanging(Model.Entities.Transfer.Methods value);
			partial void OnMethodChanged();
			private Model.Entities.Transfer.Methods _Method;
			[Column(Storage="_Method", DbType="Int", CanBeNull=false)]
			public  override Model.Entities.Transfer.Methods Method {
				get { return _Method; }
				set {
					if (_Method != value) {
						OnMethodChanging(value);
						SendPropertyChanging();
						_Method = value;
						SendPropertyChanged("Method");
						OnMethodChanged();
					}
				}
			}

			partial void OnUsrKChanging(int value);
			partial void OnUsrKChanged();
			private int _UsrK;
			[Column(Storage="_UsrK", DbType="Int", CanBeNull=false)]
			public  override int UsrK {
				get { return _UsrK; }
				set {
					if (_UsrK != value) {
						OnUsrKChanging(value);
						SendPropertyChanging();
						_UsrK = value;
						SendPropertyChanged("UsrK");
						OnUsrKChanged();
					}
				}
			}

			partial void OnPromoterKChanging(int value);
			partial void OnPromoterKChanged();
			private int _PromoterK;
			[Column(Storage="_PromoterK", DbType="Int", CanBeNull=false)]
			public  override int PromoterK {
				get { return _PromoterK; }
				set {
					if (_PromoterK != value) {
						OnPromoterKChanging(value);
						SendPropertyChanging();
						_PromoterK = value;
						SendPropertyChanged("PromoterK");
						OnPromoterKChanged();
					}
				}
			}

			partial void OnActionUsrKChanging(int value);
			partial void OnActionUsrKChanged();
			private int _ActionUsrK;
			[Column(Storage="_ActionUsrK", DbType="Int", CanBeNull=false)]
			public  override int ActionUsrK {
				get { return _ActionUsrK; }
				set {
					if (_ActionUsrK != value) {
						OnActionUsrKChanging(value);
						SendPropertyChanging();
						_ActionUsrK = value;
						SendPropertyChanged("ActionUsrK");
						OnActionUsrKChanged();
					}
				}
			}

			partial void OnAmountChanging(decimal value);
			partial void OnAmountChanged();
			private decimal _Amount;
			[Column(Storage="_Amount", DbType="Decimal(18,2)", CanBeNull=false)]
			public  override decimal Amount {
				get { return _Amount; }
				set {
					if (_Amount != value) {
						OnAmountChanging(value);
						SendPropertyChanging();
						_Amount = value;
						SendPropertyChanged("Amount");
						OnAmountChanged();
					}
				}
			}

			partial void OnDateTimeChanging(DateTime value);
			partial void OnDateTimeChanged();
			private DateTime _DateTime;
			[Column(Storage="_DateTime", DbType="DateTime", CanBeNull=false)]
			public  override DateTime DateTime {
				get { return _DateTime; }
				set {
					if (_DateTime != value) {
						OnDateTimeChanging(value);
						SendPropertyChanging();
						_DateTime = value;
						SendPropertyChanged("DateTime");
						OnDateTimeChanged();
					}
				}
			}

			partial void OnDateTimeCreatedChanging(DateTime value);
			partial void OnDateTimeCreatedChanged();
			private DateTime _DateTimeCreated;
			[Column(Storage="_DateTimeCreated", DbType="DateTime", CanBeNull=false)]
			public  override DateTime DateTimeCreated {
				get { return _DateTimeCreated; }
				set {
					if (_DateTimeCreated != value) {
						OnDateTimeCreatedChanging(value);
						SendPropertyChanging();
						_DateTimeCreated = value;
						SendPropertyChanged("DateTimeCreated");
						OnDateTimeCreatedChanged();
					}
				}
			}

			partial void OnDateTimeCompleteChanging(DateTime value);
			partial void OnDateTimeCompleteChanged();
			private DateTime _DateTimeComplete;
			[Column(Storage="_DateTimeComplete", DbType="DateTime", CanBeNull=false)]
			public  override DateTime DateTimeComplete {
				get { return _DateTimeComplete; }
				set {
					if (_DateTimeComplete != value) {
						OnDateTimeCompleteChanging(value);
						SendPropertyChanging();
						_DateTimeComplete = value;
						SendPropertyChanged("DateTimeComplete");
						OnDateTimeCompleteChanged();
					}
				}
			}

			partial void OnClientHostChanging(string value);
			partial void OnClientHostChanged();
			private string _ClientHost;
			[Column(Storage="_ClientHost", DbType="VarChar(15)", CanBeNull=false)]
			public  override string ClientHost {
				get { return _ClientHost; }
				set {
					if (_ClientHost != value) {
						OnClientHostChanging(value);
						SendPropertyChanging();
						_ClientHost = value;
						SendPropertyChanged("ClientHost");
						OnClientHostChanged();
					}
				}
			}

			partial void OnCardNameChanging(string value);
			partial void OnCardNameChanged();
			private string _CardName;
			[Column(Storage="_CardName", DbType="VarChar(150)", CanBeNull=false)]
			public  override string CardName {
				get { return _CardName; }
				set {
					if (_CardName != value) {
						OnCardNameChanging(value);
						SendPropertyChanging();
						_CardName = value;
						SendPropertyChanged("CardName");
						OnCardNameChanged();
					}
				}
			}

			partial void OnCardAddress1Changing(string value);
			partial void OnCardAddress1Changed();
			private string _CardAddress1;
			[Column(Storage="_CardAddress1", DbType="VarChar(150)", CanBeNull=false)]
			public  override string CardAddress1 {
				get { return _CardAddress1; }
				set {
					if (_CardAddress1 != value) {
						OnCardAddress1Changing(value);
						SendPropertyChanging();
						_CardAddress1 = value;
						SendPropertyChanged("CardAddress1");
						OnCardAddress1Changed();
					}
				}
			}

			partial void OnCardPostcodeChanging(string value);
			partial void OnCardPostcodeChanged();
			private string _CardPostcode;
			[Column(Storage="_CardPostcode", DbType="VarChar(150)", CanBeNull=false)]
			public  override string CardPostcode {
				get { return _CardPostcode; }
				set {
					if (_CardPostcode != value) {
						OnCardPostcodeChanging(value);
						SendPropertyChanging();
						_CardPostcode = value;
						SendPropertyChanged("CardPostcode");
						OnCardPostcodeChanged();
					}
				}
			}

			partial void OnCardSavedTransferKChanging(int value);
			partial void OnCardSavedTransferKChanged();
			private int _CardSavedTransferK;
			[Column(Storage="_CardSavedTransferK", DbType="Int", CanBeNull=false)]
			public  override int CardSavedTransferK {
				get { return _CardSavedTransferK; }
				set {
					if (_CardSavedTransferK != value) {
						OnCardSavedTransferKChanging(value);
						SendPropertyChanging();
						_CardSavedTransferK = value;
						SendPropertyChanged("CardSavedTransferK");
						OnCardSavedTransferKChanged();
					}
				}
			}

			partial void OnCardNumberHashChanging(Guid value);
			partial void OnCardNumberHashChanged();
			private Guid _CardNumberHash;
			[Column(Storage="_CardNumberHash", DbType="UniqueIdentifier", CanBeNull=false)]
			public  override Guid CardNumberHash {
				get { return _CardNumberHash; }
				set {
					if (_CardNumberHash != value) {
						OnCardNumberHashChanging(value);
						SendPropertyChanging();
						_CardNumberHash = value;
						SendPropertyChanged("CardNumberHash");
						OnCardNumberHashChanged();
					}
				}
			}

			partial void OnCardNumberEndChanging(string value);
			partial void OnCardNumberEndChanged();
			private string _CardNumberEnd;
			[Column(Storage="_CardNumberEnd", DbType="VarChar(20)", CanBeNull=false)]
			public  override string CardNumberEnd {
				get { return _CardNumberEnd; }
				set {
					if (_CardNumberEnd != value) {
						OnCardNumberEndChanging(value);
						SendPropertyChanging();
						_CardNumberEnd = value;
						SendPropertyChanged("CardNumberEnd");
						OnCardNumberEndChanged();
					}
				}
			}

			partial void OnCardTypeChanging(Model.Entities.BinRange.Types value);
			partial void OnCardTypeChanged();
			private Model.Entities.BinRange.Types _CardType;
			[Column(Storage="_CardType", DbType="Int", CanBeNull=false)]
			public  override Model.Entities.BinRange.Types CardType {
				get { return _CardType; }
				set {
					if (_CardType != value) {
						OnCardTypeChanging(value);
						SendPropertyChanging();
						_CardType = value;
						SendPropertyChanged("CardType");
						OnCardTypeChanged();
					}
				}
			}

			partial void OnCardStartChanging(DateTime value);
			partial void OnCardStartChanged();
			private DateTime _CardStart;
			[Column(Storage="_CardStart", DbType="DateTime", CanBeNull=false)]
			public  override DateTime CardStart {
				get { return _CardStart; }
				set {
					if (_CardStart != value) {
						OnCardStartChanging(value);
						SendPropertyChanging();
						_CardStart = value;
						SendPropertyChanged("CardStart");
						OnCardStartChanged();
					}
				}
			}

			partial void OnCardExpiresChanging(DateTime value);
			partial void OnCardExpiresChanged();
			private DateTime _CardExpires;
			[Column(Storage="_CardExpires", DbType="DateTime", CanBeNull=false)]
			public  override DateTime CardExpires {
				get { return _CardExpires; }
				set {
					if (_CardExpires != value) {
						OnCardExpiresChanging(value);
						SendPropertyChanging();
						_CardExpires = value;
						SendPropertyChanged("CardExpires");
						OnCardExpiresChanged();
					}
				}
			}

			partial void OnCardIssueChanging(int value);
			partial void OnCardIssueChanged();
			private int _CardIssue;
			[Column(Storage="_CardIssue", DbType="Int", CanBeNull=false)]
			public  override int CardIssue {
				get { return _CardIssue; }
				set {
					if (_CardIssue != value) {
						OnCardIssueChanging(value);
						SendPropertyChanging();
						_CardIssue = value;
						SendPropertyChanged("CardIssue");
						OnCardIssueChanged();
					}
				}
			}

			partial void OnCardCV2Changing(string value);
			partial void OnCardCV2Changed();
			private string _CardCV2;
			[Column(Storage="_CardCV2", DbType="VarChar(5)", CanBeNull=false)]
			public  override string CardCV2 {
				get { return _CardCV2; }
				set {
					if (_CardCV2 != value) {
						OnCardCV2Changing(value);
						SendPropertyChanging();
						_CardCV2 = value;
						SendPropertyChanged("CardCV2");
						OnCardCV2Changed();
					}
				}
			}

			partial void OnCardSavedChanging(bool value);
			partial void OnCardSavedChanged();
			private bool _CardSaved;
			[Column(Storage="_CardSaved", DbType="Bit", CanBeNull=false)]
			public  override bool CardSaved {
				get { return _CardSaved; }
				set {
					if (_CardSaved != value) {
						OnCardSavedChanging(value);
						SendPropertyChanging();
						_CardSaved = value;
						SendPropertyChanged("CardSaved");
						OnCardSavedChanged();
					}
				}
			}

			partial void OnBankAccountNameChanging(string value);
			partial void OnBankAccountNameChanged();
			private string _BankAccountName;
			[Column(Storage="_BankAccountName", DbType="VarChar(50)", CanBeNull=false)]
			public  override string BankAccountName {
				get { return _BankAccountName; }
				set {
					if (_BankAccountName != value) {
						OnBankAccountNameChanging(value);
						SendPropertyChanging();
						_BankAccountName = value;
						SendPropertyChanged("BankAccountName");
						OnBankAccountNameChanged();
					}
				}
			}

			partial void OnBankNameChanging(string value);
			partial void OnBankNameChanged();
			private string _BankName;
			[Column(Storage="_BankName", DbType="VarChar(50)", CanBeNull=false)]
			public  override string BankName {
				get { return _BankName; }
				set {
					if (_BankName != value) {
						OnBankNameChanging(value);
						SendPropertyChanging();
						_BankName = value;
						SendPropertyChanged("BankName");
						OnBankNameChanged();
					}
				}
			}

			partial void OnBankSortCodeChanging(string value);
			partial void OnBankSortCodeChanged();
			private string _BankSortCode;
			[Column(Storage="_BankSortCode", DbType="VarChar(50)", CanBeNull=false)]
			public  override string BankSortCode {
				get { return _BankSortCode; }
				set {
					if (_BankSortCode != value) {
						OnBankSortCodeChanging(value);
						SendPropertyChanging();
						_BankSortCode = value;
						SendPropertyChanged("BankSortCode");
						OnBankSortCodeChanged();
					}
				}
			}

			partial void OnBankAccountNumberChanging(string value);
			partial void OnBankAccountNumberChanged();
			private string _BankAccountNumber;
			[Column(Storage="_BankAccountNumber", DbType="VarChar(50)", CanBeNull=false)]
			public  override string BankAccountNumber {
				get { return _BankAccountNumber; }
				set {
					if (_BankAccountNumber != value) {
						OnBankAccountNumberChanging(value);
						SendPropertyChanging();
						_BankAccountNumber = value;
						SendPropertyChanged("BankAccountNumber");
						OnBankAccountNumberChanged();
					}
				}
			}

			partial void OnBankTransferReferenceChanging(string value);
			partial void OnBankTransferReferenceChanged();
			private string _BankTransferReference;
			[Column(Storage="_BankTransferReference", DbType="VarChar(50)", CanBeNull=false)]
			public  override string BankTransferReference {
				get { return _BankTransferReference; }
				set {
					if (_BankTransferReference != value) {
						OnBankTransferReferenceChanging(value);
						SendPropertyChanging();
						_BankTransferReference = value;
						SendPropertyChanged("BankTransferReference");
						OnBankTransferReferenceChanged();
					}
				}
			}

			partial void OnCardResponseAuthCodeChanging(string value);
			partial void OnCardResponseAuthCodeChanged();
			private string _CardResponseAuthCode;
			[Column(Storage="_CardResponseAuthCode", DbType="VarChar(50)", CanBeNull=false)]
			public  override string CardResponseAuthCode {
				get { return _CardResponseAuthCode; }
				set {
					if (_CardResponseAuthCode != value) {
						OnCardResponseAuthCodeChanging(value);
						SendPropertyChanging();
						_CardResponseAuthCode = value;
						SendPropertyChanged("CardResponseAuthCode");
						OnCardResponseAuthCodeChanged();
					}
				}
			}

			partial void OnCardResponseCv2AvsChanging(string value);
			partial void OnCardResponseCv2AvsChanged();
			private string _CardResponseCv2Avs;
			[Column(Storage="_CardResponseCv2Avs", DbType="VarChar(50)", CanBeNull=false)]
			public  override string CardResponseCv2Avs {
				get { return _CardResponseCv2Avs; }
				set {
					if (_CardResponseCv2Avs != value) {
						OnCardResponseCv2AvsChanging(value);
						SendPropertyChanging();
						_CardResponseCv2Avs = value;
						SendPropertyChanged("CardResponseCv2Avs");
						OnCardResponseCv2AvsChanged();
					}
				}
			}

			partial void OnCardResponseMessageChanging(string value);
			partial void OnCardResponseMessageChanged();
			private string _CardResponseMessage;
			[Column(Storage="_CardResponseMessage", DbType="VarChar(150)", CanBeNull=false)]
			public  override string CardResponseMessage {
				get { return _CardResponseMessage; }
				set {
					if (_CardResponseMessage != value) {
						OnCardResponseMessageChanging(value);
						SendPropertyChanging();
						_CardResponseMessage = value;
						SendPropertyChanged("CardResponseMessage");
						OnCardResponseMessageChanged();
					}
				}
			}

			partial void OnCardResponseRespCodeChanging(string value);
			partial void OnCardResponseRespCodeChanged();
			private string _CardResponseRespCode;
			[Column(Storage="_CardResponseRespCode", DbType="VarChar(10)", CanBeNull=false)]
			public  override string CardResponseRespCode {
				get { return _CardResponseRespCode; }
				set {
					if (_CardResponseRespCode != value) {
						OnCardResponseRespCodeChanging(value);
						SendPropertyChanging();
						_CardResponseRespCode = value;
						SendPropertyChanged("CardResponseRespCode");
						OnCardResponseRespCodeChanged();
					}
				}
			}

			partial void OnCardResponseCodeChanging(string value);
			partial void OnCardResponseCodeChanged();
			private string _CardResponseCode;
			[Column(Storage="_CardResponseCode", DbType="VarChar(20)", CanBeNull=false)]
			public  override string CardResponseCode {
				get { return _CardResponseCode; }
				set {
					if (_CardResponseCode != value) {
						OnCardResponseCodeChanging(value);
						SendPropertyChanging();
						_CardResponseCode = value;
						SendPropertyChanged("CardResponseCode");
						OnCardResponseCodeChanged();
					}
				}
			}

			partial void OnCardResponseIsCv2MatchChanging(bool value);
			partial void OnCardResponseIsCv2MatchChanged();
			private bool _CardResponseIsCv2Match;
			[Column(Storage="_CardResponseIsCv2Match", DbType="Bit", CanBeNull=false)]
			public  override bool CardResponseIsCv2Match {
				get { return _CardResponseIsCv2Match; }
				set {
					if (_CardResponseIsCv2Match != value) {
						OnCardResponseIsCv2MatchChanging(value);
						SendPropertyChanging();
						_CardResponseIsCv2Match = value;
						SendPropertyChanged("CardResponseIsCv2Match");
						OnCardResponseIsCv2MatchChanged();
					}
				}
			}

			partial void OnCardResponseIsPostCodeMatchChanging(bool value);
			partial void OnCardResponseIsPostCodeMatchChanged();
			private bool _CardResponseIsPostCodeMatch;
			[Column(Storage="_CardResponseIsPostCodeMatch", DbType="Bit", CanBeNull=false)]
			public  override bool CardResponseIsPostCodeMatch {
				get { return _CardResponseIsPostCodeMatch; }
				set {
					if (_CardResponseIsPostCodeMatch != value) {
						OnCardResponseIsPostCodeMatchChanging(value);
						SendPropertyChanging();
						_CardResponseIsPostCodeMatch = value;
						SendPropertyChanged("CardResponseIsPostCodeMatch");
						OnCardResponseIsPostCodeMatchChanged();
					}
				}
			}

			partial void OnCardResponseIsAddressMatchChanging(bool value);
			partial void OnCardResponseIsAddressMatchChanged();
			private bool _CardResponseIsAddressMatch;
			[Column(Storage="_CardResponseIsAddressMatch", DbType="Bit", CanBeNull=false)]
			public  override bool CardResponseIsAddressMatch {
				get { return _CardResponseIsAddressMatch; }
				set {
					if (_CardResponseIsAddressMatch != value) {
						OnCardResponseIsAddressMatchChanging(value);
						SendPropertyChanging();
						_CardResponseIsAddressMatch = value;
						SendPropertyChanged("CardResponseIsAddressMatch");
						OnCardResponseIsAddressMatchChanged();
					}
				}
			}

			partial void OnCardResponseIsDataCheckedChanging(bool value);
			partial void OnCardResponseIsDataCheckedChanged();
			private bool _CardResponseIsDataChecked;
			[Column(Storage="_CardResponseIsDataChecked", DbType="Bit", CanBeNull=false)]
			public  override bool CardResponseIsDataChecked {
				get { return _CardResponseIsDataChecked; }
				set {
					if (_CardResponseIsDataChecked != value) {
						OnCardResponseIsDataCheckedChanging(value);
						SendPropertyChanging();
						_CardResponseIsDataChecked = value;
						SendPropertyChanged("CardResponseIsDataChecked");
						OnCardResponseIsDataCheckedChanged();
					}
				}
			}

			partial void OnNotesChanging(string value);
			partial void OnNotesChanged();
			private string _Notes;
			[Column(Storage="_Notes", DbType="Text", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
			public  override string Notes {
				get { return _Notes; }
				set {
					if (_Notes != value) {
						OnNotesChanging(value);
						SendPropertyChanging();
						_Notes = value;
						SendPropertyChanged("Notes");
						OnNotesChanged();
					}
				}
			}

			partial void OnIsFullyAppliedChanging(bool value);
			partial void OnIsFullyAppliedChanged();
			private bool _IsFullyApplied;
			[Column(Storage="_IsFullyApplied", DbType="Bit", CanBeNull=false)]
			public  override bool IsFullyApplied {
				get { return _IsFullyApplied; }
				set {
					if (_IsFullyApplied != value) {
						OnIsFullyAppliedChanging(value);
						SendPropertyChanging();
						_IsFullyApplied = value;
						SendPropertyChanged("IsFullyApplied");
						OnIsFullyAppliedChanged();
					}
				}
			}

			partial void OnGuidChanging(Guid value);
			partial void OnGuidChanged();
			private Guid _Guid;
			[Column(Storage="_Guid", DbType="UniqueIdentifier", CanBeNull=false)]
			public  override Guid Guid {
				get { return _Guid; }
				set {
					if (_Guid != value) {
						OnGuidChanging(value);
						SendPropertyChanging();
						_Guid = value;
						SendPropertyChanged("Guid");
						OnGuidChanged();
					}
				}
			}

			partial void OnTransferRefundedKChanging(int value);
			partial void OnTransferRefundedKChanged();
			private int _TransferRefundedK;
			[Column(Storage="_TransferRefundedK", DbType="Int", CanBeNull=false)]
			public  override int TransferRefundedK {
				get { return _TransferRefundedK; }
				set {
					if (_TransferRefundedK != value) {
						OnTransferRefundedKChanging(value);
						SendPropertyChanging();
						_TransferRefundedK = value;
						SendPropertyChanged("TransferRefundedK");
						OnTransferRefundedKChanged();
					}
				}
			}

			partial void OnRefundStatusChanging(Model.Entities.Transfer.RefundStatuses value);
			partial void OnRefundStatusChanged();
			private Model.Entities.Transfer.RefundStatuses _RefundStatus;
			[Column(Storage="_RefundStatus", DbType="Int", CanBeNull=false)]
			public  override Model.Entities.Transfer.RefundStatuses RefundStatus {
				get { return _RefundStatus; }
				set {
					if (_RefundStatus != value) {
						OnRefundStatusChanging(value);
						SendPropertyChanging();
						_RefundStatus = value;
						SendPropertyChanged("RefundStatus");
						OnRefundStatusChanged();
					}
				}
			}

			partial void OnDuplicateGuidChanging(Guid value);
			partial void OnDuplicateGuidChanged();
			private Guid _DuplicateGuid;
			[Column(Storage="_DuplicateGuid", DbType="UniqueIdentifier", CanBeNull=false)]
			public  override Guid DuplicateGuid {
				get { return _DuplicateGuid; }
				set {
					if (_DuplicateGuid != value) {
						OnDuplicateGuidChanging(value);
						SendPropertyChanging();
						_DuplicateGuid = value;
						SendPropertyChanged("DuplicateGuid");
						OnDuplicateGuidChanged();
					}
				}
			}

			partial void OnChequeReferenceNumberChanging(string value);
			partial void OnChequeReferenceNumberChanged();
			private string _ChequeReferenceNumber;
			[Column(Storage="_ChequeReferenceNumber", DbType="VarChar(20)", CanBeNull=false)]
			public  override string ChequeReferenceNumber {
				get { return _ChequeReferenceNumber; }
				set {
					if (_ChequeReferenceNumber != value) {
						OnChequeReferenceNumberChanging(value);
						SendPropertyChanging();
						_ChequeReferenceNumber = value;
						SendPropertyChanged("ChequeReferenceNumber");
						OnChequeReferenceNumberChanged();
					}
				}
			}

			partial void OnCardDigitsChanging(int value);
			partial void OnCardDigitsChanged();
			private int _CardDigits;
			[Column(Storage="_CardDigits", DbType="Int", CanBeNull=false)]
			public  override int CardDigits {
				get { return _CardDigits; }
				set {
					if (_CardDigits != value) {
						OnCardDigitsChanging(value);
						SendPropertyChanging();
						_CardDigits = value;
						SendPropertyChanged("CardDigits");
						OnCardDigitsChanged();
					}
				}
			}

			partial void OnDSIBankAccountChanging(Model.Entities.Transfer.DSIBankAccounts value);
			partial void OnDSIBankAccountChanged();
			private Model.Entities.Transfer.DSIBankAccounts _DSIBankAccount;
			[Column(Storage="_DSIBankAccount", DbType="Int", CanBeNull=false)]
			public  override Model.Entities.Transfer.DSIBankAccounts DSIBankAccount {
				get { return _DSIBankAccount; }
				set {
					if (_DSIBankAccount != value) {
						OnDSIBankAccountChanging(value);
						SendPropertyChanging();
						_DSIBankAccount = value;
						SendPropertyChanged("DSIBankAccount");
						OnDSIBankAccountChanged();
					}
				}
			}

			partial void OnCardAddressAreaChanging(string value);
			partial void OnCardAddressAreaChanged();
			private string _CardAddressArea;
			[Column(Storage="_CardAddressArea", DbType="VarChar(50)", CanBeNull=false)]
			public  override string CardAddressArea {
				get { return _CardAddressArea; }
				set {
					if (_CardAddressArea != value) {
						OnCardAddressAreaChanging(value);
						SendPropertyChanging();
						_CardAddressArea = value;
						SendPropertyChanged("CardAddressArea");
						OnCardAddressAreaChanged();
					}
				}
			}

			partial void OnCardAddressTownChanging(string value);
			partial void OnCardAddressTownChanged();
			private string _CardAddressTown;
			[Column(Storage="_CardAddressTown", DbType="VarChar(50)", CanBeNull=false)]
			public  override string CardAddressTown {
				get { return _CardAddressTown; }
				set {
					if (_CardAddressTown != value) {
						OnCardAddressTownChanging(value);
						SendPropertyChanging();
						_CardAddressTown = value;
						SendPropertyChanged("CardAddressTown");
						OnCardAddressTownChanged();
					}
				}
			}

			partial void OnCardAddressCountyChanging(string value);
			partial void OnCardAddressCountyChanged();
			private string _CardAddressCounty;
			[Column(Storage="_CardAddressCounty", DbType="VarChar(50)", CanBeNull=false)]
			public  override string CardAddressCounty {
				get { return _CardAddressCounty; }
				set {
					if (_CardAddressCounty != value) {
						OnCardAddressCountyChanging(value);
						SendPropertyChanging();
						_CardAddressCounty = value;
						SendPropertyChanged("CardAddressCounty");
						OnCardAddressCountyChanged();
					}
				}
			}

			partial void OnCardAddressCountryKChanging(int value);
			partial void OnCardAddressCountryKChanged();
			private int _CardAddressCountryK;
			[Column(Storage="_CardAddressCountryK", DbType="Int", CanBeNull=false)]
			public  override int CardAddressCountryK {
				get { return _CardAddressCountryK; }
				set {
					if (_CardAddressCountryK != value) {
						OnCardAddressCountryKChanging(value);
						SendPropertyChanging();
						_CardAddressCountryK = value;
						SendPropertyChanged("CardAddressCountryK");
						OnCardAddressCountryKChanged();
					}
				}
			}

			partial void OnCompanyChanging(Model.Entities.Transfer.CompanyEnum value);
			partial void OnCompanyChanged();
			private Model.Entities.Transfer.CompanyEnum _Company;
			[Column(Storage="_Company", DbType="Int NOT NULL", CanBeNull=false)]
			public  override Model.Entities.Transfer.CompanyEnum Company {
				get { return _Company; }
				set {
					if (_Company != value) {
						OnCompanyChanging(value);
						SendPropertyChanging();
						_Company = value;
						SendPropertyChanged("Company");
						OnCompanyChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.Usr")]
 		public partial class Usr : Model.Entities.Usr, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public Usr()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnKChanging(int value);
			partial void OnKChanged();
			private int _K;
			[Column(Storage="_K", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
			public  override int K {
				get { return _K; }
				set {
					if (_K != value) {
						OnKChanging(value);
						SendPropertyChanging();
						_K = value;
						SendPropertyChanged("K");
						OnKChanged();
					}
				}
			}

			partial void OnEmailChanging(string value);
			partial void OnEmailChanged();
			private string _Email;
			[Column(Storage="_Email", DbType="VarChar(100)", CanBeNull=false)]
			public  override string Email {
				get { return _Email; }
				set {
					if (_Email != value) {
						OnEmailChanging(value);
						SendPropertyChanging();
						_Email = value;
						SendPropertyChanged("Email");
						OnEmailChanged();
					}
				}
			}

			partial void OnPasswordChanging(string value);
			partial void OnPasswordChanged();
			private string _Password;
			[Column(Storage="_Password", DbType="VarChar(50)", CanBeNull=false)]
			public  override string Password {
				get { return _Password; }
				set {
					if (_Password != value) {
						OnPasswordChanging(value);
						SendPropertyChanging();
						_Password = value;
						SendPropertyChanged("Password");
						OnPasswordChanged();
					}
				}
			}

			partial void OnLoginCountChanging(int value);
			partial void OnLoginCountChanged();
			private int _LoginCount;
			[Column(Storage="_LoginCount", DbType="Int", CanBeNull=false)]
			public  override int LoginCount {
				get { return _LoginCount; }
				set {
					if (_LoginCount != value) {
						OnLoginCountChanging(value);
						SendPropertyChanging();
						_LoginCount = value;
						SendPropertyChanged("LoginCount");
						OnLoginCountChanged();
					}
				}
			}

			partial void OnIsAdminChanging(bool value);
			partial void OnIsAdminChanged();
			private bool _IsAdmin;
			[Column(Storage="_IsAdmin", DbType="Bit", CanBeNull=false)]
			public  override bool IsAdmin {
				get { return _IsAdmin; }
				set {
					if (_IsAdmin != value) {
						OnIsAdminChanging(value);
						SendPropertyChanging();
						_IsAdmin = value;
						SendPropertyChanged("IsAdmin");
						OnIsAdminChanged();
					}
				}
			}

			partial void OnIsEmailVerifiedChanging(bool value);
			partial void OnIsEmailVerifiedChanged();
			private bool _IsEmailVerified;
			[Column(Storage="_IsEmailVerified", DbType="Bit", CanBeNull=false)]
			public  override bool IsEmailVerified {
				get { return _IsEmailVerified; }
				set {
					if (_IsEmailVerified != value) {
						OnIsEmailVerifiedChanging(value);
						SendPropertyChanging();
						_IsEmailVerified = value;
						SendPropertyChanged("IsEmailVerified");
						OnIsEmailVerifiedChanged();
					}
				}
			}

			partial void OnPicChanging(Guid value);
			partial void OnPicChanged();
			private Guid _Pic;
			[Column(Storage="_Pic", DbType="UniqueIdentifier", CanBeNull=false)]
			public  override Guid Pic {
				get { return _Pic; }
				set {
					if (_Pic != value) {
						OnPicChanging(value);
						SendPropertyChanging();
						_Pic = value;
						SendPropertyChanged("Pic");
						OnPicChanged();
					}
				}
			}

			partial void OnPicOriginalChanging(Guid value);
			partial void OnPicOriginalChanged();
			private Guid _PicOriginal;
			[Column(Storage="_PicOriginal", DbType="UniqueIdentifier", CanBeNull=false)]
			public  override Guid PicOriginal {
				get { return _PicOriginal; }
				set {
					if (_PicOriginal != value) {
						OnPicOriginalChanging(value);
						SendPropertyChanging();
						_PicOriginal = value;
						SendPropertyChanged("PicOriginal");
						OnPicOriginalChanged();
					}
				}
			}

			partial void OnFirstNameChanging(string value);
			partial void OnFirstNameChanged();
			private string _FirstName;
			[Column(Storage="_FirstName", DbType="VarChar(100)", CanBeNull=false)]
			public  override string FirstName {
				get { return _FirstName; }
				set {
					if (_FirstName != value) {
						OnFirstNameChanging(value);
						SendPropertyChanging();
						_FirstName = value;
						SendPropertyChanged("FirstName");
						OnFirstNameChanged();
					}
				}
			}

			partial void OnLastNameChanging(string value);
			partial void OnLastNameChanged();
			private string _LastName;
			[Column(Storage="_LastName", DbType="VarChar(100)", CanBeNull=false)]
			public  override string LastName {
				get { return _LastName; }
				set {
					if (_LastName != value) {
						OnLastNameChanging(value);
						SendPropertyChanging();
						_LastName = value;
						SendPropertyChanged("LastName");
						OnLastNameChanged();
					}
				}
			}

			partial void OnNickNameChanging(string value);
			partial void OnNickNameChanged();
			private string _NickName;
			[Column(Storage="_NickName", DbType="VarChar(100)", CanBeNull=false)]
			public  override string NickName {
				get { return _NickName; }
				set {
					if (_NickName != value) {
						OnNickNameChanging(value);
						SendPropertyChanging();
						_NickName = value;
						SendPropertyChanged("NickName");
						OnNickNameChanged();
					}
				}
			}

			partial void OnMobileChanging(string value);
			partial void OnMobileChanged();
			private string _Mobile;
			[Column(Storage="_Mobile", DbType="VarChar(50)", CanBeNull=false)]
			public  override string Mobile {
				get { return _Mobile; }
				set {
					if (_Mobile != value) {
						OnMobileChanging(value);
						SendPropertyChanging();
						_Mobile = value;
						SendPropertyChanged("Mobile");
						OnMobileChanged();
					}
				}
			}

			partial void OnMobileCountryCodeChanging(string value);
			partial void OnMobileCountryCodeChanged();
			private string _MobileCountryCode;
			[Column(Storage="_MobileCountryCode", DbType="VarChar(3)", CanBeNull=false)]
			public  override string MobileCountryCode {
				get { return _MobileCountryCode; }
				set {
					if (_MobileCountryCode != value) {
						OnMobileCountryCodeChanging(value);
						SendPropertyChanging();
						_MobileCountryCode = value;
						SendPropertyChanged("MobileCountryCode");
						OnMobileCountryCodeChanged();
					}
				}
			}

			partial void OnMobileNumberChanging(string value);
			partial void OnMobileNumberChanged();
			private string _MobileNumber;
			[Column(Storage="_MobileNumber", DbType="VarChar(50)", CanBeNull=false)]
			public  override string MobileNumber {
				get { return _MobileNumber; }
				set {
					if (_MobileNumber != value) {
						OnMobileNumberChanging(value);
						SendPropertyChanging();
						_MobileNumber = value;
						SendPropertyChanged("MobileNumber");
						OnMobileNumberChanged();
					}
				}
			}

			partial void OnSendSpottedEmailsChanging(bool value);
			partial void OnSendSpottedEmailsChanged();
			private bool _SendSpottedEmails;
			[Column(Storage="_SendSpottedEmails", DbType="Bit", CanBeNull=false)]
			public  override bool SendSpottedEmails {
				get { return _SendSpottedEmails; }
				set {
					if (_SendSpottedEmails != value) {
						OnSendSpottedEmailsChanging(value);
						SendPropertyChanging();
						_SendSpottedEmails = value;
						SendPropertyChanged("SendSpottedEmails");
						OnSendSpottedEmailsChanged();
					}
				}
			}

			partial void OnSendSpottedTextsChanging(bool value);
			partial void OnSendSpottedTextsChanged();
			private bool _SendSpottedTexts;
			[Column(Storage="_SendSpottedTexts", DbType="Bit", CanBeNull=false)]
			public  override bool SendSpottedTexts {
				get { return _SendSpottedTexts; }
				set {
					if (_SendSpottedTexts != value) {
						OnSendSpottedTextsChanging(value);
						SendPropertyChanging();
						_SendSpottedTexts = value;
						SendPropertyChanged("SendSpottedTexts");
						OnSendSpottedTextsChanged();
					}
				}
			}

			partial void OnSendPartnerEmailsChanging(bool value);
			partial void OnSendPartnerEmailsChanged();
			private bool _SendPartnerEmails;
			[Column(Storage="_SendPartnerEmails", DbType="Bit", CanBeNull=false)]
			public  override bool SendPartnerEmails {
				get { return _SendPartnerEmails; }
				set {
					if (_SendPartnerEmails != value) {
						OnSendPartnerEmailsChanging(value);
						SendPropertyChanging();
						_SendPartnerEmails = value;
						SendPropertyChanged("SendPartnerEmails");
						OnSendPartnerEmailsChanged();
					}
				}
			}

			partial void OnSendPartnerTextsChanging(bool value);
			partial void OnSendPartnerTextsChanged();
			private bool _SendPartnerTexts;
			[Column(Storage="_SendPartnerTexts", DbType="Bit", CanBeNull=false)]
			public  override bool SendPartnerTexts {
				get { return _SendPartnerTexts; }
				set {
					if (_SendPartnerTexts != value) {
						OnSendPartnerTextsChanging(value);
						SendPropertyChanging();
						_SendPartnerTexts = value;
						SendPropertyChanged("SendPartnerTexts");
						OnSendPartnerTextsChanged();
					}
				}
			}

			partial void OnUpdateDataChanging(string value);
			partial void OnUpdateDataChanged();
			private string _UpdateData;
			[Column(Storage="_UpdateData", DbType="VarChar(50)", CanBeNull=false)]
			public  override string UpdateData {
				get { return _UpdateData; }
				set {
					if (_UpdateData != value) {
						OnUpdateDataChanging(value);
						SendPropertyChanging();
						_UpdateData = value;
						SendPropertyChanged("UpdateData");
						OnUpdateDataChanged();
					}
				}
			}

			partial void OnAdminNoteChanging(string value);
			partial void OnAdminNoteChanged();
			private string _AdminNote;
			[Column(Storage="_AdminNote", DbType="Text", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
			public  override string AdminNote {
				get { return _AdminNote; }
				set {
					if (_AdminNote != value) {
						OnAdminNoteChanging(value);
						SendPropertyChanging();
						_AdminNote = value;
						SendPropertyChanged("AdminNote");
						OnAdminNoteChanged();
					}
				}
			}

			partial void OnDateTimeLastAccessChanging(DateTime value);
			partial void OnDateTimeLastAccessChanged();
			private DateTime _DateTimeLastAccess;
			[Column(Storage="_DateTimeLastAccess", DbType="DateTime", CanBeNull=false)]
			public  override DateTime DateTimeLastAccess {
				get { return _DateTimeLastAccess; }
				set {
					if (_DateTimeLastAccess != value) {
						OnDateTimeLastAccessChanging(value);
						SendPropertyChanging();
						_DateTimeLastAccess = value;
						SendPropertyChanged("DateTimeLastAccess");
						OnDateTimeLastAccessChanged();
					}
				}
			}

			partial void OnDateTimeSignUpChanging(DateTime value);
			partial void OnDateTimeSignUpChanged();
			private DateTime _DateTimeSignUp;
			[Column(Storage="_DateTimeSignUp", DbType="DateTime", CanBeNull=false)]
			public  override DateTime DateTimeSignUp {
				get { return _DateTimeSignUp; }
				set {
					if (_DateTimeSignUp != value) {
						OnDateTimeSignUpChanging(value);
						SendPropertyChanging();
						_DateTimeSignUp = value;
						SendPropertyChanged("DateTimeSignUp");
						OnDateTimeSignUpChanged();
					}
				}
			}

			partial void OnDateTimeLastPageRequestChanging(DateTime value);
			partial void OnDateTimeLastPageRequestChanged();
			private DateTime _DateTimeLastPageRequest;
			[Column(Storage="_DateTimeLastPageRequest", DbType="DateTime", CanBeNull=false)]
			public  override DateTime DateTimeLastPageRequest {
				get { return _DateTimeLastPageRequest; }
				set {
					if (_DateTimeLastPageRequest != value) {
						OnDateTimeLastPageRequestChanging(value);
						SendPropertyChanging();
						_DateTimeLastPageRequest = value;
						SendPropertyChanged("DateTimeLastPageRequest");
						OnDateTimeLastPageRequestChanged();
					}
				}
			}

			partial void OnPrefsTextChanging(string value);
			partial void OnPrefsTextChanged();
			private string _PrefsText;
			[Column(Storage="_PrefsText", DbType="Text", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
			public  override string PrefsText {
				get { return _PrefsText; }
				set {
					if (_PrefsText != value) {
						OnPrefsTextChanging(value);
						SendPropertyChanging();
						_PrefsText = value;
						SendPropertyChanged("PrefsText");
						OnPrefsTextChanged();
					}
				}
			}

			partial void OnLoginStringChanging(string value);
			partial void OnLoginStringChanged();
			private string _LoginString;
			[Column(Storage="_LoginString", DbType="Char(6)", CanBeNull=false)]
			public  override string LoginString {
				get { return _LoginString; }
				set {
					if (_LoginString != value) {
						OnLoginStringChanging(value);
						SendPropertyChanging();
						_LoginString = value;
						SendPropertyChanged("LoginString");
						OnLoginStringChanged();
					}
				}
			}

			partial void OnPersonalStatementChanging(string value);
			partial void OnPersonalStatementChanged();
			private string _PersonalStatement;
			[Column(Storage="_PersonalStatement", DbType="Text", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
			public  override string PersonalStatement {
				get { return _PersonalStatement; }
				set {
					if (_PersonalStatement != value) {
						OnPersonalStatementChanging(value);
						SendPropertyChanging();
						_PersonalStatement = value;
						SendPropertyChanged("PersonalStatement");
						OnPersonalStatementChanged();
					}
				}
			}

			partial void OnAddedByUsrKChanging(int value);
			partial void OnAddedByUsrKChanged();
			private int _AddedByUsrK;
			[Column(Storage="_AddedByUsrK", DbType="Int", CanBeNull=false)]
			public  override int AddedByUsrK {
				get { return _AddedByUsrK; }
				set {
					if (_AddedByUsrK != value) {
						OnAddedByUsrKChanging(value);
						SendPropertyChanging();
						_AddedByUsrK = value;
						SendPropertyChanged("AddedByUsrK");
						OnAddedByUsrKChanged();
					}
				}
			}

			partial void OnAdminLevelChanging(Model.Entities.Usr.AdminLevels value);
			partial void OnAdminLevelChanged();
			private Model.Entities.Usr.AdminLevels _AdminLevel;
			[Column(Storage="_AdminLevel", DbType="Int", CanBeNull=false)]
			public  override Model.Entities.Usr.AdminLevels AdminLevel {
				get { return _AdminLevel; }
				set {
					if (_AdminLevel != value) {
						OnAdminLevelChanging(value);
						SendPropertyChanging();
						_AdminLevel = value;
						SendPropertyChanged("AdminLevel");
						OnAdminLevelChanged();
					}
				}
			}

			partial void OnRandomNumberChanging(double value);
			partial void OnRandomNumberChanged();
			private double _RandomNumber;
			[Column(Storage="_RandomNumber", DbType="Float", CanBeNull=false)]
			public  override double RandomNumber {
				get { return _RandomNumber; }
				set {
					if (_RandomNumber != value) {
						OnRandomNumberChanging(value);
						SendPropertyChanging();
						_RandomNumber = value;
						SendPropertyChanged("RandomNumber");
						OnRandomNumberChanged();
					}
				}
			}

			partial void OnLastPrivateCommentChanging(DateTime value);
			partial void OnLastPrivateCommentChanged();
			private DateTime _LastPrivateComment;
			[Column(Storage="_LastPrivateComment", DbType="DateTime", CanBeNull=false)]
			public  override DateTime LastPrivateComment {
				get { return _LastPrivateComment; }
				set {
					if (_LastPrivateComment != value) {
						OnLastPrivateCommentChanging(value);
						SendPropertyChanging();
						_LastPrivateComment = value;
						SendPropertyChanged("LastPrivateComment");
						OnLastPrivateCommentChanged();
					}
				}
			}

			partial void OnLastPrivateChatMessageChanging(DateTime value);
			partial void OnLastPrivateChatMessageChanged();
			private DateTime _LastPrivateChatMessage;
			[Column(Storage="_LastPrivateChatMessage", DbType="DateTime", CanBeNull=false)]
			public  override DateTime LastPrivateChatMessage {
				get { return _LastPrivateChatMessage; }
				set {
					if (_LastPrivateChatMessage != value) {
						OnLastPrivateChatMessageChanging(value);
						SendPropertyChanging();
						_LastPrivateChatMessage = value;
						SendPropertyChanged("LastPrivateChatMessage");
						OnLastPrivateChatMessageChanged();
					}
				}
			}

			partial void OnIsSingleChanging(bool value);
			partial void OnIsSingleChanged();
			private bool _IsSingle;
			[Column(Storage="_IsSingle", DbType="Bit", CanBeNull=false)]
			public  override bool IsSingle {
				get { return _IsSingle; }
				set {
					if (_IsSingle != value) {
						OnIsSingleChanging(value);
						SendPropertyChanging();
						_IsSingle = value;
						SendPropertyChanged("IsSingle");
						OnIsSingleChanged();
					}
				}
			}

			partial void OnIsMaleChanging(bool value);
			partial void OnIsMaleChanged();
			private bool _IsMale;
			[Column(Storage="_IsMale", DbType="Bit", CanBeNull=false)]
			public  override bool IsMale {
				get { return _IsMale; }
				set {
					if (_IsMale != value) {
						OnIsMaleChanging(value);
						SendPropertyChanging();
						_IsMale = value;
						SendPropertyChanged("IsMale");
						OnIsMaleChanged();
					}
				}
			}

			partial void OnIsFemaleChanging(bool value);
			partial void OnIsFemaleChanged();
			private bool _IsFemale;
			[Column(Storage="_IsFemale", DbType="Bit", CanBeNull=false)]
			public  override bool IsFemale {
				get { return _IsFemale; }
				set {
					if (_IsFemale != value) {
						OnIsFemaleChanging(value);
						SendPropertyChanging();
						_IsFemale = value;
						SendPropertyChanged("IsFemale");
						OnIsFemaleChanged();
					}
				}
			}

			partial void OnDateOfBirthChanging(DateTime value);
			partial void OnDateOfBirthChanged();
			private DateTime _DateOfBirth;
			[Column(Storage="_DateOfBirth", DbType="DateTime", CanBeNull=false)]
			public  override DateTime DateOfBirth {
				get { return _DateOfBirth; }
				set {
					if (_DateOfBirth != value) {
						OnDateOfBirthChanging(value);
						SendPropertyChanging();
						_DateOfBirth = value;
						SendPropertyChanged("DateOfBirth");
						OnDateOfBirthChanged();
					}
				}
			}

			partial void OnDateSexMaleChanging(bool value);
			partial void OnDateSexMaleChanged();
			private bool _DateSexMale;
			[Column(Storage="_DateSexMale", DbType="Bit", CanBeNull=false)]
			public  override bool DateSexMale {
				get { return _DateSexMale; }
				set {
					if (_DateSexMale != value) {
						OnDateSexMaleChanging(value);
						SendPropertyChanging();
						_DateSexMale = value;
						SendPropertyChanged("DateSexMale");
						OnDateSexMaleChanged();
					}
				}
			}

			partial void OnDateSexFemaleChanging(bool value);
			partial void OnDateSexFemaleChanged();
			private bool _DateSexFemale;
			[Column(Storage="_DateSexFemale", DbType="Bit", CanBeNull=false)]
			public  override bool DateSexFemale {
				get { return _DateSexFemale; }
				set {
					if (_DateSexFemale != value) {
						OnDateSexFemaleChanging(value);
						SendPropertyChanging();
						_DateSexFemale = value;
						SendPropertyChanged("DateSexFemale");
						OnDateSexFemaleChanged();
					}
				}
			}

			partial void OnDateAgeRangeLowChanging(int value);
			partial void OnDateAgeRangeLowChanged();
			private int _DateAgeRangeLow;
			[Column(Storage="_DateAgeRangeLow", DbType="Int", CanBeNull=false)]
			public  override int DateAgeRangeLow {
				get { return _DateAgeRangeLow; }
				set {
					if (_DateAgeRangeLow != value) {
						OnDateAgeRangeLowChanging(value);
						SendPropertyChanging();
						_DateAgeRangeLow = value;
						SendPropertyChanged("DateAgeRangeLow");
						OnDateAgeRangeLowChanged();
					}
				}
			}

			partial void OnDateAgeRangeHighChanging(int value);
			partial void OnDateAgeRangeHighChanged();
			private int _DateAgeRangeHigh;
			[Column(Storage="_DateAgeRangeHigh", DbType="Int", CanBeNull=false)]
			public  override int DateAgeRangeHigh {
				get { return _DateAgeRangeHigh; }
				set {
					if (_DateAgeRangeHigh != value) {
						OnDateAgeRangeHighChanging(value);
						SendPropertyChanging();
						_DateAgeRangeHigh = value;
						SendPropertyChanged("DateAgeRangeHigh");
						OnDateAgeRangeHighChanged();
					}
				}
			}

			partial void OnRelationship1Changing(bool value);
			partial void OnRelationship1Changed();
			private bool _Relationship1;
			[Column(Storage="_Relationship1", DbType="Bit", CanBeNull=false)]
			public  override bool Relationship1 {
				get { return _Relationship1; }
				set {
					if (_Relationship1 != value) {
						OnRelationship1Changing(value);
						SendPropertyChanging();
						_Relationship1 = value;
						SendPropertyChanged("Relationship1");
						OnRelationship1Changed();
					}
				}
			}

			partial void OnRelationship2Changing(bool value);
			partial void OnRelationship2Changed();
			private bool _Relationship2;
			[Column(Storage="_Relationship2", DbType="Bit", CanBeNull=false)]
			public  override bool Relationship2 {
				get { return _Relationship2; }
				set {
					if (_Relationship2 != value) {
						OnRelationship2Changing(value);
						SendPropertyChanging();
						_Relationship2 = value;
						SendPropertyChanged("Relationship2");
						OnRelationship2Changed();
					}
				}
			}

			partial void OnRelationship3Changing(bool value);
			partial void OnRelationship3Changed();
			private bool _Relationship3;
			[Column(Storage="_Relationship3", DbType="Bit", CanBeNull=false)]
			public  override bool Relationship3 {
				get { return _Relationship3; }
				set {
					if (_Relationship3 != value) {
						OnRelationship3Changing(value);
						SendPropertyChanging();
						_Relationship3 = value;
						SendPropertyChanged("Relationship3");
						OnRelationship3Changed();
					}
				}
			}

			partial void OnSexHelperMaleChanging(bool value);
			partial void OnSexHelperMaleChanged();
			private bool _SexHelperMale;
			[Column(Storage="_SexHelperMale", DbType="Bit", CanBeNull=false)]
			public  override bool SexHelperMale {
				get { return _SexHelperMale; }
				set {
					if (_SexHelperMale != value) {
						OnSexHelperMaleChanging(value);
						SendPropertyChanging();
						_SexHelperMale = value;
						SendPropertyChanged("SexHelperMale");
						OnSexHelperMaleChanged();
					}
				}
			}

			partial void OnSexHelperFemaleChanging(bool value);
			partial void OnSexHelperFemaleChanged();
			private bool _SexHelperFemale;
			[Column(Storage="_SexHelperFemale", DbType="Bit", CanBeNull=false)]
			public  override bool SexHelperFemale {
				get { return _SexHelperFemale; }
				set {
					if (_SexHelperFemale != value) {
						OnSexHelperFemaleChanging(value);
						SendPropertyChanging();
						_SexHelperFemale = value;
						SendPropertyChanged("SexHelperFemale");
						OnSexHelperFemaleChanged();
					}
				}
			}

			partial void OnBuddyCountChanging(int value);
			partial void OnBuddyCountChanged();
			private int _BuddyCount;
			[Column(Storage="_BuddyCount", DbType="Int", CanBeNull=false)]
			public  override int BuddyCount {
				get { return _BuddyCount; }
				set {
					if (_BuddyCount != value) {
						OnBuddyCountChanging(value);
						SendPropertyChanging();
						_BuddyCount = value;
						SendPropertyChanged("BuddyCount");
						OnBuddyCountChanged();
					}
				}
			}

			partial void OnChatMessageCountChanging(int value);
			partial void OnChatMessageCountChanged();
			private int _ChatMessageCount;
			[Column(Storage="_ChatMessageCount", DbType="Int", CanBeNull=false)]
			public  override int ChatMessageCount {
				get { return _ChatMessageCount; }
				set {
					if (_ChatMessageCount != value) {
						OnChatMessageCountChanging(value);
						SendPropertyChanging();
						_ChatMessageCount = value;
						SendPropertyChanged("ChatMessageCount");
						OnChatMessageCountChanged();
					}
				}
			}

			partial void OnCommentCountChanging(int value);
			partial void OnCommentCountChanged();
			private int _CommentCount;
			[Column(Storage="_CommentCount", DbType="Int", CanBeNull=false)]
			public  override int CommentCount {
				get { return _CommentCount; }
				set {
					if (_CommentCount != value) {
						OnCommentCountChanging(value);
						SendPropertyChanging();
						_CommentCount = value;
						SendPropertyChanged("CommentCount");
						OnCommentCountChanged();
					}
				}
			}

			partial void OnEventCountChanging(int value);
			partial void OnEventCountChanged();
			private int _EventCount;
			[Column(Storage="_EventCount", DbType="Int", CanBeNull=false)]
			public  override int EventCount {
				get { return _EventCount; }
				set {
					if (_EventCount != value) {
						OnEventCountChanging(value);
						SendPropertyChanging();
						_EventCount = value;
						SendPropertyChanged("EventCount");
						OnEventCountChanged();
					}
				}
			}

			partial void OnHomePlaceKChanging(int value);
			partial void OnHomePlaceKChanged();
			private int _HomePlaceK;
			[Column(Storage="_HomePlaceK", DbType="Int", CanBeNull=false)]
			public  override int HomePlaceK {
				get { return _HomePlaceK; }
				set {
					if (_HomePlaceK != value) {
						OnHomePlaceKChanging(value);
						SendPropertyChanging();
						_HomePlaceK = value;
						SendPropertyChanged("HomePlaceK");
						OnHomePlaceKChanged();
					}
				}
			}

			partial void OnAgreeTermsChanging(bool value);
			partial void OnAgreeTermsChanged();
			private bool _AgreeTerms;
			[Column(Storage="_AgreeTerms", DbType="Bit", CanBeNull=false)]
			public  override bool AgreeTerms {
				get { return _AgreeTerms; }
				set {
					if (_AgreeTerms != value) {
						OnAgreeTermsChanging(value);
						SendPropertyChanging();
						_AgreeTerms = value;
						SendPropertyChanged("AgreeTerms");
						OnAgreeTermsChanged();
					}
				}
			}

			partial void OnGuestClientKChanging(int value);
			partial void OnGuestClientKChanged();
			private int _GuestClientK;
			[Column(Storage="_GuestClientK", DbType="Int", CanBeNull=false)]
			public  override int GuestClientK {
				get { return _GuestClientK; }
				set {
					if (_GuestClientK != value) {
						OnGuestClientKChanging(value);
						SendPropertyChanging();
						_GuestClientK = value;
						SendPropertyChanged("GuestClientK");
						OnGuestClientKChanged();
					}
				}
			}

			partial void OnFavouriteMusicTypeKChanging(int value);
			partial void OnFavouriteMusicTypeKChanged();
			private int _FavouriteMusicTypeK;
			[Column(Storage="_FavouriteMusicTypeK", DbType="Int", CanBeNull=false)]
			public  override int FavouriteMusicTypeK {
				get { return _FavouriteMusicTypeK; }
				set {
					if (_FavouriteMusicTypeK != value) {
						OnFavouriteMusicTypeKChanging(value);
						SendPropertyChanging();
						_FavouriteMusicTypeK = value;
						SendPropertyChanged("FavouriteMusicTypeK");
						OnFavouriteMusicTypeKChanged();
					}
				}
			}

			partial void OnTotalLolChanging(int value);
			partial void OnTotalLolChanged();
			private int _TotalLol;
			[Column(Storage="_TotalLol", DbType="Int", CanBeNull=false)]
			public  override int TotalLol {
				get { return _TotalLol; }
				set {
					if (_TotalLol != value) {
						OnTotalLolChanging(value);
						SendPropertyChanging();
						_TotalLol = value;
						SendPropertyChanged("TotalLol");
						OnTotalLolChanged();
					}
				}
			}

			partial void OnTotalMadeLolChanging(int value);
			partial void OnTotalMadeLolChanged();
			private int _TotalMadeLol;
			[Column(Storage="_TotalMadeLol", DbType="Int", CanBeNull=false)]
			public  override int TotalMadeLol {
				get { return _TotalMadeLol; }
				set {
					if (_TotalMadeLol != value) {
						OnTotalMadeLolChanging(value);
						SendPropertyChanging();
						_TotalMadeLol = value;
						SendPropertyChanged("TotalMadeLol");
						OnTotalMadeLolChanged();
					}
				}
			}

			partial void OnLastLolChanging(DateTime value);
			partial void OnLastLolChanged();
			private DateTime _LastLol;
			[Column(Storage="_LastLol", DbType="DateTime", CanBeNull=false)]
			public  override DateTime LastLol {
				get { return _LastLol; }
				set {
					if (_LastLol != value) {
						OnLastLolChanging(value);
						SendPropertyChanging();
						_LastLol = value;
						SendPropertyChanged("LastLol");
						OnLastLolChanged();
					}
				}
			}

			partial void OnUniqueMadeLolChanging(int value);
			partial void OnUniqueMadeLolChanged();
			private int _UniqueMadeLol;
			[Column(Storage="_UniqueMadeLol", DbType="Int", CanBeNull=false)]
			public  override int UniqueMadeLol {
				get { return _UniqueMadeLol; }
				set {
					if (_UniqueMadeLol != value) {
						OnUniqueMadeLolChanging(value);
						SendPropertyChanging();
						_UniqueMadeLol = value;
						SendPropertyChanged("UniqueMadeLol");
						OnUniqueMadeLolChanged();
					}
				}
			}

			partial void OnChatXmlChanging(string value);
			partial void OnChatXmlChanged();
			private string _ChatXml;
			[Column(Storage="_ChatXml", DbType="Text", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
			public  override string ChatXml {
				get { return _ChatXml; }
				set {
					if (_ChatXml != value) {
						OnChatXmlChanging(value);
						SendPropertyChanging();
						_ChatXml = value;
						SendPropertyChanged("ChatXml");
						OnChatXmlChanged();
					}
				}
			}

			partial void OnIsLoggedOnChanging(bool value);
			partial void OnIsLoggedOnChanged();
			private bool _IsLoggedOn;
			[Column(Storage="_IsLoggedOn", DbType="Bit", CanBeNull=false)]
			public  override bool IsLoggedOn {
				get { return _IsLoggedOn; }
				set {
					if (_IsLoggedOn != value) {
						OnIsLoggedOnChanging(value);
						SendPropertyChanging();
						_IsLoggedOn = value;
						SendPropertyChanged("IsLoggedOn");
						OnIsLoggedOnChanged();
					}
				}
			}

			partial void OnLastChatItemChanging(long value);
			partial void OnLastChatItemChanged();
			private long _LastChatItem;
			[Column(Storage="_LastChatItem", DbType="BigInt", CanBeNull=false)]
			public  override long LastChatItem {
				get { return _LastChatItem; }
				set {
					if (_LastChatItem != value) {
						OnLastChatItemChanging(value);
						SendPropertyChanging();
						_LastChatItem = value;
						SendPropertyChanged("LastChatItem");
						OnLastChatItemChanged();
					}
				}
			}

			partial void OnLastIpChanging(string value);
			partial void OnLastIpChanged();
			private string _LastIp;
			[Column(Storage="_LastIp", DbType="VarChar(50)", CanBeNull=false)]
			public  override string LastIp {
				get { return _LastIp; }
				set {
					if (_LastIp != value) {
						OnLastIpChanging(value);
						SendPropertyChanging();
						_LastIp = value;
						SendPropertyChanged("LastIp");
						OnLastIpChanged();
					}
				}
			}

			partial void OnIgnoreChanging(bool value);
			partial void OnIgnoreChanged();
			private bool _Ignore;
			[Column(Storage="_Ignore", DbType="Bit", CanBeNull=false)]
			public  override bool Ignore {
				get { return _Ignore; }
				set {
					if (_Ignore != value) {
						OnIgnoreChanging(value);
						SendPropertyChanging();
						_Ignore = value;
						SendPropertyChanged("Ignore");
						OnIgnoreChanged();
					}
				}
			}

			partial void OnIsProSpotterChanging(bool value);
			partial void OnIsProSpotterChanged();
			private bool _IsProSpotter;
			[Column(Storage="_IsProSpotter", DbType="Bit", CanBeNull=false)]
			public  override bool IsProSpotter {
				get { return _IsProSpotter; }
				set {
					if (_IsProSpotter != value) {
						OnIsProSpotterChanging(value);
						SendPropertyChanging();
						_IsProSpotter = value;
						SendPropertyChanged("IsProSpotter");
						OnIsProSpotterChanged();
					}
				}
			}

			partial void OnLastInviteChanging(int value);
			partial void OnLastInviteChanged();
			private int _LastInvite;
			[Column(Storage="_LastInvite", DbType="Int", CanBeNull=false)]
			public  override int LastInvite {
				get { return _LastInvite; }
				set {
					if (_LastInvite != value) {
						OnLastInviteChanging(value);
						SendPropertyChanging();
						_LastInvite = value;
						SendPropertyChanged("LastInvite");
						OnLastInviteChanged();
					}
				}
			}

			partial void OnIntroducedByUsrKChanging(int value);
			partial void OnIntroducedByUsrKChanged();
			private int _IntroducedByUsrK;
			[Column(Storage="_IntroducedByUsrK", DbType="Int", CanBeNull=false)]
			public  override int IntroducedByUsrK {
				get { return _IntroducedByUsrK; }
				set {
					if (_IntroducedByUsrK != value) {
						OnIntroducedByUsrKChanging(value);
						SendPropertyChanging();
						_IntroducedByUsrK = value;
						SendPropertyChanged("IntroducedByUsrK");
						OnIntroducedByUsrKChanged();
					}
				}
			}

			partial void OnSendFlyersChanging(bool value);
			partial void OnSendFlyersChanged();
			private bool _SendFlyers;
			[Column(Storage="_SendFlyers", DbType="Bit", CanBeNull=false)]
			public  override bool SendFlyers {
				get { return _SendFlyers; }
				set {
					if (_SendFlyers != value) {
						OnSendFlyersChanging(value);
						SendPropertyChanging();
						_SendFlyers = value;
						SendPropertyChanged("SendFlyers");
						OnSendFlyersChanged();
					}
				}
			}

			partial void OnSendInvitesChanging(bool value);
			partial void OnSendInvitesChanged();
			private bool _SendInvites;
			[Column(Storage="_SendInvites", DbType="Bit", CanBeNull=false)]
			public  override bool SendInvites {
				get { return _SendInvites; }
				set {
					if (_SendInvites != value) {
						OnSendInvitesChanging(value);
						SendPropertyChanging();
						_SendInvites = value;
						SendPropertyChanged("SendInvites");
						OnSendInvitesChanged();
					}
				}
			}

			partial void OnTotalPhotoUploadsChanging(int value);
			partial void OnTotalPhotoUploadsChanged();
			private int _TotalPhotoUploads;
			[Column(Storage="_TotalPhotoUploads", DbType="Int", CanBeNull=false)]
			public  override int TotalPhotoUploads {
				get { return _TotalPhotoUploads; }
				set {
					if (_TotalPhotoUploads != value) {
						OnTotalPhotoUploadsChanging(value);
						SendPropertyChanging();
						_TotalPhotoUploads = value;
						SendPropertyChanged("TotalPhotoUploads");
						OnTotalPhotoUploadsChanged();
					}
				}
			}

			partial void OnTempIntChanging(int value);
			partial void OnTempIntChanged();
			private int _TempInt;
			[Column(Storage="_TempInt", DbType="Int", CanBeNull=false)]
			public  override int TempInt {
				get { return _TempInt; }
				set {
					if (_TempInt != value) {
						OnTempIntChanging(value);
						SendPropertyChanging();
						_TempInt = value;
						SendPropertyChanged("TempInt");
						OnTempIntChanged();
					}
				}
			}

			partial void OnEnhancedSecurityChanging(bool value);
			partial void OnEnhancedSecurityChanged();
			private bool _EnhancedSecurity;
			[Column(Storage="_EnhancedSecurity", DbType="Bit", CanBeNull=false)]
			public  override bool EnhancedSecurity {
				get { return _EnhancedSecurity; }
				set {
					if (_EnhancedSecurity != value) {
						OnEnhancedSecurityChanging(value);
						SendPropertyChanging();
						_EnhancedSecurity = value;
						SendPropertyChanged("EnhancedSecurity");
						OnEnhancedSecurityChanged();
					}
				}
			}

			partial void OnAddressStreetChanging(string value);
			partial void OnAddressStreetChanged();
			private string _AddressStreet;
			[Column(Storage="_AddressStreet", DbType="VarChar(50)", CanBeNull=false)]
			public  override string AddressStreet {
				get { return _AddressStreet; }
				set {
					if (_AddressStreet != value) {
						OnAddressStreetChanging(value);
						SendPropertyChanging();
						_AddressStreet = value;
						SendPropertyChanged("AddressStreet");
						OnAddressStreetChanged();
					}
				}
			}

			partial void OnAddressAreaChanging(string value);
			partial void OnAddressAreaChanged();
			private string _AddressArea;
			[Column(Storage="_AddressArea", DbType="VarChar(50)", CanBeNull=false)]
			public  override string AddressArea {
				get { return _AddressArea; }
				set {
					if (_AddressArea != value) {
						OnAddressAreaChanging(value);
						SendPropertyChanging();
						_AddressArea = value;
						SendPropertyChanged("AddressArea");
						OnAddressAreaChanged();
					}
				}
			}

			partial void OnAddressTownChanging(string value);
			partial void OnAddressTownChanged();
			private string _AddressTown;
			[Column(Storage="_AddressTown", DbType="VarChar(50)", CanBeNull=false)]
			public  override string AddressTown {
				get { return _AddressTown; }
				set {
					if (_AddressTown != value) {
						OnAddressTownChanging(value);
						SendPropertyChanging();
						_AddressTown = value;
						SendPropertyChanged("AddressTown");
						OnAddressTownChanged();
					}
				}
			}

			partial void OnAddressCountyChanging(string value);
			partial void OnAddressCountyChanged();
			private string _AddressCounty;
			[Column(Storage="_AddressCounty", DbType="VarChar(50)", CanBeNull=false)]
			public  override string AddressCounty {
				get { return _AddressCounty; }
				set {
					if (_AddressCounty != value) {
						OnAddressCountyChanging(value);
						SendPropertyChanging();
						_AddressCounty = value;
						SendPropertyChanged("AddressCounty");
						OnAddressCountyChanged();
					}
				}
			}

			partial void OnAddressPostcodeChanging(string value);
			partial void OnAddressPostcodeChanged();
			private string _AddressPostcode;
			[Column(Storage="_AddressPostcode", DbType="VarChar(50)", CanBeNull=false)]
			public  override string AddressPostcode {
				get { return _AddressPostcode; }
				set {
					if (_AddressPostcode != value) {
						OnAddressPostcodeChanging(value);
						SendPropertyChanging();
						_AddressPostcode = value;
						SendPropertyChanged("AddressPostcode");
						OnAddressPostcodeChanged();
					}
				}
			}

			partial void OnAddressCountryKChanging(int value);
			partial void OnAddressCountryKChanged();
			private int _AddressCountryK;
			[Column(Storage="_AddressCountryK", DbType="Int", CanBeNull=false)]
			public  override int AddressCountryK {
				get { return _AddressCountryK; }
				set {
					if (_AddressCountryK != value) {
						OnAddressCountryKChanging(value);
						SendPropertyChanging();
						_AddressCountryK = value;
						SendPropertyChanged("AddressCountryK");
						OnAddressCountryKChanged();
					}
				}
			}

			partial void OnCardStatusChanging(Model.Entities.Usr.CardStatusEnum value);
			partial void OnCardStatusChanged();
			private Model.Entities.Usr.CardStatusEnum _CardStatus;
			[Column(Storage="_CardStatus", DbType="Int", CanBeNull=false)]
			public  override Model.Entities.Usr.CardStatusEnum CardStatus {
				get { return _CardStatus; }
				set {
					if (_CardStatus != value) {
						OnCardStatusChanging(value);
						SendPropertyChanging();
						_CardStatus = value;
						SendPropertyChanged("CardStatus");
						OnCardStatusChanged();
					}
				}
			}

			partial void OnTotalCardsSentChanging(int value);
			partial void OnTotalCardsSentChanged();
			private int _TotalCardsSent;
			[Column(Storage="_TotalCardsSent", DbType="Int", CanBeNull=false)]
			public  override int TotalCardsSent {
				get { return _TotalCardsSent; }
				set {
					if (_TotalCardsSent != value) {
						OnTotalCardsSentChanging(value);
						SendPropertyChanging();
						_TotalCardsSent = value;
						SendPropertyChanged("TotalCardsSent");
						OnTotalCardsSentChanged();
					}
				}
			}

			partial void OnIsSpotterChanging(bool value);
			partial void OnIsSpotterChanged();
			private bool _IsSpotter;
			[Column(Storage="_IsSpotter", DbType="Bit", CanBeNull=false)]
			public  override bool IsSpotter {
				get { return _IsSpotter; }
				set {
					if (_IsSpotter != value) {
						OnIsSpotterChanging(value);
						SendPropertyChanging();
						_IsSpotter = value;
						SendPropertyChanged("IsSpotter");
						OnIsSpotterChanged();
					}
				}
			}

			partial void OnBannedChanging(bool value);
			partial void OnBannedChanged();
			private bool _Banned;
			[Column(Storage="_Banned", DbType="Bit", CanBeNull=false)]
			public  override bool Banned {
				get { return _Banned; }
				set {
					if (_Banned != value) {
						OnBannedChanging(value);
						SendPropertyChanging();
						_Banned = value;
						SendPropertyChanged("Banned");
						OnBannedChanged();
					}
				}
			}

			partial void OnBannedByUsrKChanging(int value);
			partial void OnBannedByUsrKChanged();
			private int _BannedByUsrK;
			[Column(Storage="_BannedByUsrK", DbType="Int", CanBeNull=false)]
			public  override int BannedByUsrK {
				get { return _BannedByUsrK; }
				set {
					if (_BannedByUsrK != value) {
						OnBannedByUsrKChanging(value);
						SendPropertyChanging();
						_BannedByUsrK = value;
						SendPropertyChanged("BannedByUsrK");
						OnBannedByUsrKChanged();
					}
				}
			}

			partial void OnBannedDateTimeChanging(DateTime value);
			partial void OnBannedDateTimeChanged();
			private DateTime _BannedDateTime;
			[Column(Storage="_BannedDateTime", DbType="DateTime", CanBeNull=false)]
			public  override DateTime BannedDateTime {
				get { return _BannedDateTime; }
				set {
					if (_BannedDateTime != value) {
						OnBannedDateTimeChanging(value);
						SendPropertyChanging();
						_BannedDateTime = value;
						SendPropertyChanged("BannedDateTime");
						OnBannedDateTimeChanged();
					}
				}
			}

			partial void OnBannedReasonChanging(string value);
			partial void OnBannedReasonChanged();
			private string _BannedReason;
			[Column(Storage="_BannedReason", DbType="VarChar(50)", CanBeNull=false)]
			public  override string BannedReason {
				get { return _BannedReason; }
				set {
					if (_BannedReason != value) {
						OnBannedReasonChanging(value);
						SendPropertyChanging();
						_BannedReason = value;
						SendPropertyChanged("BannedReason");
						OnBannedReasonChanged();
					}
				}
			}

			partial void OnUpdateSendGenericMusicChanging(bool value);
			partial void OnUpdateSendGenericMusicChanged();
			private bool _UpdateSendGenericMusic;
			[Column(Storage="_UpdateSendGenericMusic", DbType="Bit", CanBeNull=false)]
			public  override bool UpdateSendGenericMusic {
				get { return _UpdateSendGenericMusic; }
				set {
					if (_UpdateSendGenericMusic != value) {
						OnUpdateSendGenericMusicChanging(value);
						SendPropertyChanging();
						_UpdateSendGenericMusic = value;
						SendPropertyChanged("UpdateSendGenericMusic");
						OnUpdateSendGenericMusicChanged();
					}
				}
			}

			partial void OnUpdateLargeEventsChanging(int value);
			partial void OnUpdateLargeEventsChanged();
			private int _UpdateLargeEvents;
			[Column(Storage="_UpdateLargeEvents", DbType="Int", CanBeNull=false)]
			public  override int UpdateLargeEvents {
				get { return _UpdateLargeEvents; }
				set {
					if (_UpdateLargeEvents != value) {
						OnUpdateLargeEventsChanging(value);
						SendPropertyChanging();
						_UpdateLargeEvents = value;
						SendPropertyChanged("UpdateLargeEvents");
						OnUpdateLargeEventsChanged();
					}
				}
			}

			partial void OnUpdateSendBuddiesChanging(bool value);
			partial void OnUpdateSendBuddiesChanged();
			private bool _UpdateSendBuddies;
			[Column(Storage="_UpdateSendBuddies", DbType="Bit", CanBeNull=false)]
			public  override bool UpdateSendBuddies {
				get { return _UpdateSendBuddies; }
				set {
					if (_UpdateSendBuddies != value) {
						OnUpdateSendBuddiesChanging(value);
						SendPropertyChanging();
						_UpdateSendBuddies = value;
						SendPropertyChanged("UpdateSendBuddies");
						OnUpdateSendBuddiesChanged();
					}
				}
			}

			partial void OnPicStateChanging(string value);
			partial void OnPicStateChanged();
			private string _PicState;
			[Column(Storage="_PicState", DbType="VarChar(100)", CanBeNull=false)]
			public  override string PicState {
				get { return _PicState; }
				set {
					if (_PicState != value) {
						OnPicStateChanging(value);
						SendPropertyChanging();
						_PicState = value;
						SendPropertyChanged("PicState");
						OnPicStateChanged();
					}
				}
			}

			partial void OnPicPhotoKChanging(int value);
			partial void OnPicPhotoKChanged();
			private int _PicPhotoK;
			[Column(Storage="_PicPhotoK", DbType="Int", CanBeNull=false)]
			public  override int PicPhotoK {
				get { return _PicPhotoK; }
				set {
					if (_PicPhotoK != value) {
						OnPicPhotoKChanging(value);
						SendPropertyChanging();
						_PicPhotoK = value;
						SendPropertyChanged("PicPhotoK");
						OnPicPhotoKChanged();
					}
				}
			}

			partial void OnPicMiscKChanging(int value);
			partial void OnPicMiscKChanged();
			private int _PicMiscK;
			[Column(Storage="_PicMiscK", DbType="Int", CanBeNull=false)]
			public  override int PicMiscK {
				get { return _PicMiscK; }
				set {
					if (_PicMiscK != value) {
						OnPicMiscKChanging(value);
						SendPropertyChanging();
						_PicMiscK = value;
						SendPropertyChanged("PicMiscK");
						OnPicMiscKChanged();
					}
				}
			}

			partial void OnIsChattingChanging(bool value);
			partial void OnIsChattingChanged();
			private bool _IsChatting;
			[Column(Storage="_IsChatting", DbType="Bit", CanBeNull=false)]
			public  override bool IsChatting {
				get { return _IsChatting; }
				set {
					if (_IsChatting != value) {
						OnIsChattingChanging(value);
						SendPropertyChanging();
						_IsChatting = value;
						SendPropertyChanged("IsChatting");
						OnIsChattingChanged();
					}
				}
			}

			partial void OnLastBuddyChangeChanging(DateTime value);
			partial void OnLastBuddyChangeChanged();
			private DateTime _LastBuddyChange;
			[Column(Storage="_LastBuddyChange", DbType="DateTime", CanBeNull=false)]
			public  override DateTime LastBuddyChange {
				get { return _LastBuddyChange; }
				set {
					if (_LastBuddyChange != value) {
						OnLastBuddyChangeChanging(value);
						SendPropertyChanging();
						_LastBuddyChange = value;
						SendPropertyChanged("LastBuddyChange");
						OnLastBuddyChangeChanged();
					}
				}
			}

			partial void OnNewsModeratorChanging(bool value);
			partial void OnNewsModeratorChanged();
			private bool _NewsModerator;
			[Column(Storage="_NewsModerator", DbType="Bit", CanBeNull=false)]
			public  override bool NewsModerator {
				get { return _NewsModerator; }
				set {
					if (_NewsModerator != value) {
						OnNewsModeratorChanging(value);
						SendPropertyChanging();
						_NewsModerator = value;
						SendPropertyChanged("NewsModerator");
						OnNewsModeratorChanged();
					}
				}
			}

			partial void OnNewsPermissionLevelChanging(int value);
			partial void OnNewsPermissionLevelChanged();
			private int _NewsPermissionLevel;
			[Column(Storage="_NewsPermissionLevel", DbType="Int", CanBeNull=false)]
			public  override int NewsPermissionLevel {
				get { return _NewsPermissionLevel; }
				set {
					if (_NewsPermissionLevel != value) {
						OnNewsPermissionLevelChanging(value);
						SendPropertyChanging();
						_NewsPermissionLevel = value;
						SendPropertyChanged("NewsPermissionLevel");
						OnNewsPermissionLevelChanged();
					}
				}
			}

			partial void OnIsBetaTesterChanging(bool value);
			partial void OnIsBetaTesterChanged();
			private bool _IsBetaTester;
			[Column(Storage="_IsBetaTester", DbType="Bit", CanBeNull=false)]
			public  override bool IsBetaTester {
				get { return _IsBetaTester; }
				set {
					if (_IsBetaTester != value) {
						OnIsBetaTesterChanging(value);
						SendPropertyChanging();
						_IsBetaTester = value;
						SendPropertyChanged("IsBetaTester");
						OnIsBetaTesterChanged();
					}
				}
			}

			partial void OnPlacesVisitCountChanging(int value);
			partial void OnPlacesVisitCountChanged();
			private int _PlacesVisitCount;
			[Column(Storage="_PlacesVisitCount", DbType="Int", CanBeNull=false)]
			public  override int PlacesVisitCount {
				get { return _PlacesVisitCount; }
				set {
					if (_PlacesVisitCount != value) {
						OnPlacesVisitCountChanging(value);
						SendPropertyChanging();
						_PlacesVisitCount = value;
						SendPropertyChanged("PlacesVisitCount");
						OnPlacesVisitCountChanged();
					}
				}
			}

			partial void OnMusicTypesFavouriteCountChanging(int value);
			partial void OnMusicTypesFavouriteCountChanged();
			private int _MusicTypesFavouriteCount;
			[Column(Storage="_MusicTypesFavouriteCount", DbType="Int", CanBeNull=false)]
			public  override int MusicTypesFavouriteCount {
				get { return _MusicTypesFavouriteCount; }
				set {
					if (_MusicTypesFavouriteCount != value) {
						OnMusicTypesFavouriteCountChanging(value);
						SendPropertyChanging();
						_MusicTypesFavouriteCount = value;
						SendPropertyChanged("MusicTypesFavouriteCount");
						OnMusicTypesFavouriteCountChanged();
					}
				}
			}

			partial void OnPhotosMeCountChanging(int value);
			partial void OnPhotosMeCountChanged();
			private int _PhotosMeCount;
			[Column(Storage="_PhotosMeCount", DbType="Int", CanBeNull=false)]
			public  override int PhotosMeCount {
				get { return _PhotosMeCount; }
				set {
					if (_PhotosMeCount != value) {
						OnPhotosMeCountChanging(value);
						SendPropertyChanging();
						_PhotosMeCount = value;
						SendPropertyChanged("PhotosMeCount");
						OnPhotosMeCountChanged();
					}
				}
			}

			partial void OnIsSkeletonChanging(bool value);
			partial void OnIsSkeletonChanged();
			private bool _IsSkeleton;
			[Column(Storage="_IsSkeleton", DbType="Bit", CanBeNull=false)]
			public  override bool IsSkeleton {
				get { return _IsSkeleton; }
				set {
					if (_IsSkeleton != value) {
						OnIsSkeletonChanging(value);
						SendPropertyChanging();
						_IsSkeleton = value;
						SendPropertyChanged("IsSkeleton");
						OnIsSkeletonChanged();
					}
				}
			}

			partial void OnNoInboxEmailsChanging(bool value);
			partial void OnNoInboxEmailsChanged();
			private bool _NoInboxEmails;
			[Column(Storage="_NoInboxEmails", DbType="Bit", CanBeNull=false)]
			public  override bool NoInboxEmails {
				get { return _NoInboxEmails; }
				set {
					if (_NoInboxEmails != value) {
						OnNoInboxEmailsChanging(value);
						SendPropertyChanging();
						_NoInboxEmails = value;
						SendPropertyChanged("NoInboxEmails");
						OnNoInboxEmailsChanged();
					}
				}
			}

			partial void OnAbuseReportsPendingChanging(int value);
			partial void OnAbuseReportsPendingChanged();
			private int _AbuseReportsPending;
			[Column(Storage="_AbuseReportsPending", DbType="Int", CanBeNull=false)]
			public  override int AbuseReportsPending {
				get { return _AbuseReportsPending; }
				set {
					if (_AbuseReportsPending != value) {
						OnAbuseReportsPendingChanging(value);
						SendPropertyChanging();
						_AbuseReportsPending = value;
						SendPropertyChanged("AbuseReportsPending");
						OnAbuseReportsPendingChanged();
					}
				}
			}

			partial void OnAbuseReportsUsefulChanging(int value);
			partial void OnAbuseReportsUsefulChanged();
			private int _AbuseReportsUseful;
			[Column(Storage="_AbuseReportsUseful", DbType="Int", CanBeNull=false)]
			public  override int AbuseReportsUseful {
				get { return _AbuseReportsUseful; }
				set {
					if (_AbuseReportsUseful != value) {
						OnAbuseReportsUsefulChanging(value);
						SendPropertyChanging();
						_AbuseReportsUseful = value;
						SendPropertyChanged("AbuseReportsUseful");
						OnAbuseReportsUsefulChanged();
					}
				}
			}

			partial void OnAbuseReportsOverturnedChanging(int value);
			partial void OnAbuseReportsOverturnedChanged();
			private int _AbuseReportsOverturned;
			[Column(Storage="_AbuseReportsOverturned", DbType="Int", CanBeNull=false)]
			public  override int AbuseReportsOverturned {
				get { return _AbuseReportsOverturned; }
				set {
					if (_AbuseReportsOverturned != value) {
						OnAbuseReportsOverturnedChanging(value);
						SendPropertyChanging();
						_AbuseReportsOverturned = value;
						SendPropertyChanged("AbuseReportsOverturned");
						OnAbuseReportsOverturnedChanged();
					}
				}
			}

			partial void OnAbuseAccusationsPendingChanging(int value);
			partial void OnAbuseAccusationsPendingChanged();
			private int _AbuseAccusationsPending;
			[Column(Storage="_AbuseAccusationsPending", DbType="Int", CanBeNull=false)]
			public  override int AbuseAccusationsPending {
				get { return _AbuseAccusationsPending; }
				set {
					if (_AbuseAccusationsPending != value) {
						OnAbuseAccusationsPendingChanging(value);
						SendPropertyChanging();
						_AbuseAccusationsPending = value;
						SendPropertyChanged("AbuseAccusationsPending");
						OnAbuseAccusationsPendingChanged();
					}
				}
			}

			partial void OnAbuseAccusationsAbuseChanging(int value);
			partial void OnAbuseAccusationsAbuseChanged();
			private int _AbuseAccusationsAbuse;
			[Column(Storage="_AbuseAccusationsAbuse", DbType="Int", CanBeNull=false)]
			public  override int AbuseAccusationsAbuse {
				get { return _AbuseAccusationsAbuse; }
				set {
					if (_AbuseAccusationsAbuse != value) {
						OnAbuseAccusationsAbuseChanging(value);
						SendPropertyChanging();
						_AbuseAccusationsAbuse = value;
						SendPropertyChanged("AbuseAccusationsAbuse");
						OnAbuseAccusationsAbuseChanged();
					}
				}
			}

			partial void OnAbuseAccusationsNoAbuseChanging(int value);
			partial void OnAbuseAccusationsNoAbuseChanged();
			private int _AbuseAccusationsNoAbuse;
			[Column(Storage="_AbuseAccusationsNoAbuse", DbType="Int", CanBeNull=false)]
			public  override int AbuseAccusationsNoAbuse {
				get { return _AbuseAccusationsNoAbuse; }
				set {
					if (_AbuseAccusationsNoAbuse != value) {
						OnAbuseAccusationsNoAbuseChanging(value);
						SendPropertyChanging();
						_AbuseAccusationsNoAbuse = value;
						SendPropertyChanged("AbuseAccusationsNoAbuse");
						OnAbuseAccusationsNoAbuseChanged();
					}
				}
			}

			partial void OnModeratePhotosChanging(bool value);
			partial void OnModeratePhotosChanged();
			private bool _ModeratePhotos;
			[Column(Storage="_ModeratePhotos", DbType="Bit", CanBeNull=false)]
			public  override bool ModeratePhotos {
				get { return _ModeratePhotos; }
				set {
					if (_ModeratePhotos != value) {
						OnModeratePhotosChanging(value);
						SendPropertyChanging();
						_ModeratePhotos = value;
						SendPropertyChanged("ModeratePhotos");
						OnModeratePhotosChanged();
					}
				}
			}

			partial void OnChatSessionIdChanging(int value);
			partial void OnChatSessionIdChanged();
			private int _ChatSessionId;
			[Column(Storage="_ChatSessionId", DbType="Int", CanBeNull=false)]
			public  override int ChatSessionId {
				get { return _ChatSessionId; }
				set {
					if (_ChatSessionId != value) {
						OnChatSessionIdChanging(value);
						SendPropertyChanging();
						_ChatSessionId = value;
						SendPropertyChanged("ChatSessionId");
						OnChatSessionIdChanged();
					}
				}
			}

			partial void OnAddedByGroupKChanging(int value);
			partial void OnAddedByGroupKChanged();
			private int _AddedByGroupK;
			[Column(Storage="_AddedByGroupK", DbType="Int", CanBeNull=false)]
			public  override int AddedByGroupK {
				get { return _AddedByGroupK; }
				set {
					if (_AddedByGroupK != value) {
						OnAddedByGroupKChanging(value);
						SendPropertyChanging();
						_AddedByGroupK = value;
						SendPropertyChanged("AddedByGroupK");
						OnAddedByGroupKChanged();
					}
				}
			}

			partial void OnDonateIconChanging(int value);
			partial void OnDonateIconChanged();
			private int _DonateIcon;
			[Column(Storage="_DonateIcon", DbType="Int", CanBeNull=false)]
			public  override int DonateIcon {
				get { return _DonateIcon; }
				set {
					if (_DonateIcon != value) {
						OnDonateIconChanging(value);
						SendPropertyChanging();
						_DonateIcon = value;
						SendPropertyChanged("DonateIcon");
						OnDonateIconChanged();
					}
				}
			}

			partial void OnDonateExpireChanging(DateTime value);
			partial void OnDonateExpireChanged();
			private DateTime _DonateExpire;
			[Column(Storage="_DonateExpire", DbType="DateTime", CanBeNull=false)]
			public  override DateTime DonateExpire {
				get { return _DonateExpire; }
				set {
					if (_DonateExpire != value) {
						OnDonateExpireChanging(value);
						SendPropertyChanging();
						_DonateExpire = value;
						SendPropertyChanged("DonateExpire");
						OnDonateExpireChanged();
					}
				}
			}

			partial void OnEmailDateTimeChanging(DateTime value);
			partial void OnEmailDateTimeChanged();
			private DateTime _EmailDateTime;
			[Column(Storage="_EmailDateTime", DbType="DateTime", CanBeNull=false)]
			public  override DateTime EmailDateTime {
				get { return _EmailDateTime; }
				set {
					if (_EmailDateTime != value) {
						OnEmailDateTimeChanging(value);
						SendPropertyChanging();
						_EmailDateTime = value;
						SendPropertyChanged("EmailDateTime");
						OnEmailDateTimeChanged();
					}
				}
			}

			partial void OnEmailIpChanging(string value);
			partial void OnEmailIpChanged();
			private string _EmailIp;
			[Column(Storage="_EmailIp", DbType="VarChar(15)", CanBeNull=false)]
			public  override string EmailIp {
				get { return _EmailIp; }
				set {
					if (_EmailIp != value) {
						OnEmailIpChanging(value);
						SendPropertyChanging();
						_EmailIp = value;
						SendPropertyChanged("EmailIp");
						OnEmailIpChanged();
					}
				}
			}

			partial void OnEmailHoldChanging(bool value);
			partial void OnEmailHoldChanged();
			private bool _EmailHold;
			[Column(Storage="_EmailHold", DbType="Bit", CanBeNull=false)]
			public  override bool EmailHold {
				get { return _EmailHold; }
				set {
					if (_EmailHold != value) {
						OnEmailHoldChanging(value);
						SendPropertyChanging();
						_EmailHold = value;
						SendPropertyChanged("EmailHold");
						OnEmailHoldChanged();
					}
				}
			}

			partial void OnIsHtmlEditorChanging(bool value);
			partial void OnIsHtmlEditorChanged();
			private bool _IsHtmlEditor;
			[Column(Storage="_IsHtmlEditor", DbType="Bit", CanBeNull=false)]
			public  override bool IsHtmlEditor {
				get { return _IsHtmlEditor; }
				set {
					if (_IsHtmlEditor != value) {
						OnIsHtmlEditorChanging(value);
						SendPropertyChanging();
						_IsHtmlEditor = value;
						SendPropertyChanged("IsHtmlEditor");
						OnIsHtmlEditorChanged();
					}
				}
			}

			partial void OnIsGroupModeratorChanging(bool value);
			partial void OnIsGroupModeratorChanged();
			private bool _IsGroupModerator;
			[Column(Storage="_IsGroupModerator", DbType="Bit", CanBeNull=false)]
			public  override bool IsGroupModerator {
				get { return _IsGroupModerator; }
				set {
					if (_IsGroupModerator != value) {
						OnIsGroupModeratorChanging(value);
						SendPropertyChanging();
						_IsGroupModerator = value;
						SendPropertyChanged("IsGroupModerator");
						OnIsGroupModeratorChanged();
					}
				}
			}

			partial void OnIsSkeletonFromSignupChanging(bool value);
			partial void OnIsSkeletonFromSignupChanged();
			private bool _IsSkeletonFromSignup;
			[Column(Storage="_IsSkeletonFromSignup", DbType="Bit", CanBeNull=false)]
			public  override bool IsSkeletonFromSignup {
				get { return _IsSkeletonFromSignup; }
				set {
					if (_IsSkeletonFromSignup != value) {
						OnIsSkeletonFromSignupChanging(value);
						SendPropertyChanging();
						_IsSkeletonFromSignup = value;
						SendPropertyChanged("IsSkeletonFromSignup");
						OnIsSkeletonFromSignupChanged();
					}
				}
			}

			partial void OnExtraIconChanging(int value);
			partial void OnExtraIconChanged();
			private int _ExtraIcon;
			[Column(Storage="_ExtraIcon", DbType="Int", CanBeNull=false)]
			public  override int ExtraIcon {
				get { return _ExtraIcon; }
				set {
					if (_ExtraIcon != value) {
						OnExtraIconChanging(value);
						SendPropertyChanging();
						_ExtraIcon = value;
						SendPropertyChanged("ExtraIcon");
						OnExtraIconChanged();
					}
				}
			}

			partial void OnExtraExpireChanging(DateTime value);
			partial void OnExtraExpireChanged();
			private DateTime _ExtraExpire;
			[Column(Storage="_ExtraExpire", DbType="DateTime", CanBeNull=false)]
			public  override DateTime ExtraExpire {
				get { return _ExtraExpire; }
				set {
					if (_ExtraExpire != value) {
						OnExtraExpireChanging(value);
						SendPropertyChanging();
						_ExtraExpire = value;
						SendPropertyChanged("ExtraExpire");
						OnExtraExpireChanged();
					}
				}
			}

			partial void OnSpottingsTotalChanging(int value);
			partial void OnSpottingsTotalChanged();
			private int _SpottingsTotal;
			[Column(Storage="_SpottingsTotal", DbType="Int", CanBeNull=false)]
			public  override int SpottingsTotal {
				get { return _SpottingsTotal; }
				set {
					if (_SpottingsTotal != value) {
						OnSpottingsTotalChanging(value);
						SendPropertyChanging();
						_SpottingsTotal = value;
						SendPropertyChanged("SpottingsTotal");
						OnSpottingsTotalChanged();
					}
				}
			}

			partial void OnSpottingsMonthChanging(int value);
			partial void OnSpottingsMonthChanged();
			private int _SpottingsMonth;
			[Column(Storage="_SpottingsMonth", DbType="Int", CanBeNull=false)]
			public  override int SpottingsMonth {
				get { return _SpottingsMonth; }
				set {
					if (_SpottingsMonth != value) {
						OnSpottingsMonthChanging(value);
						SendPropertyChanging();
						_SpottingsMonth = value;
						SendPropertyChanged("SpottingsMonth");
						OnSpottingsMonthChanged();
					}
				}
			}

			partial void OnSpottingsMonthRankChanging(int value);
			partial void OnSpottingsMonthRankChanged();
			private int _SpottingsMonthRank;
			[Column(Storage="_SpottingsMonthRank", DbType="Int", CanBeNull=false)]
			public  override int SpottingsMonthRank {
				get { return _SpottingsMonthRank; }
				set {
					if (_SpottingsMonthRank != value) {
						OnSpottingsMonthRankChanging(value);
						SendPropertyChanging();
						_SpottingsMonthRank = value;
						SendPropertyChanged("SpottingsMonthRank");
						OnSpottingsMonthRankChanged();
					}
				}
			}

			partial void OnIsPromoterChanging(bool value);
			partial void OnIsPromoterChanged();
			private bool _IsPromoter;
			[Column(Storage="_IsPromoter", DbType="Bit", CanBeNull=false)]
			public  override bool IsPromoter {
				get { return _IsPromoter; }
				set {
					if (_IsPromoter != value) {
						OnIsPromoterChanging(value);
						SendPropertyChanging();
						_IsPromoter = value;
						SendPropertyChanged("IsPromoter");
						OnIsPromoterChanged();
					}
				}
			}

			partial void OnCampTicketsChanging(int value);
			partial void OnCampTicketsChanged();
			private int _CampTickets;
			[Column(Storage="_CampTickets", DbType="Int", CanBeNull=false)]
			public  override int CampTickets {
				get { return _CampTickets; }
				set {
					if (_CampTickets != value) {
						OnCampTicketsChanging(value);
						SendPropertyChanging();
						_CampTickets = value;
						SendPropertyChanged("CampTickets");
						OnCampTicketsChanged();
					}
				}
			}

			partial void OnHasTicketChanging(bool value);
			partial void OnHasTicketChanged();
			private bool _HasTicket;
			[Column(Storage="_HasTicket", DbType="Bit", CanBeNull=false)]
			public  override bool HasTicket {
				get { return _HasTicket; }
				set {
					if (_HasTicket != value) {
						OnHasTicketChanging(value);
						SendPropertyChanging();
						_HasTicket = value;
						SendPropertyChanged("HasTicket");
						OnHasTicketChanged();
					}
				}
			}

			partial void OnLastTicketEventDateTimeChanging(DateTime value);
			partial void OnLastTicketEventDateTimeChanged();
			private DateTime _LastTicketEventDateTime;
			[Column(Storage="_LastTicketEventDateTime", DbType="DateTime", CanBeNull=false)]
			public  override DateTime LastTicketEventDateTime {
				get { return _LastTicketEventDateTime; }
				set {
					if (_LastTicketEventDateTime != value) {
						OnLastTicketEventDateTimeChanging(value);
						SendPropertyChanging();
						_LastTicketEventDateTime = value;
						SendPropertyChanged("LastTicketEventDateTime");
						OnLastTicketEventDateTimeChanged();
					}
				}
			}

			partial void OnPasswordHashChanging(Guid value);
			partial void OnPasswordHashChanged();
			private Guid _PasswordHash;
			[Column(Storage="_PasswordHash", DbType="UniqueIdentifier", CanBeNull=false)]
			public  override Guid PasswordHash {
				get { return _PasswordHash; }
				set {
					if (_PasswordHash != value) {
						OnPasswordHashChanging(value);
						SendPropertyChanging();
						_PasswordHash = value;
						SendPropertyChanged("PasswordHash");
						OnPasswordHashChanged();
					}
				}
			}

			partial void OnPasswordSaltChanging(Guid value);
			partial void OnPasswordSaltChanged();
			private Guid _PasswordSalt;
			[Column(Storage="_PasswordSalt", DbType="UniqueIdentifier", CanBeNull=false)]
			public  override Guid PasswordSalt {
				get { return _PasswordSalt; }
				set {
					if (_PasswordSalt != value) {
						OnPasswordSaltChanging(value);
						SendPropertyChanging();
						_PasswordSalt = value;
						SendPropertyChanged("PasswordSalt");
						OnPasswordSaltChanged();
					}
				}
			}

			partial void OnPasswordResetEmailSecretChanging(string value);
			partial void OnPasswordResetEmailSecretChanged();
			private string _PasswordResetEmailSecret;
			[Column(Storage="_PasswordResetEmailSecret", DbType="VarChar(10)", CanBeNull=false)]
			public  override string PasswordResetEmailSecret {
				get { return _PasswordResetEmailSecret; }
				set {
					if (_PasswordResetEmailSecret != value) {
						OnPasswordResetEmailSecretChanging(value);
						SendPropertyChanging();
						_PasswordResetEmailSecret = value;
						SendPropertyChanged("PasswordResetEmailSecret");
						OnPasswordResetEmailSecretChanged();
					}
				}
			}

			partial void OnLegalTermsUser1Changing(bool value);
			partial void OnLegalTermsUser1Changed();
			private bool _LegalTermsUser1;
			[Column(Storage="_LegalTermsUser1", DbType="Bit", CanBeNull=false)]
			public  override bool LegalTermsUser1 {
				get { return _LegalTermsUser1; }
				set {
					if (_LegalTermsUser1 != value) {
						OnLegalTermsUser1Changing(value);
						SendPropertyChanging();
						_LegalTermsUser1 = value;
						SendPropertyChanged("LegalTermsUser1");
						OnLegalTermsUser1Changed();
					}
				}
			}

			partial void OnLegalTermsPromoter1Changing(bool value);
			partial void OnLegalTermsPromoter1Changed();
			private bool _LegalTermsPromoter1;
			[Column(Storage="_LegalTermsPromoter1", DbType="Bit", CanBeNull=false)]
			public  override bool LegalTermsPromoter1 {
				get { return _LegalTermsPromoter1; }
				set {
					if (_LegalTermsPromoter1 != value) {
						OnLegalTermsPromoter1Changing(value);
						SendPropertyChanging();
						_LegalTermsPromoter1 = value;
						SendPropertyChanged("LegalTermsPromoter1");
						OnLegalTermsPromoter1Changed();
					}
				}
			}

			partial void OnIsSuperAdminChanging(bool value);
			partial void OnIsSuperAdminChanged();
			private bool _IsSuperAdmin;
			[Column(Storage="_IsSuperAdmin", DbType="Bit", CanBeNull=false)]
			public  override bool IsSuperAdmin {
				get { return _IsSuperAdmin; }
				set {
					if (_IsSuperAdmin != value) {
						OnIsSuperAdminChanging(value);
						SendPropertyChanging();
						_IsSuperAdmin = value;
						SendPropertyChanged("IsSuperAdmin");
						OnIsSuperAdminChanged();
					}
				}
			}

			partial void OnIsSalesPersonChanging(bool value);
			partial void OnIsSalesPersonChanged();
			private bool _IsSalesPerson;
			[Column(Storage="_IsSalesPerson", DbType="Bit", CanBeNull=false)]
			public  override bool IsSalesPerson {
				get { return _IsSalesPerson; }
				set {
					if (_IsSalesPerson != value) {
						OnIsSalesPersonChanging(value);
						SendPropertyChanging();
						_IsSalesPerson = value;
						SendPropertyChanged("IsSalesPerson");
						OnIsSalesPersonChanged();
					}
				}
			}

			partial void OnBuyableLockDateTimeChanging(DateTime value);
			partial void OnBuyableLockDateTimeChanged();
			private DateTime _BuyableLockDateTime;
			[Column(Storage="_BuyableLockDateTime", DbType="DateTime", CanBeNull=false)]
			public  override DateTime BuyableLockDateTime {
				get { return _BuyableLockDateTime; }
				set {
					if (_BuyableLockDateTime != value) {
						OnBuyableLockDateTimeChanging(value);
						SendPropertyChanging();
						_BuyableLockDateTime = value;
						SendPropertyChanged("BuyableLockDateTime");
						OnBuyableLockDateTimeChanged();
					}
				}
			}

			partial void OnSalesTeamChanging(int value);
			partial void OnSalesTeamChanged();
			private int _SalesTeam;
			[Column(Storage="_SalesTeam", DbType="Int", CanBeNull=false)]
			public  override int SalesTeam {
				get { return _SalesTeam; }
				set {
					if (_SalesTeam != value) {
						OnSalesTeamChanging(value);
						SendPropertyChanging();
						_SalesTeam = value;
						SendPropertyChanged("SalesTeam");
						OnSalesTeamChanged();
					}
				}
			}

			partial void OnGuidChanging(Guid value);
			partial void OnGuidChanged();
			private Guid _Guid;
			[Column(Storage="_Guid", DbType="UniqueIdentifier NOT NULL", CanBeNull=false)]
			public  override Guid Guid {
				get { return _Guid; }
				set {
					if (_Guid != value) {
						OnGuidChanging(value);
						SendPropertyChanging();
						_Guid = value;
						SendPropertyChanged("Guid");
						OnGuidChanged();
					}
				}
			}

			partial void OnLegalTermsUser2Changing(bool value);
			partial void OnLegalTermsUser2Changed();
			private bool _LegalTermsUser2;
			[Column(Storage="_LegalTermsUser2", DbType="Bit", CanBeNull=false)]
			public  override bool LegalTermsUser2 {
				get { return _LegalTermsUser2; }
				set {
					if (_LegalTermsUser2 != value) {
						OnLegalTermsUser2Changing(value);
						SendPropertyChanging();
						_LegalTermsUser2 = value;
						SendPropertyChanged("LegalTermsUser2");
						OnLegalTermsUser2Changed();
					}
				}
			}

			partial void OnLegalTermsPromoter2Changing(bool value);
			partial void OnLegalTermsPromoter2Changed();
			private bool _LegalTermsPromoter2;
			[Column(Storage="_LegalTermsPromoter2", DbType="Bit", CanBeNull=false)]
			public  override bool LegalTermsPromoter2 {
				get { return _LegalTermsPromoter2; }
				set {
					if (_LegalTermsPromoter2 != value) {
						OnLegalTermsPromoter2Changing(value);
						SendPropertyChanging();
						_LegalTermsPromoter2 = value;
						SendPropertyChanged("LegalTermsPromoter2");
						OnLegalTermsPromoter2Changed();
					}
				}
			}

			partial void OnLastPhotoUploadChanging(DateTime value);
			partial void OnLastPhotoUploadChanged();
			private DateTime _LastPhotoUpload;
			[Column(Storage="_LastPhotoUpload", DbType="DateTime", CanBeNull=false)]
			public  override DateTime LastPhotoUpload {
				get { return _LastPhotoUpload; }
				set {
					if (_LastPhotoUpload != value) {
						OnLastPhotoUploadChanging(value);
						SendPropertyChanging();
						_LastPhotoUpload = value;
						SendPropertyChanged("LastPhotoUpload");
						OnLastPhotoUploadChanged();
					}
				}
			}

			partial void OnDateTimeLastUpdateEmailChanging(DateTime value);
			partial void OnDateTimeLastUpdateEmailChanged();
			private DateTime _DateTimeLastUpdateEmail;
			[Column(Storage="_DateTimeLastUpdateEmail", DbType="DateTime NOT NULL", CanBeNull=false)]
			public  override DateTime DateTimeLastUpdateEmail {
				get { return _DateTimeLastUpdateEmail; }
				set {
					if (_DateTimeLastUpdateEmail != value) {
						OnDateTimeLastUpdateEmailChanging(value);
						SendPropertyChanging();
						_DateTimeLastUpdateEmail = value;
						SendPropertyChanged("DateTimeLastUpdateEmail");
						OnDateTimeLastUpdateEmailChanged();
					}
				}
			}

			partial void OnInvitedViaContactImporterChanging(bool value);
			partial void OnInvitedViaContactImporterChanged();
			private bool _InvitedViaContactImporter;
			[Column(Storage="_InvitedViaContactImporter", DbType="Bit", CanBeNull=false)]
			public  override bool InvitedViaContactImporter {
				get { return _InvitedViaContactImporter; }
				set {
					if (_InvitedViaContactImporter != value) {
						OnInvitedViaContactImporterChanging(value);
						SendPropertyChanging();
						_InvitedViaContactImporter = value;
						SendPropertyChanged("InvitedViaContactImporter");
						OnInvitedViaContactImporterChanged();
					}
				}
			}

			partial void OnIsTicketsRegisteredChanging(bool value);
			partial void OnIsTicketsRegisteredChanged();
			private bool _IsTicketsRegistered;
			[Column(Storage="_IsTicketsRegistered", DbType="Bit", CanBeNull=false)]
			public  override bool IsTicketsRegistered {
				get { return _IsTicketsRegistered; }
				set {
					if (_IsTicketsRegistered != value) {
						OnIsTicketsRegisteredChanging(value);
						SendPropertyChanging();
						_IsTicketsRegistered = value;
						SendPropertyChanged("IsTicketsRegistered");
						OnIsTicketsRegisteredChanged();
					}
				}
			}

			partial void OnExDirectoryChanging(bool value);
			partial void OnExDirectoryChanged();
			private bool _ExDirectory;
			[Column(Storage="_ExDirectory", DbType="Bit", CanBeNull=false)]
			public  override bool ExDirectory {
				get { return _ExDirectory; }
				set {
					if (_ExDirectory != value) {
						OnExDirectoryChanging(value);
						SendPropertyChanging();
						_ExDirectory = value;
						SendPropertyChanged("ExDirectory");
						OnExDirectoryChanged();
					}
				}
			}

			partial void OnIsEmailBrokenChanging(bool value);
			partial void OnIsEmailBrokenChanged();
			private bool _IsEmailBroken;
			[Column(Storage="_IsEmailBroken", DbType="Bit", CanBeNull=false)]
			public  override bool IsEmailBroken {
				get { return _IsEmailBroken; }
				set {
					if (_IsEmailBroken != value) {
						OnIsEmailBrokenChanging(value);
						SendPropertyChanging();
						_IsEmailBroken = value;
						SendPropertyChanged("IsEmailBroken");
						OnIsEmailBrokenChanged();
					}
				}
			}

			partial void OnDateTimeLastChatMessageChanging(DateTime? value);
			partial void OnDateTimeLastChatMessageChanged();
			private DateTime? _DateTimeLastChatMessage;
			[Column(Storage="_DateTimeLastChatMessage", DbType="DateTime")]
			public  override DateTime? DateTimeLastChatMessage {
				get { return _DateTimeLastChatMessage; }
				set {
					if (_DateTimeLastChatMessage != value) {
						OnDateTimeLastChatMessageChanging(value);
						SendPropertyChanging();
						_DateTimeLastChatMessage = value;
						SendPropertyChanged("DateTimeLastChatMessage");
						OnDateTimeLastChatMessageChanged();
					}
				}
			}

			partial void OnRolloverDonationIconKChanging(int? value);
			partial void OnRolloverDonationIconKChanged();
			private int? _RolloverDonationIconK;
			[Column(Storage="_RolloverDonationIconK", DbType="Int")]
			public  override int? RolloverDonationIconK {
				get { return _RolloverDonationIconK; }
				set {
					if (_RolloverDonationIconK != value) {
						OnRolloverDonationIconKChanging(value);
						SendPropertyChanging();
						_RolloverDonationIconK = value;
						SendPropertyChanged("RolloverDonationIconK");
						OnRolloverDonationIconKChanged();
					}
				}
			}

			partial void OnChatPicChanging(Guid? value);
			partial void OnChatPicChanged();
			private Guid? _ChatPic;
			[Column(Storage="_ChatPic", DbType="UniqueIdentifier")]
			public  override Guid? ChatPic {
				get { return _ChatPic; }
				set {
					if (_ChatPic != value) {
						OnChatPicChanging(value);
						SendPropertyChanging();
						_ChatPic = value;
						SendPropertyChanged("ChatPic");
						OnChatPicChanged();
					}
				}
			}

			partial void OnChatPicPhotoKChanging(int? value);
			partial void OnChatPicPhotoKChanged();
			private int? _ChatPicPhotoK;
			[Column(Storage="_ChatPicPhotoK", DbType="Int")]
			public  override int? ChatPicPhotoK {
				get { return _ChatPicPhotoK; }
				set {
					if (_ChatPicPhotoK != value) {
						OnChatPicPhotoKChanging(value);
						SendPropertyChanging();
						_ChatPicPhotoK = value;
						SendPropertyChanged("ChatPicPhotoK");
						OnChatPicPhotoKChanged();
					}
				}
			}

			partial void OnChatPicStateChanging(string value);
			partial void OnChatPicStateChanged();
			private string _ChatPicState;
			[Column(Storage="_ChatPicState", DbType="VarChar(100)")]
			public  override string ChatPicState {
				get { return _ChatPicState; }
				set {
					if (_ChatPicState != value) {
						OnChatPicStateChanging(value);
						SendPropertyChanging();
						_ChatPicState = value;
						SendPropertyChanged("ChatPicState");
						OnChatPicStateChanged();
					}
				}
			}

			partial void OnDateTimeLastBuddyAlertsRoomRefreshChanging(DateTime? value);
			partial void OnDateTimeLastBuddyAlertsRoomRefreshChanged();
			private DateTime? _DateTimeLastBuddyAlertsRoomRefresh;
			[Column(Storage="_DateTimeLastBuddyAlertsRoomRefresh", DbType="DateTime")]
			public  override DateTime? DateTimeLastBuddyAlertsRoomRefresh {
				get { return _DateTimeLastBuddyAlertsRoomRefresh; }
				set {
					if (_DateTimeLastBuddyAlertsRoomRefresh != value) {
						OnDateTimeLastBuddyAlertsRoomRefreshChanging(value);
						SendPropertyChanging();
						_DateTimeLastBuddyAlertsRoomRefresh = value;
						SendPropertyChanged("DateTimeLastBuddyAlertsRoomRefresh");
						OnDateTimeLastBuddyAlertsRoomRefreshChanged();
					}
				}
			}

			partial void OnPhotoUsageChanging(Model.Entities.Usr.PhotoUsageEnum value);
			partial void OnPhotoUsageChanged();
			private Model.Entities.Usr.PhotoUsageEnum _PhotoUsage;
			[Column(Storage="_PhotoUsage", DbType="Int NOT NULL", CanBeNull=false)]
			public  override Model.Entities.Usr.PhotoUsageEnum PhotoUsage {
				get { return _PhotoUsage; }
				set {
					if (_PhotoUsage != value) {
						OnPhotoUsageChanging(value);
						SendPropertyChanging();
						_PhotoUsage = value;
						SendPropertyChanged("PhotoUsage");
						OnPhotoUsageChanged();
					}
				}
			}

			partial void OnFacebookUIDChanging(long? value);
			partial void OnFacebookUIDChanged();
			private long? _FacebookUID;
			[Column(Storage="_FacebookUID", DbType="BigInt")]
			public  override long? FacebookUID {
				get { return _FacebookUID; }
				set {
					if (_FacebookUID != value) {
						OnFacebookUIDChanging(value);
						SendPropertyChanging();
						_FacebookUID = value;
						SendPropertyChanged("FacebookUID");
						OnFacebookUIDChanged();
					}
				}
			}

			partial void OnFacebookConnectedChanging(bool value);
			partial void OnFacebookConnectedChanged();
			private bool _FacebookConnected;
			[Column(Storage="_FacebookConnected", DbType="Bit NOT NULL", CanBeNull=false)]
			public  override bool FacebookConnected {
				get { return _FacebookConnected; }
				set {
					if (_FacebookConnected != value) {
						OnFacebookConnectedChanging(value);
						SendPropertyChanging();
						_FacebookConnected = value;
						SendPropertyChanged("FacebookConnected");
						OnFacebookConnectedChanged();
					}
				}
			}

			partial void OnFacebookConnectedDateTimeChanging(DateTime? value);
			partial void OnFacebookConnectedDateTimeChanged();
			private DateTime? _FacebookConnectedDateTime;
			[Column(Storage="_FacebookConnectedDateTime", DbType="DateTime")]
			public  override DateTime? FacebookConnectedDateTime {
				get { return _FacebookConnectedDateTime; }
				set {
					if (_FacebookConnectedDateTime != value) {
						OnFacebookConnectedDateTimeChanging(value);
						SendPropertyChanging();
						_FacebookConnectedDateTime = value;
						SendPropertyChanged("FacebookConnectedDateTime");
						OnFacebookConnectedDateTimeChanged();
					}
				}
			}

			partial void OnFacebookPermissionEmailChanging(bool value);
			partial void OnFacebookPermissionEmailChanged();
			private bool _FacebookPermissionEmail;
			[Column(Storage="_FacebookPermissionEmail", DbType="Bit NOT NULL", CanBeNull=false)]
			public  override bool FacebookPermissionEmail {
				get { return _FacebookPermissionEmail; }
				set {
					if (_FacebookPermissionEmail != value) {
						OnFacebookPermissionEmailChanging(value);
						SendPropertyChanging();
						_FacebookPermissionEmail = value;
						SendPropertyChanged("FacebookPermissionEmail");
						OnFacebookPermissionEmailChanged();
					}
				}
			}

			partial void OnFacebookPermissionPublishChanging(bool value);
			partial void OnFacebookPermissionPublishChanged();
			private bool _FacebookPermissionPublish;
			[Column(Storage="_FacebookPermissionPublish", DbType="Bit NOT NULL", CanBeNull=false)]
			public  override bool FacebookPermissionPublish {
				get { return _FacebookPermissionPublish; }
				set {
					if (_FacebookPermissionPublish != value) {
						OnFacebookPermissionPublishChanging(value);
						SendPropertyChanging();
						_FacebookPermissionPublish = value;
						SendPropertyChanged("FacebookPermissionPublish");
						OnFacebookPermissionPublishChanged();
					}
				}
			}

			partial void OnFacebookPermissionEventChanging(bool value);
			partial void OnFacebookPermissionEventChanged();
			private bool _FacebookPermissionEvent;
			[Column(Storage="_FacebookPermissionEvent", DbType="Bit NOT NULL", CanBeNull=false)]
			public  override bool FacebookPermissionEvent {
				get { return _FacebookPermissionEvent; }
				set {
					if (_FacebookPermissionEvent != value) {
						OnFacebookPermissionEventChanging(value);
						SendPropertyChanging();
						_FacebookPermissionEvent = value;
						SendPropertyChanged("FacebookPermissionEvent");
						OnFacebookPermissionEventChanged();
					}
				}
			}

			partial void OnFacebookPermissionRsvpChanging(bool value);
			partial void OnFacebookPermissionRsvpChanged();
			private bool _FacebookPermissionRsvp;
			[Column(Storage="_FacebookPermissionRsvp", DbType="Bit NOT NULL", CanBeNull=false)]
			public  override bool FacebookPermissionRsvp {
				get { return _FacebookPermissionRsvp; }
				set {
					if (_FacebookPermissionRsvp != value) {
						OnFacebookPermissionRsvpChanging(value);
						SendPropertyChanging();
						_FacebookPermissionRsvp = value;
						SendPropertyChanged("FacebookPermissionRsvp");
						OnFacebookPermissionRsvpChanged();
					}
				}
			}

			partial void OnFacebookStoryAttendEventChanging(bool value);
			partial void OnFacebookStoryAttendEventChanged();
			private bool _FacebookStoryAttendEvent;
			[Column(Storage="_FacebookStoryAttendEvent", DbType="Bit NOT NULL", CanBeNull=false)]
			public  override bool FacebookStoryAttendEvent {
				get { return _FacebookStoryAttendEvent; }
				set {
					if (_FacebookStoryAttendEvent != value) {
						OnFacebookStoryAttendEventChanging(value);
						SendPropertyChanging();
						_FacebookStoryAttendEvent = value;
						SendPropertyChanged("FacebookStoryAttendEvent");
						OnFacebookStoryAttendEventChanged();
					}
				}
			}

			partial void OnFacebookStoryBuyTicketChanging(bool value);
			partial void OnFacebookStoryBuyTicketChanged();
			private bool _FacebookStoryBuyTicket;
			[Column(Storage="_FacebookStoryBuyTicket", DbType="Bit NOT NULL", CanBeNull=false)]
			public  override bool FacebookStoryBuyTicket {
				get { return _FacebookStoryBuyTicket; }
				set {
					if (_FacebookStoryBuyTicket != value) {
						OnFacebookStoryBuyTicketChanging(value);
						SendPropertyChanging();
						_FacebookStoryBuyTicket = value;
						SendPropertyChanged("FacebookStoryBuyTicket");
						OnFacebookStoryBuyTicketChanged();
					}
				}
			}

			partial void OnFacebookStoryUploadPhotoChanging(bool value);
			partial void OnFacebookStoryUploadPhotoChanged();
			private bool _FacebookStoryUploadPhoto;
			[Column(Storage="_FacebookStoryUploadPhoto", DbType="Bit NOT NULL", CanBeNull=false)]
			public  override bool FacebookStoryUploadPhoto {
				get { return _FacebookStoryUploadPhoto; }
				set {
					if (_FacebookStoryUploadPhoto != value) {
						OnFacebookStoryUploadPhotoChanging(value);
						SendPropertyChanging();
						_FacebookStoryUploadPhoto = value;
						SendPropertyChanged("FacebookStoryUploadPhoto");
						OnFacebookStoryUploadPhotoChanged();
					}
				}
			}

			partial void OnFacebookStorySpottedChanging(bool value);
			partial void OnFacebookStorySpottedChanged();
			private bool _FacebookStorySpotted;
			[Column(Storage="_FacebookStorySpotted", DbType="Bit NOT NULL", CanBeNull=false)]
			public  override bool FacebookStorySpotted {
				get { return _FacebookStorySpotted; }
				set {
					if (_FacebookStorySpotted != value) {
						OnFacebookStorySpottedChanging(value);
						SendPropertyChanging();
						_FacebookStorySpotted = value;
						SendPropertyChanged("FacebookStorySpotted");
						OnFacebookStorySpottedChanged();
					}
				}
			}

			partial void OnFacebookStoryPhotoFeaturedChanging(bool value);
			partial void OnFacebookStoryPhotoFeaturedChanged();
			private bool _FacebookStoryPhotoFeatured;
			[Column(Storage="_FacebookStoryPhotoFeatured", DbType="Bit NOT NULL", CanBeNull=false)]
			public  override bool FacebookStoryPhotoFeatured {
				get { return _FacebookStoryPhotoFeatured; }
				set {
					if (_FacebookStoryPhotoFeatured != value) {
						OnFacebookStoryPhotoFeaturedChanging(value);
						SendPropertyChanging();
						_FacebookStoryPhotoFeatured = value;
						SendPropertyChanged("FacebookStoryPhotoFeatured");
						OnFacebookStoryPhotoFeaturedChanged();
					}
				}
			}

			partial void OnFacebookStoryNewBuddyChanging(bool value);
			partial void OnFacebookStoryNewBuddyChanged();
			private bool _FacebookStoryNewBuddy;
			[Column(Storage="_FacebookStoryNewBuddy", DbType="Bit NOT NULL", CanBeNull=false)]
			public  override bool FacebookStoryNewBuddy {
				get { return _FacebookStoryNewBuddy; }
				set {
					if (_FacebookStoryNewBuddy != value) {
						OnFacebookStoryNewBuddyChanging(value);
						SendPropertyChanging();
						_FacebookStoryNewBuddy = value;
						SendPropertyChanged("FacebookStoryNewBuddy");
						OnFacebookStoryNewBuddyChanged();
					}
				}
			}

			partial void OnFacebookStoryPublishArticleChanging(bool value);
			partial void OnFacebookStoryPublishArticleChanged();
			private bool _FacebookStoryPublishArticle;
			[Column(Storage="_FacebookStoryPublishArticle", DbType="Bit NOT NULL", CanBeNull=false)]
			public  override bool FacebookStoryPublishArticle {
				get { return _FacebookStoryPublishArticle; }
				set {
					if (_FacebookStoryPublishArticle != value) {
						OnFacebookStoryPublishArticleChanging(value);
						SendPropertyChanging();
						_FacebookStoryPublishArticle = value;
						SendPropertyChanged("FacebookStoryPublishArticle");
						OnFacebookStoryPublishArticleChanged();
					}
				}
			}

			partial void OnFacebookStoryJoinGroupChanging(bool value);
			partial void OnFacebookStoryJoinGroupChanged();
			private bool _FacebookStoryJoinGroup;
			[Column(Storage="_FacebookStoryJoinGroup", DbType="Bit NOT NULL", CanBeNull=false)]
			public  override bool FacebookStoryJoinGroup {
				get { return _FacebookStoryJoinGroup; }
				set {
					if (_FacebookStoryJoinGroup != value) {
						OnFacebookStoryJoinGroupChanging(value);
						SendPropertyChanging();
						_FacebookStoryJoinGroup = value;
						SendPropertyChanged("FacebookStoryJoinGroup");
						OnFacebookStoryJoinGroupChanged();
					}
				}
			}

			partial void OnFacebookStoryFavouriteChanging(bool value);
			partial void OnFacebookStoryFavouriteChanged();
			private bool _FacebookStoryFavourite;
			[Column(Storage="_FacebookStoryFavourite", DbType="Bit NOT NULL", CanBeNull=false)]
			public  override bool FacebookStoryFavourite {
				get { return _FacebookStoryFavourite; }
				set {
					if (_FacebookStoryFavourite != value) {
						OnFacebookStoryFavouriteChanging(value);
						SendPropertyChanging();
						_FacebookStoryFavourite = value;
						SendPropertyChanged("FacebookStoryFavourite");
						OnFacebookStoryFavouriteChanged();
					}
				}
			}

			partial void OnFacebookStoryNewTopicChanging(bool value);
			partial void OnFacebookStoryNewTopicChanged();
			private bool _FacebookStoryNewTopic;
			[Column(Storage="_FacebookStoryNewTopic", DbType="Bit NOT NULL", CanBeNull=false)]
			public  override bool FacebookStoryNewTopic {
				get { return _FacebookStoryNewTopic; }
				set {
					if (_FacebookStoryNewTopic != value) {
						OnFacebookStoryNewTopicChanging(value);
						SendPropertyChanging();
						_FacebookStoryNewTopic = value;
						SendPropertyChanged("FacebookStoryNewTopic");
						OnFacebookStoryNewTopicChanged();
					}
				}
			}

			partial void OnFacebookStoryEventReviewChanging(bool value);
			partial void OnFacebookStoryEventReviewChanged();
			private bool _FacebookStoryEventReview;
			[Column(Storage="_FacebookStoryEventReview", DbType="Bit NOT NULL", CanBeNull=false)]
			public  override bool FacebookStoryEventReview {
				get { return _FacebookStoryEventReview; }
				set {
					if (_FacebookStoryEventReview != value) {
						OnFacebookStoryEventReviewChanging(value);
						SendPropertyChanging();
						_FacebookStoryEventReview = value;
						SendPropertyChanged("FacebookStoryEventReview");
						OnFacebookStoryEventReviewChanged();
					}
				}
			}

			partial void OnFacebookStoryPostNewsChanging(bool value);
			partial void OnFacebookStoryPostNewsChanged();
			private bool _FacebookStoryPostNews;
			[Column(Storage="_FacebookStoryPostNews", DbType="Bit NOT NULL", CanBeNull=false)]
			public  override bool FacebookStoryPostNews {
				get { return _FacebookStoryPostNews; }
				set {
					if (_FacebookStoryPostNews != value) {
						OnFacebookStoryPostNewsChanging(value);
						SendPropertyChanging();
						_FacebookStoryPostNews = value;
						SendPropertyChanged("FacebookStoryPostNews");
						OnFacebookStoryPostNewsChanged();
					}
				}
			}

			partial void OnFacebookStoryLaughChanging(bool value);
			partial void OnFacebookStoryLaughChanged();
			private bool _FacebookStoryLaugh;
			[Column(Storage="_FacebookStoryLaugh", DbType="Bit NOT NULL", CanBeNull=false)]
			public  override bool FacebookStoryLaugh {
				get { return _FacebookStoryLaugh; }
				set {
					if (_FacebookStoryLaugh != value) {
						OnFacebookStoryLaughChanging(value);
						SendPropertyChanging();
						_FacebookStoryLaugh = value;
						SendPropertyChanged("FacebookStoryLaugh");
						OnFacebookStoryLaughChanged();
					}
				}
			}

			partial void OnFacebookEventAddChanging(bool value);
			partial void OnFacebookEventAddChanged();
			private bool _FacebookEventAdd;
			[Column(Storage="_FacebookEventAdd", DbType="Bit NOT NULL", CanBeNull=false)]
			public  override bool FacebookEventAdd {
				get { return _FacebookEventAdd; }
				set {
					if (_FacebookEventAdd != value) {
						OnFacebookEventAddChanging(value);
						SendPropertyChanging();
						_FacebookEventAdd = value;
						SendPropertyChanged("FacebookEventAdd");
						OnFacebookEventAddChanged();
					}
				}
			}

			partial void OnFacebookEventAttendChanging(bool value);
			partial void OnFacebookEventAttendChanged();
			private bool _FacebookEventAttend;
			[Column(Storage="_FacebookEventAttend", DbType="Bit NOT NULL", CanBeNull=false)]
			public  override bool FacebookEventAttend {
				get { return _FacebookEventAttend; }
				set {
					if (_FacebookEventAttend != value) {
						OnFacebookEventAttendChanging(value);
						SendPropertyChanging();
						_FacebookEventAttend = value;
						SendPropertyChanged("FacebookEventAttend");
						OnFacebookEventAttendChanged();
					}
				}
			}

			partial void OnFacebookEmailChanging(string value);
			partial void OnFacebookEmailChanged();
			private string _FacebookEmail;
			[Column(Storage="_FacebookEmail", DbType="VarChar(100)")]
			public  override string FacebookEmail {
				get { return _FacebookEmail; }
				set {
					if (_FacebookEmail != value) {
						OnFacebookEmailChanging(value);
						SendPropertyChanging();
						_FacebookEmail = value;
						SendPropertyChanged("FacebookEmail");
						OnFacebookEmailChanged();
					}
				}
			}

			partial void OnIsDjChanging(bool? value);
			partial void OnIsDjChanged();
			private bool? _IsDj;
			[Column(Storage="_IsDj", DbType="Bit")]
			public  override bool? IsDj {
				get { return _IsDj; }
				set {
					if (_IsDj != value) {
						OnIsDjChanging(value);
						SendPropertyChanging();
						_IsDj = value;
						SendPropertyChanged("IsDj");
						OnIsDjChanged();
					}
				}
			}

			partial void OnFacebookStoryChanging(bool? value);
			partial void OnFacebookStoryChanged();
			private bool? _FacebookStory;
			[Column(Storage="_FacebookStory", DbType="Bit")]
			public  override bool? FacebookStory {
				get { return _FacebookStory; }
				set {
					if (_FacebookStory != value) {
						OnFacebookStoryChanging(value);
						SendPropertyChanging();
						_FacebookStory = value;
						SendPropertyChanged("FacebookStory");
						OnFacebookStoryChanged();
					}
				}
			}

			partial void OnFacebookStory1Changing(bool value);
			partial void OnFacebookStory1Changed();
			private bool _FacebookStory1;
			[Column(Storage="_FacebookStory1", DbType="Bit NOT NULL", CanBeNull=false)]
			public  override bool FacebookStory1 {
				get { return _FacebookStory1; }
				set {
					if (_FacebookStory1 != value) {
						OnFacebookStory1Changing(value);
						SendPropertyChanging();
						_FacebookStory1 = value;
						SendPropertyChanged("FacebookStory1");
						OnFacebookStory1Changed();
					}
				}
			}

			partial void OnFacebookAccessTokenChanging(string value);
			partial void OnFacebookAccessTokenChanged();
			private string _FacebookAccessToken;
			[Column(Storage="_FacebookAccessToken", DbType="VarChar(128)")]
			public  override string FacebookAccessToken {
				get { return _FacebookAccessToken; }
				set {
					if (_FacebookAccessToken != value) {
						OnFacebookAccessTokenChanging(value);
						SendPropertyChanging();
						_FacebookAccessToken = value;
						SendPropertyChanged("FacebookAccessToken");
						OnFacebookAccessTokenChanged();
					}
				}
			}

			partial void OnFacebookStoryFavouriteTopicChanging(bool value);
			partial void OnFacebookStoryFavouriteTopicChanged();
			private bool _FacebookStoryFavouriteTopic;
			[Column(Storage="_FacebookStoryFavouriteTopic", DbType="Bit NOT NULL", CanBeNull=false)]
			public  override bool FacebookStoryFavouriteTopic {
				get { return _FacebookStoryFavouriteTopic; }
				set {
					if (_FacebookStoryFavouriteTopic != value) {
						OnFacebookStoryFavouriteTopicChanging(value);
						SendPropertyChanging();
						_FacebookStoryFavouriteTopic = value;
						SendPropertyChanged("FacebookStoryFavouriteTopic");
						OnFacebookStoryFavouriteTopicChanged();
					}
				}
			}

			partial void OnNeedsCaptchaChanging(bool? value);
			partial void OnNeedsCaptchaChanged();
			private bool? _NeedsCaptcha;
			[Column(Storage="_NeedsCaptcha", DbType="Bit")]
			public  override bool? NeedsCaptcha {
				get { return _NeedsCaptcha; }
				set {
					if (_NeedsCaptcha != value) {
						OnNeedsCaptchaChanging(value);
						SendPropertyChanging();
						_NeedsCaptcha = value;
						SendPropertyChanged("NeedsCaptcha");
						OnNeedsCaptchaChanged();
					}
				}
			}

			partial void OnPassedCaptchaChanging(bool? value);
			partial void OnPassedCaptchaChanged();
			private bool? _PassedCaptcha;
			[Column(Storage="_PassedCaptcha", DbType="Bit")]
			public  override bool? PassedCaptcha {
				get { return _PassedCaptcha; }
				set {
					if (_PassedCaptcha != value) {
						OnPassedCaptchaChanging(value);
						SendPropertyChanging();
						_PassedCaptcha = value;
						SendPropertyChanged("PassedCaptcha");
						OnPassedCaptchaChanged();
					}
				}
			}

			partial void OnBouncePeriodDateTimeChanging(DateTime? value);
			partial void OnBouncePeriodDateTimeChanged();
			private DateTime? _BouncePeriodDateTime;
			[Column(Storage="_BouncePeriodDateTime", DbType="DateTime")]
			public  override DateTime? BouncePeriodDateTime {
				get { return _BouncePeriodDateTime; }
				set {
					if (_BouncePeriodDateTime != value) {
						OnBouncePeriodDateTimeChanging(value);
						SendPropertyChanging();
						_BouncePeriodDateTime = value;
						SendPropertyChanged("BouncePeriodDateTime");
						OnBouncePeriodDateTimeChanged();
					}
				}
			}

			partial void OnTotalEmailsSentInPeriodChanging(int? value);
			partial void OnTotalEmailsSentInPeriodChanged();
			private int? _TotalEmailsSentInPeriod;
			[Column(Storage="_TotalEmailsSentInPeriod", DbType="Int")]
			public  override int? TotalEmailsSentInPeriod {
				get { return _TotalEmailsSentInPeriod; }
				set {
					if (_TotalEmailsSentInPeriod != value) {
						OnTotalEmailsSentInPeriodChanging(value);
						SendPropertyChanging();
						_TotalEmailsSentInPeriod = value;
						SendPropertyChanged("TotalEmailsSentInPeriod");
						OnTotalEmailsSentInPeriodChanged();
					}
				}
			}

			partial void OnMatchedHardBounceInPeriodChanging(int? value);
			partial void OnMatchedHardBounceInPeriodChanged();
			private int? _MatchedHardBounceInPeriod;
			[Column(Storage="_MatchedHardBounceInPeriod", DbType="Int")]
			public  override int? MatchedHardBounceInPeriod {
				get { return _MatchedHardBounceInPeriod; }
				set {
					if (_MatchedHardBounceInPeriod != value) {
						OnMatchedHardBounceInPeriodChanging(value);
						SendPropertyChanging();
						_MatchedHardBounceInPeriod = value;
						SendPropertyChanged("MatchedHardBounceInPeriod");
						OnMatchedHardBounceInPeriodChanged();
					}
				}
			}

			partial void OnUnmatchedHardBounceInPeriodChanging(int? value);
			partial void OnUnmatchedHardBounceInPeriodChanged();
			private int? _UnmatchedHardBounceInPeriod;
			[Column(Storage="_UnmatchedHardBounceInPeriod", DbType="Int")]
			public  override int? UnmatchedHardBounceInPeriod {
				get { return _UnmatchedHardBounceInPeriod; }
				set {
					if (_UnmatchedHardBounceInPeriod != value) {
						OnUnmatchedHardBounceInPeriodChanging(value);
						SendPropertyChanging();
						_UnmatchedHardBounceInPeriod = value;
						SendPropertyChanged("UnmatchedHardBounceInPeriod");
						OnUnmatchedHardBounceInPeriodChanged();
					}
				}
			}

			partial void OnSoftBounceInPeriodChanging(int? value);
			partial void OnSoftBounceInPeriodChanged();
			private int? _SoftBounceInPeriod;
			[Column(Storage="_SoftBounceInPeriod", DbType="Int")]
			public  override int? SoftBounceInPeriod {
				get { return _SoftBounceInPeriod; }
				set {
					if (_SoftBounceInPeriod != value) {
						OnSoftBounceInPeriodChanging(value);
						SendPropertyChanging();
						_SoftBounceInPeriod = value;
						SendPropertyChanged("SoftBounceInPeriod");
						OnSoftBounceInPeriodChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.Usr_FacebookUid_Not_Null")]
 		public partial class Usr_FacebookUid_Not_Null : Model.Entities.Usr_FacebookUid_Not_Null, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public Usr_FacebookUid_Not_Null()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnFacebookUidChanging(long? value);
			partial void OnFacebookUidChanged();
			private long? _FacebookUid;
			[Column(Storage="_FacebookUid", DbType="BigInt")]
			public  override long? FacebookUid {
				get { return _FacebookUid; }
				set {
					if (_FacebookUid != value) {
						OnFacebookUidChanging(value);
						SendPropertyChanging();
						_FacebookUid = value;
						SendPropertyChanged("FacebookUid");
						OnFacebookUidChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.UsrDate")]
 		public partial class UsrDate : Model.Entities.UsrDate, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public UsrDate()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnUsrKChanging(int value);
			partial void OnUsrKChanged();
			private int _UsrK;
			[Column(Storage="_UsrK", DbType="Int", CanBeNull=false)]
			public  override int UsrK {
				get { return _UsrK; }
				set {
					if (_UsrK != value) {
						OnUsrKChanging(value);
						SendPropertyChanging();
						_UsrK = value;
						SendPropertyChanged("UsrK");
						OnUsrKChanged();
					}
				}
			}

			partial void OnDateUsrKChanging(int value);
			partial void OnDateUsrKChanged();
			private int _DateUsrK;
			[Column(Storage="_DateUsrK", DbType="Int", CanBeNull=false)]
			public  override int DateUsrK {
				get { return _DateUsrK; }
				set {
					if (_DateUsrK != value) {
						OnDateUsrKChanging(value);
						SendPropertyChanging();
						_DateUsrK = value;
						SendPropertyChanged("DateUsrK");
						OnDateUsrKChanged();
					}
				}
			}

			partial void OnStatusChanging(Model.Entities.UsrDate.StatusEnum value);
			partial void OnStatusChanged();
			private Model.Entities.UsrDate.StatusEnum _Status;
			[Column(Storage="_Status", DbType="Int", CanBeNull=false)]
			public  override Model.Entities.UsrDate.StatusEnum Status {
				get { return _Status; }
				set {
					if (_Status != value) {
						OnStatusChanging(value);
						SendPropertyChanging();
						_Status = value;
						SendPropertyChanged("Status");
						OnStatusChanged();
					}
				}
			}

			partial void OnDateTimeChanging(DateTime value);
			partial void OnDateTimeChanged();
			private DateTime _DateTime;
			[Column(Storage="_DateTime", DbType="DateTime", CanBeNull=false)]
			public  override DateTime DateTime {
				get { return _DateTime; }
				set {
					if (_DateTime != value) {
						OnDateTimeChanging(value);
						SendPropertyChanging();
						_DateTime = value;
						SendPropertyChanged("DateTime");
						OnDateTimeChanged();
					}
				}
			}

			partial void OnPreMatchChanging(bool value);
			partial void OnPreMatchChanged();
			private bool _PreMatch;
			[Column(Storage="_PreMatch", DbType="Bit", CanBeNull=false)]
			public  override bool PreMatch {
				get { return _PreMatch; }
				set {
					if (_PreMatch != value) {
						OnPreMatchChanging(value);
						SendPropertyChanging();
						_PreMatch = value;
						SendPropertyChanged("PreMatch");
						OnPreMatchChanged();
					}
				}
			}

			partial void OnMatchChanging(Model.Entities.UsrDate.MatchEnum value);
			partial void OnMatchChanged();
			private Model.Entities.UsrDate.MatchEnum _Match;
			[Column(Storage="_Match", DbType="Int", CanBeNull=false)]
			public  override Model.Entities.UsrDate.MatchEnum Match {
				get { return _Match; }
				set {
					if (_Match != value) {
						OnMatchChanging(value);
						SendPropertyChanging();
						_Match = value;
						SendPropertyChanged("Match");
						OnMatchChanged();
					}
				}
			}

			partial void OnMatchDateTimeChanging(DateTime value);
			partial void OnMatchDateTimeChanged();
			private DateTime _MatchDateTime;
			[Column(Storage="_MatchDateTime", DbType="DateTime", CanBeNull=false)]
			public  override DateTime MatchDateTime {
				get { return _MatchDateTime; }
				set {
					if (_MatchDateTime != value) {
						OnMatchDateTimeChanging(value);
						SendPropertyChanging();
						_MatchDateTime = value;
						SendPropertyChanged("MatchDateTime");
						OnMatchDateTimeChanged();
					}
				}
			}

			partial void OnMatchThreadKChanging(int value);
			partial void OnMatchThreadKChanged();
			private int _MatchThreadK;
			[Column(Storage="_MatchThreadK", DbType="Int", CanBeNull=false)]
			public  override int MatchThreadK {
				get { return _MatchThreadK; }
				set {
					if (_MatchThreadK != value) {
						OnMatchThreadKChanging(value);
						SendPropertyChanging();
						_MatchThreadK = value;
						SendPropertyChanged("MatchThreadK");
						OnMatchThreadKChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.UsrDonationIcon")]
 		public partial class UsrDonationIcon : Model.Entities.UsrDonationIcon, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public UsrDonationIcon()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnKChanging(int value);
			partial void OnKChanged();
			private int _K;
			[Column(Storage="_K", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
			public  override int K {
				get { return _K; }
				set {
					if (_K != value) {
						OnKChanging(value);
						SendPropertyChanging();
						_K = value;
						SendPropertyChanged("K");
						OnKChanged();
					}
				}
			}

			partial void OnUsrKChanging(int value);
			partial void OnUsrKChanged();
			private int _UsrK;
			[Column(Storage="_UsrK", DbType="Int NOT NULL", CanBeNull=false)]
			public  override int UsrK {
				get { return _UsrK; }
				set {
					if (_UsrK != value) {
						OnUsrKChanging(value);
						SendPropertyChanging();
						_UsrK = value;
						SendPropertyChanged("UsrK");
						OnUsrKChanged();
					}
				}
			}

			partial void OnDonationIconKChanging(int value);
			partial void OnDonationIconKChanged();
			private int _DonationIconK;
			[Column(Storage="_DonationIconK", DbType="Int NOT NULL", CanBeNull=false)]
			public  override int DonationIconK {
				get { return _DonationIconK; }
				set {
					if (_DonationIconK != value) {
						OnDonationIconKChanging(value);
						SendPropertyChanging();
						_DonationIconK = value;
						SendPropertyChanged("DonationIconK");
						OnDonationIconKChanged();
					}
				}
			}

			partial void OnBuyDateTimeChanging(DateTime value);
			partial void OnBuyDateTimeChanged();
			private DateTime _BuyDateTime;
			[Column(Storage="_BuyDateTime", DbType="DateTime NOT NULL", CanBeNull=false)]
			public  override DateTime BuyDateTime {
				get { return _BuyDateTime; }
				set {
					if (_BuyDateTime != value) {
						OnBuyDateTimeChanging(value);
						SendPropertyChanging();
						_BuyDateTime = value;
						SendPropertyChanged("BuyDateTime");
						OnBuyDateTimeChanged();
					}
				}
			}

			partial void OnEnabledChanging(bool value);
			partial void OnEnabledChanged();
			private bool _Enabled;
			[Column(Storage="_Enabled", DbType="Bit NOT NULL", CanBeNull=false)]
			public  override bool Enabled {
				get { return _Enabled; }
				set {
					if (_Enabled != value) {
						OnEnabledChanging(value);
						SendPropertyChanging();
						_Enabled = value;
						SendPropertyChanged("Enabled");
						OnEnabledChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.UsrEventAttended")]
 		public partial class UsrEventAttended : Model.Entities.UsrEventAttended, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public UsrEventAttended()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnUsrKChanging(int value);
			partial void OnUsrKChanged();
			private int _UsrK;
			[Column(Storage="_UsrK", DbType="Int NOT NULL", CanBeNull=false)]
			public  override int UsrK {
				get { return _UsrK; }
				set {
					if (_UsrK != value) {
						OnUsrKChanging(value);
						SendPropertyChanging();
						_UsrK = value;
						SendPropertyChanged("UsrK");
						OnUsrKChanged();
					}
				}
			}

			partial void OnEventKChanging(int value);
			partial void OnEventKChanged();
			private int _EventK;
			[Column(Storage="_EventK", DbType="Int NOT NULL", CanBeNull=false)]
			public  override int EventK {
				get { return _EventK; }
				set {
					if (_EventK != value) {
						OnEventKChanging(value);
						SendPropertyChanging();
						_EventK = value;
						SendPropertyChanged("EventK");
						OnEventKChanged();
					}
				}
			}

			partial void OnSendUpdateChanging(bool value);
			partial void OnSendUpdateChanged();
			private bool _SendUpdate;
			[Column(Storage="_SendUpdate", DbType="Bit", CanBeNull=false)]
			public  override bool SendUpdate {
				get { return _SendUpdate; }
				set {
					if (_SendUpdate != value) {
						OnSendUpdateChanging(value);
						SendPropertyChanging();
						_SendUpdate = value;
						SendPropertyChanged("SendUpdate");
						OnSendUpdateChanged();
					}
				}
			}

			partial void OnSpotterChanging(bool value);
			partial void OnSpotterChanged();
			private bool _Spotter;
			[Column(Storage="_Spotter", DbType="Bit", CanBeNull=false)]
			public  override bool Spotter {
				get { return _Spotter; }
				set {
					if (_Spotter != value) {
						OnSpotterChanging(value);
						SendPropertyChanging();
						_Spotter = value;
						SendPropertyChanged("Spotter");
						OnSpotterChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.UsrEventGuestlist")]
 		public partial class UsrEventGuestlist : Model.Entities.UsrEventGuestlist, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public UsrEventGuestlist()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnUsrKChanging(int value);
			partial void OnUsrKChanged();
			private int _UsrK;
			[Column(Storage="_UsrK", DbType="Int", CanBeNull=false)]
			public  override int UsrK {
				get { return _UsrK; }
				set {
					if (_UsrK != value) {
						OnUsrKChanging(value);
						SendPropertyChanging();
						_UsrK = value;
						SendPropertyChanged("UsrK");
						OnUsrKChanged();
					}
				}
			}

			partial void OnEventKChanging(int value);
			partial void OnEventKChanged();
			private int _EventK;
			[Column(Storage="_EventK", DbType="Int", CanBeNull=false)]
			public  override int EventK {
				get { return _EventK; }
				set {
					if (_EventK != value) {
						OnEventKChanging(value);
						SendPropertyChanging();
						_EventK = value;
						SendPropertyChanged("EventK");
						OnEventKChanged();
					}
				}
			}

			partial void OnDateTimeChanging(DateTime value);
			partial void OnDateTimeChanged();
			private DateTime _DateTime;
			[Column(Storage="_DateTime", DbType="DateTime", CanBeNull=false)]
			public  override DateTime DateTime {
				get { return _DateTime; }
				set {
					if (_DateTime != value) {
						OnDateTimeChanging(value);
						SendPropertyChanging();
						_DateTime = value;
						SendPropertyChanged("DateTime");
						OnDateTimeChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.UsrMusicTypeFavourite")]
 		public partial class UsrMusicTypeFavourite : Model.Entities.UsrMusicTypeFavourite, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public UsrMusicTypeFavourite()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnUsrKChanging(int value);
			partial void OnUsrKChanged();
			private int _UsrK;
			[Column(Storage="_UsrK", DbType="Int NOT NULL", CanBeNull=false)]
			public  override int UsrK {
				get { return _UsrK; }
				set {
					if (_UsrK != value) {
						OnUsrKChanging(value);
						SendPropertyChanging();
						_UsrK = value;
						SendPropertyChanged("UsrK");
						OnUsrKChanged();
					}
				}
			}

			partial void OnMusicTypeKChanging(int value);
			partial void OnMusicTypeKChanged();
			private int _MusicTypeK;
			[Column(Storage="_MusicTypeK", DbType="Int NOT NULL", CanBeNull=false)]
			public  override int MusicTypeK {
				get { return _MusicTypeK; }
				set {
					if (_MusicTypeK != value) {
						OnMusicTypeKChanging(value);
						SendPropertyChanging();
						_MusicTypeK = value;
						SendPropertyChanged("MusicTypeK");
						OnMusicTypeKChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.UsrPhotoFavourite")]
 		public partial class UsrPhotoFavourite : Model.Entities.UsrPhotoFavourite, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public UsrPhotoFavourite()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnKChanging(int value);
			partial void OnKChanged();
			private int _K;
			[Column(Storage="_K", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
			public  override int K {
				get { return _K; }
				set {
					if (_K != value) {
						OnKChanging(value);
						SendPropertyChanging();
						_K = value;
						SendPropertyChanged("K");
						OnKChanged();
					}
				}
			}

			partial void OnUsrKChanging(int value);
			partial void OnUsrKChanged();
			private int _UsrK;
			[Column(Storage="_UsrK", DbType="Int NOT NULL", CanBeNull=false)]
			public  override int UsrK {
				get { return _UsrK; }
				set {
					if (_UsrK != value) {
						OnUsrKChanging(value);
						SendPropertyChanging();
						_UsrK = value;
						SendPropertyChanged("UsrK");
						OnUsrKChanged();
					}
				}
			}

			partial void OnPhotoKChanging(int value);
			partial void OnPhotoKChanged();
			private int _PhotoK;
			[Column(Storage="_PhotoK", DbType="Int NOT NULL", CanBeNull=false)]
			public  override int PhotoK {
				get { return _PhotoK; }
				set {
					if (_PhotoK != value) {
						OnPhotoKChanging(value);
						SendPropertyChanging();
						_PhotoK = value;
						SendPropertyChanged("PhotoK");
						OnPhotoKChanged();
					}
				}
			}

			partial void OnDateTimeAddedChanging(DateTime? value);
			partial void OnDateTimeAddedChanged();
			private DateTime? _DateTimeAdded;
			[Column(Storage="_DateTimeAdded", DbType="DateTime")]
			public  override DateTime? DateTimeAdded {
				get { return _DateTimeAdded; }
				set {
					if (_DateTimeAdded != value) {
						OnDateTimeAddedChanging(value);
						SendPropertyChanging();
						_DateTimeAdded = value;
						SendPropertyChanged("DateTimeAdded");
						OnDateTimeAddedChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.UsrPhotoMe")]
 		public partial class UsrPhotoMe : Model.Entities.UsrPhotoMe, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public UsrPhotoMe()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnKChanging(int value);
			partial void OnKChanged();
			private int _K;
			[Column(Storage="_K", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
			public  override int K {
				get { return _K; }
				set {
					if (_K != value) {
						OnKChanging(value);
						SendPropertyChanging();
						_K = value;
						SendPropertyChanged("K");
						OnKChanged();
					}
				}
			}

			partial void OnUsrKChanging(int value);
			partial void OnUsrKChanged();
			private int _UsrK;
			[Column(Storage="_UsrK", DbType="Int NOT NULL", CanBeNull=false)]
			public  override int UsrK {
				get { return _UsrK; }
				set {
					if (_UsrK != value) {
						OnUsrKChanging(value);
						SendPropertyChanging();
						_UsrK = value;
						SendPropertyChanged("UsrK");
						OnUsrKChanged();
					}
				}
			}

			partial void OnPhotoKChanging(int value);
			partial void OnPhotoKChanged();
			private int _PhotoK;
			[Column(Storage="_PhotoK", DbType="Int NOT NULL", CanBeNull=false)]
			public  override int PhotoK {
				get { return _PhotoK; }
				set {
					if (_PhotoK != value) {
						OnPhotoKChanging(value);
						SendPropertyChanging();
						_PhotoK = value;
						SendPropertyChanged("PhotoK");
						OnPhotoKChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.UsrPlaceVisit")]
 		public partial class UsrPlaceVisit : Model.Entities.UsrPlaceVisit, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public UsrPlaceVisit()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnUsrKChanging(int value);
			partial void OnUsrKChanged();
			private int _UsrK;
			[Column(Storage="_UsrK", DbType="Int NOT NULL", CanBeNull=false)]
			public  override int UsrK {
				get { return _UsrK; }
				set {
					if (_UsrK != value) {
						OnUsrKChanging(value);
						SendPropertyChanging();
						_UsrK = value;
						SendPropertyChanged("UsrK");
						OnUsrKChanged();
					}
				}
			}

			partial void OnPlaceKChanging(int value);
			partial void OnPlaceKChanged();
			private int _PlaceK;
			[Column(Storage="_PlaceK", DbType="Int NOT NULL", CanBeNull=false)]
			public  override int PlaceK {
				get { return _PlaceK; }
				set {
					if (_PlaceK != value) {
						OnPlaceKChanging(value);
						SendPropertyChanging();
						_PlaceK = value;
						SendPropertyChanged("PlaceK");
						OnPlaceKChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.Venue")]
 		public partial class Venue : Model.Entities.Venue, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public Venue()
			{
				_Events = new EntitySet<Event>(attach_Events, detach_Events);
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnKChanging(int value);
			partial void OnKChanged();
			private int _K;
			[Column(Storage="_K", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
			public  override int K {
				get { return _K; }
				set {
					if (_K != value) {
						OnKChanging(value);
						SendPropertyChanging();
						_K = value;
						SendPropertyChanged("K");
						OnKChanged();
					}
				}
			}

			partial void OnNameChanging(string value);
			partial void OnNameChanged();
			private string _Name;
			[Column(Storage="_Name", DbType="VarChar(200)", CanBeNull=false)]
			public  override string Name {
				get { return _Name; }
				set {
					if (_Name != value) {
						OnNameChanging(value);
						SendPropertyChanging();
						_Name = value;
						SendPropertyChanged("Name");
						OnNameChanged();
					}
				}
			}

			partial void OnDetailsHtmlChanging(string value);
			partial void OnDetailsHtmlChanged();
			private string _DetailsHtml;
			[Column(Storage="_DetailsHtml", DbType="Text", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
			public  override string DetailsHtml {
				get { return _DetailsHtml; }
				set {
					if (_DetailsHtml != value) {
						OnDetailsHtmlChanging(value);
						SendPropertyChanging();
						_DetailsHtml = value;
						SendPropertyChanged("DetailsHtml");
						OnDetailsHtmlChanged();
					}
				}
			}

			partial void OnPostcodeChanging(string value);
			partial void OnPostcodeChanged();
			private string _Postcode;
			[Column(Storage="_Postcode", DbType="VarChar(10)", CanBeNull=false)]
			public  override string Postcode {
				get { return _Postcode; }
				set {
					if (_Postcode != value) {
						OnPostcodeChanging(value);
						SendPropertyChanging();
						_Postcode = value;
						SendPropertyChanged("Postcode");
						OnPostcodeChanged();
					}
				}
			}

			partial void OnPlaceKChanging(int value);
			partial void OnPlaceKChanged();
			private int _PlaceK;
			[Column(Storage="_PlaceK", DbType="Int", CanBeNull=false)]
			public  override int PlaceK {
				get { return _PlaceK; }
				set {
					if (_PlaceK != value) {
						OnPlaceKChanging(value);
						SendPropertyChanging();
						_PlaceK = value;
						SendPropertyChanged("PlaceK");
						OnPlaceKChanged();
					}
				}
			}

			partial void OnAdminNoteChanging(string value);
			partial void OnAdminNoteChanged();
			private string _AdminNote;
			[Column(Storage="_AdminNote", DbType="Text", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
			public  override string AdminNote {
				get { return _AdminNote; }
				set {
					if (_AdminNote != value) {
						OnAdminNoteChanging(value);
						SendPropertyChanging();
						_AdminNote = value;
						SendPropertyChanged("AdminNote");
						OnAdminNoteChanged();
					}
				}
			}

			partial void OnPicChanging(Guid value);
			partial void OnPicChanged();
			private Guid _Pic;
			[Column(Storage="_Pic", DbType="UniqueIdentifier", CanBeNull=false)]
			public  override Guid Pic {
				get { return _Pic; }
				set {
					if (_Pic != value) {
						OnPicChanging(value);
						SendPropertyChanging();
						_Pic = value;
						SendPropertyChanged("Pic");
						OnPicChanged();
					}
				}
			}

			partial void OnOverrideMapUrlChanging(string value);
			partial void OnOverrideMapUrlChanged();
			private string _OverrideMapUrl;
			[Column(Storage="_OverrideMapUrl", DbType="VarChar(100)", CanBeNull=false)]
			public  override string OverrideMapUrl {
				get { return _OverrideMapUrl; }
				set {
					if (_OverrideMapUrl != value) {
						OnOverrideMapUrlChanging(value);
						SendPropertyChanging();
						_OverrideMapUrl = value;
						SendPropertyChanged("OverrideMapUrl");
						OnOverrideMapUrlChanged();
					}
				}
			}

			partial void OnOwnerUsrKChanging(int value);
			partial void OnOwnerUsrKChanged();
			private int _OwnerUsrK;
			[Column(Storage="_OwnerUsrK", DbType="Int", CanBeNull=false)]
			public  override int OwnerUsrK {
				get { return _OwnerUsrK; }
				set {
					if (_OwnerUsrK != value) {
						OnOwnerUsrKChanging(value);
						SendPropertyChanging();
						_OwnerUsrK = value;
						SendPropertyChanged("OwnerUsrK");
						OnOwnerUsrKChanged();
					}
				}
			}

			partial void OnPicNewChanging(Guid value);
			partial void OnPicNewChanged();
			private Guid _PicNew;
			[Column(Storage="_PicNew", DbType="UniqueIdentifier", CanBeNull=false)]
			public  override Guid PicNew {
				get { return _PicNew; }
				set {
					if (_PicNew != value) {
						OnPicNewChanging(value);
						SendPropertyChanging();
						_PicNew = value;
						SendPropertyChanged("PicNew");
						OnPicNewChanged();
					}
				}
			}

			partial void OnCapacityChanging(int value);
			partial void OnCapacityChanged();
			private int _Capacity;
			[Column(Storage="_Capacity", DbType="Int", CanBeNull=false)]
			public  override int Capacity {
				get { return _Capacity; }
				set {
					if (_Capacity != value) {
						OnCapacityChanging(value);
						SendPropertyChanging();
						_Capacity = value;
						SendPropertyChanged("Capacity");
						OnCapacityChanged();
					}
				}
			}

			partial void OnTotalCommentsChanging(int value);
			partial void OnTotalCommentsChanged();
			private int _TotalComments;
			[Column(Storage="_TotalComments", DbType="Int", CanBeNull=false)]
			public  override int TotalComments {
				get { return _TotalComments; }
				set {
					if (_TotalComments != value) {
						OnTotalCommentsChanging(value);
						SendPropertyChanging();
						_TotalComments = value;
						SendPropertyChanged("TotalComments");
						OnTotalCommentsChanged();
					}
				}
			}

			partial void OnLastPostChanging(DateTime value);
			partial void OnLastPostChanged();
			private DateTime _LastPost;
			[Column(Storage="_LastPost", DbType="DateTime", CanBeNull=false)]
			public  override DateTime LastPost {
				get { return _LastPost; }
				set {
					if (_LastPost != value) {
						OnLastPostChanging(value);
						SendPropertyChanging();
						_LastPost = value;
						SendPropertyChanged("LastPost");
						OnLastPostChanged();
					}
				}
			}

			partial void OnAverageCommentDateTimeChanging(DateTime value);
			partial void OnAverageCommentDateTimeChanged();
			private DateTime _AverageCommentDateTime;
			[Column(Storage="_AverageCommentDateTime", DbType="DateTime", CanBeNull=false)]
			public  override DateTime AverageCommentDateTime {
				get { return _AverageCommentDateTime; }
				set {
					if (_AverageCommentDateTime != value) {
						OnAverageCommentDateTimeChanging(value);
						SendPropertyChanging();
						_AverageCommentDateTime = value;
						SendPropertyChanged("AverageCommentDateTime");
						OnAverageCommentDateTimeChanged();
					}
				}
			}

			partial void OnAddedDateTimeChanging(DateTime value);
			partial void OnAddedDateTimeChanged();
			private DateTime _AddedDateTime;
			[Column(Storage="_AddedDateTime", DbType="DateTime", CanBeNull=false)]
			public  override DateTime AddedDateTime {
				get { return _AddedDateTime; }
				set {
					if (_AddedDateTime != value) {
						OnAddedDateTimeChanging(value);
						SendPropertyChanging();
						_AddedDateTime = value;
						SendPropertyChanged("AddedDateTime");
						OnAddedDateTimeChanged();
					}
				}
			}

			partial void OnNoPhotosChanging(bool value);
			partial void OnNoPhotosChanged();
			private bool _NoPhotos;
			[Column(Storage="_NoPhotos", DbType="Bit", CanBeNull=false)]
			public  override bool NoPhotos {
				get { return _NoPhotos; }
				set {
					if (_NoPhotos != value) {
						OnNoPhotosChanging(value);
						SendPropertyChanging();
						_NoPhotos = value;
						SendPropertyChanged("NoPhotos");
						OnNoPhotosChanged();
					}
				}
			}

			partial void OnAdminEmailChanging(string value);
			partial void OnAdminEmailChanged();
			private string _AdminEmail;
			[Column(Storage="_AdminEmail", DbType="VarChar(50)", CanBeNull=false)]
			public  override string AdminEmail {
				get { return _AdminEmail; }
				set {
					if (_AdminEmail != value) {
						OnAdminEmailChanging(value);
						SendPropertyChanging();
						_AdminEmail = value;
						SendPropertyChanged("AdminEmail");
						OnAdminEmailChanged();
					}
				}
			}

			partial void OnIsDescriptionTextChanging(bool value);
			partial void OnIsDescriptionTextChanged();
			private bool _IsDescriptionText;
			[Column(Storage="_IsDescriptionText", DbType="Bit", CanBeNull=false)]
			public  override bool IsDescriptionText {
				get { return _IsDescriptionText; }
				set {
					if (_IsDescriptionText != value) {
						OnIsDescriptionTextChanging(value);
						SendPropertyChanging();
						_IsDescriptionText = value;
						SendPropertyChanged("IsDescriptionText");
						OnIsDescriptionTextChanged();
					}
				}
			}

			partial void OnIsNewChanging(bool value);
			partial void OnIsNewChanged();
			private bool _IsNew;
			[Column(Storage="_IsNew", DbType="Bit", CanBeNull=false)]
			public  override bool IsNew {
				get { return _IsNew; }
				set {
					if (_IsNew != value) {
						OnIsNewChanging(value);
						SendPropertyChanging();
						_IsNew = value;
						SendPropertyChanged("IsNew");
						OnIsNewChanged();
					}
				}
			}

			partial void OnNoPrintsChanging(bool value);
			partial void OnNoPrintsChanged();
			private bool _NoPrints;
			[Column(Storage="_NoPrints", DbType="Bit", CanBeNull=false)]
			public  override bool NoPrints {
				get { return _NoPrints; }
				set {
					if (_NoPrints != value) {
						OnNoPrintsChanging(value);
						SendPropertyChanging();
						_NoPrints = value;
						SendPropertyChanged("NoPrints");
						OnNoPrintsChanged();
					}
				}
			}

			partial void OnIsDescriptionCleanHtmlChanging(bool value);
			partial void OnIsDescriptionCleanHtmlChanged();
			private bool _IsDescriptionCleanHtml;
			[Column(Storage="_IsDescriptionCleanHtml", DbType="Bit", CanBeNull=false)]
			public  override bool IsDescriptionCleanHtml {
				get { return _IsDescriptionCleanHtml; }
				set {
					if (_IsDescriptionCleanHtml != value) {
						OnIsDescriptionCleanHtmlChanging(value);
						SendPropertyChanging();
						_IsDescriptionCleanHtml = value;
						SendPropertyChanged("IsDescriptionCleanHtml");
						OnIsDescriptionCleanHtmlChanged();
					}
				}
			}

			partial void OnIsEditedChanging(bool value);
			partial void OnIsEditedChanged();
			private bool _IsEdited;
			[Column(Storage="_IsEdited", DbType="Bit", CanBeNull=false)]
			public  override bool IsEdited {
				get { return _IsEdited; }
				set {
					if (_IsEdited != value) {
						OnIsEditedChanging(value);
						SendPropertyChanging();
						_IsEdited = value;
						SendPropertyChanged("IsEdited");
						OnIsEditedChanged();
					}
				}
			}

			partial void OnDuplicateGuidChanging(Guid value);
			partial void OnDuplicateGuidChanged();
			private Guid _DuplicateGuid;
			[Column(Storage="_DuplicateGuid", DbType="UniqueIdentifier", CanBeNull=false)]
			public  override Guid DuplicateGuid {
				get { return _DuplicateGuid; }
				set {
					if (_DuplicateGuid != value) {
						OnDuplicateGuidChanging(value);
						SendPropertyChanging();
						_DuplicateGuid = value;
						SendPropertyChanged("DuplicateGuid");
						OnDuplicateGuidChanged();
					}
				}
			}

			partial void OnRegularEventsChanging(bool value);
			partial void OnRegularEventsChanged();
			private bool _RegularEvents;
			[Column(Storage="_RegularEvents", DbType="Bit", CanBeNull=false)]
			public  override bool RegularEvents {
				get { return _RegularEvents; }
				set {
					if (_RegularEvents != value) {
						OnRegularEventsChanging(value);
						SendPropertyChanging();
						_RegularEvents = value;
						SendPropertyChanged("RegularEvents");
						OnRegularEventsChanged();
					}
				}
			}

			partial void OnUrlNameChanging(string value);
			partial void OnUrlNameChanged();
			private string _UrlName;
			[Column(Storage="_UrlName", DbType="VarChar(200)", CanBeNull=false)]
			public  override string UrlName {
				get { return _UrlName; }
				set {
					if (_UrlName != value) {
						OnUrlNameChanging(value);
						SendPropertyChanging();
						_UrlName = value;
						SendPropertyChanged("UrlName");
						OnUrlNameChanged();
					}
				}
			}

			partial void OnPromoterKChanging(int value);
			partial void OnPromoterKChanged();
			private int _PromoterK;
			[Column(Storage="_PromoterK", DbType="Int", CanBeNull=false)]
			public  override int PromoterK {
				get { return _PromoterK; }
				set {
					if (_PromoterK != value) {
						OnPromoterKChanging(value);
						SendPropertyChanging();
						_PromoterK = value;
						SendPropertyChanged("PromoterK");
						OnPromoterKChanged();
					}
				}
			}

			partial void OnPicStateChanging(string value);
			partial void OnPicStateChanged();
			private string _PicState;
			[Column(Storage="_PicState", DbType="VarChar(100)", CanBeNull=false)]
			public  override string PicState {
				get { return _PicState; }
				set {
					if (_PicState != value) {
						OnPicStateChanging(value);
						SendPropertyChanging();
						_PicState = value;
						SendPropertyChanged("PicState");
						OnPicStateChanged();
					}
				}
			}

			partial void OnPicPhotoKChanging(int value);
			partial void OnPicPhotoKChanged();
			private int _PicPhotoK;
			[Column(Storage="_PicPhotoK", DbType="Int", CanBeNull=false)]
			public  override int PicPhotoK {
				get { return _PicPhotoK; }
				set {
					if (_PicPhotoK != value) {
						OnPicPhotoKChanging(value);
						SendPropertyChanging();
						_PicPhotoK = value;
						SendPropertyChanged("PicPhotoK");
						OnPicPhotoKChanged();
					}
				}
			}

			partial void OnPicMiscKChanging(int value);
			partial void OnPicMiscKChanged();
			private int _PicMiscK;
			[Column(Storage="_PicMiscK", DbType="Int", CanBeNull=false)]
			public  override int PicMiscK {
				get { return _PicMiscK; }
				set {
					if (_PicMiscK != value) {
						OnPicMiscKChanging(value);
						SendPropertyChanging();
						_PicMiscK = value;
						SendPropertyChanged("PicMiscK");
						OnPicMiscKChanged();
					}
				}
			}

			partial void OnUrlFragmentChanging(string value);
			partial void OnUrlFragmentChanged();
			private string _UrlFragment;
			[Column(Storage="_UrlFragment", DbType="VarChar(255)", CanBeNull=false)]
			public  override string UrlFragment {
				get { return _UrlFragment; }
				set {
					if (_UrlFragment != value) {
						OnUrlFragmentChanging(value);
						SendPropertyChanging();
						_UrlFragment = value;
						SendPropertyChanged("UrlFragment");
						OnUrlFragmentChanged();
					}
				}
			}

			partial void OnModeratorUsrKChanging(int value);
			partial void OnModeratorUsrKChanged();
			private int _ModeratorUsrK;
			[Column(Storage="_ModeratorUsrK", DbType="Int", CanBeNull=false)]
			public  override int ModeratorUsrK {
				get { return _ModeratorUsrK; }
				set {
					if (_ModeratorUsrK != value) {
						OnModeratorUsrKChanging(value);
						SendPropertyChanging();
						_ModeratorUsrK = value;
						SendPropertyChanged("ModeratorUsrK");
						OnModeratorUsrKChanged();
					}
				}
			}

			partial void OnTotalEventsChanging(int value);
			partial void OnTotalEventsChanged();
			private int _TotalEvents;
			[Column(Storage="_TotalEvents", DbType="Int", CanBeNull=false)]
			public  override int TotalEvents {
				get { return _TotalEvents; }
				set {
					if (_TotalEvents != value) {
						OnTotalEventsChanging(value);
						SendPropertyChanging();
						_TotalEvents = value;
						SendPropertyChanged("TotalEvents");
						OnTotalEventsChanged();
					}
				}
			}

			partial void OnPromoterStatusChanging(Model.Entities.Venue.PromoterStatusEnum value);
			partial void OnPromoterStatusChanged();
			private Model.Entities.Venue.PromoterStatusEnum _PromoterStatus;
			[Column(Storage="_PromoterStatus", DbType="Int", CanBeNull=false)]
			public  override Model.Entities.Venue.PromoterStatusEnum PromoterStatus {
				get { return _PromoterStatus; }
				set {
					if (_PromoterStatus != value) {
						OnPromoterStatusChanging(value);
						SendPropertyChanging();
						_PromoterStatus = value;
						SendPropertyChanged("PromoterStatus");
						OnPromoterStatusChanged();
					}
				}
			}

			partial void OnDetailsPlainChanging(bool value);
			partial void OnDetailsPlainChanged();
			private bool _DetailsPlain;
			[Column(Storage="_DetailsPlain", DbType="Bit", CanBeNull=false)]
			public  override bool DetailsPlain {
				get { return _DetailsPlain; }
				set {
					if (_DetailsPlain != value) {
						OnDetailsPlainChanging(value);
						SendPropertyChanging();
						_DetailsPlain = value;
						SendPropertyChanged("DetailsPlain");
						OnDetailsPlainChanged();
					}
				}
			}

			partial void OnStyledCssChanging(string value);
			partial void OnStyledCssChanged();
			private string _StyledCss;
			[Column(Storage="_StyledCss", DbType="Text", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
			public  override string StyledCss {
				get { return _StyledCss; }
				set {
					if (_StyledCss != value) {
						OnStyledCssChanging(value);
						SendPropertyChanging();
						_StyledCss = value;
						SendPropertyChanged("StyledCss");
						OnStyledCssChanged();
					}
				}
			}

			partial void OnStyledXmlChanging(string value);
			partial void OnStyledXmlChanged();
			private string _StyledXml;
			[Column(Storage="_StyledXml", DbType="Text", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
			public  override string StyledXml {
				get { return _StyledXml; }
				set {
					if (_StyledXml != value) {
						OnStyledXmlChanging(value);
						SendPropertyChanging();
						_StyledXml = value;
						SendPropertyChanged("StyledXml");
						OnStyledXmlChanged();
					}
				}
			}


			#endregion

			#region Associations

			private EntitySet<Event> _Events;
			[Association(Name="Venue_Event", Storage="_Events", OtherKey="VenueK")]
			public EntitySet<Event> Events {
				get {
					return _Events; 
				}
				set { _Events.Assign(value); }
			}
		
			private void attach_Events(Event entity) {
				SendPropertyChanging();
				entity.Venue = this;
			}
		
			private void detach_Events(Event entity) {
				SendPropertyChanging();
				entity.Venue = null;
			}
			#endregion
		

		}

		[Table(Name=@"dbo.Visit")]
 		public partial class Visit : Model.Entities.Visit, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public Visit()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnKChanging(int value);
			partial void OnKChanged();
			private int _K;
			[Column(Storage="_K", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
			public  override int K {
				get { return _K; }
				set {
					if (_K != value) {
						OnKChanging(value);
						SendPropertyChanging();
						_K = value;
						SendPropertyChanged("K");
						OnKChanged();
					}
				}
			}

			partial void OnGuidChanging(Guid value);
			partial void OnGuidChanged();
			private Guid _Guid;
			[Column(Storage="_Guid", DbType="UniqueIdentifier", CanBeNull=false)]
			public  override Guid Guid {
				get { return _Guid; }
				set {
					if (_Guid != value) {
						OnGuidChanging(value);
						SendPropertyChanging();
						_Guid = value;
						SendPropertyChanged("Guid");
						OnGuidChanged();
					}
				}
			}

			partial void OnUsrKChanging(int value);
			partial void OnUsrKChanged();
			private int _UsrK;
			[Column(Storage="_UsrK", DbType="Int", CanBeNull=false)]
			public  override int UsrK {
				get { return _UsrK; }
				set {
					if (_UsrK != value) {
						OnUsrKChanging(value);
						SendPropertyChanging();
						_UsrK = value;
						SendPropertyChanged("UsrK");
						OnUsrKChanged();
					}
				}
			}

			partial void OnPagesChanging(int value);
			partial void OnPagesChanged();
			private int _Pages;
			[Column(Storage="_Pages", DbType="Int", CanBeNull=false)]
			public  override int Pages {
				get { return _Pages; }
				set {
					if (_Pages != value) {
						OnPagesChanging(value);
						SendPropertyChanging();
						_Pages = value;
						SendPropertyChanged("Pages");
						OnPagesChanged();
					}
				}
			}

			partial void OnCommentsChanging(int value);
			partial void OnCommentsChanged();
			private int _Comments;
			[Column(Storage="_Comments", DbType="Int", CanBeNull=false)]
			public  override int Comments {
				get { return _Comments; }
				set {
					if (_Comments != value) {
						OnCommentsChanging(value);
						SendPropertyChanging();
						_Comments = value;
						SendPropertyChanged("Comments");
						OnCommentsChanged();
					}
				}
			}

			partial void OnChatMessagesChanging(int value);
			partial void OnChatMessagesChanged();
			private int _ChatMessages;
			[Column(Storage="_ChatMessages", DbType="Int", CanBeNull=false)]
			public  override int ChatMessages {
				get { return _ChatMessages; }
				set {
					if (_ChatMessages != value) {
						OnChatMessagesChanging(value);
						SendPropertyChanging();
						_ChatMessages = value;
						SendPropertyChanged("ChatMessages");
						OnChatMessagesChanged();
					}
				}
			}

			partial void OnHitsChanging(int value);
			partial void OnHitsChanged();
			private int _Hits;
			[Column(Storage="_Hits", DbType="Int", CanBeNull=false)]
			public  override int Hits {
				get { return _Hits; }
				set {
					if (_Hits != value) {
						OnHitsChanging(value);
						SendPropertyChanging();
						_Hits = value;
						SendPropertyChanged("Hits");
						OnHitsChanged();
					}
				}
			}

			partial void OnPhotosChanging(int value);
			partial void OnPhotosChanged();
			private int _Photos;
			[Column(Storage="_Photos", DbType="Int", CanBeNull=false)]
			public  override int Photos {
				get { return _Photos; }
				set {
					if (_Photos != value) {
						OnPhotosChanging(value);
						SendPropertyChanging();
						_Photos = value;
						SendPropertyChanged("Photos");
						OnPhotosChanged();
					}
				}
			}

			partial void OnTopBannerClicksChanging(int value);
			partial void OnTopBannerClicksChanged();
			private int _TopBannerClicks;
			[Column(Storage="_TopBannerClicks", DbType="Int", CanBeNull=false)]
			public  override int TopBannerClicks {
				get { return _TopBannerClicks; }
				set {
					if (_TopBannerClicks != value) {
						OnTopBannerClicksChanging(value);
						SendPropertyChanging();
						_TopBannerClicks = value;
						SendPropertyChanged("TopBannerClicks");
						OnTopBannerClicksChanged();
					}
				}
			}

			partial void OnHotboxClicksChanging(int value);
			partial void OnHotboxClicksChanged();
			private int _HotboxClicks;
			[Column(Storage="_HotboxClicks", DbType="Int", CanBeNull=false)]
			public  override int HotboxClicks {
				get { return _HotboxClicks; }
				set {
					if (_HotboxClicks != value) {
						OnHotboxClicksChanging(value);
						SendPropertyChanging();
						_HotboxClicks = value;
						SendPropertyChanged("HotboxClicks");
						OnHotboxClicksChanged();
					}
				}
			}

			partial void OnPhotoBannerClicksChanging(int value);
			partial void OnPhotoBannerClicksChanged();
			private int _PhotoBannerClicks;
			[Column(Storage="_PhotoBannerClicks", DbType="Int", CanBeNull=false)]
			public  override int PhotoBannerClicks {
				get { return _PhotoBannerClicks; }
				set {
					if (_PhotoBannerClicks != value) {
						OnPhotoBannerClicksChanging(value);
						SendPropertyChanging();
						_PhotoBannerClicks = value;
						SendPropertyChanged("PhotoBannerClicks");
						OnPhotoBannerClicksChanged();
					}
				}
			}

			partial void OnDateTimeStartChanging(DateTime value);
			partial void OnDateTimeStartChanged();
			private DateTime _DateTimeStart;
			[Column(Storage="_DateTimeStart", DbType="DateTime", CanBeNull=false)]
			public  override DateTime DateTimeStart {
				get { return _DateTimeStart; }
				set {
					if (_DateTimeStart != value) {
						OnDateTimeStartChanging(value);
						SendPropertyChanging();
						_DateTimeStart = value;
						SendPropertyChanged("DateTimeStart");
						OnDateTimeStartChanged();
					}
				}
			}

			partial void OnDateTimeLastChanging(DateTime value);
			partial void OnDateTimeLastChanged();
			private DateTime _DateTimeLast;
			[Column(Storage="_DateTimeLast", DbType="DateTime", CanBeNull=false)]
			public  override DateTime DateTimeLast {
				get { return _DateTimeLast; }
				set {
					if (_DateTimeLast != value) {
						OnDateTimeLastChanging(value);
						SendPropertyChanging();
						_DateTimeLast = value;
						SendPropertyChanged("DateTimeLast");
						OnDateTimeLastChanged();
					}
				}
			}

			partial void OnIpAddressChanging(string value);
			partial void OnIpAddressChanged();
			private string _IpAddress;
			[Column(Storage="_IpAddress", DbType="VarChar(15)", CanBeNull=false)]
			public  override string IpAddress {
				get { return _IpAddress; }
				set {
					if (_IpAddress != value) {
						OnIpAddressChanging(value);
						SendPropertyChanging();
						_IpAddress = value;
						SendPropertyChanged("IpAddress");
						OnIpAddressChanged();
					}
				}
			}

			partial void OnIsNewGuidChanging(bool value);
			partial void OnIsNewGuidChanged();
			private bool _IsNewGuid;
			[Column(Storage="_IsNewGuid", DbType="Bit", CanBeNull=false)]
			public  override bool IsNewGuid {
				get { return _IsNewGuid; }
				set {
					if (_IsNewGuid != value) {
						OnIsNewGuidChanging(value);
						SendPropertyChanging();
						_IsNewGuid = value;
						SendPropertyChanged("IsNewGuid");
						OnIsNewGuidChanged();
					}
				}
			}

			partial void OnCountryKChanging(int value);
			partial void OnCountryKChanged();
			private int _CountryK;
			[Column(Storage="_CountryK", DbType="Int", CanBeNull=false)]
			public  override int CountryK {
				get { return _CountryK; }
				set {
					if (_CountryK != value) {
						OnCountryKChanging(value);
						SendPropertyChanging();
						_CountryK = value;
						SendPropertyChanged("CountryK");
						OnCountryKChanged();
					}
				}
			}

			partial void OnIsFromExternalChanging(bool value);
			partial void OnIsFromExternalChanged();
			private bool _IsFromExternal;
			[Column(Storage="_IsFromExternal", DbType="Bit", CanBeNull=false)]
			public  override bool IsFromExternal {
				get { return _IsFromExternal; }
				set {
					if (_IsFromExternal != value) {
						OnIsFromExternalChanging(value);
						SendPropertyChanging();
						_IsFromExternal = value;
						SendPropertyChanged("IsFromExternal");
						OnIsFromExternalChanged();
					}
				}
			}

			partial void OnExternalTagChanging(string value);
			partial void OnExternalTagChanged();
			private string _ExternalTag;
			[Column(Storage="_ExternalTag", DbType="VarChar(50)", CanBeNull=false)]
			public  override string ExternalTag {
				get { return _ExternalTag; }
				set {
					if (_ExternalTag != value) {
						OnExternalTagChanging(value);
						SendPropertyChanging();
						_ExternalTag = value;
						SendPropertyChanged("ExternalTag");
						OnExternalTagChanged();
					}
				}
			}

			partial void OnDomainKChanging(int value);
			partial void OnDomainKChanged();
			private int _DomainK;
			[Column(Storage="_DomainK", DbType="Int", CanBeNull=false)]
			public  override int DomainK {
				get { return _DomainK; }
				set {
					if (_DomainK != value) {
						OnDomainKChanging(value);
						SendPropertyChanging();
						_DomainK = value;
						SendPropertyChanged("DomainK");
						OnDomainKChanged();
					}
				}
			}

			partial void OnIsCrawlerChanging(bool value);
			partial void OnIsCrawlerChanged();
			private bool _IsCrawler;
			[Column(Storage="_IsCrawler", DbType="Bit", CanBeNull=false)]
			public  override bool IsCrawler {
				get { return _IsCrawler; }
				set {
					if (_IsCrawler != value) {
						OnIsCrawlerChanging(value);
						SendPropertyChanging();
						_IsCrawler = value;
						SendPropertyChanged("IsCrawler");
						OnIsCrawlerChanged();
					}
				}
			}

			partial void OnUserAgentChanging(string value);
			partial void OnUserAgentChanged();
			private string _UserAgent;
			[Column(Storage="_UserAgent", DbType="VarChar(400)")]
			public  override string UserAgent {
				get { return _UserAgent; }
				set {
					if (_UserAgent != value) {
						OnUserAgentChanging(value);
						SendPropertyChanging();
						_UserAgent = value;
						SendPropertyChanged("UserAgent");
						OnUserAgentChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.VisitView")]
 		public partial class VisitView : Model.Entities.VisitView, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public VisitView()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnKChanging(int value);
			partial void OnKChanged();
			private int _K;
			[Column(Storage="_K", DbType="Int NOT NULL IDENTITY", CanBeNull=false)]
			public  override int K {
				get { return _K; }
				set {
					if (_K != value) {
						OnKChanging(value);
						SendPropertyChanging();
						_K = value;
						SendPropertyChanged("K");
						OnKChanged();
					}
				}
			}

			partial void OnGuidChanging(string value);
			partial void OnGuidChanged();
			private string _Guid;
			[Column(Storage="_Guid", DbType="Char(36)")]
			public  override string Guid {
				get { return _Guid; }
				set {
					if (_Guid != value) {
						OnGuidChanging(value);
						SendPropertyChanging();
						_Guid = value;
						SendPropertyChanged("Guid");
						OnGuidChanged();
					}
				}
			}

			partial void OnUsrKChanging(int? value);
			partial void OnUsrKChanged();
			private int? _UsrK;
			[Column(Storage="_UsrK", DbType="Int")]
			public  override int? UsrK {
				get { return _UsrK; }
				set {
					if (_UsrK != value) {
						OnUsrKChanging(value);
						SendPropertyChanging();
						_UsrK = value;
						SendPropertyChanged("UsrK");
						OnUsrKChanged();
					}
				}
			}

			partial void OnPagesChanging(int? value);
			partial void OnPagesChanged();
			private int? _Pages;
			[Column(Storage="_Pages", DbType="Int")]
			public  override int? Pages {
				get { return _Pages; }
				set {
					if (_Pages != value) {
						OnPagesChanging(value);
						SendPropertyChanging();
						_Pages = value;
						SendPropertyChanged("Pages");
						OnPagesChanged();
					}
				}
			}

			partial void OnHitsChanging(int? value);
			partial void OnHitsChanged();
			private int? _Hits;
			[Column(Storage="_Hits", DbType="Int")]
			public  override int? Hits {
				get { return _Hits; }
				set {
					if (_Hits != value) {
						OnHitsChanging(value);
						SendPropertyChanging();
						_Hits = value;
						SendPropertyChanged("Hits");
						OnHitsChanged();
					}
				}
			}

			partial void OnPhotosChanging(int? value);
			partial void OnPhotosChanged();
			private int? _Photos;
			[Column(Storage="_Photos", DbType="Int")]
			public  override int? Photos {
				get { return _Photos; }
				set {
					if (_Photos != value) {
						OnPhotosChanging(value);
						SendPropertyChanging();
						_Photos = value;
						SendPropertyChanged("Photos");
						OnPhotosChanged();
					}
				}
			}

			partial void OnTopBannerClicksChanging(int? value);
			partial void OnTopBannerClicksChanged();
			private int? _TopBannerClicks;
			[Column(Storage="_TopBannerClicks", DbType="Int")]
			public  override int? TopBannerClicks {
				get { return _TopBannerClicks; }
				set {
					if (_TopBannerClicks != value) {
						OnTopBannerClicksChanging(value);
						SendPropertyChanging();
						_TopBannerClicks = value;
						SendPropertyChanged("TopBannerClicks");
						OnTopBannerClicksChanged();
					}
				}
			}

			partial void OnHotboxClicksChanging(int? value);
			partial void OnHotboxClicksChanged();
			private int? _HotboxClicks;
			[Column(Storage="_HotboxClicks", DbType="Int")]
			public  override int? HotboxClicks {
				get { return _HotboxClicks; }
				set {
					if (_HotboxClicks != value) {
						OnHotboxClicksChanging(value);
						SendPropertyChanging();
						_HotboxClicks = value;
						SendPropertyChanged("HotboxClicks");
						OnHotboxClicksChanged();
					}
				}
			}

			partial void OnPhotoBannerClicksChanging(int? value);
			partial void OnPhotoBannerClicksChanged();
			private int? _PhotoBannerClicks;
			[Column(Storage="_PhotoBannerClicks", DbType="Int")]
			public  override int? PhotoBannerClicks {
				get { return _PhotoBannerClicks; }
				set {
					if (_PhotoBannerClicks != value) {
						OnPhotoBannerClicksChanging(value);
						SendPropertyChanging();
						_PhotoBannerClicks = value;
						SendPropertyChanged("PhotoBannerClicks");
						OnPhotoBannerClicksChanged();
					}
				}
			}

			partial void OnDateTimeStartChanging(DateTime? value);
			partial void OnDateTimeStartChanged();
			private DateTime? _DateTimeStart;
			[Column(Storage="_DateTimeStart", DbType="DateTime")]
			public  override DateTime? DateTimeStart {
				get { return _DateTimeStart; }
				set {
					if (_DateTimeStart != value) {
						OnDateTimeStartChanging(value);
						SendPropertyChanging();
						_DateTimeStart = value;
						SendPropertyChanged("DateTimeStart");
						OnDateTimeStartChanged();
					}
				}
			}

			partial void OnDateTimeLastChanging(DateTime? value);
			partial void OnDateTimeLastChanged();
			private DateTime? _DateTimeLast;
			[Column(Storage="_DateTimeLast", DbType="DateTime")]
			public  override DateTime? DateTimeLast {
				get { return _DateTimeLast; }
				set {
					if (_DateTimeLast != value) {
						OnDateTimeLastChanging(value);
						SendPropertyChanging();
						_DateTimeLast = value;
						SendPropertyChanged("DateTimeLast");
						OnDateTimeLastChanged();
					}
				}
			}

			partial void OnIpAddressChanging(string value);
			partial void OnIpAddressChanged();
			private string _IpAddress;
			[Column(Storage="_IpAddress", DbType="VarChar(15)")]
			public  override string IpAddress {
				get { return _IpAddress; }
				set {
					if (_IpAddress != value) {
						OnIpAddressChanging(value);
						SendPropertyChanging();
						_IpAddress = value;
						SendPropertyChanged("IpAddress");
						OnIpAddressChanged();
					}
				}
			}

			partial void OnDurationChanging(int? value);
			partial void OnDurationChanged();
			private int? _Duration;
			[Column(Storage="_Duration", DbType="Int")]
			public  override int? Duration {
				get { return _Duration; }
				set {
					if (_Duration != value) {
						OnDurationChanging(value);
						SendPropertyChanging();
						_Duration = value;
						SendPropertyChanged("Duration");
						OnDurationChanged();
					}
				}
			}

			partial void OnCommentsChanging(int? value);
			partial void OnCommentsChanged();
			private int? _Comments;
			[Column(Storage="_Comments", DbType="Int")]
			public  override int? Comments {
				get { return _Comments; }
				set {
					if (_Comments != value) {
						OnCommentsChanging(value);
						SendPropertyChanging();
						_Comments = value;
						SendPropertyChanged("Comments");
						OnCommentsChanged();
					}
				}
			}

			partial void OnChatMessagesChanging(int? value);
			partial void OnChatMessagesChanged();
			private int? _ChatMessages;
			[Column(Storage="_ChatMessages", DbType="Int")]
			public  override int? ChatMessages {
				get { return _ChatMessages; }
				set {
					if (_ChatMessages != value) {
						OnChatMessagesChanging(value);
						SendPropertyChanging();
						_ChatMessages = value;
						SendPropertyChanged("ChatMessages");
						OnChatMessagesChanged();
					}
				}
			}

			partial void OnIsNewGuidChanging(bool? value);
			partial void OnIsNewGuidChanged();
			private bool? _IsNewGuid;
			[Column(Storage="_IsNewGuid", DbType="Bit")]
			public  override bool? IsNewGuid {
				get { return _IsNewGuid; }
				set {
					if (_IsNewGuid != value) {
						OnIsNewGuidChanging(value);
						SendPropertyChanging();
						_IsNewGuid = value;
						SendPropertyChanged("IsNewGuid");
						OnIsNewGuidChanged();
					}
				}
			}

			#endregion

		}

		[Table(Name=@"dbo.vw_index_list")]
 		public partial class Vw_index_list : Model.Entities.Vw_index_list, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public Vw_index_list()
			{
				OnCreated();
			}
			#endregion

			#region Column Mappings
			partial void OnTableNameChanging(string value);
			partial void OnTableNameChanged();
			private string _TableName;
			[Column(Storage="_TableName", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
			public  override string TableName {
				get { return _TableName; }
				set {
					if (_TableName != value) {
						OnTableNameChanging(value);
						SendPropertyChanging();
						_TableName = value;
						SendPropertyChanged("TableName");
						OnTableNameChanged();
					}
				}
			}

			partial void OnIndexNameChanging(string value);
			partial void OnIndexNameChanged();
			private string _IndexName;
			[Column(Storage="_IndexName", DbType="NVarChar(128)")]
			public  override string IndexName {
				get { return _IndexName; }
				set {
					if (_IndexName != value) {
						OnIndexNameChanging(value);
						SendPropertyChanging();
						_IndexName = value;
						SendPropertyChanged("IndexName");
						OnIndexNameChanged();
					}
				}
			}

			partial void OnCol1Changing(string value);
			partial void OnCol1Changed();
			private string _col1;
			[Column(Storage="_col1", DbType="NVarChar(128)")]
			public  override string Col1 {
				get { return _col1; }
				set {
					if (_col1 != value) {
						OnCol1Changing(value);
						SendPropertyChanging();
						_col1 = value;
						SendPropertyChanged("Col1");
						OnCol1Changed();
					}
				}
			}

			partial void OnCol2Changing(string value);
			partial void OnCol2Changed();
			private string _col2;
			[Column(Storage="_col2", DbType="NVarChar(128)")]
			public  override string Col2 {
				get { return _col2; }
				set {
					if (_col2 != value) {
						OnCol2Changing(value);
						SendPropertyChanging();
						_col2 = value;
						SendPropertyChanged("Col2");
						OnCol2Changed();
					}
				}
			}

			partial void OnCol3Changing(string value);
			partial void OnCol3Changed();
			private string _col3;
			[Column(Storage="_col3", DbType="NVarChar(128)")]
			public  override string Col3 {
				get { return _col3; }
				set {
					if (_col3 != value) {
						OnCol3Changing(value);
						SendPropertyChanging();
						_col3 = value;
						SendPropertyChanged("Col3");
						OnCol3Changed();
					}
				}
			}

			partial void OnCol4Changing(string value);
			partial void OnCol4Changed();
			private string _col4;
			[Column(Storage="_col4", DbType="NVarChar(128)")]
			public  override string Col4 {
				get { return _col4; }
				set {
					if (_col4 != value) {
						OnCol4Changing(value);
						SendPropertyChanging();
						_col4 = value;
						SendPropertyChanged("Col4");
						OnCol4Changed();
					}
				}
			}

			partial void OnCol5Changing(string value);
			partial void OnCol5Changed();
			private string _col5;
			[Column(Storage="_col5", DbType="NVarChar(128)")]
			public  override string Col5 {
				get { return _col5; }
				set {
					if (_col5 != value) {
						OnCol5Changing(value);
						SendPropertyChanging();
						_col5 = value;
						SendPropertyChanged("Col5");
						OnCol5Changed();
					}
				}
			}

			partial void OnCol6Changing(string value);
			partial void OnCol6Changed();
			private string _col6;
			[Column(Storage="_col6", DbType="NVarChar(128)")]
			public  override string Col6 {
				get { return _col6; }
				set {
					if (_col6 != value) {
						OnCol6Changing(value);
						SendPropertyChanging();
						_col6 = value;
						SendPropertyChanged("Col6");
						OnCol6Changed();
					}
				}
			}

			partial void OnCol7Changing(string value);
			partial void OnCol7Changed();
			private string _col7;
			[Column(Storage="_col7", DbType="NVarChar(128)")]
			public  override string Col7 {
				get { return _col7; }
				set {
					if (_col7 != value) {
						OnCol7Changing(value);
						SendPropertyChanging();
						_col7 = value;
						SendPropertyChanged("Col7");
						OnCol7Changed();
					}
				}
			}

			partial void OnCol8Changing(string value);
			partial void OnCol8Changed();
			private string _col8;
			[Column(Storage="_col8", DbType="NVarChar(128)")]
			public  override string Col8 {
				get { return _col8; }
				set {
					if (_col8 != value) {
						OnCol8Changing(value);
						SendPropertyChanging();
						_col8 = value;
						SendPropertyChanged("Col8");
						OnCol8Changed();
					}
				}
			}

			partial void OnCol9Changing(string value);
			partial void OnCol9Changed();
			private string _col9;
			[Column(Storage="_col9", DbType="NVarChar(128)")]
			public  override string Col9 {
				get { return _col9; }
				set {
					if (_col9 != value) {
						OnCol9Changing(value);
						SendPropertyChanging();
						_col9 = value;
						SendPropertyChanged("Col9");
						OnCol9Changed();
					}
				}
			}

			partial void OnCol10Changing(string value);
			partial void OnCol10Changed();
			private string _col10;
			[Column(Storage="_col10", DbType="NVarChar(128)")]
			public  override string Col10 {
				get { return _col10; }
				set {
					if (_col10 != value) {
						OnCol10Changing(value);
						SendPropertyChanging();
						_col10 = value;
						SendPropertyChanged("Col10");
						OnCol10Changed();
					}
				}
			}

			partial void OnCol11Changing(string value);
			partial void OnCol11Changed();
			private string _col11;
			[Column(Storage="_col11", DbType="NVarChar(128)")]
			public  override string Col11 {
				get { return _col11; }
				set {
					if (_col11 != value) {
						OnCol11Changing(value);
						SendPropertyChanging();
						_col11 = value;
						SendPropertyChanged("Col11");
						OnCol11Changed();
					}
				}
			}

			partial void OnCol12Changing(string value);
			partial void OnCol12Changed();
			private string _col12;
			[Column(Storage="_col12", DbType="NVarChar(128)")]
			public  override string Col12 {
				get { return _col12; }
				set {
					if (_col12 != value) {
						OnCol12Changing(value);
						SendPropertyChanging();
						_col12 = value;
						SendPropertyChanged("Col12");
						OnCol12Changed();
					}
				}
			}

			partial void OnCol13Changing(string value);
			partial void OnCol13Changed();
			private string _col13;
			[Column(Storage="_col13", DbType="NVarChar(128)")]
			public  override string Col13 {
				get { return _col13; }
				set {
					if (_col13 != value) {
						OnCol13Changing(value);
						SendPropertyChanging();
						_col13 = value;
						SendPropertyChanged("Col13");
						OnCol13Changed();
					}
				}
			}

			partial void OnCol14Changing(string value);
			partial void OnCol14Changed();
			private string _col14;
			[Column(Storage="_col14", DbType="NVarChar(128)")]
			public  override string Col14 {
				get { return _col14; }
				set {
					if (_col14 != value) {
						OnCol14Changing(value);
						SendPropertyChanging();
						_col14 = value;
						SendPropertyChanged("Col14");
						OnCol14Changed();
					}
				}
			}

			partial void OnCol15Changing(string value);
			partial void OnCol15Changed();
			private string _col15;
			[Column(Storage="_col15", DbType="NVarChar(128)")]
			public  override string Col15 {
				get { return _col15; }
				set {
					if (_col15 != value) {
						OnCol15Changing(value);
						SendPropertyChanging();
						_col15 = value;
						SendPropertyChanged("Col15");
						OnCol15Changed();
					}
				}
			}

			partial void OnCol16Changing(string value);
			partial void OnCol16Changed();
			private string _col16;
			[Column(Storage="_col16", DbType="NVarChar(128)")]
			public  override string Col16 {
				get { return _col16; }
				set {
					if (_col16 != value) {
						OnCol16Changing(value);
						SendPropertyChanging();
						_col16 = value;
						SendPropertyChanged("Col16");
						OnCol16Changed();
					}
				}
			}

			partial void OnDpagesChanging(int? value);
			partial void OnDpagesChanged();
			private int? _dpages;
			[Column(Storage="_dpages", DbType="Int")]
			public  override int? Dpages {
				get { return _dpages; }
				set {
					if (_dpages != value) {
						OnDpagesChanging(value);
						SendPropertyChanging();
						_dpages = value;
						SendPropertyChanged("Dpages");
						OnDpagesChanged();
					}
				}
			}

			partial void OnUsedChanging(int? value);
			partial void OnUsedChanged();
			private int? _used;
			[Column(Storage="_used", DbType="Int")]
			public  override int? Used {
				get { return _used; }
				set {
					if (_used != value) {
						OnUsedChanging(value);
						SendPropertyChanging();
						_used = value;
						SendPropertyChanged("Used");
						OnUsedChanged();
					}
				}
			}

			partial void OnRowcntChanging(long? value);
			partial void OnRowcntChanged();
			private long? _rowcnt;
			[Column(Storage="_rowcnt", DbType="BigInt")]
			public  override long? Rowcnt {
				get { return _rowcnt; }
				set {
					if (_rowcnt != value) {
						OnRowcntChanging(value);
						SendPropertyChanging();
						_rowcnt = value;
						SendPropertyChanged("Rowcnt");
						OnRowcntChanged();
					}
				}
			}

			partial void OnTableidChanging(int value);
			partial void OnTableidChanged();
			private int _tableid;
			[Column(Storage="_tableid", DbType="Int NOT NULL", CanBeNull=false)]
			public  override int Tableid {
				get { return _tableid; }
				set {
					if (_tableid != value) {
						OnTableidChanging(value);
						SendPropertyChanging();
						_tableid = value;
						SendPropertyChanged("Tableid");
						OnTableidChanged();
					}
				}
			}

			#endregion

		}
		public partial class FHtmCoverCircleEqResult
	{
		
		private System.Nullable<long> _HtmIDStart;
		
		private System.Nullable<long> _HtmIDEnd;
		
		public FHtmCoverCircleEqResult()
		{
		}
		
		[Column(Storage="_HtmIDStart", DbType="BigInt")]
		public System.Nullable<long> HtmIDStart
		{
			get
			{
				return this._HtmIDStart;
			}
			set
			{
				if ((this._HtmIDStart != value))
				{
					this._HtmIDStart = value;
				}
			}
		}
		
		[Column(Storage="_HtmIDEnd", DbType="BigInt")]
		public System.Nullable<long> HtmIDEnd
		{
			get
			{
				return this._HtmIDEnd;
			}
			set
			{
				if ((this._HtmIDEnd != value))
				{
					this._HtmIDEnd = value;
				}
			}
		}
	}
	
	public partial class FHtmCoverCircleLatLonResult
	{
		
		private System.Nullable<long> _HtmIDStart;
		
		private System.Nullable<long> _HtmIDEnd;
		
		public FHtmCoverCircleLatLonResult()
		{
		}
		
		[Column(Storage="_HtmIDStart", DbType="BigInt")]
		public System.Nullable<long> HtmIDStart
		{
			get
			{
				return this._HtmIDStart;
			}
			set
			{
				if ((this._HtmIDStart != value))
				{
					this._HtmIDStart = value;
				}
			}
		}
		
		[Column(Storage="_HtmIDEnd", DbType="BigInt")]
		public System.Nullable<long> HtmIDEnd
		{
			get
			{
				return this._HtmIDEnd;
			}
			set
			{
				if ((this._HtmIDEnd != value))
				{
					this._HtmIDEnd = value;
				}
			}
		}
	}
	
	public partial class FHtmCoverCircleXyzResult
	{
		
		private System.Nullable<long> _HtmIDStart;
		
		private System.Nullable<long> _HtmIDEnd;
		
		public FHtmCoverCircleXyzResult()
		{
		}
		
		[Column(Storage="_HtmIDStart", DbType="BigInt")]
		public System.Nullable<long> HtmIDStart
		{
			get
			{
				return this._HtmIDStart;
			}
			set
			{
				if ((this._HtmIDStart != value))
				{
					this._HtmIDStart = value;
				}
			}
		}
		
		[Column(Storage="_HtmIDEnd", DbType="BigInt")]
		public System.Nullable<long> HtmIDEnd
		{
			get
			{
				return this._HtmIDEnd;
			}
			set
			{
				if ((this._HtmIDEnd != value))
				{
					this._HtmIDEnd = value;
				}
			}
		}
	}
	
	public partial class FHtmCoverRegionResult
	{
		
		private long _HtmIDStart;
		
		private long _HtmIDEnd;
		
		public FHtmCoverRegionResult()
		{
		}
		
		[Column(Storage="_HtmIDStart", DbType="BigInt")]
		public long HtmIDStart
		{
			get
			{
				return this._HtmIDStart;
			}
			set
			{
				if ((this._HtmIDStart != value))
				{
					this._HtmIDStart = value;
				}
			}
		}
		
		[Column(Storage="_HtmIDEnd", DbType="BigInt")]
		public long HtmIDEnd
		{
			get
			{
				return this._HtmIDEnd;
			}
			set
			{
				if ((this._HtmIDEnd != value))
				{
					this._HtmIDEnd = value;
				}
			}
		}
	}
	
	public partial class FHtmEqToXyzResult
	{
		
		private System.Nullable<double> _X;
		
		private System.Nullable<double> _Y;
		
		private System.Nullable<double> _Z;
		
		public FHtmEqToXyzResult()
		{
		}
		
		[Column(Name="x", Storage="_X", DbType="Float")]
		public System.Nullable<double> X
		{
			get
			{
				return this._X;
			}
			set
			{
				if ((this._X != value))
				{
					this._X = value;
				}
			}
		}
		
		[Column(Name="y", Storage="_Y", DbType="Float")]
		public System.Nullable<double> Y
		{
			get
			{
				return this._Y;
			}
			set
			{
				if ((this._Y != value))
				{
					this._Y = value;
				}
			}
		}
		
		[Column(Name="z", Storage="_Z", DbType="Float")]
		public System.Nullable<double> Z
		{
			get
			{
				return this._Z;
			}
			set
			{
				if ((this._Z != value))
				{
					this._Z = value;
				}
			}
		}
	}
	
	public partial class FHtmLatLonToXyzResult
	{
		
		private System.Nullable<double> _X;
		
		private System.Nullable<double> _Y;
		
		private System.Nullable<double> _Z;
		
		public FHtmLatLonToXyzResult()
		{
		}
		
		[Column(Name="x", Storage="_X", DbType="Float")]
		public System.Nullable<double> X
		{
			get
			{
				return this._X;
			}
			set
			{
				if ((this._X != value))
				{
					this._X = value;
				}
			}
		}
		
		[Column(Name="y", Storage="_Y", DbType="Float")]
		public System.Nullable<double> Y
		{
			get
			{
				return this._Y;
			}
			set
			{
				if ((this._Y != value))
				{
					this._Y = value;
				}
			}
		}
		
		[Column(Name="z", Storage="_Z", DbType="Float")]
		public System.Nullable<double> Z
		{
			get
			{
				return this._Z;
			}
			set
			{
				if ((this._Z != value))
				{
					this._Z = value;
				}
			}
		}
	}
	
	public partial class FHtmNearbyEqResult
	{
		
		private System.Nullable<long> _HtmID;
		
		private System.Nullable<double> _Ra;
		
		private System.Nullable<double> _Dec;
		
		private System.Nullable<double> _X;
		
		private System.Nullable<double> _Y;
		
		private System.Nullable<double> _Z;
		
		private System.Nullable<long> _ObjID;
		
		private System.Nullable<double> _Distance;
		
		public FHtmNearbyEqResult()
		{
		}
		
		[Column(Storage="_HtmID", DbType="BigInt")]
		public System.Nullable<long> HtmID
		{
			get
			{
				return this._HtmID;
			}
			set
			{
				if ((this._HtmID != value))
				{
					this._HtmID = value;
				}
			}
		}
		
		[Column(Name="ra", Storage="_Ra", DbType="Float")]
		public System.Nullable<double> Ra
		{
			get
			{
				return this._Ra;
			}
			set
			{
				if ((this._Ra != value))
				{
					this._Ra = value;
				}
			}
		}
		
		[Column(Name="dec", Storage="_Dec", DbType="Float")]
		public System.Nullable<double> Dec
		{
			get
			{
				return this._Dec;
			}
			set
			{
				if ((this._Dec != value))
				{
					this._Dec = value;
				}
			}
		}
		
		[Column(Name="x", Storage="_X", DbType="Float")]
		public System.Nullable<double> X
		{
			get
			{
				return this._X;
			}
			set
			{
				if ((this._X != value))
				{
					this._X = value;
				}
			}
		}
		
		[Column(Name="y", Storage="_Y", DbType="Float")]
		public System.Nullable<double> Y
		{
			get
			{
				return this._Y;
			}
			set
			{
				if ((this._Y != value))
				{
					this._Y = value;
				}
			}
		}
		
		[Column(Name="z", Storage="_Z", DbType="Float")]
		public System.Nullable<double> Z
		{
			get
			{
				return this._Z;
			}
			set
			{
				if ((this._Z != value))
				{
					this._Z = value;
				}
			}
		}
		
		[Column(Storage="_ObjID", DbType="BigInt")]
		public System.Nullable<long> ObjID
		{
			get
			{
				return this._ObjID;
			}
			set
			{
				if ((this._ObjID != value))
				{
					this._ObjID = value;
				}
			}
		}
		
		[Column(Name="distance", Storage="_Distance", DbType="Float")]
		public System.Nullable<double> Distance
		{
			get
			{
				return this._Distance;
			}
			set
			{
				if ((this._Distance != value))
				{
					this._Distance = value;
				}
			}
		}
	}
	
	public partial class FHtmNearbyLatLonResult
	{
		
		private System.Nullable<long> _HtmID;
		
		private System.Nullable<double> _Lat;
		
		private System.Nullable<double> _Lon;
		
		private System.Nullable<double> _X;
		
		private System.Nullable<double> _Y;
		
		private System.Nullable<double> _Z;
		
		private System.Nullable<long> _ObjID;
		
		private System.Nullable<double> _Distance;
		
		public FHtmNearbyLatLonResult()
		{
		}
		
		[Column(Storage="_HtmID", DbType="BigInt")]
		public System.Nullable<long> HtmID
		{
			get
			{
				return this._HtmID;
			}
			set
			{
				if ((this._HtmID != value))
				{
					this._HtmID = value;
				}
			}
		}
		
		[Column(Storage="_Lat", DbType="Float")]
		public System.Nullable<double> Lat
		{
			get
			{
				return this._Lat;
			}
			set
			{
				if ((this._Lat != value))
				{
					this._Lat = value;
				}
			}
		}
		
		[Column(Storage="_Lon", DbType="Float")]
		public System.Nullable<double> Lon
		{
			get
			{
				return this._Lon;
			}
			set
			{
				if ((this._Lon != value))
				{
					this._Lon = value;
				}
			}
		}
		
		[Column(Name="x", Storage="_X", DbType="Float")]
		public System.Nullable<double> X
		{
			get
			{
				return this._X;
			}
			set
			{
				if ((this._X != value))
				{
					this._X = value;
				}
			}
		}
		
		[Column(Name="y", Storage="_Y", DbType="Float")]
		public System.Nullable<double> Y
		{
			get
			{
				return this._Y;
			}
			set
			{
				if ((this._Y != value))
				{
					this._Y = value;
				}
			}
		}
		
		[Column(Name="z", Storage="_Z", DbType="Float")]
		public System.Nullable<double> Z
		{
			get
			{
				return this._Z;
			}
			set
			{
				if ((this._Z != value))
				{
					this._Z = value;
				}
			}
		}
		
		[Column(Storage="_ObjID", DbType="BigInt")]
		public System.Nullable<long> ObjID
		{
			get
			{
				return this._ObjID;
			}
			set
			{
				if ((this._ObjID != value))
				{
					this._ObjID = value;
				}
			}
		}
		
		[Column(Name="distance", Storage="_Distance", DbType="Float")]
		public System.Nullable<double> Distance
		{
			get
			{
				return this._Distance;
			}
			set
			{
				if ((this._Distance != value))
				{
					this._Distance = value;
				}
			}
		}
	}
	
	public partial class FHtmNearbyXYZResult
	{
		
		private System.Nullable<long> _HtmID;
		
		private System.Nullable<double> _Lat;
		
		private System.Nullable<double> _Lon;
		
		private System.Nullable<double> _X;
		
		private System.Nullable<double> _Y;
		
		private System.Nullable<double> _Z;
		
		private System.Nullable<long> _ObjID;
		
		private System.Nullable<double> _Distance;
		
		public FHtmNearbyXYZResult()
		{
		}
		
		[Column(Storage="_HtmID", DbType="BigInt")]
		public System.Nullable<long> HtmID
		{
			get
			{
				return this._HtmID;
			}
			set
			{
				if ((this._HtmID != value))
				{
					this._HtmID = value;
				}
			}
		}
		
		[Column(Storage="_Lat", DbType="Float")]
		public System.Nullable<double> Lat
		{
			get
			{
				return this._Lat;
			}
			set
			{
				if ((this._Lat != value))
				{
					this._Lat = value;
				}
			}
		}
		
		[Column(Storage="_Lon", DbType="Float")]
		public System.Nullable<double> Lon
		{
			get
			{
				return this._Lon;
			}
			set
			{
				if ((this._Lon != value))
				{
					this._Lon = value;
				}
			}
		}
		
		[Column(Name="x", Storage="_X", DbType="Float")]
		public System.Nullable<double> X
		{
			get
			{
				return this._X;
			}
			set
			{
				if ((this._X != value))
				{
					this._X = value;
				}
			}
		}
		
		[Column(Name="y", Storage="_Y", DbType="Float")]
		public System.Nullable<double> Y
		{
			get
			{
				return this._Y;
			}
			set
			{
				if ((this._Y != value))
				{
					this._Y = value;
				}
			}
		}
		
		[Column(Name="z", Storage="_Z", DbType="Float")]
		public System.Nullable<double> Z
		{
			get
			{
				return this._Z;
			}
			set
			{
				if ((this._Z != value))
				{
					this._Z = value;
				}
			}
		}
		
		[Column(Storage="_ObjID", DbType="BigInt")]
		public System.Nullable<long> ObjID
		{
			get
			{
				return this._ObjID;
			}
			set
			{
				if ((this._ObjID != value))
				{
					this._ObjID = value;
				}
			}
		}
		
		[Column(Name="distance", Storage="_Distance", DbType="Float")]
		public System.Nullable<double> Distance
		{
			get
			{
				return this._Distance;
			}
			set
			{
				if ((this._Distance != value))
				{
					this._Distance = value;
				}
			}
		}
	}
	
	public partial class FHtmNearestEqResult
	{
		
		private System.Nullable<long> _HtmID;
		
		private System.Nullable<double> _Ra;
		
		private System.Nullable<double> _Dec;
		
		private System.Nullable<double> _X;
		
		private System.Nullable<double> _Y;
		
		private System.Nullable<double> _Z;
		
		private System.Nullable<long> _ObjID;
		
		private System.Nullable<double> _Distance;
		
		public FHtmNearestEqResult()
		{
		}
		
		[Column(Storage="_HtmID", DbType="BigInt")]
		public System.Nullable<long> HtmID
		{
			get
			{
				return this._HtmID;
			}
			set
			{
				if ((this._HtmID != value))
				{
					this._HtmID = value;
				}
			}
		}
		
		[Column(Name="ra", Storage="_Ra", DbType="Float")]
		public System.Nullable<double> Ra
		{
			get
			{
				return this._Ra;
			}
			set
			{
				if ((this._Ra != value))
				{
					this._Ra = value;
				}
			}
		}
		
		[Column(Name="dec", Storage="_Dec", DbType="Float")]
		public System.Nullable<double> Dec
		{
			get
			{
				return this._Dec;
			}
			set
			{
				if ((this._Dec != value))
				{
					this._Dec = value;
				}
			}
		}
		
		[Column(Name="x", Storage="_X", DbType="Float")]
		public System.Nullable<double> X
		{
			get
			{
				return this._X;
			}
			set
			{
				if ((this._X != value))
				{
					this._X = value;
				}
			}
		}
		
		[Column(Name="y", Storage="_Y", DbType="Float")]
		public System.Nullable<double> Y
		{
			get
			{
				return this._Y;
			}
			set
			{
				if ((this._Y != value))
				{
					this._Y = value;
				}
			}
		}
		
		[Column(Name="z", Storage="_Z", DbType="Float")]
		public System.Nullable<double> Z
		{
			get
			{
				return this._Z;
			}
			set
			{
				if ((this._Z != value))
				{
					this._Z = value;
				}
			}
		}
		
		[Column(Storage="_ObjID", DbType="BigInt")]
		public System.Nullable<long> ObjID
		{
			get
			{
				return this._ObjID;
			}
			set
			{
				if ((this._ObjID != value))
				{
					this._ObjID = value;
				}
			}
		}
		
		[Column(Name="distance", Storage="_Distance", DbType="Float")]
		public System.Nullable<double> Distance
		{
			get
			{
				return this._Distance;
			}
			set
			{
				if ((this._Distance != value))
				{
					this._Distance = value;
				}
			}
		}
	}
	
	public partial class FHtmNearestLatLonResult
	{
		
		private System.Nullable<long> _HtmID;
		
		private System.Nullable<double> _Lat;
		
		private System.Nullable<double> _Lon;
		
		private System.Nullable<double> _X;
		
		private System.Nullable<double> _Y;
		
		private System.Nullable<double> _Z;
		
		private System.Nullable<long> _ObjID;
		
		private System.Nullable<double> _Distance;
		
		public FHtmNearestLatLonResult()
		{
		}
		
		[Column(Storage="_HtmID", DbType="BigInt")]
		public System.Nullable<long> HtmID
		{
			get
			{
				return this._HtmID;
			}
			set
			{
				if ((this._HtmID != value))
				{
					this._HtmID = value;
				}
			}
		}
		
		[Column(Storage="_Lat", DbType="Float")]
		public System.Nullable<double> Lat
		{
			get
			{
				return this._Lat;
			}
			set
			{
				if ((this._Lat != value))
				{
					this._Lat = value;
				}
			}
		}
		
		[Column(Storage="_Lon", DbType="Float")]
		public System.Nullable<double> Lon
		{
			get
			{
				return this._Lon;
			}
			set
			{
				if ((this._Lon != value))
				{
					this._Lon = value;
				}
			}
		}
		
		[Column(Name="x", Storage="_X", DbType="Float")]
		public System.Nullable<double> X
		{
			get
			{
				return this._X;
			}
			set
			{
				if ((this._X != value))
				{
					this._X = value;
				}
			}
		}
		
		[Column(Name="y", Storage="_Y", DbType="Float")]
		public System.Nullable<double> Y
		{
			get
			{
				return this._Y;
			}
			set
			{
				if ((this._Y != value))
				{
					this._Y = value;
				}
			}
		}
		
		[Column(Name="z", Storage="_Z", DbType="Float")]
		public System.Nullable<double> Z
		{
			get
			{
				return this._Z;
			}
			set
			{
				if ((this._Z != value))
				{
					this._Z = value;
				}
			}
		}
		
		[Column(Storage="_ObjID", DbType="BigInt")]
		public System.Nullable<long> ObjID
		{
			get
			{
				return this._ObjID;
			}
			set
			{
				if ((this._ObjID != value))
				{
					this._ObjID = value;
				}
			}
		}
		
		[Column(Name="distance", Storage="_Distance", DbType="Float")]
		public System.Nullable<double> Distance
		{
			get
			{
				return this._Distance;
			}
			set
			{
				if ((this._Distance != value))
				{
					this._Distance = value;
				}
			}
		}
	}
	
	public partial class FHtmNearestXYZResult
	{
		
		private System.Nullable<long> _HtmID;
		
		private System.Nullable<double> _Lat;
		
		private System.Nullable<double> _Lon;
		
		private System.Nullable<double> _X;
		
		private System.Nullable<double> _Y;
		
		private System.Nullable<double> _Z;
		
		private System.Nullable<long> _ObjID;
		
		private System.Nullable<double> _Distance;
		
		public FHtmNearestXYZResult()
		{
		}
		
		[Column(Storage="_HtmID", DbType="BigInt")]
		public System.Nullable<long> HtmID
		{
			get
			{
				return this._HtmID;
			}
			set
			{
				if ((this._HtmID != value))
				{
					this._HtmID = value;
				}
			}
		}
		
		[Column(Storage="_Lat", DbType="Float")]
		public System.Nullable<double> Lat
		{
			get
			{
				return this._Lat;
			}
			set
			{
				if ((this._Lat != value))
				{
					this._Lat = value;
				}
			}
		}
		
		[Column(Storage="_Lon", DbType="Float")]
		public System.Nullable<double> Lon
		{
			get
			{
				return this._Lon;
			}
			set
			{
				if ((this._Lon != value))
				{
					this._Lon = value;
				}
			}
		}
		
		[Column(Name="x", Storage="_X", DbType="Float")]
		public System.Nullable<double> X
		{
			get
			{
				return this._X;
			}
			set
			{
				if ((this._X != value))
				{
					this._X = value;
				}
			}
		}
		
		[Column(Name="y", Storage="_Y", DbType="Float")]
		public System.Nullable<double> Y
		{
			get
			{
				return this._Y;
			}
			set
			{
				if ((this._Y != value))
				{
					this._Y = value;
				}
			}
		}
		
		[Column(Name="z", Storage="_Z", DbType="Float")]
		public System.Nullable<double> Z
		{
			get
			{
				return this._Z;
			}
			set
			{
				if ((this._Z != value))
				{
					this._Z = value;
				}
			}
		}
		
		[Column(Storage="_ObjID", DbType="BigInt")]
		public System.Nullable<long> ObjID
		{
			get
			{
				return this._ObjID;
			}
			set
			{
				if ((this._ObjID != value))
				{
					this._ObjID = value;
				}
			}
		}
		
		[Column(Name="distance", Storage="_Distance", DbType="Float")]
		public System.Nullable<double> Distance
		{
			get
			{
				return this._Distance;
			}
			set
			{
				if ((this._Distance != value))
				{
					this._Distance = value;
				}
			}
		}
	}
	
	public partial class FHtmRegionObjectsResult
	{
		
		private System.Nullable<long> _ObjID;
		
		public FHtmRegionObjectsResult()
		{
		}
		
		[Column(Name="objID", Storage="_ObjID", DbType="BigInt")]
		public System.Nullable<long> ObjID
		{
			get
			{
				return this._ObjID;
			}
			set
			{
				if ((this._ObjID != value))
				{
					this._ObjID = value;
				}
			}
		}
	}
	
	public partial class FHtmRegionToTableResult
	{
		
		private System.Nullable<long> _ConvexID;
		
		private System.Nullable<long> _HalfspaceID;
		
		private System.Nullable<double> _X;
		
		private System.Nullable<double> _Y;
		
		private System.Nullable<double> _Z;
		
		private System.Nullable<double> _D;
		
		public FHtmRegionToTableResult()
		{
		}
		
		[Column(Name="convexID", Storage="_ConvexID", DbType="BigInt")]
		public System.Nullable<long> ConvexID
		{
			get
			{
				return this._ConvexID;
			}
			set
			{
				if ((this._ConvexID != value))
				{
					this._ConvexID = value;
				}
			}
		}
		
		[Column(Name="halfspaceID", Storage="_HalfspaceID", DbType="BigInt")]
		public System.Nullable<long> HalfspaceID
		{
			get
			{
				return this._HalfspaceID;
			}
			set
			{
				if ((this._HalfspaceID != value))
				{
					this._HalfspaceID = value;
				}
			}
		}
		
		[Column(Name="x", Storage="_X", DbType="Float")]
		public System.Nullable<double> X
		{
			get
			{
				return this._X;
			}
			set
			{
				if ((this._X != value))
				{
					this._X = value;
				}
			}
		}
		
		[Column(Name="y", Storage="_Y", DbType="Float")]
		public System.Nullable<double> Y
		{
			get
			{
				return this._Y;
			}
			set
			{
				if ((this._Y != value))
				{
					this._Y = value;
				}
			}
		}
		
		[Column(Name="z", Storage="_Z", DbType="Float")]
		public System.Nullable<double> Z
		{
			get
			{
				return this._Z;
			}
			set
			{
				if ((this._Z != value))
				{
					this._Z = value;
				}
			}
		}
		
		[Column(Storage="_D", DbType="Float")]
		public System.Nullable<double> D
		{
			get
			{
				return this._D;
			}
			set
			{
				if ((this._D != value))
				{
					this._D = value;
				}
			}
		}
	}
	
	public partial class FHtmToCenterPointResult
	{
		
		private System.Nullable<double> _X;
		
		private System.Nullable<double> _Y;
		
		private System.Nullable<double> _Z;
		
		public FHtmToCenterPointResult()
		{
		}
		
		[Column(Name="x", Storage="_X", DbType="Float")]
		public System.Nullable<double> X
		{
			get
			{
				return this._X;
			}
			set
			{
				if ((this._X != value))
				{
					this._X = value;
				}
			}
		}
		
		[Column(Name="y", Storage="_Y", DbType="Float")]
		public System.Nullable<double> Y
		{
			get
			{
				return this._Y;
			}
			set
			{
				if ((this._Y != value))
				{
					this._Y = value;
				}
			}
		}
		
		[Column(Name="z", Storage="_Z", DbType="Float")]
		public System.Nullable<double> Z
		{
			get
			{
				return this._Z;
			}
			set
			{
				if ((this._Z != value))
				{
					this._Z = value;
				}
			}
		}
	}
	
	public partial class FHtmToCornerPointsResult
	{
		
		private System.Nullable<double> _X;
		
		private System.Nullable<double> _Y;
		
		private System.Nullable<double> _Z;
		
		public FHtmToCornerPointsResult()
		{
		}
		
		[Column(Name="x", Storage="_X", DbType="Float")]
		public System.Nullable<double> X
		{
			get
			{
				return this._X;
			}
			set
			{
				if ((this._X != value))
				{
					this._X = value;
				}
			}
		}
		
		[Column(Name="y", Storage="_Y", DbType="Float")]
		public System.Nullable<double> Y
		{
			get
			{
				return this._Y;
			}
			set
			{
				if ((this._Y != value))
				{
					this._Y = value;
				}
			}
		}
		
		[Column(Name="z", Storage="_Z", DbType="Float")]
		public System.Nullable<double> Z
		{
			get
			{
				return this._Z;
			}
			set
			{
				if ((this._Z != value))
				{
					this._Z = value;
				}
			}
		}
	}
	
	public partial class FHtmXyzToEqResult
	{
		
		private System.Nullable<double> _Ra;
		
		private System.Nullable<double> _Dec;
		
		public FHtmXyzToEqResult()
		{
		}
		
		[Column(Name="ra", Storage="_Ra", DbType="Float")]
		public System.Nullable<double> Ra
		{
			get
			{
				return this._Ra;
			}
			set
			{
				if ((this._Ra != value))
				{
					this._Ra = value;
				}
			}
		}
		
		[Column(Name="dec", Storage="_Dec", DbType="Float")]
		public System.Nullable<double> Dec
		{
			get
			{
				return this._Dec;
			}
			set
			{
				if ((this._Dec != value))
				{
					this._Dec = value;
				}
			}
		}
	}
	
	public partial class FHtmXyzToLatLonResult
	{
		
		private System.Nullable<double> _Lat;
		
		private System.Nullable<double> _Lon;
		
		public FHtmXyzToLatLonResult()
		{
		}
		
		[Column(Storage="_Lat", DbType="Float")]
		public System.Nullable<double> Lat
		{
			get
			{
				return this._Lat;
			}
			set
			{
				if ((this._Lat != value))
				{
					this._Lat = value;
				}
			}
		}
		
		[Column(Storage="_Lon", DbType="Float")]
		public System.Nullable<double> Lon
		{
			get
			{
				return this._Lon;
			}
			set
			{
				if ((this._Lon != value))
				{
					this._Lon = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
