<#@ template language="C#v3.5" hostspecific="True" #>
<#@ assembly name="LinqToSqlClassTemplate.dll" #> 
<#@ assembly name="System.Data.Linq" #> 
<#@ import namespace="LinqToSqlClassTemplate" #> 
<#@ import namespace="System.CodeDom" #> 
<#@ import namespace="System.Data.Linq.Mapping" #> 
<#@ assembly name="System.Xml.Linq.dll" #>
<#@ output extension=".cs" #>
using System.Linq;
using System.Reflection;
<#
string dbmlFile = Host.TemplateFile.Replace("DataClassesContext.tt","DbSpotted.dbml.after"); // ensures correct path to dbml file
Database database = new Database(dbmlFile); 
CodeLanguage code = new CodeLanguage(new Microsoft.CSharp.CSharpCodeProvider());
Boolean serialization = (database.Serialization == "Unidirectional");
#>#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the LINQ to SQL template for T4 (LTSTT4) v0.2 
//     Generated at <#=DateTime.Now#>
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace <#=database.ContextNamespace #>
{
	using System;
	using System.ComponentModel;
	using System.Data.Linq;
	using System.Data.Linq.Mapping;

	[DatabaseAttribute(Name=@"<#=database.Name#>")]
	public partial class <#=database.Class#> : DataContext
	{
		private static MappingSource mappingSource = new AttributeMappingSource();
		
		#region Extensibility Method Definitions
		partial void OnCreated();
<# foreach(Table table in database.Tables) { #>
		partial void Insert<#=table.BaseClass.Name#>(<#=table.BaseClass.QualifiedName#> instance);
		partial void Update<#=table.BaseClass.Name#>(<#=table.BaseClass.QualifiedName#> instance);
		partial void Delete<#=table.BaseClass.Name#>(<#=table.BaseClass.QualifiedName#> instance);
<# } #>
		#endregion
		
		#region Construction
<# if (database.ConnectSettingsObject != null) { #>
		public <#=database.Class#>() :
			base(global::<#=database.ConnectSettingsObject#>.Default.<#=database.ConnectSettingsProperty#>, mappingSource) {
			OnCreated();
		}
<# } #>
		
		public <#=database.Class#>(string connection) :
			base(connection, mappingSource) {
			OnCreated();
		}
		
		public <#=database.Class#>(System.Data.IDbConnection connection) : 
			base(connection, mappingSource) {
			OnCreated();
		}
		
		public <#=database.Class#>(string connection, MappingSource mappingSource) : 
			base(connection, mappingSource) {
			OnCreated();
		}
		
		public <#=database.Class#>(System.Data.IDbConnection connection, MappingSource mappingSource) : 
			base(connection, mappingSource) {
			OnCreated();
		}
		#endregion
		
		#region Tables
<# foreach(Table table in database.Tables) { 
#>		public Table<<#=table.BaseClass.QualifiedName#>> <#=table.Member#> { 
			get { return GetTable<<#=table.BaseClass.QualifiedName#>>(); }
		}
<# }
#>		#endregion

		[Function(Name="[dbo].[Bobs.BannerStat.Log]")]
		[return: Parameter(DbType="Int")]
		public int ___Bobs_BannerStat_Log_([Parameter(Name="BannerK", DbType="Int")] System.Nullable<int> bannerK, [Parameter(Name="Date", DbType="DateTime")] System.Nullable<System.DateTime> date, [Parameter(Name="Hits", DbType="Int")] System.Nullable<int> hits, [Parameter(Name="UniqueVisitors", DbType="Int")] System.Nullable<int> uniqueVisitors, [Parameter(Name="Clicks", DbType="Int")] System.Nullable<int> clicks)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), bannerK, date, hits, uniqueVisitors, clicks);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="[dbo].[Bobs.Flyer.LogClick]")]
		[return: Parameter(DbType="Int")]
		public int ___Bobs_Flyer_LogClick_([Parameter(Name="FlyerK", DbType="Int")] System.Nullable<int> flyerK)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), flyerK);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="[dbo].[Bobs.Flyer.LogSend]")]
		[return: Parameter(DbType="Int")]
		public int ___Bobs_Flyer_LogSend_([Parameter(Name="FlyerK", DbType="Int")] System.Nullable<int> flyerK)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), flyerK);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="[dbo].[Bobs.Flyer.LogUnsubscribe]")]
		[return: Parameter(DbType="Int")]
		public int ___Bobs_Flyer_LogUnsubscribe_([Parameter(Name="FlyerK", DbType="Int")] System.Nullable<int> flyerK)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), flyerK);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="[dbo].[Bobs.Flyer.LogView]")]
		[return: Parameter(DbType="Int")]
		public int ___Bobs_Flyer_LogView_([Parameter(Name="FlyerK", DbType="Int")] System.Nullable<int> flyerK)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), flyerK);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.fDistanceEq", IsComposable=true)]
		[return: Parameter(DbType="Float")]
		public System.Nullable<double> FDistanceEq([Parameter(DbType="Float")] System.Nullable<double> ra1, [Parameter(DbType="Float")] System.Nullable<double> dec1, [Parameter(DbType="Float")] System.Nullable<double> ra2, [Parameter(DbType="Float")] System.Nullable<double> dec2)
		{
			return ((System.Nullable<double>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), ra1, dec1, ra2, dec2).ReturnValue));
		}
		
		[Function(Name="dbo.fDistanceLatLon", IsComposable=true)]
		[return: Parameter(DbType="Float")]
		public System.Nullable<double> FDistanceLatLon([Parameter(Name="Lat1", DbType="Float")] System.Nullable<double> lat1, [Parameter(Name="Lon1", DbType="Float")] System.Nullable<double> lon1, [Parameter(Name="Lat2", DbType="Float")] System.Nullable<double> lat2, [Parameter(Name="Lon2", DbType="Float")] System.Nullable<double> lon2)
		{
			return ((System.Nullable<double>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), lat1, lon1, lat2, lon2).ReturnValue));
		}
		
		[Function(Name="dbo.fDistanceXyz", IsComposable=true)]
		[return: Parameter(DbType="Float")]
		public System.Nullable<double> FDistanceXyz([Parameter(DbType="Float")] System.Nullable<double> x1, [Parameter(DbType="Float")] System.Nullable<double> y1, [Parameter(DbType="Float")] System.Nullable<double> z1, [Parameter(DbType="Float")] System.Nullable<double> x2, [Parameter(DbType="Float")] System.Nullable<double> y2, [Parameter(DbType="Float")] System.Nullable<double> z2)
		{
			return ((System.Nullable<double>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), x1, y1, z1, x2, y2, z2).ReturnValue));
		}
		
		[Function(Name="dbo.fHtmCoverCircleEq", IsComposable=true)]
		public IQueryable<FHtmCoverCircleEqResult> FHtmCoverCircleEq([Parameter(DbType="Float")] System.Nullable<double> ra, [Parameter(DbType="Float")] System.Nullable<double> dec, [Parameter(DbType="Float")] System.Nullable<double> radiusArcMinutes)
		{
			return this.CreateMethodCallQuery<FHtmCoverCircleEqResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), ra, dec, radiusArcMinutes);
		}
		
		[Function(Name="dbo.fHtmCoverCircleLatLon", IsComposable=true)]
		public IQueryable<FHtmCoverCircleLatLonResult> FHtmCoverCircleLatLon([Parameter(Name="Lat", DbType="Float")] System.Nullable<double> lat, [Parameter(Name="Lon", DbType="Float")] System.Nullable<double> lon, [Parameter(DbType="Float")] System.Nullable<double> radiusArcMinutes)
		{
			return this.CreateMethodCallQuery<FHtmCoverCircleLatLonResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), lat, lon, radiusArcMinutes);
		}
		
		[Function(Name="dbo.fHtmCoverCircleXyz", IsComposable=true)]
		public IQueryable<FHtmCoverCircleXyzResult> FHtmCoverCircleXyz([Parameter(DbType="Float")] System.Nullable<double> x, [Parameter(DbType="Float")] System.Nullable<double> y, [Parameter(DbType="Float")] System.Nullable<double> z, [Parameter(DbType="Float")] System.Nullable<double> r)
		{
			return this.CreateMethodCallQuery<FHtmCoverCircleXyzResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), x, y, z, r);
		}
		
		[Function(Name="dbo.fHtmCoverRegion", IsComposable=true)]
		public IQueryable<FHtmCoverRegionResult> FHtmCoverRegion([Parameter(DbType="NVarChar(MAX)")] string region)
		{
			return this.CreateMethodCallQuery<FHtmCoverRegionResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), region);
		}
		
		[Function(Name="dbo.fHtmEq", IsComposable=true)]
		[return: Parameter(DbType="BigInt")]
		public System.Nullable<long> FHtmEq([Parameter(DbType="Float")] System.Nullable<double> ra, [Parameter(DbType="Float")] System.Nullable<double> dec)
		{
			return ((System.Nullable<long>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), ra, dec).ReturnValue));
		}
		
		[Function(Name="dbo.fHtmEqToXyz", IsComposable=true)]
		public IQueryable<FHtmEqToXyzResult> FHtmEqToXyz([Parameter(DbType="Float")] System.Nullable<double> ra, [Parameter(DbType="Float")] System.Nullable<double> dec)
		{
			return this.CreateMethodCallQuery<FHtmEqToXyzResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), ra, dec);
		}
		
		[Function(Name="dbo.fHtmIDToSquareArcmin", IsComposable=true)]
		[return: Parameter(DbType="Float")]
		public System.Nullable<double> FHtmIDToSquareArcmin([Parameter(Name="HtmID", DbType="BigInt")] System.Nullable<long> htmID)
		{
			return ((System.Nullable<double>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), htmID).ReturnValue));
		}
		
		[Function(Name="dbo.fHtmLatLon", IsComposable=true)]
		[return: Parameter(DbType="BigInt")]
		public System.Nullable<long> FHtmLatLon([Parameter(Name="Lat", DbType="Float")] System.Nullable<double> lat, [Parameter(Name="Lon", DbType="Float")] System.Nullable<double> lon)
		{
			return ((System.Nullable<long>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), lat, lon).ReturnValue));
		}
		
		[Function(Name="dbo.fHtmLatLonToXyz", IsComposable=true)]
		public IQueryable<FHtmLatLonToXyzResult> FHtmLatLonToXyz([Parameter(DbType="Float")] System.Nullable<double> ra, [Parameter(DbType="Float")] System.Nullable<double> dec)
		{
			return this.CreateMethodCallQuery<FHtmLatLonToXyzResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), ra, dec);
		}
		
		[Function(Name="dbo.fHtmNearbyEq", IsComposable=true)]
		public IQueryable<FHtmNearbyEqResult> FHtmNearbyEq([Parameter(DbType="Char(1)")] string type, [Parameter(DbType="Float")] System.Nullable<double> ra, [Parameter(DbType="Float")] System.Nullable<double> dec, [Parameter(DbType="Float")] System.Nullable<double> r)
		{
			return this.CreateMethodCallQuery<FHtmNearbyEqResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), type, ra, dec, r);
		}
		
		[Function(Name="dbo.fHtmNearbyLatLon", IsComposable=true)]
		public IQueryable<FHtmNearbyLatLonResult> FHtmNearbyLatLon([Parameter(DbType="Char(1)")] string type, [Parameter(Name="Lat", DbType="Float")] System.Nullable<double> lat, [Parameter(Name="Lon", DbType="Float")] System.Nullable<double> lon, [Parameter(DbType="Float")] System.Nullable<double> r)
		{
			return this.CreateMethodCallQuery<FHtmNearbyLatLonResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), type, lat, lon, r);
		}
		
		[Function(Name="dbo.fHtmNearbyXYZ", IsComposable=true)]
		public IQueryable<FHtmNearbyXYZResult> FHtmNearbyXYZ([Parameter(DbType="Char(1)")] string type, [Parameter(DbType="Float")] System.Nullable<double> x, [Parameter(DbType="Float")] System.Nullable<double> y, [Parameter(DbType="Float")] System.Nullable<double> z, [Parameter(DbType="Float")] System.Nullable<double> r)
		{
			return this.CreateMethodCallQuery<FHtmNearbyXYZResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), type, x, y, z, r);
		}
		
		[Function(Name="dbo.fHtmNearestEq", IsComposable=true)]
		public IQueryable<FHtmNearestEqResult> FHtmNearestEq([Parameter(DbType="Char(1)")] string type, [Parameter(DbType="Float")] System.Nullable<double> ra, [Parameter(DbType="Float")] System.Nullable<double> dec)
		{
			return this.CreateMethodCallQuery<FHtmNearestEqResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), type, ra, dec);
		}
		
		[Function(Name="dbo.fHtmNearestLatLon", IsComposable=true)]
		public IQueryable<FHtmNearestLatLonResult> FHtmNearestLatLon([Parameter(DbType="Char(1)")] string type, [Parameter(Name="Lat", DbType="Float")] System.Nullable<double> lat, [Parameter(Name="Lon", DbType="Float")] System.Nullable<double> lon)
		{
			return this.CreateMethodCallQuery<FHtmNearestLatLonResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), type, lat, lon);
		}
		
		[Function(Name="dbo.fHtmNearestXYZ", IsComposable=true)]
		public IQueryable<FHtmNearestXYZResult> FHtmNearestXYZ([Parameter(DbType="Char(1)")] string type, [Parameter(DbType="Float")] System.Nullable<double> x, [Parameter(DbType="Float")] System.Nullable<double> y, [Parameter(DbType="Float")] System.Nullable<double> z)
		{
			return this.CreateMethodCallQuery<FHtmNearestXYZResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), type, x, y, z);
		}
		
		[Function(Name="dbo.fHtmRegionError", IsComposable=true)]
		[return: Parameter(DbType="NVarChar(MAX)")]
		public string FHtmRegionError([Parameter(DbType="NVarChar(MAX)")] string region)
		{
			return ((string)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), region).ReturnValue));
		}
		
		[Function(Name="dbo.fHtmRegionObjects", IsComposable=true)]
		public IQueryable<FHtmRegionObjectsResult> FHtmRegionObjects([Parameter(DbType="NVarChar(MAX)")] string region, [Parameter(DbType="Char(1)")] string type)
		{
			return this.CreateMethodCallQuery<FHtmRegionObjectsResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), region, type);
		}
		
		[Function(Name="dbo.fHtmRegionToNormalFormString", IsComposable=true)]
		[return: Parameter(DbType="NVarChar(MAX)")]
		public string FHtmRegionToNormalFormString([Parameter(DbType="NVarChar(MAX)")] string region)
		{
			return ((string)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), region).ReturnValue));
		}
		
		[Function(Name="dbo.fHtmRegionToTable", IsComposable=true)]
		public IQueryable<FHtmRegionToTableResult> FHtmRegionToTable([Parameter(DbType="NVarChar(MAX)")] string cover)
		{
			return this.CreateMethodCallQuery<FHtmRegionToTableResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), cover);
		}
		
		[Function(Name="dbo.fHtmToCenterPoint", IsComposable=true)]
		public IQueryable<FHtmToCenterPointResult> FHtmToCenterPoint([Parameter(Name="HtmID", DbType="BigInt")] System.Nullable<long> htmID)
		{
			return this.CreateMethodCallQuery<FHtmToCenterPointResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), htmID);
		}
		
		[Function(Name="dbo.fHtmToCornerPoints", IsComposable=true)]
		public IQueryable<FHtmToCornerPointsResult> FHtmToCornerPoints([Parameter(Name="HtmID", DbType="BigInt")] System.Nullable<long> htmID)
		{
			return this.CreateMethodCallQuery<FHtmToCornerPointsResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), htmID);
		}
		
		[Function(Name="dbo.fHtmToString", IsComposable=true)]
		[return: Parameter(DbType="NVarChar(MAX)")]
		public string FHtmToString([Parameter(Name="HtmID", DbType="BigInt")] System.Nullable<long> htmID)
		{
			return ((string)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), htmID).ReturnValue));
		}
		
		[Function(Name="dbo.fHtmVersion", IsComposable=true)]
		[return: Parameter(DbType="NVarChar(MAX)")]
		public string FHtmVersion()
		{
			return ((string)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod()))).ReturnValue));
		}
		
		[Function(Name="dbo.fHtmXyz", IsComposable=true)]
		[return: Parameter(DbType="BigInt")]
		public System.Nullable<long> FHtmXyz([Parameter(DbType="Float")] System.Nullable<double> x, [Parameter(DbType="Float")] System.Nullable<double> y, [Parameter(DbType="Float")] System.Nullable<double> z)
		{
			return ((System.Nullable<long>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), x, y, z).ReturnValue));
		}
		
		[Function(Name="dbo.fHtmXyzToEq", IsComposable=true)]
		public IQueryable<FHtmXyzToEqResult> FHtmXyzToEq([Parameter(DbType="Float")] System.Nullable<double> x, [Parameter(DbType="Float")] System.Nullable<double> y, [Parameter(DbType="Float")] System.Nullable<double> z)
		{
			return this.CreateMethodCallQuery<FHtmXyzToEqResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), x, y, z);
		}
		
		[Function(Name="dbo.fHtmXyzToLatLon", IsComposable=true)]
		public IQueryable<FHtmXyzToLatLonResult> FHtmXyzToLatLon([Parameter(DbType="Float")] System.Nullable<double> x, [Parameter(DbType="Float")] System.Nullable<double> y, [Parameter(DbType="Float")] System.Nullable<double> z)
		{
			return this.CreateMethodCallQuery<FHtmXyzToLatLonResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), x, y, z);
		}
		
		[Function(Name="[dbo].[Spatial.Search]")]
		[return: Parameter(DbType="Int")]
		public int ___Spatial_Search_([Parameter(Name="TableName", DbType="VarChar(50)")] string tableName, [Parameter(Name="WhereClause", DbType="VarChar(MAX)")] string whereClause, [Parameter(Name="CustomVariableDeclarationSql", DbType="VarChar(MAX)")] string customVariableDeclarationSql, [Parameter(Name="OrderBy", DbType="VarChar(200)")] string orderBy, [Parameter(Name="FirstRowIndex", DbType="Int")] System.Nullable<int> firstRowIndex, [Parameter(Name="LastRowIndex", DbType="Int")] System.Nullable<int> lastRowIndex, [Parameter(Name="North", DbType="Float")] System.Nullable<double> north, [Parameter(Name="East", DbType="Float")] System.Nullable<double> east, [Parameter(Name="South", DbType="Float")] System.Nullable<double> south, [Parameter(Name="West", DbType="Float")] System.Nullable<double> west)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), tableName, whereClause, customVariableDeclarationSql, orderBy, firstRowIndex, lastRowIndex, north, east, south, west);
			return ((int)(result.ReturnValue));
		}
	}
<# if (!String.IsNullOrEmpty(database.EntityNamespace)) {
#>}
namespace <#=database.EntityNamespace#>
{
	using System;
	using System.ComponentModel;
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Runtime.Serialization;
<# }
	foreach(Table table in database.Tables) {
		foreach(Class class1 in table.Classes) {
			if (class1.IsBase) { #>

		[Table(Name=@"<#=table.Name#>")]
<# if (serialization) {
#>		[DataContract()]
<# } 
#> 		public partial class <#=class1.Name#> : Model.Entities.<#=class1.Name#>, INotifyPropertyChanging, INotifyPropertyChanged
		{
			#region Property Change Event Handling
			private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
			
			public event PropertyChangingEventHandler PropertyChanging;
			public event PropertyChangedEventHandler PropertyChanged;
			
			protected virtual void SendPropertyChanging() {
				if (PropertyChanging != null)
					PropertyChanging(this, emptyChangingEventArgs);
			}
			
			protected virtual void SendPropertyChanged(String propertyName) {
				if (PropertyChanged != null)
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
			#endregion
			
<#		} else { #>

		public partial class <#=class1.Name#> : <#=table.BaseClass.Name#>
		{
<#		} #>
			#region Extensibility Method Definitions
			partial void OnLoaded();
			partial void OnValidate(ChangeAction action);
			partial void OnCreated();
			#endregion

			#region Construction
			public <#=class1.Name#>()
			{
<# if (serialization) { 
#>				Initialize();
			}
			
			private void Initialize()
			{
<# } 
			foreach(Association association in class1.Associations) {
#>				<#=association.Storage#> =<#
				if (!association.IsForeignKey) { 
					#> new EntitySet<<#=association.Type.Name#>>(attach_<#=association.Member#>, detach_<#=association.Member#>);
<#				} else { 
					#> default(EntityRef<<#=association.Type.Name#>>); 
<#				}
			} #>
				OnCreated();
			}
			#endregion

<#		int dataMemberIndex = 1;
        bool needsSerialization = false;
		if (class1.Columns.Count > 0) { 
#>			#region Column Mappings
<#			foreach(Column column in class1.Columns) {#>
<#			if (column.EnumProperty == null && code.Format(column.Type) == "Binary") continue; #>
			partial void On<#=column.Member#>Changing(<#=column.EnumProperty ?? code.Format(column.Type)#> value);
			partial void On<#=column.Member#>Changed();
			private <#=column.EnumProperty ?? code.Format(column.Type)#> <#=column.Storage#>;
			[Column(Storage="<#=column.Storage#>"<#
				if (column.AutoSync != AutoSync.Default) { #>, AutoSync=AutoSync.<#=column.AutoSync.ToString()#><# }
				#>, DbType="<#=column.DbType#>"<# 
				if (column.IsPrimaryKey) { #>, IsPrimaryKey=true<# }
				if (column.IsDiscriminator) { #>, IsDiscriminator=true<# }
				if (column.IsDbGenerated) { #>, IsDbGenerated=true<# }
				if (!column.CanBeNull && !column.IsPrimaryKey) { #>, CanBeNull=false<# }
				if (column.UpdateCheck != UpdateCheck.Always) { #>, UpdateCheck=UpdateCheck.<#=column.UpdateCheck.ToString()#><# }
			#>)]
<# if (serialization && ((column.MemberAttributes & MemberAttributes.AccessMask) == MemberAttributes.Public)) { 
#>			[DataMember(Order=<#=dataMemberIndex++#>)]
<# } 
#>			<#=code.Format(column.MemberAttributes)#> override <#=column.EnumProperty ?? code.Format(column.Type)#> <#=column.Member#> {
				get { return <#=column.Storage#>; }
				set {
					if (<#=column.Storage#> != value) {
						On<#=column.Member#>Changing(value);
						SendPropertyChanging();
						<#=column.Storage#> = value;
						SendPropertyChanged("<#=column.Member#>");
						On<#=column.Member#>Changed();
					}
				}
			}

<#			} #>
			#endregion
<#		} #>

<#		if (class1.Associations.Count > 0) { 
#>			#region Associations
<#			foreach(Association association in class1.Associations) { #>

			private Entity<#= (association.IsForeignKey) ? "Ref" : "Set" #><<#=association.Type.Name#>> <#=association.Storage#>;
			[Association(Name="<#=association.Name#>"<#
			#>, Storage="<#=association.Storage#>"<#
			if (association.ThisKey != null) { #>, ThisKey="<#=association.ThisKey.Member#>"<#  }
			if (!association.IsForeignKey) {
				if (association.OtherKey != null) { #>, OtherKey="<#=association.OtherKey.Member#>"<# } 
			}
			else {	#>, IsForeignKey=true<# }
			if (association.DeleteOnNull) { #>, DeleteOnNull=true<# }
			if (association.DeleteRule != null) { #>, DeleteRule="<#= association.DeleteRule #>"<# } 
			#>)]
<# if (serialization && !association.IsForeignKey) { 
#>			[DataMember(Order=<#=dataMemberIndex++#>, EmitDefaultValue=false)]
<# } #>
<#			if (association.IsForeignKey) { #>
			public <#=association.Type.Name#> <#=association.Member#> {
				get { return <#=association.Storage#>.Entity; }
				set {
					<#=association.Type.Name#> previousValue = <#=association.Storage#>.Entity;
					if ((previousValue != value) || (!<#=association.Storage#>.HasLoadedOrAssignedValue)) {
						SendPropertyChanging();
						if (previousValue != null) {
							<#=association.Storage#>.Entity = null;
							previousValue.<#=association.OtherSide.Member#>.Remove(this);
						}
						<#=association.Storage#>.Entity = value;
						if (value != null) {
							value.<#=association.OtherSide.Member#>.Add(this);
							<#=association.ThisKey.Storage#> = value.<#=association.Type.PrimaryKey.Member #>;
						}
						else {
							<#=association.ThisKey.Storage#> = default(<#=code.Format(association.ThisKey.Type)#>);
						}
						SendPropertyChanged("<#=association.Member#>");
					}
				}
			}
<#			} else { #>
			public EntitySet<<#=association.Type.Name#>> <#=association.Member#> {
				get {
<#				if (serialization) {
					needsSerialization = true;
#>					if (serializing && ! <#=association.Storage#>.HasLoadedOrAssignedValues) {
						return null;
					}
<# } 
#>					return <#=association.Storage#>; 
				}
				set { <#=association.Storage#>.Assign(value); }
			}
		
			private void attach_<#=association.Member#>(<#=association.Type.Name#> entity) {
				SendPropertyChanging();
				entity.<#=association.OtherSide.Member #> = this;
			}
		
			private void detach_<#=association.Member#>(<#=association.Type.Name#> entity) {
				SendPropertyChanging();
				entity.<#=association.OtherSide.Member #> = null;
			}
<#			}
		}#>
			#endregion
		
<# if (serialization) {  #>
			#region Serialization
<# if (needsSerialization) { #>
			private bool serializing;
				
			[OnSerializing()]
			[EditorBrowsableAttribute(EditorBrowsableState.Never)]
			public void OnSerializing(StreamingContext context) {
				serializing = true;
			}
			
			[OnSerialized()]
			[EditorBrowsableAttribute(EditorBrowsableState.Never)]
			public void OnSerialized(StreamingContext context) {
				serializing = false;
			}		
<# } #>			
			[OnDeserializing()]
			[EditorBrowsableAttribute(EditorBrowsableState.Never)]
			public void OnDeserializing(StreamingContext context) {
				Initialize();
			}
			#endregion
<# } #>

<#		} #>
		}
<#	}
} #>
		public partial class FHtmCoverCircleEqResult
	{
		
		private System.Nullable<long> _HtmIDStart;
		
		private System.Nullable<long> _HtmIDEnd;
		
		public FHtmCoverCircleEqResult()
		{
		}
		
		[Column(Storage="_HtmIDStart", DbType="BigInt")]
		public System.Nullable<long> HtmIDStart
		{
			get
			{
				return this._HtmIDStart;
			}
			set
			{
				if ((this._HtmIDStart != value))
				{
					this._HtmIDStart = value;
				}
			}
		}
		
		[Column(Storage="_HtmIDEnd", DbType="BigInt")]
		public System.Nullable<long> HtmIDEnd
		{
			get
			{
				return this._HtmIDEnd;
			}
			set
			{
				if ((this._HtmIDEnd != value))
				{
					this._HtmIDEnd = value;
				}
			}
		}
	}
	
	public partial class FHtmCoverCircleLatLonResult
	{
		
		private System.Nullable<long> _HtmIDStart;
		
		private System.Nullable<long> _HtmIDEnd;
		
		public FHtmCoverCircleLatLonResult()
		{
		}
		
		[Column(Storage="_HtmIDStart", DbType="BigInt")]
		public System.Nullable<long> HtmIDStart
		{
			get
			{
				return this._HtmIDStart;
			}
			set
			{
				if ((this._HtmIDStart != value))
				{
					this._HtmIDStart = value;
				}
			}
		}
		
		[Column(Storage="_HtmIDEnd", DbType="BigInt")]
		public System.Nullable<long> HtmIDEnd
		{
			get
			{
				return this._HtmIDEnd;
			}
			set
			{
				if ((this._HtmIDEnd != value))
				{
					this._HtmIDEnd = value;
				}
			}
		}
	}
	
	public partial class FHtmCoverCircleXyzResult
	{
		
		private System.Nullable<long> _HtmIDStart;
		
		private System.Nullable<long> _HtmIDEnd;
		
		public FHtmCoverCircleXyzResult()
		{
		}
		
		[Column(Storage="_HtmIDStart", DbType="BigInt")]
		public System.Nullable<long> HtmIDStart
		{
			get
			{
				return this._HtmIDStart;
			}
			set
			{
				if ((this._HtmIDStart != value))
				{
					this._HtmIDStart = value;
				}
			}
		}
		
		[Column(Storage="_HtmIDEnd", DbType="BigInt")]
		public System.Nullable<long> HtmIDEnd
		{
			get
			{
				return this._HtmIDEnd;
			}
			set
			{
				if ((this._HtmIDEnd != value))
				{
					this._HtmIDEnd = value;
				}
			}
		}
	}
	
	public partial class FHtmCoverRegionResult
	{
		
		private long _HtmIDStart;
		
		private long _HtmIDEnd;
		
		public FHtmCoverRegionResult()
		{
		}
		
		[Column(Storage="_HtmIDStart", DbType="BigInt")]
		public long HtmIDStart
		{
			get
			{
				return this._HtmIDStart;
			}
			set
			{
				if ((this._HtmIDStart != value))
				{
					this._HtmIDStart = value;
				}
			}
		}
		
		[Column(Storage="_HtmIDEnd", DbType="BigInt")]
		public long HtmIDEnd
		{
			get
			{
				return this._HtmIDEnd;
			}
			set
			{
				if ((this._HtmIDEnd != value))
				{
					this._HtmIDEnd = value;
				}
			}
		}
	}
	
	public partial class FHtmEqToXyzResult
	{
		
		private System.Nullable<double> _X;
		
		private System.Nullable<double> _Y;
		
		private System.Nullable<double> _Z;
		
		public FHtmEqToXyzResult()
		{
		}
		
		[Column(Name="x", Storage="_X", DbType="Float")]
		public System.Nullable<double> X
		{
			get
			{
				return this._X;
			}
			set
			{
				if ((this._X != value))
				{
					this._X = value;
				}
			}
		}
		
		[Column(Name="y", Storage="_Y", DbType="Float")]
		public System.Nullable<double> Y
		{
			get
			{
				return this._Y;
			}
			set
			{
				if ((this._Y != value))
				{
					this._Y = value;
				}
			}
		}
		
		[Column(Name="z", Storage="_Z", DbType="Float")]
		public System.Nullable<double> Z
		{
			get
			{
				return this._Z;
			}
			set
			{
				if ((this._Z != value))
				{
					this._Z = value;
				}
			}
		}
	}
	
	public partial class FHtmLatLonToXyzResult
	{
		
		private System.Nullable<double> _X;
		
		private System.Nullable<double> _Y;
		
		private System.Nullable<double> _Z;
		
		public FHtmLatLonToXyzResult()
		{
		}
		
		[Column(Name="x", Storage="_X", DbType="Float")]
		public System.Nullable<double> X
		{
			get
			{
				return this._X;
			}
			set
			{
				if ((this._X != value))
				{
					this._X = value;
				}
			}
		}
		
		[Column(Name="y", Storage="_Y", DbType="Float")]
		public System.Nullable<double> Y
		{
			get
			{
				return this._Y;
			}
			set
			{
				if ((this._Y != value))
				{
					this._Y = value;
				}
			}
		}
		
		[Column(Name="z", Storage="_Z", DbType="Float")]
		public System.Nullable<double> Z
		{
			get
			{
				return this._Z;
			}
			set
			{
				if ((this._Z != value))
				{
					this._Z = value;
				}
			}
		}
	}
	
	public partial class FHtmNearbyEqResult
	{
		
		private System.Nullable<long> _HtmID;
		
		private System.Nullable<double> _Ra;
		
		private System.Nullable<double> _Dec;
		
		private System.Nullable<double> _X;
		
		private System.Nullable<double> _Y;
		
		private System.Nullable<double> _Z;
		
		private System.Nullable<long> _ObjID;
		
		private System.Nullable<double> _Distance;
		
		public FHtmNearbyEqResult()
		{
		}
		
		[Column(Storage="_HtmID", DbType="BigInt")]
		public System.Nullable<long> HtmID
		{
			get
			{
				return this._HtmID;
			}
			set
			{
				if ((this._HtmID != value))
				{
					this._HtmID = value;
				}
			}
		}
		
		[Column(Name="ra", Storage="_Ra", DbType="Float")]
		public System.Nullable<double> Ra
		{
			get
			{
				return this._Ra;
			}
			set
			{
				if ((this._Ra != value))
				{
					this._Ra = value;
				}
			}
		}
		
		[Column(Name="dec", Storage="_Dec", DbType="Float")]
		public System.Nullable<double> Dec
		{
			get
			{
				return this._Dec;
			}
			set
			{
				if ((this._Dec != value))
				{
					this._Dec = value;
				}
			}
		}
		
		[Column(Name="x", Storage="_X", DbType="Float")]
		public System.Nullable<double> X
		{
			get
			{
				return this._X;
			}
			set
			{
				if ((this._X != value))
				{
					this._X = value;
				}
			}
		}
		
		[Column(Name="y", Storage="_Y", DbType="Float")]
		public System.Nullable<double> Y
		{
			get
			{
				return this._Y;
			}
			set
			{
				if ((this._Y != value))
				{
					this._Y = value;
				}
			}
		}
		
		[Column(Name="z", Storage="_Z", DbType="Float")]
		public System.Nullable<double> Z
		{
			get
			{
				return this._Z;
			}
			set
			{
				if ((this._Z != value))
				{
					this._Z = value;
				}
			}
		}
		
		[Column(Storage="_ObjID", DbType="BigInt")]
		public System.Nullable<long> ObjID
		{
			get
			{
				return this._ObjID;
			}
			set
			{
				if ((this._ObjID != value))
				{
					this._ObjID = value;
				}
			}
		}
		
		[Column(Name="distance", Storage="_Distance", DbType="Float")]
		public System.Nullable<double> Distance
		{
			get
			{
				return this._Distance;
			}
			set
			{
				if ((this._Distance != value))
				{
					this._Distance = value;
				}
			}
		}
	}
	
	public partial class FHtmNearbyLatLonResult
	{
		
		private System.Nullable<long> _HtmID;
		
		private System.Nullable<double> _Lat;
		
		private System.Nullable<double> _Lon;
		
		private System.Nullable<double> _X;
		
		private System.Nullable<double> _Y;
		
		private System.Nullable<double> _Z;
		
		private System.Nullable<long> _ObjID;
		
		private System.Nullable<double> _Distance;
		
		public FHtmNearbyLatLonResult()
		{
		}
		
		[Column(Storage="_HtmID", DbType="BigInt")]
		public System.Nullable<long> HtmID
		{
			get
			{
				return this._HtmID;
			}
			set
			{
				if ((this._HtmID != value))
				{
					this._HtmID = value;
				}
			}
		}
		
		[Column(Storage="_Lat", DbType="Float")]
		public System.Nullable<double> Lat
		{
			get
			{
				return this._Lat;
			}
			set
			{
				if ((this._Lat != value))
				{
					this._Lat = value;
				}
			}
		}
		
		[Column(Storage="_Lon", DbType="Float")]
		public System.Nullable<double> Lon
		{
			get
			{
				return this._Lon;
			}
			set
			{
				if ((this._Lon != value))
				{
					this._Lon = value;
				}
			}
		}
		
		[Column(Name="x", Storage="_X", DbType="Float")]
		public System.Nullable<double> X
		{
			get
			{
				return this._X;
			}
			set
			{
				if ((this._X != value))
				{
					this._X = value;
				}
			}
		}
		
		[Column(Name="y", Storage="_Y", DbType="Float")]
		public System.Nullable<double> Y
		{
			get
			{
				return this._Y;
			}
			set
			{
				if ((this._Y != value))
				{
					this._Y = value;
				}
			}
		}
		
		[Column(Name="z", Storage="_Z", DbType="Float")]
		public System.Nullable<double> Z
		{
			get
			{
				return this._Z;
			}
			set
			{
				if ((this._Z != value))
				{
					this._Z = value;
				}
			}
		}
		
		[Column(Storage="_ObjID", DbType="BigInt")]
		public System.Nullable<long> ObjID
		{
			get
			{
				return this._ObjID;
			}
			set
			{
				if ((this._ObjID != value))
				{
					this._ObjID = value;
				}
			}
		}
		
		[Column(Name="distance", Storage="_Distance", DbType="Float")]
		public System.Nullable<double> Distance
		{
			get
			{
				return this._Distance;
			}
			set
			{
				if ((this._Distance != value))
				{
					this._Distance = value;
				}
			}
		}
	}
	
	public partial class FHtmNearbyXYZResult
	{
		
		private System.Nullable<long> _HtmID;
		
		private System.Nullable<double> _Lat;
		
		private System.Nullable<double> _Lon;
		
		private System.Nullable<double> _X;
		
		private System.Nullable<double> _Y;
		
		private System.Nullable<double> _Z;
		
		private System.Nullable<long> _ObjID;
		
		private System.Nullable<double> _Distance;
		
		public FHtmNearbyXYZResult()
		{
		}
		
		[Column(Storage="_HtmID", DbType="BigInt")]
		public System.Nullable<long> HtmID
		{
			get
			{
				return this._HtmID;
			}
			set
			{
				if ((this._HtmID != value))
				{
					this._HtmID = value;
				}
			}
		}
		
		[Column(Storage="_Lat", DbType="Float")]
		public System.Nullable<double> Lat
		{
			get
			{
				return this._Lat;
			}
			set
			{
				if ((this._Lat != value))
				{
					this._Lat = value;
				}
			}
		}
		
		[Column(Storage="_Lon", DbType="Float")]
		public System.Nullable<double> Lon
		{
			get
			{
				return this._Lon;
			}
			set
			{
				if ((this._Lon != value))
				{
					this._Lon = value;
				}
			}
		}
		
		[Column(Name="x", Storage="_X", DbType="Float")]
		public System.Nullable<double> X
		{
			get
			{
				return this._X;
			}
			set
			{
				if ((this._X != value))
				{
					this._X = value;
				}
			}
		}
		
		[Column(Name="y", Storage="_Y", DbType="Float")]
		public System.Nullable<double> Y
		{
			get
			{
				return this._Y;
			}
			set
			{
				if ((this._Y != value))
				{
					this._Y = value;
				}
			}
		}
		
		[Column(Name="z", Storage="_Z", DbType="Float")]
		public System.Nullable<double> Z
		{
			get
			{
				return this._Z;
			}
			set
			{
				if ((this._Z != value))
				{
					this._Z = value;
				}
			}
		}
		
		[Column(Storage="_ObjID", DbType="BigInt")]
		public System.Nullable<long> ObjID
		{
			get
			{
				return this._ObjID;
			}
			set
			{
				if ((this._ObjID != value))
				{
					this._ObjID = value;
				}
			}
		}
		
		[Column(Name="distance", Storage="_Distance", DbType="Float")]
		public System.Nullable<double> Distance
		{
			get
			{
				return this._Distance;
			}
			set
			{
				if ((this._Distance != value))
				{
					this._Distance = value;
				}
			}
		}
	}
	
	public partial class FHtmNearestEqResult
	{
		
		private System.Nullable<long> _HtmID;
		
		private System.Nullable<double> _Ra;
		
		private System.Nullable<double> _Dec;
		
		private System.Nullable<double> _X;
		
		private System.Nullable<double> _Y;
		
		private System.Nullable<double> _Z;
		
		private System.Nullable<long> _ObjID;
		
		private System.Nullable<double> _Distance;
		
		public FHtmNearestEqResult()
		{
		}
		
		[Column(Storage="_HtmID", DbType="BigInt")]
		public System.Nullable<long> HtmID
		{
			get
			{
				return this._HtmID;
			}
			set
			{
				if ((this._HtmID != value))
				{
					this._HtmID = value;
				}
			}
		}
		
		[Column(Name="ra", Storage="_Ra", DbType="Float")]
		public System.Nullable<double> Ra
		{
			get
			{
				return this._Ra;
			}
			set
			{
				if ((this._Ra != value))
				{
					this._Ra = value;
				}
			}
		}
		
		[Column(Name="dec", Storage="_Dec", DbType="Float")]
		public System.Nullable<double> Dec
		{
			get
			{
				return this._Dec;
			}
			set
			{
				if ((this._Dec != value))
				{
					this._Dec = value;
				}
			}
		}
		
		[Column(Name="x", Storage="_X", DbType="Float")]
		public System.Nullable<double> X
		{
			get
			{
				return this._X;
			}
			set
			{
				if ((this._X != value))
				{
					this._X = value;
				}
			}
		}
		
		[Column(Name="y", Storage="_Y", DbType="Float")]
		public System.Nullable<double> Y
		{
			get
			{
				return this._Y;
			}
			set
			{
				if ((this._Y != value))
				{
					this._Y = value;
				}
			}
		}
		
		[Column(Name="z", Storage="_Z", DbType="Float")]
		public System.Nullable<double> Z
		{
			get
			{
				return this._Z;
			}
			set
			{
				if ((this._Z != value))
				{
					this._Z = value;
				}
			}
		}
		
		[Column(Storage="_ObjID", DbType="BigInt")]
		public System.Nullable<long> ObjID
		{
			get
			{
				return this._ObjID;
			}
			set
			{
				if ((this._ObjID != value))
				{
					this._ObjID = value;
				}
			}
		}
		
		[Column(Name="distance", Storage="_Distance", DbType="Float")]
		public System.Nullable<double> Distance
		{
			get
			{
				return this._Distance;
			}
			set
			{
				if ((this._Distance != value))
				{
					this._Distance = value;
				}
			}
		}
	}
	
	public partial class FHtmNearestLatLonResult
	{
		
		private System.Nullable<long> _HtmID;
		
		private System.Nullable<double> _Lat;
		
		private System.Nullable<double> _Lon;
		
		private System.Nullable<double> _X;
		
		private System.Nullable<double> _Y;
		
		private System.Nullable<double> _Z;
		
		private System.Nullable<long> _ObjID;
		
		private System.Nullable<double> _Distance;
		
		public FHtmNearestLatLonResult()
		{
		}
		
		[Column(Storage="_HtmID", DbType="BigInt")]
		public System.Nullable<long> HtmID
		{
			get
			{
				return this._HtmID;
			}
			set
			{
				if ((this._HtmID != value))
				{
					this._HtmID = value;
				}
			}
		}
		
		[Column(Storage="_Lat", DbType="Float")]
		public System.Nullable<double> Lat
		{
			get
			{
				return this._Lat;
			}
			set
			{
				if ((this._Lat != value))
				{
					this._Lat = value;
				}
			}
		}
		
		[Column(Storage="_Lon", DbType="Float")]
		public System.Nullable<double> Lon
		{
			get
			{
				return this._Lon;
			}
			set
			{
				if ((this._Lon != value))
				{
					this._Lon = value;
				}
			}
		}
		
		[Column(Name="x", Storage="_X", DbType="Float")]
		public System.Nullable<double> X
		{
			get
			{
				return this._X;
			}
			set
			{
				if ((this._X != value))
				{
					this._X = value;
				}
			}
		}
		
		[Column(Name="y", Storage="_Y", DbType="Float")]
		public System.Nullable<double> Y
		{
			get
			{
				return this._Y;
			}
			set
			{
				if ((this._Y != value))
				{
					this._Y = value;
				}
			}
		}
		
		[Column(Name="z", Storage="_Z", DbType="Float")]
		public System.Nullable<double> Z
		{
			get
			{
				return this._Z;
			}
			set
			{
				if ((this._Z != value))
				{
					this._Z = value;
				}
			}
		}
		
		[Column(Storage="_ObjID", DbType="BigInt")]
		public System.Nullable<long> ObjID
		{
			get
			{
				return this._ObjID;
			}
			set
			{
				if ((this._ObjID != value))
				{
					this._ObjID = value;
				}
			}
		}
		
		[Column(Name="distance", Storage="_Distance", DbType="Float")]
		public System.Nullable<double> Distance
		{
			get
			{
				return this._Distance;
			}
			set
			{
				if ((this._Distance != value))
				{
					this._Distance = value;
				}
			}
		}
	}
	
	public partial class FHtmNearestXYZResult
	{
		
		private System.Nullable<long> _HtmID;
		
		private System.Nullable<double> _Lat;
		
		private System.Nullable<double> _Lon;
		
		private System.Nullable<double> _X;
		
		private System.Nullable<double> _Y;
		
		private System.Nullable<double> _Z;
		
		private System.Nullable<long> _ObjID;
		
		private System.Nullable<double> _Distance;
		
		public FHtmNearestXYZResult()
		{
		}
		
		[Column(Storage="_HtmID", DbType="BigInt")]
		public System.Nullable<long> HtmID
		{
			get
			{
				return this._HtmID;
			}
			set
			{
				if ((this._HtmID != value))
				{
					this._HtmID = value;
				}
			}
		}
		
		[Column(Storage="_Lat", DbType="Float")]
		public System.Nullable<double> Lat
		{
			get
			{
				return this._Lat;
			}
			set
			{
				if ((this._Lat != value))
				{
					this._Lat = value;
				}
			}
		}
		
		[Column(Storage="_Lon", DbType="Float")]
		public System.Nullable<double> Lon
		{
			get
			{
				return this._Lon;
			}
			set
			{
				if ((this._Lon != value))
				{
					this._Lon = value;
				}
			}
		}
		
		[Column(Name="x", Storage="_X", DbType="Float")]
		public System.Nullable<double> X
		{
			get
			{
				return this._X;
			}
			set
			{
				if ((this._X != value))
				{
					this._X = value;
				}
			}
		}
		
		[Column(Name="y", Storage="_Y", DbType="Float")]
		public System.Nullable<double> Y
		{
			get
			{
				return this._Y;
			}
			set
			{
				if ((this._Y != value))
				{
					this._Y = value;
				}
			}
		}
		
		[Column(Name="z", Storage="_Z", DbType="Float")]
		public System.Nullable<double> Z
		{
			get
			{
				return this._Z;
			}
			set
			{
				if ((this._Z != value))
				{
					this._Z = value;
				}
			}
		}
		
		[Column(Storage="_ObjID", DbType="BigInt")]
		public System.Nullable<long> ObjID
		{
			get
			{
				return this._ObjID;
			}
			set
			{
				if ((this._ObjID != value))
				{
					this._ObjID = value;
				}
			}
		}
		
		[Column(Name="distance", Storage="_Distance", DbType="Float")]
		public System.Nullable<double> Distance
		{
			get
			{
				return this._Distance;
			}
			set
			{
				if ((this._Distance != value))
				{
					this._Distance = value;
				}
			}
		}
	}
	
	public partial class FHtmRegionObjectsResult
	{
		
		private System.Nullable<long> _ObjID;
		
		public FHtmRegionObjectsResult()
		{
		}
		
		[Column(Name="objID", Storage="_ObjID", DbType="BigInt")]
		public System.Nullable<long> ObjID
		{
			get
			{
				return this._ObjID;
			}
			set
			{
				if ((this._ObjID != value))
				{
					this._ObjID = value;
				}
			}
		}
	}
	
	public partial class FHtmRegionToTableResult
	{
		
		private System.Nullable<long> _ConvexID;
		
		private System.Nullable<long> _HalfspaceID;
		
		private System.Nullable<double> _X;
		
		private System.Nullable<double> _Y;
		
		private System.Nullable<double> _Z;
		
		private System.Nullable<double> _D;
		
		public FHtmRegionToTableResult()
		{
		}
		
		[Column(Name="convexID", Storage="_ConvexID", DbType="BigInt")]
		public System.Nullable<long> ConvexID
		{
			get
			{
				return this._ConvexID;
			}
			set
			{
				if ((this._ConvexID != value))
				{
					this._ConvexID = value;
				}
			}
		}
		
		[Column(Name="halfspaceID", Storage="_HalfspaceID", DbType="BigInt")]
		public System.Nullable<long> HalfspaceID
		{
			get
			{
				return this._HalfspaceID;
			}
			set
			{
				if ((this._HalfspaceID != value))
				{
					this._HalfspaceID = value;
				}
			}
		}
		
		[Column(Name="x", Storage="_X", DbType="Float")]
		public System.Nullable<double> X
		{
			get
			{
				return this._X;
			}
			set
			{
				if ((this._X != value))
				{
					this._X = value;
				}
			}
		}
		
		[Column(Name="y", Storage="_Y", DbType="Float")]
		public System.Nullable<double> Y
		{
			get
			{
				return this._Y;
			}
			set
			{
				if ((this._Y != value))
				{
					this._Y = value;
				}
			}
		}
		
		[Column(Name="z", Storage="_Z", DbType="Float")]
		public System.Nullable<double> Z
		{
			get
			{
				return this._Z;
			}
			set
			{
				if ((this._Z != value))
				{
					this._Z = value;
				}
			}
		}
		
		[Column(Storage="_D", DbType="Float")]
		public System.Nullable<double> D
		{
			get
			{
				return this._D;
			}
			set
			{
				if ((this._D != value))
				{
					this._D = value;
				}
			}
		}
	}
	
	public partial class FHtmToCenterPointResult
	{
		
		private System.Nullable<double> _X;
		
		private System.Nullable<double> _Y;
		
		private System.Nullable<double> _Z;
		
		public FHtmToCenterPointResult()
		{
		}
		
		[Column(Name="x", Storage="_X", DbType="Float")]
		public System.Nullable<double> X
		{
			get
			{
				return this._X;
			}
			set
			{
				if ((this._X != value))
				{
					this._X = value;
				}
			}
		}
		
		[Column(Name="y", Storage="_Y", DbType="Float")]
		public System.Nullable<double> Y
		{
			get
			{
				return this._Y;
			}
			set
			{
				if ((this._Y != value))
				{
					this._Y = value;
				}
			}
		}
		
		[Column(Name="z", Storage="_Z", DbType="Float")]
		public System.Nullable<double> Z
		{
			get
			{
				return this._Z;
			}
			set
			{
				if ((this._Z != value))
				{
					this._Z = value;
				}
			}
		}
	}
	
	public partial class FHtmToCornerPointsResult
	{
		
		private System.Nullable<double> _X;
		
		private System.Nullable<double> _Y;
		
		private System.Nullable<double> _Z;
		
		public FHtmToCornerPointsResult()
		{
		}
		
		[Column(Name="x", Storage="_X", DbType="Float")]
		public System.Nullable<double> X
		{
			get
			{
				return this._X;
			}
			set
			{
				if ((this._X != value))
				{
					this._X = value;
				}
			}
		}
		
		[Column(Name="y", Storage="_Y", DbType="Float")]
		public System.Nullable<double> Y
		{
			get
			{
				return this._Y;
			}
			set
			{
				if ((this._Y != value))
				{
					this._Y = value;
				}
			}
		}
		
		[Column(Name="z", Storage="_Z", DbType="Float")]
		public System.Nullable<double> Z
		{
			get
			{
				return this._Z;
			}
			set
			{
				if ((this._Z != value))
				{
					this._Z = value;
				}
			}
		}
	}
	
	public partial class FHtmXyzToEqResult
	{
		
		private System.Nullable<double> _Ra;
		
		private System.Nullable<double> _Dec;
		
		public FHtmXyzToEqResult()
		{
		}
		
		[Column(Name="ra", Storage="_Ra", DbType="Float")]
		public System.Nullable<double> Ra
		{
			get
			{
				return this._Ra;
			}
			set
			{
				if ((this._Ra != value))
				{
					this._Ra = value;
				}
			}
		}
		
		[Column(Name="dec", Storage="_Dec", DbType="Float")]
		public System.Nullable<double> Dec
		{
			get
			{
				return this._Dec;
			}
			set
			{
				if ((this._Dec != value))
				{
					this._Dec = value;
				}
			}
		}
	}
	
	public partial class FHtmXyzToLatLonResult
	{
		
		private System.Nullable<double> _Lat;
		
		private System.Nullable<double> _Lon;
		
		public FHtmXyzToLatLonResult()
		{
		}
		
		[Column(Storage="_Lat", DbType="Float")]
		public System.Nullable<double> Lat
		{
			get
			{
				return this._Lat;
			}
			set
			{
				if ((this._Lat != value))
				{
					this._Lat = value;
				}
			}
		}
		
		[Column(Storage="_Lon", DbType="Float")]
		public System.Nullable<double> Lon
		{
			get
			{
				return this._Lon;
			}
			set
			{
				if ((this._Lon != value))
				{
					this._Lon = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
