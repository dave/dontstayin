var dbc0; var dbc1; var dbc2 = false; function DbButtonInit(l0) { if (!dbc2) { dbc2 = true; dbc1 = l0; dbc0 = []; } } function DbButton( l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l11, l12, l13, l14, l15, l16, l17, l18) { DbButtonFull( l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l11, l12, l13, l14, l15, l16, l17, l18, ""); } function DbButtonFull( l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l11, l12, l13, l14, l15, l16, l17, l18, l19) { try { var l20 = l19 != "-"; var l21 = l14 == "1" ? true : false; dbc0[l15+"-1"] = l21; dbc0[l15+"-4"] = l3; dbc0[l15+"-5"] = l4; dbc0[l15+"-6"] = l5; dbc0[l15+"-7"] = l6; dbc0[l15+"-8"] = l12; dbc0[l15+"-9"] = l13; dbc0[l15+"-10"] = l16; if (l20) { var l22   = l21 ? l3 : l4; var l23  = l21 ? l5 : l6; var l24 = l9==""?"":"align=\""+l9+"\""; var l25 = l8==""?"":"style=\""+l8+"\""; var l26 = l7==""?"":"class=\""+l7+"\""; var l27 = l22==""?"":"onmouseover=\"stt('"+l22.replace(/'/,"\\'")+"');\" onmouseout=\"htm();\""; var l28 = l23==""?"":"<span id=\""+l15+"-span\">"+l23+"</span>"; var l29 = "<span id=\""+l15+"\" "+l27+"><a href=\"\" "+l25+" "+l26+" onclick=\"DbButtonClick('"+l15+"');return false;\"><img src=\""+l1+"\" border=\"0\" "+l24+" "+l25+" "+l26+" height=\""+l11+"\" width=\""+l10+"\" id=\""+l15+"-true\"><img src=\""+l2+"\" border=\"0\" "+l24+" "+l25+" "+l26+" height=\""+l11+"\" width=\""+l10+"\" id=\""+l15+"-false\">"+l28+"</a></span>"; if (l19 != "-") { if (l19 == "") document.write(l29); else document.getElementById(l19).innerHTML = l29; } } var l30 = document.getElementById(l15+"-true"); var l31 = document.getElementById(l15+"-false"); if (l20) { l30.style.display = l21?"":"none"; l31.style.display = ! l21?"":"none"; } dbc0[l15+"-11"] = l30; dbc0[l15+"-12"] = l31; dbc0[l15+"-13"] = false; dbc0[l15+"-14"] = l17; dbc0[l15+"-15"] = l18; } catch(ex){} } function DbButtonClick(l15) { WhenLoggedIn( function() { var l32 = dbc0[l15+"-1"]; var l33 = ! l32; var l34; if (l33) l34 = dbc0[l15+"-14"]; else l34 = dbc0[l15+"-15"]; if (l34!="") { if (!confirm(l34)) return; } DbButtonSetState(l15, l33); var l3 = dbc0[l15+"-4"]; var l4 = dbc0[l15+"-5"]; var l5 = dbc0[l15+"-6"]; var l6 = dbc0[l15+"-7"]; var l12 = dbc0[l15+"-8"]; var l13 = dbc0[l15+"-9"]; var l35 = dbc3(); var l36 = dbc4(l35); l36.setAttribute("s",l33?"1":"0"); l36.setAttribute("f",l12); l36.setAttribute("a",l13); l36.setAttribute("p",location.href); if (!dbc0[l15+"-13"]) dbc0[l15+"-13"] = dbc5(); var l37 = dbc0[l15+"-13"]; try { l37.open("POST","/support/DbButtonServer.aspx",true); l37.setRequestHeader("Content-Type","text/xml"); if (dbc1) l37.setRequestHeader("Accept-Language","en/us"); l37.onreadystatechange = function(){dbc6(l15)}; l37.send(dbc7(l35)); } catch(ex){} } ); } function DbButtonSetState(l15,l32) { if(l15.split("_").length > 1) { var idArray = l15.split("_"); for(var i=0; i<idArray.length; i++) { DbButtonSetState(idArray[i], l32); } } var l3 = dbc0[l15+"-4"]; var l4 = dbc0[l15+"-5"]; var l5 = dbc0[l15+"-6"]; var l6 = dbc0[l15+"-7"]; var l30 = dbc0[l15+"-11"]; var l31 = dbc0[l15+"-12"]; dbc0[l15+"-1"] = l32; l30.style.display = l32?"":"none"; l31.style.display = ! l32?"":"none"; var l38 = l32?l3:l4; if (l38=="") document.getElementById(l15).onmouseover = function(){}; else document.getElementById(l15).onmouseover = function(){stt(l38);}; var l39 = l32?l5:l6; if (l39!="") { document.getElementById(l15+"-span").innerHTML=l39; } } function DbButtonSetArgs(l15,l40) { dbc0[l15+"-9"] = l40; } function dbc6(l15) { if (!dbc0[l15+"-13"]) return; if (dbc0[l15+"-13"]==null) return; if (dbc0[l15+"-13"].readyState==4) { try { if (dbc0[l15+"-13"].status==200) { htm(); var l41 = dbc0[l15+"-1"]; var l16 = dbc0[l15+"-10"]; var l42 = dbc0[l15+"-13"].responseXML.documentElement; if (l42.getAttribute("s")!=null && l42.getAttribute("s").length>0) { var l33 = (l42.getAttribute("s") == "1"?true:false); DbButtonSetState(l15,l33); if (l16!="") { eval(l16+"('"+l15+"',"+l41+","+l33+");"); } } else if (l42.getAttribute("l")!=null && l42.getAttribute("l").length>0) { document.location="/pages/login?er=You+must+log+on+before+using+this+button&url="+escape(document.location); } else if (l42.getAttribute("r")!=null && l42.getAttribute("r").length>0) { document.location=l42.getAttribute("r"); } if (l42.getAttribute("e")!=null && l42.getAttribute("e").length>0) { eval(l42.getAttribute("e")); } try { if(l42.getAttribute("ex")!=null && l42.getAttribute("ex").length>0) { DbChatDebug("[Button error (1): "+l42.getAttribute("ex")+"]"); } } catch(ex) { } } } catch(ex) { DbChatDebug("[Button error (2): "+ex.message+"]"); } } } function openPopup(url) { var popUp = window.open(url, popUp, 'toolbar=0,scrollbars=1,location=0,statusbar=0,menubar=0,resizable=1,width=500,height=400'); if (!popUp.opener) popUp.opener = self; } function openPopupFocus(url) { var popUp = window.open(url, popUp, 'toolbar=0,scrollbars=1,location=0,statusbar=0,menubar=0,resizable=1,width=500,height=400'); if (!popUp.opener) popUp.opener = self; popUp.focus(); } function openPopupFocusSize(url,width,height) { var popUp = window.open(url, popUp, 'toolbar=0,scrollbars=1,location=0,statusbar=0,menubar=0,resizable=1,width='+width+',height='+height); if (!popUp.opener) popUp.opener = self; popUp.focus(); } function newImage(arg) { if (document.images) { rslt = new Image(); rslt.src = arg; return rslt; } } function changeImages() { if (document.images && (preloadFlag == true)) { for (var i=0; i<changeImages.arguments.length; i+=2) { document[changeImages.arguments[i]].src = changeImages.arguments[i+1]; } } } function UnreadString(l0) { return "Skip to new comments on page " + l0; } function UnreadNewString(l1, l2) { if (l1 == 0) { return "You have been invited to this topic by a buddy"; } else if (l1 == 4) { var l3 = "in a forum"; if (l2 == 1) l3 = "on a photo"; else if (l2 == 2) l3 = "in an event"; else if (l2 == 3) l3 = "in a venue"; else if (l2 == 4) l3 = "in a place"; else if (l2 == 6) l3 = "in a topic"; else if (l2 == 7) l3 = "in a country"; else if (l2 == 8) l3 = "on an article"; else if (l2 == 10) l3 = "in a brand"; else if (l2 == 13) l3 = "in a region"; else if (l2 == 14) l3 = "in a gallery"; else if (l2 == 15) l3 = "in a group";          return "This is a new topic " + l3 + " you're watching"; } else if (l1 == 5) { return "This is new group news topic"; } else { return "n/a"; } } function QuoteGeneric(l4, l5) { var l6 = ""; if (window.getSelection) l6 = window.getSelection()+""; else if (document.getSelection) l6 = document.getSelection()+""; else if (document.selection) l6 = document.selection.createRange().text+""; l6 = l6.replace(/<(.|\n)*?>/g, ""); l6 = l6.replace(/^\s+|\s+$/g, ""); if (l6.length > 500) l6 = l6.substring(0, 499) + "..."; if (l6.length==0) { alert("First select some text to quote"); return; } l4.value += "<dsi:quote ref=\"" + l5 + "\">" + l6 + "</dsi:quote>\n\n"; } function FocusGeneric(l4) { var l7 = false; if (document.all && window.ActiveXObject && navigator.userAgent.toLowerCase().indexOf("msie") > -1  && navigator.userAgent.toLowerCase().indexOf("opera") == -1) l7 = true; if (l7) { var l8 = l4.createTextRange(); l8.moveStart("character", l4.value.length); l8.moveEnd("character", l4.value.length); l8.collapse(true); l4.focus(); l8.select(); } else { l4.focus(); l4.setSelectionRange(l4.value.length, l4.value.length); } } var dbc8; function HitPhoto(l0) { var l1 = dbc3(); var l2 = dbc4(l1); l2.setAttribute("k",l0); if (!dbc8) dbc8 = dbc5(); try { dbc8.open("POST","/support/HitPhoto.aspx",true); dbc8.setRequestHeader("Content-Type","text/xml"); if (dbc1) dbc8.setRequestHeader("Accept-Language","en/us"); dbc8.onreadystatechange = function(){dbc9(l0)}; dbc8.send(dbc7(l1)); } catch(ex){} } function dbc9(l0) { if (!dbc8) return; if (dbc8==null) return; if (dbc8.readyState==4) { try { if (dbc8.status==200) { var l3 = dbc8.responseXML.documentElement; var l4 = l3.getAttribute("k"); var l5 = l3.getAttribute("fav"); var l6 = l3.getAttribute("me"); var l7 = dbc10(l3); SwitchPhotoReturn(l4,l6,l5,l7); try { if(l3.getAttribute("ex")!=null && l3.getAttribute("ex").length>0) { DbChatDebug("[HitPhoto server error: "+l3.getAttribute("ex")+"]"); } } catch(ex) { } } } catch(ex) { DbChatDebug("[HitPhoto javascript error: "+ex.message+"]"); } } } var HtmlControlSelectionRange; function HtmlControlShowHide(div, clientId) { var prefix = clientId + (clientId.length == 0 ? "" : "_"); document.getElementById(prefix + 'LinkDiv').style.display = (div == 'Link' ? '' : 'none'); document.getElementById(prefix + 'ImageDiv').style.display = (div == 'Image' ? '' : 'none'); document.getElementById(prefix + 'VideoDiv').style.display = (div == 'Video' ? '' : 'none'); document.getElementById(prefix + 'MixmagDiv').style.display = (div == 'Mixmag' ? '' : 'none'); document.getElementById(prefix + 'FlashDiv').style.display = (div == 'Flash' ? '' : 'none'); document.getElementById(prefix + 'AdvancedDiv').style.display = (div == 'Advanced' ? '' : 'none'); HtmlControlSetHelperAnchor(document.getElementById(prefix + 'LinkAnchor'), div == 'Link'); HtmlControlSetHelperAnchor(document.getElementById(prefix + 'ImageAnchor'), div == 'Image'); HtmlControlSetHelperAnchor(document.getElementById(prefix + 'VideoAnchor'), div == 'Video'); HtmlControlSetHelperAnchor(document.getElementById(prefix + 'MixmagAnchor'), div == 'Mixmag'); HtmlControlSetHelperAnchor(document.getElementById(prefix + 'FlashAnchor'), div == 'Flash'); HtmlControlSetHelperAnchor(document.getElementById(prefix + 'AdvancedAnchor'), div == 'Advanced'); document.getElementById(prefix + 'HelperPanelDisplayState').value = div; } function HtmlControlSetHelperAnchor(btn, state) { if (state) { btn.className = "HelperAnchor Selected"; } else { btn.className = "HelperAnchor"; } } function HtmlControlReplaceText(clientId, replacementType, isInsert) { var prefix = clientId + (clientId.length == 0 ? "" : "_"); var textBox = document.getElementById(prefix + "HtmlTextBox"); var isIE = false; if (document.all && window.ActiveXObject && navigator.userAgent.toLowerCase().indexOf("msie") > -1  && navigator.userAgent.toLowerCase().indexOf("opera") == -1) isIE = true; var replacement = ""; if (isIE) { var range = document.selection.createRange(); HtmlControlSelectionRange = range; var type = document.selection.type; var pe = type=="Control" ? range.item(0).parentElement : range.parentElement(); if (pe!=textBox) { alert("Make sure your cursor is in the comment textbox first"); return; } if (!isInsert) { replacement = range.text; if (replacement=="") { alert("First select some text"); return; } } } else { var start = textBox.selectionStart; if (!isInsert) { replacement = textBox.value.substring(start, textBox.selectionEnd); if (replacement=="") { alert("First select some text"); return; } } } if (replacementType != "MakeBold" && replacementType != "MakeItalic" && replacementType != "MakeSmall") ShowWaitingCursor(); if (replacementType == "MakeBold") { HtmlControlReplaceTextSucceededCallback("<b>" + HtmlControlMakeEnd(replacement, "</b>"), clientId, null); } else if (replacementType == "MakeItalic") { HtmlControlReplaceTextSucceededCallback("<i>" + HtmlControlMakeEnd(replacement, "</i>"), clientId, null); } else if (replacementType == "MakeSmall") { HtmlControlReplaceTextSucceededCallback("<small>" + HtmlControlMakeEnd(replacement, "</small>"), clientId, null); } else if (replacementType == "LinkUrl") { Spotted.WebServices.Html.LinkUrl( document.getElementById(prefix + 'LinkUrlTextBox').value,  replacement,  HtmlControlReplaceTextSucceededCallback,  HtmlControlReplaceTextFailedCallback,  clientId,  null); } else if (replacementType == "LinkProfile") { Spotted.WebServices.Html.LinkProfile( buddyChooserGetNickname(prefix + 'LinkProfileBuddyChooser'),  HtmlControlReplaceTextSucceededCallback,  HtmlControlReplaceTextFailedCallback,  clientId,  null); } else if (replacementType == "ImageUrl") { Spotted.WebServices.Html.ImageUrl( document.getElementById(prefix + 'ImageUrlSrcTextBox').value,  document.getElementById(prefix + 'ImageUrlHrefTextBox').value,  HtmlControlReplaceTextSucceededCallback,  HtmlControlReplaceTextFailedCallback,  clientId,  null); } else if (replacementType == "VideoFlv") { Spotted.WebServices.Html.VideoFlv( document.getElementById(prefix + 'VideoFlvUrlTextBox').value,  document.getElementById(prefix + 'VideoFlvWidthTextBox').value,  document.getElementById(prefix + 'VideoFlvHeightTextBox').value, HtmlControlReplaceTextSucceededCallback,  HtmlControlReplaceTextFailedCallback,  clientId,  null); } else if (replacementType == "FlashSwfUrl") { Spotted.WebServices.Html.FlashSwfUrl( document.getElementById(prefix + 'FlashSwfUrlUrlTextBox').value,  document.getElementById(prefix + 'FlashSwfUrlWidthTextBox').value,  document.getElementById(prefix + 'FlashSwfUrlHeightTextBox').value, document.getElementById(prefix + 'FlashSwfUrlDrawDropDownList').selectedIndex, HtmlControlReplaceTextSucceededCallback,  HtmlControlReplaceTextFailedCallback,  clientId,  null); } } function HtmlControlMakeEnd(str,end) { if (str.substring(str.length-1)==" ") return str.substring(0,str.length-1)+end+" "; else return str+end; } function HtmlControlReplaceTextSucceededCallback(result, clientId, methodName) { HideWaitingCursor(); var prefix = clientId + (clientId.length == 0 ? "" : "_"); var textBox = document.getElementById(prefix + "HtmlTextBox"); var isIE = false; if (document.all && window.ActiveXObject && navigator.userAgent.toLowerCase().indexOf("msie") > -1  && navigator.userAgent.toLowerCase().indexOf("opera") == -1) isIE = true; if (isIE) {  HtmlControlSelectionRange.text = result; HtmlControlSelectionRange.collapse(true); textBox.focus(); HtmlControlSelectionRange.select(); } else { var start = textBox.selectionStart; textBox.value = textBox.value.substring(0, start) + result + textBox.value.substring(textBox.selectionEnd, textBox.value.length); textBox.focus(); textBox.setSelectionRange(start + result.length, start + result.length); } } function HtmlControlReplaceTextFailedCallback(error) { HideWaitingCursor(); } function dbc11(l0) {   return l0.replace(/</g,"&lt;").replace(/>/g,"&gt;") } function dbc12(l1,l2){ if (!dbc13) return; if (dbc13==null) return; if (dbc13.readyState==4) { try { if (dbc13.status==200) { var l3 = dbc13.responseXML.documentElement; try { var l4 = l3.getAttribute("redirect"); if (l4.length > 10) { document.location = l4; return; } } catch(ex1){} var l5 = l3.getAttribute("resetTicks"); var l6 = l3.getAttribute("results"); if (l5=="1") { var l7 = l3.getAttribute("ticks"); DbChatTicks = l7; } var l8 = l3.getElementsByTagName("chatItem"); var l9 = false; if (l8.length>0) l9 = true; var l10 = false; var l11 = false; var l12 = ""; var l13 = ""; var l14 = ""; var l15 = ""; var l16 = ""; var l17 = ""; var l18 = ""; var l19 = ""; for (var i=0;i<l8.length;i++) { var l20 = l8.item(i); var l21 = l20.getAttribute("type"); var l22 = l20.getAttribute("dateTime"); var l23 = ""; var l24 = ""; var l25 = false; var l26 = false; var l27 = ""; var l28 = ""; var l29 = ""; var l30 = ""; if (l21=="1") { var l31 = l20.getElementsByTagName("chatMessage").item(0); l27 = l31.getAttribute("nickName"); var l32 = l31.getAttribute("stmu"); var l33 = l31.getAttribute("k"); var l34 = dbc10(l31); l10 = true; l23 = l31.getAttribute("pic"); l25 = false; l26 = false; l28 = l31.getAttribute("usrK"); l18 = l20.getAttribute("dateTime"); l16 = "<div class=\"ChatName\"><a href=\"/members/"+l27.toLowerCase()+"\" onmouseover=\"stmu('"+l23+"',"+l32+");\" onmouseout=\"htm();\" class=\"NameAnchor\">" + l27 + "</a>:</div><div class=\"ChatMessage\">" + l34 + "</div>" + l16; document.getElementById("ChatMessages").innerHTML=l33+" messages posted" } else if (l21=="2") { var l31 = l20.getElementsByTagName("privateMessage").item(0); var l32 = l31.getAttribute("stmu"); var l33 = l31.getAttribute("k"); l29 = l31.getAttribute("t"); l30 = l31.getAttribute("u"); var l35 = l31.getAttribute("subject"); var l36 = l31.getAttribute("short"); var l37 = l31.getAttribute("alert"); var l34 = dbc10(l31); l18 = l20.getAttribute("dateTime"); l28 = l31.getAttribute("usrK"); l38 = l31.getAttribute("nickName"); l39 = l31.getAttribute("pic"); if ( ( typeof(DbChatPrivate)!="undefined" &&  DbChatPrivateThreadK!="0" &&  l29!="0" &&  DbChatPrivateThreadK == l29 ) || ( typeof(DbChatPrivate)!="undefined" &&  DbChatPrivateUsrK != "0" &&  dbc14 != "0" && l30 != "0" &&  (DbChatPrivateUsrK == l28 || (dbc14 == l28 && DbChatPrivateUsrK == l30)) ) ) { l27 = l31.getAttribute("nickName"); l23 = l31.getAttribute("pic"); dbc15.innerHTML = "<div class=\"ChatName\"><a href=\"/members/"+l27.toLowerCase()+"\" onmouseover=\"stmu('"+l23+"',"+l32+");\" onmouseout=\"htm();\" class=\"NameAnchor\">" + l27 + "</a>:</div><div class=\"ChatMessage\">" + l34 + "</div>" + dbc15.innerHTML; } else if (l29!="0")  { if (l37 == "0" || l37 == "3") { l11 = true; l12 = l38; l13 = l34; l14 = l29; l15 = "0"; } if (l37 == "0" || l37 == "2" || l37 == "3") { l17 = "<div class=\"ChatName\">Private chat '"+l35+"' from <a href=\"/members/"+l38.toLowerCase()+"\" onmouseover=\"stmu('"+l39+"',"+l32+");\" onmouseout=\"htm();\" class=\"NameAnchor\">" + l38 + "</a>:</div><div class=\"ChatMessage\"><a href=\"/chat/k-" + l29 + "\">" + l36 + "</a></div>" + l17; } } else if (l30!="0") { if (l37 == "0" || l37 == "3") { l11 = true; l12 = l38; l13 = l34; l14 = "0"; l15 = l28; } if ((l37 == "0" || l37 == "2" || l37 == "3") && dbc14 != l28) { l17 = "<div class=\"ChatName\">Private chat from <a href=\"/members/"+l38.toLowerCase()+"\" onmouseover=\"stmu('"+l39+"',"+l32+");\" onmouseout=\"htm();\" class=\"NameAnchor\">" + l38 + "</a>:</div><div class=\"ChatMessage\"><a href=\"/members/"+l38.toLowerCase()+"\">" + l36 + "</a></div>" + l17; } } document.getElementById("ChatMessages").innerHTML=l33+" messages posted"; } else if (l21=="3") { var l31 = l20.getElementsByTagName("commentAlert").item(0); var l38 = l31.getAttribute("nickName"); var l32 = l31.getAttribute("stmu"); var l33 = l31.getAttribute("k"); var l40 = l31.getAttribute("thread"); var l41 = dbc10(l31); var l39 = l31.getAttribute("pic"); var l42 = l31.getAttribute("usrK"); l19 = l20.getAttribute("dateTime"); l17 = "<div class=\"ChatName\"><a href=\"/members/"+l38.toLowerCase()+"\" onmouseover=\"stmu('"+l39+"',"+l32+");\" onmouseout=\"htm();\" class=\"NameAnchor\">" + l38 + "</a>:</div><div class=\"ChatMessage\"><a href=\"" + l41 + "\">New "+(l40=="1"?"topic":"comment")+"</a></div>" + l17; } else if (l21=="4") { var l31 = l20.getElementsByTagName("privateMessageAlert").item(0); var l38 = l31.getAttribute("nickName"); var l32 = l31.getAttribute("stmu"); var l33 = l31.getAttribute("k"); var l43 = l31.getAttribute("invite"); var l44 = "New private message"; if (l43=="1") l44 = "Private message invite"; var l41 = dbc10(l31); var l39 = l31.getAttribute("pic"); var l42 = l31.getAttribute("usrK"); l19 = l20.getAttribute("dateTime"); l17 = "<div class=\"ChatName\"><a href=\"/members/"+l38.toLowerCase()+"\" onmouseover=\"stmu('"+l39+"',"+l32+");\" onmouseout=\"htm();\" class=\"NameAnchor\">" + l38 + "</a>:</div><div class=\"ChatMessage\"><a href=\"" + l41 + "\">" + l44 + "</a></div>" + l17; } else if (l21=="9") { var l31 = l20.getElementsByTagName("privateMessageAlert").item(0); var l38 = l31.getAttribute("nickName"); var l32 = l31.getAttribute("stmu"); var l33 = l31.getAttribute("k"); var l44 = "New invite"; var l41 = dbc10(l31); var l39 = l31.getAttribute("pic"); var l42 = l31.getAttribute("usrK"); l19 = l20.getAttribute("dateTime"); l17 = "<div class=\"ChatName\"><a href=\"/members/"+l38.toLowerCase()+"\" onmouseover=\"stmu('"+l39+"',"+l32+");\" onmouseout=\"htm();\" class=\"NameAnchor\">" + l38 + "</a>:</div><div class=\"ChatMessage\"><a href=\"" + l41 + "\">" + l44 + "</a></div>" + l17; } else if (l21=="10") { var l31 = l20.getElementsByTagName("groupNewsAlert").item(0); var l45 = l31.getAttribute("groupName"); var l46 = l31.getAttribute("groupUrl"); var l35 = l31.getAttribute("subject"); var l41 = dbc10(l31); var l39 = l31.getAttribute("pic"); l23 = l31.getAttribute("pic"); l25 = false; l26 = true; l19 = l20.getAttribute("dateTime"); l16 = "<div class=\"ChatName\"><a href=\""+l46.toLowerCase()+"\" class=\"NameAnchor\">" + l45 + "</a> news:</div><div class=\"ChatMessage\"><a href=\""+l41+"\">" + l35 + "</a></div>" + l16; } else if (l21=="5") { var l31 = l20.getElementsByTagName("lolAlert").item(0); var l38 = l31.getAttribute("nickName"); var l32 = l31.getAttribute("stmu"); var l33 = l31.getAttribute("k"); var l47 = dbc10(l31); var l39 = l31.getAttribute("pic"); var l48 = l31.getAttribute("usrK"); l19 = l20.getAttribute("dateTime"); l17 = "<div class=\"ChatName\"><a href=\"/members/"+l38.toLowerCase()+"\" onmouseover=\"stmu('"+l39+"',"+l32+");\" onmouseout=\"htm();\" class=\"NameAnchor\">" + l38 + "</a> laughed at:</div><div class=\"ChatMessage\">" + l47 + "</div>" + l17; } else if (l21=="6") { var l31 = l20.getElementsByTagName("signOn").item(0); var l38 = l31.getAttribute("nickName"); var l32 = l31.getAttribute("stmu"); var l39 = l31.getAttribute("pic"); var l42 = l31.getAttribute("usrK"); l19 = l20.getAttribute("dateTime"); l17 = "<div class=\"ChatAlert\"><a href=\"/members/"+l38.toLowerCase()+"\" onmouseover=\"stmu('"+l39+"',"+l32+");\" onmouseout=\"htm();\" class=\"NameAnchor\">" + l38 + "</a> logged on.</div>" + l17; } else if (l21=="8") { var l31 = l20.getElementsByTagName("signOff").item(0); var l38 = l31.getAttribute("nickName"); var l32 = l31.getAttribute("stmu"); var l39 = l31.getAttribute("pic"); var l42 = l31.getAttribute("usrK"); l19 = l20.getAttribute("dateTime"); l17 = "<div class=\"ChatAlert\"><a href=\"/members/"+l38.toLowerCase()+"\" onmouseover=\"stmu('"+l39+"',"+l32+");\" onmouseout=\"htm();\" class=\"NameAnchor\">" + l38 + "</a> logged off.</div>" + l17; } else if (l21=="7") { var l31 = l20.getElementsByTagName("instantPhoto").item(0); l27 = l31.getAttribute("nickName"); var l32 = l31.getAttribute("stmu"); var l33 = l31.getAttribute("k"); var l50 = dbc10(l31); l10 = true; l23 = l31.getAttribute("icon"); l25 = true; l26 = false; l24 = l31.getAttribute("k"); l28 = l31.getAttribute("usrK"); var l51 = l31.getAttribute("pic"); l18 = l20.getAttribute("dateTime"); l16 = "<div class=\"ChatName\"><a href=\"/members/"+l27.toLowerCase()+"\" onmouseover=\"stmu('"+l51+"',"+l32+");\" onmouseout=\"htm();\" class=\"NameAnchor\">" + l27 + "</a>:</div><div class=\"ChatMessage\"><a href=\"/photo-" + l33 + "\">New instant photo</a> <small>from " + l50 + "</small></div>" + l16; } if (!DbChatHidePic) { if (l25 && (dbc16 != l23) && (l23 != "null") && (l23 != "")) { dbc17.innerHTML = "<a href=\"/photo-" + l24 + "\"><img border=\"0\" src=\"" + StoragePath(l23) + "\" style=\"border-right:1px solid black;border-left:1px solid black;\" width=\"100\" height=\"100\"></a>"; dbc17.style.display=""; dbc16 = l23; } else if (l26 && (dbc16 != l23) && (l23 != "null") && (l23 != "")) { if ( l23 != "0") dbc17.innerHTML = "<a href=\""+l46.toLowerCase()+"\"><img border=\"0\" src=\"" + StoragePath(l23) + "\" style=\"border-right:1px solid black;border-left:1px solid black;\" width=\"100\" height=\"100\"></a>"; else dbc17.innerHTML = "<a href=\""+l46.toLowerCase()+"\"><img border=\"0\" src=\"/gfx/dsi-sign-100.png\" style=\"border-right:1px solid black;border-left:1px solid black;\" width=\"100\" height=\"100\"></a>"; dbc17.style.display=""; dbc16 = l23; } else { if ( l21!="2" && (dbc16 != l23) && (l23 != "null") && (l23 != "")) { if ( l23 != "0") dbc17.innerHTML = "<a href=\"/members/"+l27.toLowerCase()+"\"><img border=\"0\" src=\"" + StoragePath(l23) + "\" style=\"border-right:1px solid black;border-left:1px solid black;\" width=\"100\" height=\"100\"></a>"; else dbc17.innerHTML = "<a href=\"/members/"+l27.toLowerCase()+"\"><img border=\"0\" src=\"/gfx/dsi-sign-100.png\" style=\"border-right:1px solid black;border-left:1px solid black;\" width=\"100\" height=\"100\"></a>"; dbc17.style.display=""; dbc16 = l23; } } } if (  typeof(DbChatPrivate)!="undefined" &&  l21=="2" &&  ( (DbChatPrivateThreadK!="0" && DbChatPrivateThreadK == l29) ||  ( DbChatPrivateUsrK!="0" &&  dbc14!="0" && (DbChatPrivateUsrK == l28 || (dbc14 == l28 && DbChatPrivateUsrK == l30)) ) ) &&  (dbc18 != l23) &&  (l23 != "null") &&  (l23 != "") ) { if ( l23 != "0") dbc19.innerHTML = "<a href=\"/members/"+l27.toLowerCase()+"\"><img border=\"0\" src=\"" + StoragePath(l23) + "\" style=\"border-right:1px solid black;border-left:1px solid black;\" width=\"100\" height=\"100\"></a>"; else dbc19.innerHTML = "<a href=\"/members/"+l27.toLowerCase()+"\"><img border=\"0\" src=\"/gfx/dsi-sign-100.png\" style=\"border-right:1px solid black;border-left:1px solid black;\" width=\"100\" height=\"100\"></a>"; dbc19.style.display=""; dbc18 = l23; } } if (l16!="") { var l52 = "DbChatOldDiv"; if (dbc20!="") { document.getElementById("DbChatNew-" + dbc20).className="DbChatOldDiv"; l52 = "DbChatNewDiv"; } if (l18!="") dbc20 = l18; var l53 = ""; dbc21.innerHTML = "<div id=\"DbChatNew-" + dbc20 + "\">" + l53 + l16 + "</div>" + dbc21.innerHTML; document.getElementById("DbChatNew-" + dbc20).className=l52; } if (l17!="") { var l52 = "DbChatOldDiv"; if (dbc22!="") { document.getElementById("DbChatNewMessage-" + dbc22).className="DbChatOldDiv"; l52 = "DbChatNewDiv"; } if (l19!="") dbc22 = l19; dbc23.innerHTML = "<div id=\"DbChatNewMessage-" + dbc22 + "\">" + l17 + "</div>" + dbc23.innerHTML; document.getElementById("DbChatNewMessage-" + dbc22).className=l52; } dbc24.innerHTML = ""; for (var l54 in dbc25) { dbc26.style.display=""; dbc24.innerHTML = dbc25[l54]+dbc24.innerHTML; } if (l6=="1") { dbc27 = l3.getAttribute("lastGuid"); dbc28 = l3.getAttribute("lastGuidPublic"); } if (l11 && !l1) { if (l14!="0") { if(confirm("Private chat message from " + l12 + ":\n\n" + l13 + "\n\nDo you want to continue receiving pop-up alerts for this chat?\n(OK = Yes, Cancel = No)")) { } else { DbChatKillPopup(l14); } } else if (dbc14 != l15) { if(confirm("Private chat message from " + l12 + ":\n\n" + l13 + "\n\nDo you want to continue receiving pop-up alerts for this buddy?\n(OK = Yes, Cancel = Stop pop-ups for 15 mins)")) { } else { DbChatKillPopupBuddy(l15); } } } if(l3.getAttribute("timeout")=="0" && l3.getAttribute("wrongSession")=="0") { document.getElementById("ChatDivBlur").style.display="none"; document.getElementById("ChatDivStopped").style.display="none"; document.getElementById("ChatDivMain").style.display=""; if (typeof(DbChatPrivate)!="undefined") { document.getElementById("ChatDivBlurPrivate").style.display="none"; document.getElementById("ChatDivStoppedPrivate").style.display="none"; document.getElementById("ChatDivMainPrivate").style.display=""; } if (l9) { dbc29 = 2000; } else { dbc29 = dbc29 * 1.4; if (dbc29>8000) dbc29 = 8000; } var l55 = dbc30; if (l2) { var l56 = Math.random(); l55 = l56; dbc30 = l56; } setTimeout("DbChatRefresh(false, "+l55+");",dbc29); } else if(l3.getAttribute("wrongSession")=="1") { document.getElementById("ChatDivMain").style.display="none"; document.getElementById("ChatDivBlur").style.display=""; if (typeof(DbChatPrivate)!="undefined") { document.getElementById("ChatDivMainPrivate").style.display="none"; document.getElementById("ChatDivBlurPrivate").style.display=""; } } else if(l3.getAttribute("timeout")=="1") { document.getElementById("ChatDivMain").style.display="none"; document.getElementById("ChatDivStopped").style.display=""; if (typeof(DbChatPrivate)!="undefined") { document.getElementById("ChatDivMainPrivate").style.display="none"; document.getElementById("ChatDivStoppedPrivate").style.display=""; } } try { if(l3.getAttribute("exception")!=null && l3.getAttribute("exception").length>0) { DbChatDebug("[Exception: "+l3.getAttribute("exception")+"]"); } } catch(ex){} } } catch(ex) {     DbChatDebug(dbc7(l3)); DbChatDebug("[Error: "+ex.message+"]"); var l55 = dbc30; setTimeout("DbChatRefresh(false, "+l55+");",5000); } } } function dbc31(l23){ return l23.substr(0,2)+"/"+l23.substr(2,2)+"/"+l23; } function dbc32(l23){ return "s" + l23.substr(0,1); } function DbChatDebug(l0){ dbc23.innerHTML = "<div>"+l0+"</div>" + dbc23.innerHTML; } function DbChatContinue(){ document.getElementById("ChatDivStopped").style.display="none"; document.getElementById("ChatDivBlur").style.display="none"; document.getElementById("ChatDivMain").style.display=""; dbc33.value=""; if (typeof(DbChatPrivate)!="undefined") { document.getElementById("ChatDivStoppedPrivate").style.display="none"; document.getElementById("ChatDivBlurPrivate").style.display="none"; document.getElementById("ChatDivMainPrivate").style.display=""; dbc34.value=""; } DbChatSendMessage(); } function DbChatFocus(){ if (dbc33.value=="Enter your message here...") { dbc33.value = ""; } dbc35 = true; } function DbChatFocusPrivate(){ if (dbc34.value=="Enter your message here...") { dbc34.value = ""; } dbc36 = true; } function DbChatBlur(){ dbc35 = false; } function DbChatBlurPrivate(){ dbc36 = false; } /**  * ====================================================================  * About  * ====================================================================  * Sarissa is an ECMAScript library acting as a cross-browser wrapper for native XML APIs.  * The library supports Gecko based browsers like Mozilla and Firefox,  * Internet Explorer (5.5+ with MSXML3.0+), Konqueror, Safari and a little of Opera  * @version 0.9.7.6  * @author: Manos Batsis, mailto: mbatsis at users full stop sourceforge full stop net  * ====================================================================  * Licence  * ====================================================================  * Sarissa is free software distributed under the GNU GPL version 2 (see <a href="gpl.txt">gpl.txt</a>) or higher,   * GNU LGPL version 2.1 (see <a href="lgpl.txt">lgpl.txt</a>) or higher and Apache Software License 2.0 or higher   * (see <a href="asl.txt">asl.txt</a>). This means you can choose one of the three and use that if you like. If   * you make modifications under the ASL, i would appreciate it if you submitted those.  * In case your copy of Sarissa does not include the license texts, you may find  * them online in various formats at <a href="http:  * <a href="http:  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY   * KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE   * WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE   * AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR   * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR   * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE   * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.  */ /**  * <p>Sarissa is a utility class. Provides "static" methods for DOMDocument,   * DOM Node serialization to XML strings and other utility goodies.</p>  * @constructor  */ function Sarissa(){}; Sarissa.PARSED_OK = "Document contains no parsing errors"; Sarissa.PARSED_EMPTY = "Document is empty"; Sarissa.PARSED_UNKNOWN_ERROR = "Not well-formed or other error"; var _sarissa_iNsCounter = 0; var _SARISSA_IEPREFIX4XSLPARAM = ""; var _SARISSA_HAS_DOM_IMPLEMENTATION = document.implementation && true; var _SARISSA_HAS_DOM_CREATE_DOCUMENT = _SARISSA_HAS_DOM_IMPLEMENTATION && document.implementation.createDocument; var _SARISSA_HAS_DOM_FEATURE = _SARISSA_HAS_DOM_IMPLEMENTATION && document.implementation.hasFeature; var _SARISSA_IS_MOZ = _SARISSA_HAS_DOM_CREATE_DOCUMENT && _SARISSA_HAS_DOM_FEATURE; var _SARISSA_IS_SAFARI = (navigator.userAgent && navigator.vendor && (navigator.userAgent.toLowerCase().indexOf("applewebkit") != -1 || navigator.vendor.indexOf("Apple") != -1)); var _SARISSA_IS_IE = document.all && window.ActiveXObject && navigator.userAgent.toLowerCase().indexOf("msie") > -1  && navigator.userAgent.toLowerCase().indexOf("opera") == -1; if(!window.Node || !Node.ELEMENT_NODE){     Node = {ELEMENT_NODE: 1, ATTRIBUTE_NODE: 2, TEXT_NODE: 3, CDATA_SECTION_NODE: 4, ENTITY_REFERENCE_NODE: 5,  ENTITY_NODE: 6, PROCESSING_INSTRUCTION_NODE: 7, COMMENT_NODE: 8, DOCUMENT_NODE: 9, DOCUMENT_TYPE_NODE: 10, DOCUMENT_FRAGMENT_NODE: 11, NOTATION_NODE: 12}; }; if(typeof XMLDocument == "undefined" && typeof Document !="undefined"){ XMLDocument = Document; }  if(_SARISSA_IS_IE){          _SARISSA_IEPREFIX4XSLPARAM = "xsl:";          var _SARISSA_DOM_PROGID = "";     var _SARISSA_XMLHTTP_PROGID = "";     var _SARISSA_DOM_XMLWRITER = "";     /**      * Called when the Sarissa_xx.js file is parsed, to pick most recent      * ProgIDs for IE, then gets destroyed.      * @private      * @param idList an array of MSXML PROGIDs from which the most recent will be picked for a given object      * @param enabledList an array of arrays where each array has two items; the index of the PROGID for which a certain feature is enabled      */     Sarissa.pickRecentProgID = function (idList){                  var bFound = false;         for(var i=0; i < idList.length && !bFound; i++){             try{                 var oDoc = new ActiveXObject(idList[i]);                 o2Store = idList[i];                 bFound = true;             }catch (objException){                              };         };         if (!bFound) {             throw "Could not retreive a valid progID of Class: " + idList[idList.length-1]+". (original exception: "+e+")";         };         idList = null;         return o2Store;     };          _SARISSA_DOM_PROGID = null;     _SARISSA_THREADEDDOM_PROGID = null;     _SARISSA_XSLTEMPLATE_PROGID = null;     _SARISSA_XMLHTTP_PROGID = null;     if(!window.XMLHttpRequest){         /**          * Emulate XMLHttpRequest          * @constructor          */         XMLHttpRequest = function() {             if(!_SARISSA_XMLHTTP_PROGID){                 _SARISSA_XMLHTTP_PROGID = Sarissa.pickRecentProgID(["Msxml2.XMLHTTP.6.0", "MSXML2.XMLHTTP.3.0", "MSXML2.XMLHTTP", "Microsoft.XMLHTTP"]);             };             return new ActiveXObject(_SARISSA_XMLHTTP_PROGID);         };     };                              Sarissa.getDomDocument = function(sUri, sName){         if(!_SARISSA_DOM_PROGID){             _SARISSA_DOM_PROGID = Sarissa.pickRecentProgID(["Msxml2.DOMDocument.6.0", "Msxml2.DOMDocument.3.0", "MSXML2.DOMDocument", "MSXML.DOMDocument", "Microsoft.XMLDOM"]);         };         var oDoc = new ActiveXObject(_SARISSA_DOM_PROGID);                  if (sName){                                       var prefix = "";             if(sUri){                 if(sName.indexOf(":") > 1){                     prefix = sName.substring(0, sName.indexOf(":"));                     sName = sName.substring(sName.indexOf(":")+1);                  }else{                     prefix = "a" + (_sarissa_iNsCounter++);                 };             };                          if(sUri){                 oDoc.loadXML('<' + prefix+':'+sName + " xmlns:" + prefix + "=\"" + sUri + "\"" + " />");             } else {                 oDoc.loadXML('<' + sName + " />");             };         };         return oDoc;     };          Sarissa.getParseErrorText = function (oDoc) {         var parseErrorText = Sarissa.PARSED_OK;         if(oDoc.parseError.errorCode != 0){             parseErrorText = "XML Parsing Error: " + oDoc.parseError.reason +                  "\nLocation: " + oDoc.parseError.url +                  "\nLine Number " + oDoc.parseError.line + ", Column " +                  oDoc.parseError.linepos +                  ":\n" + oDoc.parseError.srcText +                 "\n";             for(var i = 0;  i < oDoc.parseError.linepos;i++){                 parseErrorText += "-";             };             parseErrorText +=  "^\n";         }         else if(oDoc.documentElement == null){             parseErrorText = Sarissa.PARSED_EMPTY;         };         return parseErrorText;     };          Sarissa.setXpathNamespaces = function(oDoc, sNsSet) {         oDoc.setProperty("SelectionLanguage", "XPath");         oDoc.setProperty("SelectionNamespaces", sNsSet);     };        /**      * Basic implementation of Mozilla's XSLTProcessor for IE.       * Reuses the same XSLT stylesheet for multiple transforms      * @constructor      */     XSLTProcessor = function(){         if(!_SARISSA_XSLTEMPLATE_PROGID){             _SARISSA_XSLTEMPLATE_PROGID = Sarissa.pickRecentProgID(["Msxml2.XSLTemplate.6.0", "MSXML2.XSLTemplate.3.0"]);         };         this.template = new ActiveXObject(_SARISSA_XSLTEMPLATE_PROGID);         this.processor = null;     };     /**      * Imports the given XSLT DOM and compiles it to a reusable transform      * <b>Note:</b> If the stylesheet was loaded from a URL and contains xsl:import or xsl:include elements,it will be reloaded to resolve those      * @argument xslDoc The XSLT DOMDocument to import      */     XSLTProcessor.prototype.importStylesheet = function(xslDoc){         if(!_SARISSA_THREADEDDOM_PROGID){             _SARISSA_THREADEDDOM_PROGID = Sarissa.pickRecentProgID(["MSXML2.FreeThreadedDOMDocument.6.0", "MSXML2.FreeThreadedDOMDocument.3.0"]);         };         xslDoc.setProperty("SelectionLanguage", "XPath");         xslDoc.setProperty("SelectionNamespaces", "xmlns:xsl='http:/"+"/www.w3.org/1999/XSL/Transform'");                  var converted = new ActiveXObject(_SARISSA_THREADEDDOM_PROGID);                  if(xslDoc.url && xslDoc.selectSingleNode("/"+"/xsl:*[local-name() = 'import' or local-name() = 'include']") != null){             converted.async = false;             if (_SARISSA_THREADEDDOM_PROGID == "MSXML2.FreeThreadedDOMDocument.6.0") {                  converted.setProperty("AllowDocumentFunction", true);                  converted.resolveExternals = true;              }             converted.load(xslDoc.url);         } else {             converted.loadXML(xslDoc.xml);         };         converted.setProperty("SelectionNamespaces", "xmlns:xsl='http:/"+"/www.w3.org/1999/XSL/Transform'");         var output = converted.selectSingleNode("/"+"/xsl:output");         this.outputMethod = output ? output.getAttribute("method") : "html";         this.template.stylesheet = converted;         this.processor = this.template.createProcessor();                  this.paramsSet = new Array();     };     /**      * Transform the given XML DOM and return the transformation result as a new DOM document      * @argument sourceDoc The XML DOMDocument to transform      * @return The transformation result as a DOM Document      */     XSLTProcessor.prototype.transformToDocument = function(sourceDoc){                  if(_SARISSA_THREADEDDOM_PROGID){             this.processor.input=sourceDoc;             var outDoc=new ActiveXObject(_SARISSA_DOM_PROGID);             this.processor.output=outDoc;             this.processor.transform();             return outDoc;         }         else{             if(!_SARISSA_DOM_XMLWRITER){                 _SARISSA_DOM_XMLWRITER = Sarissa.pickRecentProgID(["Msxml2.MXXMLWriter.6.0", "Msxml2.MXXMLWriter.3.0", "MSXML2.MXXMLWriter", "MSXML.MXXMLWriter", "Microsoft.XMLDOM"]);             };             this.processor.input = sourceDoc;             var outDoc = new ActiveXObject(_SARISSA_DOM_XMLWRITER);             this.processor.output = outDoc;              this.processor.transform();             var oDoc = new ActiveXObject(_SARISSA_DOM_PROGID);             oDoc.loadXML(outDoc.output+"");             return oDoc;         };     };          /**      * Transform the given XML DOM and return the transformation result as a new DOM fragment.      * <b>Note</b>: The xsl:output method must match the nature of the owner document (XML/HTML).      * @argument sourceDoc The XML DOMDocument to transform      * @argument ownerDoc The owner of the result fragment      * @return The transformation result as a DOM Document      */     XSLTProcessor.prototype.transformToFragment = function (sourceDoc, ownerDoc) {         this.processor.input = sourceDoc;         this.processor.transform();         var s = this.processor.output;         var f = ownerDoc.createDocumentFragment();         if (this.outputMethod == 'text') {             f.appendChild(ownerDoc.createTextNode(s));         } else if (ownerDoc.body && ownerDoc.body.innerHTML) {             var container = ownerDoc.createElement('div');             container.innerHTML = s;             while (container.hasChildNodes()) {                 f.appendChild(container.firstChild);             }         }         else {             var oDoc = new ActiveXObject(_SARISSA_DOM_PROGID);             if (s.substring(0, 5) == '<?xml') {                 s = s.substring(s.indexOf('?>') + 2);             }             var xml = ''.concat('<my>', s, '</my>');             oDoc.loadXML(xml);             var container = oDoc.documentElement;             while (container.hasChildNodes()) {                 f.appendChild(container.firstChild);             }         }         return f;     };          /**      * Set global XSLT parameter of the imported stylesheet      * @argument nsURI The parameter namespace URI      * @argument name The parameter base name      * @argument value The new parameter value      */     XSLTProcessor.prototype.setParameter = function(nsURI, name, value){                  if(nsURI){             this.processor.addParameter(name, value, nsURI);         }else{             this.processor.addParameter(name, value);         };                  if(!this.paramsSet[""+nsURI]){             this.paramsSet[""+nsURI] = new Array();         };         this.paramsSet[""+nsURI][name] = value;     };     /**      * Gets a parameter if previously set by setParameter. Returns null      * otherwise      * @argument name The parameter base name      * @argument value The new parameter value      * @return The parameter value if reviously set by setParameter, null otherwise      */     XSLTProcessor.prototype.getParameter = function(nsURI, name){         nsURI = nsURI || "";         if(this.paramsSet[nsURI] && this.paramsSet[nsURI][name]){             return this.paramsSet[nsURI][name];         }else{             return null;         };     };     /**      * Clear parameters (set them to default values as defined in the stylesheet itself)      */     XSLTProcessor.prototype.clearParameters = function(){         for(var nsURI in this.paramsSet){             for(var name in this.paramsSet[nsURI]){                 if(nsURI){                     this.processor.addParameter(name, null, nsURI);                 }else{                     this.processor.addParameter(name, null);                 };             };         };         this.paramsSet = new Array();     }; }else{ /* end IE initialization, try to deal with real browsers now ;-) */     if(_SARISSA_HAS_DOM_CREATE_DOCUMENT){         /**          * <p>Ensures the document was loaded correctly, otherwise sets the          * parseError to -1 to indicate something went wrong. Internal use</p>          * @private          */         Sarissa.__handleLoad__ = function(oDoc){             Sarissa.__setReadyState__(oDoc, 4);         };         /**         * <p>Attached by an event handler to the load event. Internal use.</p>         * @private         */         _sarissa_XMLDocument_onload = function(){             Sarissa.__handleLoad__(this);         };         /**          * <p>Sets the readyState property of the given DOM Document object.          * Internal use.</p>          * @private          * @argument oDoc the DOM Document object to fire the          *          readystatechange event          * @argument iReadyState the number to change the readystate property to          */         Sarissa.__setReadyState__ = function(oDoc, iReadyState){             oDoc.readyState = iReadyState;             oDoc.readystate = iReadyState;             if (oDoc.onreadystatechange != null && typeof oDoc.onreadystatechange == "function")                 oDoc.onreadystatechange();         };         Sarissa.getDomDocument = function(sUri, sName){             var oDoc = document.implementation.createDocument(sUri?sUri:null, sName?sName:null, null);             if(!oDoc.onreadystatechange){                              /**                 * <p>Emulate IE's onreadystatechange attribute</p>                 */                 oDoc.onreadystatechange = null;             };             if(!oDoc.readyState){                 /**                 * <p>Emulates IE's readyState property, which always gives an integer from 0 to 4:</p>                 * <ul><li>1 == LOADING,</li>                 * <li>2 == LOADED,</li>                 * <li>3 == INTERACTIVE,</li>                 * <li>4 == COMPLETED</li></ul>                 */                 oDoc.readyState = 0;             };             oDoc.addEventListener("load", _sarissa_XMLDocument_onload, false);             return oDoc;         };         if(window.XMLDocument){                      }         else if(_SARISSA_HAS_DOM_FEATURE && window.Document && !Document.prototype.load && document.implementation.hasFeature('LS', '3.0')){                          /**             * <p>Factory method to obtain a new DOM Document object</p>             * @argument sUri the namespace of the root node (if any)             * @argument sUri the local name of the root node (if any)             * @returns a new DOM Document             */             Sarissa.getDomDocument = function(sUri, sName){                 var oDoc = document.implementation.createDocument(sUri?sUri:null, sName?sName:null, null);                 return oDoc;             };         }         else {             Sarissa.getDomDocument = function(sUri, sName){                 var oDoc = document.implementation.createDocument(sUri?sUri:null, sName?sName:null, null);                                  if(oDoc && (sUri || sName) && !oDoc.documentElement){                     oDoc.appendChild(oDoc.createElementNS(sUri, sName));                 };                 return oDoc;             };         };     }; }; if(!window.DOMParser){     if(_SARISSA_IS_SAFARI){         /*          * DOMParser is a utility class, used to construct DOMDocuments from XML strings          * @constructor          */         DOMParser = function() { };         /**          * Construct a new DOM Document from the given XMLstring         * @param sXml the given XML string         * @param contentType the content type of the document the given string represents (one of text/xml, application/xml, application/xhtml+xml).          * @return a new DOM Document from the given XML string         */         DOMParser.prototype.parseFromString = function(sXml, contentType){             var xmlhttp = new XMLHttpRequest();             xmlhttp.open("GET", "data:text/xml;charset=utf-8," + encodeURIComponent(sXml), false);             xmlhttp.send(null);             return xmlhttp.responseXML;         };     }else if(Sarissa.getDomDocument && Sarissa.getDomDocument() && Sarissa.getDomDocument(null, "bar").xml){         DOMParser = function() { };         DOMParser.prototype.parseFromString = function(sXml, contentType){             var doc = Sarissa.getDomDocument();             doc.loadXML(sXml);             return doc;         };     }; }; if((typeof(document.importNode) == "undefined") && _SARISSA_IS_IE){     try{         /**         * Implementation of importNode for the context window document in IE         * @param oNode the Node to import         * @param bChildren whether to include the children of oNode         * @returns the imported node for further use         */         document.importNode = function(oNode, bChildren){             var tmp;             if(oNode.nodeName == "tbody" || oNode.nodeName == "tr"){                 tmp = document.createElement("table");             }             else if(oNode.nodeName == "td"){                 tmp = document.createElement("tr");             }             else if(oNode.nodeName == "option"){                 tmp = document.createElement("select");             }             else{                 tmp = document.createElement("div");             };             if(bChildren){                 tmp.innerHTML = oNode.xml ? oNode.xml : oNode.outerHTML;             }else{                 tmp.innerHTML = oNode.xml ? oNode.cloneNode(false).xml : oNode.cloneNode(false).outerHTML;             };             return tmp.getElementsByTagName("*")[0];         };     }catch(e){ }; }; if(!Sarissa.getParseErrorText){     /**      * <p>Returns a human readable description of the parsing error. Usefull      * for debugging. Tip: append the returned error string in a &lt;pre&gt;      * element if you want to render it.</p>      * <p>Many thanks to Christian Stocker for the initial patch.</p>      * @argument oDoc The target DOM document      * @returns The parsing error description of the target Document in      *          human readable form (preformated text)      */     Sarissa.getParseErrorText = function (oDoc){         var parseErrorText = Sarissa.PARSED_OK;         if(!oDoc.documentElement){             parseErrorText = Sarissa.PARSED_EMPTY;         } else if(oDoc.documentElement.tagName == "parsererror"){             parseErrorText = oDoc.documentElement.firstChild.data;             parseErrorText += "\n" +  oDoc.documentElement.firstChild.nextSibling.firstChild.data;         } else if(oDoc.getElementsByTagName("parsererror").length > 0){             var parsererror = oDoc.getElementsByTagName("parsererror")[0];             parseErrorText = Sarissa.getText(parsererror, true)+"\n";         } else if(oDoc.parseError && oDoc.parseError.errorCode != 0){             parseErrorText = Sarissa.PARSED_UNKNOWN_ERROR;         };         return parseErrorText;     }; }; Sarissa.getText = function(oNode, deep){     var s = "";     var nodes = oNode.childNodes;     for(var i=0; i < nodes.length; i++){         var node = nodes[i];         var nodeType = node.nodeType;         if(nodeType == Node.TEXT_NODE || nodeType == Node.CDATA_SECTION_NODE){             s += node.data;         } else if(deep == true                     && (nodeType == Node.ELEMENT_NODE                         || nodeType == Node.DOCUMENT_NODE                         || nodeType == Node.DOCUMENT_FRAGMENT_NODE)){             s += Sarissa.getText(node, true);         };     };     return s; }; if(!window.XMLSerializer      && Sarissa.getDomDocument      && Sarissa.getDomDocument("","foo", null).xml){     /**      * Utility class to serialize DOM Node objects to XML strings      * @constructor      */     XMLSerializer = function(){};     /**      * Serialize the given DOM Node to an XML string      * @param oNode the DOM Node to serialize      */     XMLSerializer.prototype.serializeToString = function(oNode) {         return oNode.xml;     }; }; /**  * strips tags from a markup string  */ Sarissa.stripTags = function (s) {     return s.replace(/<[^>]+>/g,""); }; /**  * <p>Deletes all child nodes of the given node</p>  * @argument oNode the Node to empty  */ Sarissa.clearChildNodes = function(oNode) {          while(oNode.firstChild) {         oNode.removeChild(oNode.firstChild);     }; }; /**  * <p> Copies the childNodes of nodeFrom to nodeTo</p>  * <p> <b>Note:</b> The second object's original content is deleted before   * the copy operation, unless you supply a true third parameter</p>  * @argument nodeFrom the Node to copy the childNodes from  * @argument nodeTo the Node to copy the childNodes to  * @argument bPreserveExisting whether to preserve the original content of nodeTo, default is false  */ Sarissa.copyChildNodes = function(nodeFrom, nodeTo, bPreserveExisting) {     if((!nodeFrom) || (!nodeTo)){         throw "Both source and destination nodes must be provided";     };     if(!bPreserveExisting){         Sarissa.clearChildNodes(nodeTo);     };     var ownerDoc = nodeTo.nodeType == Node.DOCUMENT_NODE ? nodeTo : nodeTo.ownerDocument;     var nodes = nodeFrom.childNodes;     if(typeof(ownerDoc.importNode) != "undefined")  {         for(var i=0;i < nodes.length;i++) {             nodeTo.appendChild(ownerDoc.importNode(nodes[i], true));         };     } else {         for(var i=0;i < nodes.length;i++) {             nodeTo.appendChild(nodes[i].cloneNode(true));         };     }; }; /**  * <p> Moves the childNodes of nodeFrom to nodeTo</p>  * <p> <b>Note:</b> The second object's original content is deleted before   * the move operation, unless you supply a true third parameter</p>  * @argument nodeFrom the Node to copy the childNodes from  * @argument nodeTo the Node to copy the childNodes to  * @argument bPreserveExisting whether to preserve the original content of nodeTo, default is  */  Sarissa.moveChildNodes = function(nodeFrom, nodeTo, bPreserveExisting) {     if((!nodeFrom) || (!nodeTo)){         throw "Both source and destination nodes must be provided";     };     if(!bPreserveExisting){         Sarissa.clearChildNodes(nodeTo);     };     var nodes = nodeFrom.childNodes;          if(nodeFrom.ownerDocument == nodeTo.ownerDocument){         while(nodeFrom.firstChild){             nodeTo.appendChild(nodeFrom.firstChild);         };     } else {         var ownerDoc = nodeTo.nodeType == Node.DOCUMENT_NODE ? nodeTo : nodeTo.ownerDocument;         if(typeof(ownerDoc.importNode) != "undefined") {            for(var i=0;i < nodes.length;i++) {                nodeTo.appendChild(ownerDoc.importNode(nodes[i], true));            };         }else{            for(var i=0;i < nodes.length;i++) {                nodeTo.appendChild(nodes[i].cloneNode(true));            };         };         Sarissa.clearChildNodes(nodeFrom);     }; }; /**   * <p>Serialize any object to an XML string. All properties are serialized using the property name  * as the XML element name. Array elements are rendered as <code>array-item</code> elements,   * using their index/key as the value of the <code>key</code> attribute.</p>  * @argument anyObject the object to serialize  * @argument objectName a name for that object  * @return the XML serializationj of the given object as a string  */ Sarissa.xmlize = function(anyObject, objectName, indentSpace){     indentSpace = indentSpace?indentSpace:'';     var s = indentSpace  + '<' + objectName + '>';     var isLeaf = false;     if(!(anyObject instanceof Object) || anyObject instanceof Number || anyObject instanceof String          || anyObject instanceof Boolean || anyObject instanceof Date){         s += Sarissa.escape(""+anyObject);         isLeaf = true;     }else{         s += "\n";         var itemKey = '';         var isArrayItem = anyObject instanceof Array;         for(var name in anyObject){             s += Sarissa.xmlize(anyObject[name], (isArrayItem?"array-item key=\""+name+"\"":name), indentSpace + "   ");         };         s += indentSpace;     };     return s += (objectName.indexOf(' ')!=-1?"</array-item>\n":"</" + objectName + ">\n"); }; /**   * Escape the given string chacters that correspond to the five predefined XML entities  * @param sXml the string to escape  */ Sarissa.escape = function(sXml){     return sXml.replace(/&/g, "&amp;")         .replace(/</g, "&lt;")         .replace(/>/g, "&gt;")         .replace(/"/g, "&quot;")         .replace(/'/g, "&apos;"); }; /**   * Unescape the given string. This turns the occurences of the predefined XML   * entities to become the characters they represent correspond to the five predefined XML entities  * @param sXml the string to unescape  */ Sarissa.unescape = function(sXml){     return sXml.replace(/&apos;/g,"'")         .replace(/&quot;/g,"\"")         .replace(/&gt;/g,">")         .replace(/&lt;/g,"<")         .replace(/&amp;/g,"&"); }; var dbc37 = navigator.userAgent.toLowerCase().indexOf("opera") > -1; var dbc38 = document.implementation && document.implementation.createDocument && !dbc37; var dbc39 = navigator.userAgent.toLowerCase().indexOf("msie") > -1 && !dbc38 && !dbc37; function dbc3(){ return Sarissa.getDomDocument("http:/"+"/www.dontstayin.com/dbchat","doc"); } function dbc5(){ return new XMLHttpRequest(); } function dbc40(l0) { return l0.responseXML; } function dbc7(l1) { return new XMLSerializer().serializeToString(l1); } function dbc41(l2,l3,l4){ var l5 = l2.createElement(l3); if (l4!="") { l5.appendChild(l2.createTextNode(l4)); } return l5; } function dbc42(l2,l6,l3,l4){ var l5 = dbc41(l2,l3,l4); l6.appendChild(l5); } function dbc10(l7){ return Sarissa.getText(l7); } function dbc4(l2){ return l2.documentElement; } function dbc43(l9){   var l10 = /\+/g;   return unescape(String(l9).replace(l10," ")); } DbChatSupportFileBuildTime="17:33:33";var DbChatServerExists = true;
