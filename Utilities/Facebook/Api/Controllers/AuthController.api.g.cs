//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3082
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// ------------------------------------------------------------------------------
// <auto-generated>
//     This API code was generated by the DanDoes.NET Facebook API Generator.
//     Facebook.Api.Generator v1.0.3412.20062
//     
//     The following documents were used to generate this code:
//		Facebook API Object Schema:	http://api.facebook.com/1.0/facebook.xsd
//		Facebook API Wiki:			http://wiki.developers.facebook.com/index.php/API
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Facebook.Api.Controllers {
    using System;
    using System.Collections.Generic;
    using System.Xml.Linq;
    using Facebook;
    
    
    public partial class AuthController : FacebookApiController {
        
        public AuthController(IFacebookContext facebookContext) : 
                base(facebookContext) {
        }
        
        /// <summary>Creates an <code>auth_token</code> to be passed in as a parameter to login.php and then to auth.getSession after the user has logged in.</summary>
        public FacebookResponse<String> CreateToken() {
            System.Collections.Generic.Dictionary<string, object> args = new System.Collections.Generic.Dictionary<string, object>();
            var response = this.ExecuteRequest<String>("Auth.createToken", args);
            return response;
        }
        
        /// <summary>Returns a temporary session secret associated to the current existing session, for use in a client-side component to an application.</summary>
        public FacebookResponse<String> PromoteSession() {
            System.Collections.Generic.Dictionary<string, object> args = new System.Collections.Generic.Dictionary<string, object>();
            var response = this.ExecuteRequest<String>("Auth.promoteSession", args);
            return response;
        }
        
        /// <summary>Expires the session indicated in the API call, for your application.</summary>
        public FacebookResponse<Boolean> ExpireSession() {
            System.Collections.Generic.Dictionary<string, object> args = new System.Collections.Generic.Dictionary<string, object>();
            var response = this.ExecuteRequest<Boolean>("Auth.expireSession", args);
            return response;
        }
        
        /// <summary>Removes a specific <a href="/index.php/Extended_permission" title="Extended permission">extended permission</a> that a user explicitly granted to your application.</summary>
        /// <param name="perm">The <a href="/index.php/Extended_permissions" title="Extended permissions">extended permission</a> to revoke.</param>
        public FacebookResponse<Boolean> RevokeExtendedPermission(String perm) {
            System.Collections.Generic.Dictionary<string, object> args = new System.Collections.Generic.Dictionary<string, object>();
            args.Add("perm", perm);
            var response = this.ExecuteRequest<Boolean>("Auth.revokeExtendedPermission", args);
            return response;
        }
        
        /// <summary>Removes a specific <a href="/index.php/Extended_permission" title="Extended permission">extended permission</a> that a user explicitly granted to your application.</summary>
        /// <param name="uid">The <a href="/index.php/User_ID" title="User ID">user ID</a> of the user whose <a href="/index.php/Extended_permissions" title="Extended permissions">extended permission</a> you want to revoke. If you don't specify this parameter, then you must have a valid session for the current user, and that session's user will have the specified permission revoked.</param>
        /// <param name="perm">The <a href="/index.php/Extended_permissions" title="Extended permissions">extended permission</a> to revoke.</param>
        public FacebookResponse<Boolean> RevokeExtendedPermission(Int64 uid, String perm) {
            System.Collections.Generic.Dictionary<string, object> args = new System.Collections.Generic.Dictionary<string, object>();
            args.Add("uid", uid);
            args.Add("perm", perm);
            var response = this.ExecuteRequest<Boolean>("Auth.revokeExtendedPermission", args);
            return response;
        }
        
        /// <summary>If this method is called for the logged in user, then no further API calls can be made on that user's behalf until the user decides to authorize the application again.</summary>
        public FacebookResponse<Boolean> RevokeAuthorization() {
            System.Collections.Generic.Dictionary<string, object> args = new System.Collections.Generic.Dictionary<string, object>();
            var response = this.ExecuteRequest<Boolean>("Auth.revokeAuthorization", args);
            return response;
        }
        
        /// <summary>If this method is called for the logged in user, then no further API calls can be made on that user's behalf until the user decides to authorize the application again.</summary>
        /// <param name="uid">User whose authorization should be revoked.  If not present, then it is expected that a valid session currently exists, and the current user will have their authorization revoked.</param>
        public FacebookResponse<Boolean> RevokeAuthorization(Int64 uid) {
            System.Collections.Generic.Dictionary<string, object> args = new System.Collections.Generic.Dictionary<string, object>();
            args.Add("uid", uid);
            var response = this.ExecuteRequest<Boolean>("Auth.revokeAuthorization", args);
            return response;
        }
    }
}
