//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3082
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// ------------------------------------------------------------------------------
// <auto-generated>
//     This API code was generated by the DanDoes.NET Facebook API Generator.
//     Facebook.Api.Generator v1.0.3412.20062
//     
//     The following documents were used to generate this code:
//		Facebook API Object Schema:	http://api.facebook.com/1.0/facebook.xsd
//		Facebook API Wiki:			http://wiki.developers.facebook.com/index.php/API
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Facebook.Api.Controllers {
    using System;
    using System.Collections.Generic;
    using System.Xml.Linq;
    using Facebook;
    
    
    public class NotificationsController : FacebookApiController {
        
        public NotificationsController(IFacebookContext facebookContext) : 
                base(facebookContext) {
        }
        
        /// <summary>Returns information on outstanding Facebook notifications for current session user.</summary>
        public FacebookResponse<Notifications> Get() {
            System.Collections.Generic.Dictionary<string, object> args = new System.Collections.Generic.Dictionary<string, object>();
            var response = this.ExecuteRequest<Notifications>("Notifications.get", args);
            return response;
        }
        
        /// <summary>Sends a notification to a set of users.</summary>
        /// <param name="toIds">Comma-separated list of recipient IDs. These must be either friends of the logged-in user or people who have added your application. To send a notification to the current logged-in user without a name prepended to the message, set <code>to_ids</code> to the empty string.</param>
        /// <param name="notification"><a href="/index.php/FBML" title="FBML">FBML</a> for the notifications page. Uses a stripped down version allowing only text and links.</param>
        public FacebookResponse<String> Send(String[] toIds, String notification) {
            System.Collections.Generic.Dictionary<string, object> args = new System.Collections.Generic.Dictionary<string, object>();
            args.Add("to_ids", toIds);
            args.Add("notification", notification);
            var response = this.ExecuteRequest<String>("Notifications.send", args);
            return response;
        }
        
        /// <summary>Sends a notification to a set of users.</summary>
        /// <param name="type">Specify whether the notification is a <code>user_to_user</code> one or an <code>app_to_user</code>. <i>(Default value is user_to_user.)</i></param>
        /// <param name="toIds">Comma-separated list of recipient IDs. These must be either friends of the logged-in user or people who have added your application. To send a notification to the current logged-in user without a name prepended to the message, set <code>to_ids</code> to the empty string.</param>
        /// <param name="notification"><a href="/index.php/FBML" title="FBML">FBML</a> for the notifications page. Uses a stripped down version allowing only text and links.</param>
        public FacebookResponse<String> Send(String type, String[] toIds, String notification) {
            System.Collections.Generic.Dictionary<string, object> args = new System.Collections.Generic.Dictionary<string, object>();
            args.Add("type", type);
            args.Add("to_ids", toIds);
            args.Add("notification", notification);
            var response = this.ExecuteRequest<String>("Notifications.send", args);
            return response;
        }
        
        /// <summary>Sends an email to the specified users who have the application.</summary>
        /// <param name="recipients">A comma-separated list of recipient IDs. The recipients must be people who have already added your application. You can email up to 100 people at a time.</param>
        /// <param name="subject">The subject of the email message.  As of 10/28/2008, the subject will accept a limited set of FBML tags, including names, and tags related to <a href="/index.php/Translating_Platform_Applications" title="Translating Platform Applications"> internationalization</a>.</param>
        /// <param name="text">The plain text version of the email content. You must include a non-empty value for at least one of either the <code>fbml</code> or <code>text</code> parameters.  The FBML input takes precedence, but if the given FBML value is invalid or cannot be rendered, then the text will be used instead.  There is currently no character limit on the length of either the text or FBML body.</param>
        /// <param name="fbml">The FBML version of the email. You must include a non-empty value for at least one of either the <code>fbml</code> or <code>text</code> parameters. The <code>fbml</code> parameter is a stripped-down set of FBML that allows only HTML/FBML tags that result in text, links, linebreaks, as well as tags related to <a href="/index.php/Translating_Platform_Applications" title="Translating Platform Applications"> internationalization</a>.</param>
        public FacebookResponse<String> SendEmail(String[] recipients, String subject, String text, String fbml) {
            System.Collections.Generic.Dictionary<string, object> args = new System.Collections.Generic.Dictionary<string, object>();
            args.Add("recipients", recipients);
            args.Add("subject", subject);
            args.Add("text", text);
            args.Add("fbml", fbml);
            var response = this.ExecuteRequest<String>("Notifications.sendEmail", args);
            return response;
        }
    }
}
