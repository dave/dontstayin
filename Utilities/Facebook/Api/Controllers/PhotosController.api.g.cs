//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3082
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// ------------------------------------------------------------------------------
// <auto-generated>
//     This API code was generated by the DanDoes.NET Facebook API Generator.
//     Facebook.Api.Generator v1.0.3412.20062
//     
//     The following documents were used to generate this code:
//		Facebook API Object Schema:	http://api.facebook.com/1.0/facebook.xsd
//		Facebook API Wiki:			http://wiki.developers.facebook.com/index.php/API
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Facebook.Api.Controllers {
    using System;
    using System.Collections.Generic;
    using System.Xml.Linq;
    using Facebook;
    
    
    public class PhotosController : FacebookApiController {
        
        public PhotosController(IFacebookContext facebookContext) : 
                base(facebookContext) {
        }
        
        /// <summary>Returns all visible photos according to the filters specified.</summary>
        /// <param name="subjId">Filter by photos tagged with this user. You must specify at least one of <code>subj_id</code>, <code>aid</code> or <code>pids</code>. The <code>subj_id</code> parameter has no default value, but if you pass one, it must be the user's <a href="/index.php/User_ID" title="User ID">user ID</a>.</param>
        /// <param name="aid">Filter by photos in this album. You must specify at least one of <code>subj_id</code>, <code>aid</code> or <code>pids</code>. The <code>aid</code> parameter has no default value. The <code>aid</code> cannot be longer than 50 characters.</param>
        /// <param name="pids">Filter by photos in this list. This is a comma-separated list of <code>pids</code>. You must specify at least one of <code>subj_id</code>, <code>aid</code> or <code>pids</code>. The <code>pids</code> parameter has no default value.</param>
        public FacebookResponse<FacebookList<Photo>> Get(Int64 subjId, String aid, String[] pids) {
            System.Collections.Generic.Dictionary<string, object> args = new System.Collections.Generic.Dictionary<string, object>();
            args.Add("subj_id", subjId);
            args.Add("aid", aid);
            args.Add("pids", pids);
            var response = this.ExecuteRequest<FacebookList<Photo>>("Photos.get", args);
            return response;
        }
        
        /// <summary>Returns metadata about all of the photo albums uploaded by the specified user.</summary>
        /// <param name="uid">Return albums created by this user. You must specify either <code>uid</code> or <code>aids</code>. The <code>uid</code> parameter has no default value.</param>
        /// <param name="aids">Return albums with aids in this list. This is a comma-separated list of aids. You must specify either <code>uid</code> or <code>aids</code>. The <code>aids</code> parameter has no default value.</param>
        public FacebookResponse<FacebookList<Album>> GetAlbums(Int64 uid, String[] aids) {
            System.Collections.Generic.Dictionary<string, object> args = new System.Collections.Generic.Dictionary<string, object>();
            args.Add("uid", uid);
            args.Add("aids", aids);
            var response = this.ExecuteRequest<FacebookList<Album>>("Photos.getAlbums", args);
            return response;
        }
        
        /// <summary>Returns the set of user tags on all photos specified.</summary>
        /// <param name="pids">The list of photos from which to extract photo tags. This is a comma-separated list of PIDs.</param>
        public FacebookResponse<FacebookList<PhotoTag>> GetTags(String[] pids) {
            System.Collections.Generic.Dictionary<string, object> args = new System.Collections.Generic.Dictionary<string, object>();
            args.Add("pids", pids);
            var response = this.ExecuteRequest<FacebookList<PhotoTag>>("Photos.getTags", args);
            return response;
        }
        
        /// <summary>Creates and returns a new album owned by the current session user.</summary>
        /// <param name="name">The album name.</param>
        public FacebookResponse<Album> CreateAlbum(String name) {
            System.Collections.Generic.Dictionary<string, object> args = new System.Collections.Generic.Dictionary<string, object>();
            args.Add("name", name);
            var response = this.ExecuteRequest<Album>("Photos.createAlbum", args);
            return response;
        }
        
        /// <summary>Creates and returns a new album owned by the current session user.</summary>
        /// <param name="name">The album name.</param>
        /// <param name="description">The album description.</param>
        public FacebookResponse<Album> CreateAlbum(String name, String description) {
            System.Collections.Generic.Dictionary<string, object> args = new System.Collections.Generic.Dictionary<string, object>();
            args.Add("name", name);
            args.Add("description", description);
            var response = this.ExecuteRequest<Album>("Photos.createAlbum", args);
            return response;
        }
        
        /// <summary>Creates and returns a new album owned by the current session user.</summary>
        /// <param name="name">The album name.</param>
        /// <param name="description">The album description.</param>
        /// <param name="location">The album location.</param>
        public FacebookResponse<Album> CreateAlbum(String name, String description, String location) {
            System.Collections.Generic.Dictionary<string, object> args = new System.Collections.Generic.Dictionary<string, object>();
            args.Add("name", name);
            args.Add("description", description);
            args.Add("location", location);
            var response = this.ExecuteRequest<Album>("Photos.createAlbum", args);
            return response;
        }
        
        /// <summary>Creates and returns a new album owned by the current session user.</summary>
        /// <param name="name">The album name.</param>
        /// <param name="description">The album description.</param>
        /// <param name="location">The album location.</param>
        /// <param name="visible">Visibility of the album.  One of <code>friends</code>, <code>friends-of-friends</code>, <code>networks</code>, <code>everyone</code>.</param>
        public FacebookResponse<Album> CreateAlbum(String name, String description, String location, String visible) {
            System.Collections.Generic.Dictionary<string, object> args = new System.Collections.Generic.Dictionary<string, object>();
            args.Add("name", name);
            args.Add("description", description);
            args.Add("location", location);
            args.Add("visible", visible);
            var response = this.ExecuteRequest<Album>("Photos.createAlbum", args);
            return response;
        }
        
        /// <summary>Creates and returns a new album owned by the current session user.</summary>
        /// <param name="uid">The <a href="/index.php/User_ID" title="User ID">user ID</a> of the user for whom you are creating the album. If this parameter is not specified, then it defaults to the session user. <br/><b>Note:</b> This parameter applies only to Web applications and is required by them only if the <code>session_key</code> is not specified. Facebook ignores this parameter if it is passed by a desktop application.</param>
        /// <param name="name">The album name.</param>
        public FacebookResponse<Album> CreateAlbum(Int64 uid, String name) {
            if ((this.FacebookContext.ApplicationType & ApplicationType.Website)!= ApplicationType.Website)throw new InvalidOperationException("This overload cannot be called in this context");
            System.Collections.Generic.Dictionary<string, object> args = new System.Collections.Generic.Dictionary<string, object>();
            args.Add("uid", uid);
            args.Add("name", name);
            var response = this.ExecuteRequest<Album>("Photos.createAlbum", args);
            return response;
        }
        
        /// <summary>Creates and returns a new album owned by the current session user.</summary>
        /// <param name="uid">The <a href="/index.php/User_ID" title="User ID">user ID</a> of the user for whom you are creating the album. If this parameter is not specified, then it defaults to the session user. <br/><b>Note:</b> This parameter applies only to Web applications and is required by them only if the <code>session_key</code> is not specified. Facebook ignores this parameter if it is passed by a desktop application.</param>
        /// <param name="name">The album name.</param>
        /// <param name="description">The album description.</param>
        public FacebookResponse<Album> CreateAlbum(Int64 uid, String name, String description) {
            if ((this.FacebookContext.ApplicationType & ApplicationType.Website)!= ApplicationType.Website)throw new InvalidOperationException("This overload cannot be called in this context");
            System.Collections.Generic.Dictionary<string, object> args = new System.Collections.Generic.Dictionary<string, object>();
            args.Add("uid", uid);
            args.Add("name", name);
            args.Add("description", description);
            var response = this.ExecuteRequest<Album>("Photos.createAlbum", args);
            return response;
        }
        
        /// <summary>Creates and returns a new album owned by the current session user.</summary>
        /// <param name="uid">The <a href="/index.php/User_ID" title="User ID">user ID</a> of the user for whom you are creating the album. If this parameter is not specified, then it defaults to the session user. <br/><b>Note:</b> This parameter applies only to Web applications and is required by them only if the <code>session_key</code> is not specified. Facebook ignores this parameter if it is passed by a desktop application.</param>
        /// <param name="name">The album name.</param>
        /// <param name="description">The album description.</param>
        /// <param name="location">The album location.</param>
        public FacebookResponse<Album> CreateAlbum(Int64 uid, String name, String description, String location) {
            if ((this.FacebookContext.ApplicationType & ApplicationType.Website)!= ApplicationType.Website)throw new InvalidOperationException("This overload cannot be called in this context");
            System.Collections.Generic.Dictionary<string, object> args = new System.Collections.Generic.Dictionary<string, object>();
            args.Add("uid", uid);
            args.Add("name", name);
            args.Add("description", description);
            args.Add("location", location);
            var response = this.ExecuteRequest<Album>("Photos.createAlbum", args);
            return response;
        }
        
        /// <summary>Creates and returns a new album owned by the current session user.</summary>
        /// <param name="uid">The <a href="/index.php/User_ID" title="User ID">user ID</a> of the user for whom you are creating the album. If this parameter is not specified, then it defaults to the session user. <br/><b>Note:</b> This parameter applies only to Web applications and is required by them only if the <code>session_key</code> is not specified. Facebook ignores this parameter if it is passed by a desktop application.</param>
        /// <param name="name">The album name.</param>
        /// <param name="description">The album description.</param>
        /// <param name="location">The album location.</param>
        /// <param name="visible">Visibility of the album.  One of <code>friends</code>, <code>friends-of-friends</code>, <code>networks</code>, <code>everyone</code>.</param>
        public FacebookResponse<Album> CreateAlbum(Int64 uid, String name, String description, String location, String visible) {
            if ((this.FacebookContext.ApplicationType & ApplicationType.Website)!= ApplicationType.Website)throw new InvalidOperationException("This overload cannot be called in this context");
            System.Collections.Generic.Dictionary<string, object> args = new System.Collections.Generic.Dictionary<string, object>();
            args.Add("uid", uid);
            args.Add("name", name);
            args.Add("description", description);
            args.Add("location", location);
            args.Add("visible", visible);
            var response = this.ExecuteRequest<Album>("Photos.createAlbum", args);
            return response;
        }
        
        /// <summary>Uploads a photo owned by the current session user and returns the new photo.</summary>
        /// <param name="aid">The album ID of the destination album. The <code>aid</code> cannot be longer than 50 characters.</param>
        /// <param name="caption">The caption of the photo.</param>
        /// <param name="uid">The <a href="/index.php/User_ID" title="User ID">user ID</a> of the user whose photo you are uploading. If this parameter is not specified, then it defaults to the session user. <br/><b>Note:</b> This parameter applies only to Web applications and is required by them only if the <code>session_key</code> is not specified. Facebook ignores this parameter if it is passed by a desktop application.</param>
        public FacebookResponse<Photo> Upload(String aid, String caption, Int64 uid) {
            System.Collections.Generic.Dictionary<string, object> args = new System.Collections.Generic.Dictionary<string, object>();
            args.Add("aid", aid);
            args.Add("caption", caption);
            args.Add("uid", uid);
            var response = this.ExecuteRequest<Photo>("Photos.upload", args);
            return response;
        }
        
        /// <summary>Adds a tag with the given information to a photo.</summary>
        /// <param name="pid">The ID of the photo to be tagged. The <code>pid</code> cannot be longer than 50 characters.</param>
        /// <param name="tagUid">The ID of the user being tagged. You must specify either the <code>tag_uid</code> or the <code>tag_text</code> parameter, but not both. They have no defaults and this parameter is ignored if <code>tag_text</code> is specified.</param>
        /// <param name="tagText">Some text identifying the person being tagged. You must specify either the <code>tag_uid</code> or the <code>tag_text</code> parameter, but not both. They have no defaults and this parameter is ignored if <code>tag_uid</code> is specified.</param>
        /// <param name="x">The horizontal position of the tag, as a percentage from 0 to 100, from the left of the photo.</param>
        /// <param name="y">The vertical position of the tag, as a percentage from 0 to 100, from the top of the photo.</param>
        public FacebookResponse<Boolean> AddTag(String pid, Int64 tagUid, String tagText, Single x, Single y) {
            System.Collections.Generic.Dictionary<string, object> args = new System.Collections.Generic.Dictionary<string, object>();
            args.Add("pid", pid);
            args.Add("tag_uid", tagUid);
            args.Add("tag_text", tagText);
            args.Add("x", x);
            args.Add("y", y);
            var response = this.ExecuteRequest<Boolean>("Photos.addTag", args);
            return response;
        }
        
        /// <summary>Adds a tag with the given information to a photo.</summary>
        /// <param name="tags">A JSON-serialized array representing a list of tags to be added to the photo. If the <code>tags</code> parameter is specified, the <code>x</code>, <code>y</code>, <code>tag_uid</code>, and <code>tag_text</code> parameters are ignored. Each tag in the list must specify: "x", "y", and either the user id "tag_uid" or free-form "tag_text" identifying the person being tagged. An example of this is the string
        /// [{"x":"30.0","y":"30.0","tag_uid":1234567890}, {"x":"70.0","y":"70.0","tag_text":"some person"}]</param>
        /// <param name="pid">The ID of the photo to be tagged. The <code>pid</code> cannot be longer than 50 characters.</param>
        /// <param name="tagUid">The ID of the user being tagged. You must specify either the <code>tag_uid</code> or the <code>tag_text</code> parameter, but not both. They have no defaults and this parameter is ignored if <code>tag_text</code> is specified.</param>
        /// <param name="tagText">Some text identifying the person being tagged. You must specify either the <code>tag_uid</code> or the <code>tag_text</code> parameter, but not both. They have no defaults and this parameter is ignored if <code>tag_uid</code> is specified.</param>
        /// <param name="x">The horizontal position of the tag, as a percentage from 0 to 100, from the left of the photo.</param>
        /// <param name="y">The vertical position of the tag, as a percentage from 0 to 100, from the top of the photo.</param>
        public FacebookResponse<Boolean> AddTag(String tags, String pid, Int64 tagUid, String tagText, Single x, Single y) {
            System.Collections.Generic.Dictionary<string, object> args = new System.Collections.Generic.Dictionary<string, object>();
            args.Add("tags", tags);
            args.Add("pid", pid);
            args.Add("tag_uid", tagUid);
            args.Add("tag_text", tagText);
            args.Add("x", x);
            args.Add("y", y);
            var response = this.ExecuteRequest<Boolean>("Photos.addTag", args);
            return response;
        }
        
        /// <summary>Adds a tag with the given information to a photo.</summary>
        /// <param name="ownerUid">The <a href="/index.php/User_ID" title="User ID">user ID</a> of the user whose photo you are tagging. If this parameter is not specified, then it defaults to the session user. <br/><b>Note:</b> This parameter applies only to Web applications and is required by them only if the <code>session_key</code> is not specified. Facebook ignores this parameter if it is passed by a desktop application.</param>
        /// <param name="tags">A JSON-serialized array representing a list of tags to be added to the photo. If the <code>tags</code> parameter is specified, the <code>x</code>, <code>y</code>, <code>tag_uid</code>, and <code>tag_text</code> parameters are ignored. Each tag in the list must specify: "x", "y", and either the user id "tag_uid" or free-form "tag_text" identifying the person being tagged. An example of this is the string
        /// [{"x":"30.0","y":"30.0","tag_uid":1234567890}, {"x":"70.0","y":"70.0","tag_text":"some person"}]</param>
        /// <param name="pid">The ID of the photo to be tagged. The <code>pid</code> cannot be longer than 50 characters.</param>
        /// <param name="tagUid">The ID of the user being tagged. You must specify either the <code>tag_uid</code> or the <code>tag_text</code> parameter, but not both. They have no defaults and this parameter is ignored if <code>tag_text</code> is specified.</param>
        /// <param name="tagText">Some text identifying the person being tagged. You must specify either the <code>tag_uid</code> or the <code>tag_text</code> parameter, but not both. They have no defaults and this parameter is ignored if <code>tag_uid</code> is specified.</param>
        /// <param name="x">The horizontal position of the tag, as a percentage from 0 to 100, from the left of the photo.</param>
        /// <param name="y">The vertical position of the tag, as a percentage from 0 to 100, from the top of the photo.</param>
        public FacebookResponse<Boolean> AddTag(Int64 ownerUid, String tags, String pid, Int64 tagUid, String tagText, Single x, Single y) {
            System.Collections.Generic.Dictionary<string, object> args = new System.Collections.Generic.Dictionary<string, object>();
            args.Add("owner_uid", ownerUid);
            args.Add("tags", tags);
            args.Add("pid", pid);
            args.Add("tag_uid", tagUid);
            args.Add("tag_text", tagText);
            args.Add("x", x);
            args.Add("y", y);
            var response = this.ExecuteRequest<Boolean>("Photos.addTag", args);
            return response;
        }
        
        /// <summary>Adds a tag with the given information to a photo.</summary>
        /// <param name="ownerUid">The <a href="/index.php/User_ID" title="User ID">user ID</a> of the user whose photo you are tagging. If this parameter is not specified, then it defaults to the session user. <br/><b>Note:</b> This parameter applies only to Web applications and is required by them only if the <code>session_key</code> is not specified. Facebook ignores this parameter if it is passed by a desktop application.</param>
        /// <param name="pid">The ID of the photo to be tagged. The <code>pid</code> cannot be longer than 50 characters.</param>
        /// <param name="tagUid">The ID of the user being tagged. You must specify either the <code>tag_uid</code> or the <code>tag_text</code> parameter, but not both. They have no defaults and this parameter is ignored if <code>tag_text</code> is specified.</param>
        /// <param name="tagText">Some text identifying the person being tagged. You must specify either the <code>tag_uid</code> or the <code>tag_text</code> parameter, but not both. They have no defaults and this parameter is ignored if <code>tag_uid</code> is specified.</param>
        /// <param name="x">The horizontal position of the tag, as a percentage from 0 to 100, from the left of the photo.</param>
        /// <param name="y">The vertical position of the tag, as a percentage from 0 to 100, from the top of the photo.</param>
        public FacebookResponse<Boolean> AddTag(Int64 ownerUid, String pid, Int64 tagUid, String tagText, Single x, Single y) {
            System.Collections.Generic.Dictionary<string, object> args = new System.Collections.Generic.Dictionary<string, object>();
            args.Add("owner_uid", ownerUid);
            args.Add("pid", pid);
            args.Add("tag_uid", tagUid);
            args.Add("tag_text", tagText);
            args.Add("x", x);
            args.Add("y", y);
            var response = this.ExecuteRequest<Boolean>("Photos.addTag", args);
            return response;
        }
    }
}
