//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3082
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// ------------------------------------------------------------------------------
// <auto-generated>
//     This API code was generated by the DanDoes.NET Facebook API Generator.
//     Facebook.Api.Generator v1.0.3412.20062
//     
//     The following documents were used to generate this code:
//		Facebook API Object Schema:	http://api.facebook.com/1.0/facebook.xsd
//		Facebook API Wiki:			http://wiki.developers.facebook.com/index.php/API
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Facebook.Api.Controllers {
    using System;
    using System.Collections.Generic;
    using System.Xml.Linq;
    using Facebook;
    
    
    public class StreamController : FacebookApiController {
        
        public StreamController(IFacebookContext facebookContext) : 
                base(facebookContext) {
        }
        
        /// <summary>This method returns an object (in JSON-encoded or XML format) that contains the stream from the perspective of a specific viewer -- a user or a Facebook Page.</summary>
        /// <param name="limit">A 32-bit int representing the total number of posts to return.  <i>(Default value is 30 posts.)</i></param>
        public FacebookResponse<StreamData> Get(Int64 limit) {
            System.Collections.Generic.Dictionary<string, object> args = new System.Collections.Generic.Dictionary<string, object>();
            args.Add("limit", limit);
            var response = this.ExecuteRequest<StreamData>("Stream.get", args);
            return response;
        }
        
        /// <summary>This method returns any filters a user has specified for his or her home page stream.</summary>
        public FacebookResponse<FacebookList<StreamFilter>> GetFilters() {
            System.Collections.Generic.Dictionary<string, object> args = new System.Collections.Generic.Dictionary<string, object>();
            var response = this.ExecuteRequest<FacebookList<StreamFilter>>("Stream.getFilters", args);
            return response;
        }
        
        /// <summary>This method returns any filters a user has specified for his or her home page stream.</summary>
        /// <param name="uid">The <a href="/index.php/User_ID" title="User ID">user ID</a> for the user whose stream filters you are returning.<br/><b>Note:</b> This parameter applies only to Web applications and is required by them only if the session_key is not specified. Facebook ignores this parameter if it is passed by a desktop application.</param>
        public FacebookResponse<FacebookList<StreamFilter>> GetFilters(Int64 uid) {
            System.Collections.Generic.Dictionary<string, object> args = new System.Collections.Generic.Dictionary<string, object>();
            args.Add("uid", uid);
            var response = this.ExecuteRequest<FacebookList<StreamFilter>>("Stream.getFilters", args);
            return response;
        }
        
        /// <summary>This method returns all comments associated with a post in a user's stream. This method returns comments only if the user who owns the post (that is, the user published the post to his or her profile) has <a href="/index.php/Authorizing_Applications" title="Authorizing Applications">authorized</a> your application.</summary>
        /// <param name="postId">The ID for the post for which you're retrieving the comments.</param>
        public FacebookResponse<FacebookList<Comment>> GetComments(String postId) {
            System.Collections.Generic.Dictionary<string, object> args = new System.Collections.Generic.Dictionary<string, object>();
            args.Add("post_id", postId);
            var response = this.ExecuteRequest<FacebookList<Comment>>("Stream.getComments", args);
            return response;
        }
        
        /// <summary>This method publishes a post into the stream on the user's Wall and News Feed. This post also appears in the user's friends' streams (their News Feeds).</summary>
        /// <param name="message">The message the user enters for the post at the time of publication.</param>
        public FacebookResponse<String> Publish(String message) {
            System.Collections.Generic.Dictionary<string, object> args = new System.Collections.Generic.Dictionary<string, object>();
            args.Add("message", message);
            var response = this.ExecuteRequest<String>("Stream.publish", args);
            return response;
        }
        
        /// <summary>This method removes a post from a user's Wall. The post also gets removed from the user's and the user's friends' News Feeds. Your application may only remove posts that were created through it.</summary>
        /// <param name="postId">The ID for the post you want to remove.</param>
        public FacebookResponse<Boolean> Remove(String postId) {
            System.Collections.Generic.Dictionary<string, object> args = new System.Collections.Generic.Dictionary<string, object>();
            args.Add("post_id", postId);
            var response = this.ExecuteRequest<Boolean>("Stream.remove", args);
            return response;
        }
        
        /// <summary>This method adds a comment to a post that was already published to a user's Wall.</summary>
        /// <param name="comment">The text of the comment. This is a plain text parameter only; you cannot format the comment with HTML or FBML.</param>
        /// <param name="postId">The ID for the post to which you're adding the comment.</param>
        public FacebookResponse<Int64> AddComment(String comment, String postId) {
            System.Collections.Generic.Dictionary<string, object> args = new System.Collections.Generic.Dictionary<string, object>();
            args.Add("comment", comment);
            args.Add("post_id", postId);
            var response = this.ExecuteRequest<Int64>("Stream.addComment", args);
            return response;
        }
        
        /// <summary>This method removes a comment from a post.</summary>
        /// <param name="commentId">The ID for the comment you want to remove.</param>
        public FacebookResponse<Boolean> RemoveComment(String commentId) {
            System.Collections.Generic.Dictionary<string, object> args = new System.Collections.Generic.Dictionary<string, object>();
            args.Add("comment_id", commentId);
            var response = this.ExecuteRequest<Boolean>("Stream.removeComment", args);
            return response;
        }
        
        /// <summary>This method lets a user add a like to any post the user can see. A user can like each post only once.</summary>
        /// <param name="postId">The ID of the post.</param>
        public FacebookResponse<Boolean> AddLike(String postId) {
            System.Collections.Generic.Dictionary<string, object> args = new System.Collections.Generic.Dictionary<string, object>();
            args.Add("post_id", postId);
            var response = this.ExecuteRequest<Boolean>("Stream.addLike", args);
            return response;
        }
        
        /// <summary>This method removes a like a user added to a post.</summary>
        /// <param name="postId">The ID of the post.</param>
        public FacebookResponse<Boolean> RemoveLike(String postId) {
            System.Collections.Generic.Dictionary<string, object> args = new System.Collections.Generic.Dictionary<string, object>();
            args.Add("post_id", postId);
            var response = this.ExecuteRequest<Boolean>("Stream.removeLike", args);
            return response;
        }
    }
}
