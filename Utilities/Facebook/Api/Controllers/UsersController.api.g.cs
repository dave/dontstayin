//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3082
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// ------------------------------------------------------------------------------
// <auto-generated>
//     This API code was generated by the DanDoes.NET Facebook API Generator.
//     Facebook.Api.Generator v1.0.3412.20062
//     
//     The following documents were used to generate this code:
//		Facebook API Object Schema:	http://api.facebook.com/1.0/facebook.xsd
//		Facebook API Wiki:			http://wiki.developers.facebook.com/index.php/API
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Facebook.Api.Controllers {
    using System;
    using System.Collections.Generic;
    using System.Xml.Linq;
    using Facebook;
    
    
    public class UsersController : FacebookApiController {
        
        public UsersController(IFacebookContext facebookContext) : 
                base(facebookContext) {
        }
        
        /// <summary>Returns a wide array of user-specific information for each user identifier passed, limited by the view of the current user.</summary>
        /// <param name="uids">List of <a href="/index.php/User_ID" title="User ID">user IDs</a>. This is a comma-separated list of user IDs.</param>
        /// <param name="fields">List of desired fields in return. This is a comma-separated list of field strings.</param>
        public FacebookResponse<FacebookList<User>> GetInfo(String[] uids, String[] fields) {
            System.Collections.Generic.Dictionary<string, object> args = new System.Collections.Generic.Dictionary<string, object>();
            args.Add("uids", uids);
            args.Add("fields", fields);
            var response = this.ExecuteRequest<FacebookList<User>>("Users.getInfo", args);
            return response;
        }
        
        /// <summary>Returns an array of user-specific information for use by the application itself.</summary>
        /// <param name="uids">List of user IDs. This is a comma-separated list of user IDs.</param>
        /// <param name="fields">List of desired fields in return. This is a comma-separated list of field strings and is limited to these entries only: <code>uid</code>, <code>first_name</code>, <code>last_name</code>, <code>name</code>, <code>timezone</code>, <code>birthday</code>, <code>sex</code>, <code>affiliations</code> (regional type only), <code>locale</code>, <code>profile_url</code>, <code>proxied_email</code>.</param>
        public FacebookResponse<FacebookList<User>> GetStandardInfo(String[] uids, String[] fields) {
            System.Collections.Generic.Dictionary<string, object> args = new System.Collections.Generic.Dictionary<string, object>();
            args.Add("uids", uids);
            args.Add("fields", fields);
            var response = this.ExecuteRequest<FacebookList<User>>("Users.getStandardInfo", args);
            return response;
        }
        
        /// <summary>Returns whether the user (either the session user or user specified by UID) has authorized the calling application.</summary>
        public FacebookResponse<Boolean> IsAppUser() {
            System.Collections.Generic.Dictionary<string, object> args = new System.Collections.Generic.Dictionary<string, object>();
            var response = this.ExecuteRequest<Boolean>("Users.isAppUser", args);
            return response;
        }
        
        /// <summary>Returns whether the user (either the session user or user specified by UID) has authorized the calling application.</summary>
        /// <param name="uid">The <a href="/index.php/User_ID" title="User ID">user ID</a> of the user who may have authorized the application. If this parameter is not specified, then it defaults to the session user. <br/><b>Note:</b> This parameter applies only to Web applications and is required by them only if the <code>session_key</code> is not specified. Facebook ignores this parameter if it is passed by a desktop application.</param>
        public FacebookResponse<Boolean> IsAppUser(Int64 uid) {
            System.Collections.Generic.Dictionary<string, object> args = new System.Collections.Generic.Dictionary<string, object>();
            args.Add("uid", uid);
            var response = this.ExecuteRequest<Boolean>("Users.isAppUser", args);
            return response;
        }
        
        /// <summary>Checks whether the user has opted in to an extended application permission.</summary>
        /// <param name="extPerm">String identifier for the extended permission that is being checked for. Must be one of <code>email</code>, <code>read_stream</code>, <code>publish_stream</code>, <code>offline_access</code>, <code>status_update</code>, <code>photo_upload</code>, {<code>create_event</code>, <code>rsvp_event</code>, <code>sms</code>, <code>video_upload</code>, <code>create_note</code>, <code>share_item</code>.</param>
        public FacebookResponse<Boolean> HasAppPermission(String extPerm) {
            System.Collections.Generic.Dictionary<string, object> args = new System.Collections.Generic.Dictionary<string, object>();
            args.Add("ext_perm", extPerm);
            var response = this.ExecuteRequest<Boolean>("Users.hasAppPermission", args);
            return response;
        }
        
        /// <summary>Checks whether the user has opted in to an extended application permission.</summary>
        /// <param name="uid">The <a href="/index.php/User_ID" title="User ID">user ID</a> of the user whose permissions you are checking. If this parameter is not specified, then it defaults to the session user. <br/><b>Note:</b> This parameter applies only to Web applications and is required by them only if the <code>session_key</code> is not specified. Facebook ignores this parameter if it is passed by a desktop application.</param>
        /// <param name="extPerm">String identifier for the extended permission that is being checked for. Must be one of <code>email</code>, <code>read_stream</code>, <code>publish_stream</code>, <code>offline_access</code>, <code>status_update</code>, <code>photo_upload</code>, {<code>create_event</code>, <code>rsvp_event</code>, <code>sms</code>, <code>video_upload</code>, <code>create_note</code>, <code>share_item</code>.</param>
        public FacebookResponse<Boolean> HasAppPermission(Int64 uid, String extPerm) {
            System.Collections.Generic.Dictionary<string, object> args = new System.Collections.Generic.Dictionary<string, object>();
            args.Add("uid", uid);
            args.Add("ext_perm", extPerm);
            var response = this.ExecuteRequest<Boolean>("Users.hasAppPermission", args);
            return response;
        }
        
        /// <summary>Gets the user ID (<code>uid</code>) associated with the current session.</summary>
        public FacebookResponse<Int64> GetLoggedInUser() {
            System.Collections.Generic.Dictionary<string, object> args = new System.Collections.Generic.Dictionary<string, object>();
            var response = this.ExecuteRequest<Int64>("Users.getLoggedInUser", args);
            return response;
        }
        
        /// <summary>Updates a user's Facebook status.</summary>
        /// <param name="clear">Set to true to clear the status.</param>
        [System.ObsoleteAttribute("Use Status.Set() instead.")]
        public FacebookResponse<Boolean> SetStatus(Boolean clear) {
            System.Collections.Generic.Dictionary<string, object> args = new System.Collections.Generic.Dictionary<string, object>();
            args.Add("clear", clear);
            var response = this.ExecuteRequest<Boolean>("Users.setStatus", args);
            return response;
        }
        
        /// <summary>Updates a user's Facebook status.</summary>
        /// <param name="status">The status message to set.<br/><b>Note:</b> The maximum message length is 160 characters; messages longer than that limit will be truncated and appended with "...".</param>
        [System.ObsoleteAttribute("Use Status.Set() instead.")]
        public FacebookResponse<Boolean> SetStatus(String status) {
            System.Collections.Generic.Dictionary<string, object> args = new System.Collections.Generic.Dictionary<string, object>();
            args.Add("status", status);
            var response = this.ExecuteRequest<Boolean>("Users.setStatus", args);
            return response;
        }
        
        /// <summary>Updates a user's Facebook status.</summary>
        /// <param name="status">The status message to set.<br/><b>Note:</b> The maximum message length is 160 characters; messages longer than that limit will be truncated and appended with "...".</param>
        /// <param name="statusIncludesVerb">If set to true, the word "is" will <i>not</i> be prepended to the status message.</param>
        [System.ObsoleteAttribute("Use Status.Set() instead.")]
        public FacebookResponse<Boolean> SetStatus(String status, Boolean statusIncludesVerb) {
            System.Collections.Generic.Dictionary<string, object> args = new System.Collections.Generic.Dictionary<string, object>();
            args.Add("status", status);
            args.Add("status_includes_verb", statusIncludesVerb);
            var response = this.ExecuteRequest<Boolean>("Users.setStatus", args);
            return response;
        }
        
        /// <summary>Updates a user's Facebook status.</summary>
        /// <param name="uid">The <a href="/index.php/User_ID" title="User ID">user ID</a> of the user whose status you are setting. If this parameter is not specified, then it defaults to the session user. <br/><b>Note:</b> This parameter applies only to Web applications and is required by them only if the <code>session_key</code> is not specified. Facebook ignores this parameter if it is passed by a desktop application.</param>
        /// <param name="clear">Set to true to clear the status.</param>
        [System.ObsoleteAttribute("Use Status.Set() instead.")]
        public FacebookResponse<Boolean> SetStatus(Int64 uid, Boolean clear) {
            if ((this.FacebookContext.ApplicationType & ApplicationType.Website)!= ApplicationType.Website)throw new InvalidOperationException("This overload cannot be called in this context");
            System.Collections.Generic.Dictionary<string, object> args = new System.Collections.Generic.Dictionary<string, object>();
            args.Add("uid", uid);
            args.Add("clear", clear);
            var response = this.ExecuteRequest<Boolean>("Users.setStatus", args);
            return response;
        }
        
        /// <summary>Updates a user's Facebook status.</summary>
        /// <param name="uid">The <a href="/index.php/User_ID" title="User ID">user ID</a> of the user whose status you are setting. If this parameter is not specified, then it defaults to the session user. <br/><b>Note:</b> This parameter applies only to Web applications and is required by them only if the <code>session_key</code> is not specified. Facebook ignores this parameter if it is passed by a desktop application.</param>
        /// <param name="status">The status message to set.<br/><b>Note:</b> The maximum message length is 160 characters; messages longer than that limit will be truncated and appended with "...".</param>
        [System.ObsoleteAttribute("Use Status.Set() instead.")]
        public FacebookResponse<Boolean> SetStatus(Int64 uid, String status) {
            if ((this.FacebookContext.ApplicationType & ApplicationType.Website)!= ApplicationType.Website)throw new InvalidOperationException("This overload cannot be called in this context");
            System.Collections.Generic.Dictionary<string, object> args = new System.Collections.Generic.Dictionary<string, object>();
            args.Add("uid", uid);
            args.Add("status", status);
            var response = this.ExecuteRequest<Boolean>("Users.setStatus", args);
            return response;
        }
        
        /// <summary>Updates a user's Facebook status.</summary>
        /// <param name="uid">The <a href="/index.php/User_ID" title="User ID">user ID</a> of the user whose status you are setting. If this parameter is not specified, then it defaults to the session user. <br/><b>Note:</b> This parameter applies only to Web applications and is required by them only if the <code>session_key</code> is not specified. Facebook ignores this parameter if it is passed by a desktop application.</param>
        /// <param name="status">The status message to set.<br/><b>Note:</b> The maximum message length is 160 characters; messages longer than that limit will be truncated and appended with "...".</param>
        /// <param name="statusIncludesVerb">If set to true, the word "is" will <i>not</i> be prepended to the status message.</param>
        [System.ObsoleteAttribute("Use Status.Set() instead.")]
        public FacebookResponse<Boolean> SetStatus(Int64 uid, String status, Boolean statusIncludesVerb) {
            if ((this.FacebookContext.ApplicationType & ApplicationType.Website)!= ApplicationType.Website)throw new InvalidOperationException("This overload cannot be called in this context");
            System.Collections.Generic.Dictionary<string, object> args = new System.Collections.Generic.Dictionary<string, object>();
            args.Add("uid", uid);
            args.Add("status", status);
            args.Add("status_includes_verb", statusIncludesVerb);
            var response = this.ExecuteRequest<Boolean>("Users.setStatus", args);
            return response;
        }
        
        /// <summary>Returns whether the user is a verified Facebook user.</summary>
        public FacebookResponse<Boolean> IsVerified() {
            System.Collections.Generic.Dictionary<string, object> args = new System.Collections.Generic.Dictionary<string, object>();
            var response = this.ExecuteRequest<Boolean>("Users.isVerified", args);
            return response;
        }
    }
}
